begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"tst_qvariant_common.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_include
include|#
directive|include
file|<pthread.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_comment
comment|// At least these specific versions of MSVC2010 has a severe performance problem with this file,
end_comment
begin_comment
comment|// taking about 1 hour to compile if the portion making use of variadic macros is enabled.
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_FULL_VER
argument_list|)
operator|&&
operator|(
name|_MSC_FULL_VER
operator|>=
literal|160030319
operator|)
operator|&&
operator|(
name|_MSC_FULL_VER
operator|<=
literal|160040219
operator|)
end_if
begin_define
DECL|macro|TST_QMETATYPE_BROKEN_COMPILER
define|#
directive|define
name|TST_QMETATYPE_BROKEN_COMPILER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// mingw gcc 4.8 also takes way too long, letting the CI system abort the test
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
end_if
begin_define
DECL|macro|TST_QMETATYPE_BROKEN_COMPILER
define|#
directive|define
name|TST_QMETATYPE_BROKEN_COMPILER
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMetaType::Type
argument_list|)
end_macro
begin_class
DECL|class|tst_QMetaType
class|class
name|tst_QMetaType
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
name|prop
name|READ
name|prop
name|WRITE
name|setProp
parameter_list|)
specifier|public
private|:
DECL|function|tst_QMetaType
name|tst_QMetaType
parameter_list|()
block|{
name|propList
operator|<<
literal|42
operator|<<
literal|"Hello"
expr_stmt|;
block|}
DECL|function|prop
name|QList
argument_list|<
name|QVariant
argument_list|>
name|prop
parameter_list|()
specifier|const
block|{
return|return
name|propList
return|;
block|}
DECL|function|setProp
name|void
name|setProp
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QVariant
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|propList
operator|=
name|list
expr_stmt|;
block|}
private|private:
DECL|member|propList
name|QList
argument_list|<
name|QVariant
argument_list|>
name|propList
decl_stmt|;
private|private
name|slots
private|:
name|void
name|defined
parameter_list|()
function_decl|;
name|void
name|threadSafety
parameter_list|()
function_decl|;
name|void
name|namespaces
parameter_list|()
function_decl|;
name|void
name|qMetaTypeId
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
name|void
name|normalizedTypes
parameter_list|()
function_decl|;
name|void
name|typeName_data
parameter_list|()
function_decl|;
name|void
name|typeName
parameter_list|()
function_decl|;
name|void
name|type_data
parameter_list|()
function_decl|;
name|void
name|type
parameter_list|()
function_decl|;
name|void
name|type_fromSubString_data
parameter_list|()
function_decl|;
name|void
name|type_fromSubString
parameter_list|()
function_decl|;
name|void
name|create_data
parameter_list|()
function_decl|;
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|createCopy_data
parameter_list|()
function_decl|;
name|void
name|createCopy
parameter_list|()
function_decl|;
name|void
name|sizeOf_data
parameter_list|()
function_decl|;
name|void
name|sizeOf
parameter_list|()
function_decl|;
name|void
name|sizeOfStaticLess_data
parameter_list|()
function_decl|;
name|void
name|sizeOfStaticLess
parameter_list|()
function_decl|;
name|void
name|flags_data
parameter_list|()
function_decl|;
name|void
name|flags
parameter_list|()
function_decl|;
name|void
name|flagsStaticLess_data
parameter_list|()
function_decl|;
name|void
name|flagsStaticLess
parameter_list|()
function_decl|;
name|void
name|flagsBinaryCompatibility5_0_data
parameter_list|()
function_decl|;
name|void
name|flagsBinaryCompatibility5_0
parameter_list|()
function_decl|;
name|void
name|construct_data
parameter_list|()
function_decl|;
name|void
name|construct
parameter_list|()
function_decl|;
name|void
name|constructCopy_data
parameter_list|()
function_decl|;
name|void
name|constructCopy
parameter_list|()
function_decl|;
name|void
name|typedefs
parameter_list|()
function_decl|;
name|void
name|registerType
parameter_list|()
function_decl|;
name|void
name|isRegistered_data
parameter_list|()
function_decl|;
name|void
name|isRegistered
parameter_list|()
function_decl|;
name|void
name|isRegisteredStaticLess_data
parameter_list|()
function_decl|;
name|void
name|isRegisteredStaticLess
parameter_list|()
function_decl|;
name|void
name|isEnum
parameter_list|()
function_decl|;
name|void
name|registerStreamBuiltin
parameter_list|()
function_decl|;
name|void
name|automaticTemplateRegistration
parameter_list|()
function_decl|;
name|void
name|saveAndLoadBuiltin_data
parameter_list|()
function_decl|;
name|void
name|saveAndLoadBuiltin
parameter_list|()
function_decl|;
name|void
name|saveAndLoadCustom
parameter_list|()
function_decl|;
name|void
name|metaObject_data
parameter_list|()
function_decl|;
name|void
name|metaObject
parameter_list|()
function_decl|;
name|void
name|constexprMetaTypeIds
parameter_list|()
function_decl|;
name|void
name|constRefs
parameter_list|()
function_decl|;
name|void
name|convertCustomType_data
parameter_list|()
function_decl|;
name|void
name|convertCustomType
parameter_list|()
function_decl|;
name|void
name|compareCustomType_data
parameter_list|()
function_decl|;
name|void
name|compareCustomType
parameter_list|()
function_decl|;
name|void
name|compareCustomEqualOnlyType
parameter_list|()
function_decl|;
name|void
name|customDebugStream
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|Foo
DECL|member|i
struct|struct
name|Foo
block|{
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_class
DECL|class|CustomQObject
class|class
name|CustomQObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomQObject
name|CustomQObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{     }
block|}
class|;
end_class
begin_class
DECL|class|CustomNonQObject
class|class
name|CustomNonQObject
block|{
block|}
class|;
end_class
begin_function
DECL|function|defined
name|void
name|tst_QMetaType
operator|::
name|defined
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|QMetaTypeId2
argument_list|<
name|QString
argument_list|>
operator|::
name|Defined
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|QMetaTypeId2
argument_list|<
name|Foo
argument_list|>
operator|::
name|Defined
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|QMetaTypeId2
argument_list|<
name|void
operator|*
argument_list|>
operator|::
name|Defined
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|QMetaTypeId2
argument_list|<
name|int
operator|*
argument_list|>
operator|::
name|Defined
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaTypeId2
argument_list|<
name|CustomQObject
operator|*
argument_list|>
operator|::
name|Defined
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaTypeId2
argument_list|<
name|CustomQObject
argument_list|>
operator|::
name|Defined
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaTypeId2
argument_list|<
name|CustomNonQObject
argument_list|>
operator|::
name|Defined
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaTypeId2
argument_list|<
name|CustomNonQObject
operator|*
argument_list|>
operator|::
name|Defined
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|Bar
struct|struct
name|Bar
block|{
DECL|function|Bar
name|Bar
parameter_list|()
block|{
comment|// check re-entrancy
if|if
condition|(
operator|!
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Foo
argument_list|>
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: re-entrancy test failed"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
operator|++
name|failureCount
expr_stmt|;
block|}
block|}
public|public:
DECL|member|failureCount
specifier|static
name|int
name|failureCount
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|failureCount
name|int
name|Bar
operator|::
name|failureCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MetaTypeTorturer
class|class
name|MetaTypeTorturer
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|Bar
name|space
index|[
literal|1
index|]
decl_stmt|;
name|space
index|[
literal|0
index|]
operator|.
name|~
name|Bar
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QByteArray
name|name
init|=
name|QString
argument_list|(
literal|"Bar%1_%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|size_t
operator|)
name|QThread
operator|::
name|currentThreadId
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|nm
init|=
name|name
operator|.
name|constData
argument_list|()
decl_stmt|;
name|int
name|tp
init|=
name|qRegisterMetaType
argument_list|<
name|Bar
argument_list|>
argument_list|(
name|nm
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
name|pthread_yield
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QMetaType
name|info
argument_list|(
name|tp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isValid
argument_list|()
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Wrong typeInfo returned for"
operator|<<
name|tp
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|isRegistered
argument_list|()
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|name
operator|<<
literal|"is not a registered metatype"
expr_stmt|;
block|}
if|if
condition|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|tp
argument_list|)
operator|!=
operator|(
name|QMetaType
operator|::
name|NeedsConstruction
operator||
name|QMetaType
operator|::
name|NeedsDestruction
operator|)
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Wrong typeInfo returned for"
operator|<<
name|tp
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|tp
argument_list|)
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
name|name
operator|<<
literal|"is not a registered metatype"
expr_stmt|;
block|}
if|if
condition|(
name|QMetaType
operator|::
name|type
argument_list|(
name|nm
argument_list|)
operator|!=
name|tp
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Wrong metatype returned for"
operator|<<
name|name
expr_stmt|;
block|}
if|if
condition|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|tp
argument_list|)
operator|!=
name|name
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Wrong typeName returned for"
operator|<<
name|tp
expr_stmt|;
block|}
name|void
modifier|*
name|buf1
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|tp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|void
modifier|*
name|buf2
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|tp
argument_list|,
name|buf1
argument_list|)
decl_stmt|;
name|void
modifier|*
name|buf3
init|=
name|info
operator|.
name|create
argument_list|(
name|tp
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|void
modifier|*
name|buf4
init|=
name|info
operator|.
name|create
argument_list|(
name|tp
argument_list|,
name|buf1
argument_list|)
decl_stmt|;
name|QMetaType
operator|::
name|construct
argument_list|(
name|tp
argument_list|,
name|space
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|tp
argument_list|,
name|space
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|construct
argument_list|(
name|tp
argument_list|,
name|space
argument_list|,
name|buf1
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|tp
argument_list|,
name|space
argument_list|)
expr_stmt|;
name|info
operator|.
name|construct
argument_list|(
name|space
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|info
operator|.
name|destruct
argument_list|(
name|space
argument_list|)
expr_stmt|;
name|info
operator|.
name|construct
argument_list|(
name|space
argument_list|,
name|buf1
argument_list|)
expr_stmt|;
name|info
operator|.
name|destruct
argument_list|(
name|space
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buf1
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Null buffer returned by QMetaType::create(tp, 0)"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buf2
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Null buffer returned by QMetaType::create(tp, buf)"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buf3
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Null buffer returned by info.create(tp, 0)"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buf4
condition|)
block|{
operator|++
name|failureCount
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Null buffer returned by infocreate(tp, buf)"
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destroy
argument_list|(
name|tp
argument_list|,
name|buf1
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|tp
argument_list|,
name|buf2
argument_list|)
expr_stmt|;
name|info
operator|.
name|destroy
argument_list|(
name|buf3
argument_list|)
expr_stmt|;
name|info
operator|.
name|destroy
argument_list|(
name|buf4
argument_list|)
expr_stmt|;
block|}
operator|new
operator|(
name|space
operator|)
name|Bar
expr_stmt|;
block|}
public|public:
DECL|function|MetaTypeTorturer
name|MetaTypeTorturer
parameter_list|()
member_init_list|:
name|failureCount
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|failureCount
name|int
name|failureCount
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|threadSafety
name|void
name|tst_QMetaType
operator|::
name|threadSafety
parameter_list|()
block|{
name|MetaTypeTorturer
name|t1
decl_stmt|;
name|MetaTypeTorturer
name|t2
decl_stmt|;
name|MetaTypeTorturer
name|t3
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t3
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t2
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t3
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t1
operator|.
name|failureCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t2
operator|.
name|failureCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t3
operator|.
name|failureCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Bar
operator|::
name|failureCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_namespace
DECL|namespace|TestSpace
namespace|namespace
name|TestSpace
block|{
DECL|struct|Foo
DECL|member|d
struct|struct
name|Foo
block|{
name|double
name|d
decl_stmt|;
block|}
struct|;
DECL|struct|QungTfu
struct|struct
name|QungTfu
block|{
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|TestSpace::Foo
argument_list|)
end_macro
begin_define
DECL|macro|ADD_TESTSPACE
define|#
directive|define
name|ADD_TESTSPACE
parameter_list|(
name|F
parameter_list|)
value|TestSpace::F
end_define
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|ADD_TESTSPACE(QungTfu)
argument_list|)
end_macro
begin_function
DECL|function|namespaces
name|void
name|tst_QMetaType
operator|::
name|namespaces
parameter_list|()
block|{
name|TestSpace
operator|::
name|Foo
name|nf
init|=
block|{
literal|11.12
block|}
decl_stmt|;
name|QVariant
name|v
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|nf
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|(
name|v
argument_list|)
operator|.
name|d
argument_list|,
literal|11.12
argument_list|)
expr_stmt|;
name|int
name|qungTfuId
init|=
name|qRegisterMetaType
argument_list|<
name|ADD_TESTSPACE
operator|(
name|QungTfu
operator|)
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|qungTfuId
argument_list|)
argument_list|,
literal|"TestSpace::QungTfu"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qMetaTypeId
name|void
name|tst_QMetaType
operator|::
name|qMetaTypeId
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|()
argument_list|,
name|QMetaType
operator|::
name|type
argument_list|(
literal|"TestSpace::Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|char
argument_list|>
argument_list|()
argument_list|,
name|QMetaType
operator|::
name|type
argument_list|(
literal|"char"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|uchar
argument_list|>
argument_list|()
argument_list|,
name|QMetaType
operator|::
name|type
argument_list|(
literal|"unsigned char"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
argument|::qMetaTypeId<signed char>()
argument_list|,
argument|QMetaType::type(
literal|"signed char"
argument|)
argument_list|)
empty_stmt|;
name|QVERIFY
argument_list|(
argument|::qMetaTypeId<signed char>() != ::qMetaTypeId<char>()
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|qint8
argument_list|>
argument_list|()
argument_list|,
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qint8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|properties
name|void
name|tst_QMetaType
operator|::
name|properties
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|(
literal|"QList<QVariant>"
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|property
argument_list|(
literal|"prop"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"QVariantList"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|values
init|=
name|v
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|values
operator|<<
literal|43
operator|<<
literal|"world"
expr_stmt|;
name|QVERIFY
argument_list|(
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|=
name|property
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toList
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|Whity
DECL|member|t
name|Whity
block|{
name|T
name|t
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Whity< int>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Whity<double>
argument_list|)
end_macro
begin_function
DECL|function|normalizedTypes
name|void
name|tst_QMetaType
operator|::
name|normalizedTypes
parameter_list|()
block|{
name|int
name|WhityIntId
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|WhityDoubleId
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"Whity<int>"
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|" Whity< int> "
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"Whity<int>"
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"Whity<double>"
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|" Whity< double> "
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"Whity<double>"
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|" Whity< int> "
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"Whity<int>"
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"Whity<int> "
argument_list|)
argument_list|,
name|WhityIntId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|(
literal|" Whity< double> "
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|(
literal|"Whity<double>"
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|(
literal|"Whity<double> "
argument_list|)
argument_list|,
name|WhityDoubleId
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|TYPENAME_DATA
define|#
directive|define
name|TYPENAME_DATA
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(#RealType)<< QMetaType::MetaTypeName<< #RealType;
end_define
begin_function
DECL|function|typeName_data
name|void
name|tst_QMetaType
operator|::
name|typeName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
literal|"aType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"aTypeName"
argument_list|)
expr_stmt|;
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|TYPENAME_DATA
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UnknownType"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|UnknownType
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whity<double>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Whity<double>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whity<int>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Whity<int>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Testspace::Foo"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TestSpace::Foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-124125534"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
operator|-
literal|124125534
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"124125534"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
literal|124125534
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// automatic registration
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QList<int>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QList<int>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QHash<int,int>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QHash<int,int>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMap<int,int>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QMap<int,int>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QVector<QList<int>>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QVector<QList<int>>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QVector<QMap<int,int>>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QVector<QMap<int,int>>"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|typeName
name|void
name|tst_QMetaType
operator|::
name|typeName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|aType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|aTypeName
argument_list|)
expr_stmt|;
name|QString
name|name
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|aType
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|name
argument_list|,
name|aTypeName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|QMetaObject
operator|::
name|normalizedType
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|type_data
name|void
name|tst_QMetaType
operator|::
name|type_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
literal|"aType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"aTypeName"
argument_list|)
expr_stmt|;
DECL|macro|TST_QMETATYPE_TYPE_DATA
define|#
directive|define
name|TST_QMETATYPE_TYPE_DATA
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(#RealType)<< QMetaType::MetaTypeName<< QByteArray( #RealType );
DECL|macro|TST_QMETATYPE_TYPE_DATA_ALIAS
define|#
directive|define
name|TST_QMETATYPE_TYPE_DATA_ALIAS
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|AliasType
parameter_list|,
name|RealTypeString
parameter_list|)
define|\
value|QTest::newRow(RealTypeString)<< QMetaType::MetaTypeName<< QByteArray( #AliasType );
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|UnknownType
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|TST_QMETATYPE_TYPE_DATA
argument_list|)
name|QT_FOR_EACH_STATIC_ALIAS_TYPE
argument_list|(
argument|TST_QMETATYPE_TYPE_DATA_ALIAS
argument_list|)
DECL|macro|TST_QMETATYPE_TYPE_DATA
undef|#
directive|undef
name|TST_QMETATYPE_TYPE_DATA
DECL|macro|TST_METATYPE_TYPE_DATA_ALIAS
undef|#
directive|undef
name|TST_METATYPE_TYPE_DATA_ALIAS
block|}
end_function
begin_function
DECL|function|type
name|void
name|tst_QMetaType
operator|::
name|type
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|aType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|aTypeName
argument_list|)
expr_stmt|;
comment|// QMetaType::type(QByteArray)
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
name|aTypeName
argument_list|)
argument_list|,
name|int
argument_list|(
name|aType
argument_list|)
argument_list|)
expr_stmt|;
comment|// QMetaType::type(const char *)
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
name|aTypeName
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|aType
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|type_fromSubString_data
name|void
name|tst_QMetaType
operator|::
name|type_fromSubString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedType"
argument_list|)
expr_stmt|;
comment|// The test string is defined in the test function below
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"boo"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
literal|3
operator|<<
literal|4
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"intbool"
argument_list|)
operator|<<
literal|0
operator|<<
literal|7
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Type"
argument_list|)
operator|<<
literal|7
operator|<<
literal|15
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
literal|22
operator|<<
literal|6
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Double
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|type_fromSubString
name|void
name|tst_QMetaType
operator|::
name|type_fromSubString
parameter_list|()
block|{
specifier|static
specifier|const
name|char
modifier|*
name|types
init|=
literal|"intboolQMetaType::Typedoublexxx"
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedType
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|types
operator|+
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
name|ba
argument_list|)
argument_list|,
name|expectedType
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|FOR_EACH_PRIMITIVE_METATYPE
define|#
directive|define
name|FOR_EACH_PRIMITIVE_METATYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|QT_FOR_EACH_STATIC_PRIMITIVE_TYPE(F) \     QT_FOR_EACH_STATIC_CORE_POINTER(F) \  #define FOR_EACH_COMPLEX_CORE_METATYPE(F) \     QT_FOR_EACH_STATIC_CORE_CLASS(F) \     QT_FOR_EACH_STATIC_CORE_TEMPLATE(F)
end_define
begin_define
DECL|macro|FOR_EACH_CORE_METATYPE
define|#
directive|define
name|FOR_EACH_CORE_METATYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|FOR_EACH_PRIMITIVE_METATYPE(F) \     FOR_EACH_COMPLEX_CORE_METATYPE(F) \  namespace {
end_define
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|static_assert_trigger
name|static_assert_trigger
block|{
name|Q_STATIC_ASSERT
argument_list|(
argument|( QMetaTypeId2<T>::IsBuiltIn )
argument_list|)
empty_stmt|;
DECL|enumerator|value
enum|enum
block|{
name|value
init|=
literal|true
block|}
enum|;
block|}
struct|;
end_struct
begin_define
DECL|macro|CHECK_BUILTIN
unit|}
define|#
directive|define
name|CHECK_BUILTIN
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
value|static_assert_trigger< RealType>::value&&
end_define
begin_expr_stmt
DECL|macro|CHECK_BUILTIN
unit|Q_STATIC_ASSERT
operator|(
operator|(
name|FOR_EACH_CORE_METATYPE
argument_list|(
name|CHECK_BUILTIN
argument_list|)
literal|true
operator|)
operator|)
expr_stmt|;
end_expr_stmt
begin_undef
DECL|macro|CHECK_BUILTIN
undef|#
directive|undef
name|CHECK_BUILTIN
end_undef
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
name|QMetaTypeId2
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
name|QMetaTypeId2
argument_list|<
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
name|QMetaTypeId2
argument_list|<
name|QObject
operator|*
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
argument_list|<
name|tst_QMetaType
operator|*
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// QObject subclass
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|(
operator|!
name|QMetaTypeId2
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
operator|::
name|IsBuiltIn
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
struct|struct
DECL|struct|MetaEnumToType
name|MetaEnumToType
block|{
block|}
struct|;
end_struct
begin_define
DECL|macro|DEFINE_META_ENUM_TO_TYPE
define|#
directive|define
name|DEFINE_META_ENUM_TO_TYPE
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|template<> \ struct MetaEnumToType<QMetaType::MetaTypeName> { \     typedef RealType Type; \ };
end_define
begin_macro
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|DEFINE_META_ENUM_TO_TYPE
argument_list|)
end_macro
begin_undef
DECL|macro|DEFINE_META_ENUM_TO_TYPE
undef|#
directive|undef
name|DEFINE_META_ENUM_TO_TYPE
end_undef
begin_struct
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
struct|struct
DECL|struct|DefaultValueFactory
name|DefaultValueFactory
block|{
DECL|typedef|Type
typedef|typedef
typename|typename
name|MetaEnumToType
argument_list|<
name|ID
argument_list|>
operator|::
name|Type
name|Type
typedef|;
DECL|function|create
specifier|static
name|Type
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|Type
return|;
block|}
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<>
struct|struct
DECL|struct|DefaultValueFactory
name|DefaultValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
block|{
DECL|typedef|Type
typedef|typedef
name|MetaEnumToType
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|Type
name|Type
typedef|;
DECL|function|create
specifier|static
name|Type
modifier|*
name|create
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
struct|struct
DECL|struct|DefaultValueTraits
name|DefaultValueTraits
block|{
comment|// By default we assume that a default-constructed value (new T) is
comment|// initialized; e.g. QCOMPARE(*(new T), *(new T)) should succeed
DECL|enumerator|IsInitialized
enum|enum
block|{
name|IsInitialized
init|=
literal|true
block|}
enum|;
block|}
struct|;
end_struct
begin_define
DECL|macro|DEFINE_NON_INITIALIZED_DEFAULT_VALUE_TRAITS
define|#
directive|define
name|DEFINE_NON_INITIALIZED_DEFAULT_VALUE_TRAITS
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|template<> struct DefaultValueTraits<QMetaType::MetaTypeName> { \     enum { IsInitialized = false }; \ };
end_define
begin_comment
comment|// Primitive types (int et al) aren't initialized
end_comment
begin_macro
name|FOR_EACH_PRIMITIVE_METATYPE
argument_list|(
argument|DEFINE_NON_INITIALIZED_DEFAULT_VALUE_TRAITS
argument_list|)
end_macro
begin_undef
DECL|macro|DEFINE_NON_INITIALIZED_DEFAULT_VALUE_TRAITS
undef|#
directive|undef
name|DEFINE_NON_INITIALIZED_DEFAULT_VALUE_TRAITS
end_undef
begin_struct
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
struct|struct
DECL|struct|TestValueFactory
name|TestValueFactory
block|{
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
block|{
DECL|function|create
specifier|static
name|void
modifier|*
name|create
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QString
argument_list|>
block|{
DECL|function|create
specifier|static
name|QString
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Int
argument_list|>
block|{
DECL|function|create
specifier|static
name|int
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|int
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|UInt
argument_list|>
block|{
DECL|function|create
specifier|static
name|uint
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|uint
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Bool
argument_list|>
block|{
DECL|function|create
specifier|static
name|bool
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|bool
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Double
argument_list|>
block|{
DECL|function|create
specifier|static
name|double
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|double
argument_list|(
literal|3.14
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QByteArray
argument_list|>
block|{
DECL|function|create
specifier|static
name|QByteArray
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QByteArray
argument_list|(
name|QByteArray
argument_list|(
literal|"QByteArray"
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QByteArrayList
argument_list|>
block|{
DECL|function|create
specifier|static
name|QByteArrayList
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QByteArrayList
argument_list|(
name|QByteArrayList
argument_list|()
operator|<<
literal|"Q"
operator|<<
literal|"Byte"
operator|<<
literal|"Array"
operator|<<
literal|"List"
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QVariantMap
argument_list|>
block|{
DECL|function|create
specifier|static
name|QVariantMap
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QVariantMap
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QVariantHash
argument_list|>
block|{
DECL|function|create
specifier|static
name|QVariantHash
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QVariantHash
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QVariantList
argument_list|>
block|{
DECL|function|create
specifier|static
name|QVariantList
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QVariantList
argument_list|(
name|QVariantList
argument_list|()
operator|<<
literal|123
operator|<<
literal|"Q"
operator|<<
literal|"Variant"
operator|<<
literal|"List"
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QChar
argument_list|>
block|{
DECL|function|create
specifier|static
name|QChar
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QChar
argument_list|(
name|QChar
argument_list|(
literal|'q'
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Long
argument_list|>
block|{
DECL|function|create
specifier|static
name|long
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|long
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Short
argument_list|>
block|{
DECL|function|create
specifier|static
name|short
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|short
argument_list|(
literal|0x1234
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Char
argument_list|>
block|{
DECL|function|create
specifier|static
name|char
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|char
argument_list|(
literal|'c'
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|ULong
argument_list|>
block|{
DECL|function|create
specifier|static
name|ulong
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|ulong
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|UShort
argument_list|>
block|{
DECL|function|create
specifier|static
name|ushort
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|ushort
argument_list|(
literal|0x1234
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|SChar
argument_list|>
block|{
DECL|function|create
specifier|static
name|signed
name|char
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|signed
name|char
argument_list|(
operator|-
literal|12
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|UChar
argument_list|>
block|{
DECL|function|create
specifier|static
name|uchar
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|uchar
argument_list|(
literal|'u'
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Float
argument_list|>
block|{
DECL|function|create
specifier|static
name|float
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|float
argument_list|(
literal|3.14f
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QObjectStar
argument_list|>
block|{
DECL|function|create
specifier|static
name|QObject
modifier|*
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QObject
operator|*
operator|(
literal|0
operator|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|VoidStar
argument_list|>
block|{
DECL|function|create
specifier|static
name|void
modifier|*
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|void
operator|*
operator|(
literal|0
operator|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|LongLong
argument_list|>
block|{
DECL|function|create
specifier|static
name|qlonglong
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|qlonglong
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|ULongLong
argument_list|>
block|{
DECL|function|create
specifier|static
name|qulonglong
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|qulonglong
argument_list|(
literal|0x12345678
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QStringList
argument_list|>
block|{
DECL|function|create
specifier|static
name|QStringList
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Q"
operator|<<
literal|"t"
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QBitArray
argument_list|>
block|{
DECL|function|create
specifier|static
name|QBitArray
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QBitArray
argument_list|(
name|QBitArray
argument_list|(
literal|256
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QDate
argument_list|>
block|{
DECL|function|create
specifier|static
name|QDate
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QDate
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QTime
argument_list|>
block|{
DECL|function|create
specifier|static
name|QTime
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QTime
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QDateTime
argument_list|>
block|{
DECL|function|create
specifier|static
name|QDateTime
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QDateTime
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QUrl
argument_list|>
block|{
DECL|function|create
specifier|static
name|QUrl
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QUrl
argument_list|(
literal|"http://www.example.org"
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QLocale
argument_list|>
block|{
DECL|function|create
specifier|static
name|QLocale
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QLocale
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QRect
argument_list|>
block|{
DECL|function|create
specifier|static
name|QRect
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QRect
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QRectF
argument_list|>
block|{
DECL|function|create
specifier|static
name|QRectF
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QRectF
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QSize
argument_list|>
block|{
DECL|function|create
specifier|static
name|QSize
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QSize
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QSizeF
argument_list|>
block|{
DECL|function|create
specifier|static
name|QSizeF
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QSizeF
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QLine
argument_list|>
block|{
DECL|function|create
specifier|static
name|QLine
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QLine
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QLineF
argument_list|>
block|{
DECL|function|create
specifier|static
name|QLineF
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QLineF
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QPoint
argument_list|>
block|{
DECL|function|create
specifier|static
name|QPoint
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QPointF
argument_list|>
block|{
DECL|function|create
specifier|static
name|QPointF
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QEasingCurve
argument_list|>
block|{
DECL|function|create
specifier|static
name|QEasingCurve
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|InOutElastic
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QUuid
argument_list|>
block|{
DECL|function|create
specifier|static
name|QUuid
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QUuid
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QModelIndex
argument_list|>
block|{
DECL|function|create
specifier|static
name|QModelIndex
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QModelIndex
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QRegExp
argument_list|>
block|{
DECL|function|create
specifier|static
name|QRegExp
modifier|*
name|create
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
return|return
operator|new
name|QRegExp
argument_list|(
literal|"A*"
argument_list|)
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QRegularExpression
argument_list|>
block|{
DECL|function|create
specifier|static
name|QRegularExpression
modifier|*
name|create
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
return|return
operator|new
name|QRegularExpression
argument_list|(
literal|"abc.*def"
argument_list|)
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QJsonValue
argument_list|>
block|{
DECL|function|create
specifier|static
name|QJsonValue
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QJsonValue
argument_list|(
literal|123.
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QJsonObject
argument_list|>
block|{
DECL|function|create
specifier|static
name|QJsonObject
modifier|*
name|create
parameter_list|()
block|{
name|QJsonObject
modifier|*
name|o
init|=
operator|new
name|QJsonObject
argument_list|()
decl_stmt|;
name|o
operator|->
name|insert
argument_list|(
literal|"a"
argument_list|,
literal|123.
argument_list|)
expr_stmt|;
name|o
operator|->
name|insert
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|o
operator|->
name|insert
argument_list|(
literal|"c"
argument_list|,
name|QJsonValue
operator|::
name|Null
argument_list|)
expr_stmt|;
name|o
operator|->
name|insert
argument_list|(
literal|"d"
argument_list|,
name|QLatin1String
argument_list|(
literal|"ciao"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QJsonArray
argument_list|>
block|{
DECL|function|create
specifier|static
name|QJsonArray
modifier|*
name|create
parameter_list|()
block|{
name|QJsonArray
modifier|*
name|a
init|=
operator|new
name|QJsonArray
argument_list|()
decl_stmt|;
name|a
operator|->
name|append
argument_list|(
literal|123.
argument_list|)
expr_stmt|;
name|a
operator|->
name|append
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|->
name|append
argument_list|(
name|QJsonValue
operator|::
name|Null
argument_list|)
expr_stmt|;
name|a
operator|->
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"ciao"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QJsonDocument
argument_list|>
block|{
DECL|function|create
specifier|static
name|QJsonDocument
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QJsonDocument
argument_list|(
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
literal|"{ 'foo': 123, 'bar': [true, null, 'ciao'] }"
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|TestValueFactory
template|template
parameter_list|<>
struct|struct
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|QVariant
argument_list|>
block|{
DECL|function|create
specifier|static
name|QVariant
modifier|*
name|create
parameter_list|()
block|{
return|return
operator|new
name|QVariant
argument_list|(
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Q"
operator|<<
literal|"t"
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|create_data
name|void
name|tst_QMetaType
operator|::
name|create_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
DECL|macro|ADD_METATYPE_TEST_ROW
define|#
directive|define
name|ADD_METATYPE_TEST_ROW
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(QMetaType::typeName(QMetaType::MetaTypeName))<< QMetaType::MetaTypeName;
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
DECL|macro|ADD_METATYPE_TEST_ROW
undef|#
directive|undef
name|ADD_METATYPE_TEST_ROW
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
DECL|function|testCreateHelper
specifier|static
name|void
name|testCreateHelper
parameter_list|()
block|{
typedef|typedef
typename|typename
name|MetaEnumToType
argument_list|<
name|ID
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|QMetaType
name|info
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual1
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual2
init|=
name|info
operator|.
name|create
argument_list|()
decl_stmt|;
if|if
condition|(
name|DefaultValueTraits
argument_list|<
name|ID
argument_list|>
operator|::
name|IsInitialized
condition|)
block|{
name|Type
modifier|*
name|expected
init|=
name|DefaultValueFactory
argument_list|<
name|ID
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual1
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual2
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
operator|delete
name|expected
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destroy
argument_list|(
name|ID
argument_list|,
name|actual1
argument_list|)
expr_stmt|;
name|info
operator|.
name|destroy
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|testCreateHelper
name|void
name|testCreateHelper
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
parameter_list|()
block|{
name|void
modifier|*
name|actual
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|)
decl_stmt|;
if|if
condition|(
name|DefaultValueTraits
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|IsInitialized
condition|)
block|{
name|QVERIFY
argument_list|(
name|DefaultValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|TypeTestFunction
typedef|typedef
name|void
function_decl|(
modifier|*
name|TypeTestFunction
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_function
DECL|function|create
name|void
name|tst_QMetaType
operator|::
name|create
parameter_list|()
block|{
struct|struct
name|TypeTestFunctionGetter
block|{
specifier|static
name|TypeTestFunction
name|get
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
DECL|macro|RETURN_CREATE_FUNCTION
define|#
directive|define
name|RETURN_CREATE_FUNCTION
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|case QMetaType::MetaTypeName: \             return testCreateHelper<QMetaType::MetaTypeName>;
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|RETURN_CREATE_FUNCTION
argument_list|)
DECL|macro|RETURN_CREATE_FUNCTION
undef|#
directive|undef
name|RETURN_CREATE_FUNCTION
block|}
return|return
literal|0
return|;
block|}
block|}
struct|;
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|TypeTestFunctionGetter
operator|::
name|get
function_decl|(
name|type
function_decl|)
parameter_list|()
function_decl|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
DECL|function|testCreateCopyHelper
specifier|static
name|void
name|testCreateCopyHelper
parameter_list|()
block|{
typedef|typedef
typename|typename
name|MetaEnumToType
argument_list|<
name|ID
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|Type
modifier|*
name|expected
init|=
name|TestValueFactory
argument_list|<
name|ID
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|QMetaType
name|info
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual1
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|ID
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual2
init|=
name|info
operator|.
name|create
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual1
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual2
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|ID
argument_list|,
name|actual1
argument_list|)
expr_stmt|;
name|info
operator|.
name|destroy
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
operator|delete
name|expected
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|testCreateCopyHelper
name|void
name|testCreateCopyHelper
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
parameter_list|()
block|{
typedef|typedef
name|MetaEnumToType
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|Type
modifier|*
name|expected
init|=
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|void
modifier|*
name|actual
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCopy_data
name|void
name|tst_QMetaType
operator|::
name|createCopy_data
parameter_list|()
block|{
name|create_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createCopy
name|void
name|tst_QMetaType
operator|::
name|createCopy
parameter_list|()
block|{
struct|struct
name|TypeTestFunctionGetter
block|{
specifier|static
name|TypeTestFunction
name|get
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
DECL|macro|RETURN_CREATE_COPY_FUNCTION
define|#
directive|define
name|RETURN_CREATE_COPY_FUNCTION
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|case QMetaType::MetaTypeName: \             return testCreateCopyHelper<QMetaType::MetaTypeName>;
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|RETURN_CREATE_COPY_FUNCTION
argument_list|)
DECL|macro|RETURN_CREATE_COPY_FUNCTION
undef|#
directive|undef
name|RETURN_CREATE_COPY_FUNCTION
block|}
return|return
literal|0
return|;
block|}
block|}
struct|;
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|TypeTestFunctionGetter
operator|::
name|get
function_decl|(
name|type
function_decl|)
parameter_list|()
function_decl|;
block|}
end_function
begin_function
DECL|function|sizeOf_data
name|void
name|tst_QMetaType
operator|::
name|sizeOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UnknownType"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|UnknownType
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
expr_stmt|;
DECL|macro|ADD_METATYPE_TEST_ROW
define|#
directive|define
name|ADD_METATYPE_TEST_ROW
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(#RealType)<< QMetaType::MetaTypeName<< size_t(QTypeInfo<RealType>::sizeOf);
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
DECL|macro|ADD_METATYPE_TEST_ROW
undef|#
directive|undef
name|ADD_METATYPE_TEST_ROW
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whity<double>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
sizeof|sizeof
argument_list|(
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whity<int>"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
argument_list|)
operator|<<
sizeof|sizeof
argument_list|(
name|Whity
argument_list|<
name|int
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Testspace::Foo"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QMetaType
operator|::
name|Type
argument_list|>
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|()
argument_list|)
operator|<<
sizeof|sizeof
argument_list|(
name|TestSpace
operator|::
name|Foo
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-124125534"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
operator|-
literal|124125534
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"124125534"
argument_list|)
operator|<<
name|QMetaType
operator|::
name|Type
argument_list|(
literal|124125534
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeOf
name|void
name|tst_QMetaType
operator|::
name|sizeOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|QMetaType
operator|::
name|sizeOf
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeOfStaticLess_data
name|void
name|tst_QMetaType
operator|::
name|sizeOfStaticLess_data
parameter_list|()
block|{
name|sizeOf_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeOfStaticLess
name|void
name|tst_QMetaType
operator|::
name|sizeOfStaticLess
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|QMetaType
argument_list|(
name|type
argument_list|)
operator|.
name|sizeOf
argument_list|()
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|CustomMovable
struct|struct
name|CustomMovable
block|{
block|}
struct|;
end_struct
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|CustomMovable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
parameter_list|(
name|CustomMovable
parameter_list|)
function_decl|;
end_function_decl
begin_class
DECL|class|CustomObject
class|class
name|CustomObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomObject
name|CustomObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{      }
block|}
class|;
end_class
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|SecondBase
struct|struct
name|SecondBase
block|{
block|}
struct|;
end_struct
begin_class
DECL|class|CustomMultiInheritanceObject
class|class
name|CustomMultiInheritanceObject
super|:
specifier|public
name|QObject
super|,
name|SecondBase
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomMultiInheritanceObject
name|CustomMultiInheritanceObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{      }
block|}
class|;
end_class
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomMultiInheritanceObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|C
DECL|member|_
class|class
name|C
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|M
DECL|member|_
class|class
name|M
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|P
DECL|member|_
class|class
name|P
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|M
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|P
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_comment
comment|// avoid the comma:
end_comment
begin_typedef
DECL|typedef|QPairCC
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|C
argument_list|>
name|QPairCC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairCM
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|M
argument_list|>
name|QPairCM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairCP
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|P
argument_list|>
name|QPairCP
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMC
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|C
argument_list|>
name|QPairMC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMM
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|M
argument_list|>
name|QPairMM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMP
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|P
argument_list|>
name|QPairMP
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPC
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|C
argument_list|>
name|QPairPC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPM
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|M
argument_list|>
name|QPairPM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPP
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|P
argument_list|>
name|QPairPP
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairCC
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairCM
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairCP
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairMC
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairMM
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairMP
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairPC
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPairPM
argument_list|)
end_macro
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|QPairPP
argument_list|)
expr|enum
DECL|enum|FlagsDataEnum
name|FlagsDataEnum
block|{}
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|FlagsDataEnum
name|Q_DECLARE_METATYPE
argument_list|(
name|FlagsDataEnum
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|flags_data
name|void
name|tst_QMetaType
operator|::
name|flags_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isMovable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isComplex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isPointerToQObject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isEnum"
argument_list|)
expr_stmt|;
DECL|macro|ADD_METATYPE_TEST_ROW
define|#
directive|define
name|ADD_METATYPE_TEST_ROW
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(#RealType)<< MetaTypeId \<< bool(!QTypeInfo<RealType>::isStatic) \<< bool(QTypeInfo<RealType>::isComplex) \<< bool(QtPrivate::IsPointerToTypeDerivedFromQObject<RealType>::Value) \<< bool(Q_IS_ENUM(RealType));
name|QT_FOR_EACH_STATIC_CORE_CLASS
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
name|QT_FOR_EACH_STATIC_PRIMITIVE_POINTER
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
name|QT_FOR_EACH_STATIC_CORE_POINTER
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
DECL|macro|ADD_METATYPE_TEST_ROW
undef|#
directive|undef
name|ADD_METATYPE_TEST_ROW
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TestSpace::Foo"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Whity<double>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|Whity
argument_list|<
name|double
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CustomMovable"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|CustomMovable
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CustomObject*"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|CustomObject
operator|*
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CustomMultiInheritanceObject*"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|CustomMultiInheritanceObject
operator|*
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<C,C>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|C
argument_list|,
name|C
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<C,M>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|C
argument_list|,
name|M
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<C,P>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|C
argument_list|,
name|P
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<M,C>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|M
argument_list|,
name|C
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<M,M>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|M
argument_list|,
name|M
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<M,P>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|M
argument_list|,
name|P
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<P,C>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|P
argument_list|,
name|C
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<P,M>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|P
argument_list|,
name|M
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPair<P,P>"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QPair
argument_list|<
name|P
argument_list|,
name|P
argument_list|>
argument_list|>
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FlagsDataEnum"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|FlagsDataEnum
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
comment|// invalid ids.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-124125534"
argument_list|)
operator|<<
operator|-
literal|124125534
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"124125534"
argument_list|)
operator|<<
literal|124125534
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flags
name|void
name|tst_QMetaType
operator|::
name|flags
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isMovable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isPointerToQObject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isEnum
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type
argument_list|)
operator|&
name|QMetaType
operator|::
name|NeedsConstruction
argument_list|)
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type
argument_list|)
operator|&
name|QMetaType
operator|::
name|NeedsDestruction
argument_list|)
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type
argument_list|)
operator|&
name|QMetaType
operator|::
name|MovableType
argument_list|)
argument_list|,
name|isMovable
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type
argument_list|)
operator|&
name|QMetaType
operator|::
name|PointerToQObject
argument_list|)
argument_list|,
name|isPointerToQObject
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
argument_list|)
argument_list|,
name|isEnum
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagsStaticLess_data
name|void
name|tst_QMetaType
operator|::
name|flagsStaticLess_data
parameter_list|()
block|{
name|flags_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagsStaticLess
name|void
name|tst_QMetaType
operator|::
name|flagsStaticLess
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isMovable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|int
name|flags
init|=
name|QMetaType
argument_list|(
name|type
argument_list|)
operator|.
name|flags
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|flags
operator|&
name|QMetaType
operator|::
name|NeedsConstruction
argument_list|)
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|flags
operator|&
name|QMetaType
operator|::
name|NeedsDestruction
argument_list|)
argument_list|,
name|isComplex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|flags
operator|&
name|QMetaType
operator|::
name|MovableType
argument_list|)
argument_list|,
name|isMovable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagsBinaryCompatibility5_0_data
name|void
name|tst_QMetaType
operator|::
name|flagsBinaryCompatibility5_0_data
parameter_list|()
block|{
comment|// Changing traits of a built-in type is illegal from BC point of view.
comment|// Traits are saved in code of an application and in the Qt library which means
comment|// that there may be a mismatch.
comment|// The test is loading data generated by this code:
comment|//
comment|//        QByteArray buffer;
comment|//        buffer.reserve(2 * QMetaType::User);
comment|//        for (quint32 i = 0; i< QMetaType::User; ++i) {
comment|//            if (QMetaType::isRegistered(i)) {
comment|//                buffer.append(i);
comment|//                buffer.append(quint32(QMetaType::typeFlags(i)));
comment|//            }
comment|//        }
comment|//        QFile file("/tmp/typeFlags.bin");
comment|//        file.open(QIODevice::WriteOnly);
comment|//        file.write(buffer);
comment|//        file.close();
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint32
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"typeFlags.bin"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|buffer
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|2
control|)
block|{
specifier|const
name|quint32
name|id
init|=
name|buffer
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|quint32
name|flags
init|=
name|buffer
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"A type could not be removed in BC way"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
argument_list|)
operator|<<
name|id
operator|<<
name|flags
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|flagsBinaryCompatibility5_0
name|void
name|tst_QMetaType
operator|::
name|flagsBinaryCompatibility5_0
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|quint32
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|quint32
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|quint32
name|mask_5_0
init|=
literal|0x1ff
decl_stmt|;
comment|// Only compare the values that were already defined in 5.0
name|QCOMPARE
argument_list|(
name|quint32
argument_list|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|id
argument_list|)
argument_list|)
operator|&
name|mask_5_0
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|construct_data
name|void
name|tst_QMetaType
operator|::
name|construct_data
parameter_list|()
block|{
name|create_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
DECL|function|testConstructHelper
specifier|static
name|void
name|testConstructHelper
parameter_list|()
block|{
typedef|typedef
typename|typename
name|MetaEnumToType
argument_list|<
name|ID
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|QMetaType
name|info
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|info
operator|.
name|sizeOf
argument_list|()
decl_stmt|;
name|void
modifier|*
name|storage1
init|=
name|qMallocAligned
argument_list|(
name|size
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Type
argument_list|)
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual1
init|=
name|QMetaType
operator|::
name|construct
argument_list|(
name|ID
argument_list|,
name|storage1
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
decl_stmt|;
name|void
modifier|*
name|storage2
init|=
name|qMallocAligned
argument_list|(
name|size
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Type
argument_list|)
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual2
init|=
name|info
operator|.
name|construct
argument_list|(
name|storage2
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual1
argument_list|,
name|storage1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual2
argument_list|,
name|storage2
argument_list|)
expr_stmt|;
if|if
condition|(
name|DefaultValueTraits
argument_list|<
name|ID
argument_list|>
operator|::
name|IsInitialized
condition|)
block|{
name|Type
modifier|*
name|expected
init|=
name|DefaultValueFactory
argument_list|<
name|ID
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual1
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual2
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
operator|delete
name|expected
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destruct
argument_list|(
name|ID
argument_list|,
name|actual1
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage1
argument_list|)
expr_stmt|;
name|info
operator|.
name|destruct
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|construct
argument_list|(
name|ID
argument_list|,
literal|0
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|ID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|construct
argument_list|(
literal|0
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|info
operator|.
name|destruct
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|testConstructHelper
name|void
name|testConstructHelper
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
parameter_list|()
block|{
comment|/*int size = */
name|QMetaType
operator|::
name|sizeOf
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|)
expr_stmt|;
name|void
modifier|*
name|storage
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|actual
init|=
name|QMetaType
operator|::
name|construct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|storage
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|storage
argument_list|)
expr_stmt|;
if|if
condition|(
name|DefaultValueTraits
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|IsInitialized
condition|)
block|{
name|QVERIFY
argument_list|(
name|DefaultValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destruct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|construct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
literal|0
argument_list|,
comment|/*copy=*/
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|construct
name|void
name|tst_QMetaType
operator|::
name|construct
parameter_list|()
block|{
struct|struct
name|TypeTestFunctionGetter
block|{
specifier|static
name|TypeTestFunction
name|get
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
DECL|macro|RETURN_CONSTRUCT_FUNCTION
define|#
directive|define
name|RETURN_CONSTRUCT_FUNCTION
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|case QMetaType::MetaTypeName: \             return testConstructHelper<QMetaType::MetaTypeName>;
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|RETURN_CONSTRUCT_FUNCTION
argument_list|)
DECL|macro|RETURN_CONSTRUCT_FUNCTION
undef|#
directive|undef
name|RETURN_CONSTRUCT_FUNCTION
block|}
return|return
literal|0
return|;
block|}
block|}
struct|;
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|TypeTestFunctionGetter
operator|::
name|get
function_decl|(
name|type
function_decl|)
parameter_list|()
function_decl|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|int
name|ID
parameter_list|>
DECL|function|testConstructCopyHelper
specifier|static
name|void
name|testConstructCopyHelper
parameter_list|()
block|{
typedef|typedef
typename|typename
name|MetaEnumToType
argument_list|<
name|ID
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|Type
modifier|*
name|expected
init|=
name|TestValueFactory
argument_list|<
name|ID
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
name|QMetaType
name|info
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|QMetaType
operator|::
name|sizeOf
argument_list|(
name|ID
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|sizeOf
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|void
modifier|*
name|storage1
init|=
name|qMallocAligned
argument_list|(
name|size
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Type
argument_list|)
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual1
init|=
name|QMetaType
operator|::
name|construct
argument_list|(
name|ID
argument_list|,
name|storage1
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|void
modifier|*
name|storage2
init|=
name|qMallocAligned
argument_list|(
name|size
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|Type
argument_list|)
argument_list|)
decl_stmt|;
name|void
modifier|*
name|actual2
init|=
name|info
operator|.
name|construct
argument_list|(
name|storage2
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual1
argument_list|,
name|storage1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual2
argument_list|,
name|storage2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual1
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|Type
operator|*
argument_list|>
argument_list|(
name|actual2
argument_list|)
argument_list|,
operator|*
name|expected
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|ID
argument_list|,
name|actual1
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage1
argument_list|)
expr_stmt|;
name|info
operator|.
name|destruct
argument_list|(
name|actual2
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|construct
argument_list|(
name|ID
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|construct
argument_list|(
literal|0
argument_list|,
name|expected
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|expected
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<>
DECL|function|testConstructCopyHelper
name|void
name|testConstructCopyHelper
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
parameter_list|()
block|{
typedef|typedef
name|MetaEnumToType
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|Type
name|Type
typedef|;
name|Type
modifier|*
name|expected
init|=
name|TestValueFactory
argument_list|<
name|QMetaType
operator|::
name|Void
argument_list|>
operator|::
name|create
argument_list|()
decl_stmt|;
comment|/* int size = */
name|QMetaType
operator|::
name|sizeOf
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|)
expr_stmt|;
name|void
modifier|*
name|storage
init|=
literal|0
decl_stmt|;
name|void
modifier|*
name|actual
init|=
name|QMetaType
operator|::
name|construct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|storage
argument_list|,
name|expected
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|storage
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destruct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|qFreeAligned
argument_list|(
name|storage
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|construct
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructCopy_data
name|void
name|tst_QMetaType
operator|::
name|constructCopy_data
parameter_list|()
block|{
name|create_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructCopy
name|void
name|tst_QMetaType
operator|::
name|constructCopy
parameter_list|()
block|{
struct|struct
name|TypeTestFunctionGetter
block|{
specifier|static
name|TypeTestFunction
name|get
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
DECL|macro|RETURN_CONSTRUCT_COPY_FUNCTION
define|#
directive|define
name|RETURN_CONSTRUCT_COPY_FUNCTION
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|case QMetaType::MetaTypeName: \             return testConstructCopyHelper<QMetaType::MetaTypeName>;
name|FOR_EACH_CORE_METATYPE
argument_list|(
argument|RETURN_CONSTRUCT_COPY_FUNCTION
argument_list|)
DECL|macro|RETURN_CONSTRUCT_COPY_FUNCTION
undef|#
directive|undef
name|RETURN_CONSTRUCT_COPY_FUNCTION
block|}
return|return
literal|0
return|;
block|}
block|}
struct|;
name|QFETCH
argument_list|(
name|QMetaType
operator|::
name|Type
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|TypeTestFunctionGetter
operator|::
name|get
function_decl|(
name|type
function_decl|)
parameter_list|()
function_decl|;
block|}
end_function
begin_typedef
DECL|typedef|CustomString
typedef|typedef
name|QString
name|CustomString
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomString
argument_list|)
end_macro
begin_comment
comment|//this line is useless
end_comment
begin_function
DECL|function|typedefs
name|void
name|tst_QMetaType
operator|::
name|typedefs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"long long"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|LongLong
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"unsigned long long"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|ULongLong
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qint8"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|SChar
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"quint8"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|UChar
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qint16"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|Short
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"quint16"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|UShort
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qint32"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"quint32"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|UInt
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qint64"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|LongLong
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"quint64"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|ULongLong
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the qreal typeId is the type id of the type it's defined to
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"qreal"
argument_list|)
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|qreal
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|CustomString
argument_list|>
argument_list|(
literal|"CustomString"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"CustomString"
argument_list|)
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|CustomString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
typedef|typedef
name|Whity
argument_list|<
name|double
argument_list|>
name|WhityDouble
typedef|;
name|qRegisterMetaType
argument_list|<
name|WhityDouble
argument_list|>
argument_list|(
literal|"WhityDouble"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"WhityDouble"
argument_list|)
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|WhityDouble
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerType
name|void
name|tst_QMetaType
operator|::
name|registerType
parameter_list|()
block|{
comment|// Built-in
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"QString"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"QString"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
comment|// Custom
name|int
name|fooId
init|=
name|qRegisterMetaType
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|(
literal|"TestSpace::Foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fooId
operator|>=
name|int
argument_list|(
name|QMetaType
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|TestSpace
operator|::
name|Foo
argument_list|>
argument_list|(
literal|"TestSpace::Foo"
argument_list|)
argument_list|,
name|fooId
argument_list|)
expr_stmt|;
name|int
name|movableId
init|=
name|qRegisterMetaType
argument_list|<
name|CustomMovable
argument_list|>
argument_list|(
literal|"CustomMovable"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|movableId
operator|>=
name|int
argument_list|(
name|QMetaType
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|CustomMovable
argument_list|>
argument_list|(
literal|"CustomMovable"
argument_list|)
argument_list|,
name|movableId
argument_list|)
expr_stmt|;
comment|// Alias to built-in
typedef|typedef
name|QString
name|MyString
typedef|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyString
argument_list|>
argument_list|(
literal|"MyString"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyString
argument_list|>
argument_list|(
literal|"MyString"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"MyString"
argument_list|)
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alias to custom type
typedef|typedef
name|CustomMovable
name|MyMovable
typedef|;
typedef|typedef
name|TestSpace
operator|::
name|Foo
name|MyFoo
typedef|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyMovable
argument_list|>
argument_list|(
literal|"MyMovable"
argument_list|)
argument_list|,
name|movableId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyMovable
argument_list|>
argument_list|(
literal|"MyMovable"
argument_list|)
argument_list|,
name|movableId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"MyMovable"
argument_list|)
argument_list|,
name|movableId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyFoo
argument_list|>
argument_list|(
literal|"MyFoo"
argument_list|)
argument_list|,
name|fooId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRegisterMetaType
argument_list|<
name|MyFoo
argument_list|>
argument_list|(
literal|"MyFoo"
argument_list|)
argument_list|,
name|fooId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"MyFoo"
argument_list|)
argument_list|,
name|fooId
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|IsRegisteredDummyType
class|class
name|IsRegisteredDummyType
block|{
block|}
class|;
end_class
begin_function
DECL|function|isRegistered_data
name|void
name|tst_QMetaType
operator|::
name|isRegistered_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"typeId"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"registered"
argument_list|)
expr_stmt|;
comment|// predefined/custom types
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Void"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Void
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Int"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|int
name|dummyTypeId
init|=
name|qRegisterMetaType
argument_list|<
name|IsRegisteredDummyType
argument_list|>
argument_list|(
literal|"IsRegisteredDummyType"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IsRegisteredDummyType"
argument_list|)
operator|<<
name|dummyTypeId
operator|<<
literal|true
expr_stmt|;
comment|// unknown types
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-42"
argument_list|)
operator|<<
operator|-
literal|42
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IsRegisteredDummyType + 1"
argument_list|)
operator|<<
operator|(
name|dummyTypeId
operator|+
literal|1
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UnknownType"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|UnknownType
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRegistered
name|void
name|tst_QMetaType
operator|::
name|isRegistered
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|isRegistered
argument_list|(
name|typeId
argument_list|)
argument_list|,
name|registered
argument_list|)
expr_stmt|;
block|}
end_function
begin_enum
DECL|enum|isEnumTest_Enum0
enum|enum
name|isEnumTest_Enum0
block|{}
enum|;
end_enum
begin_struct
DECL|struct|isEnumTest_Struct0
DECL|enum|A
struct|struct
name|isEnumTest_Struct0
block|{
enum|enum
name|A
block|{}
enum|;
block|}
struct|;
end_struct
begin_enum
DECL|enum|isEnumTest_Enum1
enum|enum
name|isEnumTest_Enum1
block|{}
enum|;
end_enum
begin_struct
DECL|struct|isEnumTest_Struct1
struct|struct
name|isEnumTest_Struct1
block|{
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|isEnumTest_Struct1
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|isEnumTest_Enum1
argument_list|)
end_macro
begin_function
DECL|function|isEnum
name|void
name|tst_QMetaType
operator|::
name|isEnum
parameter_list|()
block|{
name|int
name|type0
init|=
name|qRegisterMetaType
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type0
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|type1
init|=
name|qRegisterMetaType
argument_list|<
name|isEnumTest_Enum0
argument_list|>
argument_list|(
literal|"isEnumTest_Enum0"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type1
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
name|QMetaType
operator|::
name|IsEnumeration
argument_list|)
expr_stmt|;
name|int
name|type2
init|=
name|qRegisterMetaType
argument_list|<
name|isEnumTest_Struct0
argument_list|>
argument_list|(
literal|"isEnumTest_Struct0"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type2
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|type3
init|=
name|qRegisterMetaType
argument_list|<
name|isEnumTest_Enum0
operator|*
argument_list|>
argument_list|(
literal|"isEnumTest_Enum0 *"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type3
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|type4
init|=
name|qRegisterMetaType
argument_list|<
name|isEnumTest_Struct0
operator|::
name|A
argument_list|>
argument_list|(
literal|"isEnumTest_Struct0::A"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type4
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
name|QMetaType
operator|::
name|IsEnumeration
argument_list|)
expr_stmt|;
name|int
name|type5
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|isEnumTest_Struct1
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type5
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|type6
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|isEnumTest_Enum1
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|typeFlags
argument_list|(
name|type6
argument_list|)
operator|&
name|QMetaType
operator|::
name|IsEnumeration
operator|)
operator|==
name|QMetaType
operator|::
name|IsEnumeration
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRegisteredStaticLess_data
name|void
name|tst_QMetaType
operator|::
name|isRegisteredStaticLess_data
parameter_list|()
block|{
name|isRegistered_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRegisteredStaticLess
name|void
name|tst_QMetaType
operator|::
name|isRegisteredStaticLess
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|registered
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
argument_list|(
name|typeId
argument_list|)
operator|.
name|isRegistered
argument_list|()
argument_list|,
name|registered
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerStreamBuiltin
name|void
name|tst_QMetaType
operator|::
name|registerStreamBuiltin
parameter_list|()
block|{
comment|//should not crash;
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"QString"
argument_list|)
expr_stmt|;
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"QVariant"
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|IntUIntHash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
name|IntUIntHash
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntUIntHash
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntUIntMap
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
name|IntUIntMap
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntUIntMap
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntUIntPair
typedef|typedef
name|QPair
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
name|IntUIntPair
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntUIntPair
argument_list|)
end_macro
begin_struct
DECL|struct|CustomComparable
struct|struct
name|CustomComparable
block|{
DECL|function|CustomComparable
name|CustomComparable
parameter_list|(
name|int
name|i_
init|=
literal|0
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|i_
argument_list|)
block|{ }
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|CustomComparable
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|UnregisteredType
struct|struct
name|UnregisteredType
block|{
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|IntComparableHash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|CustomComparable
argument_list|>
name|IntComparableHash
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntComparableHash
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntComparableMap
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|CustomComparable
argument_list|>
name|IntComparableMap
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntComparableMap
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntComparablePair
typedef|typedef
name|QPair
argument_list|<
name|int
argument_list|,
name|CustomComparable
argument_list|>
name|IntComparablePair
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntComparablePair
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntIntHash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntIntHash
typedef|;
end_typedef
begin_typedef
DECL|typedef|NaturalNumber
typedef|typedef
name|int
name|NaturalNumber
typedef|;
end_typedef
begin_class
DECL|class|AutoMetaTypeObject
class|class
name|AutoMetaTypeObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|IntIntHash
name|someHash
name|READ
name|someHash
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|NaturalNumber
name|someInt
name|READ
name|someInt
name|CONSTANT
argument_list|)
decl|public
range|:
DECL|function|AutoMetaTypeObject
name|AutoMetaTypeObject
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
decl_stmt|,
name|m_int
argument_list|(
literal|42
argument_list|)
argument_list|{
name|m_hash
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|;     }
DECL|function|someHash
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|someHash
argument_list|()
decl|const
argument_list|{         return
name|m_hash
argument_list|;     }
DECL|function|someInt
name|int
name|someInt
argument_list|()
decl|const
argument_list|{         return
name|m_int
argument_list|;     }
decl|private
range|:
DECL|member|m_hash
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|m_hash
decl_stmt|;
DECL|member|m_int
name|int
name|m_int
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MyObject
class|class
name|MyObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|MyObject
name|MyObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{   }
block|}
class|;
end_class
begin_typedef
DECL|typedef|MyObjectPtr
typedef|typedef
name|MyObject
modifier|*
name|MyObjectPtr
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyObjectPtr
argument_list|)
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_VARIADIC_MACROS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|TST_QMETATYPE_BROKEN_COMPILER
argument_list|)
end_if
begin_function
DECL|function|createTypeName
specifier|static
name|QByteArray
name|createTypeName
parameter_list|(
specifier|const
name|char
modifier|*
name|begin
parameter_list|,
specifier|const
name|char
modifier|*
name|va
parameter_list|)
block|{
name|QByteArray
name|tn
argument_list|(
name|begin
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|args
init|=
name|QByteArray
argument_list|(
name|va
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|tn
operator|+=
name|args
operator|.
name|first
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|args
operator|.
name|constBegin
argument_list|()
operator|+
literal|1
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
operator|::
name|const_iterator
name|end
init|=
name|args
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|tn
operator|+=
literal|","
expr_stmt|;
name|tn
operator|+=
name|it
operator|->
name|trimmed
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tn
operator|.
name|endsWith
argument_list|(
literal|'>'
argument_list|)
condition|)
name|tn
operator|+=
literal|' '
expr_stmt|;
name|tn
operator|+=
literal|">"
expr_stmt|;
return|return
name|tn
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|const void*
argument_list|)
end_macro
begin_function
DECL|function|automaticTemplateRegistration
name|void
name|tst_QMetaType
operator|::
name|automaticTemplateRegistration
parameter_list|()
block|{
DECL|macro|TEST_SEQUENTIAL_CONTAINER
define|#
directive|define
name|TEST_SEQUENTIAL_CONTAINER
parameter_list|(
name|CONTAINER
parameter_list|,
name|VALUE_TYPE
parameter_list|)
define|\
value|{ \     CONTAINER<VALUE_TYPE> innerContainer; \     innerContainer.push_back(42); \     QVERIFY(*QVariant::fromValue(innerContainer).value<CONTAINER<VALUE_TYPE>>().begin() == 42); \     QVector<CONTAINER<VALUE_TYPE>> outerContainer; \     outerContainer<< innerContainer; \     QVERIFY(*QVariant::fromValue(outerContainer).value<QVector<CONTAINER<VALUE_TYPE>>>().first().begin() == 42); \   }
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|QList
argument_list|,
argument|int
argument_list|)
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|std::vector
argument_list|,
argument|int
argument_list|)
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|std::list
argument_list|,
argument|int
argument_list|)
block|{
name|std
operator|::
name|vector
argument_list|<
name|bool
argument_list|>
name|vecbool
decl_stmt|;
name|vecbool
operator|.
name|push_back
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|vecbool
operator|.
name|push_back
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|vecbool
operator|.
name|push_back
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|vecbool
argument_list|)
operator|.
name|value
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|bool
argument_list|>
argument_list|>
argument_list|()
operator|.
name|front
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|bool
argument_list|>
argument_list|>
name|vectorList
decl_stmt|;
name|vectorList
operator|<<
name|vecbool
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|vectorList
argument_list|)
operator|.
name|value
argument_list|<
name|QVector
argument_list|<
name|std
operator|::
name|vector
argument_list|<
name|bool
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|front
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|unsigned
argument_list|>
name|unsignedList
decl_stmt|;
name|unsignedList
operator|<<
literal|123
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|unsignedList
argument_list|)
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|unsigned
argument_list|>
argument_list|>
argument_list|()
operator|.
name|first
argument_list|()
operator|==
literal|123
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QList
argument_list|<
name|unsigned
argument_list|>
argument_list|>
name|vectorList
decl_stmt|;
name|vectorList
operator|<<
name|unsignedList
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|vectorList
argument_list|)
operator|.
name|value
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|unsigned
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|==
literal|123
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QVariantList
argument_list|>
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QMetaType
operator|::
name|QVariantList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QMetaType
operator|::
name|QVariantList
argument_list|)
expr_stmt|;
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|QList
argument_list|,
argument|QVariant
argument_list|)
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|std::vector
argument_list|,
argument|QVariant
argument_list|)
name|TEST_SEQUENTIAL_CONTAINER
argument_list|(
argument|std::list
argument_list|,
argument|QVariant
argument_list|)
block|{
name|QList
argument_list|<
name|QSharedPointer
argument_list|<
name|QObject
argument_list|>
argument_list|>
name|sharedPointerList
decl_stmt|;
name|QObject
modifier|*
name|testObject
init|=
operator|new
name|QObject
decl_stmt|;
name|sharedPointerList
operator|<<
name|QSharedPointer
argument_list|<
name|QObject
argument_list|>
argument_list|(
name|testObject
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sharedPointerList
argument_list|)
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QSharedPointer
argument_list|<
name|QObject
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|.
name|first
argument_list|()
operator|==
name|testObject
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QList
argument_list|<
name|QSharedPointer
argument_list|<
name|QObject
argument_list|>
argument_list|>
argument_list|>
name|vectorList
decl_stmt|;
name|vectorList
operator|<<
name|sharedPointerList
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|vectorList
argument_list|)
operator|.
name|value
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|QSharedPointer
argument_list|<
name|QObject
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|==
name|testObject
argument_list|)
expr_stmt|;
block|}
block|{
name|IntIntHash
name|intIntHash
decl_stmt|;
name|intIntHash
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntHash
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntHash
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|AutoMetaTypeObject
name|amto
decl_stmt|;
name|qRegisterMetaType
argument_list|<
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"IntIntHash"
argument_list|)
expr_stmt|;
name|QVariant
name|hashVariant
init|=
name|amto
operator|.
name|property
argument_list|(
literal|"someHash"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hashVariant
operator|.
name|value
argument_list|<
name|IntIntHash
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"NaturalNumber"
argument_list|)
expr_stmt|;
name|QVariant
name|intVariant
init|=
name|amto
operator|.
name|property
argument_list|(
literal|"someInt"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|intVariant
operator|.
name|value
argument_list|<
name|NaturalNumber
argument_list|>
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|IntUIntHash
name|intUIntHash
decl_stmt|;
name|intUIntHash
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntHash
argument_list|)
operator|.
name|value
argument_list|<
name|IntUIntHash
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|IntComparableHash
name|intComparableHash
decl_stmt|;
name|CustomComparable
name|m
decl_stmt|;
name|intComparableHash
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparableHash
argument_list|)
operator|.
name|value
argument_list|<
name|IntComparableHash
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|{
name|QVariantHash
name|variantHash
decl_stmt|;
name|variantHash
operator|.
name|insert
argument_list|(
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variantHash
argument_list|)
operator|.
name|value
argument_list|<
name|QVariantHash
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntIntMap
typedef|;
name|IntIntMap
name|intIntMap
decl_stmt|;
name|intIntMap
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntMap
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntMap
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|IntUIntMap
name|intUIntMap
decl_stmt|;
name|intUIntMap
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntMap
argument_list|)
operator|.
name|value
argument_list|<
name|IntUIntMap
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|IntComparableMap
name|intComparableMap
decl_stmt|;
name|CustomComparable
name|m
decl_stmt|;
name|intComparableMap
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparableMap
argument_list|)
operator|.
name|value
argument_list|<
name|IntComparableMap
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|{
name|QVariantMap
name|variantMap
decl_stmt|;
name|variantMap
operator|.
name|insert
argument_list|(
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variantMap
argument_list|)
operator|.
name|value
argument_list|<
name|QVariantMap
argument_list|>
argument_list|()
operator|.
name|value
argument_list|(
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntIntMap
typedef|;
name|IntIntMap
name|intIntMap
decl_stmt|;
name|intIntMap
index|[
literal|4
index|]
operator|=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntMap
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntMap
argument_list|>
argument_list|()
index|[
literal|4
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
name|StdIntUIntMap
typedef|;
name|StdIntUIntMap
name|intUIntMap
decl_stmt|;
name|intUIntMap
index|[
literal|4
index|]
operator|=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntMap
argument_list|)
operator|.
name|value
argument_list|<
name|StdIntUIntMap
argument_list|>
argument_list|()
index|[
literal|4
index|]
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|CustomObject
modifier|*
argument_list|>
name|StdMapIntCustomObject
typedef|;
name|StdMapIntCustomObject
name|intComparableMap
decl_stmt|;
name|CustomObject
modifier|*
name|o
init|=
literal|0
decl_stmt|;
name|intComparableMap
index|[
literal|4
index|]
operator|=
name|o
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparableMap
argument_list|)
operator|.
name|value
argument_list|<
name|StdMapIntCustomObject
argument_list|>
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|map
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|StdMapStringVariant
typedef|;
name|StdMapStringVariant
name|variantMap
decl_stmt|;
name|variantMap
index|[
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
index|]
operator|=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variantMap
argument_list|)
operator|.
name|value
argument_list|<
name|StdMapStringVariant
argument_list|>
argument_list|()
index|[
name|QStringLiteral
argument_list|(
literal|"4"
argument_list|)
index|]
argument_list|,
name|QVariant
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntIntPair
typedef|;
name|IntIntPair
name|intIntPair
init|=
name|qMakePair
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntPair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntPair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|IntUIntPair
name|intUIntPair
init|=
name|qMakePair
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntUIntPair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntUIntPair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|CustomComparable
name|m
decl_stmt|;
name|IntComparablePair
name|intComparablePair
init|=
name|qMakePair
argument_list|(
literal|4
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparablePair
argument_list|)
operator|.
name|value
argument_list|<
name|IntComparablePair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparablePair
argument_list|)
operator|.
name|value
argument_list|<
name|IntComparablePair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntIntPair
typedef|;
name|IntIntPair
name|intIntPair
init|=
name|std
operator|::
name|make_pair
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntPair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|IntIntPair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
name|StdIntUIntPair
typedef|;
name|StdIntUIntPair
name|intUIntPair
init|=
name|std
operator|::
name|make_pair
argument_list|<
name|int
argument_list|,
name|uint
argument_list|>
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|StdIntUIntPair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intUIntPair
argument_list|)
operator|.
name|value
argument_list|<
name|StdIntUIntPair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
operator|(
name|uint
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|std
operator|::
name|pair
argument_list|<
name|int
argument_list|,
name|CustomQObject
modifier|*
argument_list|>
name|StdIntComparablePair
typedef|;
name|CustomQObject
modifier|*
name|o
init|=
literal|0
decl_stmt|;
name|StdIntComparablePair
name|intComparablePair
init|=
name|std
operator|::
name|make_pair
argument_list|(
literal|4
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparablePair
argument_list|)
operator|.
name|value
argument_list|<
name|StdIntComparablePair
argument_list|>
argument_list|()
operator|.
name|first
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|intComparablePair
argument_list|)
operator|.
name|value
argument_list|<
name|StdIntComparablePair
argument_list|>
argument_list|()
operator|.
name|second
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|UnregisteredType
argument_list|>
name|IntUnregisteredTypeHash
typedef|;
name|QVERIFY
argument_list|(
name|qRegisterMetaType
argument_list|<
name|IntUnregisteredTypeHash
argument_list|>
argument_list|(
literal|"IntUnregisteredTypeHash"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
typedef|typedef
name|QList
argument_list|<
name|UnregisteredType
argument_list|>
name|UnregisteredTypeList
typedef|;
name|QVERIFY
argument_list|(
name|qRegisterMetaType
argument_list|<
name|UnregisteredTypeList
argument_list|>
argument_list|(
literal|"UnregisteredTypeList"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_VARIADIC_MACROS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|TST_QMETATYPE_BROKEN_COMPILER
argument_list|)
DECL|macro|FOR_EACH_STATIC_PRIMITIVE_TYPE
define|#
directive|define
name|FOR_EACH_STATIC_PRIMITIVE_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(bool) \         F(int) \         F(qulonglong) \         F(double) \         F(short) \         F(char) \         F(ulong) \         F(uchar) \         F(float) \         F(QObject*) \         F(QString) \         F(CustomMovable)
DECL|macro|FOR_EACH_STATIC_PRIMITIVE_TYPE2
define|#
directive|define
name|FOR_EACH_STATIC_PRIMITIVE_TYPE2
parameter_list|(
name|F
parameter_list|,
name|SecondaryRealName
parameter_list|)
define|\
value|F(uint, SecondaryRealName) \         F(qlonglong, SecondaryRealName) \         F(char, SecondaryRealName) \         F(uchar, SecondaryRealName) \         F(QObject*, SecondaryRealName)
DECL|macro|CREATE_AND_VERIFY_CONTAINER
define|#
directive|define
name|CREATE_AND_VERIFY_CONTAINER
parameter_list|(
name|CONTAINER
parameter_list|,
modifier|...
parameter_list|)
define|\
value|{ \             CONTAINER< __VA_ARGS__> t; \             const QVariant v = QVariant::fromValue(t); \             QByteArray tn = createTypeName(#CONTAINER "<", #__VA_ARGS__); \             const int type = QMetaType::type(tn); \             const int expectedType = ::qMetaTypeId<CONTAINER< __VA_ARGS__>>(); \             QCOMPARE(type, expectedType); \         }
DECL|macro|FOR_EACH_1ARG_TEMPLATE_TYPE
define|#
directive|define
name|FOR_EACH_1ARG_TEMPLATE_TYPE
parameter_list|(
name|F
parameter_list|,
name|TYPE
parameter_list|)
define|\
value|F(QList, TYPE) \         F(QVector, TYPE) \         F(QLinkedList, TYPE) \         F(QVector, TYPE) \         F(QVector, TYPE) \         F(QQueue, TYPE) \         F(QStack, TYPE) \         F(QSet, TYPE)
DECL|macro|PRINT_1ARG_TEMPLATE
define|#
directive|define
name|PRINT_1ARG_TEMPLATE
parameter_list|(
name|RealName
parameter_list|)
define|\
value|FOR_EACH_1ARG_TEMPLATE_TYPE(CREATE_AND_VERIFY_CONTAINER, RealName)
DECL|macro|FOR_EACH_2ARG_TEMPLATE_TYPE
define|#
directive|define
name|FOR_EACH_2ARG_TEMPLATE_TYPE
parameter_list|(
name|F
parameter_list|,
name|RealName1
parameter_list|,
name|RealName2
parameter_list|)
define|\
value|F(QHash, RealName1, RealName2) \         F(QMap, RealName1, RealName2) \         F(QPair, RealName1, RealName2)
DECL|macro|PRINT_2ARG_TEMPLATE_INTERNAL
define|#
directive|define
name|PRINT_2ARG_TEMPLATE_INTERNAL
parameter_list|(
name|RealName1
parameter_list|,
name|RealName2
parameter_list|)
define|\
value|FOR_EACH_2ARG_TEMPLATE_TYPE(CREATE_AND_VERIFY_CONTAINER, RealName1, RealName2)
DECL|macro|PRINT_2ARG_TEMPLATE
define|#
directive|define
name|PRINT_2ARG_TEMPLATE
parameter_list|(
name|RealName
parameter_list|)
define|\
value|FOR_EACH_STATIC_PRIMITIVE_TYPE2(PRINT_2ARG_TEMPLATE_INTERNAL, RealName)
DECL|macro|REGISTER_TYPEDEF
define|#
directive|define
name|REGISTER_TYPEDEF
parameter_list|(
name|TYPE
parameter_list|,
name|ARG1
parameter_list|,
name|ARG2
parameter_list|)
define|\
value|qRegisterMetaType<TYPE<ARG1, ARG2>>(#TYPE "<" #ARG1 "," #ARG2 ">");
name|REGISTER_TYPEDEF
argument_list|(
argument|QHash
argument_list|,
argument|int
argument_list|,
argument|uint
argument_list|)
name|REGISTER_TYPEDEF
argument_list|(
argument|QMap
argument_list|,
argument|int
argument_list|,
argument|uint
argument_list|)
name|REGISTER_TYPEDEF
argument_list|(
argument|QPair
argument_list|,
argument|int
argument_list|,
argument|uint
argument_list|)
name|FOR_EACH_STATIC_PRIMITIVE_TYPE
argument_list|(
argument|PRINT_1ARG_TEMPLATE
argument_list|)
name|FOR_EACH_STATIC_PRIMITIVE_TYPE
argument_list|(
argument|PRINT_2ARG_TEMPLATE
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QList
argument_list|,
argument|QList<QMap<int
argument_list|,
argument|QHash<char
argument_list|,
argument|QVariantList>>>
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QVector
argument_list|,
argument|void*
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QVector
argument_list|,
argument|const void*
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QList
argument_list|,
argument|void*
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QPair
argument_list|,
argument|void*
argument_list|,
argument|void*
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QHash
argument_list|,
argument|void*
argument_list|,
argument|void*
argument_list|)
name|CREATE_AND_VERIFY_CONTAINER
argument_list|(
argument|QHash
argument_list|,
argument|const void*
argument_list|,
argument|const void*
argument_list|)
endif|#
directive|endif
comment|// Q_COMPILER_VARIADIC_MACROS
DECL|macro|TEST_OWNING_SMARTPOINTER
define|#
directive|define
name|TEST_OWNING_SMARTPOINTER
parameter_list|(
name|SMARTPOINTER
parameter_list|,
name|ELEMENT_TYPE
parameter_list|,
name|FLAG_TEST
parameter_list|,
name|FROMVARIANTFUNCTION
parameter_list|)
define|\
value|{ \         SMARTPOINTER< ELEMENT_TYPE> sp(new ELEMENT_TYPE); \         sp.data()->setObjectName("Test name"); \         QVariant v = QVariant::fromValue(sp); \         QCOMPARE(v.typeName(), #SMARTPOINTER "<" #ELEMENT_TYPE ">"); \         QVERIFY(QMetaType::typeFlags(::qMetaTypeId<SMARTPOINTER< ELEMENT_TYPE>>())& QMetaType::FLAG_TEST); \         SMARTPOINTER< QObject> extractedPtr = FROMVARIANTFUNCTION<QObject>(v); \         QCOMPARE(extractedPtr.data()->objectName(), sp.data()->objectName()); \     }
name|TEST_OWNING_SMARTPOINTER
argument_list|(
argument|QSharedPointer
argument_list|,
argument|QObject
argument_list|,
argument|SharedPointerToQObject
argument_list|,
argument|qSharedPointerFromVariant
argument_list|)
name|TEST_OWNING_SMARTPOINTER
argument_list|(
argument|QSharedPointer
argument_list|,
argument|QFile
argument_list|,
argument|SharedPointerToQObject
argument_list|,
argument|qSharedPointerFromVariant
argument_list|)
name|TEST_OWNING_SMARTPOINTER
argument_list|(
argument|QSharedPointer
argument_list|,
argument|QTemporaryFile
argument_list|,
argument|SharedPointerToQObject
argument_list|,
argument|qSharedPointerFromVariant
argument_list|)
name|TEST_OWNING_SMARTPOINTER
argument_list|(
argument|QSharedPointer
argument_list|,
argument|MyObject
argument_list|,
argument|SharedPointerToQObject
argument_list|,
argument|qSharedPointerFromVariant
argument_list|)
DECL|macro|TEST_OWNING_SMARTPOINTER
undef|#
directive|undef
name|TEST_OWNING_SMARTPOINTER
DECL|macro|TEST_NONOWNING_SMARTPOINTER
define|#
directive|define
name|TEST_NONOWNING_SMARTPOINTER
parameter_list|(
name|SMARTPOINTER
parameter_list|,
name|ELEMENT_TYPE
parameter_list|,
name|FLAG_TEST
parameter_list|,
name|FROMVARIANTFUNCTION
parameter_list|)
define|\
value|{ \         ELEMENT_TYPE elem; \         SMARTPOINTER< ELEMENT_TYPE> sp(&elem); \         sp.data()->setObjectName("Test name"); \         QVariant v = QVariant::fromValue(sp); \         QCOMPARE(v.typeName(), #SMARTPOINTER "<" #ELEMENT_TYPE ">"); \         QVERIFY(QMetaType::typeFlags(::qMetaTypeId<SMARTPOINTER< ELEMENT_TYPE>>())& QMetaType::FLAG_TEST); \         SMARTPOINTER< QObject> extractedPtr = FROMVARIANTFUNCTION<QObject>(v); \         QCOMPARE(extractedPtr.data()->objectName(), sp.data()->objectName()); \     }
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QWeakPointer
argument_list|,
argument|QObject
argument_list|,
argument|WeakPointerToQObject
argument_list|,
argument|qWeakPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QWeakPointer
argument_list|,
argument|QFile
argument_list|,
argument|WeakPointerToQObject
argument_list|,
argument|qWeakPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QWeakPointer
argument_list|,
argument|QTemporaryFile
argument_list|,
argument|WeakPointerToQObject
argument_list|,
argument|qWeakPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QWeakPointer
argument_list|,
argument|MyObject
argument_list|,
argument|WeakPointerToQObject
argument_list|,
argument|qWeakPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QPointer
argument_list|,
argument|QObject
argument_list|,
argument|TrackingPointerToQObject
argument_list|,
argument|qPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QPointer
argument_list|,
argument|QFile
argument_list|,
argument|TrackingPointerToQObject
argument_list|,
argument|qPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QPointer
argument_list|,
argument|QTemporaryFile
argument_list|,
argument|TrackingPointerToQObject
argument_list|,
argument|qPointerFromVariant
argument_list|)
name|TEST_NONOWNING_SMARTPOINTER
argument_list|(
argument|QPointer
argument_list|,
argument|MyObject
argument_list|,
argument|TrackingPointerToQObject
argument_list|,
argument|qPointerFromVariant
argument_list|)
DECL|macro|TEST_NONOWNING_SMARTPOINTER
undef|#
directive|undef
name|TEST_NONOWNING_SMARTPOINTER
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|StreamingTraits
name|StreamingTraits
block|{
DECL|enumerator|isStreamable
enum|enum
block|{
name|isStreamable
init|=
literal|1
block|}
enum|;
comment|// Streamable by default
block|}
struct|;
end_struct
begin_comment
comment|// Non-streamable types
end_comment
begin_define
DECL|macro|DECLARE_NONSTREAMABLE
define|#
directive|define
name|DECLARE_NONSTREAMABLE
parameter_list|(
name|Type
parameter_list|)
define|\
value|template<> struct StreamingTraits<Type> { enum { isStreamable = 0 }; };
end_define
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|void
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|void*
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QModelIndex
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QJsonValue
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QJsonObject
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QJsonArray
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QJsonDocument
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QObject*
argument_list|)
end_macro
begin_macro
name|DECLARE_NONSTREAMABLE
argument_list|(
argument|QWidget*
argument_list|)
end_macro
begin_define
DECL|macro|DECLARE_GUI_CLASS_NONSTREAMABLE
define|#
directive|define
name|DECLARE_GUI_CLASS_NONSTREAMABLE
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|DECLARE_NONSTREAMABLE(RealType)
end_define
begin_macro
name|QT_FOR_EACH_STATIC_GUI_CLASS
argument_list|(
argument|DECLARE_GUI_CLASS_NONSTREAMABLE
argument_list|)
end_macro
begin_undef
DECL|macro|DECLARE_GUI_CLASS_NONSTREAMABLE
undef|#
directive|undef
name|DECLARE_GUI_CLASS_NONSTREAMABLE
end_undef
begin_define
DECL|macro|DECLARE_WIDGETS_CLASS_NONSTREAMABLE
define|#
directive|define
name|DECLARE_WIDGETS_CLASS_NONSTREAMABLE
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|DECLARE_NONSTREAMABLE(RealType)
end_define
begin_macro
name|QT_FOR_EACH_STATIC_WIDGETS_CLASS
argument_list|(
argument|DECLARE_WIDGETS_CLASS_NONSTREAMABLE
argument_list|)
end_macro
begin_undef
DECL|macro|DECLARE_WIDGETS_CLASS_NONSTREAMABLE
undef|#
directive|undef
name|DECLARE_WIDGETS_CLASS_NONSTREAMABLE
end_undef
begin_undef
DECL|macro|DECLARE_NONSTREAMABLE
undef|#
directive|undef
name|DECLARE_NONSTREAMABLE
end_undef
begin_function
DECL|function|saveAndLoadBuiltin_data
name|void
name|tst_QMetaType
operator|::
name|saveAndLoadBuiltin_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isStreamable"
argument_list|)
expr_stmt|;
DECL|macro|ADD_METATYPE_TEST_ROW
define|#
directive|define
name|ADD_METATYPE_TEST_ROW
parameter_list|(
name|MetaTypeName
parameter_list|,
name|MetaTypeId
parameter_list|,
name|RealType
parameter_list|)
define|\
value|QTest::newRow(#RealType)<< MetaTypeId<< bool(StreamingTraits<RealType>::isStreamable);
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|ADD_METATYPE_TEST_ROW
argument_list|)
DECL|macro|ADD_METATYPE_TEST_ROW
undef|#
directive|undef
name|ADD_METATYPE_TEST_ROW
block|}
end_function
begin_function
DECL|function|saveAndLoadBuiltin
name|void
name|tst_QMetaType
operator|::
name|saveAndLoadBuiltin
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isStreamable
argument_list|)
expr_stmt|;
name|void
modifier|*
name|value
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|save
argument_list|(
name|stream
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
argument_list|,
name|isStreamable
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamable
condition|)
block|{
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hmmm, shouldn't it return false?
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|device
argument_list|()
operator|->
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
argument_list|,
name|isStreamable
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|isStreamable
condition|)
block|{
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|type
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hmmm, shouldn't it return false?
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
name|QMetaType
operator|::
name|destroy
argument_list|(
name|type
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|CustomStreamableType
struct|struct
name|CustomStreamableType
block|{
DECL|member|a
name|int
name|a
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomStreamableType
argument_list|)
end_macro
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|CustomStreamableType
modifier|&
name|t
parameter_list|)
block|{
name|out
operator|<<
name|t
operator|.
name|a
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|CustomStreamableType
modifier|&
name|t
parameter_list|)
block|{
name|int
name|a
decl_stmt|;
name|in
operator|>>
name|a
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
condition|)
name|t
operator|.
name|a
operator|=
name|a
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_function
DECL|function|saveAndLoadCustom
name|void
name|tst_QMetaType
operator|::
name|saveAndLoadCustom
parameter_list|()
block|{
name|CustomStreamableType
name|t
decl_stmt|;
name|t
operator|.
name|a
operator|=
literal|123
expr_stmt|;
name|int
name|id
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|CustomStreamableType
argument_list|>
argument_list|()
decl_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaType
operator|::
name|save
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|CustomStreamableType
argument_list|>
argument_list|(
literal|"CustomStreamableType"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|save
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|CustomStreamableType
name|t2
decl_stmt|;
name|t2
operator|.
name|a
operator|=
operator|-
literal|1
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hmmm, shouldn't it return false?
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t2
operator|.
name|a
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|stream
operator|.
name|device
argument_list|()
operator|->
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t2
operator|.
name|a
argument_list|,
name|t
operator|.
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|load
argument_list|(
name|stream
argument_list|,
name|id
argument_list|,
operator|&
name|t2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hmmm, shouldn't it return false?
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyGadget
class|class
name|MyGadget
block|{
DECL|member|Q_GADGET
name|Q_GADGET
empty_stmt|;
public|public:
DECL|enum|MyEnum
DECL|enumerator|Val1
DECL|enumerator|Val2
DECL|enumerator|Val3
enum|enum
name|MyEnum
block|{
name|Val1
block|,
name|Val2
block|,
name|Val3
block|}
enum|;
name|Q_ENUM
argument_list|(
argument|MyEnum
argument_list|)
block|}
class|;
end_class
begin_expr_stmt
DECL|variable|MyGadget
name|Q_DECLARE_METATYPE
argument_list|(
name|MyGadget
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
specifier|const
name|QMetaObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|ScrollBarPolicy
name|Q_DECLARE_METATYPE
argument_list|(
name|Qt
operator|::
name|ScrollBarPolicy
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|MyEnum
name|Q_DECLARE_METATYPE
argument_list|(
name|MyGadget
operator|::
name|MyEnum
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|metaObject_data
name|void
name|tst_QMetaType
operator|::
name|metaObject_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isGadget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isQObjectPtr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QObject"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|QObjectStar
argument_list|)
operator|<<
operator|&
name|QObject
operator|::
name|staticMetaObject
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QFile*"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|QFile
operator|::
name|staticMetaObject
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyObject*"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|MyObject
operator|*
argument_list|>
argument_list|()
operator|<<
operator|&
name|MyObject
operator|::
name|staticMetaObject
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|)
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QEasingCurve"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|QEasingCurve
argument_list|>
argument_list|()
operator|<<
operator|&
name|QEasingCurve
operator|::
name|staticMetaObject
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyGadget"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|MyGadget
argument_list|>
argument_list|()
operator|<<
operator|&
name|MyGadget
operator|::
name|staticMetaObject
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyEnum"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|MyGadget
operator|::
name|MyEnum
argument_list|>
argument_list|()
operator|<<
operator|&
name|MyGadget
operator|::
name|staticMetaObject
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt::ScrollBarPolicy"
argument_list|)
operator|<<
operator|::
name|qMetaTypeId
argument_list|<
name|Qt
operator|::
name|ScrollBarPolicy
argument_list|>
argument_list|()
operator|<<
operator|&
name|QObject
operator|::
name|staticQtMetaObject
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metaObject
name|void
name|tst_QMetaType
operator|::
name|metaObject
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
specifier|const
name|QMetaObject
operator|*
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isGadget
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isQObjectPtr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|metaObjectForType
argument_list|(
name|type
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QMetaType
name|mt
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mt
operator|.
name|metaObject
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
operator|!
operator|(
name|mt
operator|.
name|flags
argument_list|()
operator|&
name|QMetaType
operator|::
name|IsGadget
operator|)
argument_list|,
name|isGadget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
operator|!
operator|(
name|mt
operator|.
name|flags
argument_list|()
operator|&
name|QMetaType
operator|::
name|PointerToQObject
operator|)
argument_list|,
name|isQObjectPtr
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|METATYPE_ID_FUNCTION
define|#
directive|define
name|METATYPE_ID_FUNCTION
parameter_list|(
name|Type
parameter_list|,
name|MetaTypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|case ::qMetaTypeId< Name>(): metaType = MetaTypeIdStruct<MetaTypeId>::Value;
end_define
begin_define
DECL|macro|REGISTER_METATYPE_FUNCTION
define|#
directive|define
name|REGISTER_METATYPE_FUNCTION
parameter_list|(
name|Type
parameter_list|,
name|MetaTypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|case qRegisterMetaType< Name>(): metaType = RegisterMetaTypeStruct<MetaTypeId>::Value;
end_define
begin_struct
template|template
parameter_list|<
name|int
parameter_list|>
struct|struct
DECL|struct|MetaTypeIdStruct
name|MetaTypeIdStruct
block|{
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<
name|int
parameter_list|>
struct|struct
DECL|struct|RegisterMetaTypeStruct
name|RegisterMetaTypeStruct
block|{
block|}
struct|;
end_struct
begin_define
DECL|macro|METATYPE_ID_STRUCT
define|#
directive|define
name|METATYPE_ID_STRUCT
parameter_list|(
name|Type
parameter_list|,
name|MetaTypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|template<> \ struct MetaTypeIdStruct< ::qMetaTypeId< Name>()> \ { \     enum { Value = ::qMetaTypeId< Name>() }; \ };
end_define
begin_define
DECL|macro|REGISTER_METATYPE_STRUCT
define|#
directive|define
name|REGISTER_METATYPE_STRUCT
parameter_list|(
name|Type
parameter_list|,
name|MetaTypeId
parameter_list|,
name|Name
parameter_list|)
define|\
value|template<> \ struct RegisterMetaTypeStruct<qRegisterMetaType< Name>()> \ { \     enum { Value = qRegisterMetaType< Name>() }; \ };
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_CONSTEXPR
argument_list|)
end_if
begin_macro
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|METATYPE_ID_STRUCT
argument_list|)
end_macro
begin_macro
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|REGISTER_METATYPE_STRUCT
argument_list|)
end_macro
begin_struct
template|template
parameter_list|<
name|int
name|i
init|=
operator|::
name|qMetaTypeId
argument_list|<
name|int
argument_list|>
argument_list|()
parameter_list|>
struct|struct
DECL|struct|MetaTypeIdStructDefaultTemplateValue
name|MetaTypeIdStructDefaultTemplateValue
block|{
DECL|enumerator|Value
enum|enum
block|{
name|Value
block|}
enum|;
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<
name|int
name|i
init|=
name|qRegisterMetaType
argument_list|<
name|int
argument_list|>
argument_list|()
parameter_list|>
struct|struct
DECL|struct|RegisterMetaTypeStructDefaultTemplateValue
name|RegisterMetaTypeStructDefaultTemplateValue
block|{
DECL|enumerator|Value
enum|enum
block|{
name|Value
block|}
enum|;
block|}
struct|;
end_struct
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|constexprMetaTypeIds
name|void
name|tst_QMetaType
operator|::
name|constexprMetaTypeIds
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_CONSTEXPR
argument_list|)
name|int
name|id
init|=
literal|0
decl_stmt|;
name|int
name|metaType
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|METATYPE_ID_FUNCTION
argument_list|)
name|metaType
operator|=
name|MetaTypeIdStructDefaultTemplateValue
argument_list|<>
operator|::
name|Value
expr_stmt|;
default|default:
empty_stmt|;
block|}
switch|switch
condition|(
name|id
condition|)
block|{
name|QT_FOR_EACH_STATIC_TYPE
argument_list|(
argument|REGISTER_METATYPE_FUNCTION
argument_list|)
name|metaType
operator|=
name|RegisterMetaTypeStructDefaultTemplateValue
argument_list|<>
operator|::
name|Value
expr_stmt|;
default|default:
empty_stmt|;
block|}
name|Q_UNUSED
argument_list|(
name|metaType
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"The test needs a compiler supporting constexpr"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|constRefs
name|void
name|tst_QMetaType
operator|::
name|constRefs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
specifier|const
name|int
operator|&
argument_list|>
argument_list|()
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
specifier|const
name|QString
operator|&
argument_list|>
argument_list|()
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
specifier|const
name|CustomMovable
operator|&
argument_list|>
argument_list|()
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|CustomMovable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
specifier|const
name|QList
argument_list|<
name|CustomMovable
argument_list|>
operator|&
argument_list|>
argument_list|()
argument_list|,
operator|::
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|CustomMovable
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_CONSTEXPR
argument_list|)
name|Q_STATIC_ASSERT
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
specifier|const
name|int
operator|&
argument_list|>
argument_list|()
operator|==
operator|::
name|qMetaTypeId
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_struct
DECL|struct|CustomConvertibleType
struct|struct
name|CustomConvertibleType
block|{
DECL|function|CustomConvertibleType
specifier|explicit
name|CustomConvertibleType
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|foo
init|=
name|QVariant
argument_list|()
parameter_list|)
member_init_list|:
name|m_foo
argument_list|(
name|foo
argument_list|)
block|{}
DECL|function|~CustomConvertibleType
specifier|virtual
name|~
name|CustomConvertibleType
parameter_list|()
block|{}
DECL|function|toString
name|QString
name|toString
parameter_list|()
specifier|const
block|{
return|return
name|m_foo
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|function|operator QPoint
name|operator
name|QPoint
parameter_list|()
specifier|const
block|{
return|return
name|QPoint
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
return|;
block|}
template|template
parameter_list|<
name|typename
name|To
parameter_list|>
DECL|function|convert
name|To
name|convert
parameter_list|()
specifier|const
block|{
return|return
name|s_value
operator|.
name|value
argument_list|<
name|To
argument_list|>
argument_list|()
return|;
block|}
template|template
parameter_list|<
name|typename
name|To
parameter_list|>
DECL|function|convertOk
name|To
name|convertOk
parameter_list|(
name|bool
modifier|*
name|ok
parameter_list|)
specifier|const
block|{
operator|*
name|ok
operator|=
name|s_ok
expr_stmt|;
return|return
name|s_value
operator|.
name|value
argument_list|<
name|To
argument_list|>
argument_list|()
return|;
block|}
DECL|member|m_foo
name|QVariant
name|m_foo
decl_stmt|;
DECL|member|s_value
specifier|static
name|QVariant
name|s_value
decl_stmt|;
DECL|member|s_ok
specifier|static
name|bool
name|s_ok
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|CustomConvertibleType
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomConvertibleType
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|m_foo
operator|<
name|rhs
operator|.
name|m_foo
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|CustomConvertibleType
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomConvertibleType
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|m_foo
operator|==
name|rhs
operator|.
name|m_foo
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|CustomConvertibleType
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomConvertibleType
modifier|&
name|rhs
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|member|s_value
name|QVariant
name|CustomConvertibleType
operator|::
name|s_value
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|s_ok
name|bool
name|CustomConvertibleType
operator|::
name|s_ok
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|CustomConvertibleType2
struct|struct
name|CustomConvertibleType2
block|{
comment|// implicit
DECL|function|CustomConvertibleType2
name|CustomConvertibleType2
parameter_list|(
specifier|const
name|CustomConvertibleType
modifier|&
name|t
init|=
name|CustomConvertibleType
argument_list|()
parameter_list|)
member_init_list|:
name|m_foo
argument_list|(
name|t
operator|.
name|m_foo
argument_list|)
block|{}
DECL|function|~CustomConvertibleType2
specifier|virtual
name|~
name|CustomConvertibleType2
parameter_list|()
block|{}
DECL|member|m_foo
name|QVariant
name|m_foo
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|CustomDebugStreamableType
struct|struct
name|CustomDebugStreamableType
block|{
DECL|function|toString
name|QString
name|toString
parameter_list|()
specifier|const
block|{
return|return
literal|"test"
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|dbg
parameter_list|,
specifier|const
name|CustomDebugStreamableType
modifier|&
parameter_list|)
block|{
return|return
name|dbg
operator|<<
literal|"string-content"
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|CustomConvertibleType2
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomConvertibleType2
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|m_foo
operator|==
name|rhs
operator|.
name|m_foo
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|CustomConvertibleType2
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomConvertibleType2
modifier|&
name|rhs
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|CustomEqualsOnlyType
struct|struct
name|CustomEqualsOnlyType
block|{
DECL|function|CustomEqualsOnlyType
specifier|explicit
name|CustomEqualsOnlyType
parameter_list|(
name|int
name|value
init|=
literal|0
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|value
argument_list|)
block|{}
DECL|function|~CustomEqualsOnlyType
specifier|virtual
name|~
name|CustomEqualsOnlyType
parameter_list|()
block|{}
DECL|member|val
name|int
name|val
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|CustomEqualsOnlyType
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomEqualsOnlyType
modifier|&
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|val
operator|==
name|rhs
operator|.
name|val
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|CustomEqualsOnlyType
modifier|&
name|lhs
parameter_list|,
specifier|const
name|CustomEqualsOnlyType
modifier|&
name|rhs
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
DECL|variable|CustomConvertibleType
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomConvertibleType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|CustomConvertibleType2
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomConvertibleType2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|CustomDebugStreamableType
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomDebugStreamableType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|CustomEqualsOnlyType
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomEqualsOnlyType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
name|typename
name|U
parameter_list|>
DECL|function|convert
name|U
name|convert
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|t
return|;
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|From
parameter_list|>
struct|struct
DECL|struct|ConvertFunctor
name|ConvertFunctor
block|{
DECL|function|operator ()
name|CustomConvertibleType
name|operator
name|()
parameter_list|(
specifier|const
name|From
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
name|CustomConvertibleType
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|f
argument_list|)
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_function
template|template
parameter_list|<
name|typename
name|From
parameter_list|,
name|typename
name|To
parameter_list|>
DECL|function|hasRegisteredConverterFunction
name|bool
name|hasRegisteredConverterFunction
parameter_list|()
block|{
return|return
name|QMetaType
operator|::
name|hasRegisteredConverterFunction
argument_list|<
name|From
argument_list|,
name|To
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|From
parameter_list|,
name|typename
name|To
parameter_list|>
DECL|function|testCustomTypeNotYetConvertible
name|void
name|testCustomTypeNotYetConvertible
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|(
operator|!
name|hasRegisteredConverterFunction
argument_list|<
name|From
argument_list|,
name|To
argument_list|>
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|!
name|QVariant
operator|::
name|fromValue
argument_list|<
name|From
argument_list|>
argument_list|(
name|From
argument_list|()
argument_list|)
operator|.
name|canConvert
argument_list|(
name|qMetaTypeId
argument_list|<
name|To
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|From
parameter_list|,
name|typename
name|To
parameter_list|>
DECL|function|testCustomTypeConvertible
name|void
name|testCustomTypeConvertible
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|(
name|hasRegisteredConverterFunction
argument_list|<
name|From
argument_list|,
name|To
argument_list|>
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QVariant
operator|::
name|fromValue
argument_list|<
name|From
argument_list|>
argument_list|(
name|From
argument_list|()
argument_list|)
operator|.
name|canConvert
argument_list|(
name|qMetaTypeId
argument_list|<
name|To
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customTypeNotYetConvertible
name|void
name|customTypeNotYetConvertible
parameter_list|()
block|{
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QString
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|bool
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|double
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|float
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QRect
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QRectF
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QPoint
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QPointF
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QSize
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QSizeF
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QLine
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QLineF
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QChar
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QString
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|bool
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|int
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|double
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|float
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QRect
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QRectF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QPoint
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QPointF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QSize
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QSizeF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QLine
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QLineF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|QChar
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|testCustomTypeNotYetConvertible
argument_list|<
name|CustomConvertibleType
argument_list|,
name|CustomConvertibleType2
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerCustomTypeConversions
name|void
name|registerCustomTypeConversions
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QString
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|QString
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|bool
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|bool
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|int
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|int
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|double
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|double
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|float
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|float
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QRect
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|QRect
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QRectF
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|QRectF
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QPoint
argument_list|>
argument_list|(
name|convert
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QPoint
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QPointF
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|QPointF
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QSize
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|QSize
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QSizeF
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|QSizeF
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QLine
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|QLine
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QLineF
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convertOk
argument_list|<
name|QLineF
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|QChar
argument_list|>
argument_list|(
operator|&
name|CustomConvertibleType
operator|::
name|convert
argument_list|<
name|QChar
argument_list|>
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QString
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|bool
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|bool
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|int
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|double
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|float
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|float
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QRect
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QRect
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QRectF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QRectF
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QPoint
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QPoint
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QPointF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QPointF
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QSize
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QSize
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QSizeF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QSizeF
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QLine
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QLine
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QLineF
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QLineF
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|QChar
argument_list|,
name|CustomConvertibleType
argument_list|>
argument_list|(
name|ConvertFunctor
argument_list|<
name|QChar
argument_list|>
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|CustomConvertibleType2
argument_list|>
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"Type conversion already registered from type CustomConvertibleType to type CustomConvertibleType2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
operator|!
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomConvertibleType
argument_list|,
name|CustomConvertibleType2
argument_list|>
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertCustomType_data
name|void
name|tst_QMetaType
operator|::
name|convertCustomType_data
parameter_list|()
block|{
name|customTypeNotYetConvertible
argument_list|()
expr_stmt|;
name|registerCustomTypeConversions
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testQString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"testBool"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"testInt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"testDouble"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"testFloat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"testQRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRectF
argument_list|>
argument_list|(
literal|"testQRectF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPoint
argument_list|>
argument_list|(
literal|"testQPoint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"testQPointF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"testQSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizeF
argument_list|>
argument_list|(
literal|"testQSizeF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLine
argument_list|>
argument_list|(
literal|"testQLine"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLineF
argument_list|>
argument_list|(
literal|"testQLineF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"testQChar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|(
literal|"testCustom"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
literal|true
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|true
operator|<<
literal|15
operator|<<
name|double
argument_list|(
literal|3.14
argument_list|)
operator|<<
name|float
argument_list|(
literal|3.6
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
name|QRectF
argument_list|(
literal|1.4
argument_list|,
literal|1.9
argument_list|,
literal|10.9
argument_list|,
literal|40.2
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|9.2
argument_list|,
literal|2.7
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|4
argument_list|,
literal|9
argument_list|)
operator|<<
name|QSizeF
argument_list|(
literal|3.3
argument_list|,
literal|9.8
argument_list|)
operator|<<
name|QLine
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
literal|29
argument_list|,
literal|4
argument_list|)
operator|<<
name|QLineF
argument_list|(
literal|38.9
argument_list|,
literal|28.9
argument_list|,
literal|102.3
argument_list|,
literal|0.0
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'Q'
argument_list|)
operator|<<
name|CustomConvertibleType
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"not ok"
argument_list|)
operator|<<
literal|false
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|true
operator|<<
literal|15
operator|<<
name|double
argument_list|(
literal|3.14
argument_list|)
operator|<<
name|float
argument_list|(
literal|3.6
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
name|QRectF
argument_list|(
literal|1.4
argument_list|,
literal|1.9
argument_list|,
literal|10.9
argument_list|,
literal|40.2
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|9.2
argument_list|,
literal|2.7
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|4
argument_list|,
literal|9
argument_list|)
operator|<<
name|QSizeF
argument_list|(
literal|3.3
argument_list|,
literal|9.8
argument_list|)
operator|<<
name|QLine
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
literal|29
argument_list|,
literal|4
argument_list|)
operator|<<
name|QLineF
argument_list|()
operator|<<
name|QChar
argument_list|(
literal|'Q'
argument_list|)
operator|<<
name|CustomConvertibleType
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertCustomType
name|void
name|tst_QMetaType
operator|::
name|convertCustomType
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_ok
operator|=
name|ok
expr_stmt|;
name|CustomConvertibleType
name|t
decl_stmt|;
name|QVariant
name|v
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testQString
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQString
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|ok
condition|?
name|testQString
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testQString
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|canConvert
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
name|testQString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|testBool
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testBool
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toBool
argument_list|()
argument_list|,
name|testBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|bool
argument_list|>
argument_list|()
argument_list|,
name|testBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toBool
argument_list|()
operator|)
argument_list|,
name|testBool
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|testInt
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testInt
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
name|ok
condition|?
name|testInt
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testInt
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toInt
argument_list|()
operator|)
argument_list|,
name|testInt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|testDouble
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testDouble
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|,
name|testDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|double
argument_list|>
argument_list|()
argument_list|,
name|testDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toDouble
argument_list|()
operator|)
argument_list|,
name|testDouble
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|testFloat
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testFloat
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toFloat
argument_list|()
argument_list|,
name|ok
condition|?
name|testFloat
else|:
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|float
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testFloat
else|:
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toFloat
argument_list|()
operator|)
argument_list|,
name|testFloat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|testQRect
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQRect
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toRect
argument_list|()
argument_list|,
name|testQRect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QRect
argument_list|>
argument_list|()
argument_list|,
name|testQRect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toRect
argument_list|()
operator|)
argument_list|,
name|testQRect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRectF
argument_list|,
name|testQRectF
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQRectF
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toRectF
argument_list|()
argument_list|,
name|ok
condition|?
name|testQRectF
else|:
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QRectF
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testQRectF
else|:
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toRectF
argument_list|()
operator|)
argument_list|,
name|testQRectF
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPoint
argument_list|,
name|testQPoint
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQPoint
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toPoint
argument_list|()
argument_list|,
name|testQPoint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QPoint
argument_list|>
argument_list|()
argument_list|,
name|testQPoint
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toPoint
argument_list|()
operator|)
argument_list|,
name|testQPoint
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|testQPointF
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQPointF
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toPointF
argument_list|()
argument_list|,
name|ok
condition|?
name|testQPointF
else|:
name|QPointF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QPointF
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testQPointF
else|:
name|QPointF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toPointF
argument_list|()
operator|)
argument_list|,
name|testQPointF
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|testQSize
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQSize
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toSize
argument_list|()
argument_list|,
name|testQSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QSize
argument_list|>
argument_list|()
argument_list|,
name|testQSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toSize
argument_list|()
operator|)
argument_list|,
name|testQSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSizeF
argument_list|,
name|testQSizeF
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQSizeF
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toSizeF
argument_list|()
argument_list|,
name|ok
condition|?
name|testQSizeF
else|:
name|QSizeF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QSizeF
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testQSizeF
else|:
name|QSizeF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toSizeF
argument_list|()
operator|)
argument_list|,
name|testQSizeF
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLine
argument_list|,
name|testQLine
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQLine
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toLine
argument_list|()
argument_list|,
name|testQLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QLine
argument_list|>
argument_list|()
argument_list|,
name|testQLine
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toLine
argument_list|()
operator|)
argument_list|,
name|testQLine
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLineF
argument_list|,
name|testQLineF
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQLineF
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toLineF
argument_list|()
argument_list|,
name|ok
condition|?
name|testQLineF
else|:
name|QLineF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QLineF
argument_list|>
argument_list|()
argument_list|,
name|ok
condition|?
name|testQLineF
else|:
name|QLineF
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toLineF
argument_list|()
operator|)
argument_list|,
name|testQLineF
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|testQChar
argument_list|)
expr_stmt|;
name|CustomConvertibleType
operator|::
name|s_value
operator|=
name|testQChar
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toChar
argument_list|()
argument_list|,
name|testQChar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|CustomConvertibleType
operator|::
name|s_value
operator|.
name|value
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
operator|.
name|m_foo
operator|.
name|toChar
argument_list|()
operator|)
argument_list|,
name|testQChar
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|CustomConvertibleType
argument_list|,
name|testCustom
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|testCustom
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|canConvert
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|CustomConvertibleType2
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|CustomConvertibleType2
argument_list|>
argument_list|()
operator|.
name|m_foo
argument_list|,
name|testCustom
operator|.
name|m_foo
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCustomType_data
name|void
name|tst_QMetaType
operator|::
name|compareCustomType_data
parameter_list|()
block|{
name|QMetaType
operator|::
name|registerComparators
argument_list|<
name|CustomConvertibleType
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"unsorted"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"sorted"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|37
operator|<<
literal|458
operator|<<
literal|1
operator|<<
literal|243
operator|<<
operator|-
literal|4
operator|<<
literal|383
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
operator|-
literal|4
operator|<<
literal|1
operator|<<
literal|37
operator|<<
literal|243
operator|<<
literal|383
operator|<<
literal|458
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dobule"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|4934.93
operator|<<
literal|0.0
operator|<<
literal|302.39
operator|<<
operator|-
literal|39.0
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
operator|-
literal|39.0
operator|<<
literal|0.0
operator|<<
literal|302.39
operator|<<
literal|4934.93
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QString"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|"Hello"
operator|<<
literal|"World"
operator|<<
literal|"this"
operator|<<
literal|"is"
operator|<<
literal|"a"
operator|<<
literal|"test"
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"Hello"
operator|<<
literal|"is"
operator|<<
literal|"test"
operator|<<
literal|"this"
operator|<<
literal|"World"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTime"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|39
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|18
argument_list|,
literal|18
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|9
argument_list|,
literal|27
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|9
argument_list|,
literal|27
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|39
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|18
argument_list|,
literal|18
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDate"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|3
argument_list|,
literal|23
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2001
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1982
argument_list|,
literal|12
argument_list|,
literal|16
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1982
argument_list|,
literal|12
argument_list|,
literal|16
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2001
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|3
argument_list|,
literal|23
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mixed"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|"Hello"
operator|<<
literal|"World"
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|38
operator|<<
name|QChar
argument_list|(
literal|'z'
argument_list|)
operator|<<
operator|-
literal|39
operator|<<
literal|4.6
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
operator|-
literal|39
operator|<<
literal|4.6
operator|<<
literal|38
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|"Hello"
operator|<<
literal|"World"
operator|<<
name|QChar
argument_list|(
literal|'z'
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom"
argument_list|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomConvertibleType
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCustomType
name|void
name|tst_QMetaType
operator|::
name|compareCustomType
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|unsorted
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|unsorted
operator|.
name|begin
argument_list|()
argument_list|,
name|unsorted
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|unsorted
argument_list|,
name|sorted
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCustomEqualOnlyType
name|void
name|tst_QMetaType
operator|::
name|compareCustomEqualOnlyType
parameter_list|()
block|{
name|int
name|metaTypeId
init|=
name|qRegisterMetaType
argument_list|<
name|CustomEqualsOnlyType
argument_list|>
argument_list|()
decl_stmt|;
name|QMetaType
operator|::
name|registerEqualsComparator
argument_list|<
name|CustomEqualsOnlyType
argument_list|>
argument_list|()
expr_stmt|;
name|int
name|result
decl_stmt|;
name|CustomEqualsOnlyType
name|val50
argument_list|(
literal|50
argument_list|)
decl_stmt|;
name|CustomEqualsOnlyType
name|val100
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|CustomEqualsOnlyType
name|val100x
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|QVariant
name|variant50
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val50
argument_list|)
decl_stmt|;
name|QVariant
name|variant100
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val100
argument_list|)
decl_stmt|;
name|QVariant
name|variant100x
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val100x
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|variant50
operator|!=
name|variant100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant50
operator|!=
name|variant100x
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant100
operator|!=
name|variant50
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant100x
operator|!=
name|variant50
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant100
operator|==
name|variant100x
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant100
operator|==
name|variant100
argument_list|)
expr_stmt|;
comment|// compare always fails
name|QVERIFY
argument_list|(
operator|!
operator|(
name|variant50
operator|<
name|variant50
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|variant50
operator|<
name|variant100
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|variant100
operator|<
name|variant50
operator|)
argument_list|)
expr_stmt|;
comment|// check QMetaType::compare works/doesn't crash for equals only comparators
name|bool
name|wasSuccess
init|=
name|QMetaType
operator|::
name|compare
argument_list|(
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|compare
argument_list|(
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100x
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|compare
argument_list|(
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|wasSuccess
argument_list|)
expr_stmt|;
comment|// check QMetaType::equals works for equals only comparator
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant100x
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100x
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100x
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
name|variant50
operator|.
name|constData
argument_list|()
argument_list|,
name|variant100x
operator|.
name|constData
argument_list|()
argument_list|,
name|metaTypeId
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wasSuccess
argument_list|)
expr_stmt|;
comment|//check QMetaType::equals for type w/o equals comparator being registered
name|CustomMovable
name|movable1
decl_stmt|;
name|CustomMovable
name|movable2
decl_stmt|;
name|wasSuccess
operator|=
name|QMetaType
operator|::
name|equals
argument_list|(
operator|&
name|movable1
argument_list|,
operator|&
name|movable2
argument_list|,
name|qRegisterMetaType
argument_list|<
name|CustomMovable
argument_list|>
argument_list|()
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|wasSuccess
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|MessageHandlerCustom
struct|struct
name|MessageHandlerCustom
super|:
specifier|public
name|MessageHandler
block|{
DECL|function|MessageHandlerCustom
name|MessageHandlerCustom
parameter_list|(
specifier|const
name|int
name|typeId
parameter_list|)
member_init_list|:
name|MessageHandler
argument_list|(
name|typeId
argument_list|,
name|handler
argument_list|)
block|{}
DECL|function|handler
specifier|static
name|void
name|handler
parameter_list|(
name|QtMsgType
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|msg
operator|.
name|trimmed
argument_list|()
argument_list|,
name|expectedMessage
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|member|expectedMessage
specifier|static
name|QString
name|expectedMessage
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|expectedMessage
name|QString
name|MessageHandlerCustom
operator|::
name|expectedMessage
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|customDebugStream
name|void
name|tst_QMetaType
operator|::
name|customDebugStream
parameter_list|()
block|{
name|MessageHandlerCustom
name|handler
argument_list|(
operator|::
name|qMetaTypeId
argument_list|<
name|CustomDebugStreamableType
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|QVariant
name|v1
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomDebugStreamableType
argument_list|()
argument_list|)
decl_stmt|;
name|handler
operator|.
name|expectedMessage
operator|=
literal|"QVariant(CustomDebugStreamableType, )"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QMetaType
operator|::
name|registerConverter
argument_list|<
name|CustomDebugStreamableType
argument_list|,
name|QString
argument_list|>
argument_list|(
operator|&
name|CustomDebugStreamableType
operator|::
name|toString
argument_list|)
expr_stmt|;
name|handler
operator|.
name|expectedMessage
operator|=
literal|"QVariant(CustomDebugStreamableType, \"test\")"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QMetaType
operator|::
name|registerDebugStreamOperator
argument_list|<
name|CustomDebugStreamableType
argument_list|>
argument_list|()
expr_stmt|;
name|handler
operator|.
name|expectedMessage
operator|=
literal|"QVariant(CustomDebugStreamableType, string-content)"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|v1
expr_stmt|;
block|}
end_function
begin_comment
comment|// Compile-time test, it should be possible to register function pointer types
end_comment
begin_class_decl
class_decl|class
name|Undefined
class_decl|;
end_class_decl
begin_typedef
DECL|typedef|UndefinedFunction0
typedef|typedef
name|Undefined
function_decl|(
modifier|*
name|UndefinedFunction0
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_typedef
DECL|typedef|UndefinedFunction1
typedef|typedef
name|Undefined
function_decl|(
modifier|*
name|UndefinedFunction1
function_decl|)
parameter_list|(
name|Undefined
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|UndefinedFunction2
typedef|typedef
name|Undefined
function_decl|(
modifier|*
name|UndefinedFunction2
function_decl|)
parameter_list|(
name|Undefined
parameter_list|,
name|Undefined
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|UndefinedFunction3
typedef|typedef
name|Undefined
function_decl|(
modifier|*
name|UndefinedFunction3
function_decl|)
parameter_list|(
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|)
function_decl|;
end_typedef
begin_typedef
DECL|typedef|UndefinedFunction4
typedef|typedef
name|Undefined
function_decl|(
modifier|*
name|UndefinedFunction4
function_decl|)
parameter_list|(
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|,
name|Undefined
parameter_list|)
function_decl|;
end_typedef
begin_expr_stmt
DECL|variable|UndefinedFunction0
name|Q_DECLARE_METATYPE
argument_list|(
name|UndefinedFunction0
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|UndefinedFunction1
name|Q_DECLARE_METATYPE
argument_list|(
name|UndefinedFunction1
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|UndefinedFunction2
name|Q_DECLARE_METATYPE
argument_list|(
name|UndefinedFunction2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|UndefinedFunction3
name|Q_DECLARE_METATYPE
argument_list|(
name|UndefinedFunction3
argument_list|)
expr_stmt|;
end_expr_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_VARIADIC_TEMPLATES
end_ifdef
begin_expr_stmt
DECL|variable|UndefinedFunction4
name|Q_DECLARE_METATYPE
argument_list|(
name|UndefinedFunction4
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMetaType
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmetatype.moc"
end_include
end_unit
