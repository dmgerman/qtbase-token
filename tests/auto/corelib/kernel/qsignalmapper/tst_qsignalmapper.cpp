begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsignalmapper.h>
end_include
begin_class
DECL|class|tst_QSignalMapper
class|class
name|tst_QSignalMapper
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|mapped
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|QtTestObject
class|class
name|QtTestObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|myslot
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|void
name|myslot
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
function_decl|;
signals|signals:
name|void
name|mysignal
parameter_list|(
name|int
parameter_list|)
function_decl|;
public|public:
name|void
name|emit_mysignal
parameter_list|(
name|int
parameter_list|)
function_decl|;
DECL|member|id
name|int
name|id
decl_stmt|;
DECL|member|str
name|QString
name|str
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|myslot
name|void
name|QtTestObject
operator|::
name|myslot
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|->
name|id
operator|=
name|id
expr_stmt|;
block|}
end_function
begin_function
DECL|function|myslot
name|void
name|QtTestObject
operator|::
name|myslot
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|this
operator|->
name|str
operator|=
name|str
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emit_mysignal
name|void
name|QtTestObject
operator|::
name|emit_mysignal
parameter_list|(
name|int
name|value
parameter_list|)
block|{
emit|emit
name|mysignal
argument_list|(
name|value
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|mapped
name|void
name|tst_QSignalMapper
operator|::
name|mapped
parameter_list|()
block|{
name|QSignalMapper
name|mapper
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QtTestObject
name|target
decl_stmt|;
name|QtTestObject
name|src1
decl_stmt|;
name|QtTestObject
name|src2
decl_stmt|;
name|QtTestObject
name|src3
decl_stmt|;
name|connect
argument_list|(
operator|&
name|src1
argument_list|,
name|SIGNAL
argument_list|(
name|mysignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|mapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|src2
argument_list|,
name|SIGNAL
argument_list|(
name|mysignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|mapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|src3
argument_list|,
name|SIGNAL
argument_list|(
name|mysignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|mapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setMapping
argument_list|(
operator|&
name|src1
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setMapping
argument_list|(
operator|&
name|src1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setMapping
argument_list|(
operator|&
name|src2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setMapping
argument_list|(
operator|&
name|src2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setMapping
argument_list|(
operator|&
name|src3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|mapper
argument_list|,
name|SIGNAL
argument_list|(
name|mapped
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|target
argument_list|,
name|SLOT
argument_list|(
name|myslot
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|mapper
argument_list|,
name|SIGNAL
argument_list|(
name|mapped
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|target
argument_list|,
name|SLOT
argument_list|(
name|myslot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|src1
operator|.
name|emit_mysignal
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|id
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|str
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|src2
operator|.
name|emit_mysignal
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|id
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|str
operator|==
literal|"two"
argument_list|)
expr_stmt|;
name|src3
operator|.
name|emit_mysignal
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|id
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|str
operator|==
literal|"three"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSignalMapper
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsignalmapper.moc"
end_include
end_unit
