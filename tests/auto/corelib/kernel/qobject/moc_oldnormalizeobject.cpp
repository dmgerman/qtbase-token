begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/**************************************************************************** ** Meta object code from reading C++ file 'oldnormalizeobject.h' ** ** Created: Wed Nov 18 11:43:05 2009 **      by: The Qt Meta Object Compiler version 62 (Qt 4.6.0) ** *****************************************************************************/
end_comment
begin_comment
comment|// Yhis file was generated from moc version 4.6 to test binary compatibility
end_comment
begin_comment
comment|// It should *not* be generated by the current moc
end_comment
begin_include
include|#
directive|include
file|"oldnormalizeobject.h"
end_include
begin_decl_stmt
name|QT_BEGIN_MOC_NAMESPACE
DECL|variable|qt_meta_data_OldNormalizeObject
specifier|static
specifier|const
name|uint
name|qt_meta_data_OldNormalizeObject
index|[]
init|=
block|{
comment|// content:
literal|4
block|,
comment|// revision
literal|0
block|,
comment|// classname
literal|0
block|,
literal|0
block|,
comment|// classinfo
literal|6
block|,
literal|14
block|,
comment|// methods
literal|0
block|,
literal|0
block|,
comment|// properties
literal|0
block|,
literal|0
block|,
comment|// enums/sets
literal|0
block|,
literal|0
block|,
comment|// constructors
literal|0
block|,
comment|// flags
literal|3
block|,
comment|// signalCount
comment|// signals: signature, parameters, type, tag, flags
literal|24
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x05
block|,
literal|57
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x05
block|,
literal|100
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x05
block|,
comment|// slots: signature, parameters, type, tag, flags
literal|149
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x0a
block|,
literal|180
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x0a
block|,
literal|221
block|,
literal|20
block|,
literal|19
block|,
literal|19
block|,
literal|0x0a
block|,
literal|0
comment|// eod
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qt_meta_stringdata_OldNormalizeObject
specifier|static
specifier|const
name|char
name|qt_meta_stringdata_OldNormalizeObject
index|[]
init|=
block|{
literal|"OldNormalizeObject\0\0ref\0"
literal|"typeRefSignal(Template<Class&>&)\0"
literal|"constTypeRefSignal(Template<const Class&>)\0"
literal|"typeConstRefSignal(Template<const Class&>const&)\0"
literal|"typeRefSlot(Template<Class&>&)\0"
literal|"constTypeRefSlot(Template<const Class&>)\0"
literal|"typeConstRefSlot(Template<const Class&>const&)\0"
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|staticMetaObject
specifier|const
name|QMetaObject
name|OldNormalizeObject
operator|::
name|staticMetaObject
init|=
block|{
block|{
operator|&
name|QObject
operator|::
name|staticMetaObject
block|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|QByteArrayData
operator|*
argument_list|>
argument_list|(
name|qt_meta_stringdata_OldNormalizeObject
argument_list|)
block|,
name|qt_meta_data_OldNormalizeObject
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|Q_NO_DATA_RELOCATION
end_ifdef
begin_function
DECL|function|getStaticMetaObject
specifier|const
name|QMetaObject
modifier|&
name|OldNormalizeObject
operator|::
name|getStaticMetaObject
parameter_list|()
block|{
return|return
name|staticMetaObject
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//Q_NO_DATA_RELOCATION
end_comment
begin_function
DECL|function|metaObject
specifier|const
name|QMetaObject
modifier|*
name|OldNormalizeObject
operator|::
name|metaObject
parameter_list|()
specifier|const
block|{
return|return
name|QObject
operator|::
name|d_ptr
operator|->
name|metaObject
condition|?
name|QObject
operator|::
name|d_ptr
operator|->
name|metaObject
else|:
operator|&
name|staticMetaObject
return|;
block|}
end_function
begin_function
DECL|function|qt_metacast
name|void
modifier|*
name|OldNormalizeObject
operator|::
name|qt_metacast
parameter_list|(
specifier|const
name|char
modifier|*
name|_clname
parameter_list|)
block|{
if|if
condition|(
operator|!
name|_clname
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|_clname
argument_list|,
name|qt_meta_stringdata_OldNormalizeObject
argument_list|)
condition|)
return|return
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|OldNormalizeObject
operator|*
argument_list|>
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
return|return
name|QObject
operator|::
name|qt_metacast
argument_list|(
name|_clname
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qt_metacall
name|int
name|OldNormalizeObject
operator|::
name|qt_metacall
parameter_list|(
name|QMetaObject
operator|::
name|Call
name|_c
parameter_list|,
name|int
name|_id
parameter_list|,
name|void
modifier|*
modifier|*
name|_a
parameter_list|)
block|{
name|_id
operator|=
name|QObject
operator|::
name|qt_metacall
argument_list|(
name|_c
argument_list|,
name|_id
argument_list|,
name|_a
argument_list|)
expr_stmt|;
if|if
condition|(
name|_id
operator|<
literal|0
condition|)
return|return
name|_id
return|;
if|if
condition|(
name|_c
operator|==
name|QMetaObject
operator|::
name|InvokeMetaMethod
condition|)
block|{
switch|switch
condition|(
name|_id
condition|)
block|{
case|case
literal|0
case|:
name|typeRefSignal
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|Template
argument_list|<
name|Class
operator|&
argument_list|>
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|constTypeRefSignal
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|Template
argument_list|<
specifier|const
name|Class
operator|&
argument_list|>
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|typeConstRefSignal
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|Template
argument_list|<
specifier|const
name|Class
operator|&
argument_list|>
specifier|const
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|typeRefSlot
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|Template
argument_list|<
name|Class
operator|&
argument_list|>
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|constTypeRefSlot
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|Template
argument_list|<
specifier|const
name|Class
operator|&
argument_list|>
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|typeConstRefSlot
argument_list|(
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|Template
argument_list|<
specifier|const
name|Class
operator|&
argument_list|>
specifier|const
operator|(
operator|*
operator|)
argument_list|>
argument_list|(
name|_a
index|[
literal|1
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
name|_id
operator|-=
literal|6
expr_stmt|;
block|}
return|return
name|_id
return|;
block|}
end_function
begin_comment
comment|// SIGNAL 0
end_comment
begin_function
DECL|function|typeRefSignal
name|void
name|OldNormalizeObject
operator|::
name|typeRefSignal
parameter_list|(
name|Template
argument_list|<
name|Class
modifier|&
argument_list|>
modifier|&
name|_t1
parameter_list|)
block|{
name|void
modifier|*
name|_a
index|[]
init|=
block|{
literal|0
block|,
expr|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|_t1
argument_list|)
operator|)
block|}
decl_stmt|;
name|QMetaObject
operator|::
name|activate
argument_list|(
name|this
argument_list|,
operator|&
name|staticMetaObject
argument_list|,
literal|0
argument_list|,
name|_a
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// SIGNAL 1
end_comment
begin_function
DECL|function|constTypeRefSignal
name|void
name|OldNormalizeObject
operator|::
name|constTypeRefSignal
parameter_list|(
specifier|const
name|Template
argument_list|<
specifier|const
name|Class
modifier|&
argument_list|>
modifier|&
name|_t1
parameter_list|)
block|{
name|void
modifier|*
name|_a
index|[]
init|=
block|{
literal|0
block|,
expr|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|_t1
argument_list|)
operator|)
block|}
decl_stmt|;
name|QMetaObject
operator|::
name|activate
argument_list|(
name|this
argument_list|,
operator|&
name|staticMetaObject
argument_list|,
literal|1
argument_list|,
name|_a
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// SIGNAL 2
end_comment
begin_function
DECL|function|typeConstRefSignal
name|void
name|OldNormalizeObject
operator|::
name|typeConstRefSignal
parameter_list|(
name|Template
argument_list|<
name|Class
specifier|const
operator|&
argument_list|>
specifier|const
modifier|&
name|_t1
parameter_list|)
block|{
name|void
modifier|*
name|_a
index|[]
init|=
block|{
literal|0
block|,
expr|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|_t1
argument_list|)
operator|)
block|}
decl_stmt|;
name|QMetaObject
operator|::
name|activate
argument_list|(
name|this
argument_list|,
operator|&
name|staticMetaObject
argument_list|,
literal|2
argument_list|,
name|_a
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_MOC_NAMESPACE
end_macro
end_unit
