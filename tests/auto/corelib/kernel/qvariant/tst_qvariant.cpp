begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qbitarray.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qiodevice.h>
end_include
begin_include
include|#
directive|include
file|<qurl.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qkeysequence.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_include
include|#
directive|include
file|<qcursor.h>
end_include
begin_include
include|#
directive|include
file|<qimage.h>
end_include
begin_include
include|#
directive|include
file|<qicon.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix.h>
end_include
begin_include
include|#
directive|include
file|<qmatrix4x4.h>
end_include
begin_include
include|#
directive|include
file|<qpen.h>
end_include
begin_include
include|#
directive|include
file|<qpolygon.h>
end_include
begin_include
include|#
directive|include
file|<qpalette.h>
end_include
begin_include
include|#
directive|include
file|<qtransform.h>
end_include
begin_include
include|#
directive|include
file|<qvector2d.h>
end_include
begin_include
include|#
directive|include
file|<qvector3d.h>
end_include
begin_include
include|#
directive|include
file|<qvector4d.h>
end_include
begin_include
include|#
directive|include
file|<qquaternion.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qlonglong
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qulonglong
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPointF
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QRectF
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSize
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSizeF
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLine
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLineF
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPoint
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QRect
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPixmap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QBrush
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFont
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QColor
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QKeySequence
argument_list|)
end_macro
begin_class_decl
class_decl|class
name|CustomNonQObject
class_decl|;
end_class_decl
begin_class
DECL|class|tst_QVariant
class|class
name|tst_QVariant
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QVariant
name|tst_QVariant
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|customNonQObjectPointer
argument_list|(
literal|0
argument_list|)
block|{      }
private|private
name|slots
private|:
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|copy_constructor
parameter_list|()
function_decl|;
name|void
name|isNull
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|canConvert_data
parameter_list|()
function_decl|;
name|void
name|canConvert
parameter_list|()
function_decl|;
name|void
name|toSize_data
parameter_list|()
function_decl|;
name|void
name|toSize
parameter_list|()
function_decl|;
name|void
name|toSizeF_data
parameter_list|()
function_decl|;
name|void
name|toSizeF
parameter_list|()
function_decl|;
name|void
name|toPoint_data
parameter_list|()
function_decl|;
name|void
name|toPoint
parameter_list|()
function_decl|;
name|void
name|toRect_data
parameter_list|()
function_decl|;
name|void
name|toRect
parameter_list|()
function_decl|;
name|void
name|toChar_data
parameter_list|()
function_decl|;
name|void
name|toChar
parameter_list|()
function_decl|;
name|void
name|toLine_data
parameter_list|()
function_decl|;
name|void
name|toLine
parameter_list|()
function_decl|;
name|void
name|toLineF_data
parameter_list|()
function_decl|;
name|void
name|toLineF
parameter_list|()
function_decl|;
name|void
name|toInt_data
parameter_list|()
function_decl|;
name|void
name|toInt
parameter_list|()
function_decl|;
name|void
name|toUInt_data
parameter_list|()
function_decl|;
name|void
name|toUInt
parameter_list|()
function_decl|;
name|void
name|toBool_data
parameter_list|()
function_decl|;
name|void
name|toBool
parameter_list|()
function_decl|;
name|void
name|toLongLong_data
parameter_list|()
function_decl|;
name|void
name|toLongLong
parameter_list|()
function_decl|;
name|void
name|toULongLong_data
parameter_list|()
function_decl|;
name|void
name|toULongLong
parameter_list|()
function_decl|;
name|void
name|toByteArray_data
parameter_list|()
function_decl|;
name|void
name|toByteArray
parameter_list|()
function_decl|;
name|void
name|toString_data
parameter_list|()
function_decl|;
name|void
name|toString
parameter_list|()
function_decl|;
name|void
name|toDate_data
parameter_list|()
function_decl|;
name|void
name|toDate
parameter_list|()
function_decl|;
name|void
name|toTime_data
parameter_list|()
function_decl|;
name|void
name|toTime
parameter_list|()
function_decl|;
name|void
name|toDateTime_data
parameter_list|()
function_decl|;
name|void
name|toDateTime
parameter_list|()
function_decl|;
name|void
name|toDouble_data
parameter_list|()
function_decl|;
name|void
name|toDouble
parameter_list|()
function_decl|;
name|void
name|toPointF_data
parameter_list|()
function_decl|;
name|void
name|toPointF
parameter_list|()
function_decl|;
name|void
name|toFont_data
parameter_list|()
function_decl|;
name|void
name|toFont
parameter_list|()
function_decl|;
name|void
name|toKeySequence_data
parameter_list|()
function_decl|;
name|void
name|toKeySequence
parameter_list|()
function_decl|;
name|void
name|toRectF_data
parameter_list|()
function_decl|;
name|void
name|toRectF
parameter_list|()
function_decl|;
name|void
name|toColor_data
parameter_list|()
function_decl|;
name|void
name|toColor
parameter_list|()
function_decl|;
name|void
name|toPixmap_data
parameter_list|()
function_decl|;
name|void
name|toPixmap
parameter_list|()
function_decl|;
name|void
name|toImage_data
parameter_list|()
function_decl|;
name|void
name|toImage
parameter_list|()
function_decl|;
name|void
name|toBrush_data
parameter_list|()
function_decl|;
name|void
name|toBrush
parameter_list|()
function_decl|;
name|void
name|qvariant_cast_QObject_data
parameter_list|()
function_decl|;
name|void
name|qvariant_cast_QObject
parameter_list|()
function_decl|;
name|void
name|qvariant_cast_QObject_derived
parameter_list|()
function_decl|;
name|void
name|toLocale
parameter_list|()
function_decl|;
name|void
name|toRegExp
parameter_list|()
function_decl|;
name|void
name|toRegularExpression
parameter_list|()
function_decl|;
name|void
name|matrix
parameter_list|()
function_decl|;
name|void
name|transform
parameter_list|()
function_decl|;
name|void
name|matrix4x4
parameter_list|()
function_decl|;
name|void
name|vector2D
parameter_list|()
function_decl|;
name|void
name|vector3D
parameter_list|()
function_decl|;
name|void
name|vector4D
parameter_list|()
function_decl|;
name|void
name|quaternion
parameter_list|()
function_decl|;
name|void
name|url
parameter_list|()
function_decl|;
name|void
name|userType
parameter_list|()
function_decl|;
name|void
name|basicUserType
parameter_list|()
function_decl|;
name|void
name|variant_to
parameter_list|()
function_decl|;
name|void
name|writeToReadFromDataStream_data
parameter_list|()
function_decl|;
name|void
name|writeToReadFromDataStream
parameter_list|()
function_decl|;
name|void
name|writeToReadFromOldDataStream
parameter_list|()
function_decl|;
name|void
name|checkDataStream
parameter_list|()
function_decl|;
name|void
name|operator_eq_eq_data
parameter_list|()
function_decl|;
name|void
name|operator_eq_eq
parameter_list|()
function_decl|;
name|void
name|operator_eq_eq_rhs
parameter_list|()
function_decl|;
name|void
name|typeName_data
parameter_list|()
function_decl|;
name|void
name|typeName
parameter_list|()
function_decl|;
name|void
name|typeToName
parameter_list|()
function_decl|;
name|void
name|streamInvalidVariant
parameter_list|()
function_decl|;
name|void
name|podUserType
parameter_list|()
function_decl|;
name|void
name|data
parameter_list|()
function_decl|;
name|void
name|constData
parameter_list|()
function_decl|;
name|void
name|saveLoadCustomTypes
parameter_list|()
function_decl|;
name|void
name|globalColor
parameter_list|()
function_decl|;
name|void
name|variantMap
parameter_list|()
function_decl|;
name|void
name|variantHash
parameter_list|()
function_decl|;
name|void
name|convertToQUint8
parameter_list|()
specifier|const
function_decl|;
name|void
name|invalidQColor
parameter_list|()
specifier|const
function_decl|;
name|void
name|comparePointers
parameter_list|()
specifier|const
function_decl|;
name|void
name|voidStar
parameter_list|()
specifier|const
function_decl|;
name|void
name|dataStar
parameter_list|()
specifier|const
function_decl|;
name|void
name|canConvertQStringList
parameter_list|()
specifier|const
function_decl|;
name|void
name|canConvertQStringList_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|canConvertMetaTypeToInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|variantToDateTimeWithoutWarnings
parameter_list|()
specifier|const
function_decl|;
name|void
name|invalidDateTime
parameter_list|()
specifier|const
function_decl|;
name|void
name|loadUnknownUserType
parameter_list|()
function_decl|;
name|void
name|loadBrokenUserType
parameter_list|()
function_decl|;
name|void
name|invalidDate
parameter_list|()
specifier|const
function_decl|;
name|void
name|compareCustomTypes
parameter_list|()
specifier|const
function_decl|;
name|void
name|timeToDateTime
parameter_list|()
specifier|const
function_decl|;
name|void
name|copyingUserTypes
parameter_list|()
specifier|const
function_decl|;
name|void
name|convertBoolToByteArray
parameter_list|()
specifier|const
function_decl|;
name|void
name|convertBoolToByteArray_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|convertByteArrayToBool
parameter_list|()
specifier|const
function_decl|;
name|void
name|convertByteArrayToBool_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|toIntFromQString
parameter_list|()
specifier|const
function_decl|;
name|void
name|toIntFromDouble
parameter_list|()
specifier|const
function_decl|;
name|void
name|setValue
parameter_list|()
function_decl|;
name|void
name|numericalConvert
parameter_list|()
function_decl|;
name|void
name|moreCustomTypes
parameter_list|()
function_decl|;
name|void
name|movabilityTest
parameter_list|()
function_decl|;
name|void
name|variantInVariant
parameter_list|()
function_decl|;
name|void
name|colorInteger
parameter_list|()
function_decl|;
name|void
name|forwardDeclare
parameter_list|()
function_decl|;
name|void
name|debugStream_data
parameter_list|()
function_decl|;
name|void
name|debugStream
parameter_list|()
function_decl|;
name|void
name|debugStreamType_data
parameter_list|()
function_decl|;
name|void
name|debugStreamType
parameter_list|()
function_decl|;
name|void
name|loadQt4Stream_data
parameter_list|()
function_decl|;
name|void
name|loadQt4Stream
parameter_list|()
function_decl|;
name|void
name|saveQt4Stream_data
parameter_list|()
function_decl|;
name|void
name|saveQt4Stream
parameter_list|()
function_decl|;
name|void
name|loadQt5Stream_data
parameter_list|()
function_decl|;
name|void
name|loadQt5Stream
parameter_list|()
function_decl|;
name|void
name|saveQt5Stream_data
parameter_list|()
function_decl|;
name|void
name|saveQt5Stream
parameter_list|()
function_decl|;
name|void
name|guiVariantAtExit
parameter_list|()
function_decl|;
name|void
name|widgetsVariantAtExit
parameter_list|()
function_decl|;
private|private:
name|void
name|dataStream_data
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
function_decl|;
name|void
name|loadQVariantFromDataStream
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
function_decl|;
name|void
name|saveQVariantFromDataStream
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
function_decl|;
DECL|member|customNonQObjectPointer
name|CustomNonQObject
modifier|*
name|customNonQObjectPointer
decl_stmt|;
DECL|member|objectPointerTestData
name|QVector
argument_list|<
name|QObject
modifier|*
argument_list|>
name|objectPointerTestData
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDate
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTime
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDateTime
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVariant
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|intMax1
specifier|const
name|qlonglong
name|intMax1
init|=
operator|(
name|qlonglong
operator|)
name|INT_MAX
operator|+
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uintMax1
specifier|const
name|qulonglong
name|uintMax1
init|=
operator|(
name|qulonglong
operator|)
name|UINT_MAX
operator|+
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|constructor
name|void
name|tst_QVariant
operator|::
name|constructor
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var2
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|varll
argument_list|(
name|intMax1
argument_list|)
decl_stmt|;
name|QVariant
name|varll2
argument_list|(
name|varll
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|varll2
argument_list|,
name|varll
argument_list|)
expr_stmt|;
name|QVariant
name|var3
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|var3
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"QString"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var3
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var4
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|var4
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var4
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var5
argument_list|(
name|QLatin1String
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|var5
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var5
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"QString"
argument_list|)
expr_stmt|;
name|QVariant
name|var6
argument_list|(
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|var6
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var6
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"qlonglong"
argument_list|)
expr_stmt|;
name|QVariant
name|var7
init|=
literal|5
decl_stmt|;
name|QVERIFY
argument_list|(
name|var7
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var7
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var8
decl_stmt|;
name|var8
operator|.
name|setValue
argument_list|<
name|int
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var8
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var8
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy_constructor
name|void
name|tst_QVariant
operator|::
name|copy_constructor
parameter_list|()
block|{
name|QVariant
name|var7
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QVariant
name|var8
argument_list|(
name|var7
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|var8
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var8
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNull
name|void
name|tst_QVariant
operator|::
name|isNull
parameter_list|()
block|{
name|QVariant
name|var
decl_stmt|;
name|QVERIFY
argument_list|(
name|var
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|str1
decl_stmt|;
name|QVariant
name|var1
argument_list|(
name|str1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|var1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var2
argument_list|(
name|QString
operator|::
name|null
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|var2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var3
argument_list|(
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var4
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var5
init|=
name|QString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|var5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var6
argument_list|(
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|var6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|var6
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|var6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|var6
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|var6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|varLL
argument_list|(
operator|(
name|qlonglong
operator|)
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|varLL
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var7
argument_list|(
name|QString
operator|::
name|null
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|var7
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QVariant
operator|::
name|swap
parameter_list|()
block|{
name|QVariant
name|v1
init|=
literal|1
decl_stmt|,
name|v2
init|=
literal|2.0
decl_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canConvert_data
name|void
name|tst_QVariant
operator|::
name|canConvert_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"BitArrayCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"BitmapCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"BoolCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"BrushCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ByteArrayCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ColorCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"CursorCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"DateCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"DateTimeCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"DoubleCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"FontCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ImageCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"IntCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"InvalidCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"KeySequenceCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ListCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"LongLongCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"MapCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"PaletteCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"PenCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"PixmapCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"PointCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"RectCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"RegionCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"SizeCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"SizePolicyCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"StringCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"StringListCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"TimeCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"UIntCast"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ULongLongCast"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Y
DECL|macro|Y
undef|#
directive|undef
name|Y
endif|#
directive|endif
ifdef|#
directive|ifdef
name|N
DECL|macro|N
undef|#
directive|undef
name|N
endif|#
directive|endif
DECL|macro|Y
define|#
directive|define
name|Y
value|true
DECL|macro|N
define|#
directive|define
name|N
value|false
comment|//            bita bitm bool brsh byta col  curs date dt   dbl  font img  int  inv  kseq list ll   map  pal  pen  pix  pnt  rect reg  size sp   str  strl time uint ull
name|QVariant
name|var
argument_list|(
name|QBitArray
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BitArray"
argument_list|)
operator|<<
name|var
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QBitmap
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bitmap"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QBrush
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Brush"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ByteArray"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QColor
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Color"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QCursor
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cursor"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
endif|#
directive|endif
name|var
operator|=
name|QVariant
argument_list|(
name|QDate
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Date"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DateTime"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
operator|(
name|double
operator|)
literal|0.1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Double"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Float"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QFont
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Font"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QIcon
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Icon"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QImage
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Image"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Int"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QKeySequence
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KeySequence"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"List"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LongLong"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Map"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Palette"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QPen
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Pen"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Pixmap"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QPolygon
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PointArray"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Point"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QRect
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Rect"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QRegion
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Region"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Size"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|qVariantFromValue
argument_list|(
name|QSizePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SizePolicy"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"String"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QStringList
argument_list|(
literal|"entry"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StringList"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
name|QTime
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Time"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
operator|(
name|uint
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UInt"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
name|var
operator|=
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ULongLong"
argument_list|)
operator|<<
name|var
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|N
operator|<<
name|N
operator|<<
name|Y
operator|<<
name|Y
expr_stmt|;
DECL|macro|N
undef|#
directive|undef
name|N
DECL|macro|Y
undef|#
directive|undef
name|Y
block|}
end_function
begin_function
DECL|function|canConvert
name|void
name|tst_QVariant
operator|::
name|canConvert
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|BitArrayCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|BitmapCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|BoolCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|BrushCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ByteArrayCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ColorCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|CursorCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|DateCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|DateTimeCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|DoubleCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|FontCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ImageCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|IntCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|InvalidCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|KeySequenceCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ListCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|LongLongCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|MapCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|PaletteCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|PenCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|PixmapCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|PointCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|RectCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|RegionCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|SizeCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|SizePolicyCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|StringCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|StringListCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|TimeCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|UIntCast
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ULongLongCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|BitArray
argument_list|)
argument_list|,
name|BitArrayCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Bitmap
argument_list|)
argument_list|,
name|BitmapCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Bool
argument_list|)
argument_list|,
name|BoolCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Brush
argument_list|)
argument_list|,
name|BrushCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|ByteArray
argument_list|)
argument_list|,
name|ByteArrayCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|,
name|ColorCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Cursor
argument_list|)
argument_list|,
name|CursorCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|)
argument_list|,
name|DateCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
argument_list|,
name|DateTimeCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|,
name|DoubleCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|)
argument_list|)
argument_list|,
name|DoubleCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Font
argument_list|)
argument_list|,
name|FontCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Image
argument_list|)
argument_list|,
name|ImageCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|,
name|IntCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
argument_list|,
name|InvalidCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|KeySequence
argument_list|)
argument_list|,
name|KeySequenceCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|List
argument_list|)
argument_list|,
name|ListCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
argument_list|,
name|LongLongCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Map
argument_list|)
argument_list|,
name|MapCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Palette
argument_list|)
argument_list|,
name|PaletteCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Pen
argument_list|)
argument_list|,
name|PenCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Pixmap
argument_list|)
argument_list|,
name|PixmapCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Point
argument_list|)
argument_list|,
name|PointCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Rect
argument_list|)
argument_list|,
name|RectCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Region
argument_list|)
argument_list|,
name|RegionCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Size
argument_list|)
argument_list|,
name|SizeCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|SizePolicy
argument_list|)
argument_list|,
name|SizePolicyCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|,
name|StringCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|StringList
argument_list|)
argument_list|,
name|StringListCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|)
argument_list|,
name|TimeCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|UInt
argument_list|)
argument_list|,
name|UIntCast
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|ULongLong
argument_list|)
argument_list|,
name|ULongLongCast
argument_list|)
expr_stmt|;
comment|// Invalid type ids
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
operator|-
literal|23
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
operator|-
literal|23876
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
operator|.
name|canConvert
argument_list|(
literal|23876
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toInt_data
name|void
name|tst_QVariant
operator|::
name|toInt_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123
argument_list|)
operator|<<
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927
argument_list|)
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927f
argument_list|)
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123u
argument_list|)
operator|<<
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
operator|<<
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Unicode String"
argument_list|)
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|34
argument_list|)
operator|<<
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|intMax1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|INT_MIN
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|34
argument_list|)
operator|<<
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|uintMax1
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signedint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|123
argument_list|)
operator|<<
operator|-
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signeddouble"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|3.1415927
argument_list|)
operator|<<
operator|-
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signedfloat"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|3.1415927f
argument_list|)
operator|<<
operator|-
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signedint-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"-123"
argument_list|)
argument_list|)
operator|<<
operator|-
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signedlonglong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|34
argument_list|)
operator|<<
operator|-
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|int
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keysequence"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
operator|<<
literal|65
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'T'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'e'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'s'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'t'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'4'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'5'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'0'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'0'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|4500
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toInt
name|void
name|tst_QVariant
operator|::
name|toInt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
operator|==
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|i
init|=
name|value
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUInt_data
name|void
name|tst_QVariant
operator|::
name|toUInt_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927f
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123u
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Unicode String"
argument_list|)
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|4
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|34
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|intMax1
argument_list|)
operator|<<
operator|(
name|uint
operator|)
name|INT_MIN
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|34
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|uintMax1
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|123
argument_list|)
operator|<<
operator|(
name|uint
operator|)
operator|-
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativedouble"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|3.1415927
argument_list|)
operator|<<
operator|(
name|uint
operator|)
operator|-
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativefloat"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|3.1415927f
argument_list|)
operator|<<
operator|(
name|uint
operator|)
operator|-
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeint-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"-123"
argument_list|)
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativelonglong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|34
argument_list|)
operator|<<
operator|(
name|uint
operator|)
operator|-
literal|34
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|uint
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'4'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'3'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'2'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'1'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
operator|(
name|uint
operator|)
literal|4321
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUInt
name|void
name|tst_QVariant
operator|::
name|toUInt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|UInt
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|uint
name|i
init|=
name|value
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSize_data
name|void
name|tst_QVariant
operator|::
name|toSize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSize
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsizef4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSizeF
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsizef1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSizeF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsizef2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSizeF
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|<<
name|QSize
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsizef3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSizeF
argument_list|()
argument_list|)
operator|<<
name|QSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSize
name|void
name|tst_QVariant
operator|::
name|toSize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSize
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Size
argument_list|)
argument_list|)
expr_stmt|;
name|QSize
name|i
init|=
name|value
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSizeF_data
name|void
name|tst_QVariant
operator|::
name|toSizeF_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSizeF
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsize1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QSizeF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsize2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
operator|<<
name|QSizeF
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsize3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|()
argument_list|)
operator|<<
name|QSizeF
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qsize4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
name|QSizeF
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSizeF
name|void
name|tst_QVariant
operator|::
name|toSizeF
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSizeF
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|SizeF
argument_list|)
argument_list|)
expr_stmt|;
name|QSizeF
name|i
init|=
name|value
operator|.
name|toSizeF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLine_data
name|void
name|tst_QVariant
operator|::
name|toLine_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLine
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linef1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLineF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
name|QLine
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linef2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLineF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
operator|<<
name|QLine
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linef3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLineF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linef4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLineF
argument_list|()
argument_list|)
operator|<<
name|QLine
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLine
name|void
name|tst_QVariant
operator|::
name|toLine
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLine
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Line
argument_list|)
argument_list|)
expr_stmt|;
name|QLine
name|i
init|=
name|value
operator|.
name|toLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLineF_data
name|void
name|tst_QVariant
operator|::
name|toLineF_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLineF
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLine
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
operator|<<
name|QLineF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QLineF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLine
argument_list|()
argument_list|)
operator|<<
name|QLineF
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLine
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
name|QLineF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLineF
name|void
name|tst_QVariant
operator|::
name|toLineF
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLineF
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|LineF
argument_list|)
argument_list|)
expr_stmt|;
name|QLineF
name|i
init|=
name|value
operator|.
name|toLineF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPoint_data
name|void
name|tst_QVariant
operator|::
name|toPoint_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPoint
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|)
operator|<<
name|QPoint
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|()
argument_list|)
operator|<<
name|QPoint
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf5"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
operator|-
literal|4.2f
argument_list|,
operator|-
literal|2.3f
argument_list|)
argument_list|)
operator|<<
name|QPoint
argument_list|(
operator|-
literal|4
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPoint
name|void
name|tst_QVariant
operator|::
name|toPoint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPoint
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Point
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|i
init|=
name|value
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRect_data
name|void
name|tst_QVariant
operator|::
name|toRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRect
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
argument_list|)
operator|<<
name|QRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf4"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|(
operator|-
literal|1.3f
argument_list|,
literal|0
argument_list|,
literal|3.9f
argument_list|,
operator|-
literal|4.0
argument_list|)
argument_list|)
operator|<<
name|QRect
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
operator|-
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf5"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|()
argument_list|)
operator|<<
name|QRect
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRect
name|void
name|tst_QVariant
operator|::
name|toRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRect
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Rect
argument_list|)
argument_list|)
expr_stmt|;
name|QRect
name|i
init|=
name|value
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toChar_data
name|void
name|tst_QVariant
operator|::
name|toChar_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qlonglong
argument_list|(
literal|'6'
argument_list|)
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'6'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qulonglong
argument_list|(
literal|'7'
argument_list|)
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'7'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toChar
name|void
name|tst_QVariant
operator|::
name|toChar
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Char
argument_list|)
argument_list|)
expr_stmt|;
name|QChar
name|i
init|=
name|value
operator|.
name|toChar
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBool_data
name|void
name|tst_QVariant
operator|::
name|toBool_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0u
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123u
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0.0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0.0f
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927f
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"true"
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string3"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"fAlSe"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong1"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Null_QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBool
name|void
name|tst_QVariant
operator|::
name|toBool
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Bool
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|i
init|=
name|value
operator|.
name|toBool
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPointF_data
name|void
name|tst_QVariant
operator|::
name|toPointF_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPointF
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QPoint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
literal|19
argument_list|,
literal|84
argument_list|)
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|19
argument_list|,
literal|84
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPointF
name|void
name|tst_QVariant
operator|::
name|toPointF
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPointF
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|PointF
argument_list|)
argument_list|)
expr_stmt|;
name|QPointF
name|d
init|=
name|value
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRectF_data
name|void
name|tst_QVariant
operator|::
name|toRectF_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRectF
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QRect
name|r
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QRectF
name|rf
argument_list|(
literal|1.0
argument_list|,
literal|9.0
argument_list|,
literal|8.0
argument_list|,
literal|4.0
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QRect"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|r
argument_list|)
operator|<<
name|rf
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRectF
name|void
name|tst_QVariant
operator|::
name|toRectF
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRectF
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|RectF
argument_list|)
argument_list|)
expr_stmt|;
name|QRectF
name|d
init|=
name|value
operator|.
name|toRectF
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toColor_data
name|void
name|tst_QVariant
operator|::
name|toColor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QColor
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QColor
name|c
argument_list|(
literal|"red"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"red"
argument_list|)
argument_list|)
operator|<<
name|c
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"solid brush"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QBrush
argument_list|(
name|c
argument_list|)
argument_list|)
operator|<<
name|c
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toColor
name|void
name|tst_QVariant
operator|::
name|toColor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QColor
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QColor
name|d
init|=
name|qVariantValue
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPixmap_data
name|void
name|tst_QVariant
operator|::
name|toPixmap_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|pm
argument_list|)
operator|<<
name|pm
expr_stmt|;
name|QBitmap
name|bm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|bm
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bm
argument_list|)
operator|<<
name|QPixmap
argument_list|(
name|bm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPixmap
name|void
name|tst_QVariant
operator|::
name|toPixmap
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|d
init|=
name|qVariantValue
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage_data
name|void
name|tst_QVariant
operator|::
name|toImage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QImage
name|im
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|im
operator|.
name|fill
argument_list|(
literal|0x7fff0000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|im
argument_list|)
operator|<<
name|im
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toImage
name|void
name|tst_QVariant
operator|::
name|toImage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Image
argument_list|)
argument_list|)
expr_stmt|;
name|QImage
name|d
init|=
name|qVariantValue
argument_list|<
name|QImage
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBrush_data
name|void
name|tst_QVariant
operator|::
name|toBrush_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBrush
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QColor
name|c
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|c
argument_list|)
operator|<<
name|QBrush
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|pm
operator|.
name|fill
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|pm
argument_list|)
operator|<<
name|QBrush
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBrush
name|void
name|tst_QVariant
operator|::
name|toBrush
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBrush
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Brush
argument_list|)
argument_list|)
expr_stmt|;
name|QBrush
name|d
init|=
name|qVariantValue
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFont_data
name|void
name|tst_QVariant
operator|::
name|toFont_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFont
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QFont
name|f
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"times,12,-1,5,50,0,0,0,0,0"
argument_list|)
argument_list|)
operator|<<
name|f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFont
name|void
name|tst_QVariant
operator|::
name|toFont
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFont
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Font
argument_list|)
argument_list|)
expr_stmt|;
name|QFont
name|d
init|=
name|qVariantValue
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toKeySequence_data
name|void
name|tst_QVariant
operator|::
name|toKeySequence_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|67108929
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+A"
argument_list|)
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toKeySequence
name|void
name|tst_QVariant
operator|::
name|toKeySequence
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QKeySequence
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|KeySequence
argument_list|)
argument_list|)
expr_stmt|;
name|QKeySequence
name|d
init|=
name|qVariantValue
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble_data
name|void
name|tst_QVariant
operator|::
name|toDouble_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'3'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'2'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'.'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'1'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|32.1
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble
name|void
name|tst_QVariant
operator|::
name|toDouble
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|value
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLongLong_data
name|void
name|tst_QVariant
operator|::
name|toLongLong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927f
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123u
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Unicode fun"
argument_list|)
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|intMax1
argument_list|)
operator|<<
name|intMax1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|uintMax1
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
name|uintMax1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|qlonglong
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'3'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'2'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'0'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'0'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
operator|(
name|qlonglong
operator|)
literal|3200
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLongLong
name|void
name|tst_QVariant
operator|::
name|toLongLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|qlonglong
name|ll
init|=
name|value
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ll
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULongLong_data
name|void
name|tst_QVariant
operator|::
name|toULongLong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valueOK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int0"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.1415927f
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123u
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|123
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Unicode fun"
argument_list|)
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytaa-string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|intMax1
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
name|intMax1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|uintMax1
argument_list|)
operator|<<
name|uintMax1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'3'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'2'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'0'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'1'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
operator|(
name|qulonglong
operator|)
literal|3201
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULongLong
name|void
name|tst_QVariant
operator|::
name|toULongLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qulonglong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valueOK
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|ULongLong
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|qulonglong
name|ll
init|=
name|value
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ll
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
name|valueOK
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toByteArray_data
name|void
name|tst_QVariant
operator|::
name|toByteArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
argument_list|(
literal|5
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|'T'
expr_stmt|;
name|ba
index|[
literal|1
index|]
operator|=
literal|'e'
expr_stmt|;
name|ba
index|[
literal|2
index|]
operator|=
literal|'s'
expr_stmt|;
name|ba
index|[
literal|3
index|]
operator|=
literal|'t'
expr_stmt|;
name|ba
index|[
literal|4
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QByteArray
name|variantBa
init|=
name|ba
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qbytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|variantBa
argument_list|)
operator|<<
name|ba
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|123
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|uint
operator|)
literal|123
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"123.456"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456f
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"123.456"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longlong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
literal|34
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"34"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulonglong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
literal|34
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"34"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toByteArray
name|void
name|tst_QVariant
operator|::
name|toByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|ByteArray
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
init|=
name|value
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString_data
name|void
name|tst_QVariant
operator|::
name|toString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"charstar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qbytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QByteArray
argument_list|(
literal|"Test\0"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|123
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|uint
operator|)
literal|123
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.456"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456f
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.456"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|true
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdate"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2002-01-01"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qtime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12:34:56"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdatetime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2002-01-01T12:34:56"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qkeysequence"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
ifndef|#
directive|ifndef
name|Q_OS_MAC
operator|<<
name|QString
argument_list|(
literal|"Ctrl+A"
argument_list|)
expr_stmt|;
else|#
directive|else
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x2318
argument_list|)
argument_list|)
operator|+
literal|"A"
expr_stmt|;
endif|#
directive|endif
name|QFont
name|font
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qfont"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|font
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"times,12,-1,5,50,0,0,0,0,0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qcolor"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QColor
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#0a0a0a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"llong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qlonglong
operator|)
name|Q_INT64_C
argument_list|(
literal|123456789012
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123456789012"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString
name|void
name|tst_QVariant
operator|::
name|toString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDate_data
name|void
name|tst_QVariant
operator|::
name|toDate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdate"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdatetime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"2002-10-10"
argument_list|)
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDate
name|void
name|tst_QVariant
operator|::
name|toDate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toDate
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toTime_data
name|void
name|tst_QVariant
operator|::
name|toTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTime
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qtime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdatetime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"12:34:56"
argument_list|)
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toTime
name|void
name|tst_QVariant
operator|::
name|toTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTime
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toTime
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime_data
name|void
name|tst_QVariant
operator|::
name|toDateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdatetime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qdate"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"2002-10-10T12:34:56"
argument_list|)
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|34
argument_list|,
literal|56
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime
name|void
name|tst_QVariant
operator|::
name|toDateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|value
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLocale
name|void
name|tst_QVariant
operator|::
name|toLocale
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QLocale
name|loc
init|=
name|variant
operator|.
name|toLocale
argument_list|()
decl_stmt|;
name|variant
operator|=
name|QLocale
operator|::
name|system
argument_list|()
expr_stmt|;
name|loc
operator|=
name|variant
operator|.
name|toLocale
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRegExp
name|void
name|tst_QVariant
operator|::
name|toRegExp
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QRegExp
name|rx
init|=
name|variant
operator|.
name|toRegExp
argument_list|()
decl_stmt|;
name|variant
operator|=
name|QRegExp
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|rx
operator|=
name|variant
operator|.
name|toRegExp
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toRegularExpression
name|void
name|tst_QVariant
operator|::
name|toRegularExpression
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QRegularExpression
name|re
init|=
name|variant
operator|.
name|toRegularExpression
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|re
argument_list|,
name|QRegularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|variant
operator|=
name|QRegularExpression
argument_list|(
literal|"abc.*def"
argument_list|)
expr_stmt|;
name|re
operator|=
name|variant
operator|.
name|toRegularExpression
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
argument_list|,
name|QRegularExpression
argument_list|(
literal|"abc.*def"
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegularExpression
argument_list|(
literal|"[ab]\\w+"
argument_list|)
argument_list|)
expr_stmt|;
name|re
operator|=
name|variant
operator|.
name|value
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
argument_list|,
name|QRegularExpression
argument_list|(
literal|"[ab]\\w+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|matrix
name|void
name|tst_QVariant
operator|::
name|matrix
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QMatrix
name|matrix
init|=
name|qVariantValue
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QMatrix
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Matrix
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Matrix
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|matrix4x4
name|void
name|tst_QVariant
operator|::
name|matrix4x4
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QMatrix4x4
name|matrix
init|=
name|qVariantValue
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|scale
argument_list|(
literal|2.0f
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
argument_list|,
name|qVariantValue
argument_list|<
name|QMatrix4x4
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Matrix4x4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Matrix4x4
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transform
name|void
name|tst_QVariant
operator|::
name|transform
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QTransform
name|matrix
init|=
name|qVariantValue
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|matrix
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTransform
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QTransform
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mmatrix
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Transform
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mmatrix
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Transform
argument_list|,
name|mmatrix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector2D
name|void
name|tst_QVariant
operator|::
name|vector2D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector2D
name|vector
init|=
name|qVariantValue
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QVector2D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector2D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QVector2D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector2D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector2D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector3D
name|void
name|tst_QVariant
operator|::
name|vector3D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector3D
name|vector
init|=
name|qVariantValue
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QVector3D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector3D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QVector3D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector3D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector3D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|vector4D
name|void
name|tst_QVariant
operator|::
name|vector4D
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QVector4D
name|vector
init|=
name|qVariantValue
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QVector4D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVector4D
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QVector4D
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pvector
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Vector4D
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pvector
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Vector4D
argument_list|,
name|pvector
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quaternion
name|void
name|tst_QVariant
operator|::
name|quaternion
parameter_list|()
block|{
name|QVariant
name|variant
decl_stmt|;
name|QQuaternion
name|quaternion
init|=
name|qVariantValue
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|variant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|quaternion
operator|.
name|isIdentity
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|variant
argument_list|,
name|QQuaternion
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QQuaternion
argument_list|(
literal|0.1
argument_list|,
literal|0.2
argument_list|,
literal|0.3
argument_list|,
literal|0.4
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|QQuaternion
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|pquaternion
init|=
name|QMetaType
operator|::
name|create
argument_list|(
name|QVariant
operator|::
name|Quaternion
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pquaternion
argument_list|)
expr_stmt|;
name|QMetaType
operator|::
name|destroy
argument_list|(
name|QVariant
operator|::
name|Quaternion
argument_list|,
name|pquaternion
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|CustomStreamableClass
struct|struct
name|CustomStreamableClass
block|{
DECL|member|i
name|int
name|i
decl_stmt|;
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|CustomStreamableClass
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
block|}
struct|;
end_struct
begin_expr_stmt
DECL|variable|CustomStreamableClass
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomStreamableClass
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|out
parameter_list|,
specifier|const
name|CustomStreamableClass
modifier|&
name|myObj
parameter_list|)
block|{
return|return
name|out
operator|<<
name|myObj
operator|.
name|i
return|;
block|}
end_function
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|in
parameter_list|,
name|CustomStreamableClass
modifier|&
name|myObj
parameter_list|)
block|{
return|return
name|in
operator|>>
name|myObj
operator|.
name|i
return|;
block|}
end_function
begin_function
DECL|function|writeToReadFromDataStream_data
name|void
name|tst_QVariant
operator|::
name|writeToReadFromDataStream_data
parameter_list|()
block|{
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"writeVariant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isNull"
argument_list|)
expr_stmt|;
block|{
typedef|typedef
name|QList
argument_list|<
name|QVariant
argument_list|>
name|variantsList
typedef|;
name|variantsList
name|valuelist
decl_stmt|;
name|valuelist
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Two"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|3.45
argument_list|)
expr_stmt|;
name|QVariant
name|var
argument_list|(
name|valuelist
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list_valid"
argument_list|)
operator|<<
name|var
operator|<<
literal|false
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitarray_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QBitArray
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QBitArray
name|bitarray
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|bitarray
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|bitarray
index|[
literal|1
index|]
operator|=
literal|1
expr_stmt|;
name|bitarray
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitarray_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bitarray
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bytearray
argument_list|(
literal|5
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|bytearray
index|[
literal|0
index|]
operator|=
literal|'T'
expr_stmt|;
name|bytearray
index|[
literal|1
index|]
operator|=
literal|'e'
expr_stmt|;
name|bytearray
index|[
literal|2
index|]
operator|=
literal|'s'
expr_stmt|;
name|bytearray
index|[
literal|3
index|]
operator|=
literal|'t'
expr_stmt|;
name|bytearray
index|[
literal|4
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QBitmap
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QBitmap
name|bitmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bitmap_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|bitmap
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"brush_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"color_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cursor_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QCursor
argument_list|(
name|Qt
operator|::
name|PointingHandCursor
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"date_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"date_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|07
argument_list|,
literal|06
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2002
argument_list|,
literal|07
argument_list|,
literal|06
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|123.456f
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"font_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QFont
argument_list|(
literal|"times"
argument_list|,
literal|12
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPixmap
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QPixmap
name|pixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pixmap_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|pixmap
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|//    QTest::newRow( "iconset_valid" )<< QVariant( QIcon( pixmap ) )<< false;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"image_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QImage
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"keysequence_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|-
literal|123
argument_list|)
operator|<<
literal|false
expr_stmt|;
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|variantsMap
typedef|;
name|variantsMap
name|vMap
decl_stmt|;
name|vMap
operator|.
name|insert
argument_list|(
literal|"int"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vMap
operator|.
name|insert
argument_list|(
literal|"string"
argument_list|,
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Two"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|vMap
operator|.
name|insert
argument_list|(
literal|"double"
argument_list|,
name|QVariant
argument_list|(
literal|3.45
argument_list|)
argument_list|)
expr_stmt|;
name|vMap
operator|.
name|insert
argument_list|(
literal|"float"
argument_list|,
name|QVariant
argument_list|(
literal|3.45f
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"map_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|vMap
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"palette_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPalette
argument_list|(
name|QColor
argument_list|(
literal|"turquoise"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pen_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointarray_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPolygon
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointarray_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPolygon
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"region_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QRegion
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"region_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QRegion
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sizepolicy_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"point_invalid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPoint
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"point_valid"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rect_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRect
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rect_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QStringList
name|stringlist
decl_stmt|;
name|stringlist
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stringlist_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|stringlist
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time_invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTime
argument_list|()
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QTime
argument_list|(
literal|14
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint_valid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|uint
operator|)
literal|123
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qchar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qchar_null"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRegExp
argument_list|(
literal|"foo"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp_empty"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRegExp
argument_list|()
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regularexpression"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRegularExpression
argument_list|(
literal|"abc.*def"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regularexpression_empty"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRegularExpression
argument_list|()
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// types known to QMetaType, but not part of QVariant::Type
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Long invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Long
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|long
name|longInt
init|=
operator|-
literal|1l
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Long"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Long
argument_list|,
operator|&
name|longInt
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Short invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Short
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|short
name|shortInt
init|=
literal|1
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Short"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Short
argument_list|,
operator|&
name|shortInt
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Char invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Char
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|char
name|ch
init|=
literal|'c'
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Char"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Char
argument_list|,
operator|&
name|ch
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::ULong invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|ULong
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|ulong
name|ulongInt
init|=
literal|1ul
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::ULong"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|ULong
argument_list|,
operator|&
name|ulongInt
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UShort invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|UShort
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|ushort
name|ushortInt
init|=
literal|1u
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UShort"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|UShort
argument_list|,
operator|&
name|ushortInt
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UChar invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|UChar
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|uchar
name|uch
init|=
literal|0xf0
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::UChar"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|UChar
argument_list|,
operator|&
name|uch
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Float invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|float
name|f
init|=
literal|1.234f
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QMetaType::Float"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|,
operator|&
name|f
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|CustomStreamableClass
name|custom
init|=
block|{
literal|123
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Custom type"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|custom
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToReadFromDataStream
name|void
name|tst_QVariant
operator|::
name|writeToReadFromDataStream
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|writeVariant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|writeStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|writeStream
operator|<<
name|writeVariant
expr_stmt|;
name|QVariant
name|readVariant
decl_stmt|;
name|QDataStream
name|readStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|readStream
operator|>>
name|readVariant
expr_stmt|;
name|QVERIFY
argument_list|(
name|readVariant
operator|.
name|isNull
argument_list|()
operator|==
name|isNull
argument_list|)
expr_stmt|;
comment|// Best way to confirm the readVariant contains the same data?
comment|// Since only a few won't match since the serial numbers are different
comment|// I won't bother adding another bool in the data test.
specifier|const
name|int
name|writeType
init|=
name|writeVariant
operator|.
name|userType
argument_list|()
decl_stmt|;
if|if
condition|(
name|writeType
operator|==
name|qMetaTypeId
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|writeType
operator|!=
name|QVariant
operator|::
name|Invalid
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Bitmap
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Pixmap
operator|&&
name|writeType
operator|!=
name|QVariant
operator|::
name|Image
condition|)
block|{
switch|switch
condition|(
name|writeType
condition|)
block|{
default|default:
name|QCOMPARE
argument_list|(
name|readVariant
argument_list|,
name|writeVariant
argument_list|)
expr_stmt|;
break|break;
comment|// compare types know by QMetaType but not QVariant (QVariant::operator==() knows nothing about them)
case|case
name|QMetaType
operator|::
name|Long
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|ULong
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Short
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UShort
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Char
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|char
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|char
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|UChar
case|:
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|readVariant
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QMetaType
operator|::
name|Float
case|:
block|{
comment|// the uninitialized float can be NaN (observed on Windows Mobile 5 ARMv4i)
name|float
name|readFloat
init|=
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|readVariant
argument_list|)
decl_stmt|;
name|float
name|writtenFloat
init|=
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|writeVariant
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|readFloat
argument_list|)
operator|==
name|qIsNaN
argument_list|(
name|writtenFloat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qIsNaN
argument_list|(
name|readFloat
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|readFloat
operator|==
name|writtenFloat
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeToReadFromOldDataStream
name|void
name|tst_QVariant
operator|::
name|writeToReadFromOldDataStream
parameter_list|()
block|{
name|QVariant
name|writeVariant
init|=
name|QString
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|writeStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|writeStream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_2_1
argument_list|)
expr_stmt|;
name|writeStream
operator|<<
name|writeVariant
expr_stmt|;
name|QVariant
name|readVariant
decl_stmt|;
name|QDataStream
name|readStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|readStream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_2_1
argument_list|)
expr_stmt|;
name|readStream
operator|>>
name|readVariant
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeVariant
operator|.
name|userType
argument_list|()
argument_list|,
name|readVariant
operator|.
name|userType
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeVariant
argument_list|,
name|readVariant
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkDataStream
name|void
name|tst_QVariant
operator|::
name|checkDataStream
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"Trying to construct an instance of an invalid type, type id: 49"
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|settingsHex
argument_list|(
literal|"00000031ffffffffff"
argument_list|)
decl_stmt|;
specifier|const
name|QByteArray
name|settings
init|=
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|settingsHex
argument_list|)
decl_stmt|;
name|QDataStream
name|in
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
name|in
operator|>>
name|v
expr_stmt|;
comment|// the line below has been left out for now since the data stream
comment|// is not necessarily considered corrupt when an invalid QVariant is
comment|// constructed. However, it might be worth considering changing that behavior
comment|// in the future.
comment|//    QCOMPARE(in.status(), QDataStream::ReadCorruptData);
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_eq_eq_data
name|void
name|tst_QVariant
operator|::
name|operator_eq_eq_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"equal"
argument_list|)
expr_stmt|;
comment|// left == right ?
name|QVariant
name|inv
decl_stmt|;
name|QVariant
name|i0
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|i1
argument_list|(
name|int
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Invalid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invinv"
argument_list|)
operator|<<
name|inv
operator|<<
name|inv
operator|<<
literal|true
expr_stmt|;
comment|// Int
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int1int1"
argument_list|)
operator|<<
name|i1
operator|<<
name|i1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int1int0"
argument_list|)
operator|<<
name|i1
operator|<<
name|i0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullint"
argument_list|)
operator|<<
name|i0
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// LongLong and ULongLong
name|QVariant
name|ll1
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
decl_stmt|;
name|QVariant
name|lln2
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|QVariant
name|ull1
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1
argument_list|)
decl_stmt|;
name|QVariant
name|ull3
argument_list|(
operator|(
name|qulonglong
operator|)
literal|3
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ll1ll1"
argument_list|)
operator|<<
name|ll1
operator|<<
name|ll1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ll1lln2"
argument_list|)
operator|<<
name|ll1
operator|<<
name|lln2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ll1ull1"
argument_list|)
operator|<<
name|ull1
operator|<<
name|ull1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ll1i1"
argument_list|)
operator|<<
name|ull1
operator|<<
name|i1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ull1ull1"
argument_list|)
operator|<<
name|ull1
operator|<<
name|ull1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ull1i1"
argument_list|)
operator|<<
name|ull1
operator|<<
name|ull1
operator|<<
literal|true
expr_stmt|;
name|QVariant
name|mInt
argument_list|(
operator|-
literal|42
argument_list|)
decl_stmt|;
name|QVariant
name|mIntString
argument_list|(
name|QByteArray
argument_list|(
literal|"-42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mIntQString
argument_list|(
name|QString
argument_list|(
literal|"-42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mUInt
argument_list|(
literal|42u
argument_list|)
decl_stmt|;
name|QVariant
name|mUIntString
argument_list|(
name|QByteArray
argument_list|(
literal|"42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mUIntQString
argument_list|(
name|QString
argument_list|(
literal|"42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mDouble
argument_list|(
literal|42.11
argument_list|)
decl_stmt|;
name|QVariant
name|mDoubleString
argument_list|(
name|QByteArray
argument_list|(
literal|"42.11"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mDoubleQString
argument_list|(
name|QString
argument_list|(
literal|"42.11"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mFloat
argument_list|(
literal|42.11f
argument_list|)
decl_stmt|;
name|QVariant
name|mFloatString
argument_list|(
name|QByteArray
argument_list|(
literal|"42.11"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mFloatQString
argument_list|(
name|QString
argument_list|(
literal|"42.11"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mLongLong
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|42
argument_list|)
decl_stmt|;
name|QVariant
name|mLongLongString
argument_list|(
name|QByteArray
argument_list|(
literal|"-42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mLongLongQString
argument_list|(
name|QString
argument_list|(
literal|"-42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mULongLong
argument_list|(
operator|(
name|qulonglong
operator|)
literal|42
argument_list|)
decl_stmt|;
name|QVariant
name|mULongLongString
argument_list|(
name|QByteArray
argument_list|(
literal|"42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mULongLongQString
argument_list|(
name|QString
argument_list|(
literal|"42"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mBool
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QVariant
name|mBoolString
argument_list|(
name|QByteArray
argument_list|(
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|mBoolQString
argument_list|(
name|QString
argument_list|(
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double_int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42.0
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"float_int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42.f
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mInt_mIntString"
argument_list|)
operator|<<
name|mInt
operator|<<
name|mIntString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mIntString_mInt"
argument_list|)
operator|<<
name|mIntString
operator|<<
name|mInt
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mInt_mIntQString"
argument_list|)
operator|<<
name|mInt
operator|<<
name|mIntQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mIntQString_mInt"
argument_list|)
operator|<<
name|mIntQString
operator|<<
name|mInt
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mUInt_mUIntString"
argument_list|)
operator|<<
name|mUInt
operator|<<
name|mUIntString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mUIntString_mUInt"
argument_list|)
operator|<<
name|mUIntString
operator|<<
name|mUInt
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mUInt_mUIntQString"
argument_list|)
operator|<<
name|mUInt
operator|<<
name|mUIntQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mUIntQString_mUInt"
argument_list|)
operator|<<
name|mUIntQString
operator|<<
name|mUInt
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mDouble_mDoubleString"
argument_list|)
operator|<<
name|mDouble
operator|<<
name|mDoubleString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mDoubleString_mDouble"
argument_list|)
operator|<<
name|mDoubleString
operator|<<
name|mDouble
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mDouble_mDoubleQString"
argument_list|)
operator|<<
name|mDouble
operator|<<
name|mDoubleQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mDoubleQString_mDouble"
argument_list|)
operator|<<
name|mDoubleQString
operator|<<
name|mDouble
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mFloat_mFloatString"
argument_list|)
operator|<<
name|mFloat
operator|<<
name|mFloatString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mFloatString_mFloat"
argument_list|)
operator|<<
name|mFloatString
operator|<<
name|mFloat
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mFloat_mFloatQString"
argument_list|)
operator|<<
name|mFloat
operator|<<
name|mFloatQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mFloatQString_mFloat"
argument_list|)
operator|<<
name|mFloatQString
operator|<<
name|mFloat
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mLongLong_mLongLongString"
argument_list|)
operator|<<
name|mLongLong
operator|<<
name|mLongLongString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mLongLongString_mLongLong"
argument_list|)
operator|<<
name|mLongLongString
operator|<<
name|mLongLong
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mLongLong_mLongLongQString"
argument_list|)
operator|<<
name|mLongLong
operator|<<
name|mLongLongQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mLongLongQString_mLongLong"
argument_list|)
operator|<<
name|mLongLongQString
operator|<<
name|mLongLong
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mULongLong_mULongLongString"
argument_list|)
operator|<<
name|mULongLong
operator|<<
name|mULongLongString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mULongLongString_mULongLong"
argument_list|)
operator|<<
name|mULongLongString
operator|<<
name|mULongLong
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mULongLong_mULongLongQString"
argument_list|)
operator|<<
name|mULongLong
operator|<<
name|mULongLongQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mULongLongQString_mULongLong"
argument_list|)
operator|<<
name|mULongLongQString
operator|<<
name|mULongLong
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mBool_mBoolString"
argument_list|)
operator|<<
name|mBool
operator|<<
name|mBoolString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mBoolString_mBool"
argument_list|)
operator|<<
name|mBoolString
operator|<<
name|mBool
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mBool_mBoolQString"
argument_list|)
operator|<<
name|mBool
operator|<<
name|mBoolQString
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mBoolQString_mBool"
argument_list|)
operator|<<
name|mBoolQString
operator|<<
name|mBool
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ba2qstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qstring2ba"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char_char"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char_char2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QChar
argument_list|(
literal|'b'
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidConversion"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidConversionR"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|0
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// ### many other combinations missing
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TwoItemsInEqual"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TwoItemsEqual"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PopulatedEmptyMap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EmptyPopulatedMap"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FirstLarger"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SecondLarger"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|map2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
comment|// same thing with hash
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HashTwoItemsInEqual"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HashTwoItemsEqual"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HashPopulatedEmptyHash"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EmptyPopulatedHash"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HashFirstLarger"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"X"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"Y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HashSecondLarger"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|hash2
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_eq_eq
name|void
name|tst_QVariant
operator|::
name|operator_eq_eq
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|equal
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"nullint"
argument_list|,
literal|"See QTBUG-22933"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|left
operator|==
name|right
argument_list|,
name|equal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_eq_eq_rhs
name|void
name|tst_QVariant
operator|::
name|operator_eq_eq_rhs
parameter_list|()
block|{
name|QVariant
name|v
init|=
literal|42
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|==
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|42
operator|==
name|v
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|/* This should _not_ compile */
block|QStringList list;     QDateTime dt;      QVERIFY(dt == list);
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|typeName_data
name|void
name|tst_QVariant
operator|::
name|typeName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Invalid
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Map
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVariantMap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|List
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVariantList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|StringList
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QStringList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Font
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QFont"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Pixmap
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPixmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Brush
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QBrush"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Rect
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QRect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Size
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QColor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Palette
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPalette"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Point
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPoint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Image
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QImage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|UInt
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"uint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Bool
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bool"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Polygon
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPolygon"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Region
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QRegion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Bitmap
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QBitmap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Cursor
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QCursor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|SizePolicy
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QSizePolicy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QDate"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QTime"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QDateTime"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|ByteArray
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QByteArray"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|BitArray
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QBitArray"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|KeySequence
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QKeySequence"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Pen
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPen"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|LongLong
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"qlonglong"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|ULongLong
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"qulonglong"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"33"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Char
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QChar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"34"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Url
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QUrl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"35"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|TextLength
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QTextLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"36"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|TextFormat
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QTextFormat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Locale
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QLocale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"38"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|LineF
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QLineF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"39"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|RectF
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QRectF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"40"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|PointF
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QPointF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"41"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|RegExp
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QRegExp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"43"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Matrix
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QMatrix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"44"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Transform
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QTransform"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"45"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Hash
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVariantHash"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"46"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Matrix4x4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QMatrix4x4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"47"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Vector2D
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVector2D"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"48"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Vector3D
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVector3D"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"49"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Vector4D
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QVector4D"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"50"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|Quaternion
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QQuaternion"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"51"
argument_list|)
operator|<<
name|int
argument_list|(
name|QVariant
operator|::
name|RegularExpression
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"QRegularExpression"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|typeName
name|void
name|tst_QVariant
operator|::
name|typeName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
operator|(
name|QVariant
operator|::
name|Type
operator|)
name|type
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|res
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// test nameToType as well
end_comment
begin_function
DECL|function|typeToName
name|void
name|tst_QVariant
operator|::
name|typeToName
parameter_list|()
block|{
name|QVariant
name|v
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// Invalid
comment|// assumes that QVariant::Type contains consecutive values
name|int
name|max
init|=
name|QVariant
operator|::
name|LastGuiType
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|1
init|;
name|t
operator|<=
name|max
condition|;
name|t
operator|++
control|)
block|{
specifier|const
name|char
modifier|*
name|n
init|=
name|QVariant
operator|::
name|typeToName
argument_list|(
operator|(
name|QVariant
operator|::
name|Type
operator|)
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
name|n
argument_list|)
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
comment|// not documented but we return 0 if the type is out of range
comment|// by testing this we catch cases where QVariant is extended
comment|// but type_map is not updated accordingly
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|max
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// invalid type names
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|0
argument_list|)
operator|==
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|""
argument_list|)
operator|==
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"foo"
argument_list|)
operator|==
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"UserType"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
comment|// We don't support these old (Qt3) types anymore.
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"QIconSet"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"Q3CString"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"Q_LLONG"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|nameToType
argument_list|(
literal|"Q_ULLONG"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamInvalidVariant
name|void
name|tst_QVariant
operator|::
name|streamInvalidVariant
parameter_list|()
block|{
name|int
name|writeX
init|=
literal|1
decl_stmt|;
name|int
name|writeY
init|=
literal|2
decl_stmt|;
name|int
name|readX
decl_stmt|;
name|int
name|readY
decl_stmt|;
name|QVariant
name|writeVariant
decl_stmt|;
name|QVariant
name|readVariant
decl_stmt|;
name|QVERIFY
argument_list|(
name|writeVariant
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|writeStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|writeStream
operator|<<
name|writeX
operator|<<
name|writeVariant
operator|<<
name|writeY
expr_stmt|;
name|QDataStream
name|readStream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|readStream
operator|>>
name|readX
operator|>>
name|readVariant
operator|>>
name|readY
expr_stmt|;
name|QVERIFY
argument_list|(
name|readX
operator|==
name|writeX
argument_list|)
expr_stmt|;
comment|// Two invalid QVariant's aren't necessarily the same, so == will
comment|// return false if one is invalid, so check the type() instead
name|QVERIFY
argument_list|(
name|readVariant
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|readY
operator|==
name|writeY
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|instanceCount
specifier|static
name|int
name|instanceCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|MyType
struct|struct
name|MyType
block|{
DECL|function|MyType
name|MyType
parameter_list|(
name|int
name|n
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|t
init|=
literal|0
parameter_list|)
member_init_list|:
name|number
argument_list|(
name|n
argument_list|)
member_init_list|,
name|text
argument_list|(
name|t
argument_list|)
block|{
operator|++
name|instanceCount
expr_stmt|;
block|}
DECL|function|MyType
name|MyType
parameter_list|(
specifier|const
name|MyType
modifier|&
name|other
parameter_list|)
member_init_list|:
name|number
argument_list|(
name|other
operator|.
name|number
argument_list|)
member_init_list|,
name|text
argument_list|(
name|other
operator|.
name|text
argument_list|)
block|{
operator|++
name|instanceCount
expr_stmt|;
block|}
DECL|function|~MyType
name|~
name|MyType
parameter_list|()
block|{
operator|--
name|instanceCount
expr_stmt|;
block|}
DECL|member|number
name|int
name|number
decl_stmt|;
DECL|member|text
specifier|const
name|char
modifier|*
name|text
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyType
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyType*
argument_list|)
end_macro
begin_function
DECL|function|userType
name|void
name|tst_QVariant
operator|::
name|userType
parameter_list|()
block|{
block|{
name|MyType
name|data
argument_list|(
literal|1
argument_list|,
literal|"eins"
argument_list|)
decl_stmt|;
name|MyType
name|data2
argument_list|(
literal|2
argument_list|,
literal|"zwei"
argument_list|)
decl_stmt|;
block|{
name|QVariant
name|userVar
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|UserType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|MyType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"MyType"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|userVar
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|userVar
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|userVar2
argument_list|(
name|userVar
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|userVar
operator|==
name|userVar2
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|userVar
operator|!=
name|userVar2
argument_list|)
expr_stmt|;
specifier|const
name|MyType
modifier|*
name|varData
init|=
cast|static_cast
argument_list|<
specifier|const
name|MyType
operator|*
argument_list|>
argument_list|(
name|userVar
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|varData
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varData
operator|->
name|number
argument_list|,
name|data
operator|.
name|number
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|varData
operator|->
name|text
argument_list|,
name|data
operator|.
name|text
argument_list|)
expr_stmt|;
name|QVariant
name|userVar3
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar3
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|userVar3
operator|=
name|userVar2
expr_stmt|;
name|QVERIFY
argument_list|(
name|userVar2
operator|==
name|userVar3
argument_list|)
expr_stmt|;
block|}
comment|// At this point all QVariants got destroyed but we have 2 MyType instances.
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|{
name|QVariant
name|userVar
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|UserType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|MyType
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|userVar
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"MyType*"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|userVar
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|userVar
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|userVar2
argument_list|(
name|userVar
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|userVar
operator|==
name|userVar2
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar2
argument_list|,
operator|&
name|data2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|userVar
operator|!=
name|userVar2
argument_list|)
expr_stmt|;
name|MyType
modifier|*
specifier|const
modifier|*
name|varData
init|=
cast|reinterpret_cast
argument_list|<
name|MyType
operator|*
specifier|const
operator|*
argument_list|>
argument_list|(
name|userVar
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|varData
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|varData
argument_list|,
operator|&
name|data
argument_list|)
expr_stmt|;
name|QVariant
name|userVar3
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|userVar3
argument_list|,
operator|&
name|data2
argument_list|)
expr_stmt|;
comment|/* This check is correct now. userVar2 contains a pointer to data2 and so              * does userVar3. */
name|QVERIFY
argument_list|(
name|userVar2
operator|==
name|userVar3
argument_list|)
expr_stmt|;
name|userVar3
operator|=
name|userVar2
expr_stmt|;
name|QVERIFY
argument_list|(
name|userVar2
operator|==
name|userVar3
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVariant
name|myCarrier
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|myCarrier
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|QVariant
name|second
init|=
name|myCarrier
decl_stmt|;
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|second
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MyType
name|data3
argument_list|(
literal|0
argument_list|,
literal|"null"
argument_list|)
decl_stmt|;
name|data3
operator|=
name|qVariantValue
argument_list|<
name|MyType
argument_list|>
argument_list|(
name|myCarrier
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data3
operator|.
name|number
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data3
operator|.
name|text
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|"eins"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|{
specifier|const
name|MyType
name|data
argument_list|(
literal|3
argument_list|,
literal|"drei"
argument_list|)
decl_stmt|;
name|QVariant
name|myCarrier
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|myCarrier
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myCarrier
operator|.
name|typeName
argument_list|()
argument_list|,
literal|"MyType"
argument_list|)
expr_stmt|;
specifier|const
name|MyType
name|data2
init|=
name|qvariant_cast
argument_list|<
name|MyType
argument_list|>
argument_list|(
name|myCarrier
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data2
operator|.
name|number
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data2
operator|.
name|text
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|"drei"
argument_list|)
expr_stmt|;
block|}
block|{
name|short
name|s
init|=
literal|42
decl_stmt|;
name|QVariant
name|myCarrier
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|myCarrier
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|myCarrier
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|qlonglong
name|ll
init|=
name|Q_INT64_C
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|QVariant
name|myCarrier
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|myCarrier
argument_list|,
name|ll
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|myCarrier
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
comment|// At this point all QVariants got destroyed and MyType objects too.
name|QCOMPARE
argument_list|(
name|instanceCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|MyTypePOD
struct|struct
name|MyTypePOD
block|{
DECL|member|a
name|int
name|a
decl_stmt|;
DECL|member|b
name|int
name|b
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyTypePOD
argument_list|)
end_macro
begin_function
DECL|function|podUserType
name|void
name|tst_QVariant
operator|::
name|podUserType
parameter_list|()
block|{
name|MyTypePOD
name|pod
decl_stmt|;
name|pod
operator|.
name|a
operator|=
literal|10
expr_stmt|;
name|pod
operator|.
name|b
operator|=
literal|20
expr_stmt|;
name|QVariant
name|pod_as_variant
init|=
name|qVariantFromValue
argument_list|(
name|pod
argument_list|)
decl_stmt|;
name|MyTypePOD
name|pod2
init|=
name|qvariant_cast
argument_list|<
name|MyTypePOD
argument_list|>
argument_list|(
name|pod_as_variant
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pod
operator|.
name|a
argument_list|,
name|pod2
operator|.
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pod
operator|.
name|b
argument_list|,
name|pod2
operator|.
name|b
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|pod_as_variant
argument_list|,
name|pod
argument_list|)
expr_stmt|;
name|pod2
operator|=
name|qVariantValue
argument_list|<
name|MyTypePOD
argument_list|>
argument_list|(
name|pod_as_variant
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pod
operator|.
name|a
argument_list|,
name|pod2
operator|.
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pod
operator|.
name|b
argument_list|,
name|pod2
operator|.
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicUserType
name|void
name|tst_QVariant
operator|::
name|basicUserType
parameter_list|()
block|{
name|QVariant
name|v
decl_stmt|;
block|{
name|int
name|i
init|=
literal|7
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Int
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|{
name|QString
name|s
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|QString
argument_list|,
operator|&
name|s
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|double
name|d
init|=
literal|4.4
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Double
argument_list|,
operator|&
name|d
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|4.4
argument_list|)
expr_stmt|;
block|{
name|float
name|f
init|=
literal|4.5f
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|,
operator|&
name|f
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|4.5
argument_list|)
expr_stmt|;
block|{
name|QByteArray
name|ba
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|QByteArray
argument_list|,
operator|&
name|ba
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|data
name|void
name|tst_QVariant
operator|::
name|data
parameter_list|()
block|{
name|QVariant
name|v
decl_stmt|;
name|QVariant
name|i
init|=
literal|1
decl_stmt|;
name|QVariant
name|d
init|=
literal|1.12
decl_stmt|;
name|QVariant
name|f
init|=
literal|1.12f
decl_stmt|;
name|QVariant
name|ll
init|=
operator|(
name|qlonglong
operator|)
literal|2
decl_stmt|;
name|QVariant
name|ull
init|=
operator|(
name|qulonglong
operator|)
literal|3
decl_stmt|;
name|QVariant
name|s
argument_list|(
name|QString
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|r
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|v
operator|=
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|d
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|double
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|d
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|f
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|float
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|qVariantValue
argument_list|<
name|float
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|=
name|ll
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|ll
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|ull
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|ull
operator|.
name|toULongLong
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|s
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|QString
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|=
name|r
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
name|QRect
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|r
operator|.
name|toRect
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constData
name|void
name|tst_QVariant
operator|::
name|constData
parameter_list|()
block|{
name|QVariant
name|v
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|double
name|d
init|=
literal|1.12
decl_stmt|;
name|float
name|f
init|=
literal|1.12f
decl_stmt|;
name|qlonglong
name|ll
init|=
literal|2
decl_stmt|;
name|qulonglong
name|ull
init|=
literal|3
decl_stmt|;
name|QString
name|s
argument_list|(
literal|"hallo"
argument_list|)
decl_stmt|;
name|QRect
name|r
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|float
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|ll
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qlonglong
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|ll
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|qulonglong
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|ull
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QString
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|v
operator|=
name|QVariant
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QRect
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|function|Foo
name|Foo
parameter_list|()
member_init_list|:
name|i
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Foo
argument_list|)
end_macro
begin_function
DECL|function|variant_to
name|void
name|tst_QVariant
operator|::
name|variant_to
parameter_list|()
block|{
name|QVariant
name|v1
argument_list|(
literal|4.2
argument_list|)
decl_stmt|;
name|QVariant
name|v2
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QVariant
name|v3
decl_stmt|;
name|QVariant
name|v4
decl_stmt|;
name|QStringList
name|sl
decl_stmt|;
name|sl
operator|<<
name|QLatin1String
argument_list|(
literal|"blah"
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|v3
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|Foo
name|foo
decl_stmt|;
name|foo
operator|.
name|i
operator|=
literal|42
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|v4
argument_list|,
name|foo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|v1
argument_list|)
argument_list|,
literal|4.2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|v1
argument_list|)
argument_list|,
literal|4.2f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|v2
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QStringList
argument_list|>
argument_list|(
name|v3
argument_list|)
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|v3
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|Foo
argument_list|>
argument_list|(
name|v4
argument_list|)
operator|.
name|i
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v5
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|Foo
argument_list|>
argument_list|(
name|v5
argument_list|)
operator|.
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|v1
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVariant
name|n
init|=
name|qVariantFromValue
argument_list|<
name|short
argument_list|>
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|uint
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|42u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|42.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|42.f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
name|short
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|=
name|qVariantFromValue
argument_list|(
literal|43l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|uint
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|43u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|43.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|43.f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|43l
argument_list|)
expr_stmt|;
name|n
operator|=
name|QLatin1String
argument_list|(
literal|"44"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|ulong
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|44ul
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|n
argument_list|)
argument_list|,
literal|44.0f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantFromValue
argument_list|(
literal|0.25f
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|0.25
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|Blah
DECL|member|i
struct|struct
name|Blah
block|{
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator >>
name|QDataStream
modifier|&
name|operator
name|>>
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
name|Blah
modifier|&
name|c
parameter_list|)
block|{
return|return
operator|(
name|s
operator|>>
name|c
operator|.
name|i
operator|)
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDataStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QDataStream
modifier|&
name|s
parameter_list|,
specifier|const
name|Blah
modifier|&
name|c
parameter_list|)
block|{
return|return
operator|(
name|s
operator|<<
name|c
operator|.
name|i
operator|)
return|;
block|}
end_function
begin_function
DECL|function|saveLoadCustomTypes
name|void
name|tst_QVariant
operator|::
name|saveLoadCustomTypes
parameter_list|()
block|{
name|QByteArray
name|data
decl_stmt|;
name|Blah
name|i
init|=
block|{
literal|42
block|}
decl_stmt|;
name|int
name|tp
init|=
name|qRegisterMetaType
argument_list|<
name|Blah
argument_list|>
argument_list|(
literal|"Blah"
argument_list|)
decl_stmt|;
name|QVariant
name|v
init|=
name|QVariant
argument_list|(
name|tp
argument_list|,
operator|&
name|i
argument_list|)
decl_stmt|;
name|qRegisterMetaTypeStreamOperators
argument_list|<
name|Blah
argument_list|>
argument_list|(
literal|"Blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|UserType
argument_list|)
expr_stmt|;
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|v
expr_stmt|;
block|}
name|v
operator|=
name|QVariant
argument_list|()
expr_stmt|;
block|{
name|QDataStream
name|stream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|stream
operator|>>
name|v
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|,
name|QMetaType
operator|::
name|type
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|value
init|=
operator|*
operator|(
name|int
operator|*
operator|)
name|v
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|url
name|void
name|tst_QVariant
operator|::
name|url
parameter_list|()
block|{
name|QString
name|str
argument_list|(
literal|"http://qt.nokia.com"
argument_list|)
decl_stmt|;
name|QUrl
name|url
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|QVariant
name|v
argument_list|(
name|url
argument_list|)
decl_stmt|;
comment|//built with a QUrl
name|QVariant
name|v2
init|=
name|v
decl_stmt|;
name|QVariant
name|v3
argument_list|(
name|str
argument_list|)
decl_stmt|;
comment|//built with a QString
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toUrl
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|QUrl
argument_list|>
argument_list|(
name|v3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toUrl
argument_list|()
argument_list|,
name|v3
operator|.
name|toUrl
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|QString
argument_list|>
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toString
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|toString
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|globalColor
name|void
name|tst_QVariant
operator|::
name|globalColor
parameter_list|()
block|{
name|QVariant
name|variant
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Color
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qVariantValue
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|variant
argument_list|)
operator|==
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|variantMap
name|void
name|tst_QVariant
operator|::
name|variantMap
parameter_list|()
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
decl_stmt|;
name|map
index|[
literal|"test"
index|]
operator|=
literal|42
expr_stmt|;
name|QVariant
name|v
init|=
name|map
decl_stmt|;
name|QVariantMap
name|map2
init|=
name|qvariant_cast
argument_list|<
name|QVariantMap
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v2
init|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QVariantMap"
argument_list|)
argument_list|,
operator|&
name|map
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariantMap
argument_list|>
argument_list|(
name|v2
argument_list|)
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v3
init|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QMap<QString, QVariant>"
argument_list|)
argument_list|,
operator|&
name|map
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariantMap
argument_list|>
argument_list|(
name|v3
argument_list|)
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|variantHash
name|void
name|tst_QVariant
operator|::
name|variantHash
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|hash
decl_stmt|;
name|hash
index|[
literal|"test"
index|]
operator|=
literal|42
expr_stmt|;
name|QVariant
name|v
init|=
name|hash
decl_stmt|;
name|QVariantHash
name|hash2
init|=
name|qvariant_cast
argument_list|<
name|QVariantHash
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v2
init|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QVariantHash"
argument_list|)
argument_list|,
operator|&
name|hash
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariantHash
argument_list|>
argument_list|(
name|v2
argument_list|)
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVariant
name|v3
init|=
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"QHash<QString, QVariant>"
argument_list|)
argument_list|,
operator|&
name|hash
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariantHash
argument_list|>
argument_list|(
name|v3
argument_list|)
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidQColor
name|void
name|tst_QVariant
operator|::
name|invalidQColor
parameter_list|()
specifier|const
block|{
name|QVariant
name|va
argument_list|(
literal|"An invalid QColor::name() value."
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|va
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|va
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|va
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CustomQObject
class|class
name|CustomQObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomQObject
name|CustomQObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{}
block|}
class|;
end_class
begin_class
DECL|class|CustomQWidget
class|class
name|CustomQWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomQWidget
name|CustomQWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{}
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomQObject*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomQWidget*
argument_list|)
end_macro
begin_class
DECL|class|CustomNonQObject
class|class
name|CustomNonQObject
block|{
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomNonQObject
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomNonQObject*
argument_list|)
end_macro
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QVariant
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|customNonQObjectPointer
expr_stmt|;
name|qDeleteAll
argument_list|(
name|objectPointerTestData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qvariant_cast_QObject_data
name|void
name|tst_QVariant
operator|::
name|qvariant_cast_QObject_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|obj
init|=
operator|new
name|QObject
decl_stmt|;
name|obj
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from QObject"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QMetaType
operator|::
name|QObjectStar
argument_list|,
operator|&
name|obj
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from QObject2"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|obj
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from String"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLatin1String
argument_list|(
literal|"1, 2, 3"
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|123
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|QWidget
decl_stmt|;
name|widget
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from QWidget"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|widget
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|CustomQObject
modifier|*
name|customObject
init|=
operator|new
name|CustomQObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|customObject
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from Derived QObject"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|customObject
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|CustomQWidget
modifier|*
name|customWidget
init|=
operator|new
name|CustomQWidget
decl_stmt|;
name|customWidget
operator|->
name|setObjectName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from Derived QWidget"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|customWidget
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from custom Object"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|CustomNonQObject
argument_list|()
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// Deleted in cleanupTestCase.
name|customNonQObjectPointer
operator|=
operator|new
name|CustomNonQObject
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from custom ObjectStar"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|customNonQObjectPointer
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// Deleted in cleanupTestCase.
name|objectPointerTestData
operator|.
name|push_back
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|objectPointerTestData
operator|.
name|push_back
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|objectPointerTestData
operator|.
name|push_back
argument_list|(
name|customObject
argument_list|)
expr_stmt|;
name|objectPointerTestData
operator|.
name|push_back
argument_list|(
name|customWidget
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qvariant_cast_QObject
name|void
name|tst_QVariant
operator|::
name|qvariant_cast_QObject
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|o
init|=
name|qvariant_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|!=
literal|0
argument_list|,
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|QCOMPARE
argument_list|(
name|o
operator|->
name|objectName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|CustomQObjectDerived
class|class
name|CustomQObjectDerived
super|:
specifier|public
name|CustomQObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomQObjectDerived
name|CustomQObjectDerived
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|CustomQObject
argument_list|(
name|parent
argument_list|)
block|{}
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomQObjectDerived*
argument_list|)
end_macro
begin_class
DECL|class|CustomQObjectDerivedNoMetaType
class|class
name|CustomQObjectDerivedNoMetaType
super|:
specifier|public
name|CustomQObject
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomQObjectDerivedNoMetaType
name|CustomQObjectDerivedNoMetaType
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|CustomQObject
argument_list|(
name|parent
argument_list|)
block|{}
block|}
class|;
end_class
begin_function
DECL|function|qvariant_cast_QObject_derived
name|void
name|tst_QVariant
operator|::
name|qvariant_cast_QObject_derived
parameter_list|()
block|{
block|{
name|CustomQObjectDerivedNoMetaType
modifier|*
name|object
init|=
operator|new
name|CustomQObjectDerivedNoMetaType
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QVariant
name|data
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|userType
argument_list|()
operator|==
name|qMetaTypeId
argument_list|<
name|CustomQObjectDerivedNoMetaType
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQObjectDerivedNoMetaType
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQWidget
operator|*
argument_list|>
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|CustomQObjectDerived
modifier|*
name|object
init|=
operator|new
name|CustomQObjectDerived
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QVariant
name|data
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|userType
argument_list|()
operator|==
name|qMetaTypeId
argument_list|<
name|CustomQObjectDerived
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQObjectDerived
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|()
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQWidget
operator|*
argument_list|>
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|CustomQWidget
name|customWidget
decl_stmt|;
name|QWidget
modifier|*
name|widget
init|=
operator|&
name|customWidget
decl_stmt|;
name|QVariant
name|data
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|userType
argument_list|()
operator|==
name|QMetaType
operator|::
name|QWidgetStar
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|()
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|value
argument_list|<
name|CustomQWidget
operator|*
argument_list|>
argument_list|()
argument_list|,
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_expr_stmt
DECL|variable|qint8
name|Q_DECLARE_METATYPE
argument_list|(
name|qint8
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|convertToQUint8
name|void
name|tst_QVariant
operator|::
name|convertToQUint8
parameter_list|()
specifier|const
block|{
comment|/* qint8. */
block|{
specifier|const
name|qint8
name|anInt
init|=
literal|32
decl_stmt|;
comment|/* QVariant(int) gets invoked here so the QVariant has nothing with qint8 to do.          * It's of type QVariant::Int. */
specifier|const
name|QVariant
name|v0
init|=
name|anInt
decl_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|qint8
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|qint8
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|v0
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v0
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|char
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|short
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|long
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|float
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|double
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
block|}
comment|/* quint8. */
block|{
specifier|const
name|quint8
name|anInt
init|=
literal|32
decl_stmt|;
specifier|const
name|QVariant
name|v0
init|=
name|anInt
decl_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|quint8
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|quint8
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|v0
operator|.
name|toUInt
argument_list|()
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v0
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* qint16. */
block|{
specifier|const
name|qint16
name|anInt
init|=
literal|32
decl_stmt|;
specifier|const
name|QVariant
name|v0
init|=
name|anInt
decl_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|qint16
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|qint16
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|v0
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v0
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* quint16. */
block|{
specifier|const
name|quint16
name|anInt
init|=
literal|32
decl_stmt|;
specifier|const
name|QVariant
name|v0
init|=
name|anInt
decl_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|qvariant_cast
argument_list|<
name|quint16
argument_list|>
argument_list|(
name|v0
argument_list|)
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|v0
operator|.
name|toUInt
argument_list|()
argument_list|)
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v0
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"32"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|comparePointers
name|void
name|tst_QVariant
operator|::
name|comparePointers
parameter_list|()
specifier|const
block|{
class|class
name|MyClass
block|{
block|}
class|;
name|MyClass
name|myClass
decl_stmt|;
name|QVariant
name|v
init|=
name|qVariantFromValue
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|myClass
argument_list|)
decl_stmt|;
name|QVariant
name|v2
init|=
name|qVariantFromValue
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|myClass
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|Data
struct|struct
name|Data
block|{
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Data*
argument_list|)
end_macro
begin_function
DECL|function|voidStar
name|void
name|tst_QVariant
operator|::
name|voidStar
parameter_list|()
specifier|const
block|{
name|char
name|c
decl_stmt|;
name|void
modifier|*
name|p1
init|=
operator|&
name|c
decl_stmt|;
name|void
modifier|*
name|p2
init|=
name|p1
decl_stmt|;
name|QVariant
name|v1
decl_stmt|,
name|v2
decl_stmt|;
name|v1
operator|=
name|qVariantFromValue
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|v2
operator|=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|v2
operator|=
name|qVariantFromValue
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|p2
operator|=
literal|0
expr_stmt|;
name|v2
operator|=
name|qVariantFromValue
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataStar
name|void
name|tst_QVariant
operator|::
name|dataStar
parameter_list|()
specifier|const
block|{
name|qRegisterMetaType
argument_list|<
name|Data
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|Data
modifier|*
name|p1
init|=
operator|new
name|Data
decl_stmt|;
name|QVariant
name|v1
init|=
name|qVariantFromValue
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|Data
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|Data
operator|*
argument_list|>
argument_list|(
name|v1
argument_list|)
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|QVariant
name|v2
init|=
name|v1
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|v2
operator|=
name|qVariantFromValue
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
operator|delete
name|p1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canConvertQStringList
name|void
name|tst_QVariant
operator|::
name|canConvertQStringList
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canConvert
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVariant
name|v
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|,
name|canConvert
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canConvertQStringList_data
name|void
name|tst_QVariant
operator|::
name|canConvertQStringList_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canConvert"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"An empty list"
argument_list|)
operator|<<
literal|false
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A single item"
argument_list|)
operator|<<
literal|true
operator|<<
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"A single, but empty item"
argument_list|)
operator|<<
literal|true
operator|<<
name|QStringList
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QStringList
name|l
decl_stmt|;
name|l
operator|<<
literal|"a"
operator|<<
literal|"b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Two items"
argument_list|)
operator|<<
literal|false
operator|<<
name|l
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|l
operator|<<
literal|"c"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Three items"
argument_list|)
operator|<<
literal|false
operator|<<
name|l
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertMetaType
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|convertMetaType
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|qVariantFromValue
argument_list|<
name|T
argument_list|>
argument_list|(
literal|10
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qVariantFromValue
argument_list|<
name|T
argument_list|>
argument_list|(
literal|10
argument_list|)
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantFromValue
argument_list|<
name|T
argument_list|>
argument_list|(
literal|10
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantFromValue
argument_list|<
name|T
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|,
name|qVariantFromValue
argument_list|<
name|T
argument_list|>
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|CONVERT_META_TYPE
define|#
directive|define
name|CONVERT_META_TYPE
parameter_list|(
name|Type
parameter_list|)
define|\
value|convertMetaType<Type>(); \     if (QTest::currentTestFailed()) \         QFAIL("convertMetaType<" #Type "> failed");
end_define
begin_function
DECL|function|canConvertMetaTypeToInt
name|void
name|tst_QVariant
operator|::
name|canConvertMetaTypeToInt
parameter_list|()
specifier|const
block|{
name|CONVERT_META_TYPE
argument_list|(
name|long
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|short
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|short
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
argument|unsigned short
argument_list|)
empty_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|ushort
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|ulong
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
argument|unsigned long
argument_list|)
empty_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|uchar
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
argument|unsigned char
argument_list|)
empty_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|char
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
name|uint
argument_list|)
expr_stmt|;
name|CONVERT_META_TYPE
argument_list|(
argument|unsigned int
argument_list|)
empty_stmt|;
block|}
end_function
begin_undef
DECL|macro|CONVERT_META_TYPE
undef|#
directive|undef
name|CONVERT_META_TYPE
end_undef
begin_comment
comment|/*!  These calls should not produce any warnings.  */
end_comment
begin_function
DECL|function|variantToDateTimeWithoutWarnings
name|void
name|tst_QVariant
operator|::
name|variantToDateTimeWithoutWarnings
parameter_list|()
specifier|const
block|{
block|{
specifier|const
name|QVariant
name|variant
argument_list|(
name|QLatin1String
argument_list|(
literal|"An invalid QDateTime string"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|dateTime
argument_list|(
name|variant
operator|.
name|toDateTime
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dateTime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QVariant
name|v1
argument_list|(
name|QLatin1String
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
decl_stmt|;
name|v1
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
name|QVariant
name|v2
argument_list|(
name|QLatin1String
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
decl_stmt|;
name|QDateTime
name|dt1
argument_list|(
name|v2
operator|.
name|toDateTime
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QVariant
name|v3
argument_list|(
name|QLatin1String
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QDateTime
name|dt2
argument_list|(
name|v3
operator|.
name|toDateTime
argument_list|()
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|invalidDateTime
name|void
name|tst_QVariant
operator|::
name|invalidDateTime
parameter_list|()
specifier|const
block|{
name|QVariant
name|variant
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Invalid date time string"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|MyClass
struct|struct
name|MyClass
block|{
DECL|function|MyClass
name|MyClass
parameter_list|()
member_init_list|:
name|myValue
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|myValue
name|int
name|myValue
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyClass
argument_list|)
end_macro
begin_function
DECL|function|loadUnknownUserType
name|void
name|tst_QVariant
operator|::
name|loadUnknownUserType
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|MyClass
argument_list|>
argument_list|(
literal|"MyClass"
argument_list|)
expr_stmt|;
name|char
name|data
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
name|QMetaType
operator|::
name|User
operator|>>
literal|8
block|,
name|char
argument_list|(
name|QMetaType
operator|::
name|User
argument_list|)
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|8
block|,
literal|'M'
block|,
literal|'y'
block|,
literal|'C'
block|,
literal|'l'
block|,
literal|'a'
block|,
literal|'s'
block|,
literal|'s'
block|,
literal|0
block|}
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QVariant
name|var
decl_stmt|;
name|var
operator|.
name|load
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ds
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadBrokenUserType
name|void
name|tst_QVariant
operator|::
name|loadBrokenUserType
parameter_list|()
block|{
name|char
name|data
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|127
block|,
literal|0
block|,
literal|112
block|}
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QVariant
name|var
decl_stmt|;
name|var
operator|.
name|load
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ds
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidDate
name|void
name|tst_QVariant
operator|::
name|invalidDate
parameter_list|()
specifier|const
block|{
name|QString
name|foo
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|QVariant
name|variant
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Date
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|foo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|foo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Time
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|foo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|foo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|=
name|foo
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|convert
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|QMetaType
operator|::
name|Float
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|WontCompare
struct|struct
name|WontCompare
block|{
DECL|member|x
DECL|member|y
DECL|member|z
DECL|member|q
DECL|member|w
DECL|member|e
DECL|member|r
DECL|member|t
name|int
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|,
name|q
decl_stmt|,
name|w
decl_stmt|,
name|e
decl_stmt|,
name|r
decl_stmt|,
name|t
decl_stmt|;
block|}
struct|;
end_struct
begin_expr_stmt
DECL|variable|WontCompare
name|Q_DECLARE_METATYPE
argument_list|(
name|WontCompare
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|compareCustomTypes
name|void
name|tst_QVariant
operator|::
name|compareCustomTypes
parameter_list|()
specifier|const
block|{
name|qRegisterMetaType
argument_list|<
name|WontCompare
argument_list|>
argument_list|(
literal|"WontCompare"
argument_list|)
expr_stmt|;
name|WontCompare
name|f1
decl_stmt|;
name|f1
operator|.
name|x
operator|=
literal|0
expr_stmt|;
specifier|const
name|QVariant
name|variant1
argument_list|(
name|qVariantFromValue
argument_list|(
name|f1
argument_list|)
argument_list|)
decl_stmt|;
name|WontCompare
name|f2
decl_stmt|;
name|f2
operator|.
name|x
operator|=
literal|0
expr_stmt|;
specifier|const
name|QVariant
name|variant2
argument_list|(
name|qVariantFromValue
argument_list|(
name|f2
argument_list|)
argument_list|)
decl_stmt|;
comment|/* We compare pointers. */
name|QVERIFY
argument_list|(
name|variant1
operator|!=
name|variant2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant1
operator|==
name|variant1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|variant2
operator|==
name|variant2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timeToDateTime
name|void
name|tst_QVariant
operator|::
name|timeToDateTime
parameter_list|()
specifier|const
block|{
specifier|const
name|QVariant
name|val
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|val
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|val
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QHostAddress
argument_list|)
end_macro
begin_function
DECL|function|copyingUserTypes
name|void
name|tst_QVariant
operator|::
name|copyingUserTypes
parameter_list|()
specifier|const
block|{
name|QVariant
name|var
decl_stmt|;
name|QVariant
name|var3
decl_stmt|;
specifier|const
name|QHostAddress
name|ha
argument_list|(
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|qVariantSetValue
argument_list|(
name|var
argument_list|,
name|ha
argument_list|)
expr_stmt|;
name|var3
operator|=
name|var
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
name|var3
argument_list|)
argument_list|,
name|ha
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertBoolToByteArray
name|void
name|tst_QVariant
operator|::
name|convertBoolToByteArray
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canConvert
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|value
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|variant
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantCanConvert
argument_list|<
name|bool
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|,
name|canConvert
argument_list|)
expr_stmt|;
if|if
condition|(
name|canConvert
condition|)
block|{
comment|/* Just call this function so we run the code path. */
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|toBool
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|convertBoolToByteArray_data
name|void
name|tst_QVariant
operator|::
name|convertBoolToByteArray_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canConvert"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"false"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"false"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FALSE"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FALSE"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"falSE"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FALSE"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null QByteArray"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-content"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"any-content"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"true"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"true"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TRUE"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"TRUE"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trUE"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"trUE"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertByteArrayToBool
name|void
name|tst_QVariant
operator|::
name|convertByteArrayToBool
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|output
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|variant
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|toBool
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qVariantCanConvert
argument_list|<
name|bool
argument_list|>
argument_list|(
name|variant
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convertByteArrayToBool_data
name|void
name|tst_QVariant
operator|::
name|convertByteArrayToBool_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"false"
argument_list|)
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|(
literal|"false"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"true"
argument_list|)
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   We verify that:     1. Converting the string "9.9" to int fails. This is the behavior of        toLongLong() and hence also QVariant, since it uses it.     2. Converting the QVariant containing the double 9.9 to int works.    Rationale: "9.9" is not a valid int. However, doubles are by definition not   ints and therefore it makes more sense to perform conversion for those. */
end_comment
begin_function
DECL|function|toIntFromQString
name|void
name|tst_QVariant
operator|::
name|toIntFromQString
parameter_list|()
specifier|const
block|{
name|QVariant
name|first
argument_list|(
literal|"9.9"
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|first
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"9.9"
argument_list|)
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QVariant
name|v
argument_list|(
literal|9.9
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   We verify that:     1. Conversion from (64 bit) double to int works (no overflow).     2. Same conversion works for QVariant::convert.    Rationale: if 2147483630 is set in float and then converted to int,   there will be overflow and the result will be -2147483648. */
end_comment
begin_function
DECL|function|toIntFromDouble
name|void
name|tst_QVariant
operator|::
name|toIntFromDouble
parameter_list|()
specifier|const
block|{
name|double
name|d
init|=
literal|2147483630
decl_stmt|;
comment|// max int 2147483647
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|d
operator|==
literal|2147483630
argument_list|)
expr_stmt|;
name|QVariant
name|var
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|var
operator|.
name|canConvert
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|result
init|=
name|var
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
literal|2147483630
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|tst_QVariant
operator|::
name|setValue
parameter_list|()
block|{
name|QTransform
name|t
decl_stmt|;
comment|//we just take a value so that we're sure that it will be shared
name|QVariant
name|v1
init|=
name|t
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|v2
init|=
name|v1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|qVariantSetValue
argument_list|(
name|v2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//set an integer value
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|numericalConvert
name|void
name|tst_QVariant
operator|::
name|numericalConvert
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|QSKIP
argument_list|(
literal|"Known to fail due to a GCC bug on at least Ubuntu 10.04 32-bit - check QTBUG-8959"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVariant
name|vfloat
argument_list|(
name|float
argument_list|(
literal|5.3
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vdouble
argument_list|(
name|double
argument_list|(
literal|5.3
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vreal
argument_list|(
name|qreal
argument_list|(
literal|5.3
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vint
argument_list|(
name|int
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vuint
argument_list|(
name|uint
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vshort
argument_list|(
name|short
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vlonglong
argument_list|(
name|quint64
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vstringint
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"5"
argument_list|)
argument_list|)
decl_stmt|;
name|QVariant
name|vstring
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"5.3"
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QVariant
modifier|*
argument_list|>
name|vect
decl_stmt|;
name|vect
operator|<<
operator|&
name|vfloat
operator|<<
operator|&
name|vdouble
operator|<<
operator|&
name|vreal
operator|<<
operator|&
name|vint
operator|<<
operator|&
name|vuint
operator|<<
operator|&
name|vshort
operator|<<
operator|&
name|vlonglong
operator|<<
operator|&
name|vstringint
operator|<<
operator|&
name|vstring
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vect
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|double
name|num
init|=
literal|5.3
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|3
operator|&&
name|i
operator|<=
literal|7
condition|)
name|num
operator|=
literal|5
expr_stmt|;
name|QVariant
modifier|*
name|v
init|=
name|vect
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|->
name|toFloat
argument_list|()
argument_list|,
name|float
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|float
argument_list|(
name|v
operator|->
name|toReal
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|float
argument_list|(
name|v
operator|->
name|toDouble
argument_list|()
argument_list|)
argument_list|,
name|float
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|8
condition|)
block|{
name|QCOMPARE
argument_list|(
name|v
operator|->
name|toInt
argument_list|()
argument_list|,
name|int
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|->
name|toUInt
argument_list|()
argument_list|,
name|uint
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|->
name|toULongLong
argument_list|()
argument_list|,
name|quint64
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v
operator|->
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|num
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|playWithVariant
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|void
name|playWithVariant
parameter_list|(
specifier|const
name|T
modifier|&
name|orig
parameter_list|,
name|bool
name|isNull
parameter_list|,
specifier|const
name|QString
modifier|&
name|toString
parameter_list|,
name|double
name|toDouble
parameter_list|,
name|bool
name|toBool
parameter_list|)
block|{
name|QVariant
name|v
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|orig
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|,
name|toDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toBool
argument_list|()
argument_list|,
name|toBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|orig
argument_list|)
expr_stmt|;
block|{
name|QVariant
name|v2
init|=
name|v
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isStatic
operator|&&
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isComplex
operator|)
condition|)
block|{
comment|// Type is movable so standard comparison algorithm in QVariant should work
comment|// In a custom type QVariant is not aware of ==operator so it won't be called,
comment|// which may cause problems especially visible when using a not-movable type
name|QCOMPARE
argument_list|(
name|v2
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toDouble
argument_list|()
argument_list|,
name|toDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toBool
argument_list|()
argument_list|,
name|toBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v2
argument_list|)
argument_list|,
name|orig
argument_list|)
expr_stmt|;
name|QVariant
name|v3
decl_stmt|;
name|v
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|v
operator|=
name|v2
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isStatic
operator|&&
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isComplex
operator|)
condition|)
block|{
comment|// Type is movable so standard comparison algorithm in QVariant should work
comment|// In a custom type QVariant is not aware of ==operator so it won't be called,
comment|// which may cause problems especially visible when using a not-movable type
name|QCOMPARE
argument_list|(
name|v2
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v2
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|v3
operator|=
name|qVariantFromValue
argument_list|(
name|orig
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|toDouble
argument_list|()
argument_list|,
name|toDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|toBool
argument_list|()
argument_list|,
name|toBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v3
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|,
name|toDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toBool
argument_list|()
argument_list|,
name|toBool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|T
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|orig
argument_list|)
expr_stmt|;
if|if
condition|(
name|qMetaTypeId
argument_list|<
name|T
argument_list|>
argument_list|()
operator|!=
name|qMetaTypeId
argument_list|<
name|QVariant
argument_list|>
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|v
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|QMetaType
operator|::
name|typeName
argument_list|(
name|qMetaTypeId
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_define
DECL|macro|PLAY_WITH_VARIANT
define|#
directive|define
name|PLAY_WITH_VARIANT
parameter_list|(
name|Orig
parameter_list|,
name|IsNull
parameter_list|,
name|ToString
parameter_list|,
name|ToDouble
parameter_list|,
name|ToBool
parameter_list|)
define|\
value|playWithVariant(Orig, IsNull, ToString, ToDouble, ToBool);\     if (QTest::currentTestFailed())\         QFAIL("playWithVariant failed");
end_define
begin_struct
DECL|struct|MyPrimitive
struct|struct
name|MyPrimitive
block|{
DECL|member|x
DECL|member|y
name|char
name|x
decl_stmt|,
name|y
decl_stmt|;
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|MyPrimitive
modifier|&
name|o
parameter_list|)
specifier|const
block|{
return|return
name|x
operator|==
name|o
operator|.
name|x
operator|&&
name|y
operator|==
name|o
operator|.
name|y
return|;
block|}
block|}
struct|;
end_struct
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|MyPrimitive
parameter_list|,
name|Q_PRIMITIVE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_struct
DECL|struct|MyData
struct|struct
name|MyData
block|{
DECL|member|ptr
name|void
modifier|*
name|ptr
decl_stmt|;
DECL|function|MyData
name|MyData
parameter_list|()
member_init_list|:
name|ptr
argument_list|(
name|this
argument_list|)
block|{}
DECL|function|~MyData
name|~
name|MyData
parameter_list|()
block|{
if|if
condition|(
name|ptr
operator|!=
name|this
condition|)
name|qWarning
argument_list|(
literal|"%s: object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
DECL|function|MyData
name|MyData
parameter_list|(
specifier|const
name|MyData
modifier|&
name|o
parameter_list|)
member_init_list|:
name|ptr
argument_list|(
name|this
argument_list|)
block|{
if|if
condition|(
name|o
operator|.
name|ptr
operator|!=
operator|&
name|o
condition|)
name|qWarning
argument_list|(
literal|"%s: other object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
DECL|function|operator =
name|MyData
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|MyData
modifier|&
name|o
parameter_list|)
block|{
if|if
condition|(
name|ptr
operator|!=
name|this
condition|)
name|qWarning
argument_list|(
literal|"%s: object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|ptr
operator|!=
operator|&
name|o
condition|)
name|qWarning
argument_list|(
literal|"%s: other object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|MyData
modifier|&
name|o
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|ptr
operator|!=
name|this
condition|)
name|qWarning
argument_list|(
literal|"%s: object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|ptr
operator|!=
operator|&
name|o
condition|)
name|qWarning
argument_list|(
literal|"%s: other object has moved"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|MyMovable
struct|struct
name|MyMovable
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|member|v
name|int
name|v
decl_stmt|;
DECL|function|MyMovable
name|MyMovable
parameter_list|()
block|{
name|v
operator|=
name|count
operator|++
expr_stmt|;
block|}
DECL|function|~MyMovable
name|~
name|MyMovable
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
block|}
DECL|function|MyMovable
name|MyMovable
parameter_list|(
specifier|const
name|MyMovable
modifier|&
name|o
parameter_list|)
member_init_list|:
name|v
argument_list|(
name|o
operator|.
name|v
argument_list|)
block|{
name|count
operator|++
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|MyMovable
modifier|&
name|o
parameter_list|)
specifier|const
block|{
return|return
name|v
operator|==
name|o
operator|.
name|v
return|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|MyMovable
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|MyNotMovable
struct|struct
name|MyNotMovable
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|member|that
name|MyNotMovable
modifier|*
name|that
decl_stmt|;
DECL|function|MyNotMovable
name|MyNotMovable
parameter_list|()
member_init_list|:
name|that
argument_list|(
name|this
argument_list|)
block|{
name|count
operator|++
expr_stmt|;
block|}
DECL|function|~MyNotMovable
name|~
name|MyNotMovable
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|that
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
DECL|function|MyNotMovable
name|MyNotMovable
parameter_list|(
specifier|const
name|MyNotMovable
modifier|&
name|o
parameter_list|)
member_init_list|:
name|that
argument_list|(
name|this
argument_list|)
block|{
name|QCOMPARE
argument_list|(
name|o
operator|.
name|that
argument_list|,
operator|&
name|o
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
DECL|function|operator =
name|MyNotMovable
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|MyNotMovable
modifier|&
name|o
parameter_list|)
block|{
name|bool
name|ok
init|=
name|that
operator|==
name|this
operator|&&
name|o
operator|.
name|that
operator|==
operator|&
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qFatal
argument_list|(
literal|"MyNotMovable has been moved"
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|//PLAY_WITH_VARIANT test that they are equal, but never that they are not equal
comment|// so it would be fine just to always return true
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|MyNotMovable
modifier|&
name|o
parameter_list|)
specifier|const
block|{
name|bool
name|ok
init|=
name|that
operator|==
name|this
operator|&&
name|o
operator|.
name|that
operator|==
operator|&
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|qFatal
argument_list|(
literal|"MyNotMovable has been moved"
argument_list|)
expr_stmt|;
return|return
name|ok
return|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|MyNotMovable
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|MyShared
struct|struct
name|MyShared
super|:
name|QSharedData
block|{
DECL|member|movable
name|MyMovable
name|movable
decl_stmt|;
block|}
struct|;
end_struct
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|MyMovable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|QSize
argument_list|>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyPrimitive
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyData
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyMovable
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyNotMovable
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|MyPrimitive
argument_list|>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|MyData
argument_list|>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|MyMovable
argument_list|>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|MyNotMovable
argument_list|>
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyPrimitive
operator|*
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyData
operator|*
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyMovable
operator|*
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|MyNotMovable
operator|*
argument_list|)
name|Q_DECLARE_METATYPE
argument_list|(
name|QSharedDataPointer
argument_list|<
name|MyShared
argument_list|>
argument_list|)
DECL|function|moreCustomTypes
name|void
name|tst_QVariant
operator|::
name|moreCustomTypes
argument_list|()
argument_list|{
block|{
name|QList
argument_list|<
name|QSize
argument_list|>
name|listSize
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|listSize
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|listSize
operator|<<
name|QSize
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|89
argument_list|,
literal|23
argument_list|)
operator|<<
name|QSize
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|listSize
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|QString
name|str
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|str
argument_list|,
literal|true
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|str
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"123456789.123"
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|str
argument_list|,
literal|false
argument_list|,
name|str
argument_list|,
literal|123456789.123
argument_list|,
literal|true
argument_list|)
block|;     }
block|{
name|QSize
name|size
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|size
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|QSize
argument_list|(
literal|45
argument_list|,
literal|78
argument_list|)
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|MyData
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|&
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|QList
argument_list|<
name|MyData
argument_list|>
name|l
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|l
operator|<<
name|MyData
argument_list|()
operator|<<
name|MyData
argument_list|()
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|MyPrimitive
name|d
operator|=
block|{
literal|4
block|,
literal|5
block|}
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|&
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|QList
argument_list|<
name|MyPrimitive
argument_list|>
name|l
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|l
operator|<<
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|MyMovable
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|&
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|QList
argument_list|<
name|MyMovable
argument_list|>
name|l
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|l
operator|<<
name|MyMovable
argument_list|()
operator|<<
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
name|QCOMPARE
argument_list|(
name|MyMovable
operator|::
name|count
argument_list|,
literal|0
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|MyNotMovable
operator|::
name|count
argument_list|,
literal|0
argument_list|)
argument_list|;
block|{
name|MyNotMovable
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|&
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|QList
argument_list|<
name|MyNotMovable
argument_list|>
name|l
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|l
operator|<<
name|MyNotMovable
argument_list|()
operator|<<
name|d
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|l
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
name|QCOMPARE
argument_list|(
name|MyNotMovable
operator|::
name|count
argument_list|,
literal|0
argument_list|)
argument_list|;
block|{
name|PLAY_WITH_VARIANT
argument_list|(
literal|12.12
argument_list|,
literal|false
argument_list|,
literal|"12.12"
argument_list|,
literal|12.12
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
literal|12.12f
argument_list|,
literal|false
argument_list|,
literal|"12.12"
argument_list|,
literal|12.12f
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
literal|'a'
argument_list|,
literal|false
argument_list|,
literal|"a"
argument_list|,
literal|'a'
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
call|(
name|unsigned
name|char
call|)
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"a"
argument_list|,
literal|'a'
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|quint8
argument_list|(
literal|12
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"\xc"
argument_list|,
literal|12
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint8
argument_list|(
literal|13
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"\xd"
argument_list|,
literal|13
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|quint16
argument_list|(
literal|14
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"14"
argument_list|,
literal|14
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint16
argument_list|(
literal|15
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"15"
argument_list|,
literal|15
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|quint32
argument_list|(
literal|16
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"16"
argument_list|,
literal|16
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint32
argument_list|(
literal|17
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"17"
argument_list|,
literal|17
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|quint64
argument_list|(
literal|18
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"18"
argument_list|,
literal|18
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint64
argument_list|(
literal|19
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"19"
argument_list|,
literal|19
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint8
argument_list|(
operator|-
literal|12
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"\xf4"
argument_list|,
operator|-
literal|12
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint16
argument_list|(
operator|-
literal|13
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"-13"
argument_list|,
operator|-
literal|13
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint32
argument_list|(
operator|-
literal|14
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"-14"
argument_list|,
operator|-
literal|14
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|qint64
argument_list|(
operator|-
literal|15
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"-15"
argument_list|,
operator|-
literal|15
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|quint64
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"0"
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|"true"
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|"false"
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|QString
argument_list|(
literal|"hello\n"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|"hello\n"
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
block|;     }
block|{
name|int
name|i
operator|=
literal|5
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|(
operator|&
name|i
operator|)
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|(
literal|0
operator|)
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|QVariant
name|v1
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|5
argument_list|)
block|;
name|QVariant
name|v2
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|5.0
argument_list|)
block|;
name|QVariant
name|v3
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|quint16
argument_list|(
literal|5
argument_list|)
argument_list|)
block|;
name|QVariant
name|v4
operator|=
literal|5
block|;
name|QVariant
name|v5
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|MyPrimitive
argument_list|()
argument_list|)
block|;
name|QVariant
name|v6
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|MyMovable
argument_list|()
argument_list|)
block|;
name|QVariant
name|v7
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|MyData
argument_list|()
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|v1
argument_list|,
literal|false
argument_list|,
literal|"5"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|v2
argument_list|,
literal|false
argument_list|,
literal|"5"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|v3
argument_list|,
literal|false
argument_list|,
literal|"5"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|v4
argument_list|,
literal|false
argument_list|,
literal|"5"
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|v5
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
name|QCOMPARE
argument_list|(
name|MyMovable
operator|::
name|count
argument_list|,
literal|0
argument_list|)
argument_list|;
block|{
name|QSharedDataPointer
argument_list|<
name|MyShared
argument_list|>
name|d
argument_list|(
operator|new
name|MyShared
argument_list|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|d
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
name|QCOMPARE
argument_list|(
name|MyMovable
operator|::
name|count
argument_list|,
literal|0
argument_list|)
argument_list|;
block|{
name|QList
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|data
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|data
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|QList
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
name|data
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|data
operator|<<
operator|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|QList
argument_list|<
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|>
name|data
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|data
operator|<<
operator|(
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
block|{
name|QList
argument_list|<
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|>
name|data
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;
name|data
operator|<<
operator|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|)
block|;
name|PLAY_WITH_VARIANT
argument_list|(
name|data
argument_list|,
literal|false
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
block|;     }
argument_list|}
DECL|function|movabilityTest
name|void
name|tst_QVariant
operator|::
name|movabilityTest
argument_list|()
argument_list|{
comment|// This test checks if QVariant is movable even if an internal data is not movable.
name|QVERIFY
argument_list|(
operator|!
name|MyNotMovable
operator|::
name|count
argument_list|)
argument_list|;
block|{
name|QVariant
name|variant
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|MyNotMovable
argument_list|()
argument_list|)
block|;
name|QVERIFY
argument_list|(
name|MyNotMovable
operator|::
name|count
argument_list|)
block|;
comment|// prepare destination memory space to which variant will be moved
name|QVariant
name|buffer
index|[
literal|1
index|]
block|;
name|QCOMPARE
argument_list|(
name|buffer
index|[
literal|0
index|]
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
block|;
name|buffer
index|[
literal|0
index|]
operator|.
name|~
name|QVariant
argument_list|()
block|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
operator|&
name|variant
argument_list|,
sizeof|sizeof
argument_list|(
name|QVariant
argument_list|)
argument_list|)
block|;
name|QCOMPARE
argument_list|(
name|buffer
index|[
literal|0
index|]
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|UserType
argument_list|)
block|;
name|QCOMPARE
argument_list|(
name|buffer
index|[
literal|0
index|]
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|MyNotMovable
argument_list|>
argument_list|()
argument_list|)
block|;
name|MyNotMovable
name|tmp
argument_list|(
name|buffer
index|[
literal|0
index|]
operator|.
name|value
argument_list|<
name|MyNotMovable
argument_list|>
argument_list|()
argument_list|)
block|;
operator|new
operator|(
operator|&
name|variant
operator|)
name|QVariant
argument_list|()
block|;     }
name|QVERIFY
argument_list|(
operator|!
name|MyNotMovable
operator|::
name|count
argument_list|)
argument_list|; }
DECL|function|variantInVariant
name|void
name|tst_QVariant
operator|::
name|variantInVariant
argument_list|()
argument_list|{
name|QVariant
name|var1
operator|=
literal|5
argument_list|;
name|QCOMPARE
argument_list|(
name|var1
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QVariant
name|var2
operator|=
name|var1
argument_list|;
name|QCOMPARE
argument_list|(
name|var2
argument_list|,
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var2
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QVariant
name|var3
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var3
argument_list|,
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var3
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QVariant
name|var4
operator|=
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var4
argument_list|,
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var4
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QVariant
name|var5
argument_list|;
name|var5
operator|=
name|var1
argument_list|;
name|QCOMPARE
argument_list|(
name|var5
argument_list|,
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var5
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QVariant
name|var6
argument_list|;
name|var6
operator|.
name|setValue
argument_list|(
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var6
argument_list|,
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var6
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|var1
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|var2
argument_list|)
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var3
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|var4
argument_list|)
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var5
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var6
argument_list|)
argument_list|)
argument_list|;
name|QString
name|str
argument_list|(
literal|"hello"
argument_list|)
argument_list|;
name|QVariant
name|var8
operator|=
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|var8
operator|.
name|type
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QVariant
operator|::
name|String
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|QVariant
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var8
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|str
argument_list|)
argument_list|;
name|QVariant
name|var9
argument_list|(
name|qMetaTypeId
argument_list|<
name|QVariant
argument_list|>
argument_list|()
argument_list|,
operator|&
name|var1
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|var9
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QVariant
argument_list|>
argument_list|()
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|var9
argument_list|)
argument_list|,
name|var1
argument_list|)
argument_list|; }
DECL|function|colorInteger
name|void
name|tst_QVariant
operator|::
name|colorInteger
argument_list|()
argument_list|{
name|QVariant
name|v
operator|=
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|)
argument_list|;
name|v
operator|.
name|setValue
argument_list|(
literal|1000
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1000
argument_list|)
argument_list|;
name|v
operator|.
name|setValue
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Color
argument_list|)
argument_list|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
argument_list|; }
name|class
name|Forward
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_OPAQUE_POINTER
argument_list|(
argument|Forward*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Forward*
argument_list|)
end_macro
begin_function
DECL|function|forwardDeclare
name|void
name|tst_QVariant
operator|::
name|forwardDeclare
parameter_list|()
block|{
name|Forward
modifier|*
name|f
init|=
literal|0
decl_stmt|;
name|QVariant
name|v
init|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|Forward
operator|*
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadQt5Stream_data
name|void
name|tst_QVariant
operator|::
name|loadQt5Stream_data
parameter_list|()
block|{
name|dataStream_data
argument_list|(
name|QDataStream
operator|::
name|Qt_5_0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadQt5Stream
name|void
name|tst_QVariant
operator|::
name|loadQt5Stream
parameter_list|()
block|{
name|loadQVariantFromDataStream
argument_list|(
name|QDataStream
operator|::
name|Qt_5_0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveQt5Stream_data
name|void
name|tst_QVariant
operator|::
name|saveQt5Stream_data
parameter_list|()
block|{
name|dataStream_data
argument_list|(
name|QDataStream
operator|::
name|Qt_5_0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveQt5Stream
name|void
name|tst_QVariant
operator|::
name|saveQt5Stream
parameter_list|()
block|{
name|saveQVariantFromDataStream
argument_list|(
name|QDataStream
operator|::
name|Qt_5_0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadQt4Stream_data
name|void
name|tst_QVariant
operator|::
name|loadQt4Stream_data
parameter_list|()
block|{
name|dataStream_data
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadQt4Stream
name|void
name|tst_QVariant
operator|::
name|loadQt4Stream
parameter_list|()
block|{
name|loadQVariantFromDataStream
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveQt4Stream_data
name|void
name|tst_QVariant
operator|::
name|saveQt4Stream_data
parameter_list|()
block|{
name|dataStream_data
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveQt4Stream
name|void
name|tst_QVariant
operator|::
name|saveQt4Stream
parameter_list|()
block|{
name|saveQVariantFromDataStream
argument_list|(
name|QDataStream
operator|::
name|Qt_4_9
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataStream_data
name|void
name|tst_QVariant
operator|::
name|dataStream_data
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QString
name|path
decl_stmt|;
switch|switch
condition|(
name|version
condition|)
block|{
case|case
name|QDataStream
operator|::
name|Qt_4_9
case|:
name|path
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt4.9"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDataStream
operator|::
name|Qt_5_0
case|:
name|path
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt5.0"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_UNIMPLEMENTED
argument_list|()
expr_stmt|;
block|}
name|path
operator|=
name|path
operator|.
name|prepend
argument_list|(
literal|":/stream/"
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|uint
name|i
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
decl|,
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"*.bin"
argument_list|)
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
name|path
operator|+
name|fileInfo
operator|.
name|fileName
argument_list|()
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|fileInfo
operator|.
name|filePath
argument_list|()
expr_stmt|;
name|i
operator|+=
literal|1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|i
operator|>
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadQVariantFromDataStream
name|void
name|tst_QVariant
operator|::
name|loadQVariantFromDataStream
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|QString
name|typeName
decl_stmt|;
name|QVariant
name|loadedVariant
decl_stmt|;
name|stream
operator|>>
name|typeName
operator|>>
name|loadedVariant
expr_stmt|;
specifier|const
name|int
name|id
init|=
name|QMetaType
operator|::
name|type
argument_list|(
name|typeName
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QMetaType
operator|::
name|Void
condition|)
block|{
comment|// Void type is not supported by QVariant
return|return;
block|}
name|QVariant
name|constructedVariant
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|constructedVariant
operator|.
name|userType
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|loadedVariant
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|,
name|typeName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loadedVariant
operator|.
name|userType
argument_list|()
argument_list|,
name|constructedVariant
operator|.
name|userType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveQVariantFromDataStream
name|void
name|tst_QVariant
operator|::
name|saveQVariantFromDataStream
parameter_list|(
name|QDataStream
operator|::
name|Version
name|version
parameter_list|)
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|dataFileStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|typeName
decl_stmt|;
name|dataFileStream
operator|>>
name|typeName
expr_stmt|;
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
specifier|const
name|int
name|id
init|=
name|QMetaType
operator|::
name|type
argument_list|(
name|typeName
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|QMetaType
operator|::
name|Void
condition|)
block|{
comment|// Void type is not supported by QVariant
return|return;
block|}
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|QVariant
name|constructedVariant
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|constructedVariant
operator|.
name|userType
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|constructedVariant
expr_stmt|;
comment|// We are testing QVariant there is no point in testing full array.
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|.
name|left
argument_list|(
literal|5
argument_list|)
argument_list|,
name|data
operator|.
name|left
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVariant
name|recunstructedVariant
decl_stmt|;
name|stream
operator|>>
name|recunstructedVariant
expr_stmt|;
name|QCOMPARE
argument_list|(
name|recunstructedVariant
operator|.
name|userType
argument_list|()
argument_list|,
name|constructedVariant
operator|.
name|userType
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MessageHandler
class|class
name|MessageHandler
block|{
public|public:
DECL|function|MessageHandler
name|MessageHandler
parameter_list|(
specifier|const
name|int
name|typeId
parameter_list|,
name|QtMsgHandler
name|msgHandler
init|=
name|handler
parameter_list|)
member_init_list|:
name|oldMsgHandler
argument_list|(
name|qInstallMsgHandler
argument_list|(
name|msgHandler
argument_list|)
argument_list|)
block|{
name|currentId
operator|=
name|typeId
expr_stmt|;
block|}
DECL|function|~MessageHandler
name|~
name|MessageHandler
parameter_list|()
block|{
name|qInstallMsgHandler
argument_list|(
name|oldMsgHandler
argument_list|)
expr_stmt|;
block|}
DECL|function|testPassed
name|bool
name|testPassed
parameter_list|()
specifier|const
block|{
return|return
name|ok
return|;
block|}
protected|protected:
DECL|function|handler
specifier|static
name|void
name|handler
parameter_list|(
name|QtMsgType
parameter_list|,
specifier|const
name|char
modifier|*
name|txt
parameter_list|)
block|{
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|txt
argument_list|)
decl_stmt|;
comment|// Format itself is not important, but basic data as a type name should be included in the output
name|ok
operator|=
name|msg
operator|.
name|startsWith
argument_list|(
literal|"QVariant("
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message is not started correctly: '"
argument_list|)
operator|+
name|msg
operator|+
literal|'\''
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|&=
operator|(
name|currentId
operator|==
name|QMetaType
operator|::
name|UnknownType
condition|?
name|msg
operator|.
name|contains
argument_list|(
literal|"Invalid"
argument_list|)
else|:
name|msg
operator|.
name|contains
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|currentId
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message doesn't contain type name: '"
argument_list|)
operator|+
name|msg
operator|+
literal|'\''
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentId
operator|==
name|QMetaType
operator|::
name|Char
operator|||
name|currentId
operator|==
name|QMetaType
operator|::
name|QChar
condition|)
block|{
comment|// Chars insert '\0' into the qdebug stream, it is not possible to find a real string length
return|return;
block|}
name|ok
operator|&=
name|msg
operator|.
name|endsWith
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message is not correctly finished: '"
argument_list|)
operator|+
name|msg
operator|+
literal|'\''
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|member|oldMsgHandler
name|QtMsgHandler
name|oldMsgHandler
decl_stmt|;
DECL|member|currentId
specifier|static
name|int
name|currentId
decl_stmt|;
DECL|member|ok
specifier|static
name|bool
name|ok
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|ok
name|bool
name|MessageHandler
operator|::
name|ok
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|currentId
name|int
name|MessageHandler
operator|::
name|currentId
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|debugStream_data
name|void
name|tst_QVariant
operator|::
name|debugStream_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"variant"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"typeId"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|0
init|;
name|id
operator|<
name|QMetaType
operator|::
name|User
condition|;
operator|++
name|id
control|)
block|{
specifier|const
name|char
modifier|*
name|tagName
init|=
name|QMetaType
operator|::
name|typeName
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tagName
condition|)
continue|continue;
if|if
condition|(
name|id
operator|!=
name|QMetaType
operator|::
name|Void
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|tagName
argument_list|)
operator|<<
name|QVariant
argument_list|(
cast|static_cast
argument_list|<
name|QVariant
operator|::
name|Type
argument_list|>
argument_list|(
name|id
argument_list|)
argument_list|)
operator|<<
name|id
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QBitArray(111)"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QBitArray
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|QBitArray
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CustomStreamableClass"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qMetaTypeId
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomStreamableClass
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyClass"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qMetaTypeId
argument_list|<
name|MyClass
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|MyClass
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"InvalidVariant"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
name|int
argument_list|(
name|QMetaType
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|debugStream
name|void
name|tst_QVariant
operator|::
name|debugStream
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|MessageHandler
name|msgHandler
argument_list|(
name|typeId
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|variant
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgHandler
operator|.
name|testPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|MessageHandlerType
struct|struct
name|MessageHandlerType
super|:
specifier|public
name|MessageHandler
block|{
DECL|function|MessageHandlerType
name|MessageHandlerType
parameter_list|(
specifier|const
name|int
name|typeId
parameter_list|)
member_init_list|:
name|MessageHandler
argument_list|(
name|typeId
argument_list|,
name|handler
argument_list|)
block|{}
DECL|function|handler
specifier|static
name|void
name|handler
parameter_list|(
name|QtMsgType
parameter_list|,
specifier|const
name|char
modifier|*
name|txt
parameter_list|)
block|{
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|txt
argument_list|)
decl_stmt|;
comment|// Format itself is not important, but basic data as a type name should be included in the output
name|ok
operator|=
name|msg
operator|.
name|startsWith
argument_list|(
literal|"QVariant::"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message is not started correctly: '"
argument_list|)
operator|+
name|msg
operator|+
literal|'\''
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|&=
operator|(
name|currentId
operator|==
name|QMetaType
operator|::
name|UnknownType
condition|?
name|msg
operator|.
name|contains
argument_list|(
literal|"Invalid"
argument_list|)
else|:
name|msg
operator|.
name|contains
argument_list|(
name|QMetaType
operator|::
name|typeName
argument_list|(
name|currentId
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message doesn't contain type name: '"
argument_list|)
operator|+
name|msg
operator|+
literal|'\''
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|debugStreamType_data
name|void
name|tst_QVariant
operator|::
name|debugStreamType_data
parameter_list|()
block|{
name|debugStream_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|debugStreamType
name|void
name|tst_QVariant
operator|::
name|debugStreamType
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|typeId
argument_list|)
expr_stmt|;
name|MessageHandlerType
name|msgHandler
argument_list|(
name|typeId
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QVariant
operator|::
name|Type
argument_list|(
name|typeId
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msgHandler
operator|.
name|testPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|guiVariantAtExit
name|void
name|tst_QVariant
operator|::
name|guiVariantAtExit
parameter_list|()
block|{
comment|// crash test, it should not crash at QGuiApplication exit
specifier|static
name|QVariant
name|cursor
init|=
name|QCursor
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|point
init|=
name|QPoint
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|image
init|=
name|QImage
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|pallete
init|=
name|QPalette
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|point
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|image
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|pallete
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|widgetsVariantAtExit
name|void
name|tst_QVariant
operator|::
name|widgetsVariantAtExit
parameter_list|()
block|{
comment|// crash test, it should not crash at QGuiApplication exit
specifier|static
name|QVariant
name|icon
init|=
name|QIcon
argument_list|()
decl_stmt|;
specifier|static
name|QVariant
name|sizePolicy
init|=
name|QSizePolicy
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|sizePolicy
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QVariant
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvariant.moc"
end_include
end_unit
