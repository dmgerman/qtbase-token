begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qabstracteventdispatcher.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qcoreevent.h>
end_include
begin_include
include|#
directive|include
file|<qeventloop.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_include
include|#
directive|include
file|<QTcpServer>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|EventLoopExiter
class|class
name|EventLoopExiter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|eventLoop
name|QEventLoop
modifier|*
name|eventLoop
decl_stmt|;
public|public:
DECL|function|EventLoopExiter
specifier|inline
name|EventLoopExiter
parameter_list|(
name|QEventLoop
modifier|*
name|el
parameter_list|)
member_init_list|:
name|eventLoop
argument_list|(
name|el
argument_list|)
block|{ }
public|public
name|slots
public|:
name|void
name|exit
parameter_list|()
function_decl|;
name|void
name|exit1
parameter_list|()
function_decl|;
name|void
name|exit2
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|exit
name|void
name|EventLoopExiter
operator|::
name|exit
parameter_list|()
block|{
name|eventLoop
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exit1
name|void
name|EventLoopExiter
operator|::
name|exit1
parameter_list|()
block|{
name|eventLoop
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exit2
name|void
name|EventLoopExiter
operator|::
name|exit2
parameter_list|()
block|{
name|eventLoop
operator|->
name|exit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|EventLoopThread
class|class
name|EventLoopThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
signals|signals:
name|void
name|checkPoint
parameter_list|()
function_decl|;
public|public:
DECL|member|eventLoop
name|QEventLoop
modifier|*
name|eventLoop
decl_stmt|;
name|void
name|run
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|run
name|void
name|EventLoopThread
operator|::
name|run
parameter_list|()
block|{
name|eventLoop
operator|=
operator|new
name|QEventLoop
expr_stmt|;
emit|emit
name|checkPoint
argument_list|()
emit|;
operator|(
name|void
operator|)
name|eventLoop
operator|->
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|eventLoop
expr_stmt|;
name|eventLoop
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MultipleExecThread
class|class
name|MultipleExecThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
signals|signals:
name|void
name|checkPoint
parameter_list|()
function_decl|;
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
name|cond
decl_stmt|;
DECL|member|result1
specifier|volatile
name|int
name|result1
decl_stmt|;
DECL|member|result2
specifier|volatile
name|int
name|result2
decl_stmt|;
DECL|function|MultipleExecThread
name|MultipleExecThread
parameter_list|()
member_init_list|:
name|result1
argument_list|(
literal|0xdead
argument_list|)
member_init_list|,
name|result2
argument_list|(
literal|0xbeef
argument_list|)
block|{}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
comment|// this exec should work
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|result1
operator|=
name|exec
argument_list|()
expr_stmt|;
comment|// this should return immediately, since exit() has been called
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|result2
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|StartStopEvent
class|class
name|StartStopEvent
super|:
specifier|public
name|QEvent
block|{
public|public:
DECL|function|StartStopEvent
name|StartStopEvent
parameter_list|(
name|int
name|type
parameter_list|,
name|QEventLoop
modifier|*
name|loop
init|=
literal|0
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Type
argument_list|(
name|type
argument_list|)
argument_list|)
member_init_list|,
name|el
argument_list|(
name|loop
argument_list|)
block|{ }
DECL|member|el
name|QEventLoop
modifier|*
name|el
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|EventLoopExecutor
class|class
name|EventLoopExecutor
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|eventLoop
name|QEventLoop
modifier|*
name|eventLoop
decl_stmt|;
public|public:
DECL|member|returnCode
name|int
name|returnCode
decl_stmt|;
DECL|function|EventLoopExecutor
name|EventLoopExecutor
parameter_list|(
name|QEventLoop
modifier|*
name|eventLoop
parameter_list|)
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|eventLoop
argument_list|(
name|eventLoop
argument_list|)
member_init_list|,
name|returnCode
argument_list|(
operator|-
literal|42
argument_list|)
block|{     }
public|public
name|slots
public|:
DECL|function|exec
name|void
name|exec
parameter_list|()
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// this should return immediately, and the timer event should be delivered to
comment|// tst_QEventLoop::exec() test, letting the test complete
name|returnCode
operator|=
name|eventLoop
operator|->
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_class
DECL|class|QEventLoopTestException
class|class
name|QEventLoopTestException
block|{
block|}
class|;
end_class
begin_class
DECL|class|ExceptionThrower
class|class
name|ExceptionThrower
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ExceptionThrower
name|ExceptionThrower
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
block|{ }
public|public
name|slots
public|:
DECL|function|throwException
name|void
name|throwException
parameter_list|()
block|{
name|QEventLoopTestException
name|e
decl_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QEventLoop
class|class
name|tst_QEventLoop
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
comment|// This test *must* run first. See the definition for why.
name|void
name|processEvents
parameter_list|()
function_decl|;
name|void
name|exec
parameter_list|()
function_decl|;
name|void
name|throwInExec
parameter_list|()
function_decl|;
name|void
name|reexec
parameter_list|()
function_decl|;
name|void
name|execAfterExit
parameter_list|()
function_decl|;
name|void
name|wakeUp
parameter_list|()
function_decl|;
name|void
name|quit
parameter_list|()
function_decl|;
name|void
name|processEventsExcludeSocket
parameter_list|()
function_decl|;
name|void
name|processEventsExcludeTimers
parameter_list|()
function_decl|;
name|void
name|deliverInDefinedOrder
parameter_list|()
function_decl|;
comment|// keep this test last:
name|void
name|nestedLoops
parameter_list|()
function_decl|;
protected|protected:
name|void
name|customEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|processEvents
name|void
name|tst_QEventLoop
operator|::
name|processEvents
parameter_list|()
block|{
name|QSignalSpy
name|spy1
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToBlock
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|awake
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|eventLoop
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
comment|// process posted events, QEventLoop::processEvents() should return
comment|// true
name|QVERIFY
argument_list|(
name|eventLoop
operator|.
name|processEvents
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// allow any session manager to complete its handshake, so that
comment|// there are no pending events left.
while|while
condition|(
name|eventLoop
operator|.
name|processEvents
argument_list|()
condition|)
empty_stmt|;
comment|// On mac we get application started events at this point,
comment|// so process events one more time just to be sure.
name|eventLoop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
comment|// no events to process, QEventLoop::processEvents() should return
comment|// false
name|spy1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|spy2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|eventLoop
operator|.
name|processEvents
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the test doesn't block forever
name|int
name|timerId
init|=
name|startTimer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// wait for more events to process, QEventLoop::processEvents()
comment|// should return true
name|spy1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|spy2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|eventLoop
operator|.
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the eventloop has blocked and woken up. Some eventloops
comment|// may block and wake up multiple times.
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// We should get one awake for each aboutToBlock, plus one awake when
comment|// processEvents is entered.
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>=
name|spy1
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|timerId
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|EXEC_TIMEOUT
define|#
directive|define
name|EXEC_TIMEOUT
value|100
end_define
begin_function
DECL|function|exec
name|void
name|tst_QEventLoop
operator|::
name|exec
parameter_list|()
block|{
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|EventLoopExiter
name|exiter
argument_list|(
operator|&
name|eventLoop
argument_list|)
decl_stmt|;
name|int
name|returnCode
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|exiter
argument_list|,
name|SLOT
argument_list|(
name|exit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|returnCode
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|returnCode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|exiter
argument_list|,
name|SLOT
argument_list|(
name|exit1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|returnCode
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|returnCode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|exiter
argument_list|,
name|SLOT
argument_list|(
name|exit2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|returnCode
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|returnCode
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
comment|// calling QEventLoop::exec() after a thread loop has exit()ed should return immediately
comment|// Note: this behaviour differs from QCoreApplication and QEventLoop
comment|// see tst_QCoreApplication::eventLoopExecAfterExit, tst_QEventLoop::reexec
name|MultipleExecThread
name|thread
decl_stmt|;
comment|// start thread and wait for checkpoint
name|thread
operator|.
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
expr_stmt|;
comment|// make sure the eventloop runs
name|QSignalSpy
name|spy
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|(
operator|&
name|thread
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|awake
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|v
init|=
name|thread
operator|.
name|result1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// exec should return immediately
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|thread
operator|.
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|thread
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|v
operator|=
name|thread
operator|.
name|result2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
comment|// a single instance of QEventLoop should not be allowed to recurse into exec()
name|QEventLoop
name|eventLoop
decl_stmt|;
name|EventLoopExecutor
name|executor
argument_list|(
operator|&
name|eventLoop
argument_list|)
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|executor
argument_list|,
name|SLOT
argument_list|(
name|exec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|returnCode
init|=
name|eventLoop
operator|.
name|exec
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|returnCode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|executor
operator|.
name|returnCode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|throwInExec
name|void
name|tst_QEventLoop
operator|::
name|throwInExec
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_EXCEPTIONS
argument_list|)
operator|||
name|defined
argument_list|(
name|NO_EVENTLOOP_EXCEPTIONS
argument_list|)
name|QSKIP
argument_list|(
literal|"Exceptions are disabled"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE_WM
argument_list|)
comment|// Windows Mobile cannot handle cross library exceptions
comment|// qobject.cpp will try to rethrow the exception after handling
comment|// which causes gwes.exe to crash
name|QSKIP
argument_list|(
literal|"This platform doesn't support propagating exceptions through the event loop"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
comment|// C++ exceptions can't be passed through glib callbacks.  Skip the test if
comment|// we're using the glib event loop.
name|QByteArray
name|dispatcher
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
decl_stmt|;
if|if
condition|(
name|dispatcher
operator|.
name|contains
argument_list|(
literal|"Glib"
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Throwing exceptions in exec() won't work if %1 event dispatcher is used.\n"
literal|"Try running with QT_NO_GLIB=1 in environment."
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|dispatcher
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|{
comment|// QEventLoop::exec() is exception safe
name|QEventLoop
name|eventLoop
decl_stmt|;
name|int
name|caughtExceptions
init|=
literal|0
decl_stmt|;
try|try
block|{
name|ExceptionThrower
name|exceptionThrower
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|exceptionThrower
argument_list|,
name|SLOT
argument_list|(
name|throwException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
operator|++
name|caughtExceptions
expr_stmt|;
block|}
try|try
block|{
name|ExceptionThrower
name|exceptionThrower
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|EXEC_TIMEOUT
argument_list|,
operator|&
name|exceptionThrower
argument_list|,
name|SLOT
argument_list|(
name|throwException
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
operator|++
name|caughtExceptions
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|caughtExceptions
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|reexec
name|void
name|tst_QEventLoop
operator|::
name|reexec
parameter_list|()
block|{
name|QEventLoop
name|loop
decl_stmt|;
comment|// exec once
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|loop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loop
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// and again
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|loop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loop
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|execAfterExit
name|void
name|tst_QEventLoop
operator|::
name|execAfterExit
parameter_list|()
block|{
name|QEventLoop
name|loop
decl_stmt|;
name|EventLoopExiter
name|obj
argument_list|(
operator|&
name|loop
argument_list|)
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|obj
argument_list|,
literal|"exit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loop
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wakeUp
name|void
name|tst_QEventLoop
operator|::
name|wakeUp
parameter_list|()
block|{
name|EventLoopThread
name|thread
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|checkPoint
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|(
operator|&
name|thread
argument_list|)
argument_list|,
name|SIGNAL
argument_list|(
name|awake
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|thread
operator|.
name|eventLoop
operator|->
name|wakeUp
argument_list|()
expr_stmt|;
comment|// give the thread time to wake up
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|thread
operator|.
name|quit
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quit
name|void
name|tst_QEventLoop
operator|::
name|quit
parameter_list|()
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|int
name|returnCode
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|returnCode
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|returnCode
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nestedLoops
name|void
name|tst_QEventLoop
operator|::
name|nestedLoops
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|StartStopEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|StartStopEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|StartStopEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
comment|// without the fix, this will *wedge* and never return
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customEvent
name|void
name|tst_QEventLoop
operator|::
name|customEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
condition|)
block|{
name|QEventLoop
name|loop
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|StartStopEvent
argument_list|(
name|int
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
operator|+
literal|1
argument_list|,
operator|&
name|loop
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
cast|static_cast
argument_list|<
name|StartStopEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|el
operator|->
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|SocketEventsTester
class|class
name|SocketEventsTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SocketEventsTester
name|SocketEventsTester
parameter_list|()
block|{
name|socket
operator|=
literal|0
expr_stmt|;
name|server
operator|=
literal|0
expr_stmt|;
name|dataArrived
operator|=
literal|false
expr_stmt|;
name|testResult
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|~SocketEventsTester
name|~
name|SocketEventsTester
parameter_list|()
block|{
operator|delete
name|socket
expr_stmt|;
operator|delete
name|server
expr_stmt|;
block|}
DECL|function|init
name|bool
name|init
parameter_list|()
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|;
name|server
operator|=
operator|new
name|QTcpServer
argument_list|()
expr_stmt|;
name|socket
operator|=
operator|new
name|QTcpSocket
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendHello
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendAck
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|server
operator|->
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|0
argument_list|)
operator|)
condition|)
block|{
name|socket
operator|->
name|connectToHost
argument_list|(
name|server
operator|->
name|serverAddress
argument_list|()
argument_list|,
name|server
operator|->
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|waitForConnected
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|member|socket
name|QTcpSocket
modifier|*
name|socket
decl_stmt|;
DECL|member|server
name|QTcpServer
modifier|*
name|server
decl_stmt|;
DECL|member|dataArrived
name|bool
name|dataArrived
decl_stmt|;
DECL|member|testResult
name|bool
name|testResult
decl_stmt|;
public|public
name|slots
public|:
DECL|function|sendAck
name|void
name|sendAck
parameter_list|()
block|{
name|dataArrived
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|sendHello
name|void
name|sendHello
parameter_list|()
block|{
name|char
name|data
index|[
literal|10
index|]
init|=
literal|"HELLO"
decl_stmt|;
name|qint64
name|size
init|=
sizeof|sizeof
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QTcpSocket
modifier|*
name|serverSocket
init|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|serverSocket
operator|->
name|write
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|//allow the TCP/IP stack time to loopback the data, so our socket is ready to read
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|ExcludeSocketNotifiers
argument_list|)
expr_stmt|;
name|testResult
operator|=
name|dataArrived
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|//check the deferred event is processed
name|serverSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|SocketTestThread
class|class
name|SocketTestThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|SocketTestThread
name|SocketTestThread
parameter_list|()
member_init_list|:
name|QThread
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|testResult
argument_list|(
literal|false
argument_list|)
block|{}
empty_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|SocketEventsTester
modifier|*
name|tester
init|=
operator|new
name|SocketEventsTester
argument_list|()
decl_stmt|;
if|if
condition|(
name|tester
operator|->
name|init
argument_list|()
condition|)
name|exec
argument_list|()
expr_stmt|;
name|testResult
operator|=
name|tester
operator|->
name|testResult
expr_stmt|;
name|dataArrived
operator|=
name|tester
operator|->
name|dataArrived
expr_stmt|;
operator|delete
name|tester
expr_stmt|;
block|}
DECL|member|testResult
name|bool
name|testResult
decl_stmt|;
DECL|member|dataArrived
name|bool
name|dataArrived
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|processEventsExcludeSocket
name|void
name|tst_QEventLoop
operator|::
name|processEventsExcludeSocket
parameter_list|()
block|{
name|SocketTestThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|testResult
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|dataArrived
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TimerReceiver
class|class
name|TimerReceiver
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|member|gotTimerEvent
name|int
name|gotTimerEvent
decl_stmt|;
DECL|function|TimerReceiver
name|TimerReceiver
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|gotTimerEvent
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|gotTimerEvent
operator|=
name|event
operator|->
name|timerId
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|processEventsExcludeTimers
name|void
name|tst_QEventLoop
operator|::
name|processEventsExcludeTimers
parameter_list|()
block|{
name|TimerReceiver
name|timerReceiver
decl_stmt|;
name|int
name|timerId
init|=
name|timerReceiver
operator|.
name|startTimer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
comment|// normal process events will send timers
name|eventLoop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timerReceiver
operator|.
name|gotTimerEvent
argument_list|,
name|timerId
argument_list|)
expr_stmt|;
name|timerReceiver
operator|.
name|gotTimerEvent
operator|=
operator|-
literal|1
expr_stmt|;
comment|// normal process events will send timers
name|eventLoop
operator|.
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|X11ExcludeTimers
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"X11ExcludeTimers only works on UN*X"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|timerReceiver
operator|.
name|gotTimerEvent
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|timerReceiver
operator|.
name|gotTimerEvent
operator|=
operator|-
literal|1
expr_stmt|;
comment|// resume timer processing
name|eventLoop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timerReceiver
operator|.
name|gotTimerEvent
argument_list|,
name|timerId
argument_list|)
expr_stmt|;
name|timerReceiver
operator|.
name|gotTimerEvent
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QThread*
argument_list|)
end_macro
begin_namespace
DECL|namespace|DeliverInDefinedOrder
namespace|namespace
name|DeliverInDefinedOrder
block|{
DECL|enumerator|NbThread
DECL|enumerator|NbObject
DECL|enumerator|NbEventQueue
DECL|enumerator|NbEvent
enum|enum
block|{
name|NbThread
init|=
literal|3
block|,
name|NbObject
init|=
literal|500
block|,
name|NbEventQueue
init|=
literal|5
block|,
name|NbEvent
init|=
literal|50
block|}
enum|;
DECL|struct|CustomEvent
struct|struct
name|CustomEvent
super|:
specifier|public
name|QEvent
block|{
DECL|function|CustomEvent
name|CustomEvent
parameter_list|(
name|int
name|q
parameter_list|,
name|int
name|v
parameter_list|)
member_init_list|:
name|QEvent
argument_list|(
name|Type
argument_list|(
name|User
operator|+
name|q
argument_list|)
argument_list|)
member_init_list|,
name|value
argument_list|(
name|v
argument_list|)
block|{}
DECL|member|value
name|int
name|value
decl_stmt|;
block|}
struct|;
DECL|struct|Object
struct|struct
name|Object
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Object
name|Object
parameter_list|()
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NbEventQueue
condition|;
name|i
operator|++
control|)
name|lastReceived
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|member|lastReceived
name|int
name|lastReceived
index|[
name|NbEventQueue
index|]
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|function|customEvent
specifier|virtual
name|void
name|customEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|e
operator|->
name|type
argument_list|()
operator|>=
name|QEvent
operator|::
name|User
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|->
name|type
argument_list|()
operator|<
name|QEvent
operator|::
name|User
operator|+
literal|5
argument_list|)
expr_stmt|;
name|uint
name|idx
init|=
name|e
operator|->
name|type
argument_list|()
operator|-
name|QEvent
operator|::
name|User
decl_stmt|;
name|int
name|value
init|=
cast|static_cast
argument_list|<
name|CustomEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
operator|->
name|value
decl_stmt|;
name|QVERIFY
argument_list|(
name|lastReceived
index|[
name|idx
index|]
operator|<
name|value
argument_list|)
expr_stmt|;
name|lastReceived
index|[
name|idx
index|]
operator|=
name|value
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
DECL|member|slots
public|public
name|slots
public|:
name|void
name|moveToThread
parameter_list|(
name|QThread
modifier|*
name|t
parameter_list|)
block|{
name|QObject
operator|::
name|moveToThread
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
block|}
end_namespace
begin_function
name|void
name|tst_QEventLoop
operator|::
name|deliverInDefinedOrder
parameter_list|()
block|{
using|using
namespace|namespace
name|DeliverInDefinedOrder
namespace|;
name|qMetaTypeId
argument_list|<
name|QThread
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QThread
name|threads
index|[
name|NbThread
index|]
decl_stmt|;
name|Object
name|objects
index|[
name|NbObject
index|]
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|NbThread
condition|;
name|t
operator|++
control|)
block|{
name|threads
index|[
name|t
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|int
name|event
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|NbObject
condition|;
name|o
operator|++
control|)
block|{
name|objects
index|[
name|o
index|]
operator|.
name|moveToThread
argument_list|(
operator|&
name|threads
index|[
name|o
operator|%
name|NbThread
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|NbEvent
condition|;
name|e
operator|++
control|)
block|{
name|int
name|q
init|=
name|e
operator|%
name|NbEventQueue
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|objects
index|[
name|o
index|]
argument_list|,
operator|new
name|CustomEvent
argument_list|(
name|q
argument_list|,
operator|++
name|event
argument_list|)
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|%
literal|7
condition|)
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|objects
index|[
name|o
index|]
argument_list|,
literal|"moveToThread"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QThread
operator|*
argument_list|,
operator|&
name|threads
index|[
operator|(
name|e
operator|+
name|o
operator|)
operator|%
name|NbThread
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|NbObject
condition|;
name|o
operator|++
control|)
block|{
name|QTRY_COMPARE
argument_list|(
name|objects
index|[
name|o
index|]
operator|.
name|count
argument_list|,
name|int
argument_list|(
name|NbEvent
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|NbThread
condition|;
name|t
operator|++
control|)
block|{
name|threads
index|[
name|t
index|]
operator|.
name|quit
argument_list|()
expr_stmt|;
name|threads
index|[
name|t
index|]
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QEventLoop
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qeventloop.moc"
end_include
end_unit
