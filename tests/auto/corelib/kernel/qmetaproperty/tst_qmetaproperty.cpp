begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_class
DECL|class|tst_QMetaProperty
class|class
name|tst_QMetaProperty
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|EnumType
name|value
name|WRITE
name|setValue
name|READ
name|getValue
argument_list|)
name|Q_PROPERTY
argument_list|(
name|EnumType
name|value2
name|WRITE
name|set_value
name|READ
name|get_value
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|value8
name|READ
name|value8
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|value9
name|READ
name|value9
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|value10
name|READ
name|value10
name|FINAL
argument_list|)
decl|private
name|slots
range|:
name|void
name|hasStdCppSet
argument_list|()
decl_stmt|;
name|void
name|isConstant
parameter_list|()
function_decl|;
name|void
name|isFinal
parameter_list|()
function_decl|;
public|public:
DECL|enum|EnumType
DECL|enumerator|EnumType1
enum|enum
name|EnumType
block|{
name|EnumType1
block|}
enum|;
DECL|function|setValue
name|void
name|setValue
parameter_list|(
name|EnumType
parameter_list|)
block|{}
DECL|function|getValue
name|EnumType
name|getValue
parameter_list|()
specifier|const
block|{
return|return
name|EnumType1
return|;
block|}
DECL|function|set_value
name|void
name|set_value
parameter_list|(
name|EnumType
parameter_list|)
block|{}
DECL|function|get_value
name|EnumType
name|get_value
parameter_list|()
specifier|const
block|{
return|return
name|EnumType1
return|;
block|}
DECL|function|value8
name|int
name|value8
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|value9
name|int
name|value9
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|value10
name|int
name|value10
parameter_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|hasStdCppSet
name|void
name|tst_QMetaProperty
operator|::
name|hasStdCppSet
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|metaObject
argument_list|()
decl_stmt|;
name|QMetaProperty
name|prop
init|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isConstant
name|void
name|tst_QMetaProperty
operator|::
name|isConstant
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|metaObject
argument_list|()
decl_stmt|;
name|QMetaProperty
name|prop
init|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value8"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value9"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFinal
name|void
name|tst_QMetaProperty
operator|::
name|isFinal
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
name|metaObject
argument_list|()
decl_stmt|;
name|QMetaProperty
name|prop
init|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value10"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|=
name|mo
operator|->
name|property
argument_list|(
name|mo
operator|->
name|indexOfProperty
argument_list|(
literal|"value9"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMetaProperty
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmetaproperty.moc"
end_include
end_unit
