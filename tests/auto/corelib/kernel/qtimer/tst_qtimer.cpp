begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_GUI_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_if
if|#
directive|if
name|defined
name|Q_OS_UNIX
end_if
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QTimer
class|class
name|tst_QTimer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|zeroTimer
parameter_list|()
function_decl|;
name|void
name|singleShotTimeout
parameter_list|()
function_decl|;
name|void
name|timeout
parameter_list|()
function_decl|;
name|void
name|remainingTime
parameter_list|()
function_decl|;
name|void
name|remainingTimeDuringActivation_data
parameter_list|()
function_decl|;
name|void
name|remainingTimeDuringActivation
parameter_list|()
function_decl|;
name|void
name|livelock_data
parameter_list|()
function_decl|;
name|void
name|livelock
parameter_list|()
function_decl|;
name|void
name|timerInfiniteRecursion_data
parameter_list|()
function_decl|;
name|void
name|timerInfiniteRecursion
parameter_list|()
function_decl|;
name|void
name|recurringTimer_data
parameter_list|()
function_decl|;
name|void
name|recurringTimer
parameter_list|()
function_decl|;
name|void
name|deleteLaterOnQTimer
parameter_list|()
function_decl|;
comment|// long name, don't want to shadow QObject::deleteLater()
name|void
name|moveToThread
parameter_list|()
function_decl|;
name|void
name|restartedTimerFiresTooSoon
parameter_list|()
function_decl|;
name|void
name|timerFiresOnlyOncePerProcessEvents_data
parameter_list|()
function_decl|;
name|void
name|timerFiresOnlyOncePerProcessEvents
parameter_list|()
function_decl|;
name|void
name|timerIdPersistsAfterThreadExit
parameter_list|()
function_decl|;
name|void
name|cancelLongTimer
parameter_list|()
function_decl|;
name|void
name|singleShotStaticFunctionZeroTimeout
parameter_list|()
function_decl|;
name|void
name|recurseOnTimeoutAndStopTimer
parameter_list|()
function_decl|;
name|void
name|singleShotToFunctors
parameter_list|()
function_decl|;
name|void
name|dontBlockEvents
parameter_list|()
function_decl|;
name|void
name|postedEventsShouldNotStarveTimers
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|TimerHelper
class|class
name|TimerHelper
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TimerHelper
name|TimerHelper
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|remainingTime
argument_list|(
operator|-
literal|1
argument_list|)
block|{     }
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|remainingTime
name|int
name|remainingTime
decl_stmt|;
public|public
name|slots
public|:
name|void
name|timeout
parameter_list|()
function_decl|;
name|void
name|fetchRemainingTime
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|timeout
name|void
name|TimerHelper
operator|::
name|timeout
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchRemainingTime
name|void
name|TimerHelper
operator|::
name|fetchRemainingTime
parameter_list|()
block|{
name|QTimer
modifier|*
name|timer
init|=
cast|static_cast
argument_list|<
name|QTimer
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|remainingTime
operator|=
name|timer
operator|->
name|remainingTime
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|zeroTimer
name|void
name|tst_QTimer
operator|::
name|zeroTimer
parameter_list|()
block|{
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|singleShotTimeout
name|void
name|tst_QTimer
operator|::
name|singleShotTimeout
parameter_list|()
block|{
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|TIMEOUT_TIMEOUT
define|#
directive|define
name|TIMEOUT_TIMEOUT
value|200
end_define
begin_function
DECL|function|timeout
name|void
name|tst_QTimer
operator|::
name|timeout
parameter_list|()
block|{
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|TIMEOUT_TIMEOUT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|helper
operator|.
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|oldCount
init|=
name|helper
operator|.
name|count
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|TIMEOUT_TIMEOUT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|helper
operator|.
name|count
operator|>
name|oldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remainingTime
name|void
name|tst_QTimer
operator|::
name|remainingTime
parameter_list|()
block|{
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|remainingTime
init|=
name|timer
operator|.
name|remainingTime
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|qAbs
argument_list|(
name|remainingTime
operator|-
literal|150
argument_list|)
operator|<
literal|50
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|remainingTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for the timer to actually fire now
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// the timer is still active, so it should have a non-zero remaining time
name|remainingTime
operator|=
name|timer
operator|.
name|remainingTime
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|remainingTime
operator|>
literal|150
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|remainingTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remainingTimeDuringActivation_data
name|void
name|tst_QTimer
operator|::
name|remainingTimeDuringActivation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"singleShot"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"repeating"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single-shot"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remainingTimeDuringActivation
name|void
name|tst_QTimer
operator|::
name|remainingTimeDuringActivation
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|singleShot
argument_list|)
expr_stmt|;
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
specifier|const
name|int
name|timeout
init|=
literal|20
decl_stmt|;
comment|// 20 ms is short enough and should not round down to 0 in any timer mode
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|fetchRemainingTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
name|singleShot
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|singleShot
condition|)
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|remainingTime
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// timer not running
else|else
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|remainingTime
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|singleShot
condition|)
block|{
comment|// do it again - see QTBUG-46940
name|helper
operator|.
name|remainingTime
operator|=
operator|-
literal|1
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|remainingTime
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|livelock_data
name|void
name|tst_QTimer
operator|::
name|livelock_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"interval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero timer"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-zero timer"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longer than sleep"
argument_list|)
operator|<<
literal|20
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!  *  * DO NOT "FIX" THIS TEST!  it is written like this for a reason, do  * not *change it without first dicussing it with its maintainers.  * */
end_comment
begin_class
DECL|class|LiveLockTester
class|class
name|LiveLockTester
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|function|LiveLockTester
name|LiveLockTester
parameter_list|(
name|int
name|i
parameter_list|)
member_init_list|:
name|interval
argument_list|(
name|i
argument_list|)
member_init_list|,
name|timeoutsForFirst
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timeoutsForExtra
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timeoutsForSecond
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|postEventAtRightTime
argument_list|(
literal|false
argument_list|)
block|{
name|firstTimerId
operator|=
name|startTimer
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|extraTimerId
operator|=
name|startTimer
argument_list|(
name|interval
operator|+
literal|80
argument_list|)
expr_stmt|;
name|secondTimerId
operator|=
operator|-
literal|1
expr_stmt|;
comment|// started later
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
literal|4002
condition|)
block|{
comment|// got the posted event
if|if
condition|(
name|timeoutsForFirst
operator|==
literal|1
operator|&&
name|timeoutsForSecond
operator|==
literal|0
condition|)
name|postEventAtRightTime
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|te
parameter_list|)
block|{
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|firstTimerId
condition|)
block|{
if|if
condition|(
operator|++
name|timeoutsForFirst
operator|==
literal|1
condition|)
block|{
name|killTimer
argument_list|(
name|extraTimerId
argument_list|)
expr_stmt|;
name|extraTimerId
operator|=
operator|-
literal|1
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
cast|static_cast
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
argument_list|(
literal|4002
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|secondTimerId
operator|=
name|startTimer
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|secondTimerId
condition|)
block|{
operator|++
name|timeoutsForSecond
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|te
operator|->
name|timerId
argument_list|()
operator|==
name|extraTimerId
condition|)
block|{
operator|++
name|timeoutsForExtra
expr_stmt|;
block|}
comment|// sleep for 2ms
name|QTest
operator|::
name|qSleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|killTimer
argument_list|(
name|te
operator|->
name|timerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|member|interval
specifier|const
name|int
name|interval
decl_stmt|;
DECL|member|firstTimerId
name|int
name|firstTimerId
decl_stmt|;
DECL|member|secondTimerId
name|int
name|secondTimerId
decl_stmt|;
DECL|member|extraTimerId
name|int
name|extraTimerId
decl_stmt|;
DECL|member|timeoutsForFirst
name|int
name|timeoutsForFirst
decl_stmt|;
DECL|member|timeoutsForExtra
name|int
name|timeoutsForExtra
decl_stmt|;
DECL|member|timeoutsForSecond
name|int
name|timeoutsForSecond
decl_stmt|;
DECL|member|postEventAtRightTime
name|bool
name|postEventAtRightTime
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|livelock
name|void
name|tst_QTimer
operator|::
name|livelock
parameter_list|()
block|{
comment|/*       New timers created in timer event handlers should not be sent       until the next iteration of the eventloop.  Note: this test       depends on the fact that we send posted events before timer       events (since new posted events are not sent until the next       iteration of the eventloop either).     */
name|QFETCH
argument_list|(
name|int
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|LiveLockTester
name|tester
argument_list|(
name|interval
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|180
argument_list|)
expr_stmt|;
comment|// we have to use wait here, since we're testing timers with a non-zero timeout
name|QTRY_COMPARE
argument_list|(
name|tester
operator|.
name|timeoutsForFirst
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tester
operator|.
name|timeoutsForExtra
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|tester
operator|.
name|timeoutsForSecond
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"non-zero timer"
argument_list|,
literal|"Windows CE devices often too slow"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|tester
operator|.
name|postEventAtRightTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TimerInfiniteRecursionObject
class|class
name|TimerInfiniteRecursionObject
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|member|inTimerEvent
name|bool
name|inTimerEvent
decl_stmt|;
DECL|member|timerEventRecursed
name|bool
name|timerEventRecursed
decl_stmt|;
DECL|member|interval
name|int
name|interval
decl_stmt|;
DECL|function|TimerInfiniteRecursionObject
name|TimerInfiniteRecursionObject
parameter_list|(
name|int
name|interval
parameter_list|)
member_init_list|:
name|inTimerEvent
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|timerEventRecursed
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|interval
argument_list|(
name|interval
argument_list|)
block|{ }
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|timerEvent
parameter_list|)
block|{
name|timerEventRecursed
operator|=
name|inTimerEvent
expr_stmt|;
if|if
condition|(
name|timerEventRecursed
condition|)
block|{
comment|// bug detected!
return|return;
block|}
name|inTimerEvent
operator|=
literal|true
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|qMax
argument_list|(
literal|100
argument_list|,
name|interval
operator|*
literal|2
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|inTimerEvent
operator|=
literal|false
expr_stmt|;
name|killTimer
argument_list|(
name|timerEvent
operator|->
name|timerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|timerInfiniteRecursion_data
name|void
name|tst_QTimer
operator|::
name|timerInfiniteRecursion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"interval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero timer"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-zero timer"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10ms timer"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11ms timer"
argument_list|)
operator|<<
literal|11
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100ms timer"
argument_list|)
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1s timer"
argument_list|)
operator|<<
literal|1000
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerInfiniteRecursion
name|void
name|tst_QTimer
operator|::
name|timerInfiniteRecursion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|TimerInfiniteRecursionObject
name|object
argument_list|(
name|interval
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|object
operator|.
name|startTimer
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|qMax
argument_list|(
literal|100
argument_list|,
name|interval
operator|*
literal|2
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|object
operator|.
name|timerEventRecursed
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RecurringTimerObject
class|class
name|RecurringTimerObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|times
name|int
name|times
decl_stmt|;
DECL|member|target
name|int
name|target
decl_stmt|;
DECL|member|recurse
name|bool
name|recurse
decl_stmt|;
DECL|function|RecurringTimerObject
name|RecurringTimerObject
parameter_list|(
name|int
name|target
parameter_list|)
member_init_list|:
name|times
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|target
argument_list|(
name|target
argument_list|)
member_init_list|,
name|recurse
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|timerEvent
parameter_list|)
block|{
if|if
condition|(
operator|++
name|times
operator|==
name|target
condition|)
block|{
name|killTimer
argument_list|(
name|timerEvent
operator|->
name|timerId
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|done
argument_list|()
emit|;
block|}
if|if
condition|(
name|recurse
condition|)
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
signals|signals:
name|void
name|done
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|recurringTimer_data
name|void
name|tst_QTimer
operator|::
name|recurringTimer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"interval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero timer"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-zero timer"
argument_list|)
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recurringTimer
name|void
name|tst_QTimer
operator|::
name|recurringTimer
parameter_list|()
block|{
specifier|const
name|int
name|target
init|=
literal|5
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|interval
argument_list|)
expr_stmt|;
block|{
name|RecurringTimerObject
name|object
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|object
operator|.
name|startTimer
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|object
operator|.
name|times
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|{
comment|// make sure that eventloop recursion doesn't effect timer recurrance
name|RecurringTimerObject
name|object
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|object
operator|.
name|recurse
operator|=
literal|true
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|object
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|object
operator|.
name|startTimer
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|object
operator|.
name|times
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|deleteLaterOnQTimer
name|void
name|tst_QTimer
operator|::
name|deleteLaterOnQTimer
parameter_list|()
block|{
name|QTimer
modifier|*
name|timer
init|=
operator|new
name|QTimer
decl_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|timer
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|setInterval
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|timer
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|()
expr_stmt|;
name|QPointer
argument_list|<
name|QTimer
argument_list|>
name|pointer
init|=
name|timer
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pointer
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|MOVETOTHREAD_TIMEOUT
define|#
directive|define
name|MOVETOTHREAD_TIMEOUT
value|200
end_define
begin_define
DECL|macro|MOVETOTHREAD_WAIT
define|#
directive|define
name|MOVETOTHREAD_WAIT
value|300
end_define
begin_function
DECL|function|moveToThread
name|void
name|tst_QTimer
operator|::
name|moveToThread
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
name|QSKIP
argument_list|(
literal|"Does not work reliably on Windows :("
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTimer
name|ti1
decl_stmt|;
name|QTimer
name|ti2
decl_stmt|;
name|ti1
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|ti2
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti1
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti2
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
name|QThread
name|tr
decl_stmt|;
name|ti1
operator|.
name|moveToThread
argument_list|(
operator|&
name|tr
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|ti1
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|tr
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tr
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
name|ti3
decl_stmt|;
name|ti3
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti3
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti2
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti3
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti1
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|MOVETOTHREAD_WAIT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tr
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|ti2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|QTimer
name|ti4
decl_stmt|;
name|ti4
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|ti3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ti2
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|ti3
operator|.
name|start
argument_list|(
name|MOVETOTHREAD_TIMEOUT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti4
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti2
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti3
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti2
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|ti3
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|ti1
operator|.
name|timerId
argument_list|()
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RestartedTimerFiresTooSoonObject
class|class
name|RestartedTimerFiresTooSoonObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|m_timer
name|QBasicTimer
name|m_timer
decl_stmt|;
DECL|member|m_interval
name|int
name|m_interval
decl_stmt|;
DECL|member|m_startedTime
name|QTime
name|m_startedTime
decl_stmt|;
DECL|member|eventLoop
name|QEventLoop
name|eventLoop
decl_stmt|;
DECL|function|RestartedTimerFiresTooSoonObject
specifier|inline
name|RestartedTimerFiresTooSoonObject
parameter_list|()
member_init_list|:
name|QObject
argument_list|()
member_init_list|,
name|m_interval
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|timerFired
name|void
name|timerFired
parameter_list|()
block|{
specifier|static
name|int
name|interval
init|=
literal|1000
decl_stmt|;
name|m_interval
operator|=
name|interval
expr_stmt|;
name|m_startedTime
operator|.
name|start
argument_list|()
expr_stmt|;
name|m_timer
operator|.
name|start
argument_list|(
name|interval
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// alternate between single-shot and 1 sec
name|interval
operator|=
name|interval
condition|?
literal|0
else|:
literal|1000
expr_stmt|;
block|}
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|ev
parameter_list|)
block|{
if|if
condition|(
name|ev
operator|->
name|timerId
argument_list|()
operator|!=
name|m_timer
operator|.
name|timerId
argument_list|()
condition|)
return|return;
name|m_timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|elapsed
init|=
name|m_startedTime
operator|.
name|elapsed
argument_list|()
decl_stmt|;
if|if
condition|(
name|elapsed
operator|<
name|m_interval
operator|/
literal|2
condition|)
block|{
comment|// severely too early!
name|m_timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|timerFired
argument_list|()
expr_stmt|;
comment|// don't do this forever
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|count
operator|++
operator|>
literal|20
condition|)
block|{
name|m_timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|eventLoop
operator|.
name|quit
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|restartedTimerFiresTooSoon
name|void
name|tst_QTimer
operator|::
name|restartedTimerFiresTooSoon
parameter_list|()
block|{
name|RestartedTimerFiresTooSoonObject
name|object
decl_stmt|;
name|object
operator|.
name|timerFired
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|object
operator|.
name|eventLoop
operator|.
name|exec
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LongLastingSlotClass
class|class
name|LongLastingSlotClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|LongLastingSlotClass
name|LongLastingSlotClass
parameter_list|(
name|QTimer
modifier|*
name|timer
parameter_list|)
member_init_list|:
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timer
argument_list|(
name|timer
argument_list|)
block|{}
public|public
name|slots
public|:
DECL|function|longLastingSlot
name|void
name|longLastingSlot
parameter_list|()
block|{
comment|// Don't use timers for this, because we are testing them.
name|QTime
name|time
decl_stmt|;
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|time
operator|.
name|elapsed
argument_list|()
operator|<
literal|200
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|100000
condition|;
name|c
operator|++
control|)
block|{}
comment|// Mindless looping.
block|}
if|if
condition|(
operator|++
name|count
operator|>=
literal|2
condition|)
block|{
name|timer
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
public|public:
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|timer
name|QTimer
modifier|*
name|timer
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|timerFiresOnlyOncePerProcessEvents_data
name|void
name|tst_QTimer
operator|::
name|timerFiresOnlyOncePerProcessEvents_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"interval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero timer"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-zero timer"
argument_list|)
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerFiresOnlyOncePerProcessEvents
name|void
name|tst_QTimer
operator|::
name|timerFiresOnlyOncePerProcessEvents
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|QTimer
name|t
decl_stmt|;
name|LongLastingSlotClass
name|longSlot
argument_list|(
operator|&
name|t
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|(
name|interval
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|t
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|longSlot
argument_list|,
name|SLOT
argument_list|(
name|longLastingSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Loop because there may be other events pending.
while|while
condition|(
name|longSlot
operator|.
name|count
operator|==
literal|0
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|longSlot
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TimerIdPersistsAfterThreadExitThread
class|class
name|TimerIdPersistsAfterThreadExitThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|timer
name|QTimer
modifier|*
name|timer
decl_stmt|;
DECL|member|timerId
DECL|member|returnValue
name|int
name|timerId
decl_stmt|,
name|returnValue
decl_stmt|;
DECL|function|TimerIdPersistsAfterThreadExitThread
name|TimerIdPersistsAfterThreadExitThread
parameter_list|()
member_init_list|:
name|QThread
argument_list|()
member_init_list|,
name|timer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|timerId
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|returnValue
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
DECL|function|~TimerIdPersistsAfterThreadExitThread
name|~
name|TimerIdPersistsAfterThreadExitThread
parameter_list|()
block|{
operator|delete
name|timer
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|timer
operator|=
operator|new
name|QTimer
expr_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|timerId
operator|=
name|timer
operator|->
name|timerId
argument_list|()
expr_stmt|;
name|returnValue
operator|=
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|timerIdPersistsAfterThreadExit
name|void
name|tst_QTimer
operator|::
name|timerIdPersistsAfterThreadExit
parameter_list|()
block|{
name|TimerIdPersistsAfterThreadExitThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|returnValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// even though the thread has exited, and the event dispatcher destroyed, the timer is still
comment|// "active", meaning the timer id should NOT be reused (i.e. the event dispatcher should not
comment|// have unregistered it)
name|int
name|timerId
init|=
name|thread
operator|.
name|startTimer
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|timerId
operator|&
literal|0xffffff
operator|)
operator|!=
operator|(
name|thread
operator|.
name|timerId
operator|&
literal|0xffffff
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancelLongTimer
name|void
name|tst_QTimer
operator|::
name|cancelLongTimer
parameter_list|()
block|{
name|QTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|1000
operator|*
literal|60
operator|*
literal|60
argument_list|)
expr_stmt|;
comment|//set timer for 1 hour
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|timer
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|//if the timer completes immediately with an error, then this will fail
name|timer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timer
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|singleShotStaticFunctionZeroTimeout
name|void
name|tst_QTimer
operator|::
name|singleShotStaticFunctionZeroTimeout
parameter_list|()
block|{
name|TimerHelper
name|helper
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|helper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TimerHelper
name|nhelper
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|nhelper
argument_list|,
operator|&
name|TimerHelper
operator|::
name|timeout
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nhelper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nhelper
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RecursOnTimeoutAndStopTimerTimer
class|class
name|RecursOnTimeoutAndStopTimerTimer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|one
name|QTimer
modifier|*
name|one
decl_stmt|;
DECL|member|two
name|QTimer
modifier|*
name|two
decl_stmt|;
public|public
name|slots
public|:
DECL|function|onetrigger
name|void
name|onetrigger
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
block|}
DECL|function|twotrigger
name|void
name|twotrigger
parameter_list|()
block|{
name|one
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|recurseOnTimeoutAndStopTimer
name|void
name|tst_QTimer
operator|::
name|recurseOnTimeoutAndStopTimer
parameter_list|()
block|{
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RecursOnTimeoutAndStopTimerTimer
name|t
decl_stmt|;
name|t
operator|.
name|one
operator|=
operator|new
name|QTimer
argument_list|(
operator|&
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|two
operator|=
operator|new
name|QTimer
argument_list|(
operator|&
name|t
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|t
operator|.
name|one
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|t
argument_list|,
name|SLOT
argument_list|(
name|onetrigger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|t
operator|.
name|two
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|t
argument_list|,
name|SLOT
argument_list|(
name|twotrigger
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|two
operator|->
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|one
operator|->
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|two
operator|->
name|start
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t
operator|.
name|one
operator|->
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t
operator|.
name|two
operator|->
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|CountedStruct
struct|struct
name|CountedStruct
block|{
DECL|function|CountedStruct
name|CountedStruct
parameter_list|(
name|int
modifier|*
name|count
parameter_list|,
name|QThread
modifier|*
name|t
init|=
name|Q_NULLPTR
parameter_list|)
member_init_list|:
name|count
argument_list|(
name|count
argument_list|)
member_init_list|,
name|thread
argument_list|(
name|t
argument_list|)
block|{ }
DECL|function|~CountedStruct
name|~
name|CountedStruct
parameter_list|()
block|{ }
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|()
specifier|const
block|{
operator|++
operator|(
operator|*
name|count
operator|)
expr_stmt|;
if|if
condition|(
name|thread
condition|)
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|thread
argument_list|)
expr_stmt|;
block|}
DECL|member|count
name|int
modifier|*
name|count
decl_stmt|;
DECL|member|thread
name|QThread
modifier|*
name|thread
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|_e
specifier|static
name|QScopedPointer
argument_list|<
name|QEventLoop
argument_list|>
name|_e
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_t
specifier|static
name|QThread
modifier|*
name|_t
init|=
name|Q_NULLPTR
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|StaticEventLoop
class|class
name|StaticEventLoop
block|{
public|public:
DECL|function|quitEventLoop
specifier|static
name|void
name|quitEventLoop
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|_e
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|_e
operator|->
name|quit
argument_list|()
expr_stmt|;
if|if
condition|(
name|_t
condition|)
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|_t
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|singleShotToFunctors
name|void
name|tst_QTimer
operator|::
name|singleShotToFunctors
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|_e
operator|.
name|reset
argument_list|(
operator|new
name|QEventLoop
argument_list|)
expr_stmt|;
name|QEventLoop
name|e
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|CountedStruct
argument_list|(
operator|&
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|StaticEventLoop
operator|::
name|quitEventLoop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|_e
operator|->
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QThread
name|t1
decl_stmt|;
name|QObject
name|c1
decl_stmt|;
name|c1
operator|.
name|moveToThread
argument_list|(
operator|&
name|t1
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|t1
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|e
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|c1
argument_list|,
name|CountedStruct
argument_list|(
operator|&
name|count
argument_list|,
operator|&
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|t1
operator|.
name|quit
argument_list|()
expr_stmt|;
name|t1
operator|.
name|wait
argument_list|()
expr_stmt|;
name|_t
operator|=
operator|new
name|QThread
expr_stmt|;
name|QObject
name|c2
decl_stmt|;
name|c2
operator|.
name|moveToThread
argument_list|(
name|_t
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|_t
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|e
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|_t
operator|->
name|start
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|c2
argument_list|,
operator|&
name|StaticEventLoop
operator|::
name|quitEventLoop
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|_e
operator|->
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_t
operator|->
name|quit
argument_list|()
expr_stmt|;
name|_t
operator|->
name|wait
argument_list|()
expr_stmt|;
name|_t
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|_t
operator|=
name|Q_NULLPTR
expr_stmt|;
block|{
name|QObject
name|c3
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
operator|&
name|c3
argument_list|,
name|CountedStruct
argument_list|(
operator|&
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|800
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
capture|[
modifier|&
name|count
capture|]
block|{
operator|++
name|count
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QObject
name|context
decl_stmt|;
name|QThread
name|thread
decl_stmt|;
name|context
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|e
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
operator|&
name|context
argument_list|,
capture|[
modifier|&
name|count
capture|,
modifier|&
name|thread
capture|]
block|{
operator|++
name|count
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
operator|&
name|thread
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|thread
operator|.
name|quit
argument_list|()
expr_stmt|;
name|thread
operator|.
name|wait
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|_e
operator|.
name|reset
argument_list|()
expr_stmt|;
name|_t
operator|=
name|Q_NULLPTR
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DontBlockEvents
class|class
name|DontBlockEvents
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|DontBlockEvents
parameter_list|()
constructor_decl|;
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
function_decl|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|total
name|int
name|total
decl_stmt|;
DECL|member|m_timer
name|QBasicTimer
name|m_timer
decl_stmt|;
public|public
name|slots
public|:
name|void
name|paintEvent
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|DontBlockEvents
name|DontBlockEvents
operator|::
name|DontBlockEvents
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|total
operator|=
literal|0
expr_stmt|;
comment|// need a few unrelated timers running to reproduce the bug.
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
operator|(
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
operator|)
operator|->
name|start
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|m_timer
operator|.
name|start
argument_list|(
literal|1
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|timerEvent
name|void
name|DontBlockEvents
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|m_timer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"paintEvent"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|m_timer
operator|.
name|start
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|total
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|DontBlockEvents
operator|::
name|paintEvent
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This is a regression test for QTBUG-13633, where a timer with a zero
end_comment
begin_comment
comment|// timeout that was restarted by the event handler could starve other timers.
end_comment
begin_function
DECL|function|dontBlockEvents
name|void
name|tst_QTimer
operator|::
name|dontBlockEvents
parameter_list|()
block|{
name|DontBlockEvents
name|t
decl_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|t
operator|.
name|total
operator|>
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SlotRepeater
class|class
name|SlotRepeater
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SlotRepeater
name|SlotRepeater
parameter_list|()
block|{}
public|public
name|slots
public|:
DECL|function|repeatThisSlot
name|void
name|repeatThisSlot
parameter_list|()
block|{
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|this
argument_list|,
literal|"repeatThisSlot"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|postedEventsShouldNotStarveTimers
name|void
name|tst_QTimer
operator|::
name|postedEventsShouldNotStarveTimers
parameter_list|()
block|{
name|TimerHelper
name|timerHelper
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|timerHelper
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|SlotRepeater
name|slotRepeater
decl_stmt|;
name|slotRepeater
operator|.
name|repeatThisSlot
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timerHelper
operator|.
name|count
operator|>
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTimer
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtimer.moc"
end_include
end_unit
