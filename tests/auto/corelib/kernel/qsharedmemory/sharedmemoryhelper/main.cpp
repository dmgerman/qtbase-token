begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QSharedMemory>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_function
DECL|function|set
name|void
name|set
parameter_list|(
name|QSharedMemory
modifier|&
name|sm
parameter_list|,
name|int
name|pos
parameter_list|,
name|QChar
name|value
parameter_list|)
block|{
operator|(
operator|(
name|char
operator|*
operator|)
name|sm
operator|.
name|data
argument_list|()
operator|)
index|[
name|pos
index|]
operator|=
name|value
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get
name|QChar
name|get
parameter_list|(
name|QSharedMemory
modifier|&
name|sm
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|QChar
operator|::
name|fromLatin1
argument_list|(
operator|(
operator|(
name|char
operator|*
operator|)
name|sm
operator|.
name|data
argument_list|()
operator|)
index|[
name|i
index|]
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|readonly_segfault
name|int
name|readonly_segfault
parameter_list|()
block|{
name|QSharedMemory
name|sharedMemory
decl_stmt|;
name|sharedMemory
operator|.
name|setKey
argument_list|(
literal|"readonly_segfault"
argument_list|)
expr_stmt|;
name|sharedMemory
operator|.
name|create
argument_list|(
literal|1024
argument_list|,
name|QSharedMemory
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|sharedMemory
operator|.
name|lock
argument_list|()
expr_stmt|;
name|set
argument_list|(
name|sharedMemory
argument_list|,
literal|0
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|sharedMemory
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
begin_function
DECL|function|producer
name|int
name|producer
parameter_list|()
block|{
name|QSharedMemory
name|producer
decl_stmt|;
name|producer
operator|.
name|setKey
argument_list|(
literal|"market"
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|1024
decl_stmt|;
if|if
condition|(
operator|!
name|producer
operator|.
name|create
argument_list|(
name|size
argument_list|)
condition|)
block|{
if|if
condition|(
name|producer
operator|.
name|error
argument_list|()
operator|==
name|QSharedMemory
operator|::
name|AlreadyExists
condition|)
block|{
if|if
condition|(
operator|!
name|producer
operator|.
name|attach
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not attach to"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not create"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
block|}
comment|// tell parent we're ready
comment|//qDebug("producer created and attached");
name|puts
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|producer
operator|.
name|lock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|set
argument_list|(
name|producer
argument_list|,
literal|0
argument_list|,
literal|'Q'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|producer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|5
condition|)
block|{
if|if
condition|(
operator|!
name|producer
operator|.
name|lock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|get
argument_list|(
name|producer
argument_list|,
literal|0
argument_list|)
operator|==
literal|'Q'
condition|)
block|{
if|if
condition|(
operator|!
name|producer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not unlock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//qDebug()<< "producer:"<< i);
operator|++
name|i
expr_stmt|;
name|set
argument_list|(
name|producer
argument_list|,
literal|0
argument_list|,
literal|'Q'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|producer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not unlock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|producer
operator|.
name|lock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|set
argument_list|(
name|producer
argument_list|,
literal|0
argument_list|,
literal|'E'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|producer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not unlock"
operator|<<
name|producer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
comment|//qDebug("producer done");
comment|// Sleep for a bit to let all consumers exit
name|getchar
argument_list|()
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
begin_function
DECL|function|consumer
name|int
name|consumer
parameter_list|()
block|{
name|QSharedMemory
name|consumer
decl_stmt|;
name|consumer
operator|.
name|setKey
argument_list|(
literal|"market"
argument_list|)
expr_stmt|;
comment|//qDebug("consumer starting");
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|consumer
operator|.
name|attach
argument_list|()
condition|)
block|{
if|if
condition|(
name|tries
operator|==
literal|5000
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"consumer exiting, waiting too long"
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
operator|++
name|tries
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//qDebug("consumer attached");
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|consumer
operator|.
name|lock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not lock"
operator|<<
name|consumer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|get
argument_list|(
name|consumer
argument_list|,
literal|0
argument_list|)
operator|==
literal|'Q'
condition|)
block|{
name|set
argument_list|(
name|consumer
argument_list|,
literal|0
argument_list|,
operator|++
name|i
argument_list|)
expr_stmt|;
comment|//qDebug()<< "consumer sets"<< i;
block|}
if|if
condition|(
name|get
argument_list|(
name|consumer
argument_list|,
literal|0
argument_list|)
operator|==
literal|'E'
condition|)
block|{
if|if
condition|(
operator|!
name|consumer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not unlock"
operator|<<
name|consumer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|consumer
operator|.
name|unlock
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not unlock"
operator|<<
name|consumer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|//qDebug("consumer detaching");
if|if
condition|(
operator|!
name|consumer
operator|.
name|detach
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Could not detach"
operator|<<
name|consumer
operator|.
name|key
argument_list|()
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QStringList
name|arguments
init|=
name|app
operator|.
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|qWarning
argument_list|(
literal|"Please call the helper with the function to call as argument"
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|QString
name|function
init|=
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"readonly_segfault"
argument_list|)
condition|)
return|return
name|readonly_segfault
argument_list|()
return|;
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"producer"
argument_list|)
condition|)
return|return
name|producer
argument_list|()
return|;
elseif|else
if|if
condition|(
name|function
operator|==
name|QLatin1String
argument_list|(
literal|"consumer"
argument_list|)
condition|)
return|return
name|consumer
argument_list|()
return|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Unknown function"
operator|<<
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
end_unit
