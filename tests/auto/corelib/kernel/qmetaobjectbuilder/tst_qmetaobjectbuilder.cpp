begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qlocale.h>
end_include
begin_include
include|#
directive|include
file|<private/qmetaobjectbuilder_p.h>
end_include
begin_class
DECL|class|tst_QMetaObjectBuilder
class|class
name|tst_QMetaObjectBuilder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|mocVersionCheck
parameter_list|()
function_decl|;
name|void
name|create
parameter_list|()
function_decl|;
name|void
name|className
parameter_list|()
function_decl|;
name|void
name|superClass
parameter_list|()
function_decl|;
name|void
name|flags
parameter_list|()
function_decl|;
name|void
name|method
parameter_list|()
function_decl|;
name|void
name|slot
parameter_list|()
function_decl|;
name|void
name|signal
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|property
parameter_list|()
function_decl|;
name|void
name|notifySignal
parameter_list|()
function_decl|;
name|void
name|enumerator
parameter_list|()
function_decl|;
name|void
name|classInfo
parameter_list|()
function_decl|;
name|void
name|relatedMetaObject
parameter_list|()
function_decl|;
name|void
name|staticMetacall
parameter_list|()
function_decl|;
name|void
name|copyMetaObject
parameter_list|()
function_decl|;
name|void
name|serialize
parameter_list|()
function_decl|;
name|void
name|removeNotifySignal
parameter_list|()
function_decl|;
private|private:
specifier|static
name|bool
name|checkForSideEffects
parameter_list|(
specifier|const
name|QMetaObjectBuilder
modifier|&
name|builder
parameter_list|,
name|QMetaObjectBuilder
operator|::
name|AddMembers
name|members
parameter_list|)
function_decl|;
specifier|static
name|bool
name|sameMetaObject
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|meta1
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta2
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Dummy class that has something of every type of thing moc can generate.
end_comment
begin_class
DECL|class|SomethingOfEverything
class|class
name|SomethingOfEverything
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"ci_foo"
argument_list|,
literal|"ABC"
argument_list|)
name|Q_CLASSINFO
argument_list|(
literal|"ci_bar"
argument_list|,
literal|"DEF"
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|prop
name|READ
name|prop
name|WRITE
name|setProp
name|NOTIFY
name|propChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|prop2
name|READ
name|prop
name|WRITE
name|setProp
argument_list|)
name|Q_PROPERTY
argument_list|(
name|SomethingEnum
name|eprop
name|READ
name|eprop
argument_list|)
name|Q_PROPERTY
argument_list|(
name|SomethingFlagEnum
name|fprop
name|READ
name|fprop
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QLocale
operator|::
name|Language
name|language
name|READ
name|language
argument_list|)
name|Q_ENUMS
argument_list|(
name|SomethingEnum
argument_list|)
name|Q_FLAGS
argument_list|(
name|SomethingFlagEnum
argument_list|)
decl|public
range|:
DECL|function|SomethingOfEverything
name|Q_INVOKABLE
name|SomethingOfEverything
argument_list|()
block|{}
DECL|function|~SomethingOfEverything
operator|~
name|SomethingOfEverything
argument_list|()
block|{}
expr|enum
DECL|enum|SomethingEnum
name|SomethingEnum
block|{
DECL|enumerator|GHI
name|GHI
block|,
DECL|enumerator|JKL
name|JKL
operator|=
literal|10
block|}
decl_stmt|;
DECL|enum|SomethingFlagEnum
enum|enum
name|SomethingFlagEnum
block|{
DECL|enumerator|XYZ
name|XYZ
init|=
literal|1
block|,
DECL|enumerator|UVW
name|UVW
init|=
literal|8
block|}
enum|;
DECL|function|method1
name|Q_INVOKABLE
name|Q_SCRIPTABLE
name|void
name|method1
parameter_list|()
block|{}
DECL|function|prop
name|QString
name|prop
parameter_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|setProp
name|void
name|setProp
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
DECL|function|eprop
name|SomethingOfEverything
operator|::
name|SomethingEnum
name|eprop
parameter_list|()
specifier|const
block|{
return|return
name|GHI
return|;
block|}
DECL|function|fprop
name|SomethingOfEverything
operator|::
name|SomethingFlagEnum
name|fprop
parameter_list|()
specifier|const
block|{
return|return
name|XYZ
return|;
block|}
DECL|function|language
name|QLocale
operator|::
name|Language
name|language
parameter_list|()
specifier|const
block|{
return|return
name|QLocale
operator|::
name|English
return|;
block|}
public|public
name|slots
public|:
DECL|function|slot1
name|void
name|slot1
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{}
DECL|function|slot2
name|void
name|slot2
parameter_list|(
name|int
parameter_list|,
specifier|const
name|QString
modifier|&
parameter_list|)
block|{}
private|private
name|slots
private|:
DECL|function|slot3
name|void
name|slot3
parameter_list|()
block|{}
protected|protected
name|slots
protected|:
DECL|function|slot4
name|Q_SCRIPTABLE
name|void
name|slot4
parameter_list|(
name|int
parameter_list|)
block|{}
DECL|function|slot5
name|void
name|slot5
parameter_list|(
name|int
name|a
parameter_list|,
specifier|const
name|QString
modifier|&
name|b
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|sig1
parameter_list|()
function_decl|;
name|void
name|sig2
parameter_list|(
name|int
name|x
parameter_list|,
specifier|const
name|QString
modifier|&
name|y
parameter_list|)
function_decl|;
name|void
name|propChanged
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|mocVersionCheck
name|void
name|tst_QMetaObjectBuilder
operator|::
name|mocVersionCheck
parameter_list|()
block|{
comment|// This test will fail when the moc version number is changed.
comment|// It is intended as a reminder to also update QMetaObjectBuilder
comment|// whenenver moc changes.  Once QMetaObjectBuilder has been
comment|// updated, this test can be changed to check for the next version.
name|int
name|version
init|=
name|int
argument_list|(
name|QObject
operator|::
name|staticMetaObject
operator|.
name|d
operator|.
name|data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|version
operator|==
literal|4
operator|||
name|version
operator|==
literal|5
operator|||
name|version
operator|==
literal|6
argument_list|)
expr_stmt|;
name|version
operator|=
name|int
argument_list|(
name|staticMetaObject
operator|.
name|d
operator|.
name|data
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|version
operator|==
literal|4
operator|||
name|version
operator|==
literal|5
operator|||
name|version
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|create
name|void
name|tst_QMetaObjectBuilder
operator|::
name|create
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|className
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
operator|==
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumeratorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|relatedMetaObjectCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|staticMetacallFunction
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|className
name|void
name|tst_QMetaObjectBuilder
operator|::
name|className
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Change the class name.
name|builder
operator|.
name|setClassName
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|className
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change it again.
name|builder
operator|.
name|setClassName
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|className
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clone the class name off a static QMetaObject.
name|builder
operator|.
name|addMetaObject
argument_list|(
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|,
name|QMetaObjectBuilder
operator|::
name|ClassName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|className
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QObject"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|ClassName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|superClass
name|void
name|tst_QMetaObjectBuilder
operator|::
name|superClass
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Change the super class.
name|builder
operator|.
name|setSuperClass
argument_list|(
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
operator|==
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
expr_stmt|;
comment|// Change it again.
name|builder
operator|.
name|setSuperClass
argument_list|(
operator|&
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
operator|==
operator|&
name|staticMetaObject
argument_list|)
expr_stmt|;
comment|// Clone the super class off a static QMetaObject.
name|builder
operator|.
name|addMetaObject
argument_list|(
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|,
name|QMetaObjectBuilder
operator|::
name|SuperClass
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addMetaObject
argument_list|(
operator|&
name|staticMetaObject
argument_list|,
name|QMetaObjectBuilder
operator|::
name|SuperClass
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
operator|==
name|staticMetaObject
operator|.
name|superClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|SuperClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flags
name|void
name|tst_QMetaObjectBuilder
operator|::
name|flags
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Check default
name|QVERIFY
argument_list|(
name|builder
operator|.
name|flags
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Set flags
name|builder
operator|.
name|setFlags
argument_list|(
name|QMetaObjectBuilder
operator|::
name|DynamicMetaObject
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|flags
argument_list|()
operator|==
name|QMetaObjectBuilder
operator|::
name|DynamicMetaObject
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|method
name|void
name|tst_QMetaObjectBuilder
operator|::
name|method
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Check null method
name|QMetaMethodBuilder
name|nullMethod
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullMethod
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullMethod
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullMethod
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullMethod
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullMethod
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullMethod
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullMethod
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullMethod
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Add a method and check its attributes.
name|QMetaMethodBuilder
name|method1
init|=
name|builder
operator|.
name|addMethod
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another method and check again.
name|QMetaMethodBuilder
name|method2
init|=
name|builder
operator|.
name|addMethod
argument_list|(
literal|"bar(QString)"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Modify the attributes on method1.
name|method1
operator|.
name|setReturnType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|method1
operator|.
name|setParameterNames
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|method1
operator|.
name|setTag
argument_list|(
literal|"tag"
argument_list|)
expr_stmt|;
name|method1
operator|.
name|setAccess
argument_list|(
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|method1
operator|.
name|setAttributes
argument_list|(
literal|42
argument_list|)
expr_stmt|;
comment|// Check that method1 is changed, but method2 is not.
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Modify the attributes on method2.
name|method2
operator|.
name|setReturnType
argument_list|(
literal|"QString"
argument_list|)
expr_stmt|;
name|method2
operator|.
name|setParameterNames
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|method2
operator|.
name|setTag
argument_list|(
literal|"Q_FOO"
argument_list|)
expr_stmt|;
name|method2
operator|.
name|setAccess
argument_list|(
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|method2
operator|.
name|setAttributes
argument_list|(
literal|24
argument_list|)
expr_stmt|;
comment|// This time check that only method2 changed.
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Q_FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Remove method1 and check that method2 becomes index 0.
name|builder
operator|.
name|removeMethod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|method2
operator|=
name|builder
operator|.
name|method
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Method
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Q_FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup again.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfMethod
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|method
argument_list|(
literal|0
argument_list|)
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|method
argument_list|(
literal|9
argument_list|)
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Methods
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slot
name|void
name|tst_QMetaObjectBuilder
operator|::
name|slot
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add a slot and check its attributes.
name|QMetaMethodBuilder
name|method1
init|=
name|builder
operator|.
name|addSlot
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Slot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another slot and check again.
name|QMetaMethodBuilder
name|method2
init|=
name|builder
operator|.
name|addSlot
argument_list|(
literal|"bar(QString)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Slot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSlot
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSlot
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSlot
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Methods
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signal
name|void
name|tst_QMetaObjectBuilder
operator|::
name|signal
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add a signal and check its attributes.
name|QMetaMethodBuilder
name|method1
init|=
name|builder
operator|.
name|addSignal
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another signal and check again.
name|QMetaMethodBuilder
name|method2
init|=
name|builder
operator|.
name|addSignal
argument_list|(
literal|"bar(QString)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|method2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSignal
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSignal
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfSignal
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Methods
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QMetaObjectBuilder
operator|::
name|constructor
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add a constructor and check its attributes.
name|QMetaMethodBuilder
name|ctor1
init|=
name|builder
operator|.
name|addConstructor
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another constructor and check again.
name|QMetaMethodBuilder
name|ctor2
init|=
name|builder
operator|.
name|addConstructor
argument_list|(
literal|"bar(QString)"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructor
argument_list|(
literal|1
argument_list|)
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructor
argument_list|(
literal|9
argument_list|)
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Modify the attributes on ctor1.
name|ctor1
operator|.
name|setReturnType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|ctor1
operator|.
name|setParameterNames
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|ctor1
operator|.
name|setTag
argument_list|(
literal|"tag"
argument_list|)
expr_stmt|;
name|ctor1
operator|.
name|setAccess
argument_list|(
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|ctor1
operator|.
name|setAttributes
argument_list|(
literal|42
argument_list|)
expr_stmt|;
comment|// Check that ctor1 is changed, but ctor2 is not.
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|returnType
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|parameterNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|tag
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Modify the attributes on ctor2.
name|ctor2
operator|.
name|setReturnType
argument_list|(
literal|"QString"
argument_list|)
expr_stmt|;
name|ctor2
operator|.
name|setParameterNames
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|ctor2
operator|.
name|setTag
argument_list|(
literal|"Q_FOO"
argument_list|)
expr_stmt|;
name|ctor2
operator|.
name|setAccess
argument_list|(
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|ctor2
operator|.
name|setAttributes
argument_list|(
literal|24
argument_list|)
expr_stmt|;
comment|// This time check that only ctor2 changed.
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo(QString,int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"tag"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor1
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Private
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|attributes
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Q_FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Remove ctor1 and check that ctor2 becomes index 0.
name|builder
operator|.
name|removeConstructor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ctor2
operator|=
name|builder
operator|.
name|constructor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|tag
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Q_FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ctor2
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Protected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|attributes
argument_list|()
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ctor2
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup again.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"bar(QString)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfConstructor
argument_list|(
literal|"baz()"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Add constructor from prototype
name|QMetaMethod
name|prototype
init|=
name|SomethingOfEverything
operator|::
name|staticMetaObject
operator|.
name|constructor
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QMetaMethodBuilder
name|prototypeConstructor
init|=
name|builder
operator|.
name|addMethod
argument_list|(
name|prototype
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|constructorCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prototypeConstructor
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"SomethingOfEverything()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prototypeConstructor
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prototypeConstructor
operator|.
name|returnType
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prototypeConstructor
operator|.
name|access
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prototypeConstructor
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Constructors
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|property
name|void
name|tst_QMetaObjectBuilder
operator|::
name|property
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Null property builder
name|QMetaPropertyBuilder
name|nullProp
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullProp
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullProp
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nullProp
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullProp
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Add a property and check its attributes.
name|QMetaPropertyBuilder
name|prop1
init|=
name|builder
operator|.
name|addProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"const QString&"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prop1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop1
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another property and check again.
name|QMetaPropertyBuilder
name|prop2
init|=
name|builder
operator|.
name|addProperty
argument_list|(
literal|"bar"
argument_list|,
literal|"int"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|property
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|property
argument_list|(
literal|9
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Modify the attributes on prop1.
name|prop1
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setResettable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setDesignable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setScriptable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setUser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setStdCppSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setEnumOrFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setConstant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|prop1
operator|.
name|setFinal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Check that prop1 is changed, but prop2 is not.
name|QCOMPARE
argument_list|(
name|prop1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop1
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop1
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop1
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove prop1 and check that prop2 becomes index 0.
name|builder
operator|.
name|removeProperty
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|prop2
operator|=
name|builder
operator|.
name|property
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|type
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop2
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|hasStdCppSet
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isEnumOrFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isConstant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop2
operator|.
name|isFinal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop2
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup again.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfProperty
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check for side-effects between the flags on prop2.
comment|// Setting a flag to true shouldn't set any of the others to true.
comment|// This checks for cut-and-paste bugs in the implementation where
comment|// the flag code was pasted but the flag name was not changed.
DECL|macro|CLEAR_FLAGS
define|#
directive|define
name|CLEAR_FLAGS
parameter_list|()
define|\
value|do { \             prop2.setReadable(false); \             prop2.setWritable(false); \             prop2.setResettable(false); \             prop2.setDesignable(false); \             prop2.setScriptable(false); \             prop2.setStored(false); \             prop2.setEditable(false); \             prop2.setUser(false); \             prop2.setStdCppSet(false); \             prop2.setEnumOrFlag(false); \             prop2.setConstant(false); \             prop2.setFinal(false); \         } while (0)
DECL|macro|COUNT_FLAGS
define|#
directive|define
name|COUNT_FLAGS
parameter_list|()
define|\
value|((prop2.isReadable() ? 1 : 0) + \          (prop2.isWritable() ? 1 : 0) + \          (prop2.isResettable() ? 1 : 0) + \          (prop2.isDesignable() ? 1 : 0) + \          (prop2.isScriptable() ? 1 : 0) + \          (prop2.isStored() ? 1 : 0) + \          (prop2.isEditable() ? 1 : 0) + \          (prop2.isUser() ? 1 : 0) + \          (prop2.hasStdCppSet() ? 1 : 0) + \          (prop2.isEnumOrFlag() ? 1 : 0) + \          (prop2.isConstant() ? 1 : 0) + \          (prop2.isFinal() ? 1 : 0))
DECL|macro|CHECK_FLAG
define|#
directive|define
name|CHECK_FLAG
parameter_list|(
name|setFunc
parameter_list|,
name|isFunc
parameter_list|)
define|\
value|do { \             CLEAR_FLAGS(); \             QCOMPARE(COUNT_FLAGS(), 0); \             prop2.setFunc(true); \             QVERIFY(prop2.isFunc()); \             QCOMPARE(COUNT_FLAGS(), 1); \         } while (0)
name|CHECK_FLAG
argument_list|(
name|setReadable
argument_list|,
name|isReadable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setWritable
argument_list|,
name|isWritable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setResettable
argument_list|,
name|isResettable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setDesignable
argument_list|,
name|isDesignable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setScriptable
argument_list|,
name|isScriptable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setStored
argument_list|,
name|isStored
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setEditable
argument_list|,
name|isEditable
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setUser
argument_list|,
name|isUser
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setStdCppSet
argument_list|,
name|hasStdCppSet
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setEnumOrFlag
argument_list|,
name|isEnumOrFlag
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setConstant
argument_list|,
name|isConstant
argument_list|)
expr_stmt|;
name|CHECK_FLAG
argument_list|(
name|setFinal
argument_list|,
name|isFinal
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Properties
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add property from prototype
name|QMetaProperty
name|prototype
init|=
name|SomethingOfEverything
operator|::
name|staticMetaObject
operator|.
name|property
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|prototype
operator|.
name|name
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|QMetaPropertyBuilder
name|prototypeProp
init|=
name|builder
operator|.
name|addProperty
argument_list|(
name|prototype
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prototypeProp
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prototypeProp
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prototypeProp
operator|.
name|notifySignal
argument_list|()
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"propChanged(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|method
argument_list|(
literal|0
argument_list|)
operator|.
name|signature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"propChanged(QString)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notifySignal
name|void
name|tst_QMetaObjectBuilder
operator|::
name|notifySignal
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
name|QMetaPropertyBuilder
name|prop
init|=
name|builder
operator|.
name|addProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"const QString&"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addSlot
argument_list|(
literal|"setFoo(QString)"
argument_list|)
expr_stmt|;
name|QMetaMethodBuilder
name|notify
init|=
name|builder
operator|.
name|addSignal
argument_list|(
literal|"fooChanged(QString)"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setNotifySignal
argument_list|(
name|notify
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setNotifySignal
argument_list|(
name|QMetaMethodBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prop
operator|.
name|setNotifySignal
argument_list|(
name|notify
argument_list|)
expr_stmt|;
name|prop
operator|.
name|removeNotifySignal
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed except methods and properties.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Methods
operator||
name|QMetaObjectBuilder
operator|::
name|Properties
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enumerator
name|void
name|tst_QMetaObjectBuilder
operator|::
name|enumerator
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add an enumerator and check its attributes.
name|QMetaEnumBuilder
name|enum1
init|=
name|builder
operator|.
name|addEnumerator
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|enum1
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumeratorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add another enumerator and check again.
name|QMetaEnumBuilder
name|enum2
init|=
name|builder
operator|.
name|addEnumerator
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|enum2
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumeratorCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumerator
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumerator
argument_list|(
literal|9
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Modify the attributes on enum1.
name|enum1
operator|.
name|setIsFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|addKey
argument_list|(
literal|"ABC"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|addKey
argument_list|(
literal|"DEF"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|addKey
argument_list|(
literal|"GHI"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Check that enum1 is changed, but enum2 is not.
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum1
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"DEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"GHI"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|enum2
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Modify the attributes on enum2.
name|enum2
operator|.
name|setIsFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|addKey
argument_list|(
literal|"XYZ"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|addKey
argument_list|(
literal|"UVW"
argument_list|,
literal|19
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// This time check that only method2 changed.
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum1
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"DEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"GHI"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum2
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"XYZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"UVW"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// Remove enum1 key
name|enum1
operator|.
name|removeKey
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum1
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"DEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum1
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum2
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"XYZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"UVW"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// Remove enum1 and check that enum2 becomes index 0.
name|builder
operator|.
name|removeEnumerator
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|enumeratorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|enum2
operator|=
name|builder
operator|.
name|enumerator
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|enum2
operator|.
name|isFlag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"XYZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"UVW"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|enum2
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup again.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfEnumerator
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|Enumerators
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|classInfo
name|void
name|tst_QMetaObjectBuilder
operator|::
name|classInfo
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add two items of class information and check their attributes.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|addClassInfo
argument_list|(
literal|"foo"
argument_list|,
literal|"value1"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|addClassInfo
argument_list|(
literal|"bar"
argument_list|,
literal|"value2"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoValue
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoValue
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoName
argument_list|(
literal|9
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoValue
argument_list|(
literal|9
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Remove the first one and check again.
name|builder
operator|.
name|removeClassInfo
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoValue
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|classInfoCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Perform index-based lookup again.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|indexOfClassInfo
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|ClassInfos
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|relatedMetaObject
name|void
name|tst_QMetaObjectBuilder
operator|::
name|relatedMetaObject
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
comment|// Add two related meta objects and check their attributes.
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|addRelatedMetaObject
argument_list|(
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|addRelatedMetaObject
argument_list|(
operator|&
name|staticMetaObject
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|relatedMetaObject
argument_list|(
literal|0
argument_list|)
operator|==
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|relatedMetaObject
argument_list|(
literal|1
argument_list|)
operator|==
operator|&
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|relatedMetaObjectCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Remove the first one and check again.
name|builder
operator|.
name|removeRelatedMetaObject
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|relatedMetaObject
argument_list|(
literal|0
argument_list|)
operator|==
operator|&
name|staticMetaObject
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|relatedMetaObjectCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Check that nothing else changed.
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|RelatedMetaObjects
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|smetacall
specifier|static
name|void
name|smetacall
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QMetaObject
operator|::
name|Call
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
block|{
return|return;
block|}
end_function
begin_function
DECL|function|staticMetacall
name|void
name|tst_QMetaObjectBuilder
operator|::
name|staticMetacall
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|builder
operator|.
name|staticMetacallFunction
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStaticMetacallFunction
argument_list|(
name|smetacall
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|builder
operator|.
name|staticMetacallFunction
argument_list|()
operator|==
name|smetacall
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|checkForSideEffects
argument_list|(
name|builder
argument_list|,
name|QMetaObjectBuilder
operator|::
name|StaticMetacall
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Copy the entire contents of a static QMetaObject and then check
end_comment
begin_comment
comment|// that QMetaObjectBuilder will produce an exact copy as output.
end_comment
begin_function
DECL|function|copyMetaObject
name|void
name|tst_QMetaObjectBuilder
operator|::
name|copyMetaObject
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
argument_list|(
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
decl_stmt|;
name|QMetaObject
modifier|*
name|meta
init|=
name|builder
operator|.
name|toMetaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sameMetaObject
argument_list|(
name|meta
argument_list|,
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|)
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|QMetaObjectBuilder
name|builder2
argument_list|(
operator|&
name|staticMetaObject
argument_list|)
decl_stmt|;
name|meta
operator|=
name|builder2
operator|.
name|toMetaObject
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sameMetaObject
argument_list|(
name|meta
argument_list|,
operator|&
name|staticMetaObject
argument_list|)
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|QMetaObjectBuilder
name|builder3
argument_list|(
operator|&
name|SomethingOfEverything
operator|::
name|staticMetaObject
argument_list|)
decl_stmt|;
name|meta
operator|=
name|builder3
operator|.
name|toMetaObject
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sameMetaObject
argument_list|(
name|meta
argument_list|,
operator|&
name|SomethingOfEverything
operator|::
name|staticMetaObject
argument_list|)
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Serialize and deserialize a meta object and check that
end_comment
begin_comment
comment|// it round-trips to the exact same value.
end_comment
begin_function
DECL|function|serialize
name|void
name|tst_QMetaObjectBuilder
operator|::
name|serialize
parameter_list|()
block|{
comment|// Full QMetaObjectBuilder
block|{
name|QMetaObjectBuilder
name|builder
argument_list|(
operator|&
name|SomethingOfEverything
operator|::
name|staticMetaObject
argument_list|)
decl_stmt|;
name|QMetaObject
modifier|*
name|meta
init|=
name|builder
operator|.
name|toMetaObject
argument_list|()
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
decl_stmt|;
name|builder
operator|.
name|serialize
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|QMetaObjectBuilder
name|builder2
decl_stmt|;
name|QDataStream
name|stream2
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|QByteArray
argument_list|,
specifier|const
name|QMetaObject
modifier|*
argument_list|>
name|references
decl_stmt|;
name|references
operator|.
name|insert
argument_list|(
name|QByteArray
argument_list|(
literal|"QLocale"
argument_list|)
argument_list|,
operator|&
name|QLocale
operator|::
name|staticMetaObject
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|deserialize
argument_list|(
name|stream2
argument_list|,
name|references
argument_list|)
expr_stmt|;
name|builder2
operator|.
name|setStaticMetacallFunction
argument_list|(
name|builder
operator|.
name|staticMetacallFunction
argument_list|()
argument_list|)
expr_stmt|;
name|QMetaObject
modifier|*
name|meta2
init|=
name|builder2
operator|.
name|toMetaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sameMetaObject
argument_list|(
name|meta
argument_list|,
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|qFree
argument_list|(
name|meta2
argument_list|)
expr_stmt|;
block|}
comment|// Partial QMetaObjectBuilder
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
name|builder
operator|.
name|setClassName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
decl_stmt|;
name|builder
operator|.
name|serialize
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|QMetaObjectBuilder
name|builder2
decl_stmt|;
name|QDataStream
name|stream2
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|builder2
operator|.
name|deserialize
argument_list|(
name|stream2
argument_list|,
name|QMap
argument_list|<
name|QByteArray
argument_list|,
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|superClass
argument_list|()
argument_list|,
name|builder2
operator|.
name|superClass
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|className
argument_list|()
argument_list|,
name|builder2
operator|.
name|className
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|propertyCount
argument_list|()
argument_list|,
name|builder2
operator|.
name|propertyCount
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|property
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|builder2
operator|.
name|property
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|builder
operator|.
name|property
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|builder2
operator|.
name|property
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Check that removing a method updates notify signals appropriately
end_comment
begin_function
DECL|function|removeNotifySignal
name|void
name|tst_QMetaObjectBuilder
operator|::
name|removeNotifySignal
parameter_list|()
block|{
name|QMetaObjectBuilder
name|builder
decl_stmt|;
name|builder
operator|.
name|addSignal
argument_list|(
literal|"foo(const QString&, int)"
argument_list|)
expr_stmt|;
name|QMetaMethodBuilder
name|method
init|=
name|builder
operator|.
name|addSignal
argument_list|(
literal|"bar(QString)"
argument_list|)
decl_stmt|;
comment|// Setup property
name|QMetaPropertyBuilder
name|prop
init|=
name|builder
operator|.
name|addProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"const QString&"
argument_list|)
decl_stmt|;
name|prop
operator|.
name|setNotifySignal
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Remove non-notify signal
name|builder
operator|.
name|removeMethod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Remove notify signal
name|builder
operator|.
name|removeMethod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|prop
operator|.
name|hasNotifySignal
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Check that the only changes to a "builder" relative to the default
end_comment
begin_comment
comment|// state is specified by "members".
end_comment
begin_function
DECL|function|checkForSideEffects
name|bool
name|tst_QMetaObjectBuilder
operator|::
name|checkForSideEffects
parameter_list|(
specifier|const
name|QMetaObjectBuilder
modifier|&
name|builder
parameter_list|,
name|QMetaObjectBuilder
operator|::
name|AddMembers
name|members
parameter_list|)
block|{
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|ClassName
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|builder
operator|.
name|className
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|SuperClass
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|superClass
argument_list|()
operator|!=
operator|&
name|QObject
operator|::
name|staticMetaObject
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|Methods
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|methodCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|Constructors
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|constructorCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|Properties
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|propertyCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|Enumerators
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|enumeratorCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|ClassInfos
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|classInfoCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|RelatedMetaObjects
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|relatedMetaObjectCount
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|(
name|members
operator|&
name|QMetaObjectBuilder
operator|::
name|StaticMetacall
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|builder
operator|.
name|staticMetacallFunction
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|sameMethod
specifier|static
name|bool
name|sameMethod
parameter_list|(
specifier|const
name|QMetaMethod
modifier|&
name|method1
parameter_list|,
specifier|const
name|QMetaMethod
modifier|&
name|method2
parameter_list|)
block|{
if|if
condition|(
name|QByteArray
argument_list|(
name|method1
operator|.
name|signature
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|method2
operator|.
name|signature
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|QByteArray
argument_list|(
name|method1
operator|.
name|typeName
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|method2
operator|.
name|typeName
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|method1
operator|.
name|parameterNames
argument_list|()
operator|!=
name|method2
operator|.
name|parameterNames
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|QByteArray
argument_list|(
name|method1
operator|.
name|tag
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|method2
operator|.
name|tag
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|method1
operator|.
name|access
argument_list|()
operator|!=
name|method2
operator|.
name|access
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|method1
operator|.
name|methodType
argument_list|()
operator|!=
name|method2
operator|.
name|methodType
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|method1
operator|.
name|attributes
argument_list|()
operator|!=
name|method2
operator|.
name|attributes
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|sameProperty
specifier|static
name|bool
name|sameProperty
parameter_list|(
specifier|const
name|QMetaProperty
modifier|&
name|prop1
parameter_list|,
specifier|const
name|QMetaProperty
modifier|&
name|prop2
parameter_list|)
block|{
if|if
condition|(
name|QByteArray
argument_list|(
name|prop1
operator|.
name|name
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|prop2
operator|.
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|QByteArray
argument_list|(
name|prop1
operator|.
name|typeName
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|prop2
operator|.
name|typeName
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|prop1
operator|.
name|isReadable
argument_list|()
operator|!=
name|prop2
operator|.
name|isReadable
argument_list|()
operator|||
name|prop1
operator|.
name|isWritable
argument_list|()
operator|!=
name|prop2
operator|.
name|isWritable
argument_list|()
operator|||
name|prop1
operator|.
name|isResettable
argument_list|()
operator|!=
name|prop2
operator|.
name|isResettable
argument_list|()
operator|||
name|prop1
operator|.
name|isDesignable
argument_list|()
operator|!=
name|prop2
operator|.
name|isDesignable
argument_list|()
operator|||
name|prop1
operator|.
name|isScriptable
argument_list|()
operator|!=
name|prop2
operator|.
name|isScriptable
argument_list|()
operator|||
name|prop1
operator|.
name|isStored
argument_list|()
operator|!=
name|prop2
operator|.
name|isStored
argument_list|()
operator|||
name|prop1
operator|.
name|isEditable
argument_list|()
operator|!=
name|prop2
operator|.
name|isEditable
argument_list|()
operator|||
name|prop1
operator|.
name|isUser
argument_list|()
operator|!=
name|prop2
operator|.
name|isUser
argument_list|()
operator|||
name|prop1
operator|.
name|isFlagType
argument_list|()
operator|!=
name|prop2
operator|.
name|isFlagType
argument_list|()
operator|||
name|prop1
operator|.
name|isEnumType
argument_list|()
operator|!=
name|prop2
operator|.
name|isEnumType
argument_list|()
operator|||
name|prop1
operator|.
name|hasNotifySignal
argument_list|()
operator|!=
name|prop2
operator|.
name|hasNotifySignal
argument_list|()
operator|||
name|prop1
operator|.
name|hasStdCppSet
argument_list|()
operator|!=
name|prop2
operator|.
name|hasStdCppSet
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|prop1
operator|.
name|hasNotifySignal
argument_list|()
condition|)
block|{
if|if
condition|(
name|prop1
operator|.
name|notifySignalIndex
argument_list|()
operator|!=
name|prop2
operator|.
name|notifySignalIndex
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|sameEnumerator
specifier|static
name|bool
name|sameEnumerator
parameter_list|(
specifier|const
name|QMetaEnum
modifier|&
name|enum1
parameter_list|,
specifier|const
name|QMetaEnum
modifier|&
name|enum2
parameter_list|)
block|{
if|if
condition|(
name|QByteArray
argument_list|(
name|enum1
operator|.
name|name
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|enum2
operator|.
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|enum1
operator|.
name|isFlag
argument_list|()
operator|!=
name|enum2
operator|.
name|isFlag
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|enum1
operator|.
name|keyCount
argument_list|()
operator|!=
name|enum2
operator|.
name|keyCount
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|enum1
operator|.
name|keyCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|QByteArray
argument_list|(
name|enum1
operator|.
name|key
argument_list|(
name|index
argument_list|)
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|enum2
operator|.
name|key
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|enum1
operator|.
name|value
argument_list|(
name|index
argument_list|)
operator|!=
name|enum2
operator|.
name|value
argument_list|(
name|index
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|QByteArray
argument_list|(
name|enum1
operator|.
name|scope
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|enum2
operator|.
name|scope
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Determine if two meta objects are identical.
end_comment
begin_function
DECL|function|sameMetaObject
name|bool
name|tst_QMetaObjectBuilder
operator|::
name|sameMetaObject
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|meta1
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta2
parameter_list|)
block|{
name|int
name|index
decl_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|meta1
operator|->
name|className
argument_list|()
argument_list|,
name|meta2
operator|->
name|className
argument_list|()
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|meta1
operator|->
name|superClass
argument_list|()
operator|!=
name|meta2
operator|->
name|superClass
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|meta1
operator|->
name|constructorCount
argument_list|()
operator|!=
name|meta2
operator|->
name|constructorCount
argument_list|()
operator|||
name|meta1
operator|->
name|methodCount
argument_list|()
operator|!=
name|meta2
operator|->
name|methodCount
argument_list|()
operator|||
name|meta1
operator|->
name|enumeratorCount
argument_list|()
operator|!=
name|meta2
operator|->
name|enumeratorCount
argument_list|()
operator|||
name|meta1
operator|->
name|propertyCount
argument_list|()
operator|!=
name|meta2
operator|->
name|propertyCount
argument_list|()
operator|||
name|meta1
operator|->
name|classInfoCount
argument_list|()
operator|!=
name|meta2
operator|->
name|classInfoCount
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|meta1
operator|->
name|constructorCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
operator|!
name|sameMethod
argument_list|(
name|meta1
operator|->
name|constructor
argument_list|(
name|index
argument_list|)
argument_list|,
name|meta2
operator|->
name|constructor
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|meta1
operator|->
name|methodCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
operator|!
name|sameMethod
argument_list|(
name|meta1
operator|->
name|method
argument_list|(
name|index
argument_list|)
argument_list|,
name|meta2
operator|->
name|method
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|meta1
operator|->
name|propertyCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
operator|!
name|sameProperty
argument_list|(
name|meta1
operator|->
name|property
argument_list|(
name|index
argument_list|)
argument_list|,
name|meta2
operator|->
name|property
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|meta1
operator|->
name|enumeratorCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
operator|!
name|sameEnumerator
argument_list|(
name|meta1
operator|->
name|enumerator
argument_list|(
name|index
argument_list|)
argument_list|,
name|meta2
operator|->
name|enumerator
argument_list|(
name|index
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
for|for
control|(
name|index
operator|=
literal|0
init|;
name|index
operator|<
name|meta1
operator|->
name|classInfoCount
argument_list|()
condition|;
operator|++
name|index
control|)
block|{
if|if
condition|(
name|QByteArray
argument_list|(
name|meta1
operator|->
name|classInfo
argument_list|(
name|index
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|meta2
operator|->
name|classInfo
argument_list|(
name|index
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|QByteArray
argument_list|(
name|meta1
operator|->
name|classInfo
argument_list|(
name|index
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
operator|!=
name|QByteArray
argument_list|(
name|meta2
operator|->
name|classInfo
argument_list|(
name|index
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
specifier|const
name|QMetaObject
modifier|*
modifier|*
name|objects1
init|=
literal|0
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
modifier|*
name|objects2
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|meta1
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|==
name|meta2
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|meta1
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|>=
literal|2
condition|)
block|{
name|QMetaObjectExtraData
modifier|*
name|extra1
init|=
operator|(
name|QMetaObjectExtraData
operator|*
operator|)
operator|(
name|meta1
operator|->
name|d
operator|.
name|extradata
operator|)
decl_stmt|;
name|QMetaObjectExtraData
modifier|*
name|extra2
init|=
operator|(
name|QMetaObjectExtraData
operator|*
operator|)
operator|(
name|meta2
operator|->
name|d
operator|.
name|extradata
operator|)
decl_stmt|;
if|if
condition|(
name|extra1
operator|&&
operator|!
name|extra2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|extra2
operator|&&
operator|!
name|extra1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|extra1
operator|&&
name|extra2
condition|)
block|{
if|if
condition|(
name|extra1
operator|->
name|static_metacall
operator|!=
name|extra2
operator|->
name|static_metacall
condition|)
return|return
literal|false
return|;
name|objects1
operator|=
name|extra1
operator|->
name|objects
expr_stmt|;
name|objects2
operator|=
name|extra1
operator|->
name|objects
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|meta1
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|==
name|meta2
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|&&
name|meta1
operator|->
name|d
operator|.
name|data
index|[
literal|0
index|]
operator|==
literal|1
condition|)
block|{
name|objects1
operator|=
operator|(
specifier|const
name|QMetaObject
operator|*
operator|*
operator|)
operator|(
name|meta1
operator|->
name|d
operator|.
name|extradata
operator|)
expr_stmt|;
name|objects2
operator|=
operator|(
specifier|const
name|QMetaObject
operator|*
operator|*
operator|)
operator|(
name|meta2
operator|->
name|d
operator|.
name|extradata
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|objects1
operator|&&
operator|!
name|objects2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|objects2
operator|&&
operator|!
name|objects1
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|objects1
operator|&&
name|objects2
condition|)
block|{
while|while
condition|(
operator|*
name|objects1
operator|!=
literal|0
operator|&&
operator|*
name|objects2
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|*
name|objects1
operator|!=
operator|*
name|objects2
condition|)
return|return
literal|false
return|;
operator|++
name|objects1
expr_stmt|;
operator|++
name|objects2
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMetaObjectBuilder
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmetaobjectbuilder.moc"
end_include
end_unit
