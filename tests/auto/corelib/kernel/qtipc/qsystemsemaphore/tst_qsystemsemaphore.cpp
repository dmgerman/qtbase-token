begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsystemsemaphore.h>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_define
DECL|macro|EXISTING_SHARE
define|#
directive|define
name|EXISTING_SHARE
value|"existing"
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_define
DECL|macro|LACKEYLOC
define|#
directive|define
name|LACKEYLOC
value|"."
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|LACKEYLOC
define|#
directive|define
name|LACKEYLOC
value|"../lackey"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|LACKYWAITTIME
define|#
directive|define
name|LACKYWAITTIME
value|10000
end_define
begin_class
DECL|class|tst_QSystemSemaphore
class|class
name|tst_QSystemSemaphore
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSystemSemaphore
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSystemSemaphore
parameter_list|()
destructor_decl|;
public|public
name|Q_SLOTS
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|key_data
parameter_list|()
function_decl|;
name|void
name|key
parameter_list|()
function_decl|;
name|void
name|basicacquire
parameter_list|()
function_decl|;
name|void
name|complexacquire
parameter_list|()
function_decl|;
name|void
name|basicProcesses
parameter_list|()
function_decl|;
name|void
name|processes_data
parameter_list|()
function_decl|;
name|void
name|processes
parameter_list|()
function_decl|;
name|void
name|undo
parameter_list|()
function_decl|;
name|void
name|initialValue
parameter_list|()
function_decl|;
private|private:
DECL|member|existingLock
name|QSystemSemaphore
modifier|*
name|existingLock
decl_stmt|;
DECL|function|makeFile
name|QString
name|makeFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|resource
parameter_list|)
block|{
name|QFile
name|memory
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|memory
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"error reading resource"
operator|<<
name|resource
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QTemporaryFile
modifier|*
name|file
init|=
operator|new
name|QTemporaryFile
decl_stmt|;
name|file
operator|->
name|open
argument_list|()
expr_stmt|;
name|file
operator|->
name|write
argument_list|(
name|memory
operator|.
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|tempFiles
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|->
name|flush
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// flush does not flush to disk on Windows CE. It flushes it into its application
comment|// cache. Thus we need to close the file to be able that other processes(lackey) can read it
name|QString
name|fileName
init|=
name|file
operator|->
name|fileName
argument_list|()
decl_stmt|;
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
return|return
name|fileName
return|;
endif|#
directive|endif
return|return
name|file
operator|->
name|fileName
argument_list|()
return|;
block|}
DECL|function|acquire_js
name|QString
name|acquire_js
parameter_list|()
block|{
return|return
name|makeFile
argument_list|(
literal|":/systemsemaphore_acquire.js"
argument_list|)
return|;
block|}
DECL|function|release_js
name|QString
name|release_js
parameter_list|()
block|{
return|return
name|makeFile
argument_list|(
literal|":/systemsemaphore_release.js"
argument_list|)
return|;
block|}
DECL|function|acquirerelease_js
name|QString
name|acquirerelease_js
parameter_list|()
block|{
return|return
name|makeFile
argument_list|(
literal|":/systemsemaphore_acquirerelease.js"
argument_list|)
return|;
block|}
DECL|member|tempFiles
name|QList
argument_list|<
name|QTemporaryFile
modifier|*
argument_list|>
name|tempFiles
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QSystemSemaphore
name|tst_QSystemSemaphore
operator|::
name|tst_QSystemSemaphore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|)
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"lackey executable doesn't exists!"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QSystemSemaphore
name|tst_QSystemSemaphore
operator|::
name|~
name|tst_QSystemSemaphore
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|tempFiles
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QSystemSemaphore
operator|::
name|init
parameter_list|()
block|{
name|existingLock
operator|=
operator|new
name|QSystemSemaphore
argument_list|(
name|EXISTING_SHARE
argument_list|,
literal|1
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSystemSemaphore
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|existingLock
expr_stmt|;
block|}
end_function
begin_function
DECL|function|key_data
name|void
name|tst_QSystemSemaphore
operator|::
name|key_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"constructorKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"setKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null, null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null, one"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one, two"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"one"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Basic key testing  */
end_comment
begin_function
DECL|function|key
name|void
name|tst_QSystemSemaphore
operator|::
name|key
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|constructorKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|setKey
argument_list|)
expr_stmt|;
name|QSystemSemaphore
name|sem
argument_list|(
name|constructorKey
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|key
argument_list|()
argument_list|,
name|constructorKey
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|error
argument_list|()
argument_list|,
name|QSystemSemaphore
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|sem
operator|.
name|setKey
argument_list|(
name|setKey
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|key
argument_list|()
argument_list|,
name|setKey
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|error
argument_list|()
argument_list|,
name|QSystemSemaphore
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicacquire
name|void
name|tst_QSystemSemaphore
operator|::
name|basicacquire
parameter_list|()
block|{
name|QSystemSemaphore
name|sem
argument_list|(
literal|"QSystemSemaphore_basicacquire"
argument_list|,
literal|1
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|error
argument_list|()
argument_list|,
name|QSystemSemaphore
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|error
argument_list|()
argument_list|,
name|QSystemSemaphore
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexacquire
name|void
name|tst_QSystemSemaphore
operator|::
name|complexacquire
parameter_list|()
block|{
name|QSystemSemaphore
name|sem
argument_list|(
literal|"QSystemSemaphore_complexacquire"
argument_list|,
literal|2
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|acquire
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sem
operator|.
name|release
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|error
argument_list|()
argument_list|,
name|QSystemSemaphore
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sem
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicProcesses
name|void
name|tst_QSystemSemaphore
operator|::
name|basicProcesses
parameter_list|()
block|{
name|QSystemSemaphore
name|sem
argument_list|(
literal|"store"
argument_list|,
literal|0
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QStringList
name|acquireArguments
init|=
name|QStringList
argument_list|()
operator|<<
name|acquire_js
argument_list|()
decl_stmt|;
name|QStringList
name|releaseArguments
init|=
name|QStringList
argument_list|()
operator|<<
name|release_js
argument_list|()
decl_stmt|;
name|QProcess
name|acquire
decl_stmt|;
name|acquire
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|QProcess
name|release
decl_stmt|;
name|release
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|acquireArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|kill
argument_list|()
expr_stmt|;
name|release
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|releaseArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|release
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processes_data
name|void
name|tst_QSystemSemaphore
operator|::
name|processes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"processes"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 process"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3 process"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10 process"
argument_list|)
operator|<<
literal|10
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processes
name|void
name|tst_QSystemSemaphore
operator|::
name|processes
parameter_list|()
block|{
name|QSystemSemaphore
name|sem
argument_list|(
literal|"store"
argument_list|,
literal|1
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|processes
argument_list|)
expr_stmt|;
name|QStringList
name|scripts
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|processes
condition|;
operator|++
name|i
control|)
name|scripts
operator|.
name|append
argument_list|(
name|acquirerelease_js
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QProcess
modifier|*
argument_list|>
name|consumers
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scripts
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
name|arguments
init|=
name|QStringList
argument_list|()
operator|<<
name|scripts
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QProcess
modifier|*
name|p
init|=
operator|new
name|QProcess
decl_stmt|;
name|p
operator|->
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// We can't start the same executable twice on Windows CE.
comment|// Create a copy instead.
name|QString
name|lackeyCopy
init|=
name|QLatin1String
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|lackeyCopy
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|lackeyCopy
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|lackeyCopy
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|LACKEYLOC
literal|"/lackey.exe"
argument_list|,
name|lackeyCopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|->
name|start
argument_list|(
name|lackeyCopy
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
else|#
directive|else
name|p
operator|->
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
while|while
condition|(
operator|!
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|consumers
operator|.
name|first
argument_list|()
operator|->
name|waitForFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|consumers
operator|.
name|first
argument_list|()
operator|->
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|consumers
operator|.
name|first
argument_list|()
operator|->
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|consumers
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|undo
name|void
name|tst_QSystemSemaphore
operator|::
name|undo
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QSKIP
argument_list|(
literal|"This test only checks a unix behavior"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QSystemSemaphore
name|sem
argument_list|(
literal|"store"
argument_list|,
literal|1
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QStringList
name|acquireArguments
init|=
name|QStringList
argument_list|()
operator|<<
name|acquire_js
argument_list|()
decl_stmt|;
name|QProcess
name|acquire
decl_stmt|;
name|acquire
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|acquireArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
comment|// At process exit the kernel should auto undo
name|acquire
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|acquireArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initialValue
name|void
name|tst_QSystemSemaphore
operator|::
name|initialValue
parameter_list|()
block|{
name|QSystemSemaphore
name|sem
argument_list|(
literal|"store"
argument_list|,
literal|1
argument_list|,
name|QSystemSemaphore
operator|::
name|Create
argument_list|)
decl_stmt|;
name|QStringList
name|acquireArguments
init|=
name|QStringList
argument_list|()
operator|<<
name|acquire_js
argument_list|()
decl_stmt|;
name|QStringList
name|releaseArguments
init|=
name|QStringList
argument_list|()
operator|<<
name|release_js
argument_list|()
decl_stmt|;
name|QProcess
name|acquire
decl_stmt|;
name|acquire
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|QProcess
name|release
decl_stmt|;
name|release
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|acquireArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|acquireArguments
operator|<<
literal|"2"
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|kill
argument_list|()
expr_stmt|;
name|release
operator|.
name|start
argument_list|(
name|LACKEYLOC
literal|"/lackey"
argument_list|,
name|releaseArguments
argument_list|)
expr_stmt|;
name|acquire
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|release
operator|.
name|waitForFinished
argument_list|(
name|LACKYWAITTIME
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|acquire
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSystemSemaphore
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsystemsemaphore.moc"
end_include
end_unit
