begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QSYSTEMLOCK_H
end_ifndef
begin_define
DECL|macro|QSYSTEMLOCK_H
define|#
directive|define
name|QSYSTEMLOCK_H
end_define
begin_include
include|#
directive|include
file|<QtCore/qstring.h>
end_include
begin_function
name|QT_BEGIN_HEADER
ifndef|#
directive|ifndef
name|QT_NO_SYSTEMLOCK
DECL|function|QT_FORWARD_DECLARE_CLASS
name|QT_FORWARD_DECLARE_CLASS
parameter_list|(
name|QSystemLockPrivate
parameter_list|)
name|class
name|QSystemLock
decl_stmt|{  public:     enum SystemLockError
block|{
name|NoError
operator|,
name|UnknownError
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|QSystemLock
argument_list|(
specifier|const
name|QString
operator|&
name|key
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
operator|~
name|QSystemLock
argument_list|()
expr_stmt|;
end_expr_stmt
begin_function_decl
name|void
name|setKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|key
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_enum
enum|enum
name|LockMode
block|{
name|ReadOnly
block|,
name|ReadWrite
block|}
enum|;
end_enum
begin_function_decl
name|bool
name|lock
parameter_list|(
name|LockMode
name|mode
init|=
name|ReadWrite
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|unlock
parameter_list|()
function_decl|;
end_function_decl
begin_expr_stmt
name|SystemLockError
name|error
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|QString
name|errorString
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt
begin_label
name|private
label|:
end_label
begin_macro
name|Q_DISABLE_COPY
argument_list|(
argument|QSystemLock
argument_list|)
end_macro
begin_decl_stmt
name|QSystemLockPrivate
modifier|*
name|d
decl_stmt|;
end_decl_stmt
begin_decl_stmt
unit|};
name|class
name|QSystemLocker
block|{
name|public
label|:
specifier|inline
name|QSystemLocker
argument_list|(
argument|QSystemLock *systemLock
argument_list|,
argument|QSystemLock::LockMode mode = QSystemLock::ReadWrite
argument_list|)
operator|:
name|q_lock
argument_list|(
argument|systemLock
argument_list|)
block|{
name|autoUnLocked
operator|=
name|relock
argument_list|(
name|mode
argument_list|)
block|;     }
specifier|inline
operator|~
name|QSystemLocker
argument_list|()
block|{
if|if
condition|(
name|autoUnLocked
condition|)
name|unlock
argument_list|()
expr_stmt|;
block|}
specifier|inline
name|QSystemLock
operator|*
name|systemLock
argument_list|()
specifier|const
block|{
return|return
name|q_lock
return|;
block|}
specifier|inline
name|bool
name|relock
argument_list|(
name|QSystemLock
operator|::
name|LockMode
name|mode
operator|=
name|QSystemLock
operator|::
name|ReadWrite
argument_list|)
block|{
return|return
operator|(
name|q_lock
operator|&&
name|q_lock
operator|->
name|lock
argument_list|(
name|mode
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|unlock
parameter_list|()
block|{
if|if
condition|(
name|q_lock
operator|&&
name|q_lock
operator|->
name|unlock
argument_list|()
condition|)
block|{
name|autoUnLocked
operator|=
name|false
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|private
label|:
name|Q_DISABLE_COPY
argument_list|(
argument|QSystemLocker
argument_list|)
name|bool
name|autoUnLocked
decl_stmt|;
name|QSystemLock
modifier|*
name|q_lock
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SYSTEMLOCK
end_comment
begin_macro
name|QT_END_HEADER
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QSYSTEMLOCK_H
end_comment
end_unit
