begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Ruslan Nigmatullin<euroelessar@yandex.ru> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_QMessageAuthenticationCode
class|class
name|tst_QMessageAuthenticationCode
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|result_data
parameter_list|()
function_decl|;
name|void
name|result
parameter_list|()
function_decl|;
name|void
name|result_incremental_data
parameter_list|()
function_decl|;
name|void
name|result_incremental
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QCryptographicHash::Algorithm
argument_list|)
end_macro
begin_function
DECL|function|result_data
name|void
name|tst_QMessageAuthenticationCode
operator|::
name|result_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCryptographicHash
operator|::
name|Algorithm
argument_list|>
argument_list|(
literal|"algo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"code"
argument_list|)
expr_stmt|;
comment|// Empty values
name|QTest
operator|::
name|newRow
argument_list|(
literal|"md5-empty"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Md5
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"74e6f7298a9c2d168935f58c001bad88"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sha1-empty"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Sha1
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"fbdb1d1b18aa6c08324b7d64b71fb76370690e1d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sha256-empty"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Sha256
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"b613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad"
argument_list|)
expr_stmt|;
comment|// Some not-empty
name|QTest
operator|::
name|newRow
argument_list|(
literal|"md5"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Md5
operator|<<
name|QByteArray
argument_list|(
literal|"key"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"80070713463e7749b90c2dc24911e275"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sha1"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Sha1
operator|<<
name|QByteArray
argument_list|(
literal|"key"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sha256"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Sha256
operator|<<
name|QByteArray
argument_list|(
literal|"key"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8"
argument_list|)
expr_stmt|;
comment|// Some from rfc-2104
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc-md5-1"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Md5
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hi There"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"9294727a3638bb1c13f48ef8158bfc9d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc-md5-2"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Md5
operator|<<
name|QByteArray
argument_list|(
literal|"Jefe"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"what do ya want for nothing?"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"750c783e6ab0b503eaa86e310a5db738"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc-md5-3"
argument_list|)
operator|<<
name|QCryptographicHash
operator|::
name|Md5
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|50
argument_list|,
name|char
argument_list|(
literal|0xdd
argument_list|)
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"56be34521d144c88dbb8c733f0e8b3f6"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|result
name|void
name|tst_QMessageAuthenticationCode
operator|::
name|result
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCryptographicHash
operator|::
name|Algorithm
argument_list|,
name|algo
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|QMessageAuthenticationCode
name|mac
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|mac
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mac
operator|.
name|addData
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|QByteArray
name|result
init|=
name|mac
operator|.
name|result
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|result_incremental_data
name|void
name|tst_QMessageAuthenticationCode
operator|::
name|result_incremental_data
parameter_list|()
block|{
name|result_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|result_incremental
name|void
name|tst_QMessageAuthenticationCode
operator|::
name|result_incremental
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCryptographicHash
operator|::
name|Algorithm
argument_list|,
name|algo
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|code
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|message
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QByteArray
name|leftPart
argument_list|(
name|message
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|rightPart
argument_list|(
name|message
operator|.
name|mid
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|leftPart
operator|+
name|rightPart
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|QMessageAuthenticationCode
name|mac
argument_list|(
name|algo
argument_list|)
decl_stmt|;
name|mac
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mac
operator|.
name|addData
argument_list|(
name|leftPart
argument_list|)
expr_stmt|;
name|mac
operator|.
name|addData
argument_list|(
name|rightPart
argument_list|)
expr_stmt|;
name|QByteArray
name|result
init|=
name|mac
operator|.
name|result
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMessageAuthenticationCode
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmessageauthenticationcode.moc"
end_include
end_unit
