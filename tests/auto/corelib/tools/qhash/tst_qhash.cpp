begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_class
DECL|class|tst_QHash
class|class
name|tst_QHash
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|insert1
parameter_list|()
function_decl|;
name|void
name|erase
parameter_list|()
function_decl|;
name|void
name|key
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|clear
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|empty
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|find
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|constFind
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|contains
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|take
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|operator_eq
parameter_list|()
function_decl|;
comment|// copied from tst_QMap
name|void
name|rehash_isnt_quadratic
parameter_list|()
function_decl|;
name|void
name|dont_need_default_constructor
parameter_list|()
function_decl|;
name|void
name|qmultihash_specific
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|compare2
parameter_list|()
function_decl|;
name|void
name|iterators
parameter_list|()
function_decl|;
comment|// sligthly modified from tst_QMap
name|void
name|keys_values_uniqueKeys
parameter_list|()
function_decl|;
comment|// slightly modified from tst_QMap
name|void
name|noNeedlessRehashes
parameter_list|()
function_decl|;
name|void
name|const_shared_null
parameter_list|()
function_decl|;
name|void
name|twoArguments_qHash
parameter_list|()
function_decl|;
name|void
name|initializerList
parameter_list|()
function_decl|;
name|void
name|eraseValidIteratorOnSharedHash
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|IdentityTracker
struct|struct
name|IdentityTracker
block|{
DECL|member|value
DECL|member|id
name|int
name|value
decl_stmt|,
name|id
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|qHash
specifier|inline
name|uint
name|qHash
parameter_list|(
name|IdentityTracker
name|key
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|key
operator|.
name|value
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator ==
specifier|inline
name|bool
name|operator
name|==
parameter_list|(
name|IdentityTracker
name|lhs
parameter_list|,
name|IdentityTracker
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|value
operator|==
name|rhs
operator|.
name|value
return|;
block|}
end_function
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|function|Foo
name|Foo
parameter_list|()
member_init_list|:
name|c
argument_list|(
name|count
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|Foo
name|Foo
parameter_list|(
specifier|const
name|Foo
modifier|&
name|o
parameter_list|)
member_init_list|:
name|c
argument_list|(
name|o
operator|.
name|c
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|~Foo
name|~
name|Foo
parameter_list|()
block|{
operator|--
name|count
expr_stmt|;
block|}
DECL|member|c
name|int
name|c
decl_stmt|;
DECL|member|data
name|int
name|data
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|Foo
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|//copied from tst_QMap.cpp
end_comment
begin_class
DECL|class|MyClass
class|class
name|MyClass
block|{
public|public:
DECL|function|MyClass
name|MyClass
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|MyClass
name|MyClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|c
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|str
operator|=
name|c
expr_stmt|;
block|}
DECL|function|~MyClass
name|~
name|MyClass
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
block|}
DECL|function|MyClass
name|MyClass
parameter_list|(
specifier|const
name|MyClass
modifier|&
name|c
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|str
operator|=
name|c
operator|.
name|str
expr_stmt|;
block|}
DECL|function|operator =
name|MyClass
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|MyClass
modifier|&
name|o
parameter_list|)
block|{
name|str
operator|=
name|o
operator|.
name|str
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|str
name|QString
name|str
decl_stmt|;
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|count
name|int
name|MyClass
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|MyMap
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|MyMap
typedef|;
end_typedef
begin_comment
comment|//void tst_QMap::count()
end_comment
begin_function
DECL|function|count
name|void
name|tst_QHash
operator|::
name|count
parameter_list|()
block|{
block|{
name|MyMap
name|map
decl_stmt|;
name|MyMap
name|map2
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// detach
name|map2
index|[
literal|"Hallo"
index|]
operator|=
name|MyClass
argument_list|(
literal|"Fritz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|Map
typedef|;
name|Map
name|map
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Torben"
argument_list|,
name|MyClass
argument_list|(
literal|"Weis"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Claudia"
argument_list|,
name|MyClass
argument_list|(
literal|"Sorg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Lars"
argument_list|,
name|MyClass
argument_list|(
literal|"Linzbach"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Matthias"
argument_list|,
name|MyClass
argument_list|(
literal|"Ettrich"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Sue"
argument_list|,
name|MyClass
argument_list|(
literal|"Paludo"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Eirik"
argument_list|,
name|MyClass
argument_list|(
literal|"Eng"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Haavard"
argument_list|,
name|MyClass
argument_list|(
literal|"Nord"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Arnt"
argument_list|,
name|MyClass
argument_list|(
literal|"Gulbrandsen"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 3"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 4"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 5"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 6"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Map
name|map2
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|insert
argument_list|(
literal|"Kay"
argument_list|,
name|MyClass
argument_list|(
literal|"Roemer"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|19
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|=
name|map
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|insert
argument_list|(
literal|"Kay"
argument_list|,
name|MyClass
argument_list|(
literal|"Roemer"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|19
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|=
name|map
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|.
name|remove
argument_list|(
literal|"Lars"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|.
name|remove
argument_list|(
literal|"Mist"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|Map
typedef|;
name|Map
name|map
decl_stmt|;
name|map
index|[
literal|"Torben"
index|]
operator|=
name|MyClass
argument_list|(
literal|"Weis"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|map
index|[
literal|"Torben"
index|]
operator|.
name|str
expr_stmt|;
operator|(
name|void
operator|)
name|map
index|[
literal|"Lars"
index|]
operator|.
name|str
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|Map
modifier|&
name|cmap
init|=
name|map
decl_stmt|;
operator|(
name|void
operator|)
name|cmap
index|[
literal|"Depp"
index|]
operator|.
name|str
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|MyClass
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
name|map
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|MyClass
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert1
name|void
name|tst_QHash
operator|::
name|insert1
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|hello
init|=
literal|"hello"
decl_stmt|;
specifier|const
name|char
modifier|*
name|world
init|=
literal|"world"
decl_stmt|;
specifier|const
name|char
modifier|*
name|allo
init|=
literal|"allo"
decl_stmt|;
specifier|const
name|char
modifier|*
name|monde
init|=
literal|"monde"
decl_stmt|;
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|Hash
typedef|;
name|Hash
name|hash
decl_stmt|;
name|QString
name|key
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|key
index|[
literal|0
index|]
operator|=
name|i
operator|+
literal|'0'
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|key
index|[
literal|1
index|]
operator|=
name|j
operator|+
literal|'0'
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|key
argument_list|,
literal|"V"
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|key
index|[
literal|0
index|]
operator|=
name|i
operator|+
literal|'0'
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|key
index|[
literal|1
index|]
operator|=
name|j
operator|+
literal|'0'
expr_stmt|;
name|hash
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
specifier|const
name|char
modifier|*
argument_list|>
name|Hash
typedef|;
name|Hash
name|hash
decl_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|hello
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
operator|=
name|hash
expr_stmt|;
name|hash
operator|=
name|hash2
expr_stmt|;
name|hash2
operator|=
name|hash2
expr_stmt|;
name|hash
operator|=
name|hash
expr_stmt|;
name|hash2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hash2
operator|=
name|hash2
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
index|[
literal|1
index|]
operator|=
name|allo
expr_stmt|;
name|hash2
index|[
literal|2
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|1
index|]
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|2
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|hash2
index|[
literal|1
index|]
operator|=
name|hash
index|[
literal|1
index|]
expr_stmt|;
name|hash2
index|[
literal|2
index|]
operator|=
name|hash
index|[
literal|2
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
index|[
literal|2
index|]
operator|==
name|world
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|hash
index|[
literal|1
index|]
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
block|}
block|{
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|hash2
operator|.
name|detach
argument_list|()
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
name|hash
operator|.
name|detach
argument_list|()
expr_stmt|;
block|{
name|Hash
operator|::
name|iterator
name|it1
init|=
name|hash
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Hash
operator|::
name|iterator
name|it2
init|=
name|hash
operator|.
name|find
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|hash
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|==
name|hash
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
operator|*
name|it1
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|monde
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|monde
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|monde
argument_list|)
expr_stmt|;
name|hash
index|[
literal|1
index|]
operator|=
name|hello
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
index|[
literal|1
index|]
operator|==
name|hello
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|Hash
name|hash2
init|=
name|hash
decl_stmt|;
name|Hash
operator|::
name|const_iterator
name|it1
init|=
name|hash2
operator|.
name|find
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|.
name|value
argument_list|()
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|it1
operator|==
name|hello
argument_list|)
expr_stmt|;
name|Hash
operator|::
name|const_iterator
name|it2
init|=
name|hash2
operator|.
name|find
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|it2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it2
operator|!=
name|hash2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|it1
operator|=
name|hash2
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|hash2
operator|.
name|end
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|it1
operator|=
name|hash
operator|.
name|constBegin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it1
operator|!=
name|hash
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
operator|++
name|it1
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|hash
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|1
argument_list|,
name|allo
argument_list|)
operator|==
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|2
argument_list|,
name|allo
argument_list|)
operator|==
name|world
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|allo
argument_list|)
operator|==
name|allo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|value
argument_list|(
literal|0
argument_list|,
name|monde
argument_list|)
operator|==
name|monde
argument_list|)
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|Foo
argument_list|>
name|hash
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|hash
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|Foo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Foo
operator|::
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
name|hash
operator|.
name|remove
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|Foo
operator|::
name|count
operator|==
literal|9
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|Foo
operator|::
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
modifier|*
argument_list|>
name|hash
decl_stmt|;
name|QVERIFY
argument_list|(
argument|((const QHash<int,int*>*)&hash)->operator[](
literal|7
argument|) ==
literal|0
argument_list|)
empty_stmt|;
block|}
block|}
block|{
name|QHash
argument_list|<
name|IdentityTracker
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dummy
init|=
operator|-
literal|1
decl_stmt|;
name|IdentityTracker
name|id00
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|,
name|id01
init|=
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|,
name|searchKey
init|=
block|{
literal|0
block|,
name|dummy
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|insert
argument_list|(
name|id00
argument_list|,
name|id00
operator|.
name|id
argument_list|)
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|,
name|id00
operator|.
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|insert
argument_list|(
name|id01
argument_list|,
name|id01
operator|.
name|id
argument_list|)
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|,
name|id00
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// first key inserted is kept
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|find
argument_list|(
name|searchKey
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|id01
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// last-inserted value
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|find
argument_list|(
name|searchKey
argument_list|)
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|,
name|id00
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// but first-inserted key
block|}
block|{
name|QMultiHash
argument_list|<
name|IdentityTracker
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|dummy
init|=
operator|-
literal|1
decl_stmt|;
name|IdentityTracker
name|id00
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|,
name|id01
init|=
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|,
name|searchKey
init|=
block|{
literal|0
block|,
name|dummy
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|insert
argument_list|(
name|id00
argument_list|,
name|id00
operator|.
name|id
argument_list|)
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|,
name|id00
operator|.
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|insert
argument_list|(
name|id01
argument_list|,
name|id01
operator|.
name|id
argument_list|)
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|,
name|id01
operator|.
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QMultiHash
argument_list|<
name|IdentityTracker
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|pos
init|=
name|hash
operator|.
name|constFind
argument_list|(
name|searchKey
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pos
operator|.
name|value
argument_list|()
argument_list|,
name|pos
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// key fits to value it was inserted with
operator|++
name|pos
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pos
operator|.
name|value
argument_list|()
argument_list|,
name|pos
operator|.
name|key
argument_list|()
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// key fits to value it was inserted with
block|}
block|}
end_function
begin_function
DECL|function|erase
name|void
name|tst_QHash
operator|::
name|erase
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|h1
decl_stmt|;
name|h1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|h1
operator|.
name|erase
argument_list|(
name|h1
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|h1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|h1
operator|.
name|begin
argument_list|()
operator|==
name|h1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|h1
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|h1
operator|.
name|begin
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|h1
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|h1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it1
init|=
name|h1
operator|.
name|begin
argument_list|()
decl_stmt|;
operator|++
name|it1
expr_stmt|;
name|it1
operator|=
name|h1
operator|.
name|erase
argument_list|(
name|it1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|h1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|h1
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|h1
operator|.
name|insert
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|it1
operator|=
name|h1
operator|.
name|begin
argument_list|()
expr_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it1
operator|!=
name|h1
operator|.
name|end
argument_list|()
condition|)
block|{
name|it1
operator|=
name|h1
operator|.
name|erase
argument_list|(
name|it1
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|n
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|h2
decl_stmt|;
name|h2
operator|.
name|insertMulti
argument_list|(
literal|20
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|h2
operator|.
name|insertMulti
argument_list|(
literal|20
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|h2
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|it1
operator|=
name|h2
operator|.
name|erase
argument_list|(
name|h2
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|it1
operator|=
name|h2
operator|.
name|erase
argument_list|(
name|h2
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it1
operator|==
name|h2
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|key
name|void
name|tst_QHash
operator|::
name|key
parameter_list|()
block|{
block|{
name|QString
name|def
argument_list|(
literal|"default value"
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|hash1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|3
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|"deux"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
operator|==
literal|"deux"
operator|||
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
operator|==
literal|"two"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
operator|==
literal|"deux"
operator|||
name|hash1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
operator|==
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|key
argument_list|(
literal|3
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|def
init|=
literal|666
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
operator|==
literal|2
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
operator|==
literal|2
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
operator|==
literal|2
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
operator|==
literal|3
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
operator|==
literal|2
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
operator|==
literal|3
operator|||
name|hash2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"zero"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"zero"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash2
operator|.
name|key
argument_list|(
literal|"zero"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QHash
operator|::
name|swap
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|h1
index|[
literal|0
index|]
operator|=
literal|"h1[0]"
expr_stmt|;
name|h2
index|[
literal|1
index|]
operator|=
literal|"h2[1]"
expr_stmt|;
name|h1
operator|.
name|swap
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"h2[1]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"h1[0]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied from tst_QMap
end_comment
begin_function
DECL|function|clear
name|void
name|tst_QHash
operator|::
name|clear
parameter_list|()
block|{
block|{
name|MyMap
name|map
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key"
argument_list|,
name|MyClass
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key0"
argument_list|,
name|MyClass
argument_list|(
literal|"value0"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key0"
argument_list|,
name|MyClass
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key1"
argument_list|,
name|MyClass
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//copied from tst_QMap
end_comment
begin_function
DECL|function|empty
name|void
name|tst_QHash
operator|::
name|empty
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//copied from tst_QMap
end_comment
begin_function
DECL|function|find
name|void
name|tst_QHash
operator|::
name|find
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %0"
decl_stmt|;
name|QString
name|compareString
decl_stmt|;
name|int
name|i
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|1
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mensch"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mayer"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Hej"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Mayer"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Hej"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|4
argument_list|,
name|compareString
argument_list|)
expr_stmt|;
block|}
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|map1
operator|.
name|constFind
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|9
init|;
name|i
operator|>
literal|2
operator|&&
name|it
operator|!=
name|map1
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
literal|4
condition|;
operator|--
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|compareString
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied from tst_QMap
end_comment
begin_function
DECL|function|constFind
name|void
name|tst_QHash
operator|::
name|constFind
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %0"
decl_stmt|;
name|QString
name|compareString
decl_stmt|;
name|int
name|i
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|)
operator|==
name|map1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mensch"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mayer"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Hej"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Mayer"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Hej"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|4
argument_list|,
name|compareString
argument_list|)
expr_stmt|;
block|}
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|map1
operator|.
name|constFind
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|9
init|;
name|i
operator|>
literal|2
operator|&&
name|it
operator|!=
name|map1
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
literal|4
condition|;
operator|--
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|compareString
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied from tst_QMap
end_comment
begin_function
DECL|function|contains
name|void
name|tst_QHash
operator|::
name|contains
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|int
name|i
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|map1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"teststring"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|99
init|;
name|i
operator|>
literal|1
condition|;
operator|--
name|i
control|)
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|contains
argument_list|(
literal|43
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//copied from tst_QMap
end_comment
begin_function
DECL|function|take
name|void
name|tst_QHash
operator|::
name|take
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"zwei"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"drei"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|take
argument_list|(
literal|3
argument_list|)
operator|==
literal|"drei"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//copied from tst_QMap
end_comment
begin_function
DECL|function|operator_eq
name|void
name|tst_QHash
operator|::
name|operator_eq
parameter_list|()
block|{
block|{
comment|// compare for equality:
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
comment|// compare for inequality:
name|a
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|65
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// a more complex map
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|a
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|b
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"Goodbye"
argument_list|,
literal|"cruel world"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"Goodbye"
argument_list|,
literal|"cruel world"
argument_list|)
expr_stmt|;
comment|// what happens if we insert nulls?
name|a
operator|.
name|insert
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
comment|// empty keys and null keys match:
name|b
operator|.
name|insert
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"otto"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"willy"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QHash
operator|::
name|compare
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash1
decl_stmt|,
name|hash2
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %1"
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
name|hash1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
operator|--
name|i
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
name|hash2
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|hash2
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|==
name|hash2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|hash1
operator|!=
name|hash2
operator|)
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|take
argument_list|(
literal|234
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|take
argument_list|(
literal|234
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|==
name|hash2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|hash1
operator|!=
name|hash2
operator|)
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|take
argument_list|(
literal|261
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|hash1
operator|==
name|hash2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|!=
name|hash2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare2
name|void
name|tst_QHash
operator|::
name|compare2
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|a
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|a
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
operator|*
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|17
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|b
operator|==
name|a
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|clear
argument_list|()
expr_stmt|;
name|b
operator|.
name|clear
argument_list|()
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|b
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|b
operator|==
name|a
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//sligthly modified from tst_QMap
end_comment
begin_function
DECL|function|iterators
name|void
name|tst_QHash
operator|::
name|iterators
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|testMap
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %1"
decl_stmt|;
name|QString
name|testString1
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|hash
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|//to get some chaos in the hash
name|hash
operator|.
name|squeeze
argument_list|()
expr_stmt|;
comment|//STL-Style iterators
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|stlIt
init|=
name|hash
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|stlIt
operator|=
name|hash
operator|.
name|begin
argument_list|()
operator|,
name|i
operator|=
literal|1
init|;
name|stlIt
operator|!=
name|hash
operator|.
name|end
argument_list|()
operator|&&
name|i
operator|<
literal|100
condition|;
operator|++
name|stlIt
operator|,
operator|++
name|i
control|)
block|{
name|testMap
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|stlIt
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|//QVERIFY(stlIt.value() == hash.value(
block|}
name|stlIt
operator|=
name|hash
operator|.
name|begin
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stlIt
operator|+=
literal|5
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|stlIt
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|stlIt
operator|-=
literal|3
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|stlIt
operator|--
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//STL-Style const-iterators
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|cstlIt
init|=
name|hash
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
name|cstlIt
operator|=
name|hash
operator|.
name|constBegin
argument_list|()
operator|,
name|i
operator|=
literal|1
init|;
name|cstlIt
operator|!=
name|hash
operator|.
name|constEnd
argument_list|()
operator|&&
name|i
operator|<
literal|100
condition|;
operator|++
name|cstlIt
operator|,
operator|++
name|i
control|)
block|{
name|testMap
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|cstlIt
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
comment|//QVERIFY(stlIt.value() == hash.value(
block|}
name|cstlIt
operator|=
name|hash
operator|.
name|constBegin
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cstlIt
operator|+=
literal|5
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|cstlIt
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|cstlIt
operator|-=
literal|3
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|cstlIt
operator|--
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|testMap
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//Java-Style iterators
name|QHashIterator
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|javaIt
argument_list|(
name|hash
argument_list|)
decl_stmt|;
comment|//walk through
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|javaIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|testMap
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|javaIt
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|javaIt
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|javaIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|javaIt
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testMap
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//peekNext()  peekPrevious()
name|javaIt
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|javaIt
operator|.
name|next
argument_list|()
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|testString
operator|=
name|javaIt
operator|.
name|value
argument_list|()
expr_stmt|;
name|testString1
operator|=
name|javaIt
operator|.
name|peekNext
argument_list|()
operator|.
name|value
argument_list|()
expr_stmt|;
name|javaIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testString1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|javaIt
operator|.
name|peekPrevious
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|testString1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|javaIt
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|testString
operator|=
name|javaIt
operator|.
name|value
argument_list|()
expr_stmt|;
name|testString1
operator|=
name|javaIt
operator|.
name|peekPrevious
argument_list|()
operator|.
name|value
argument_list|()
expr_stmt|;
name|javaIt
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testString1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|javaIt
operator|.
name|peekNext
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|testString1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rehash_isnt_quadratic
name|void
name|tst_QHash
operator|::
name|rehash_isnt_quadratic
parameter_list|()
block|{
comment|// this test should be incredibly slow if rehash() is quadratic
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
operator|++
name|j
control|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|testHash
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// mobiles do not have infinite mem...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
operator|++
name|i
control|)
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500000
condition|;
operator|++
name|i
control|)
endif|#
directive|endif
name|testHash
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|Bar
class|class
name|Bar
block|{
public|public:
DECL|function|Bar
name|Bar
parameter_list|(
name|int
name|i
parameter_list|)
member_init_list|:
name|j
argument_list|(
name|i
argument_list|)
block|{}
DECL|member|j
name|int
name|j
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|dont_need_default_constructor
name|void
name|tst_QHash
operator|::
name|dont_need_default_constructor
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|Bar
argument_list|>
name|hash1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|hash1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|Bar
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|value
argument_list|(
name|i
argument_list|,
name|Bar
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|j
operator|==
literal|2
operator|*
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|size
argument_list|()
operator|==
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|QHash
argument_list|<
name|QString
argument_list|,
name|Bar
argument_list|>
name|hash2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|hash2
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bar
argument_list|(
literal|2
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|value
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bar
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|j
operator|==
literal|2
operator|*
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash2
operator|.
name|size
argument_list|()
operator|==
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qmultihash_specific
name|void
name|tst_QHash
operator|::
name|qmultihash_specific
parameter_list|()
block|{
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|hash1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|9
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|i
condition|;
operator|++
name|j
control|)
block|{
name|int
name|k
init|=
name|i
operator|*
literal|10
operator|+
name|j
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|9
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|i
condition|;
operator|++
name|j
control|)
block|{
name|int
name|k
init|=
name|i
operator|*
literal|10
operator|+
name|j
decl_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|remove
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|remove
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|hash1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|46
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|hash1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
block|{
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|hash1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash1
operator|.
name|constFind
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash1
operator|.
name|constFind
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|hash2
argument_list|(
name|hash1
argument_list|)
decl_stmt|;
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|hash2
operator|.
name|find
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash2
operator|.
name|find
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash2
operator|.
name|find
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|hash1
operator|.
name|find
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash1
operator|.
name|find
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|hash1
operator|.
name|find
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|48
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|95
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|map1
operator|+=
name|map2
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|48
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
name|map2
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|remove
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|remove
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|==
name|map2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|sorted
name|QList
argument_list|<
name|T
argument_list|>
name|sorted
parameter_list|(
specifier|const
name|QList
argument_list|<
name|T
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QList
argument_list|<
name|T
argument_list|>
name|res
init|=
name|list
decl_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|res
operator|.
name|begin
argument_list|()
argument_list|,
name|res
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|keys_values_uniqueKeys
name|void
name|tst_QHash
operator|::
name|keys_values_uniqueKeys
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|uniqueKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
literal|"alpha"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
operator|==
name|hash
operator|.
name|uniqueKeys
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|values
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
literal|"beta"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
operator|==
name|hash
operator|.
name|uniqueKeys
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|values
argument_list|()
argument_list|)
operator|==
name|sorted
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
literal|"alpha"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|uniqueKeys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|values
argument_list|()
argument_list|)
operator|==
name|sorted
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
operator|<<
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insertMulti
argument_list|(
literal|"beta"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|uniqueKeys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|keys
argument_list|()
argument_list|)
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sorted
argument_list|(
name|hash
operator|.
name|values
argument_list|()
argument_list|)
operator|==
name|sorted
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|4
operator|<<
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noNeedlessRehashes
name|void
name|tst_QHash
operator|::
name|noNeedlessRehashes
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|hash
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|512
condition|;
operator|++
name|i
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|*
literal|345
operator|)
operator|%
literal|512
decl_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|int
name|oldCapacity
init|=
name|hash
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|hash
index|[
name|j
index|]
operator|=
name|j
operator|+
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldCapacity
argument_list|,
name|hash
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldCapacity
argument_list|,
name|hash
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|const_shared_null
name|void
name|tst_QHash
operator|::
name|const_shared_null
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash2
decl_stmt|;
if|#
directive|if
name|QT_SUPPORTS
argument_list|(
name|UNSHARABLE_CONTAINERS
argument_list|)
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash1
decl_stmt|;
name|hash1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hash1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|hash2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This gets set to != 0 in wrong qHash overloads
end_comment
begin_decl_stmt
DECL|variable|wrongqHashOverload
specifier|static
name|int
name|wrongqHashOverload
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|OneArgumentQHashStruct1
struct|struct
name|OneArgumentQHashStruct1
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|OneArgumentQHashStruct1
modifier|&
parameter_list|,
specifier|const
name|OneArgumentQHashStruct1
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|OneArgumentQHashStruct1
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|OneArgumentQHashStruct2
struct|struct
name|OneArgumentQHashStruct2
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|OneArgumentQHashStruct2
modifier|&
parameter_list|,
specifier|const
name|OneArgumentQHashStruct2
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|OneArgumentQHashStruct2
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|OneArgumentQHashStruct3
struct|struct
name|OneArgumentQHashStruct3
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|OneArgumentQHashStruct3
modifier|&
parameter_list|,
specifier|const
name|OneArgumentQHashStruct3
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|OneArgumentQHashStruct3
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|OneArgumentQHashStruct3
modifier|&
parameter_list|,
name|uint
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|OneArgumentQHashStruct4
struct|struct
name|OneArgumentQHashStruct4
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|OneArgumentQHashStruct4
modifier|&
parameter_list|,
specifier|const
name|OneArgumentQHashStruct4
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|OneArgumentQHashStruct4
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|OneArgumentQHashStruct4
modifier|&
parameter_list|,
name|uint
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|TwoArgumentsQHashStruct1
struct|struct
name|TwoArgumentsQHashStruct1
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct1
modifier|&
parameter_list|,
specifier|const
name|TwoArgumentsQHashStruct1
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct1
modifier|&
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct1
modifier|&
parameter_list|,
name|uint
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|TwoArgumentsQHashStruct2
struct|struct
name|TwoArgumentsQHashStruct2
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct2
modifier|&
parameter_list|,
specifier|const
name|TwoArgumentsQHashStruct2
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|TwoArgumentsQHashStruct2
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct2
modifier|&
parameter_list|,
name|uint
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|TwoArgumentsQHashStruct3
struct|struct
name|TwoArgumentsQHashStruct3
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct3
modifier|&
parameter_list|,
specifier|const
name|TwoArgumentsQHashStruct3
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct3
modifier|&
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|TwoArgumentsQHashStruct3
parameter_list|,
name|uint
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_struct
DECL|struct|TwoArgumentsQHashStruct4
struct|struct
name|TwoArgumentsQHashStruct4
block|{
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|TwoArgumentsQHashStruct4
modifier|&
parameter_list|,
specifier|const
name|TwoArgumentsQHashStruct4
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|TwoArgumentsQHashStruct4
parameter_list|)
block|{
name|wrongqHashOverload
operator|=
literal|1
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
name|TwoArgumentsQHashStruct4
parameter_list|,
name|uint
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal      Check that QHash picks up the right overload.     The best one, for a type T, is the two-args version of qHash:     either uint qHash(T, uint) or uint qHash(const T&, uint).      If neither of these exists, then one between     uint qHash(T) or uint qHash(const T&) must exist     (and it gets selected instead). */
end_comment
begin_function
DECL|function|twoArguments_qHash
name|void
name|tst_QHash
operator|::
name|twoArguments_qHash
parameter_list|()
block|{
name|QHash
argument_list|<
name|OneArgumentQHashStruct1
argument_list|,
name|int
argument_list|>
name|oneArgHash1
decl_stmt|;
name|OneArgumentQHashStruct1
name|oneArgObject1
decl_stmt|;
name|oneArgHash1
index|[
name|oneArgObject1
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|OneArgumentQHashStruct2
argument_list|,
name|int
argument_list|>
name|oneArgHash2
decl_stmt|;
name|OneArgumentQHashStruct2
name|oneArgObject2
decl_stmt|;
name|oneArgHash2
index|[
name|oneArgObject2
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|OneArgumentQHashStruct3
argument_list|,
name|int
argument_list|>
name|oneArgHash3
decl_stmt|;
name|OneArgumentQHashStruct3
name|oneArgObject3
decl_stmt|;
name|oneArgHash3
index|[
name|oneArgObject3
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|OneArgumentQHashStruct4
argument_list|,
name|int
argument_list|>
name|oneArgHash4
decl_stmt|;
name|OneArgumentQHashStruct4
name|oneArgObject4
decl_stmt|;
name|oneArgHash4
index|[
name|oneArgObject4
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|TwoArgumentsQHashStruct1
argument_list|,
name|int
argument_list|>
name|twoArgsHash1
decl_stmt|;
name|TwoArgumentsQHashStruct1
name|twoArgsObject1
decl_stmt|;
name|twoArgsHash1
index|[
name|twoArgsObject1
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|TwoArgumentsQHashStruct2
argument_list|,
name|int
argument_list|>
name|twoArgsHash2
decl_stmt|;
name|TwoArgumentsQHashStruct2
name|twoArgsObject2
decl_stmt|;
name|twoArgsHash2
index|[
name|twoArgsObject2
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|TwoArgumentsQHashStruct3
argument_list|,
name|int
argument_list|>
name|twoArgsHash3
decl_stmt|;
name|TwoArgumentsQHashStruct3
name|twoArgsObject3
decl_stmt|;
name|twoArgsHash3
index|[
name|twoArgsObject3
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|TwoArgumentsQHashStruct4
argument_list|,
name|int
argument_list|>
name|twoArgsHash4
decl_stmt|;
name|TwoArgumentsQHashStruct4
name|twoArgsObject4
decl_stmt|;
name|twoArgsHash4
index|[
name|twoArgsObject4
index|]
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wrongqHashOverload
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializerList
name|void
name|tst_QHash
operator|::
name|initializerList
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|hash
init|=
block|{
block|{
literal|1
block|,
literal|"bar"
block|}
block|,
block|{
literal|1
block|,
literal|"hello"
block|}
block|,
block|{
literal|2
block|,
literal|"initializer_list"
block|}
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hash
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
index|[
literal|1
index|]
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hash
index|[
literal|2
index|]
argument_list|,
name|QString
argument_list|(
literal|"initializer_list"
argument_list|)
argument_list|)
expr_stmt|;
comment|// note the difference to std::unordered_map:
comment|// std::unordered_map<int, QString> stdh = {{1, "bar"}, {1, "hello"}, {2, "initializer_list"}};
comment|// QCOMPARE(stdh.size(), 2UL);
comment|// QCOMPARE(stdh[1], QString("bar"));
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|multiHash
argument_list|{
block|{
literal|"il"
block|,
literal|1
block|}
argument_list|,
block|{
literal|"il"
block|,
literal|2
block|}
argument_list|,
block|{
literal|"il"
block|,
literal|3
block|}
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|multiHash
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|values
init|=
name|multiHash
operator|.
name|values
argument_list|(
literal|"il"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|emptyHash
argument_list|{}
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyHash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|char
argument_list|>
name|emptyPairs
argument_list|{
block|{}
argument_list|,
block|{}
argument_list|}
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|emptyPairs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|double
argument_list|>
name|emptyMultiHash
argument_list|{}
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyMultiHash
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiHash
argument_list|<
name|int
argument_list|,
name|float
argument_list|>
name|emptyPairs2
argument_list|{
block|{}
argument_list|,
block|{}
argument_list|}
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|emptyPairs2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Compiler doesn't support initializer lists"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|eraseValidIteratorOnSharedHash
name|void
name|tst_QHash
operator|::
name|eraseValidIteratorOnSharedHash
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|10
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|a
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|value
argument_list|()
operator|!=
literal|25
condition|)
operator|++
name|i
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|a
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|a
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|a
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|!=
literal|25
argument_list|)
expr_stmt|;
name|int
name|itemsWith10
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|b
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|b
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
name|itemsWith10
operator|+=
operator|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|10
operator|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemsWith10
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QHash
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhash.moc"
end_include
end_unit
