begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qlonglong
argument_list|)
end_macro
begin_class
DECL|class|tst_QStringRef
class|class
name|tst_QStringRef
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|endsWith
parameter_list|()
function_decl|;
name|void
name|startsWith
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|lastIndexOf_data
parameter_list|()
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
function_decl|;
name|void
name|indexOf_data
parameter_list|()
function_decl|;
name|void
name|indexOf
parameter_list|()
function_decl|;
name|void
name|indexOf2_data
parameter_list|()
function_decl|;
name|void
name|indexOf2
parameter_list|()
function_decl|;
name|void
name|length_data
parameter_list|()
function_decl|;
name|void
name|length
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|operator_eqeq_nullstring
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|emptyRef
specifier|static
name|QStringRef
name|emptyRef
parameter_list|()
block|{
specifier|static
specifier|const
name|QString
name|empty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
return|return
name|empty
operator|.
name|midRef
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|CREATE_REF
define|#
directive|define
name|CREATE_REF
parameter_list|(
name|string
parameter_list|)
define|\
value|const QString padded = QString::fromLatin1(" %1 ").arg(string);     \     QStringRef ref = padded.midRef(1, padded.size() - 2);
end_define
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QVariant>
argument_list|)
end_macro
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|IntList
argument_list|)
comment|// This next bit is needed for the NAN and INF in string -> number conversion tests
include|#
directive|include
file|<float.h>
include|#
directive|include
file|<limits.h>
include|#
directive|include
file|<math.h>
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
include|#
directive|include
file|<windows.h>
comment|// mingw defines NAN and INFINITY to 0/0 and x/0
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
DECL|macro|NAN
undef|#
directive|undef
name|NAN
DECL|macro|INFINITY
undef|#
directive|undef
name|INFINITY
else|#
directive|else
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|_isnan(d)
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
name|isnan
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|__isnand(d)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
include|#
directive|include
file|<ieeefp.h>
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSF
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__DECC
argument_list|)
operator|||
name|defined
argument_list|(
name|__DECCXX
argument_list|)
operator|)
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|DBL_INFINITY
DECL|macro|NAN
define|#
directive|define
name|NAN
value|DBL_QNAN
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
include|#
directive|include
file|<ieeefp.h>
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|isnand(d)
endif|#
directive|endif
expr|enum
block|{
DECL|enumerator|LittleEndian
name|LittleEndian
block|,
DECL|enumerator|BigEndian
name|BigEndian
ifdef|#
directive|ifdef
name|Q_BYTE_ORDER
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
block|,
DECL|enumerator|ByteOrder
name|ByteOrder
operator|=
name|BigEndian
elif|#
directive|elif
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
block|,
name|ByteOrder
operator|=
name|LittleEndian
else|#
directive|else
error|#
directive|error
literal|"undefined byte order"
endif|#
directive|endif
block|}
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
unit|};
specifier|static
specifier|const
name|unsigned
name|int
name|one
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|bool
name|ByteOrder
init|=
operator|(
operator|(
operator|*
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|one
operator|)
operator|==
literal|0
operator|)
condition|?
name|BigEndian
else|:
name|LittleEndian
operator|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|INFINITY
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|inf
specifier|static
specifier|inline
name|double
name|inf
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_inf_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_inf_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|(::inf())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_nan_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_nan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|nan
specifier|static
specifier|inline
name|double
name|nan
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_nan_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_nan_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|NAN
define|#
directive|define
name|NAN
value|(::nan())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|cleanup
name|void
name|tst_QStringRef
operator|::
name|cleanup
parameter_list|()
block|{
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'C'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length_data
name|void
name|tst_QStringRef
operator|::
name|length_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
literal|43
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\n"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\nC"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nA"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB\nCDE"
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"shdnftrheid fhgnt gjvnfmd chfugkh bnfhg thgjf vnghturkf chfnguh bjgnfhvygh hnbhgutjfv dhdnjds dcjs d"
argument_list|)
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|void
name|tst_QStringRef
operator|::
name|length
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|ref
operator|.
name|length
argument_list|()
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QStringRef
operator|::
name|isEmpty
parameter_list|()
block|{
name|QStringRef
name|a
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
literal|"Not empty"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf_data
name|void
name|tst_QStringRef
operator|::
name|indexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bcs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data20"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data22"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data24"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data26"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data27"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data28"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data29"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data49"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data50"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data51"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data52"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data53"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data54"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data55"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data57"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
if|#
directive|if
literal|0
block|QTest::newRow("null-in-null")<< QString()<< QString()<< 0<< false<< 0;     QTest::newRow("empty-in-null")<< QString()<< QString("")<< 0<< false<< 0;     QTest::newRow("null-in-empty")<< QString("")<< QString()<< 0<< false<< 0;     QTest::newRow("empty-in-empty")<< QString("")<< QString("")<< 0<< false<< 0;
endif|#
directive|endif
name|QString
name|s1
init|=
literal|"abc"
decl_stmt|;
name|s1
operator|+=
name|QChar
argument_list|(
literal|0xb5
argument_list|)
expr_stmt|;
name|QString
name|s2
decl_stmt|;
name|s2
operator|+=
name|QChar
argument_list|(
literal|0x3bc
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data58"
argument_list|)
operator|<<
name|QString
argument_list|(
name|s1
argument_list|)
operator|<<
name|QString
argument_list|(
name|s2
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|3
expr_stmt|;
name|s2
operator|.
name|prepend
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data59"
argument_list|)
operator|<<
name|QString
argument_list|(
name|s1
argument_list|)
operator|<<
name|QString
argument_list|(
name|s2
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|2
expr_stmt|;
name|QString
name|veryBigHaystack
argument_list|(
literal|500
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|veryBigHaystack
operator|+=
literal|'B'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest2"
argument_list|)
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest3"
argument_list|)
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest4"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest5"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest6"
argument_list|)
operator|<<
literal|'d'
operator|+
name|veryBigHaystack
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest6"
argument_list|)
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreInsensitiveStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QStringRef
operator|::
name|indexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startpos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bcs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|bcs
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|startpos
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexOf2_data
name|void
name|tst_QStringRef
operator|::
name|indexOf2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data18"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data19"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cd"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ac"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// sizeof(whale)> 32
name|QString
name|whale
init|=
literal|"a5zby6cx7dw8evf9ug0th1si2rj3qkp4lomn"
decl_stmt|;
name|QString
name|minnow
init|=
literal|"zby"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|whale
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
operator|(
name|minnow
operator|+
name|whale
operator|)
operator|<<
name|minnow
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|whale
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|whale
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|(
name|whale
operator|+
name|minnow
operator|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
operator|(
name|minnow
operator|+
name|whale
operator|)
operator|<<
name|whale
operator|<<
operator|(
name|int
operator|)
name|minnow
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf2
name|void
name|tst_QStringRef
operator|::
name|indexOf2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|got
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lastIndexOf_data
name|void
name|tst_QStringRef
operator|::
name|lastIndexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"caseSensitive"
argument_list|)
expr_stmt|;
name|QString
name|a
init|=
literal|"ABCDEFGHIEfGEFG"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|3
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|5
operator|<<
literal|6
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|14
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|13
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|12
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|12
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|11
operator|<<
literal|9
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|"asd"
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
literal|""
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|+
literal|10
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QStringRef
operator|::
name|lastIndexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
operator|(
name|caseSensitive
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QStringRef
operator|::
name|count
parameter_list|()
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ABCDEFGHIEfGEFG"
argument_list|)
decl_stmt|;
comment|// 15 chars
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'A'
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'Z'
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'E'
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'F'
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QStringRef
operator|::
name|contains
parameter_list|()
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ABCDEFGHIEfGEFG"
argument_list|)
decl_stmt|;
comment|// 15 chars
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|contains
argument_list|(
literal|'Z'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'E'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|"FG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"FG"
argument_list|)
operator|.
name|midRef
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|ref2
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" FG "
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|ref2
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
comment|// apparently
block|}
end_function
begin_function
DECL|function|startsWith
name|void
name|tst_QStringRef
operator|::
name|startsWith
parameter_list|()
block|{
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AB"
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QStringRef
name|ref
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QStringRef
operator|::
name|endsWith
parameter_list|()
block|{
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AB"
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QStringRef
name|ref
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_eqeq_nullstring
name|void
name|tst_QStringRef
operator|::
name|operator_eqeq_nullstring
parameter_list|()
block|{
comment|/* Some of these might not be all that logical but it's the behaviour we've had since 3.0.0        so we should probably stick with it. */
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QStringRef
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sign
specifier|static
specifier|inline
name|int
name|sign
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|x
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QStringRef
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"csr"
argument_list|)
expr_stmt|;
comment|// case sensitive result
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cir"
argument_list|)
expr_stmt|;
comment|// case insensitive result
comment|// null strings
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// equal length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
comment|// different length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abCdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QString
name|upper
decl_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|upper
operator|<<
name|lower
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLatin
specifier|static
name|bool
name|isLatin
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|s
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|>
literal|0xff
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QStringRef
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QStringRef
name|r1
argument_list|(
operator|&
name|s1
argument_list|,
literal|0
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QStringRef
name|r2
argument_list|(
operator|&
name|s2
argument_list|,
literal|0
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cir
condition|)
block|{
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|s2
operator|.
name|toCaseFolded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s1
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QStringRef
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstringref.moc"
end_include
end_unit
