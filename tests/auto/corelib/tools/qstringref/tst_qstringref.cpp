begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_class
DECL|class|tst_QStringRef
class|class
name|tst_QStringRef
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|endsWith
parameter_list|()
function_decl|;
name|void
name|startsWith
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|lastIndexOf_data
parameter_list|()
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
function_decl|;
name|void
name|indexOf_data
parameter_list|()
function_decl|;
name|void
name|indexOf
parameter_list|()
function_decl|;
name|void
name|indexOf2_data
parameter_list|()
function_decl|;
name|void
name|indexOf2
parameter_list|()
function_decl|;
name|void
name|length_data
parameter_list|()
function_decl|;
name|void
name|length
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|compare2_data
parameter_list|()
function_decl|;
name|void
name|compare2
parameter_list|()
function_decl|;
name|void
name|operator_eqeq_nullstring
parameter_list|()
function_decl|;
name|void
name|toNum
parameter_list|()
function_decl|;
name|void
name|toDouble_data
parameter_list|()
function_decl|;
name|void
name|toDouble
parameter_list|()
function_decl|;
name|void
name|toFloat
parameter_list|()
function_decl|;
name|void
name|toLong_data
parameter_list|()
function_decl|;
name|void
name|toLong
parameter_list|()
function_decl|;
name|void
name|toULong_data
parameter_list|()
function_decl|;
name|void
name|toULong
parameter_list|()
function_decl|;
name|void
name|toLongLong
parameter_list|()
function_decl|;
name|void
name|toULongLong
parameter_list|()
function_decl|;
name|void
name|toUInt
parameter_list|()
function_decl|;
name|void
name|toInt
parameter_list|()
function_decl|;
name|void
name|toShort
parameter_list|()
function_decl|;
name|void
name|toUShort
parameter_list|()
function_decl|;
name|void
name|double_conversion_data
parameter_list|()
function_decl|;
name|void
name|double_conversion
parameter_list|()
function_decl|;
name|void
name|integer_conversion_data
parameter_list|()
function_decl|;
name|void
name|integer_conversion
parameter_list|()
function_decl|;
name|void
name|trimmed
parameter_list|()
function_decl|;
name|void
name|left
parameter_list|()
function_decl|;
name|void
name|right
parameter_list|()
function_decl|;
name|void
name|mid
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|emptyRef
specifier|static
name|QStringRef
name|emptyRef
parameter_list|()
block|{
specifier|static
specifier|const
name|QString
name|empty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
return|return
name|empty
operator|.
name|midRef
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|CREATE_REF
define|#
directive|define
name|CREATE_REF
parameter_list|(
name|string
parameter_list|)
define|\
value|const QString padded = QString::fromLatin1(" %1 ").arg(string);     \     QStringRef ref = padded.midRef(1, padded.size() - 2);
end_define
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_comment
comment|// This next bit is needed for the NAN and INF in string -> number conversion tests
end_comment
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_comment
comment|// mingw defines NAN and INFINITY to 0/0 and x/0
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_undef
DECL|macro|NAN
undef|#
directive|undef
name|NAN
end_undef
begin_undef
DECL|macro|INFINITY
undef|#
directive|undef
name|INFINITY
end_undef
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|_isnan(d)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
name|isnan
end_if
begin_define
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|__isnand(d)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
end_if
begin_include
include|#
directive|include
file|<ieeefp.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSF
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__DECC
argument_list|)
operator|||
name|defined
argument_list|(
name|__DECCXX
argument_list|)
operator|)
end_if
begin_define
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|DBL_INFINITY
end_define
begin_define
DECL|macro|NAN
define|#
directive|define
name|NAN
value|DBL_QNAN
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_include
include|#
directive|include
file|<ieeefp.h>
end_include
begin_define
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|isnand(d)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_enum
enum|enum
block|{
DECL|enumerator|LittleEndian
name|LittleEndian
block|,
DECL|enumerator|BigEndian
name|BigEndian
ifdef|#
directive|ifdef
name|Q_BYTE_ORDER
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
block|,
DECL|enumerator|ByteOrder
name|ByteOrder
init|=
name|BigEndian
elif|#
directive|elif
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
block|,
name|ByteOrder
init|=
name|LittleEndian
else|#
directive|else
error|#
directive|error
literal|"undefined byte order"
endif|#
directive|endif
block|}
enum|;
end_enum
begin_else
else|#
directive|else
end_else
begin_decl_stmt
unit|};
specifier|static
specifier|const
name|unsigned
name|int
name|one
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|bool
name|ByteOrder
init|=
operator|(
operator|(
operator|*
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|one
operator|)
operator|==
literal|0
operator|)
condition|?
name|BigEndian
else|:
name|LittleEndian
operator|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|INFINITY
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|inf
specifier|static
specifier|inline
name|double
name|inf
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_inf_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_inf_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|(::inf())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_nan_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_nan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|nan
specifier|static
specifier|inline
name|double
name|nan
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_nan_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_nan_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|NAN
define|#
directive|define
name|NAN
value|(::nan())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|cleanup
name|void
name|tst_QStringRef
operator|::
name|cleanup
parameter_list|()
block|{
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QString
argument_list|(
name|QLatin1Char
argument_list|(
literal|'C'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length_data
name|void
name|tst_QStringRef
operator|::
name|length_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
literal|43
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\n"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\nC"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nA"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB\nCDE"
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"shdnftrheid fhgnt gjvnfmd chfugkh bnfhg thgjf vnghturkf chfnguh bjgnfhvygh hnbhgutjfv dhdnjds dcjs d"
argument_list|)
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|void
name|tst_QStringRef
operator|::
name|length
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|ref
operator|.
name|length
argument_list|()
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QStringRef
operator|::
name|isEmpty
parameter_list|()
block|{
name|QStringRef
name|a
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
literal|"Not empty"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf_data
name|void
name|tst_QStringRef
operator|::
name|indexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bcs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data20"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data22"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data24"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data26"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data27"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data28"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data29"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data49"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data50"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data51"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data52"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data53"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data54"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data55"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data57"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
if|#
directive|if
literal|0
block|QTest::newRow("null-in-null")<< QString()<< QString()<< 0<< false<< 0;     QTest::newRow("empty-in-null")<< QString()<< QString("")<< 0<< false<< 0;     QTest::newRow("null-in-empty")<< QString("")<< QString()<< 0<< false<< 0;     QTest::newRow("empty-in-empty")<< QString("")<< QString("")<< 0<< false<< 0;
endif|#
directive|endif
name|QString
name|s1
init|=
literal|"abc"
decl_stmt|;
name|s1
operator|+=
name|QChar
argument_list|(
literal|0xb5
argument_list|)
expr_stmt|;
name|QString
name|s2
decl_stmt|;
name|s2
operator|+=
name|QChar
argument_list|(
literal|0x3bc
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data58"
argument_list|)
operator|<<
name|QString
argument_list|(
name|s1
argument_list|)
operator|<<
name|QString
argument_list|(
name|s2
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|3
expr_stmt|;
name|s2
operator|.
name|prepend
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data59"
argument_list|)
operator|<<
name|QString
argument_list|(
name|s1
argument_list|)
operator|<<
name|QString
argument_list|(
name|s2
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|2
expr_stmt|;
name|QString
name|veryBigHaystack
argument_list|(
literal|500
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|veryBigHaystack
operator|+=
literal|'B'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest2"
argument_list|)
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest3"
argument_list|)
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest4"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest5"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest6"
argument_list|)
operator|<<
literal|'d'
operator|+
name|veryBigHaystack
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest7"
argument_list|)
operator|<<
name|veryBigHaystack
operator|+
literal|'c'
operator|<<
literal|'c'
operator|+
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreInsensitiveStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QStringRef
operator|::
name|indexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startpos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bcs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|bcs
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|startpos
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexOf2_data
name|void
name|tst_QStringRef
operator|::
name|indexOf2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data18"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data19"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cd"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ac"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// sizeof(whale)> 32
name|QString
name|whale
init|=
literal|"a5zby6cx7dw8evf9ug0th1si2rj3qkp4lomn"
decl_stmt|;
name|QString
name|minnow
init|=
literal|"zby"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|whale
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
operator|(
name|minnow
operator|+
name|whale
operator|)
operator|<<
name|minnow
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|whale
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|whale
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
operator|(
name|whale
operator|+
name|whale
operator|)
operator|<<
operator|(
name|whale
operator|+
name|minnow
operator|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
operator|(
name|minnow
operator|+
name|whale
operator|)
operator|<<
name|whale
operator|<<
operator|(
name|int
operator|)
name|minnow
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf2
name|void
name|tst_QStringRef
operator|::
name|indexOf2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|got
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|indexOf
argument_list|(
name|needleRef
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lastIndexOf_data
name|void
name|tst_QStringRef
operator|::
name|lastIndexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"caseSensitive"
argument_list|)
expr_stmt|;
name|QString
name|a
init|=
literal|"ABCDEFGHIEfGEFG"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|3
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|5
operator|<<
literal|6
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|14
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|13
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|12
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|12
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|11
operator|<<
literal|9
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|"asd"
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
literal|""
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|+
literal|10
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QStringRef
operator|::
name|lastIndexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|haystackPadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|haystack
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|needlePadded
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" %1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|needle
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|haystackRef
argument_list|(
operator|&
name|haystackPadded
argument_list|,
literal|1
argument_list|,
name|haystack
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|needleRef
argument_list|(
operator|&
name|needlePadded
argument_list|,
literal|1
argument_list|,
name|needle
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
operator|(
name|caseSensitive
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystackRef
operator|.
name|lastIndexOf
argument_list|(
name|needleRef
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QStringRef
operator|::
name|count
parameter_list|()
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ABCDEFGHIEfGEFG"
argument_list|)
decl_stmt|;
comment|// 15 chars
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'A'
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'Z'
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'E'
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'F'
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|count
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QStringRef
operator|::
name|contains
parameter_list|()
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ABCDEFGHIEfGEFG"
argument_list|)
decl_stmt|;
comment|// 15 chars
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|contains
argument_list|(
literal|'Z'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'E'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|"FG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"FG"
argument_list|)
operator|.
name|midRef
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|ref2
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" FG "
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|ref2
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|contains
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
comment|// apparently
block|}
end_function
begin_function
DECL|function|startsWith
name|void
name|tst_QStringRef
operator|::
name|startsWith
parameter_list|()
block|{
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AB"
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QStringRef
name|ref
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QStringRef
operator|::
name|endsWith
parameter_list|()
block|{
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AB"
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
name|a
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|CREATE_REF
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QStringRef
name|ref
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ref
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_eqeq_nullstring
name|void
name|tst_QStringRef
operator|::
name|operator_eqeq_nullstring
parameter_list|()
block|{
comment|/* Some of these might not be all that logical but it's the behaviour we've had since 3.0.0        so we should probably stick with it. */
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QStringRef
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|()
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sign
specifier|static
specifier|inline
name|int
name|sign
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|x
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QStringRef
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"csr"
argument_list|)
expr_stmt|;
comment|// case sensitive result
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cir"
argument_list|)
expr_stmt|;
comment|// case insensitive result
comment|// null strings
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// equal length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abCdefgh"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789012345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789012345"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123556789012345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789012345"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
comment|// different length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abCdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghi"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"01234567890123456"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0123456789012345"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QString
name|upper
decl_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|upper
operator|<<
name|lower
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLatin
specifier|static
name|bool
name|isLatin
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|s
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|>
literal|0xff
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QStringRef
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QStringRef
name|r1
argument_list|(
operator|&
name|s1
argument_list|,
literal|0
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QStringRef
name|r2
argument_list|(
operator|&
name|s2
argument_list|,
literal|0
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cir
condition|)
block|{
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|s2
operator|.
name|toCaseFolded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s1
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compare2_data
name|void
name|tst_QStringRef
operator|::
name|compare2_data
parameter_list|()
block|{
name|compare_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare2
name|void
name|tst_QStringRef
operator|::
name|compare2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cir
argument_list|)
expr_stmt|;
comment|// prepend and append data
comment|// we only use Latin1 here so isLatin1 still results true
name|s1
operator|.
name|prepend
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|append
argument_list|(
literal|"zyx"
argument_list|)
expr_stmt|;
name|s2
operator|.
name|prepend
argument_list|(
literal|"foobar"
argument_list|)
operator|.
name|append
argument_list|(
literal|"raboof"
argument_list|)
expr_stmt|;
name|QStringRef
name|r1
argument_list|(
operator|&
name|s1
argument_list|,
literal|3
argument_list|,
name|s1
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
decl_stmt|;
name|QStringRef
name|r2
argument_list|(
operator|&
name|s2
argument_list|,
literal|6
argument_list|,
name|s2
operator|.
name|length
argument_list|()
operator|-
literal|12
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
if|if
condition|(
name|isLatin
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|r2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|r2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s1
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r2
argument_list|,
name|QLatin1String
argument_list|(
name|r1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|-
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r2
argument_list|,
name|QLatin1String
argument_list|(
name|r1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
operator|-
name|cir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toNum
name|void
name|tst_QStringRef
operator|::
name|toNum
parameter_list|()
block|{
DECL|macro|TEST_TO_INT
define|#
directive|define
name|TEST_TO_INT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|,
name|type
parameter_list|)
define|\
value|a = #num; \     b = a.leftRef(-1); \     QCOMPARE(b.func(&ok), type(Q_INT64_C(num))); \     QVERIFY2(ok, "Failed: num=" #num);
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toInt
argument_list|,
argument|int
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toInt
argument_list|,
argument|int
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toInt
argument_list|,
argument|int
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|2147483647
argument_list|,
argument|toInt
argument_list|,
argument|int
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|2147483648
argument_list|,
argument|toInt
argument_list|,
argument|int
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toShort
argument_list|,
argument|short
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toShort
argument_list|,
argument|short
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toShort
argument_list|,
argument|short
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|32767
argument_list|,
argument|toShort
argument_list|,
argument|short
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|32768
argument_list|,
argument|toShort
argument_list|,
argument|short
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toLong
argument_list|,
argument|long
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toLong
argument_list|,
argument|long
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toLong
argument_list|,
argument|long
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|2147483647
argument_list|,
argument|toLong
argument_list|,
argument|long
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|2147483648
argument_list|,
argument|toLong
argument_list|,
argument|long
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toLongLong
argument_list|,
argument|(long long)
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toLongLong
argument_list|,
argument|(long long)
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toLongLong
argument_list|,
argument|(long long)
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|9223372036854775807
argument_list|,
argument|toLongLong
argument_list|,
argument|(long long)
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|9223372036854775807
argument_list|,
argument|toLongLong
argument_list|,
argument|(long long)
argument_list|)
DECL|macro|TEST_TO_INT
undef|#
directive|undef
name|TEST_TO_INT
DECL|macro|TEST_TO_UINT
define|#
directive|define
name|TEST_TO_UINT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|,
name|type
parameter_list|)
define|\
value|a = #num; \     b = a.leftRef(-1); \     QCOMPARE(b.func(&ok), type(Q_UINT64_C(num))); \     QVERIFY2(ok, "Failed: num=" #num);
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toUInt
argument_list|,
argument|(unsigned int)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toUInt
argument_list|,
argument|(unsigned int)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|4294967295
argument_list|,
argument|toUInt
argument_list|,
argument|(unsigned int)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toUShort
argument_list|,
argument|(unsigned short)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toUShort
argument_list|,
argument|(unsigned short)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|65535
argument_list|,
argument|toUShort
argument_list|,
argument|(unsigned short)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toULong
argument_list|,
argument|(unsigned long)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toULong
argument_list|,
argument|(unsigned long)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|4294967295
argument_list|,
argument|toULong
argument_list|,
argument|(unsigned long)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toULongLong
argument_list|,
argument|(unsigned long long)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toULongLong
argument_list|,
argument|(unsigned long long)
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|18446744073709551615
argument_list|,
argument|toULongLong
argument_list|,
argument|(unsigned long long)
argument_list|)
DECL|macro|TEST_TO_UINT
undef|#
directive|undef
name|TEST_TO_UINT
DECL|macro|TEST_BASE
define|#
directive|define
name|TEST_BASE
parameter_list|(
name|str
parameter_list|,
name|base
parameter_list|,
name|num
parameter_list|)
define|\
value|a = str; \     b = a.leftRef(-1); \     QCOMPARE(b.toInt(&ok,base), int(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toInt"); \     QCOMPARE(b.toUInt(&ok, base), (unsigned int)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toUInt"); \     QCOMPARE(b.toShort(&ok, base), short(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toShort"); \     QCOMPARE(b.toUShort(&ok, base), (unsigned short)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toUShort"); \     QCOMPARE(b.toLong(&ok, base), long(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toLong"); \     QCOMPARE(b.toULong(&ok, base), (unsigned long)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toULong"); \     QCOMPARE(b.toLongLong(&ok, base), (long long)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toLongLong"); \     QCOMPARE(b.toULongLong(&ok, base), (unsigned long long)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= " #base " num=" #num ", func=toULongLong");
name|TEST_BASE
argument_list|(
literal|"FF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"0xFF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"77"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"077"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"0xFF"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"077"
argument_list|,
literal|0
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"255"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" FF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 0xFF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 77"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 077"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 0xFF"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 077"
argument_list|,
literal|0
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 255"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"\tFF\t"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"\t0xFF  "
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"   77   "
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"77  "
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
DECL|macro|TEST_BASE
undef|#
directive|undef
name|TEST_BASE
DECL|macro|TEST_NEG_BASE
define|#
directive|define
name|TEST_NEG_BASE
parameter_list|(
name|str
parameter_list|,
name|base
parameter_list|,
name|num
parameter_list|)
define|\
value|a = str; \     b = a.leftRef(-1); \     QCOMPARE(b.toInt(&ok, base), int(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toInt"); \     QCOMPARE(b.toShort(&ok,base), short(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toShort"); \     QCOMPARE(b.toLong(&ok, base), long(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLong"); \     QCOMPARE(b.toLongLong(&ok, base), (long long)(num)); \     QVERIFY2(ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLongLong");
name|TEST_NEG_BASE
argument_list|(
literal|"-FE"
argument_list|,
literal|16
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-0xFE"
argument_list|,
literal|16
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-77"
argument_list|,
literal|8
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-077"
argument_list|,
literal|8
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-0xFE"
argument_list|,
literal|0
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-077"
argument_list|,
literal|0
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-254"
argument_list|,
literal|0
argument_list|,
argument|-
literal|254
argument_list|)
DECL|macro|TEST_NEG_BASE
undef|#
directive|undef
name|TEST_NEG_BASE
DECL|macro|TEST_DOUBLE
define|#
directive|define
name|TEST_DOUBLE
parameter_list|(
name|num
parameter_list|,
name|str
parameter_list|)
define|\
value|a = str; \     b = a.leftRef(-1); \     QCOMPARE(b.toDouble(&ok), num); \     QVERIFY(ok);
name|TEST_DOUBLE
argument_list|(
literal|1.2345
argument_list|,
literal|"1.2345"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12.345
argument_list|,
literal|"1.2345e+01"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12.345
argument_list|,
literal|"1.2345E+01"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12345.6
argument_list|,
literal|"12345.6"
argument_list|)
DECL|macro|TEST_DOUBLE
undef|#
directive|undef
name|TEST_DOUBLE
DECL|macro|TEST_BAD
define|#
directive|define
name|TEST_BAD
parameter_list|(
name|str
parameter_list|,
name|func
parameter_list|)
define|\
value|a = str; \     b = a.leftRef(-1); \     b.func(&ok); \     QVERIFY2(!ok, "Failed: str=" #str " func=" #func);
name|TEST_BAD
argument_list|(
literal|"32768"
argument_list|,
argument|toShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-32769"
argument_list|,
argument|toShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"65536"
argument_list|,
argument|toUShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"2147483648"
argument_list|,
argument|toInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-2147483649"
argument_list|,
argument|toInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"4294967296"
argument_list|,
argument|toUInt
argument_list|)
if|if
condition|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|==
literal|4
condition|)
block|{
name|TEST_BAD
argument_list|(
literal|"2147483648"
argument_list|,
argument|toLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-2147483649"
argument_list|,
argument|toLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"4294967296"
argument_list|,
argument|toULong
argument_list|)
block|}
name|TEST_BAD
argument_list|(
literal|"9223372036854775808"
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-9223372036854775809"
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"18446744073709551616"
argument_list|,
argument|toULongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toUShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toUInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toULong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toULongLong
argument_list|)
DECL|macro|TEST_BAD
undef|#
directive|undef
name|TEST_BAD
DECL|macro|TEST_BAD_ALL
define|#
directive|define
name|TEST_BAD_ALL
parameter_list|(
name|str
parameter_list|)
define|\
value|a = str; \     b = a.leftRef(-1); \     b.toShort(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toUShort(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toInt(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toUInt(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toULong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toLongLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toULongLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toFloat(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     b.toDouble(&ok); \     QVERIFY2(!ok, "Failed: str=" #str);
name|TEST_BAD_ALL
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"0x0x0x"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"123-^~<"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"123ThisIsNotANumber"
argument_list|)
expr_stmt|;
DECL|macro|TEST_BAD_ALL
undef|#
directive|undef
name|TEST_BAD_ALL
name|a
operator|=
literal|"FF"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"FF"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FPU
name|double
name|d
init|=
literal|3.40282346638528e+38
decl_stmt|;
comment|// slightly off FLT_MAX when using hardfloats
else|#
directive|else
name|double
name|d
init|=
literal|3.4028234663852886e+38
decl_stmt|;
comment|// FLT_MAX
endif|#
directive|endif
name|QString
operator|::
name|number
argument_list|(
name|d
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
name|d
operator|+
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
operator|-
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
name|d
operator|+
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
operator|-
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUShort
name|void
name|tst_QStringRef
operator|::
name|toUShort
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"32767"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32767"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"65535"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|65535
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|65535
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|==
literal|2
condition|)
block|{
name|a
operator|=
literal|"65536"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123456"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|()
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|ushort
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toShort
name|void
name|tst_QStringRef
operator|::
name|toShort
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"32767"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32767"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
operator|-
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
operator|-
literal|32767
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32768"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
operator|-
literal|32768
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
operator|-
literal|32768
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|==
literal|2
condition|)
block|{
name|a
operator|=
literal|"32768"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32769"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|()
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|short
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toInt
name|void
name|tst_QStringRef
operator|::
name|toInt
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1234567
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|1234567
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"12345678901234"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"3234567890"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa12345aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa12345"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"12345aaa"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483647"
expr_stmt|;
comment|// 2**31 - 1
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2147483647
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|2147483647
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
literal|4
condition|)
block|{
name|a
operator|=
literal|"-2147483647"
expr_stmt|;
comment|// -(2**31 - 1)
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|2147483647
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
literal|2147483647
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483648"
expr_stmt|;
comment|// 2**31
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-2147483648"
expr_stmt|;
comment|// -2**31
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|2147483647
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
literal|2147483647
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483649"
expr_stmt|;
comment|// 2**31 + 1
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toUInt
name|void
name|tst_QStringRef
operator|::
name|toUInt
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|a
operator|=
literal|"3234567890"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|3234567890u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-50"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"4294967295"
expr_stmt|;
comment|// 2**32 - 1
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|4294967295u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|4294967295u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
literal|4
condition|)
block|{
name|a
operator|=
literal|"4294967296"
expr_stmt|;
comment|// 2**32
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|///////////////////////////// to*Long //////////////////////////////////////
end_comment
begin_function
DECL|function|toULong_data
name|void
name|tst_QStringRef
operator|::
name|toULong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ulong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"3234567890"
argument_list|)
operator|<<
literal|10
operator|<<
literal|3234567890UL
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fFFfFfFf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0xFFFFFFFFUL
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULong
name|void
name|tst_QStringRef
operator|::
name|toULong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ulong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|QStringRef
name|strRef
init|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLong_data
name|void
name|tst_QStringRef
operator|::
name|toLong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|long
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"7fFFfFFf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0x7fFFfFFfL
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_max"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
literal|10
operator|<<
literal|2147483647L
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|==
literal|4
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_max+1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_min-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-80000001"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negative"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-7fffffff"
argument_list|)
operator|<<
literal|16
operator|<<
operator|-
literal|0x7fffffffL
operator|<<
literal|true
expr_stmt|;
comment|//    QTest::newRow("long_min")<< QString("-80000000")<< 16<< 0x80000000uL<< true;
block|}
end_function
begin_function
DECL|function|toLong
name|void
name|tst_QStringRef
operator|::
name|toLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|long
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|QStringRef
name|strRef
init|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|////////////////////////// to*LongLong //////////////////////////////////////
end_comment
begin_function
DECL|function|toULongLong
name|void
name|tst_QStringRef
operator|::
name|toULongLong
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|QStringRef
name|strRef
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|str
operator|=
literal|"18446744073709551615"
expr_stmt|;
comment|// ULLONG_MAX
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"18446744073709551616"
expr_stmt|;
comment|// ULLONG_MAX + 1
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"-150"
expr_stmt|;
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLongLong
name|void
name|tst_QStringRef
operator|::
name|toLongLong
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|QStringRef
name|strRef
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|str
operator|=
literal|"9223372036854775807"
expr_stmt|;
comment|// LLONG_MAX
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"-9223372036854775808"
expr_stmt|;
comment|// LLONG_MIN
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"aaaa9223372036854775807aaaa"
expr_stmt|;
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"9223372036854775807aaaa"
expr_stmt|;
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"aaaa9223372036854775807"
expr_stmt|;
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
specifier|static
name|char
name|digits
index|[]
init|=
literal|"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|36
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|36
condition|;
operator|++
name|k
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|strRef
operator|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|qlonglong
name|value
init|=
operator|(
operator|(
operator|(
name|i
operator|*
literal|36
operator|)
operator|+
name|j
operator|)
operator|*
literal|36
operator|)
operator|+
name|k
decl_stmt|;
name|QVERIFY
argument_list|(
name|strRef
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|,
literal|36
argument_list|)
operator|==
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|toFloat
name|void
name|tst_QStringRef
operator|::
name|toFloat
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|a
operator|=
literal|"0.000000000931322574615478515625"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|float
argument_list|(
literal|0.000000000931322574615478515625
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble_data
name|void
name|tst_QStringRef
operator|::
name|toDouble_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result_ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.000000000931322574615478515625"
argument_list|)
operator|<<
literal|0.000000000931322574615478515625
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 123.45"
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.1e10"
argument_list|)
operator|<<
literal|0.1e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.1e-10"
argument_list|)
operator|<<
literal|0.1e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-10"
argument_list|)
operator|<<
literal|1.0e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 1e10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1e+10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   1e-10"
argument_list|)
operator|<<
literal|1.0e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|1.0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|0.1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.45 "
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 123.45 "
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa123.45aa"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.45aa"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123erf"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong06"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble
name|void
name|tst_QStringRef
operator|::
name|toDouble
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result_ok
argument_list|)
expr_stmt|;
name|QStringRef
name|strRef
init|=
name|str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|strRef
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|result_ok
condition|)
block|{
name|QTEST
argument_list|(
name|d
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|integer_conversion_data
name|void
name|tst_QStringRef
operator|::
name|integer_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 8"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 10"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 16"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -0xf 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -0xf"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0xf   0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0xf  "
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t0xf\t 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t0xf\t"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010   0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010  "
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t-010\t 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t-010\t"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   123 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  123"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123   10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123  "
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t123\t 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t123\t"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -0xf 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -0xf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0xf   16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0xf  "
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t0xf\t 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t0xf\t"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x"
argument_list|)
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
comment|// Let's try some Arabic
specifier|const
name|quint16
name|arabic_str
index|[]
init|=
block|{
literal|0x0661
block|,
literal|0x0662
block|,
literal|0x0663
block|,
literal|0x0664
block|,
literal|0x0000
block|}
decl_stmt|;
comment|// "1234"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar_SA 1234 0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|arabic_str
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integer_conversion
name|void
name|tst_QStringRef
operator|::
name|integer_conversion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QStringRef
name|num_strRef
init|=
name|num_str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|qlonglong
name|d
init|=
name|num_strRef
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|double_conversion_data
name|void
name|tst_QStringRef
operator|::
name|double_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
comment|// The good...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
comment|// The bad...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234e-10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234E10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
comment|// And the ugly...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1  "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
comment|// Let's try some Arabic
specifier|const
name|quint16
name|arabic_str
index|[]
init|=
block|{
literal|0x0660
block|,
literal|0x066B
block|,
literal|0x0661
block|,
literal|0x0662
block|,
literal|0x0663
block|,
literal|0x0664
block|,
literal|0x0065
block|,
literal|0x0662
block|,
literal|0x0000
block|}
decl_stmt|;
comment|// "0.1234e2"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar_SA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|arabic_str
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_conversion
name|void
name|tst_QStringRef
operator|::
name|double_conversion
parameter_list|()
block|{
DECL|macro|MY_DOUBLE_EPSILON
define|#
directive|define
name|MY_DOUBLE_EPSILON
value|(2.22045e-16)
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QStringRef
name|num_strRef
init|=
name|num_str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|num_strRef
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|double
name|diff
init|=
name|d
operator|-
name|num
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|diff
operator|=
operator|-
name|diff
expr_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
name|MY_DOUBLE_EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|trimmed
name|void
name|tst_QStringRef
operator|::
name|trimmed
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QStringRef
name|b
decl_stmt|;
name|a
operator|=
literal|"Text"
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Text"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|trimmed
argument_list|()
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Text"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
literal|" "
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|trimmed
argument_list|()
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
literal|" a   "
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|trimmed
argument_list|()
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"Text a   "
expr_stmt|;
name|b
operator|=
name|a
operator|.
name|midRef
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|" a   "
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|trimmed
argument_list|()
operator|.
name|compare
argument_list|(
name|QStringLiteral
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|left
name|void
name|tst_QStringRef
operator|::
name|left
parameter_list|()
block|{
name|QString
name|originalString
init|=
literal|"OrginalString~"
decl_stmt|;
name|QStringRef
name|ref
init|=
name|originalString
operator|.
name|leftRef
argument_list|(
name|originalString
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"OrginalString"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ref
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|left
argument_list|(
name|ref
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"OrginalString"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringRef
name|nullRef
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|left
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|left
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QStringRef
name|emptyRef
argument_list|(
operator|&
name|originalString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|left
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|left
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|left
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|left
argument_list|(
literal|100
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|right
name|void
name|tst_QStringRef
operator|::
name|right
parameter_list|()
block|{
name|QString
name|originalString
init|=
literal|"~OrginalString"
decl_stmt|;
name|QStringRef
name|ref
init|=
name|originalString
operator|.
name|rightRef
argument_list|(
name|originalString
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OrginalString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|right
argument_list|(
name|ref
operator|.
name|size
argument_list|()
operator|-
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"String"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|right
argument_list|(
name|ref
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OrginalString"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OrginalString"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringRef
name|nullRef
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|right
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|right
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QStringRef
name|emptyRef
argument_list|(
operator|&
name|originalString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|right
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|right
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|right
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|right
argument_list|(
literal|100
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mid
name|void
name|tst_QStringRef
operator|::
name|mid
parameter_list|()
block|{
name|QString
name|orig
init|=
name|QStringLiteral
argument_list|(
literal|"~ABCDEFGHIEfGEFG~"
argument_list|)
decl_stmt|;
comment|// 15 + 2 chars
name|QStringRef
name|a
init|=
name|orig
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|orig
operator|.
name|size
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"DEF"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|9999
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|a
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|2
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
operator|.
name|left
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
name|a
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"BCDEFGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"FGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QStringRef
name|nullRef
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|2
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
name|nullRef
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullRef
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|ninePineapples
init|=
literal|"~Nine pineapples~"
decl_stmt|;
name|QStringRef
name|x
init|=
name|ninePineapples
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
name|ninePineapples
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pine"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pineapples~"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|x
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
literal|2
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|x
operator|.
name|left
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MIN
operator|+
name|x
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ine pineapples~"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pineapples~"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QStringRef
name|emptyRef
argument_list|(
operator|&
name|ninePineapples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|mid
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyRef
operator|.
name|mid
argument_list|(
operator|-
literal|10
argument_list|,
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QStringRef
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstringref.moc"
end_include
end_unit
