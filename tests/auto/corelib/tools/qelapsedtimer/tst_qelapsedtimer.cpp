begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTime>
end_include
begin_include
include|#
directive|include
file|<QtCore/QElapsedTimer>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_decl_stmt
DECL|variable|minResolution
specifier|static
specifier|const
name|int
name|minResolution
init|=
literal|50
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|minResolution
comment|// the minimum resolution for the tests
end_comment
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|s
parameter_list|,
specifier|const
name|QElapsedTimer
modifier|&
name|t
parameter_list|)
block|{
name|s
operator|.
name|nospace
argument_list|()
operator|<<
literal|"("
operator|<<
name|t
operator|.
name|msecsSinceReference
argument_list|()
operator|<<
literal|")"
expr_stmt|;
return|return
name|s
operator|.
name|space
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|tst_QElapsedTimer
class|class
name|tst_QElapsedTimer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|statics
parameter_list|()
function_decl|;
name|void
name|validity
parameter_list|()
function_decl|;
name|void
name|basics
parameter_list|()
function_decl|;
name|void
name|elapsed
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|statics
name|void
name|tst_QElapsedTimer
operator|::
name|statics
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Clock type is"
operator|<<
name|QElapsedTimer
operator|::
name|clockType
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Said clock is"
operator|<<
operator|(
name|QElapsedTimer
operator|::
name|isMonotonic
argument_list|()
condition|?
literal|"monotonic"
else|:
literal|"not monotonic"
operator|)
expr_stmt|;
name|QElapsedTimer
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Current time is"
operator|<<
name|t
operator|.
name|msecsSinceReference
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validity
name|void
name|tst_QElapsedTimer
operator|::
name|validity
parameter_list|()
block|{
name|QElapsedTimer
name|t
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// non-POD now, it should always start invalid
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|t
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|invalidate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basics
name|void
name|tst_QElapsedTimer
operator|::
name|basics
parameter_list|()
block|{
name|QElapsedTimer
name|t1
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|msecsSinceReference
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t1
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|t1
operator|!=
name|t1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|t1
operator|<
name|t1
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t1
operator|.
name|msecsTo
argument_list|(
name|t1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t1
operator|.
name|secsTo
argument_list|(
name|t1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|quint64
name|value1
init|=
name|t1
operator|.
name|msecsSinceReference
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"value1:"
operator|<<
name|value1
operator|<<
literal|"t1:"
operator|<<
name|t1
expr_stmt|;
name|qint64
name|nsecs
init|=
name|t1
operator|.
name|nsecsElapsed
argument_list|()
decl_stmt|;
name|qint64
name|elapsed
init|=
name|t1
operator|.
name|restart
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|elapsed
operator|<
name|minResolution
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nsecs
operator|/
literal|1000000
operator|<
name|minResolution
argument_list|)
expr_stmt|;
name|quint64
name|value2
init|=
name|t1
operator|.
name|msecsSinceReference
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"value2:"
operator|<<
name|value2
operator|<<
literal|"t1:"
operator|<<
name|t1
operator|<<
literal|"elapsed:"
operator|<<
name|elapsed
operator|<<
literal|"nsecs:"
operator|<<
name|nsecs
expr_stmt|;
comment|// in theory, elapsed == value2 - value1
comment|// However, since QElapsedTimer keeps internally the full resolution,
comment|// we have here a rounding error due to integer division
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|elapsed
operator|-
name|qint64
argument_list|(
name|value2
operator|-
name|value1
argument_list|)
argument_list|)
operator|<=
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|elapsed
name|void
name|tst_QElapsedTimer
operator|::
name|elapsed
parameter_list|()
block|{
name|QElapsedTimer
name|t1
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|4
operator|*
name|minResolution
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|t2
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|!=
name|t2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|t1
operator|==
name|t2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|<
name|t2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|msecsTo
argument_list|(
name|t2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|nsecsElapsed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|elapsed
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// the number of elapsed nanoseconds and milliseconds should match
name|QVERIFY
argument_list|(
name|t1
operator|.
name|nsecsElapsed
argument_list|()
operator|-
name|t1
operator|.
name|elapsed
argument_list|()
operator|*
literal|1000000
operator|<
literal|1000000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|hasExpired
argument_list|(
name|minResolution
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t1
operator|.
name|hasExpired
argument_list|(
literal|8
operator|*
name|minResolution
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t2
operator|.
name|hasExpired
argument_list|(
name|minResolution
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t1
operator|.
name|hasExpired
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|t2
operator|.
name|hasExpired
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|t1
operator|.
name|restart
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|elapsed
operator|>
literal|3
operator|*
name|minResolution
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|elapsed
operator|<
literal|5
operator|*
name|minResolution
argument_list|)
expr_stmt|;
name|qint64
name|diff
init|=
name|t2
operator|.
name|msecsTo
argument_list|(
name|t1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<
name|minResolution
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|tst_QElapsedTimer
name|QTEST_MAIN
argument_list|(
name|tst_QElapsedTimer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_qelapsedtimer.moc"
end_include
end_unit
