begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/qarraydata.h>
end_include
begin_include
include|#
directive|include
file|"simplevector.h"
end_include
begin_class
DECL|class|tst_QArrayData
class|class
name|tst_QArrayData
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|referenceCounting
parameter_list|()
function_decl|;
name|void
name|sharedNullEmpty
parameter_list|()
function_decl|;
name|void
name|staticData
parameter_list|()
function_decl|;
name|void
name|simpleVector
parameter_list|()
function_decl|;
name|void
name|allocate_data
parameter_list|()
function_decl|;
name|void
name|allocate
parameter_list|()
function_decl|;
name|void
name|alignment_data
parameter_list|()
function_decl|;
name|void
name|alignment
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|referenceCounting
name|void
name|tst_QArrayData
operator|::
name|referenceCounting
parameter_list|()
block|{
block|{
comment|// Reference counting initialized to 1 (owned)
name|QArrayData
name|array
init|=
block|{
name|Q_REFCOUNT_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now would be a good time to free/release allocated data
block|}
block|{
comment|// Reference counting initialized to -1 (static read-only data)
name|QArrayData
name|array
init|=
block|{
name|Q_REFCOUNT_INITIALIZER
argument_list|(
operator|-
literal|1
argument_list|)
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|array
operator|.
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|array
operator|.
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sharedNullEmpty
name|void
name|tst_QArrayData
operator|::
name|sharedNullEmpty
parameter_list|()
block|{
name|QArrayData
modifier|*
name|null
init|=
cast|const_cast
argument_list|<
name|QArrayData
operator|*
argument_list|>
argument_list|(
operator|&
name|QArrayData
operator|::
name|shared_null
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|empty
init|=
cast|const_cast
argument_list|<
name|QArrayData
operator|*
argument_list|>
argument_list|(
operator|&
name|QArrayData
operator|::
name|shared_empty
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|null
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|empty
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|null
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|empty
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|null
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|empty
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|null
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|empty
operator|->
name|ref
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|!=
name|empty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|alloc
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|capacityReserved
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|alloc
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|capacityReserved
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|staticData
name|void
name|tst_QArrayData
operator|::
name|staticData
parameter_list|()
block|{
name|QStaticArrayData
argument_list|<
name|char
argument_list|,
literal|10
argument_list|>
name|charArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|char
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|}
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
name|intArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|double
argument_list|,
literal|10
argument_list|>
name|doubleArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|double
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|0.f
block|,
literal|1.f
block|,
literal|2.f
block|,
literal|3.f
block|,
literal|4.f
block|,
literal|5.f
block|,
literal|6.f
block|,
literal|7.f
block|,
literal|8.f
block|,
literal|9.f
block|}
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|charArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doubleArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|charArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|charArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|intArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doubleArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|doubleArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simpleVector
name|void
name|tst_QArrayData
operator|::
name|simpleVector
parameter_list|()
block|{
name|QArrayData
name|data0
init|=
block|{
name|Q_REFCOUNT_INITIALIZER
argument_list|(
operator|-
literal|1
argument_list|)
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|7
argument_list|>
name|data1
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|7
argument_list|)
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v3
argument_list|(
operator|&
name|data0
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v4
argument_list|(
operator|&
name|data1
operator|.
name|header
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v5
argument_list|(
operator|&
name|data0
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v6
argument_list|(
operator|&
name|data1
operator|.
name|header
argument_list|)
decl_stmt|;
name|v3
operator|=
name|v1
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|v4
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// v6.capacity() is unspecified, for now
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|constBegin
argument_list|()
operator|==
name|v1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|constBegin
argument_list|()
operator|==
name|v4
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|constBegin
argument_list|()
operator|+
name|v6
operator|.
name|size
argument_list|()
operator|==
name|v6
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|==
name|v6
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|!=
name|v5
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|<
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v6
operator|<
name|v1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|>
name|v1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|>
name|v6
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|<=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v6
operator|<=
name|v1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|>=
name|v1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|>=
name|v6
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|front
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|back
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v6
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|v6
index|[
name|i
index|]
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|v6
index|[
name|i
index|]
argument_list|,
operator|&
name|v6
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|v5
operator|=
name|v6
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
block|{
using|using
name|std
operator|::
name|swap
using|;
name|swap
argument_list|(
name|v1
argument_list|,
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|Deallocator
struct|struct
name|Deallocator
block|{
DECL|function|Deallocator
name|Deallocator
parameter_list|(
name|size_t
name|objectSize
parameter_list|,
name|size_t
name|alignment
parameter_list|)
member_init_list|:
name|objectSize
argument_list|(
name|objectSize
argument_list|)
member_init_list|,
name|alignment
argument_list|(
name|alignment
argument_list|)
block|{     }
DECL|function|~Deallocator
name|~
name|Deallocator
parameter_list|()
block|{
name|Q_FOREACH
argument_list|(
argument|QArrayData *data
argument_list|,
argument|headers
argument_list|)
name|QArrayData
operator|::
name|deallocate
argument_list|(
name|data
argument_list|,
name|objectSize
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
DECL|member|objectSize
name|size_t
name|objectSize
decl_stmt|;
DECL|member|alignment
name|size_t
name|alignment
decl_stmt|;
DECL|member|headers
name|QVector
argument_list|<
name|QArrayData
modifier|*
argument_list|>
name|headers
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|const QArrayData *
argument_list|)
end_macro
begin_function
DECL|function|allocate_data
name|void
name|tst_QArrayData
operator|::
name|allocate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"objectSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isCapacityReserved"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QArrayData
operator|*
argument_list|>
argument_list|(
literal|"commonEmpty"
argument_list|)
expr_stmt|;
struct|struct
block|{
name|char
specifier|const
modifier|*
name|typeName
decl_stmt|;
name|size_t
name|objectSize
decl_stmt|;
name|size_t
name|alignment
decl_stmt|;
block|}
name|types
index|[]
init|=
block|{
block|{
literal|"char"
block|,
sizeof|sizeof
argument_list|(
name|char
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|char
argument_list|)
block|}
block|,
block|{
literal|"short"
block|,
sizeof|sizeof
argument_list|(
name|short
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|short
argument_list|)
block|}
block|,
block|{
literal|"void *"
block|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|void *
argument_list|)
block|}
block|}
struct|;
struct|struct
block|{
name|char
specifier|const
modifier|*
name|description
decl_stmt|;
name|bool
name|isCapacityReserved
decl_stmt|;
specifier|const
name|QArrayData
modifier|*
name|commonEmpty
decl_stmt|;
block|}
name|options
index|[]
init|=
block|{
block|{
literal|"Default"
block|,
literal|false
block|,
operator|&
name|QArrayData
operator|::
name|shared_empty
block|}
block|,
block|{
literal|"Reserved"
block|,
literal|true
block|,
operator|&
name|QArrayData
operator|::
name|shared_empty
block|}
block|,     }
struct|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|types
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
sizeof|sizeof
argument_list|(
name|options
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|options
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|j
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QLatin1String
argument_list|(
name|types
index|[
name|i
index|]
operator|.
name|typeName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|options
index|[
name|j
index|]
operator|.
name|description
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|types
index|[
name|i
index|]
operator|.
name|objectSize
operator|<<
name|types
index|[
name|i
index|]
operator|.
name|alignment
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|isCapacityReserved
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|commonEmpty
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allocate
name|void
name|tst_QArrayData
operator|::
name|allocate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|objectSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
specifier|const
name|QArrayData
operator|*
argument_list|,
name|commonEmpty
argument_list|)
expr_stmt|;
comment|// Minimum alignment that can be requested is that of QArrayData.
comment|// Typically, this alignment is sizeof(void *) and ensured by malloc.
name|size_t
name|minAlignment
init|=
name|qMax
argument_list|(
name|alignment
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
decl_stmt|;
comment|// Shared Empty
name|QCOMPARE
argument_list|(
name|QArrayData
operator|::
name|allocate
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|,
literal|0
argument_list|,
name|isCapacityReserved
argument_list|)
argument_list|,
name|commonEmpty
argument_list|)
expr_stmt|;
name|Deallocator
name|keeper
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|reserve
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|capacity
init|=
literal|1
init|;
name|capacity
operator|<=
literal|1024
condition|;
name|capacity
operator|<<=
literal|1
control|)
block|{
name|QArrayData
modifier|*
name|data
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|,
name|capacity
argument_list|,
name|isCapacityReserved
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|alloc
operator|>=
name|uint
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|capacityReserved
argument_list|,
name|uint
argument_list|(
name|isCapacityReserved
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|,
literal|'A'
argument_list|,
name|objectSize
operator|*
name|capacity
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|Unaligned
class|class
name|Unaligned
block|{
DECL|member|dummy
name|char
name|dummy
index|[
literal|8
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|alignment_data
name|void
name|tst_QArrayData
operator|::
name|alignment_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|size_t
name|alignment
init|=
literal|1u
operator|<<
name|i
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|alignment
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|alignment
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alignment
name|void
name|tst_QArrayData
operator|::
name|alignment
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
comment|// Minimum alignment that can be requested is that of QArrayData.
comment|// Typically, this alignment is sizeof(void *) and ensured by malloc.
name|size_t
name|minAlignment
init|=
name|qMax
argument_list|(
name|alignment
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
decl_stmt|;
name|Deallocator
name|keeper
argument_list|(
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
argument_list|,
name|minAlignment
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|reserve
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QArrayData
modifier|*
name|data
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
argument_list|,
name|minAlignment
argument_list|,
literal|8
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|alloc
operator|>=
name|uint
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// These conditions should hold as long as header and array are
comment|// allocated together
name|QVERIFY
argument_list|(
name|data
operator|->
name|offset
operator|>=
name|qptrdiff
argument_list|(
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|offset
operator|<=
name|qptrdiff
argument_list|(
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
operator|+
name|minAlignment
operator|-
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Data is aligned
name|QCOMPARE
argument_list|(
name|quintptr
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|)
operator|%
name|alignment
argument_list|,
name|quintptr
argument_list|(
literal|0u
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|,
literal|'A'
argument_list|,
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QArrayData
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qarraydata.moc"
end_include
end_unit
