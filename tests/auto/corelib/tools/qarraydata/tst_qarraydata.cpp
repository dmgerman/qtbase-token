begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/qarraydata.h>
end_include
begin_include
include|#
directive|include
file|"simplevector.h"
end_include
begin_struct
DECL|struct|SharedNullVerifier
struct|struct
name|SharedNullVerifier
block|{
DECL|function|SharedNullVerifier
name|SharedNullVerifier
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|QArrayData
operator|::
name|shared_null
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QArrayData
operator|::
name|shared_null
operator|.
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|QArrayData
operator|::
name|shared_null
operator|.
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_comment
comment|// This is meant to verify/ensure that shared_null is not being dynamically
end_comment
begin_comment
comment|// initialized and stays away from the order-of-static-initialization fiasco.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// Of course, if this was to fail, qmake and the build should have crashed and
end_comment
begin_comment
comment|// burned before we ever got to this point :-)
end_comment
begin_decl_stmt
DECL|variable|globalInit
name|SharedNullVerifier
name|globalInit
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QArrayData
class|class
name|tst_QArrayData
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|referenceCounting
parameter_list|()
function_decl|;
name|void
name|sharedNullEmpty
parameter_list|()
function_decl|;
name|void
name|staticData
parameter_list|()
function_decl|;
name|void
name|simpleVector
parameter_list|()
function_decl|;
name|void
name|allocate_data
parameter_list|()
function_decl|;
name|void
name|allocate
parameter_list|()
function_decl|;
name|void
name|alignment_data
parameter_list|()
function_decl|;
name|void
name|alignment
parameter_list|()
function_decl|;
name|void
name|typedData
parameter_list|()
function_decl|;
name|void
name|gccBug43247
parameter_list|()
function_decl|;
name|void
name|arrayOps
parameter_list|()
function_decl|;
name|void
name|setSharable_data
parameter_list|()
function_decl|;
name|void
name|setSharable
parameter_list|()
function_decl|;
name|void
name|fromRawData
parameter_list|()
function_decl|;
name|void
name|literals
parameter_list|()
function_decl|;
name|void
name|variadicLiterals
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|const_
template|template
parameter_list|<
name|class
name|T
parameter_list|>
specifier|const
name|T
modifier|&
name|const_
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|referenceCounting
name|void
name|tst_QArrayData
operator|::
name|referenceCounting
parameter_list|()
block|{
block|{
comment|// Reference counting initialized to 1 (owned)
name|QArrayData
name|array
init|=
block|{
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|}
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now would be a good time to free/release allocated data
block|}
block|{
comment|// Reference counting initialized to 0 (non-sharable)
name|QArrayData
name|array
init|=
block|{
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
block|}
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reference counting fails, data should be copied
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Free/release data
block|}
block|{
comment|// Reference counting initialized to -1 (static read-only data)
name|QArrayData
name|array
init|=
block|{
name|Q_REFCOUNT_INITIALIZE_STATIC
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sharedNullEmpty
name|void
name|tst_QArrayData
operator|::
name|sharedNullEmpty
parameter_list|()
block|{
name|QArrayData
modifier|*
name|null
init|=
cast|const_cast
argument_list|<
name|QArrayData
operator|*
argument_list|>
argument_list|(
operator|&
name|QArrayData
operator|::
name|shared_null
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|empty
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
literal|1
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|->
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|deref
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|ref
operator|.
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|!=
name|empty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|alloc
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|capacityReserved
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|alloc
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|capacityReserved
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|staticData
name|void
name|tst_QArrayData
operator|::
name|staticData
parameter_list|()
block|{
name|QStaticArrayData
argument_list|<
name|char
argument_list|,
literal|10
argument_list|>
name|charArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|char
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|}
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
name|intArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|double
argument_list|,
literal|10
argument_list|>
name|doubleArray
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|double
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|0.f
block|,
literal|1.f
block|,
literal|2.f
block|,
literal|3.f
block|,
literal|4.f
block|,
literal|5.f
block|,
literal|6.f
block|,
literal|7.f
block|,
literal|8.f
block|,
literal|9.f
block|}
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|charArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doubleArray
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|charArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|charArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|intArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doubleArray
operator|.
name|header
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
operator|&
name|doubleArray
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simpleVector
name|void
name|tst_QArrayData
operator|::
name|simpleVector
parameter_list|()
block|{
name|QArrayData
name|data0
init|=
block|{
name|Q_REFCOUNT_INITIALIZE_STATIC
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|7
argument_list|>
name|data1
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|7
argument_list|)
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|}
block|}
decl_stmt|;
name|int
name|array
index|[]
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v3
argument_list|(
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data0
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v4
argument_list|(
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data1
operator|.
name|header
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v5
argument_list|(
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data0
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v6
argument_list|(
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data1
operator|.
name|header
argument_list|)
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v7
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v8
argument_list|(
name|array
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|array
argument_list|)
argument_list|)
decl_stmt|;
name|v3
operator|=
name|v1
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v3
argument_list|)
expr_stmt|;
name|v4
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v4
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v5
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v6
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v8
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v5
operator|.
name|capacity
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// v6.capacity() is unspecified, for now
name|QVERIFY
argument_list|(
name|v7
operator|.
name|capacity
argument_list|()
operator|>=
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v8
operator|.
name|capacity
argument_list|()
operator|>=
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|SimpleVector
argument_list|<
name|int
argument_list|>
argument_list|(
name|v7
argument_list|)
operator|,
name|v7
operator|.
name|isShared
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v8
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v3
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v7
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v8
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|constBegin
argument_list|()
operator|==
name|v1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|.
name|constBegin
argument_list|()
operator|==
name|v4
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|constBegin
argument_list|()
operator|+
name|v6
operator|.
name|size
argument_list|()
operator|==
name|v6
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v7
operator|.
name|constBegin
argument_list|()
operator|+
name|v7
operator|.
name|size
argument_list|()
operator|==
name|v7
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v8
operator|.
name|constBegin
argument_list|()
operator|+
name|v8
operator|.
name|size
argument_list|()
operator|==
name|v8
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|==
name|v6
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v4
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|!=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|!=
name|v5
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|<
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v6
operator|<
name|v1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|>
name|v1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|>
name|v6
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|<=
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v6
operator|<=
name|v1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|>=
name|v1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|v1
operator|>=
name|v6
operator|)
argument_list|)
expr_stmt|;
block|{
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|temp
argument_list|(
name|v6
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v6
argument_list|)
operator|.
name|front
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v6
argument_list|)
operator|.
name|back
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temp
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|front
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|back
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Detached
name|QVERIFY
argument_list|(
operator|!
name|temp
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
modifier|*
specifier|const
name|tempBegin
init|=
name|temp
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v6
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v6
argument_list|)
index|[
name|i
index|]
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v6
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|const_
argument_list|(
name|v6
argument_list|)
index|[
name|i
index|]
argument_list|,
operator|&
name|const_
argument_list|(
name|v6
argument_list|)
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v8
argument_list|)
index|[
name|i
index|]
argument_list|,
name|const_
argument_list|(
name|v6
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
index|[
name|i
index|]
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|int
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|temp
index|[
name|i
index|]
argument_list|,
operator|&
name|temp
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// A single detach should do
name|QCOMPARE
argument_list|(
name|temp
operator|.
name|begin
argument_list|()
argument_list|,
name|tempBegin
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|int value
argument_list|,
argument|v7
argument_list|)
block|{
name|QCOMPARE
argument_list|(
name|value
argument_list|,
literal|5
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|int value
argument_list|,
argument|v8
argument_list|)
block|{
name|QCOMPARE
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|v5
operator|=
name|v6
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v6
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
block|{
using|using
name|std
operator|::
name|swap
using|;
name|swap
argument_list|(
name|v1
argument_list|,
name|v6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v5
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v5
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|v1
operator|.
name|prepend
argument_list|(
name|array
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v8
argument_list|)
expr_stmt|;
name|v6
operator|=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|prepend
argument_list|(
name|array
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v1
index|[
name|i
index|]
argument_list|,
name|v6
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
name|v1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|v1
operator|.
name|append
argument_list|(
name|array
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|==
name|v8
argument_list|)
expr_stmt|;
name|v6
operator|=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|append
argument_list|(
name|array
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v1
index|[
name|i
index|]
argument_list|,
name|v6
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|v6
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v6
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|v6
operator|=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
name|v6
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v6
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v6
index|[
name|i
index|]
argument_list|,
name|v8
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|v6
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v6
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
name|v8
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v8
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
operator|-
literal|11
argument_list|,
name|v8
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v8
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|v1
operator|.
name|insert
argument_list|(
operator|-
literal|200
argument_list|,
name|v8
operator|.
name|constBegin
argument_list|()
argument_list|,
name|v8
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|120
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|120
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v1
index|[
name|i
index|]
argument_list|,
name|v8
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
block|{
name|v7
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v7
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|copy1
argument_list|(
name|v7
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy1
operator|.
name|isSharedWith
argument_list|(
name|v7
argument_list|)
argument_list|)
expr_stmt|;
name|v7
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v7
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy1
operator|.
name|isSharedWith
argument_list|(
name|v7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v7
operator|.
name|size
argument_list|()
argument_list|,
name|copy1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v7
index|[
name|i
index|]
argument_list|,
name|copy1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|clone
argument_list|(
name|v7
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|clone
operator|.
name|isSharedWith
argument_list|(
name|v7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|.
name|size
argument_list|()
argument_list|,
name|copy1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|copy1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|clone
index|[
name|i
index|]
argument_list|,
name|copy1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|v7
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v7
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|copy2
argument_list|(
name|v7
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy2
operator|.
name|isSharedWith
argument_list|(
name|v7
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|null
decl_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|null
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|empty
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|null
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|empty
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|null
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|null
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|empty
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|Deallocator
struct|struct
name|Deallocator
block|{
DECL|function|Deallocator
name|Deallocator
parameter_list|(
name|size_t
name|objectSize
parameter_list|,
name|size_t
name|alignment
parameter_list|)
member_init_list|:
name|objectSize
argument_list|(
name|objectSize
argument_list|)
member_init_list|,
name|alignment
argument_list|(
name|alignment
argument_list|)
block|{     }
DECL|function|~Deallocator
name|~
name|Deallocator
parameter_list|()
block|{
name|Q_FOREACH
argument_list|(
argument|QArrayData *data
argument_list|,
argument|headers
argument_list|)
name|QArrayData
operator|::
name|deallocate
argument_list|(
name|data
argument_list|,
name|objectSize
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
block|}
DECL|member|objectSize
name|size_t
name|objectSize
decl_stmt|;
DECL|member|alignment
name|size_t
name|alignment
decl_stmt|;
DECL|member|headers
name|QVector
argument_list|<
name|QArrayData
modifier|*
argument_list|>
name|headers
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|const QArrayData *
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QArrayData::AllocationOptions
argument_list|)
end_macro
begin_function
DECL|function|allocate_data
name|void
name|tst_QArrayData
operator|::
name|allocate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"objectSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QArrayData
operator|::
name|AllocationOptions
argument_list|>
argument_list|(
literal|"allocateOptions"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isCapacityReserved"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isSharable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QArrayData
operator|*
argument_list|>
argument_list|(
literal|"commonEmpty"
argument_list|)
expr_stmt|;
struct|struct
block|{
name|char
specifier|const
modifier|*
name|typeName
decl_stmt|;
name|size_t
name|objectSize
decl_stmt|;
name|size_t
name|alignment
decl_stmt|;
block|}
name|types
index|[]
init|=
block|{
block|{
literal|"char"
block|,
sizeof|sizeof
argument_list|(
name|char
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|char
argument_list|)
block|}
block|,
block|{
literal|"short"
block|,
sizeof|sizeof
argument_list|(
name|short
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|short
argument_list|)
block|}
block|,
block|{
literal|"void *"
block|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
block|,
name|Q_ALIGNOF
argument_list|(
argument|void *
argument_list|)
block|}
block|}
struct|;
name|QArrayData
modifier|*
name|shared_empty
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
literal|0
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|unsharable_empty
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
literal|0
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|,
literal|0
argument_list|,
name|QArrayData
operator|::
name|Unsharable
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|shared_empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|unsharable_empty
argument_list|)
expr_stmt|;
struct|struct
block|{
name|char
specifier|const
modifier|*
name|description
decl_stmt|;
name|QArrayData
operator|::
name|AllocationOptions
name|allocateOptions
decl_stmt|;
name|bool
name|isCapacityReserved
decl_stmt|;
name|bool
name|isSharable
decl_stmt|;
specifier|const
name|QArrayData
modifier|*
name|commonEmpty
decl_stmt|;
block|}
name|options
index|[]
init|=
block|{
block|{
literal|"Default"
block|,
name|QArrayData
operator|::
name|Default
block|,
literal|false
block|,
literal|true
block|,
name|shared_empty
block|}
block|,
block|{
literal|"Reserved"
block|,
name|QArrayData
operator|::
name|CapacityReserved
block|,
literal|true
block|,
literal|true
block|,
name|shared_empty
block|}
block|,
block|{
literal|"Reserved | Unsharable"
block|,
name|QArrayData
operator|::
name|CapacityReserved
operator||
name|QArrayData
operator|::
name|Unsharable
block|,
literal|true
block|,
literal|false
block|,
name|unsharable_empty
block|}
block|,
block|{
literal|"Unsharable"
block|,
name|QArrayData
operator|::
name|Unsharable
block|,
literal|false
block|,
literal|false
block|,
name|unsharable_empty
block|}
block|,     }
struct|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|types
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|types
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
sizeof|sizeof
argument_list|(
name|options
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|options
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|j
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QLatin1String
argument_list|(
name|types
index|[
name|i
index|]
operator|.
name|typeName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|options
index|[
name|j
index|]
operator|.
name|description
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|types
index|[
name|i
index|]
operator|.
name|objectSize
operator|<<
name|types
index|[
name|i
index|]
operator|.
name|alignment
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|allocateOptions
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|isCapacityReserved
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|isSharable
operator|<<
name|options
index|[
name|j
index|]
operator|.
name|commonEmpty
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allocate
name|void
name|tst_QArrayData
operator|::
name|allocate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|objectSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QArrayData
operator|::
name|AllocationOptions
argument_list|,
name|allocateOptions
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isSharable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
specifier|const
name|QArrayData
operator|*
argument_list|,
name|commonEmpty
argument_list|)
expr_stmt|;
comment|// Minimum alignment that can be requested is that of QArrayData.
comment|// Typically, this alignment is sizeof(void *) and ensured by malloc.
name|size_t
name|minAlignment
init|=
name|qMax
argument_list|(
name|alignment
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
decl_stmt|;
comment|// Shared Empty
name|QCOMPARE
argument_list|(
name|QArrayData
operator|::
name|allocate
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|,
literal|0
argument_list|,
name|QArrayData
operator|::
name|AllocationOptions
argument_list|(
name|allocateOptions
argument_list|)
argument_list|)
argument_list|,
name|commonEmpty
argument_list|)
expr_stmt|;
name|Deallocator
name|keeper
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|reserve
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|capacity
init|=
literal|1
init|;
name|capacity
operator|<=
literal|1024
condition|;
name|capacity
operator|<<=
literal|1
control|)
block|{
name|QArrayData
modifier|*
name|data
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
name|objectSize
argument_list|,
name|minAlignment
argument_list|,
name|capacity
argument_list|,
name|QArrayData
operator|::
name|AllocationOptions
argument_list|(
name|allocateOptions
argument_list|)
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|alloc
operator|>=
name|uint
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|capacityReserved
argument_list|,
name|uint
argument_list|(
name|isCapacityReserved
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|,
name|isSharable
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|,
literal|'A'
argument_list|,
name|objectSize
operator|*
name|capacity
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|Unaligned
class|class
name|Unaligned
block|{
DECL|member|dummy
name|char
name|dummy
index|[
literal|8
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|alignment_data
name|void
name|tst_QArrayData
operator|::
name|alignment_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"alignment"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|size_t
name|alignment
init|=
literal|1u
operator|<<
name|i
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|alignment
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|alignment
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alignment
name|void
name|tst_QArrayData
operator|::
name|alignment
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
comment|// Minimum alignment that can be requested is that of QArrayData.
comment|// Typically, this alignment is sizeof(void *) and ensured by malloc.
name|size_t
name|minAlignment
init|=
name|qMax
argument_list|(
name|alignment
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
decl_stmt|;
name|Deallocator
name|keeper
argument_list|(
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
argument_list|,
name|minAlignment
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|reserve
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QArrayData
modifier|*
name|data
init|=
name|QArrayData
operator|::
name|allocate
argument_list|(
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
argument_list|,
name|minAlignment
argument_list|,
literal|8
argument_list|,
name|QArrayData
operator|::
name|Default
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|alloc
operator|>=
name|uint
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
comment|// These conditions should hold as long as header and array are
comment|// allocated together
name|QVERIFY
argument_list|(
name|data
operator|->
name|offset
operator|>=
name|qptrdiff
argument_list|(
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|->
name|offset
operator|<=
name|qptrdiff
argument_list|(
sizeof|sizeof
argument_list|(
name|QArrayData
argument_list|)
operator|+
name|minAlignment
operator|-
name|Q_ALIGNOF
argument_list|(
name|QArrayData
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Data is aligned
name|QCOMPARE
argument_list|(
name|quintptr
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|)
operator|%
name|alignment
argument_list|,
name|quintptr
argument_list|(
literal|0u
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|data
operator|->
name|data
argument_list|()
argument_list|,
literal|'A'
argument_list|,
sizeof|sizeof
argument_list|(
name|Unaligned
argument_list|)
operator|*
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|typedData
name|void
name|tst_QArrayData
operator|::
name|typedData
parameter_list|()
block|{
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
name|data
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|header
operator|.
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|{
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
modifier|*
name|array
init|=
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data
operator|.
name|header
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|data
argument_list|)
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|iter
init|=
name|array
operator|->
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|array
operator|->
name|end
argument_list|()
condition|;
operator|++
name|iter
operator|,
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|iter
argument_list|,
name|data
operator|.
name|data
operator|+
name|j
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|j
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
modifier|*
name|array
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|data
operator|.
name|header
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|data
argument_list|()
argument_list|,
name|data
operator|.
name|data
argument_list|)
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|iter
init|=
name|array
operator|->
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|array
operator|->
name|end
argument_list|()
condition|;
operator|++
name|iter
operator|,
operator|++
name|j
control|)
name|QCOMPARE
argument_list|(
name|iter
argument_list|,
name|data
operator|.
name|data
operator|+
name|j
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|j
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
modifier|*
name|null
init|=
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|sharedNull
argument_list|()
decl_stmt|;
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
modifier|*
name|empty
init|=
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|!=
name|empty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|->
name|begin
argument_list|()
argument_list|,
name|null
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|->
name|begin
argument_list|()
argument_list|,
name|empty
operator|->
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|Deallocator
name|keeper
argument_list|(
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QTypedArrayData
argument_list|<
name|char
argument_list|>
operator|::
name|AlignmentDummy
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|array
init|=
name|QTypedArrayData
argument_list|<
name|char
argument_list|>
operator|::
name|allocate
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|alloc
argument_list|,
literal|10u
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|array
operator|->
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
operator|*
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
expr_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTypedArrayData
argument_list|<
name|short
argument_list|>
operator|::
name|deallocate
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
name|Deallocator
name|keeper
argument_list|(
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QTypedArrayData
argument_list|<
name|short
argument_list|>
operator|::
name|AlignmentDummy
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|array
init|=
name|QTypedArrayData
argument_list|<
name|short
argument_list|>
operator|::
name|allocate
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|alloc
argument_list|,
literal|10u
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|array
operator|->
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
operator|*
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTypedArrayData
argument_list|<
name|short
argument_list|>
operator|::
name|deallocate
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
name|Deallocator
name|keeper
argument_list|(
sizeof|sizeof
argument_list|(
name|double
argument_list|)
argument_list|,
name|Q_ALIGNOF
argument_list|(
name|QTypedArrayData
argument_list|<
name|double
argument_list|>
operator|::
name|AlignmentDummy
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayData
modifier|*
name|array
init|=
name|QTypedArrayData
argument_list|<
name|double
argument_list|>
operator|::
name|allocate
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|append
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|alloc
argument_list|,
literal|10u
argument_list|)
expr_stmt|;
comment|// Check that the allocated array can be used. Best tested with a
comment|// memory checker, such as valgrind, running.
operator|::
name|memset
argument_list|(
name|array
operator|->
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|10
operator|*
sizeof|sizeof
argument_list|(
name|double
argument_list|)
argument_list|)
expr_stmt|;
name|keeper
operator|.
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTypedArrayData
argument_list|<
name|double
argument_list|>
operator|::
name|deallocate
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|gccBug43247
name|void
name|tst_QArrayData
operator|::
name|gccBug43247
parameter_list|()
block|{
comment|// This test tries to verify QArrayData is not affected by GCC optimizer
comment|// bug #43247.
comment|// Reported on GCC 4.4.3, Linux, affects QVector
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"GCC Optimization bug #43247 not triggered (3)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"GCC Optimization bug #43247 not triggered (4)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"GCC Optimization bug #43247 not triggered (5)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"GCC Optimization bug #43247 not triggered (6)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"GCC Optimization bug #43247 not triggered (7)"
argument_list|)
expr_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|array
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// QVector<int> vector(10, 0);
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|>=
literal|3
operator|&&
name|i
operator|<
literal|8
condition|)
name|qDebug
argument_list|(
literal|"GCC Optimization bug #43247 not triggered (%i)"
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// When access to data is implemented through an array of size 1, this
comment|// line lets the compiler assume i == 0, and the conditional above is
comment|// skipped.
name|QVERIFY
argument_list|(
name|array
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// QVERIFY(vector.at(i) == 0);
block|}
block|}
end_function
begin_struct
DECL|struct|CountedObject
struct|struct
name|CountedObject
block|{
DECL|function|CountedObject
name|CountedObject
parameter_list|()
member_init_list|:
name|id
argument_list|(
name|liveCount
operator|++
argument_list|)
block|{     }
DECL|function|CountedObject
name|CountedObject
parameter_list|(
specifier|const
name|CountedObject
modifier|&
name|other
parameter_list|)
member_init_list|:
name|id
argument_list|(
name|other
operator|.
name|id
argument_list|)
block|{
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|~CountedObject
name|~
name|CountedObject
parameter_list|()
block|{
operator|--
name|liveCount
expr_stmt|;
block|}
DECL|function|operator =
name|CountedObject
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|CountedObject
modifier|&
name|other
parameter_list|)
block|{
name|id
operator|=
name|other
operator|.
name|id
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|struct|LeakChecker
struct|struct
name|LeakChecker
block|{
DECL|function|LeakChecker
name|LeakChecker
parameter_list|()
member_init_list|:
name|previousLiveCount
argument_list|(
name|liveCount
argument_list|)
block|{         }
DECL|function|~LeakChecker
name|~
name|LeakChecker
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|previousLiveCount
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|previousLiveCount
specifier|const
name|size_t
name|previousLiveCount
decl_stmt|;
block|}
struct|;
DECL|member|id
name|size_t
name|id
decl_stmt|;
comment|// not unique
DECL|member|liveCount
specifier|static
name|size_t
name|liveCount
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|liveCount
name|size_t
name|CountedObject
operator|::
name|liveCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|arrayOps
name|void
name|tst_QArrayData
operator|::
name|arrayOps
parameter_list|()
block|{
name|CountedObject
operator|::
name|LeakChecker
name|leakChecker
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|leakChecker
argument_list|)
specifier|const
name|int
name|intArray
index|[
literal|5
index|]
init|=
block|{
literal|80
block|,
literal|101
block|,
literal|100
block|,
literal|114
block|,
literal|111
block|}
decl_stmt|;
specifier|const
name|QString
name|stringArray
index|[
literal|5
index|]
init|=
block|{
name|QLatin1String
argument_list|(
literal|"just"
argument_list|)
block|,
name|QLatin1String
argument_list|(
literal|"for"
argument_list|)
block|,
name|QLatin1String
argument_list|(
literal|"testing"
argument_list|)
block|,
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
block|,
name|QLatin1String
argument_list|(
literal|"vector"
argument_list|)
block|}
decl_stmt|;
specifier|const
name|CountedObject
name|objArray
index|[
literal|5
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isComplex
operator|&&
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|QString
argument_list|>
operator|::
name|isComplex
operator|&&
operator|!
name|QTypeInfo
argument_list|<
name|QString
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|CountedObject
argument_list|>
operator|::
name|isComplex
operator|&&
name|QTypeInfo
argument_list|<
name|CountedObject
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|CountedObject
operator|::
name|liveCount
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|objArray
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// copyAppend (I)
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|vi
argument_list|(
name|intArray
argument_list|,
name|intArray
operator|+
literal|5
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|QString
argument_list|>
name|vs
argument_list|(
name|stringArray
argument_list|,
name|stringArray
operator|+
literal|5
argument_list|)
decl_stmt|;
name|SimpleVector
argument_list|<
name|CountedObject
argument_list|>
name|vo
argument_list|(
name|objArray
argument_list|,
name|objArray
operator|+
literal|5
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|CountedObject
operator|::
name|liveCount
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|intArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|stringArray
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|objArray
index|[
name|i
index|]
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// destroyAll
name|vi
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|vo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|CountedObject
operator|::
name|liveCount
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// copyAppend (II)
name|int
name|referenceInt
init|=
literal|7
decl_stmt|;
name|QString
name|referenceString
init|=
name|QLatin1String
argument_list|(
literal|"reference"
argument_list|)
decl_stmt|;
name|CountedObject
name|referenceObject
decl_stmt|;
name|vi
operator|=
name|SimpleVector
argument_list|<
name|int
argument_list|>
argument_list|(
literal|5
argument_list|,
name|referenceInt
argument_list|)
expr_stmt|;
name|vs
operator|=
name|SimpleVector
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|5
argument_list|,
name|referenceString
argument_list|)
expr_stmt|;
name|vo
operator|=
name|SimpleVector
argument_list|<
name|CountedObject
argument_list|>
argument_list|(
literal|5
argument_list|,
name|referenceObject
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vi
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vs
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|CountedObject
operator|::
name|liveCount
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|referenceInt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|referenceString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|referenceObject
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////////////////////////////////////////////
comment|// insert
name|vi
operator|.
name|reserve
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|vs
operator|.
name|reserve
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|vo
operator|.
name|reserve
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vi
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vs
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vi
operator|.
name|capacity
argument_list|()
operator|>=
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
operator|.
name|capacity
argument_list|()
operator|>=
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vo
operator|.
name|capacity
argument_list|()
operator|>=
literal|30
argument_list|)
expr_stmt|;
comment|// Displace as many elements as array is extended by
name|vi
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|intArray
argument_list|,
name|intArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|vs
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|stringArray
argument_list|,
name|stringArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|vo
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|objArray
argument_list|,
name|objArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vi
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vs
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// Displace more elements than array is extended by
name|vi
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|intArray
argument_list|,
name|intArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|vs
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|stringArray
argument_list|,
name|stringArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|vo
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|objArray
argument_list|,
name|objArray
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vi
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vs
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
comment|// Displace less elements than array is extended by
name|vi
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
name|vi
operator|.
name|constBegin
argument_list|()
argument_list|,
name|vi
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|vs
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
name|vs
operator|.
name|constBegin
argument_list|()
argument_list|,
name|vs
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|vo
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
name|vo
operator|.
name|constBegin
argument_list|()
argument_list|,
name|vo
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vi
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vs
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|CountedObject
operator|::
name|liveCount
argument_list|,
name|size_t
argument_list|(
literal|36
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|intArray
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|stringArray
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|objArray
index|[
name|i
operator|%
literal|5
index|]
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|15
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|referenceInt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|referenceString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|referenceObject
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|20
init|;
name|i
operator|<
literal|25
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|intArray
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|stringArray
index|[
name|i
operator|%
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|objArray
index|[
name|i
operator|%
literal|5
index|]
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|25
init|;
name|i
operator|<
literal|30
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|vi
index|[
name|i
index|]
argument_list|,
name|referenceInt
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vs
index|[
name|i
index|]
operator|.
name|isSharedWith
argument_list|(
name|referenceString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vo
index|[
name|i
index|]
operator|.
name|id
argument_list|,
name|referenceObject
operator|.
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QArrayDataPointer<int>
argument_list|)
end_macro
begin_function
DECL|function|arrayIsFilledWith
specifier|static
specifier|inline
name|bool
name|arrayIsFilledWith
parameter_list|(
specifier|const
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
modifier|&
name|array
parameter_list|,
name|int
name|fillValue
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
specifier|const
name|int
modifier|*
name|iter
init|=
name|array
operator|->
name|begin
argument_list|()
decl_stmt|;
specifier|const
name|int
modifier|*
specifier|const
name|end
init|=
name|array
operator|->
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
operator|,
operator|++
name|iter
control|)
if|if
condition|(
operator|*
name|iter
operator|!=
name|fillValue
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iter
operator|!=
name|end
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setSharable_data
name|void
name|tst_QArrayData
operator|::
name|setSharable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"array"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|size_t
argument_list|>
argument_list|(
literal|"capacity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isCapacityReserved"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fillValue"
argument_list|)
expr_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|null
decl_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|empty
decl_stmt|;
name|empty
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|static
name|QStaticArrayData
argument_list|<
name|int
argument_list|,
literal|10
argument_list|>
name|staticArrayData
init|=
block|{
name|Q_STATIC_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
block|,
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|}
decl_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|emptyReserved
argument_list|(
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|allocate
argument_list|(
literal|5
argument_list|,
name|QArrayData
operator|::
name|CapacityReserved
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|nonEmpty
argument_list|(
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|allocate
argument_list|(
literal|10
argument_list|,
name|QArrayData
operator|::
name|Default
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|nonEmptyReserved
argument_list|(
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|::
name|allocate
argument_list|(
literal|15
argument_list|,
name|QArrayData
operator|::
name|CapacityReserved
argument_list|)
argument_list|)
decl_stmt|;
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|staticArray
argument_list|(
cast|static_cast
argument_list|<
name|QTypedArrayData
argument_list|<
name|int
argument_list|>
operator|*
argument_list|>
argument_list|(
operator|&
name|staticArrayData
operator|.
name|header
argument_list|)
argument_list|)
decl_stmt|;
name|nonEmpty
operator|->
name|copyAppend
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|->
name|copyAppend
argument_list|(
literal|7
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shared-null"
argument_list|)
operator|<<
name|null
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shared-empty"
argument_list|)
operator|<<
name|empty
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
comment|// unsharable-empty implicitly tested in shared-empty
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-reserved"
argument_list|)
operator|<<
name|emptyReserved
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|5
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty"
argument_list|)
operator|<<
name|nonEmpty
operator|<<
name|size_t
argument_list|(
literal|5
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|10
argument_list|)
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty-reserved"
argument_list|)
operator|<<
name|nonEmptyReserved
operator|<<
name|size_t
argument_list|(
literal|7
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|15
argument_list|)
operator|<<
literal|true
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"static-array"
argument_list|)
operator|<<
name|staticArray
operator|<<
name|size_t
argument_list|(
literal|10
argument_list|)
operator|<<
name|size_t
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharable
name|void
name|tst_QArrayData
operator|::
name|setSharable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|size_t
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fillValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
comment|// QTest has a copy
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|size
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|alloc
argument_list|)
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|array
operator|->
name|capacityReserved
argument_list|)
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arrayIsFilledWith
argument_list|(
name|array
argument_list|,
name|fillValue
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
comment|// shared-null becomes shared-empty, may otherwise detach
name|array
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arrayIsFilledWith
argument_list|(
name|array
argument_list|,
name|fillValue
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Unshare, must detach
name|array
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Immutability (alloc == 0) is lost on detach
if|if
condition|(
name|capacity
operator|==
literal|0
operator|&&
name|size
operator|!=
literal|0
condition|)
name|capacity
operator|=
name|size
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|size
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|alloc
argument_list|)
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|array
operator|->
name|capacityReserved
argument_list|)
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arrayIsFilledWith
argument_list|(
name|array
argument_list|,
name|fillValue
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
comment|// Null/empty is always shared
name|QCOMPARE
argument_list|(
name|copy
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|,
operator|!
operator|(
name|size
operator|||
name|isCapacityReserved
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|copy
operator|->
name|size
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|copy
operator|->
name|alloc
argument_list|)
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|copy
operator|->
name|capacityReserved
argument_list|)
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arrayIsFilledWith
argument_list|(
name|copy
argument_list|,
name|fillValue
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make sharable, again
name|array
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|,
operator|!
operator|(
name|size
operator|||
name|isCapacityReserved
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|size
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size_t
argument_list|(
name|array
operator|->
name|alloc
argument_list|)
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bool
argument_list|(
name|array
operator|->
name|capacityReserved
argument_list|)
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arrayIsFilledWith
argument_list|(
name|array
argument_list|,
name|fillValue
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isShared
argument_list|()
argument_list|,
operator|!
operator|(
name|size
operator|||
name|isCapacityReserved
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|->
name|ref
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromRawData
name|void
name|tst_QArrayData
operator|::
name|fromRawData
parameter_list|()
block|{
specifier|static
specifier|const
name|int
name|array
index|[]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|}
decl_stmt|;
block|{
comment|// Default: Immutable, sharable
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|raw
init|=
name|SimpleVector
argument_list|<
name|int
argument_list|>
operator|::
name|fromRawData
argument_list|(
name|array
argument_list|,
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QArrayData
operator|::
name|Default
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constBegin
argument_list|()
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constEnd
argument_list|()
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|raw
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SimpleVector
argument_list|<
name|int
argument_list|>
argument_list|(
name|raw
argument_list|)
operator|.
name|isSharedWith
argument_list|(
name|raw
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|raw
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
comment|// Detach
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|back
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|raw
operator|.
name|constBegin
argument_list|()
operator|!=
name|array
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Immutable, unsharable
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|raw
init|=
name|SimpleVector
argument_list|<
name|int
argument_list|>
operator|::
name|fromRawData
argument_list|(
name|array
argument_list|,
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QArrayData
operator|::
name|Unsharable
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constBegin
argument_list|()
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constEnd
argument_list|()
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isSharedWith
argument_list|(
name|raw
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|raw
operator|.
name|isShared
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|copy
argument_list|)
index|[
name|i
index|]
argument_list|,
name|const_
argument_list|(
name|raw
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constBegin
argument_list|()
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|constEnd
argument_list|()
argument_list|,
name|array
operator|+
sizeof|sizeof
argument_list|(
name|array
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|array
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Detach
name|QCOMPARE
argument_list|(
name|raw
operator|.
name|back
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|raw
operator|.
name|constBegin
argument_list|()
operator|!=
name|array
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|literals
name|void
name|tst_QArrayData
operator|::
name|literals
parameter_list|()
block|{
block|{
name|QArrayDataPointer
argument_list|<
name|char
argument_list|>
name|d
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|char
argument_list|,
literal|"ABCDEFGHIJ"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|size
argument_list|,
literal|10
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
argument_list|,
name|char
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// wchar_t is not necessarily 2-bytes
name|QArrayDataPointer
argument_list|<
name|wchar_t
argument_list|>
name|d
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|wchar_t
argument_list|,
literal|L"ABCDEFGHIJ"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|size
argument_list|,
literal|10
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
argument_list|,
name|wchar_t
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|SimpleVector
argument_list|<
name|char
argument_list|>
name|v
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|char
argument_list|,
literal|"ABCDEFGHIJ"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
comment|// v.capacity() is unspecified, for now
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_VARIADIC_MACROS
argument_list|)
expr|\
operator|&&
operator|(
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|)
name|QVERIFY
argument_list|(
name|v
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|v
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constBegin
argument_list|()
operator|+
name|v
operator|.
name|size
argument_list|()
operator|==
name|v
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v
argument_list|)
index|[
name|i
index|]
argument_list|,
name|char
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v
argument_list|)
index|[
literal|10
index|]
argument_list|,
name|char
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|variadicLiterals
name|void
name|tst_QArrayData
operator|::
name|variadicLiterals
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_VARIADIC_MACROS
argument_list|)
expr|\
operator|&&
operator|(
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|)
block|{
name|QArrayDataPointer
argument_list|<
name|int
argument_list|>
name|d
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|int
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|{
name|QArrayDataPointer
argument_list|<
name|char
argument_list|>
name|d
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|char
argument_list|,
literal|'A'
argument_list|,
literal|'B'
argument_list|,
literal|'C'
argument_list|,
literal|'D'
argument_list|,
literal|'E'
argument_list|,
literal|'F'
argument_list|,
literal|'G'
argument_list|,
literal|'H'
argument_list|,
literal|'I'
argument_list|,
literal|'J'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
argument_list|,
name|char
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QArrayDataPointer
argument_list|<
specifier|const
name|char
modifier|*
argument_list|>
name|d
init|=
name|Q_ARRAY_LITERAL
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|,
literal|"G"
argument_list|,
literal|"H"
argument_list|,
literal|"I"
argument_list|,
literal|"J"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|size
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|char
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|->
name|data
argument_list|()
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|SimpleVector
argument_list|<
name|int
argument_list|>
name|v
init|=
name|Q_ARRAY_LITERAL
argument_list|(
name|int
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
name|size_t
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
comment|// v.capacity() is unspecified, for now
name|QVERIFY
argument_list|(
name|v
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isSharable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|constBegin
argument_list|()
operator|+
name|v
operator|.
name|size
argument_list|()
operator|==
name|v
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|v
argument_list|)
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Variadic Q_ARRAY_LITERAL not available in current configuration."
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// defined(Q_COMPILER_VARIADIC_MACROS)
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QArrayData
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qarraydata.moc"
end_include
end_unit
