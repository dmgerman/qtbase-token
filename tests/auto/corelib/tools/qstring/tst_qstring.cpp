begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qstringmatcher.h>
end_include
begin_include
include|#
directive|include
file|<qbytearraymatcher.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qlonglong
argument_list|)
end_macro
begin_define
DECL|macro|CREATE_REF
define|#
directive|define
name|CREATE_REF
parameter_list|(
name|string
parameter_list|)
define|\
value|const QString padded = QString::fromLatin1(" %1 ").arg(string);     \     QStringRef ref = padded.midRef(1, padded.size() - 2);
end_define
begin_class
DECL|class|tst_QString
class|class
name|tst_QString
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QString
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|fromStdString
parameter_list|()
function_decl|;
name|void
name|toStdString
parameter_list|()
function_decl|;
name|void
name|check_QTextIOStream
parameter_list|()
function_decl|;
name|void
name|check_QTextStream
parameter_list|()
function_decl|;
name|void
name|check_QDataStream
parameter_list|()
function_decl|;
name|void
name|fromRawData
parameter_list|()
function_decl|;
name|void
name|setRawData
parameter_list|()
function_decl|;
name|void
name|endsWith
parameter_list|()
function_decl|;
name|void
name|startsWith
parameter_list|()
function_decl|;
name|void
name|setNum
parameter_list|()
function_decl|;
name|void
name|toDouble_data
parameter_list|()
function_decl|;
name|void
name|toDouble
parameter_list|()
function_decl|;
name|void
name|toFloat
parameter_list|()
function_decl|;
name|void
name|toLong_data
parameter_list|()
function_decl|;
name|void
name|toLong
parameter_list|()
function_decl|;
name|void
name|toULong_data
parameter_list|()
function_decl|;
name|void
name|toULong
parameter_list|()
function_decl|;
name|void
name|toLongLong
parameter_list|()
function_decl|;
name|void
name|toULongLong
parameter_list|()
function_decl|;
name|void
name|toUInt
parameter_list|()
function_decl|;
name|void
name|toInt
parameter_list|()
function_decl|;
name|void
name|toShort
parameter_list|()
function_decl|;
name|void
name|toUShort
parameter_list|()
function_decl|;
name|void
name|replace_qchar_qchar_data
parameter_list|()
function_decl|;
name|void
name|replace_qchar_qchar
parameter_list|()
function_decl|;
name|void
name|replace_qchar_qstring_data
parameter_list|()
function_decl|;
name|void
name|replace_qchar_qstring
parameter_list|()
function_decl|;
name|void
name|replace_uint_uint_data
parameter_list|()
function_decl|;
name|void
name|replace_uint_uint
parameter_list|()
function_decl|;
name|void
name|replace_uint_uint_extra
parameter_list|()
function_decl|;
name|void
name|replace_string_data
parameter_list|()
function_decl|;
name|void
name|replace_string
parameter_list|()
function_decl|;
name|void
name|replace_regexp_data
parameter_list|()
function_decl|;
name|void
name|replace_regexp
parameter_list|()
function_decl|;
name|void
name|remove_uint_uint_data
parameter_list|()
function_decl|;
name|void
name|remove_uint_uint
parameter_list|()
function_decl|;
name|void
name|remove_string_data
parameter_list|()
function_decl|;
name|void
name|remove_string
parameter_list|()
function_decl|;
name|void
name|remove_regexp_data
parameter_list|()
function_decl|;
name|void
name|remove_regexp
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|prepend
parameter_list|()
function_decl|;
name|void
name|prepend_bytearray_data
parameter_list|()
function_decl|;
name|void
name|prepend_bytearray
parameter_list|()
function_decl|;
name|void
name|append
parameter_list|()
function_decl|;
name|void
name|append_bytearray_data
parameter_list|()
function_decl|;
name|void
name|append_bytearray
parameter_list|()
function_decl|;
name|void
name|operator_pluseq_bytearray_data
parameter_list|()
function_decl|;
name|void
name|operator_pluseq_bytearray
parameter_list|()
function_decl|;
name|void
name|operator_eqeq_nullstring
parameter_list|()
function_decl|;
name|void
name|operator_smaller
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|simplified_data
parameter_list|()
function_decl|;
name|void
name|simplified
parameter_list|()
function_decl|;
name|void
name|trimmed
parameter_list|()
function_decl|;
name|void
name|toUpper
parameter_list|()
function_decl|;
name|void
name|toLower
parameter_list|()
function_decl|;
name|void
name|toCaseFolded
parameter_list|()
function_decl|;
name|void
name|rightJustified
parameter_list|()
function_decl|;
name|void
name|leftJustified
parameter_list|()
function_decl|;
name|void
name|mid
parameter_list|()
function_decl|;
name|void
name|right
parameter_list|()
function_decl|;
name|void
name|left
parameter_list|()
function_decl|;
name|void
name|midRef
parameter_list|()
function_decl|;
name|void
name|rightRef
parameter_list|()
function_decl|;
name|void
name|leftRef
parameter_list|()
function_decl|;
name|void
name|stringRef
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|lastIndexOf_data
parameter_list|()
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
function_decl|;
name|void
name|indexOf_data
parameter_list|()
function_decl|;
name|void
name|indexOf
parameter_list|()
function_decl|;
name|void
name|indexOf2_data
parameter_list|()
function_decl|;
name|void
name|indexOf2
parameter_list|()
function_decl|;
name|void
name|indexOf3_data
parameter_list|()
function_decl|;
comment|//  void indexOf3();
name|void
name|sprintf
parameter_list|()
function_decl|;
name|void
name|fill
parameter_list|()
function_decl|;
name|void
name|truncate
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|constructorQByteArray_data
parameter_list|()
function_decl|;
name|void
name|constructorQByteArray
parameter_list|()
function_decl|;
name|void
name|STL
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|isNull
parameter_list|()
function_decl|;
name|void
name|acc_01
parameter_list|()
function_decl|;
name|void
name|length_data
parameter_list|()
function_decl|;
name|void
name|length
parameter_list|()
function_decl|;
name|void
name|utf8_data
parameter_list|()
function_decl|;
name|void
name|utf8
parameter_list|()
function_decl|;
name|void
name|fromUtf8_data
parameter_list|()
function_decl|;
name|void
name|fromUtf8
parameter_list|()
function_decl|;
name|void
name|nullFromUtf8
parameter_list|()
function_decl|;
name|void
name|fromLocal8Bit_data
parameter_list|()
function_decl|;
name|void
name|fromLocal8Bit
parameter_list|()
function_decl|;
name|void
name|local8Bit_data
parameter_list|()
function_decl|;
name|void
name|local8Bit
parameter_list|()
function_decl|;
name|void
name|fromLatin1Roundtrip_data
parameter_list|()
function_decl|;
name|void
name|fromLatin1Roundtrip
parameter_list|()
function_decl|;
name|void
name|toLatin1Roundtrip_data
parameter_list|()
function_decl|;
name|void
name|toLatin1Roundtrip
parameter_list|()
function_decl|;
name|void
name|stringRef_toLatin1Roundtrip_data
parameter_list|()
function_decl|;
name|void
name|stringRef_toLatin1Roundtrip
parameter_list|()
function_decl|;
name|void
name|stringRef_utf8_data
parameter_list|()
function_decl|;
name|void
name|stringRef_utf8
parameter_list|()
function_decl|;
name|void
name|stringRef_local8Bit_data
parameter_list|()
function_decl|;
name|void
name|stringRef_local8Bit
parameter_list|()
function_decl|;
name|void
name|fromLatin1
parameter_list|()
function_decl|;
name|void
name|fromAscii
parameter_list|()
function_decl|;
name|void
name|arg
parameter_list|()
function_decl|;
name|void
name|number
parameter_list|()
function_decl|;
name|void
name|arg_fillChar_data
parameter_list|()
function_decl|;
name|void
name|arg_fillChar
parameter_list|()
function_decl|;
name|void
name|capacity_data
parameter_list|()
function_decl|;
name|void
name|capacity
parameter_list|()
function_decl|;
name|void
name|section_data
parameter_list|()
function_decl|;
name|void
name|section
parameter_list|()
function_decl|;
name|void
name|double_conversion_data
parameter_list|()
function_decl|;
name|void
name|double_conversion
parameter_list|()
function_decl|;
name|void
name|integer_conversion_data
parameter_list|()
function_decl|;
name|void
name|integer_conversion
parameter_list|()
function_decl|;
name|void
name|tortureSprintfDouble
parameter_list|()
function_decl|;
name|void
name|toNum
parameter_list|()
function_decl|;
name|void
name|localeAwareCompare_data
parameter_list|()
function_decl|;
name|void
name|localeAwareCompare
parameter_list|()
function_decl|;
name|void
name|split_data
parameter_list|()
function_decl|;
name|void
name|split
parameter_list|()
function_decl|;
name|void
name|split_regexp
parameter_list|()
function_decl|;
name|void
name|fromUtf16_data
parameter_list|()
function_decl|;
name|void
name|fromUtf16
parameter_list|()
function_decl|;
name|void
name|latin1String
parameter_list|()
function_decl|;
name|void
name|nanAndInf
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|resizeAfterFromRawData
parameter_list|()
function_decl|;
name|void
name|resizeAfterReserve
parameter_list|()
function_decl|;
name|void
name|resizeWithNegative
parameter_list|()
specifier|const
function_decl|;
name|void
name|truncateWithNegative
parameter_list|()
specifier|const
function_decl|;
name|void
name|QCharRefMutableUnicode
parameter_list|()
specifier|const
function_decl|;
name|void
name|QCharRefDetaching
parameter_list|()
specifier|const
function_decl|;
name|void
name|sprintfZU
parameter_list|()
specifier|const
function_decl|;
name|void
name|repeatedSignature
parameter_list|()
specifier|const
function_decl|;
name|void
name|repeated
parameter_list|()
specifier|const
function_decl|;
name|void
name|repeated_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|compareRef
parameter_list|()
function_decl|;
name|void
name|arg_locale
parameter_list|()
function_decl|;
name|void
name|toUpperLower_icu
parameter_list|()
function_decl|;
name|void
name|literals
parameter_list|()
function_decl|;
name|void
name|reserve
parameter_list|()
function_decl|;
name|void
name|toHtmlEscaped_data
parameter_list|()
function_decl|;
name|void
name|toHtmlEscaped
parameter_list|()
function_decl|;
name|void
name|operatorGreaterWithQLatin1String
parameter_list|()
function_decl|;
name|void
name|compareQLatin1Strings
parameter_list|()
function_decl|;
name|void
name|fromQLatin1StringWithLength
parameter_list|()
function_decl|;
name|void
name|assignQLatin1String
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QVariant>
argument_list|)
end_macro
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|IntList
argument_list|)
comment|// This next bit is needed for the NAN and INF in string -> number conversion tests
include|#
directive|include
file|<float.h>
include|#
directive|include
file|<limits.h>
include|#
directive|include
file|<math.h>
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
include|#
directive|include
file|<windows.h>
comment|// mingw defines NAN and INFINITY to 0/0 and x/0
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
DECL|macro|NAN
undef|#
directive|undef
name|NAN
DECL|macro|INFINITY
undef|#
directive|undef
name|INFINITY
else|#
directive|else
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|_isnan(d)
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
name|isnan
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|__isnand(d)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
include|#
directive|include
file|<ieeefp.h>
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_OSF
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__DECC
argument_list|)
operator|||
name|defined
argument_list|(
name|__DECCXX
argument_list|)
operator|)
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|DBL_INFINITY
DECL|macro|NAN
define|#
directive|define
name|NAN
value|DBL_QNAN
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
include|#
directive|include
file|<ieeefp.h>
DECL|macro|isnan
define|#
directive|define
name|isnan
parameter_list|(
name|d
parameter_list|)
value|isnand(d)
endif|#
directive|endif
expr|enum
block|{
DECL|enumerator|LittleEndian
name|LittleEndian
block|,
DECL|enumerator|BigEndian
name|BigEndian
ifdef|#
directive|ifdef
name|Q_BYTE_ORDER
if|#
directive|if
name|Q_BYTE_ORDER
operator|==
name|Q_BIG_ENDIAN
block|,
DECL|enumerator|ByteOrder
name|ByteOrder
operator|=
name|BigEndian
elif|#
directive|elif
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
block|,
name|ByteOrder
operator|=
name|LittleEndian
else|#
directive|else
error|#
directive|error
literal|"undefined byte order"
endif|#
directive|endif
block|}
expr_stmt|;
end_expr_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
unit|};
specifier|static
specifier|const
name|unsigned
name|int
name|one
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
specifier|const
name|bool
name|ByteOrder
init|=
operator|(
operator|(
operator|*
operator|(
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|one
operator|)
operator|==
literal|0
operator|)
condition|?
name|BigEndian
else|:
name|LittleEndian
operator|)
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|INFINITY
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_inf_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_inf_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_inf_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf0
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|inf
specifier|static
specifier|inline
name|double
name|inf
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_inf_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_inf_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|INFINITY
define|#
directive|define
name|INFINITY
value|(::inf())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NAN
argument_list|)
end_if
begin_decl_stmt
DECL|variable|be_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|be_nan_bytes
index|[]
init|=
block|{
literal|0x7f
block|,
literal|0xf8
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|le_nan_bytes
specifier|static
specifier|const
name|unsigned
name|char
name|le_nan_bytes
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0xf8
block|,
literal|0x7f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|nan
specifier|static
specifier|inline
name|double
name|nan
parameter_list|()
block|{
if|if
condition|(
name|ByteOrder
operator|==
name|BigEndian
condition|)
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|be_nan_bytes
argument_list|)
return|;
return|return
operator|*
cast|reinterpret_cast
argument_list|<
specifier|const
name|double
operator|*
argument_list|>
argument_list|(
name|le_nan_bytes
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|NAN
define|#
directive|define
name|NAN
value|(::nan())
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|tst_QString
name|tst_QString
operator|::
name|tst_QString
parameter_list|()
block|{
name|QTextCodec
operator|::
name|setCodecForLocale
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO 8859-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|cleanup
name|void
name|tst_QString
operator|::
name|cleanup
parameter_list|()
block|{
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QString
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_uint_uint_data
name|void
name|tst_QString
operator|::
name|remove_uint_uint_data
parameter_list|()
block|{
name|replace_uint_uint_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_string_data
name|void
name|tst_QString
operator|::
name|remove_string_data
parameter_list|()
block|{
name|replace_string_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_regexp_data
name|void
name|tst_QString
operator|::
name|remove_regexp_data
parameter_list|()
block|{
name|replace_regexp_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf3_data
name|void
name|tst_QString
operator|::
name|indexOf3_data
parameter_list|()
block|{
name|indexOf2_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length_data
name|void
name|tst_QString
operator|::
name|length_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"The quick brown fox jumps over the lazy dog"
argument_list|)
operator|<<
literal|43
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\n"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB\nC"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nA"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\nAB\nCDE"
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"shdnftrheid fhgnt gjvnfmd chfugkh bnfhg thgjf vnghturkf chfnguh bjgnfhvygh hnbhgutjfv dhdnjds dcjs d"
argument_list|)
operator|<<
literal|100
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_qchar_qchar_data
name|void
name|tst_QString
operator|::
name|replace_qchar_qchar_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'O'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'O'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|' '
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" b bABAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|' '
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" b b B B"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|()
operator|<<
name|QChar
argument_list|(
literal|' '
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_qchar_qchar
name|void
name|tst_QString
operator|::
name|replace_qchar_qchar
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|replace
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
argument_list|(
name|cs
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_qchar_qstring_data
name|void
name|tst_QString
operator|::
name|replace_qchar_qstring_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aA"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faAaA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aA"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faAaA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'O'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aA"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'O'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aA"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"faAaA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  "
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  b  bABAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  "
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  b  b  B  B"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"  "
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
operator|<<
name|QChar
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababABAB"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_qchar_qstring
name|void
name|tst_QString
operator|::
name|replace_qchar_qstring
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|replace
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
argument_list|(
name|cs
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_uint_uint_data
name|void
name|tst_QString
operator|::
name|replace_uint_uint_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"index"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-<>ABCABCABCABC>"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCABCABCABC>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCABCABCABC>"
argument_list|)
operator|<<
literal|1
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCABC>"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCABC>"
argument_list|)
operator|<<
literal|8
operator|<<
literal|4
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCABC"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCABC"
argument_list|)
operator|<<
literal|7
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABXCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABXCAB"
argument_list|)
operator|<<
literal|4
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|"Y"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABYCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABYCAB"
argument_list|)
operator|<<
literal|4
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9999
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9999
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XXABCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AXXBCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACXXCAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|3
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACAXXAB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|4
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABXXB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|5
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCXX"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|6
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAXX"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep12"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"short"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep14"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"short"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XX"
argument_list|)
expr_stmt|;
comment|// This is a regression test for an old bug where QString would add index and len parameters,
comment|// potentially causing integer overflow.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no overflow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|1
operator|<<
name|INT_MAX
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overflow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ACABCAB"
argument_list|)
operator|<<
literal|1
operator|<<
name|INT_MAX
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_string_data
name|void
name|tst_QString
operator|::
name|replace_string_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bcs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AB"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AA"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABA"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"banana"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"an"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ba"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem14"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem15"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem16"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem18"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem19"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem20"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem22"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alpha beta"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"lph bet"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A-C"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"$()*+.?[\\]^{|}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"$()*+.?[\\]^{|}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABCDEF"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"XAXBXCXDXEXFX"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Alpha beta"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"olpho beto"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep13"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fooxbarxbazxblub"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"yz"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fooyzbaryzbazyzblub"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fooxbarxbazxblub"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foozbarzbazzblub"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fooxybarxybazxyblub"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foozbarzbazzblub"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_regexp_data
name|void
name|tst_QString
operator|::
name|replace_regexp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"alpha"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"lph"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"banana"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem04"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"^.a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rem05"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"^.a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A<i>bon mot</i>."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<i>([^<]*)</i>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\emph{\\1}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A \\emph{bon mot}."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"banana"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.a()"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"banana"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(ba)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1X\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"baXbanana"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rep03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"banana"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(ba)(na)na"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\2X\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"naXba"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1\\2\\3\\4\\5\\6\\7\\8\\9\\A\\10\\11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\\\[34]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"X"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1\\2XX\\5\\6\\7\\8\\9\\A\\10\\11"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[fo]"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\1\\1\\1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"([fo])"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(\\1)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(f)(o)(o)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"([fo])"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\2\\2\\2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"([fo])"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f0o0o0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"([fo])"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f1o1o1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"([fo])"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\19"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f9o9o9"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(f)(o+)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\2\\1\\10\\20\\11\\22\\19\\29\\3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ooff0oo0f1oo2f9oo9\\3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((((((((((((([abc]))))))))))))))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"{\\14}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"{a}{b}{c}"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefghijklmn"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)(n)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\19\\18\\17\\16\\15\\14\\13\\12\\11\\10"
literal|"\\9\\90\\8\\80\\7\\70\\6\\60\\5\\50\\4\\40\\3\\30\\2\\20\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a9a8a7a6a5nmlkjii0hh0gg0ff0ee0dd0cc0bb0a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backref10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((((((((((((((abc))))))))))))))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\0\\01\\011"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\0\\01\\011"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8_data
name|void
name|tst_QString
operator|::
name|utf8_data
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\366\344\374\326\304\334\370\346\345\330\306\305"
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05e9
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d3
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\327\251\327\223\327\222"
argument_list|)
operator|<<
name|str
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x20ac
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|" some text"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\202\254 some text"
argument_list|)
operator|<<
name|str
expr_stmt|;
name|str
operator|=
literal|"Old Italic: "
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf00
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf01
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf02
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf03
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf04
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"surrogate"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Old Italic: \360\220\214\200\360\220\214\201\360\220\214\202\360\220\214\203\360\220\214\204"
argument_list|)
operator|<<
name|str
expr_stmt|;
block|}
end_function
begin_function
DECL|function|length
name|void
name|tst_QString
operator|::
name|length
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
operator|(
name|int
operator|)
name|s1
operator|.
name|length
argument_list|()
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_function
DECL|function|acc_01
name|void
name|tst_QString
operator|::
name|acc_01
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QString
name|b
decl_stmt|;
comment|//b(10);
name|QString
name|bb
decl_stmt|;
comment|//bb((int)0);
name|QString
name|c
argument_list|(
literal|"String C"
argument_list|)
decl_stmt|;
name|QChar
name|tmp
index|[
literal|10
index|]
decl_stmt|;
name|tmp
index|[
literal|0
index|]
operator|=
literal|'S'
expr_stmt|;
name|tmp
index|[
literal|1
index|]
operator|=
literal|'t'
expr_stmt|;
name|tmp
index|[
literal|2
index|]
operator|=
literal|'r'
expr_stmt|;
name|tmp
index|[
literal|3
index|]
operator|=
literal|'i'
expr_stmt|;
name|tmp
index|[
literal|4
index|]
operator|=
literal|'n'
expr_stmt|;
name|tmp
index|[
literal|5
index|]
operator|=
literal|'g'
expr_stmt|;
name|tmp
index|[
literal|6
index|]
operator|=
literal|' '
expr_stmt|;
name|tmp
index|[
literal|7
index|]
operator|=
literal|'D'
expr_stmt|;
name|tmp
index|[
literal|8
index|]
operator|=
literal|'X'
expr_stmt|;
name|tmp
index|[
literal|9
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|d
argument_list|(
name|tmp
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QString
name|ca
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QString
name|cb
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|QString
name|cc
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|QString
name|n
decl_stmt|;
name|QString
name|e
argument_list|(
literal|"String E"
argument_list|)
decl_stmt|;
name|QString
name|f
decl_stmt|;
name|f
operator|=
name|e
expr_stmt|;
name|f
index|[
literal|7
index|]
operator|=
literal|'F'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
operator|(
name|QString
operator|)
literal|"String E"
argument_list|)
expr_stmt|;
name|char
name|text
index|[]
init|=
literal|"String f"
decl_stmt|;
name|f
operator|=
name|text
expr_stmt|;
name|text
index|[
literal|7
index|]
operator|=
literal|'!'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
operator|(
name|QString
operator|)
literal|"String f"
argument_list|)
expr_stmt|;
name|f
index|[
literal|7
index|]
operator|=
literal|'F'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|text
index|[
literal|7
index|]
argument_list|,
literal|'!'
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|a
index|[
literal|0
index|]
operator|=
literal|'A'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
index|[
literal|1
index|]
operator|=
literal|'B'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"AB"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|a
index|[
literal|2
index|]
operator|=
literal|'C'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
index|[
literal|0
index|]
operator|=
literal|'A'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
index|[
literal|1
index|]
operator|=
literal|'B'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"AB"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|a
index|[
literal|2
index|]
operator|=
literal|'C'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|b
operator|=
literal|"456"
expr_stmt|;
name|a
index|[
literal|0
index|]
operator|=
name|a
index|[
literal|1
index|]
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"223"
argument_list|)
expr_stmt|;
name|a
index|[
literal|1
index|]
operator|=
name|b
index|[
literal|1
index|]
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
operator|(
name|QString
operator|)
literal|"456"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"253"
argument_list|)
expr_stmt|;
name|char
name|t
index|[]
init|=
literal|"TEXT"
decl_stmt|;
name|a
operator|=
literal|"A"
expr_stmt|;
name|a
operator|=
name|t
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"TEXT"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
name|t
argument_list|)
expr_stmt|;
name|a
index|[
literal|0
index|]
operator|=
literal|'X'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"XEXT"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t
index|[
literal|0
index|]
argument_list|,
literal|'T'
argument_list|)
expr_stmt|;
name|t
index|[
literal|0
index|]
operator|=
literal|'Z'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"XEXT"
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|char
argument_list|(
name|a
operator|.
name|toLatin1
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
literal|'B'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strcmp
argument_list|(
name|a
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|(
operator|(
name|QString
operator|)
literal|"ABC"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|+=
literal|"DEF"
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCDEF"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|+=
literal|'G'
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCDEFG"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|+=
operator|(
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
literal|0
operator|)
operator|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCDEFG"
argument_list|)
expr_stmt|;
comment|// non-member operators
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|b
operator|=
literal|"ABC"
expr_stmt|;
name|c
operator|=
literal|"ACB"
expr_stmt|;
name|d
operator|=
literal|"ABCD"
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|d
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|<
name|b
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<
name|c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|d
operator|<
name|a
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c
operator|<
name|a
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<=
name|d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|<=
name|c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|c
operator|<=
name|a
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|d
operator|<=
name|a
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|a
operator|+
name|b
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|a
operator|+
literal|"XXXX"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCXXXX"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|a
operator|+
literal|'X'
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABCX"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"XXXX"
operator|+
name|a
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"XXXXABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|'X'
operator|+
name|a
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"XABC"
argument_list|)
expr_stmt|;
name|a
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|a
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
operator|==
literal|'\0'
argument_list|)
expr_stmt|;
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QFile
name|f
argument_list|(
literal|"COMPARE.txt"
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|f
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-16"
argument_list|)
argument_list|)
expr_stmt|;
name|ts
operator|<<
literal|"Abc"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isNull
name|void
name|tst_QString
operator|::
name|isNull
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|zero
init|=
literal|0
decl_stmt|;
name|a
operator|.
name|sprintf
argument_list|(
name|zero
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QString
operator|::
name|isEmpty
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|c
argument_list|(
literal|"Not empty"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QString
operator|::
name|constructor
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QString
name|b
decl_stmt|;
comment|//b(10);
name|QString
name|c
argument_list|(
literal|"String C"
argument_list|)
decl_stmt|;
name|QChar
name|tmp
index|[
literal|10
index|]
decl_stmt|;
name|tmp
index|[
literal|0
index|]
operator|=
literal|'S'
expr_stmt|;
name|tmp
index|[
literal|1
index|]
operator|=
literal|'t'
expr_stmt|;
name|tmp
index|[
literal|2
index|]
operator|=
literal|'r'
expr_stmt|;
name|tmp
index|[
literal|3
index|]
operator|=
literal|'i'
expr_stmt|;
name|tmp
index|[
literal|4
index|]
operator|=
literal|'n'
expr_stmt|;
name|tmp
index|[
literal|5
index|]
operator|=
literal|'g'
expr_stmt|;
name|tmp
index|[
literal|6
index|]
operator|=
literal|' '
expr_stmt|;
name|tmp
index|[
literal|7
index|]
operator|=
literal|'D'
expr_stmt|;
name|tmp
index|[
literal|8
index|]
operator|=
literal|'X'
expr_stmt|;
name|tmp
index|[
literal|9
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QString
name|d
argument_list|(
name|tmp
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QString
name|ca
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QString
name|cb
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|QString
name|cc
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|ca
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|cb
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|cc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
operator|(
name|QString
operator|)
literal|"String D"
argument_list|)
expr_stmt|;
name|QString
name|nullStr
decl_stmt|;
name|QVERIFY
argument_list|(
name|nullStr
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nullStr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|empty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructorQByteArray_data
name|void
name|tst_QString
operator|::
name|constructorQByteArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|'C'
expr_stmt|;
name|ba
index|[
literal|1
index|]
operator|=
literal|'O'
expr_stmt|;
name|ba
index|[
literal|2
index|]
operator|=
literal|'M'
expr_stmt|;
name|ba
index|[
literal|3
index|]
operator|=
literal|'P'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"COMP"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba1
argument_list|(
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ba1
index|[
literal|0
index|]
operator|=
literal|'a'
expr_stmt|;
name|ba1
index|[
literal|1
index|]
operator|=
literal|'b'
expr_stmt|;
name|ba1
index|[
literal|2
index|]
operator|=
literal|'c'
expr_stmt|;
name|ba1
index|[
literal|3
index|]
operator|=
literal|'\0'
expr_stmt|;
name|ba1
index|[
literal|4
index|]
operator|=
literal|'d'
expr_stmt|;
name|ba1
index|[
literal|5
index|]
operator|=
literal|'e'
expr_stmt|;
name|ba1
index|[
literal|6
index|]
operator|=
literal|'f'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|ba1
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcd"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructorQByteArray
name|void
name|tst_QString
operator|::
name|constructorQByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|str1
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|.
name|length
argument_list|()
argument_list|,
name|expected
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Latin 1
name|QString
name|strBA
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strBA
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|STL
name|void
name|tst_QString
operator|::
name|STL
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_STL
ifndef|#
directive|ifndef
name|QT_NO_CAST_TO_ASCII
name|QString
name|qt
argument_list|(
literal|"QString"
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|stdstr
argument_list|(
literal|"QString"
argument_list|)
decl_stmt|;
name|QString
name|stlqt
decl_stmt|;
comment|// constructor
name|stlqt
operator|=
name|QString
argument_list|(
name|stdstr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stlqt
argument_list|,
name|qt
argument_list|)
expr_stmt|;
comment|// assignment
name|stlqt
operator|=
name|stdstr
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stlqt
argument_list|,
name|qt
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|stdstr2
init|=
name|stlqt
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stdstr2
argument_list|,
name|stdstr
argument_list|)
expr_stmt|;
comment|// prepend
name|stlqt
operator|=
name|QString
argument_list|()
expr_stmt|;
name|stlqt
operator|.
name|prepend
argument_list|(
name|stdstr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stlqt
argument_list|,
name|qt
argument_list|)
expr_stmt|;
comment|// append
name|stlqt
operator|=
name|QString
argument_list|()
expr_stmt|;
name|stlqt
operator|.
name|append
argument_list|(
name|stdstr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stlqt
argument_list|,
name|qt
argument_list|)
expr_stmt|;
comment|// pathologics (null-strings not supported by many STLs, so test only empty strings)
name|stdstr
operator|=
name|std
operator|::
name|string
argument_list|()
expr_stmt|;
name|stlqt
operator|=
name|stdstr
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlqt
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|stdstr3
init|=
name|stlqt
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|stdstr3
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|wchar_t
name|arr
index|[]
init|=
block|{
literal|'h'
block|,
literal|'e'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'o'
block|,
literal|0
block|}
decl_stmt|;
name|std
operator|::
name|wstring
name|stlStr
init|=
name|arr
decl_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|fromStdWString
argument_list|(
name|stlStr
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stlStr
argument_list|,
name|s
operator|.
name|toStdWString
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Not tested without STL support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|truncate
name|void
name|tst_QString
operator|::
name|truncate
parameter_list|()
block|{
name|QString
name|e
argument_list|(
literal|"String E"
argument_list|)
decl_stmt|;
name|e
operator|.
name|truncate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
operator|(
name|QString
operator|)
literal|"Stri"
argument_list|)
expr_stmt|;
name|e
operator|=
literal|"String E"
expr_stmt|;
name|e
operator|.
name|truncate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|e
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|e
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|tst_QString
operator|::
name|fill
parameter_list|()
block|{
name|QString
name|e
decl_stmt|;
name|e
operator|.
name|fill
argument_list|(
literal|'e'
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
operator|(
name|QString
operator|)
literal|"e"
argument_list|)
expr_stmt|;
name|QString
name|f
decl_stmt|;
name|f
operator|.
name|fill
argument_list|(
literal|'f'
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
operator|(
name|QString
operator|)
literal|"fff"
argument_list|)
expr_stmt|;
name|f
operator|.
name|fill
argument_list|(
literal|'F'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
operator|(
name|QString
operator|)
literal|"FFF"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sprintf
name|void
name|tst_QString
operator|::
name|sprintf
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|.
name|sprintf
argument_list|(
literal|"COMPARE"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"COMPARE"
argument_list|)
expr_stmt|;
name|a
operator|.
name|sprintf
argument_list|(
literal|"%%%d"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"%1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"X%dY"
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"X2Y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"X%9iY"
argument_list|,
literal|50000
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"X    50000Y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"X%-9sY"
argument_list|,
literal|"hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Xhello    Y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"X%-9iY"
argument_list|,
literal|50000
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"X50000    Y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%lf"
argument_list|,
literal|1.23
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.230000"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%lf"
argument_list|,
literal|1.23456789
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.234568"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%p"
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0xbfffd350
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0xbfffd350"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%p"
argument_list|,
operator|(
name|void
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0x0"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|6
decl_stmt|;
name|long
name|l
init|=
operator|-
literal|2
decl_stmt|;
name|float
name|f
init|=
literal|4.023f
decl_stmt|;
name|QString
name|S1
decl_stmt|;
name|S1
operator|.
name|sprintf
argument_list|(
literal|"%d %ld %f"
argument_list|,
name|i
argument_list|,
name|l
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S1
argument_list|,
name|QString
argument_list|(
literal|"6 -2 4.023000"
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|d
init|=
operator|-
literal|514.25683
decl_stmt|;
name|S1
operator|.
name|sprintf
argument_list|(
literal|"%f"
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S1
argument_list|,
name|QString
argument_list|(
literal|"-514.256830"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%.3s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Hel"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%10.3s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"       Hel"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%.10s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%10.10s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"     Hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%-10.10s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Hello     "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%-10.3s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Hel       "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%-5.5s"
argument_list|,
literal|"Hello"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Hello"
argument_list|)
expr_stmt|;
comment|// Check utf8 conversion for %s
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"%s"
argument_list|,
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\366\344\374\326\304\334\370\346\345\330\306\305"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check codecForCStrings is used to read non-modifier sequences in the format string
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|sprintf
argument_list|(
literal|"\303\251\303\250\303\240 %s"
argument_list|,
literal|"\303\251\303\250\303\240"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\303\251\303\250\303\240 \303\251\303\250\303\240"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|n1
decl_stmt|;
name|a
operator|.
name|sprintf
argument_list|(
literal|"%s%n%s"
argument_list|,
literal|"hello"
argument_list|,
operator|&
name|n1
argument_list|,
literal|"goodbye"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QString
argument_list|(
literal|"hellogoodbye"
argument_list|)
argument_list|)
expr_stmt|;
name|qlonglong
name|n2
decl_stmt|;
name|a
operator|.
name|sprintf
argument_list|(
literal|"%s%s%lln%s"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
operator|&
name|n2
argument_list|,
literal|"whiz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|n2
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QString
argument_list|(
literal|"foobarwhiz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     indexOf() and indexOf02() test QString::indexOf(),     QString::lastIndexOf(), and their QByteArray equivalents.      lastIndexOf() tests QString::lastIndexOf() more in depth, but it     should probably be rewritten to use a data table. */
end_comment
begin_function
DECL|function|indexOf_data
name|void
name|tst_QString
operator|::
name|indexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bcs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data20"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data22"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data24"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data26"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data27"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data28"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data29"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ABC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data49"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data50"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data51"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data52"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data53"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data54"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data55"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data57"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AbC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
operator|<<
operator|-
literal|1
expr_stmt|;
if|#
directive|if
literal|0
block|QTest::newRow( "null-in-null")<< QString()<< QString()<< 0<< false<< 0;     QTest::newRow( "empty-in-null")<< QString()<< QString("")<< 0<< false<< 0;     QTest::newRow( "null-in-empty")<< QString("")<< QString()<< 0<< false<< 0;     QTest::newRow( "empty-in-empty")<< QString("")<< QString("")<< 0<< false<< 0;
endif|#
directive|endif
name|QString
name|s1
init|=
literal|"abc"
decl_stmt|;
name|s1
operator|+=
name|QChar
argument_list|(
literal|0xb5
argument_list|)
expr_stmt|;
name|QString
name|s2
decl_stmt|;
name|s2
operator|+=
name|QChar
argument_list|(
literal|0x3bc
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data58"
argument_list|)
operator|<<
name|s1
operator|<<
name|s2
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|3
expr_stmt|;
name|s2
operator|.
name|prepend
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data59"
argument_list|)
operator|<<
name|s1
operator|<<
name|s2
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|2
expr_stmt|;
name|QString
name|veryBigHaystack
argument_list|(
literal|500
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|veryBigHaystack
operator|+=
literal|'B'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest2"
argument_list|)
operator|<<
name|QString
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest4"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|QString
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest5"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|QString
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|'d'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
name|QString
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest7"
argument_list|)
operator|<<
name|QString
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
name|QString
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreInsensitiveStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QString
operator|::
name|indexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startpos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bcs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|needle
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|bcs
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
name|bool
name|needleIsLatin
init|=
operator|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|==
name|needle
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needleIsLatin
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegExp
name|rx1
init|=
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|needle
argument_list|)
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|QRegExp
name|rx2
init|=
name|QRegExp
argument_list|(
name|needle
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|rx1
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|rx2
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
comment|// these QRegExp must have been modified
name|QVERIFY
argument_list|(
name|resultpos
operator|==
operator|-
literal|1
operator|||
name|rx1
operator|.
name|matchedLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultpos
operator|==
operator|-
literal|1
operator|||
name|rx2
operator|.
name|matchedLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QRegExp
name|rx1
init|=
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|needle
argument_list|)
argument_list|,
name|cs
argument_list|)
decl_stmt|;
specifier|const
name|QRegExp
name|rx2
init|=
name|QRegExp
argument_list|(
name|needle
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|rx1
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|rx2
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
comment|// our QRegExp mustn't have been modified
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needleIsLatin
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startpos
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needleIsLatin
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|,
name|cs
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexOf2_data
name|void
name|tst_QString
operator|::
name|indexOf2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data18"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data19"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefg"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data30"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data31"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data32"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data33"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data34"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data35"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data36"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cd"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data37"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ac"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// sizeof(whale)> 32
name|QString
name|whale
init|=
literal|"a5zby6cx7dw8evf9ug0th1si2rj3qkp4lomn"
decl_stmt|;
name|QString
name|minnow
init|=
literal|"zby"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data40"
argument_list|)
operator|<<
name|whale
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data41"
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
name|minnow
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data42"
argument_list|)
operator|<<
name|QString
argument_list|(
name|minnow
operator|+
name|whale
argument_list|)
operator|<<
name|minnow
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data43"
argument_list|)
operator|<<
name|whale
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data44"
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
name|whale
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data45"
argument_list|)
operator|<<
name|whale
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data46"
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data47"
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|whale
argument_list|)
operator|<<
name|QString
argument_list|(
name|whale
operator|+
name|minnow
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data48"
argument_list|)
operator|<<
name|QString
argument_list|(
name|minnow
operator|+
name|whale
argument_list|)
operator|<<
name|whale
operator|<<
operator|(
name|int
operator|)
name|minnow
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf2
name|void
name|tst_QString
operator|::
name|indexOf2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|needle
argument_list|)
expr_stmt|;
name|QByteArray
name|chaystack
init|=
name|haystack
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QByteArray
name|cneedle
init|=
name|needle
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|int
name|got
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringMatcher
argument_list|(
name|needle
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|0
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|ref
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringMatcher
argument_list|(
name|needle
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|0
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
name|got
operator|=
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|chaystack
operator|.
name|indexOf
argument_list|(
name|cneedle
argument_list|,
literal|0
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArrayMatcher
argument_list|(
name|cneedle
argument_list|)
operator|.
name|indexIn
argument_list|(
name|chaystack
argument_list|,
literal|0
argument_list|)
argument_list|,
name|resultpos
argument_list|)
expr_stmt|;
if|if
condition|(
name|cneedle
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|got
operator|=
name|chaystack
operator|.
name|lastIndexOf
argument_list|(
name|cneedle
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|got
operator|==
name|resultpos
operator|||
operator|(
name|resultpos
operator|>=
literal|0
operator|&&
name|got
operator|>=
name|resultpos
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lastIndexOf_data
name|void
name|tst_QString
operator|::
name|lastIndexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"caseSensitive"
argument_list|)
expr_stmt|;
name|QString
name|a
init|=
literal|"ABCDEFGHIEfGEFG"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|3
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|5
operator|<<
literal|6
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|14
operator|<<
literal|14
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
literal|13
operator|<<
literal|11
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|a
operator|<<
literal|"B"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|a
operator|<<
literal|"G"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|a
operator|<<
literal|"A"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|1
operator|*
name|a
operator|.
name|size
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|12
operator|<<
literal|12
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
operator|-
literal|12
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|a
operator|<<
literal|"efg"
operator|<<
literal|11
operator|<<
literal|9
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|"asd"
operator|<<
literal|"asdf"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
literal|""
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|a
operator|<<
literal|""
operator|<<
name|a
operator|.
name|size
argument_list|()
operator|+
literal|10
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QString
operator|::
name|lastIndexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|needle
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
operator|(
name|caseSensitive
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|ref
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|>=
operator|-
literal|1
operator|&&
name|from
operator|<
name|haystack
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// unfortunately, QString and QRegExp don't have the same out of bound semantics
comment|// I think QString is wrong -- See file log for contact information.
block|{
name|QRegExp
name|rx1
init|=
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|needle
argument_list|)
argument_list|,
name|cs
argument_list|)
decl_stmt|;
name|QRegExp
name|rx2
init|=
name|QRegExp
argument_list|(
name|needle
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|rx1
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|rx2
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// our QRegExp mustn't have been modified
name|QVERIFY
argument_list|(
name|expected
operator|==
operator|-
literal|1
operator|||
name|rx1
operator|.
name|matchedLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|expected
operator|==
operator|-
literal|1
operator|||
name|rx2
operator|.
name|matchedLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QRegExp
name|rx1
init|=
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|needle
argument_list|)
argument_list|,
name|cs
argument_list|)
decl_stmt|;
specifier|const
name|QRegExp
name|rx2
init|=
name|QRegExp
argument_list|(
name|needle
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|rx1
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|rx2
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// our QRegExp mustn't have been modified
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cs
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|ref
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|from
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|ref
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|ref
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|from
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QString
operator|::
name|count
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|'A'
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|'Z'
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|'E'
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|'F'
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|"FG"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|QRegExp
argument_list|(
literal|"[FG][HI]"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|QRegExp
argument_list|(
literal|"[G][HE]"
argument_list|)
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|QLatin1String
argument_list|(
literal|"FG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|ref
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|ref
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|QStringRef
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QStringRef
name|emptyRef
argument_list|(
operator|&
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|count
argument_list|(
name|emptyRef
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QString
operator|::
name|contains
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|contains
argument_list|(
literal|'Z'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|'E'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|'F'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|"FG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|"FG"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|QRegExp
argument_list|(
literal|"[FG][HI]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|QRegExp
argument_list|(
literal|"[G][HE]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CREATE_REF
argument_list|(
name|QLatin1String
argument_list|(
literal|"FG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|ref
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|QStringRef
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QStringRef
name|emptyRef
argument_list|(
operator|&
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|contains
argument_list|(
name|emptyRef
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|left
name|void
name|tst_QString
operator|::
name|left
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|left
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|left
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|left
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|left
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|l
init|=
literal|"Left"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|left
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|left
argument_list|(
literal|100
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftRef
name|void
name|tst_QString
operator|::
name|leftRef
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftRef
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|leftRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|leftRef
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|leftRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|leftRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|l
init|=
literal|"Left"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|leftRef
argument_list|(
literal|100
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|right
name|void
name|tst_QString
operator|::
name|right
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|right
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"EFG"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|right
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|right
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|right
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|r
init|=
literal|"Right"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|right
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|right
argument_list|(
literal|100
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rightRef
name|void
name|tst_QString
operator|::
name|rightRef
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightRef
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"EFG"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|rightRef
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|rightRef
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|r
init|=
literal|"Right"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|rightRef
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|rightRef
argument_list|(
literal|100
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mid
name|void
name|tst_QString
operator|::
name|mid
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"DEF"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|9999
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"BCDEFGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"FGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|x
init|=
literal|"Nine pineapples"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"pine"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Nine p"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Nine p"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ine pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|mid
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|mid
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|midRef
name|void
name|tst_QString
operator|::
name|midRef
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"DEF"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|midRef
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|midRef
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|15
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|9999
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"BCDEFGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"FGHIEfGEFG"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|9999
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|x
init|=
literal|"Nine pineapples"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pine"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Nine p"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
operator|-
literal|100
argument_list|,
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Nine p"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
name|INT_MAX
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
operator|-
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|0
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|1
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ine pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|5
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"pineapples"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
literal|20
argument_list|,
name|INT_MAX
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|midRef
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef
name|void
name|tst_QString
operator|::
name|stringRef
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABCDEFGHIEfGEFG"
expr_stmt|;
comment|// 15 chars
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|==
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|==
operator|(
name|QString
operator|)
literal|"DEF"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"DEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|==
literal|"DEF"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QString
operator|)
literal|"DEF"
operator|==
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|"DEF"
argument_list|)
operator|==
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"DEF"
operator|==
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|!=
operator|(
name|QString
operator|)
literal|"DE"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|!=
name|QLatin1String
argument_list|(
literal|"DE"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
operator|!=
literal|"DE"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QString
operator|)
literal|"DE"
operator|!=
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|"DE"
argument_list|)
operator|!=
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|"DE"
operator|!=
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s_alpha
argument_list|(
literal|"alpha"
argument_list|)
decl_stmt|;
name|QString
name|s_beta
argument_list|(
literal|"beta"
argument_list|)
decl_stmt|;
name|QStringRef
name|alpha
argument_list|(
operator|&
name|s_alpha
argument_list|)
decl_stmt|;
name|QStringRef
name|beta
argument_list|(
operator|&
name|s_beta
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|alpha
operator|<
name|beta
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|alpha
operator|<=
name|beta
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|alpha
operator|<=
name|alpha
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beta
operator|>
name|alpha
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beta
operator|>=
name|alpha
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beta
operator|>=
name|beta
argument_list|)
expr_stmt|;
name|QString
name|s_alpha2
argument_list|(
literal|"alpha"
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|QStringRef
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|alpha
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|beta
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|alpha
operator|==
name|map
operator|.
name|value
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|s_alpha2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QStringRef
argument_list|,
name|QString
argument_list|>
name|hash
decl_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|alpha
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|hash
operator|.
name|insert
argument_list|(
name|beta
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|alpha
operator|==
name|hash
operator|.
name|value
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|s_alpha2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftJustified
name|void
name|tst_QString
operator|::
name|leftJustified
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|5
argument_list|,
literal|'-'
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC--"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC-"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|n
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|2
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"AB"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|1
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|0
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rightJustified
name|void
name|tst_QString
operator|::
name|rightJustified
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|5
argument_list|,
literal|'-'
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"--ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"-ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|" ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QString
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|n
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"-ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|" ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"AB"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|1
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|0
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"ABC"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUpper
name|void
name|tst_QString
operator|::
name|toUpper
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QString
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"text"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"Text"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExt"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXt"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"texT"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TExt"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXT"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tEXt"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExT"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@ABYZ["
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@ABYZ["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@ABYZ["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`ABYZ{"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`ABYZ{"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`ABYZ{"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
literal|0xdf
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"SS"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|,
name|upper
decl_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lower
operator|.
name|toUpper
argument_list|()
argument_list|,
name|upper
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|lower
expr_stmt|;
name|upper
operator|+=
name|upper
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lower
operator|.
name|toUpper
argument_list|()
argument_list|,
name|upper
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low)
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lower
operator|.
name|toUpper
argument_list|()
argument_list|,
name|upper
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low hi hi)
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lower
operator|.
name|toUpper
argument_list|()
argument_list|,
name|upper
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_ICU
comment|// test doesn't work with ICU support, since QChar is unaware of any locale
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"test doesn't work with ICU support, since QChar is unaware of any locale"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|65536
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|str
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|upper
init|=
name|str
operator|.
name|toUpper
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|upper
operator|.
name|length
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|upper
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|QVERIFY
argument_list|(
name|upper
operator|==
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|toLower
name|void
name|tst_QString
operator|::
name|toLower
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QString
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"text"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"Text"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExt"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXt"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"texT"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TExt"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXT"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tEXt"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExT"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@ABYZ["
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`ABYZ{"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
literal|0x130
argument_list|)
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
literal|0x69
argument_list|)
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x307
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|,
name|upper
decl_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toLower
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|lower
expr_stmt|;
name|upper
operator|+=
name|upper
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toLower
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low)
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toLower
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low hi hi)
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toLower
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_ICU
comment|// test doesn't work with ICU support, since QChar is unaware of any locale
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"test doesn't work with ICU support, since QChar is unaware of any locale"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|65536
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|str
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|lower
init|=
name|str
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|lower
operator|.
name|length
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|QVERIFY
argument_list|(
name|str
operator|.
name|toLower
argument_list|()
operator|==
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|toCaseFolded
name|void
name|tst_QString
operator|::
name|toCaseFolded
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QString
argument_list|()
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"text"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"Text"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExt"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXt"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"texT"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TExt"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"teXT"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tEXt"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"tExT"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@ABYZ["
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"@abyz["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`ABYZ{"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"`abyz{"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|,
name|upper
decl_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|lower
expr_stmt|;
name|upper
operator|+=
name|upper
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low)
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|.
name|prepend
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|// test for broken surrogate pair handling (low low hi low hi low hi hi)
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|upper
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|lower
argument_list|)
expr_stmt|;
comment|//### we currently don't support full case foldings
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|65536
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|str
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|lower
init|=
name|str
operator|.
name|toCaseFolded
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|lower
operator|.
name|length
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lower
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|QVERIFY
argument_list|(
name|str
operator|.
name|toCaseFolded
argument_list|()
operator|==
name|QString
argument_list|(
literal|1
argument_list|,
name|QChar
argument_list|(
name|i
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|trimmed
name|void
name|tst_QString
operator|::
name|trimmed
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"Text"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"Text"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|trimmed
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"Text"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"Text"
argument_list|)
expr_stmt|;
name|a
operator|=
literal|" "
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|trimmed
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|" "
argument_list|)
expr_stmt|;
name|a
operator|=
literal|" a   "
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|trimmed
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"a"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simplified_data
name|void
name|tst_QString
operator|::
name|simplified_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"full"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"simple"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one char"
argument_list|)
operator|<<
literal|"a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one word"
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chars trivial"
argument_list|)
operator|<<
literal|"a b"
operator|<<
literal|"a b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"words trivial"
argument_list|)
operator|<<
literal|"foo bar"
operator|<<
literal|"foo bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allspace"
argument_list|)
operator|<<
literal|"  \t\v "
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char trailing"
argument_list|)
operator|<<
literal|"a "
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char trailing tab"
argument_list|)
operator|<<
literal|"a\t"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char multitrailing"
argument_list|)
operator|<<
literal|"a   "
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char multitrailing tab"
argument_list|)
operator|<<
literal|"a   \t"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char leading"
argument_list|)
operator|<<
literal|" a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char leading tab"
argument_list|)
operator|<<
literal|"\ta"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char multileading"
argument_list|)
operator|<<
literal|"   a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"char multileading tab"
argument_list|)
operator|<<
literal|"\t   a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chars apart"
argument_list|)
operator|<<
literal|"a  b"
operator|<<
literal|"a b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"words apart"
argument_list|)
operator|<<
literal|"foo  bar"
operator|<<
literal|"foo bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"enclosed word"
argument_list|)
operator|<<
literal|"   foo \t "
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"enclosed chars apart"
argument_list|)
operator|<<
literal|" a   b "
operator|<<
literal|"a b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"enclosed words apart"
argument_list|)
operator|<<
literal|" foo   bar "
operator|<<
literal|"foo bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chars apart posttab"
argument_list|)
operator|<<
literal|"a \tb"
operator|<<
literal|"a b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chars apart pretab"
argument_list|)
operator|<<
literal|"a\t b"
operator|<<
literal|"a b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"many words"
argument_list|)
operator|<<
literal|"  just some    random\ttext here"
operator|<<
literal|"just some random text here"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simplified
name|void
name|tst_QString
operator|::
name|simplified
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|full
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|simple
argument_list|)
expr_stmt|;
name|QString
name|result
init|=
name|full
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|simple
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QVERIFY2
argument_list|(
name|result
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
literal|"'"
operator|+
name|full
operator|+
literal|"' did not yield null: "
operator|+
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|simple
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY2
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
literal|"'"
operator|+
name|full
operator|+
literal|"' did not yield empty: "
operator|+
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|simple
argument_list|)
expr_stmt|;
if|if
condition|(
name|full
operator|==
name|simple
condition|)
name|QVERIFY
argument_list|(
name|result
operator|.
name|isSharedWith
argument_list|(
name|full
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QString
operator|::
name|insert
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"Ys"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|'e'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Yes"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|'!'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Yes!"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|'?'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Yes! ?"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"DEF"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABC  DEF"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"ABC"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QString
argument_list|(
literal|"ABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|a
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"ABCABCABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QString
argument_list|(
literal|"ABCABCABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'<'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"<ABCABCABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|'>'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"<>ABCABCABCABC"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"Meal"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"ontr"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aMontreal"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QString
operator|::
name|append
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"<>ABCABCABCABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"<>ABCABCABCABC>"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append_bytearray_data
name|void
name|tst_QString
operator|::
name|append_bytearray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|'a'
expr_stmt|;
name|ba
index|[
literal|1
index|]
operator|=
literal|'b'
expr_stmt|;
name|ba
index|[
literal|2
index|]
operator|=
literal|'c'
expr_stmt|;
name|ba
index|[
literal|3
index|]
operator|=
literal|'d'
expr_stmt|;
comment|// no 0 termination
name|ba
operator|.
name|resize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notTerminated_0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notTerminated_1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notTerminated_2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"foobar abcd"
argument_list|)
expr_stmt|;
comment|// byte array with only a 0
name|ba
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|QByteArray
name|ba2
argument_list|(
literal|"foobar "
argument_list|)
decl_stmt|;
name|ba2
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyString"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
comment|// empty byte array
name|ba
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyByteArray"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append_bytearray
name|void
name|tst_QString
operator|::
name|append_bytearray
parameter_list|()
block|{
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|str
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|str
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Latin 1
name|str
operator|.
name|append
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|str
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_pluseq_bytearray_data
name|void
name|tst_QString
operator|::
name|operator_pluseq_bytearray_data
parameter_list|()
block|{
name|append_bytearray_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_pluseq_bytearray
name|void
name|tst_QString
operator|::
name|operator_pluseq_bytearray
parameter_list|()
block|{
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|str
operator|+=
name|ba
expr_stmt|;
name|QTEST
argument_list|(
name|str
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Latin 1
name|str
operator|+=
name|ba
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|str
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QString
operator|::
name|swap
parameter_list|()
block|{
name|QString
name|s1
decl_stmt|,
name|s2
decl_stmt|;
name|s1
operator|=
literal|"s1"
expr_stmt|;
name|s2
operator|=
literal|"s2"
expr_stmt|;
name|s1
operator|.
name|swap
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
literal|"s2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
argument_list|,
name|QLatin1String
argument_list|(
literal|"s1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend
name|void
name|tst_QString
operator|::
name|prepend
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"<>ABCABCABCABC>"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|prepend
argument_list|(
literal|"-"
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"-<>ABCABCABCABC>"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend_bytearray_data
name|void
name|tst_QString
operator|::
name|prepend_bytearray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|'a'
expr_stmt|;
name|ba
index|[
literal|1
index|]
operator|=
literal|'b'
expr_stmt|;
name|ba
index|[
literal|2
index|]
operator|=
literal|'c'
expr_stmt|;
name|ba
index|[
literal|3
index|]
operator|=
literal|'d'
expr_stmt|;
comment|// byte array with only a 0
name|ba
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ba
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyString"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|"foobar "
argument_list|)
expr_stmt|;
comment|// empty byte array
name|ba
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyByteArray"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" foobar"
argument_list|)
operator|<<
name|ba
operator|<<
name|QString
argument_list|(
literal|" foobar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend_bytearray
name|void
name|tst_QString
operator|::
name|prepend_bytearray
parameter_list|()
block|{
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|str
operator|.
name|prepend
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Latin 1
name|str
operator|.
name|prepend
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|setCodecForCStrings
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|str
argument_list|,
literal|"res"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|replace_uint_uint
name|void
name|tst_QString
operator|::
name|replace_uint_uint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"overflow"
argument_list|,
literal|"QTBUG-22967: integer overflow if (index + len)> INT_MAX"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QString
name|s1
init|=
name|string
decl_stmt|;
name|s1
operator|.
name|replace
argument_list|(
operator|(
name|uint
operator|)
name|index
argument_list|,
operator|(
name|int
operator|)
name|len
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s1
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s2
init|=
name|string
decl_stmt|;
name|s2
operator|.
name|replace
argument_list|(
operator|(
name|uint
operator|)
name|index
argument_list|,
operator|(
name|uint
operator|)
name|len
argument_list|,
name|after
operator|.
name|unicode
argument_list|()
argument_list|,
name|after
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s2
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QString
name|s3
init|=
name|string
decl_stmt|;
name|s3
operator|.
name|replace
argument_list|(
operator|(
name|uint
operator|)
name|index
argument_list|,
operator|(
name|uint
operator|)
name|len
argument_list|,
name|QChar
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s3
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s4
init|=
name|string
decl_stmt|;
name|s4
operator|.
name|replace
argument_list|(
operator|(
name|uint
operator|)
name|index
argument_list|,
operator|(
name|uint
operator|)
name|len
argument_list|,
name|QChar
argument_list|(
name|after
index|[
literal|0
index|]
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s4
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|replace_uint_uint_extra
name|void
name|tst_QString
operator|::
name|replace_uint_uint_extra
parameter_list|()
block|{
comment|/*         This test is designed to be extremely slow if QString::replace() doesn't optimize the case         len == after.size().     */
name|QString
name|str
argument_list|(
literal|"dsfkljfdsjklsdjsfjklfsdjkldfjslkjsdfkllkjdsfjklsfdkjsdflkjlsdfjklsdfkjldsflkjsddlkj"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|12
condition|;
operator|++
name|j
control|)
name|str
operator|+=
name|str
expr_stmt|;
name|QString
name|str2
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaa"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000000
condition|;
operator|++
name|i
control|)
block|{
name|str
operator|.
name|replace
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
name|str2
argument_list|)
expr_stmt|;
block|}
comment|/*         Make sure that replacing with itself works.     */
name|QString
name|copy
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|copy
operator|.
name|detach
argument_list|()
expr_stmt|;
name|str
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|str
argument_list|)
expr_stmt|;
comment|/*         Make sure that replacing a part of oneself with itself works.     */
name|QString
name|str3
argument_list|(
literal|"abcdefghij"
argument_list|)
decl_stmt|;
name|str3
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|str3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str3
argument_list|,
name|QString
argument_list|(
literal|"abcdefghijbcdefghij"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str4
argument_list|(
literal|"abcdefghij"
argument_list|)
decl_stmt|;
name|str4
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|str4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str4
argument_list|,
name|QString
argument_list|(
literal|"aabcdefghijefghij"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str5
argument_list|(
literal|"abcdefghij"
argument_list|)
decl_stmt|;
name|str5
operator|.
name|replace
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|,
name|str5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str5
argument_list|,
name|QString
argument_list|(
literal|"abcdefghabcdefghij"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_string
name|void
name|tst_QString
operator|::
name|replace_string
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bcs
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|bcs
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
if|if
condition|(
name|before
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QChar
name|ch
init|=
name|before
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QString
name|s1
init|=
name|string
decl_stmt|;
name|s1
operator|.
name|replace
argument_list|(
name|ch
argument_list|,
name|after
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s1
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QChar
argument_list|(
name|ch
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|==
name|ch
condition|)
block|{
name|QString
name|s2
init|=
name|string
decl_stmt|;
name|s2
operator|.
name|replace
argument_list|(
name|ch
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|after
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s2
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|s3
init|=
name|string
decl_stmt|;
name|s3
operator|.
name|replace
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s3
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s4
init|=
name|string
decl_stmt|;
name|s4
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|before
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s4
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s5
init|=
name|string
decl_stmt|;
name|s5
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|before
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s5
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_regexp
name|void
name|tst_QString
operator|::
name|replace_regexp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QString
name|s2
init|=
name|string
decl_stmt|;
name|s2
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|regexp
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s2
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_uint_uint
name|void
name|tst_QString
operator|::
name|remove_uint_uint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QString
name|s1
init|=
name|string
decl_stmt|;
name|s1
operator|.
name|remove
argument_list|(
operator|(
name|uint
operator|)
name|index
argument_list|,
operator|(
name|uint
operator|)
name|len
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s1
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
else|else
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// shut QtTest
block|}
end_function
begin_function
DECL|function|remove_string
name|void
name|tst_QString
operator|::
name|remove_string
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bcs
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|bcs
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
if|if
condition|(
name|after
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|before
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|cs
condition|)
block|{
name|QChar
name|ch
init|=
name|before
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QString
name|s1
init|=
name|string
decl_stmt|;
name|s1
operator|.
name|remove
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s1
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QChar
argument_list|(
name|ch
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|==
name|ch
condition|)
block|{
name|QString
name|s2
init|=
name|string
decl_stmt|;
name|s2
operator|.
name|remove
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s2
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|s3
init|=
name|string
decl_stmt|;
name|s3
operator|.
name|remove
argument_list|(
name|before
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s3
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s4
init|=
name|string
decl_stmt|;
name|s4
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|before
argument_list|)
argument_list|,
name|cs
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s4
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QString
name|s5
init|=
name|string
decl_stmt|;
name|s5
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|before
argument_list|,
name|cs
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|s5
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// shut QtTest
block|}
block|}
end_function
begin_function
DECL|function|remove_regexp
name|void
name|tst_QString
operator|::
name|remove_regexp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|after
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|string
operator|.
name|remove
argument_list|(
name|QRegExp
argument_list|(
name|regexp
argument_list|)
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|string
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// shut QtTest
block|}
block|}
end_function
begin_function
DECL|function|toNum
name|void
name|tst_QString
operator|::
name|toNum
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
DECL|macro|TEST_TO_INT
define|#
directive|define
name|TEST_TO_INT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|)
define|\
value|a = #num; \     QVERIFY2(a.func(&ok) == num ## i64&& ok, "Failed: num=" #num ", func=" #func);
else|#
directive|else
define|#
directive|define
name|TEST_TO_INT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|)
define|\
value|a = #num; \     QVERIFY2(a.func(&ok) == num ## LL&& ok, "Failed: num=" #num ", func=" #func);
endif|#
directive|endif
name|QString
name|a
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toInt
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toInt
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toInt
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|2147483647
argument_list|,
argument|toInt
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|2147483648
argument_list|,
argument|toInt
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toShort
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toShort
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toShort
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|32767
argument_list|,
argument|toShort
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|32768
argument_list|,
argument|toShort
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toLong
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toLong
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toLong
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|2147483647
argument_list|,
argument|toLong
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|2147483648
argument_list|,
argument|toLong
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|0
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|1
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|1
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_TO_INT
argument_list|(
literal|9223372036854775807
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_TO_INT
argument_list|(
argument|-
literal|9223372036854775807
argument_list|,
argument|toLongLong
argument_list|)
DECL|macro|TEST_TO_INT
undef|#
directive|undef
name|TEST_TO_INT
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
DECL|macro|TEST_TO_UINT
define|#
directive|define
name|TEST_TO_UINT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|)
define|\
value|a = #num; \     QVERIFY2(a.func(&ok) == num ## i64&& ok, "Failed: num=" #num ", func=" #func);
else|#
directive|else
define|#
directive|define
name|TEST_TO_UINT
parameter_list|(
name|num
parameter_list|,
name|func
parameter_list|)
define|\
value|a = #num; \     QVERIFY2(a.func(&ok) == num ## ULL&& ok, "Failed: num=" #num ", func=" #func);
endif|#
directive|endif
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toUInt
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toUInt
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|4294967295
argument_list|,
argument|toUInt
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toUShort
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toUShort
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|65535
argument_list|,
argument|toUShort
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toULong
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toULong
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|4294967295
argument_list|,
argument|toULong
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|0
argument_list|,
argument|toULongLong
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|1
argument_list|,
argument|toULongLong
argument_list|)
name|TEST_TO_UINT
argument_list|(
literal|18446744073709551615
argument_list|,
argument|toULongLong
argument_list|)
DECL|macro|TEST_TO_UINT
undef|#
directive|undef
name|TEST_TO_UINT
DECL|macro|TEST_BASE
define|#
directive|define
name|TEST_BASE
parameter_list|(
name|str
parameter_list|,
name|base
parameter_list|,
name|num
parameter_list|)
define|\
value|a = str; \     QVERIFY2(a.toInt(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toInt"); \     QVERIFY2(a.toUInt(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toUInt"); \     QVERIFY2(a.toShort(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toShort"); \     QVERIFY2(a.toUShort(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toUShort"); \     QVERIFY2(a.toLong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLong"); \     QVERIFY2(a.toULong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toULong"); \     QVERIFY2(a.toLongLong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLongLong"); \     QVERIFY2(a.toULongLong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toULongLong");
name|TEST_BASE
argument_list|(
literal|"FF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"0xFF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"77"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"077"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"0xFF"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"077"
argument_list|,
literal|0
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"255"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" FF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 0xFF"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 77"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 077"
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 0xFF"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 077"
argument_list|,
literal|0
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|" 255"
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"\tFF\t"
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"\t0xFF  "
argument_list|,
literal|16
argument_list|,
literal|255
argument_list|)
name|TEST_BASE
argument_list|(
literal|"   77   "
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
name|TEST_BASE
argument_list|(
literal|"77  "
argument_list|,
literal|8
argument_list|,
literal|63
argument_list|)
DECL|macro|TEST_BASE
undef|#
directive|undef
name|TEST_BASE
DECL|macro|TEST_NEG_BASE
define|#
directive|define
name|TEST_NEG_BASE
parameter_list|(
name|str
parameter_list|,
name|base
parameter_list|,
name|num
parameter_list|)
define|\
value|a = str; \     QVERIFY2(a.toInt(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toInt"); \     QVERIFY2(a.toShort(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toShort"); \     QVERIFY2(a.toLong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLong"); \     QVERIFY2(a.toLongLong(&ok, base) == num&& ok, "Failed: str=" #str " base= "#base " num=" #num ", func=toLongLong");
name|TEST_NEG_BASE
argument_list|(
literal|"-FE"
argument_list|,
literal|16
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-0xFE"
argument_list|,
literal|16
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-77"
argument_list|,
literal|8
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-077"
argument_list|,
literal|8
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-0xFE"
argument_list|,
literal|0
argument_list|,
argument|-
literal|254
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-077"
argument_list|,
literal|0
argument_list|,
argument|-
literal|63
argument_list|)
name|TEST_NEG_BASE
argument_list|(
literal|"-254"
argument_list|,
literal|0
argument_list|,
argument|-
literal|254
argument_list|)
DECL|macro|TEST_NEG_BASE
undef|#
directive|undef
name|TEST_NEG_BASE
DECL|macro|TEST_DOUBLE
define|#
directive|define
name|TEST_DOUBLE
parameter_list|(
name|num
parameter_list|,
name|str
parameter_list|)
define|\
value|a = str; \     QCOMPARE(a.toDouble(&ok), num); \     QVERIFY(ok);
name|TEST_DOUBLE
argument_list|(
literal|1.2345
argument_list|,
literal|"1.2345"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12.345
argument_list|,
literal|"1.2345e+01"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12.345
argument_list|,
literal|"1.2345E+01"
argument_list|)
name|TEST_DOUBLE
argument_list|(
literal|12345.6
argument_list|,
literal|"12345.6"
argument_list|)
DECL|macro|TEST_DOUBLE
undef|#
directive|undef
name|TEST_DOUBLE
DECL|macro|TEST_BAD
define|#
directive|define
name|TEST_BAD
parameter_list|(
name|str
parameter_list|,
name|func
parameter_list|)
define|\
value|a = str; \     a.func(&ok); \     QVERIFY2(!ok, "Failed: str=" #str " func=" #func);
name|TEST_BAD
argument_list|(
literal|"32768"
argument_list|,
argument|toShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-32769"
argument_list|,
argument|toShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"65536"
argument_list|,
argument|toUShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"2147483648"
argument_list|,
argument|toInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-2147483649"
argument_list|,
argument|toInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"4294967296"
argument_list|,
argument|toUInt
argument_list|)
if|if
condition|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|==
literal|4
condition|)
block|{
name|TEST_BAD
argument_list|(
literal|"2147483648"
argument_list|,
argument|toLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-2147483649"
argument_list|,
argument|toLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"4294967296"
argument_list|,
argument|toULong
argument_list|)
block|}
name|TEST_BAD
argument_list|(
literal|"9223372036854775808"
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-9223372036854775809"
argument_list|,
argument|toLongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"18446744073709551616"
argument_list|,
argument|toULongLong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toUShort
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toUInt
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toULong
argument_list|)
name|TEST_BAD
argument_list|(
literal|"-1"
argument_list|,
argument|toULongLong
argument_list|)
DECL|macro|TEST_BAD
undef|#
directive|undef
name|TEST_BAD
DECL|macro|TEST_BAD_ALL
define|#
directive|define
name|TEST_BAD_ALL
parameter_list|(
name|str
parameter_list|)
define|\
value|a = str; \     a.toShort(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toUShort(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toInt(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toUInt(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toULong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toLongLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toULongLong(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toFloat(&ok); \     QVERIFY2(!ok, "Failed: str=" #str); \     a.toDouble(&ok); \     QVERIFY2(!ok, "Failed: str=" #str);
name|TEST_BAD_ALL
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"1.2.3"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"0x0x0x"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"123-^~<"
argument_list|)
expr_stmt|;
name|TEST_BAD_ALL
argument_list|(
literal|"123ThisIsNotANumber"
argument_list|)
expr_stmt|;
DECL|macro|TEST_BAD_ALL
undef|#
directive|undef
name|TEST_BAD_ALL
name|a
operator|=
literal|"FF"
expr_stmt|;
name|a
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"FF"
expr_stmt|;
name|a
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FPU
name|double
name|d
init|=
literal|3.40282346638528e+38
decl_stmt|;
comment|// slightly off FLT_MAX when using hardfloats
else|#
directive|else
name|double
name|d
init|=
literal|3.4028234663852886e+38
decl_stmt|;
comment|// FLT_MAX
endif|#
directive|endif
name|QString
operator|::
name|number
argument_list|(
name|d
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
name|d
operator|+
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
operator|-
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
name|d
operator|+
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
operator|-
name|d
operator|-
literal|1e32
argument_list|,
literal|'e'
argument_list|,
literal|17
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUShort
name|void
name|tst_QString
operator|::
name|toUShort
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|123
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"32767"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|32767
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|32767
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32767"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"65535"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|65535
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|65535
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|==
literal|2
condition|)
block|{
name|a
operator|=
literal|"65536"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123456"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|()
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|ushort
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toShort
name|void
name|tst_QString
operator|::
name|toShort
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|123
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa123"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"32767"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|32767
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|32767
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32767"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|32767
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|32767
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32768"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|32768
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|32768
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|short
argument_list|)
operator|==
literal|2
condition|)
block|{
name|a
operator|=
literal|"32768"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-32769"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toShort
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toInt
name|void
name|tst_QString
operator|::
name|toInt
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|""
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"COMPARE"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"123A"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"1234567"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1234567
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|1234567
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"12345678901234"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"3234567890"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa12345aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"aaa12345"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"12345aaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483647"
expr_stmt|;
comment|// 2**31 - 1
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2147483647
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|2147483647
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
literal|4
condition|)
block|{
name|a
operator|=
literal|"-2147483647"
expr_stmt|;
comment|// -(2**31 - 1)
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|2147483647
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
literal|2147483647
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483648"
expr_stmt|;
comment|// 2**31
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-2147483648"
expr_stmt|;
comment|// -2**31
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|2147483647
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
literal|2147483647
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"2147483649"
expr_stmt|;
comment|// 2**31 + 1
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toUInt
name|void
name|tst_QString
operator|::
name|toUInt
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"3234567890"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|3234567890u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"-50"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
literal|"4294967295"
expr_stmt|;
comment|// 2**32 - 1
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|4294967295u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|4294967295u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|==
literal|4
condition|)
block|{
name|a
operator|=
literal|"4294967296"
expr_stmt|;
comment|// 2**32
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|///////////////////////////// to*Long //////////////////////////////////////
end_comment
begin_function
DECL|function|toULong_data
name|void
name|tst_QString
operator|::
name|toULong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ulong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"3234567890"
argument_list|)
operator|<<
literal|10
operator|<<
literal|3234567890UL
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fFFfFfFf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0xFFFFFFFFUL
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULong
name|void
name|tst_QString
operator|::
name|toULong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ulong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLong_data
name|void
name|tst_QString
operator|::
name|toLong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|long
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"7fFFfFFf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0x7fFFfFFfL
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_max"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
literal|10
operator|<<
literal|2147483647L
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|==
literal|4
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_max+1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
literal|10
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long_min-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-80000001"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0L
operator|<<
literal|false
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negative"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-7fffffff"
argument_list|)
operator|<<
literal|16
operator|<<
operator|-
literal|0x7fffffffL
operator|<<
literal|true
expr_stmt|;
comment|//    QTest::newRow( "long_min" )<< QString("-80000000")<< 16<< 0x80000000uL<< true;
block|}
end_function
begin_function
DECL|function|toLong
name|void
name|tst_QString
operator|::
name|toLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|long
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|////////////////////////// to*LongLong //////////////////////////////////////
end_comment
begin_function
DECL|function|toULongLong
name|void
name|tst_QString
operator|::
name|toULongLong
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|str
operator|=
literal|"18446744073709551615"
expr_stmt|;
comment|// ULLONG_MAX
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"18446744073709551616"
expr_stmt|;
comment|// ULLONG_MAX + 1
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"-150"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLongLong
name|void
name|tst_QString
operator|::
name|toLongLong
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|str
operator|=
literal|"9223372036854775807"
expr_stmt|;
comment|// LLONG_MAX
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"-9223372036854775808"
expr_stmt|;
comment|// LLONG_MIN
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"aaaa9223372036854775807aaaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"9223372036854775807aaaa"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"aaaa9223372036854775807"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
specifier|static
name|char
name|digits
index|[]
init|=
literal|"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|36
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|36
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|36
condition|;
operator|++
name|k
control|)
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|digits
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|qlonglong
name|value
init|=
operator|(
operator|(
operator|(
name|i
operator|*
literal|36
operator|)
operator|+
name|j
operator|)
operator|*
literal|36
operator|)
operator|+
name|k
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|toLongLong
argument_list|(
literal|0
argument_list|,
literal|36
argument_list|)
operator|==
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|////////////////////////////////////////////////////////////////////////////
end_comment
begin_function
DECL|function|toFloat
name|void
name|tst_QString
operator|::
name|toFloat
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|a
operator|=
literal|"0.000000000931322574615478515625"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|toFloat
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
call|(
name|float
call|)
argument_list|(
literal|0.000000000931322574615478515625
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble_data
name|void
name|tst_QString
operator|::
name|toDouble_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result_ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.000000000931322574615478515625"
argument_list|)
operator|<<
literal|0.000000000931322574615478515625
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 123.45"
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.1e10"
argument_list|)
operator|<<
literal|0.1e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.1e-10"
argument_list|)
operator|<<
literal|0.1e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok06"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-10"
argument_list|)
operator|<<
literal|1.0e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 1e10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok08"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1e+10"
argument_list|)
operator|<<
literal|1.0e10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok09"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   1e-10"
argument_list|)
operator|<<
literal|1.0e-10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|1.0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ok11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|0.1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong00"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.45 "
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 123.45 "
argument_list|)
operator|<<
literal|123.45
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa123.45aa"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123.45aa"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123erf"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong05"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong06"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong07"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0.0
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDouble
name|void
name|tst_QString
operator|::
name|toDouble
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result_ok
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|str
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|result_ok
condition|)
block|{
name|QTEST
argument_list|(
name|d
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setNum
name|void
name|tst_QString
operator|::
name|setNum
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|123
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|123
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"-123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0x123
argument_list|,
literal|16
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|(
name|short
operator|)
literal|123
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|123L
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|123UL
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"123"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|2147483647L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2147483647"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 32 bit LONG_MAX
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|2147483647L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-2147483647"
argument_list|)
argument_list|)
expr_stmt|;
comment|// LONG_MIN + 1
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|2147483647L
operator|-
literal|1L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-2147483648"
argument_list|)
argument_list|)
expr_stmt|;
comment|// LONG_MIN
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|1.23
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.23"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|1.234567
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1.23457"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|LONG_MAX
argument_list|)
operator|&&
name|defined
argument_list|(
name|LLONG_MAX
argument_list|)
operator|&&
name|LONG_MAX
operator|==
name|LLONG_MAX
comment|// LONG_MAX and LONG_MIN on 64 bit systems
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|9223372036854775807L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"9223372036854775807"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|9223372036854775807L
operator|-
literal|1L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-9223372036854775808"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|18446744073709551615UL
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
literal|123
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2^40 == 1099511627776
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
operator|-
literal|1099511627776
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1099511627776"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|1099511627776
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1099511627776"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
argument_list|,
comment|// LLONG_MAX
name|QString
argument_list|(
literal|"9223372036854775807"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-9223372036854775808"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
argument_list|,
comment|// ULLONG_MAX
name|QString
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0.000000000931322574615478515625
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"9.31323e-10"
argument_list|)
argument_list|)
expr_stmt|;
comment|//  QCOMPARE(a.setNum(0.000000000931322574615478515625,'g',30),(QString)"9.31322574615478515625e-010");
comment|//  QCOMPARE(a.setNum(0.000000000931322574615478515625,'f',30),(QString)"0.00000000093132257461547852");
block|}
end_function
begin_function
DECL|function|startsWith
name|void
name|tst_QString
operator|::
name|startsWith
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"AB"
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|'A'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|TEST_REF_STARTS_WITH
define|#
directive|define
name|TEST_REF_STARTS_WITH
parameter_list|(
name|string
parameter_list|,
name|yes
parameter_list|)
value|{ CREATE_REF(string); QCOMPARE(a.startsWith(ref), yes); }
name|TEST_REF_STARTS_WITH
argument_list|(
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_REF_STARTS_WITH
argument_list|(
literal|"AB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_REF_STARTS_WITH
argument_list|(
literal|"C"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_REF_STARTS_WITH
argument_list|(
literal|"ABCDEF"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
DECL|macro|TEST_REF_STARTS_WITH
undef|#
directive|undef
name|TEST_REF_STARTS_WITH
name|a
operator|=
literal|""
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|null
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|startsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QString
operator|::
name|endsWith
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
literal|"AB"
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"B"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|"aB"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"C"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"c"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"abcdef"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|'c'
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"aB"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|'B'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|(
literal|'B'
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|'b'
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|TEST_REF_ENDS_WITH
define|#
directive|define
name|TEST_REF_ENDS_WITH
parameter_list|(
name|string
parameter_list|,
name|yes
parameter_list|)
value|{ CREATE_REF(string); QCOMPARE(a.endsWith(ref), yes); }
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|"AB"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABCDEF"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_REF_ENDS_WITH
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
DECL|macro|TEST_REF_STARTS_WITH
undef|#
directive|undef
name|TEST_REF_STARTS_WITH
name|a
operator|=
literal|""
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|null
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|endsWith
argument_list|(
name|QChar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|check_QDataStream
name|void
name|tst_QString
operator|::
name|check_QDataStream
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QByteArray
name|ar
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|ar
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|<<
name|QString
argument_list|(
literal|"COMPARE Text"
argument_list|)
expr_stmt|;
block|}
block|{
name|QDataStream
name|in
argument_list|(
operator|&
name|ar
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|>>
name|a
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"COMPARE Text"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|check_QTextStream
name|void
name|tst_QString
operator|::
name|check_QTextStream
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|QByteArray
name|ar
decl_stmt|;
block|{
name|QTextStream
name|out
argument_list|(
operator|&
name|ar
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|<<
name|QString
argument_list|(
literal|"This is COMPARE Text"
argument_list|)
expr_stmt|;
block|}
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|ar
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|>>
name|a
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"This"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|check_QTextIOStream
name|void
name|tst_QString
operator|::
name|check_QTextIOStream
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
block|{
name|a
operator|=
literal|""
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|ts
operator|<<
literal|"pi \261= "
operator|<<
literal|3.125
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
operator|(
name|QString
operator|)
literal|"pi \261= 3.125"
argument_list|)
expr_stmt|;
block|}
block|{
name|a
operator|=
literal|"123 456"
expr_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|QTextStream
argument_list|(
operator|&
name|a
argument_list|)
operator|>>
name|x
operator|>>
name|y
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|y
argument_list|,
literal|456
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromRawData
name|void
name|tst_QString
operator|::
name|fromRawData
parameter_list|()
block|{
specifier|const
name|QChar
name|ptr
index|[]
init|=
block|{
literal|0x1234
block|,
literal|0x0000
block|}
decl_stmt|;
name|QString
name|cstr
init|=
name|QString
operator|::
name|fromRawData
argument_list|(
name|ptr
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|==
name|ptr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
name|QString
argument_list|(
name|ptr
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cstr
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|==
name|ptr
argument_list|)
expr_stmt|;
name|cstr
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|capacity
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|!=
name|ptr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
name|QChar
argument_list|(
literal|0x1234
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
index|[
literal|1
index|]
operator|==
name|QChar
argument_list|(
literal|0x0000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRawData
name|void
name|tst_QString
operator|::
name|setRawData
parameter_list|()
block|{
specifier|const
name|QChar
name|ptr
index|[]
init|=
block|{
literal|0x1234
block|,
literal|0x0000
block|}
decl_stmt|;
specifier|const
name|QChar
name|ptr2
index|[]
init|=
block|{
literal|0x4321
block|,
literal|0x0000
block|}
decl_stmt|;
name|QString
name|cstr
decl_stmt|;
comment|// This just tests the fromRawData() fallback
name|QVERIFY
argument_list|(
operator|!
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|cstr
operator|.
name|setRawData
argument_list|(
name|ptr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|==
name|ptr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
name|QString
argument_list|(
name|ptr
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// This actually tests the recycling of the shared data object
name|QString
operator|::
name|DataPtr
name|csd
init|=
name|cstr
operator|.
name|data_ptr
argument_list|()
decl_stmt|;
name|cstr
operator|.
name|setRawData
argument_list|(
name|ptr2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|==
name|ptr2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
name|QString
argument_list|(
name|ptr2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|data_ptr
argument_list|()
operator|==
name|csd
argument_list|)
expr_stmt|;
comment|// This tests the discarding of the shared data object
name|cstr
operator|=
literal|"foo"
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|!=
name|ptr2
argument_list|)
expr_stmt|;
comment|// Another test of the fallback
name|csd
operator|=
name|cstr
operator|.
name|data_ptr
argument_list|()
expr_stmt|;
name|cstr
operator|.
name|setRawData
argument_list|(
name|ptr2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|constData
argument_list|()
operator|==
name|ptr2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|==
name|QString
argument_list|(
name|ptr2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstr
operator|.
name|data_ptr
argument_list|()
operator|!=
name|csd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromStdString
name|void
name|tst_QString
operator|::
name|fromStdString
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_CC_HPACC
name|QSKIP
argument_list|(
literal|"This test crashes on HP-UX with aCC"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STL
argument_list|)
name|std
operator|::
name|string
name|stroustrup
init|=
literal|"foo"
decl_stmt|;
name|QString
name|eng
init|=
name|QString
operator|::
name|fromStdString
argument_list|(
name|stroustrup
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|eng
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
name|cnull
index|[]
init|=
literal|"Embedded\0null\0character!"
decl_stmt|;
name|std
operator|::
name|string
name|stdnull
argument_list|(
name|cnull
argument_list|,
sizeof|sizeof
argument_list|(
name|cnull
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QString
name|qtnull
init|=
name|QString
operator|::
name|fromStdString
argument_list|(
name|stdnull
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qtnull
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
name|stdnull
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|toStdString
name|void
name|tst_QString
operator|::
name|toStdString
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_CC_HPACC
name|QSKIP
argument_list|(
literal|"This test crashes on HP-UX with aCC"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_STL
argument_list|)
name|QString
name|nord
init|=
literal|"foo"
decl_stmt|;
name|std
operator|::
name|string
name|stroustrup1
init|=
name|nord
operator|.
name|toStdString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|qstrcmp
argument_list|(
name|stroustrup1
operator|.
name|c_str
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// For now, most QString constructors are also broken with respect
comment|// to embedded null characters, had to find one that works...
specifier|const
name|QChar
name|qcnull
index|[]
init|=
block|{
literal|'E'
block|,
literal|'m'
block|,
literal|'b'
block|,
literal|'e'
block|,
literal|'d'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'d'
block|,
literal|'\0'
block|,
literal|'n'
block|,
literal|'u'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'\0'
block|,
literal|'c'
block|,
literal|'h'
block|,
literal|'a'
block|,
literal|'r'
block|,
literal|'a'
block|,
literal|'c'
block|,
literal|'t'
block|,
literal|'e'
block|,
literal|'r'
block|,
literal|'!'
block|}
decl_stmt|;
name|QString
name|qtnull
argument_list|(
name|qcnull
argument_list|,
sizeof|sizeof
argument_list|(
name|qcnull
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|stdnull
init|=
name|qtnull
operator|.
name|toStdString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stdnull
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|qtnull
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|utf8
name|void
name|tst_QString
operator|::
name|utf8
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|utf8
argument_list|,
name|QByteArray
argument_list|(
name|res
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_utf8_data
name|void
name|tst_QString
operator|::
name|stringRef_utf8_data
parameter_list|()
block|{
name|utf8_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_utf8
name|void
name|tst_QString
operator|::
name|stringRef_utf8
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QStringRef
name|ref
argument_list|(
operator|&
name|res
argument_list|,
literal|0
argument_list|,
name|res
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|utf8
argument_list|,
name|QByteArray
argument_list|(
name|ref
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied to tst_QTextCodec::utf8Codec_data()
end_comment
begin_function
DECL|function|fromUtf8_data
name|void
name|tst_QString
operator|::
name|fromUtf8_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\366\344\374\326\304\334\370\346\345\330\306\305"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\366\344\374\326\304"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05e9
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d3
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\327\251\327\223\327\222"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x05e9
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\327\251\327\223\327\222"
argument_list|)
operator|<<
name|str
operator|<<
literal|2
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x20ac
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|" some text"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\202\254 some text"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x20ac
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|" some "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str3-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\202\254 some text"
argument_list|)
operator|<<
name|str
operator|<<
literal|9
expr_stmt|;
name|str
operator|=
literal|"hello"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x68
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x61
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hello\344h\344\344\366\344a\304"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hello\344h\344\344\366\344a\304"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|str
operator|=
literal|"Prohl"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|"e"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|" plugin"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|" Netscape"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Prohl\355\276e\350 plugin\371 Netscape"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8-len 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Prohl\355\276e\350 plugin\371 Netscape"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null5"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"ab"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|str
operator|=
literal|"Old Italic: "
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf00
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf01
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf02
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf03
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf04
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"surrogate"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Old Italic: \360\220\214\200\360\220\214\201\360\220\214\202\360\220\214\203\360\220\214\204"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"surrogate-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Old Italic: \360\220\214\200\360\220\214\201\360\220\214\202\360\220\214\203\360\220\214\204"
argument_list|)
operator|<<
name|str
operator|.
name|left
argument_list|(
literal|16
argument_list|)
operator|<<
literal|20
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromUtf8
name|void
name|tst_QString
operator|::
name|fromUtf8
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|utf8
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|utf8
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|)
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nullFromUtf8
name|void
name|tst_QString
operator|::
name|nullFromUtf8
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromLocal8Bit_data
name|void
name|tst_QString
operator|::
name|fromLocal8Bit_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"local8Bit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|//QTest::newRow("nullString")<< QByteArray()<< -1<< QString();
comment|//QTest::newRow("emptyString")<< QByteArray("")<< -1<< QString("");
comment|//QTest::newRow("string")<< QByteArray("test")<< -1<< QString("test");
comment|//QTest::newRow("stringlen0")<< QByteArray("test")<< 0<< QString("");
comment|//QTest::newRow("stringlen3")<< QByteArray("test")<< 3<< QString("tes");
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stringlen99"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"test\0foo"
argument_list|,
literal|8
argument_list|)
operator|<<
literal|8
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"test\0foo"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QByteArray
name|longQByteArray
decl_stmt|;
name|QString
name|longQString
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|111
condition|;
name|l
operator|++
control|)
block|{
name|longQByteArray
operator|=
name|longQByteArray
operator|+
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
expr_stmt|;
name|longQString
operator|+=
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
expr_stmt|;
block|}
comment|//QTest::newRow("longString")<< longQByteArray<< -1<< longQString;
comment|//QTest::newRow("longStringlen0")<< longQByteArray<< 0<< QString("");
comment|//QTest::newRow("longStringlen3")<< longQByteArray<< 3<< QString("aaa");
comment|//QTest::newRow("someNonAlphaChars")<< QByteArray("d:/this/is/a/test.h")<< -1<< QString("d:/this/is/a/test.h");
comment|//QTest::newRow("null-1")<< QByteArray()<< -1<< QString();
comment|//QTest::newRow("null0")<< QByteArray()<< 0<< QString();
comment|//QTest::newRow("null5")<< QByteArray()<< 5<< QString();
comment|//QTest::newRow("empty-1")<< QByteArray("\0abcd", 5)<< -1<< QString();
comment|//QTest::newRow("empty0")<< QByteArray()<< 0<< QString();
comment|//QTest::newRow("empty5")<< QByteArray("\0abcd", 5)<< 5<< QString::fromAscii("\0abcd", 5);
comment|//QTest::newRow("other-1")<< QByteArray("ab\0cd", 5)<< -1<< QString::fromAscii("ab");
comment|//QTest::newRow("other5")<< QByteArray("ab\0cd", 5)<< 5<< QString::fromAscii("ab\0cd", 5);
block|}
end_function
begin_function
DECL|function|fromLocal8Bit
name|void
name|tst_QString
operator|::
name|fromLocal8Bit
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|local8Bit
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|local8Bit
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|local8Bit
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|local8Bit
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|local8Bit
operator|.
name|data
argument_list|()
argument_list|,
name|len
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|local8Bit_data
name|void
name|tst_QString
operator|::
name|local8Bit_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"local8Bit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|/*     QString::local8Bit() called on a null QString returns an _empty_     QByteArray. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullString"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyString"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QByteArray
name|longQByteArray
decl_stmt|;
name|QString
name|longQString
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
literal|111
condition|;
name|l
operator|++
control|)
block|{
name|longQByteArray
operator|=
name|longQByteArray
operator|+
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
expr_stmt|;
name|longQString
operator|+=
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longString"
argument_list|)
operator|<<
name|longQString
operator|<<
name|longQByteArray
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"someNonAlphaChars"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d:/this/is/a/test.h"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"d:/this/is/a/test.h"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|local8Bit
name|void
name|tst_QString
operator|::
name|local8Bit
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|local8Bit
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|local8Bit
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_local8Bit_data
name|void
name|tst_QString
operator|::
name|stringRef_local8Bit_data
parameter_list|()
block|{
name|local8Bit_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_local8Bit
name|void
name|tst_QString
operator|::
name|stringRef_local8Bit
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|local8Bit
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QStringRef
name|ref
argument_list|(
operator|&
name|local8Bit
argument_list|,
literal|0
argument_list|,
name|local8Bit
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ref
operator|.
name|toLocal8Bit
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromLatin1Roundtrip_data
name|void
name|tst_QString
operator|::
name|fromLatin1Roundtrip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"latin1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"unicode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|""
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode1
index|[]
init|=
block|{
literal|'H'
block|,
literal|'e'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'o'
block|,
literal|1
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x7f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii-only"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii+control"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\1\r\n\x7f"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode3
index|[]
init|=
block|{
literal|'a'
block|,
literal|0
block|,
literal|'z'
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii+nul"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0z"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode4
index|[]
init|=
block|{
literal|0x80
block|,
literal|0xc0
block|,
literal|0xff
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-ascii"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\xc0\xff"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromLatin1Roundtrip
name|void
name|tst_QString
operator|::
name|fromLatin1Roundtrip
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
comment|// QtTest safety check:
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isNull
argument_list|()
argument_list|,
name|unicode
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|unicode
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|length
argument_list|()
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|latin1
operator|.
name|isEmpty
argument_list|()
condition|)
while|while
condition|(
name|latin1
operator|.
name|length
argument_list|()
operator|<
literal|128
condition|)
block|{
name|latin1
operator|+=
name|latin1
expr_stmt|;
name|unicode
operator|+=
name|unicode
expr_stmt|;
block|}
comment|// fromLatin1
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|latin1
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|latin1
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
comment|// and back:
name|QCOMPARE
argument_list|(
name|unicode
operator|.
name|toLatin1
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|unicode
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLatin1Roundtrip_data
name|void
name|tst_QString
operator|::
name|toLatin1Roundtrip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"latin1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"unicodesrc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"unicodedst"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode1
index|[]
init|=
block|{
literal|'H'
block|,
literal|'e'
block|,
literal|'l'
block|,
literal|'l'
block|,
literal|'o'
block|,
literal|1
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|0x7f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii-only"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii+control"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\1\r\n\x7f"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|9
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode3
index|[]
init|=
block|{
literal|'a'
block|,
literal|0
block|,
literal|'z'
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii+nul"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0z"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode3
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode4
index|[]
init|=
block|{
literal|0x80
block|,
literal|0xc0
block|,
literal|0xff
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-ascii"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\xc0\xff"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode4
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicodeq
index|[]
init|=
block|{
literal|'?'
block|,
literal|'?'
block|,
literal|'?'
block|,
literal|'?'
block|,
literal|'?'
block|}
decl_stmt|;
specifier|const
name|QString
name|questionmarks
init|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicodeq
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode5
index|[]
init|=
block|{
literal|0x100
block|,
literal|0x101
block|,
literal|0x17f
block|,
literal|0x7f00
block|,
literal|0x7f7f
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-latin1a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"?????"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode5
argument_list|,
literal|5
argument_list|)
operator|<<
name|questionmarks
expr_stmt|;
specifier|static
specifier|const
name|ushort
name|unicode6
index|[]
init|=
block|{
literal|0x180
block|,
literal|0x1ff
block|,
literal|0x8001
block|,
literal|0x8080
block|,
literal|0xfffc
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-latin1b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"?????"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode6
argument_list|,
literal|5
argument_list|)
operator|<<
name|questionmarks
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLatin1Roundtrip
name|void
name|tst_QString
operator|::
name|toLatin1Roundtrip
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicodesrc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicodedst
argument_list|)
expr_stmt|;
comment|// QtTest safety check:
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isNull
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|length
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isNull
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|length
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|latin1
operator|.
name|isEmpty
argument_list|()
condition|)
while|while
condition|(
name|latin1
operator|.
name|length
argument_list|()
operator|<
literal|128
condition|)
block|{
name|latin1
operator|+=
name|latin1
expr_stmt|;
name|unicodesrc
operator|+=
name|unicodesrc
expr_stmt|;
name|unicodedst
operator|+=
name|unicodedst
expr_stmt|;
block|}
comment|// toLatin1
name|QCOMPARE
argument_list|(
name|unicodesrc
operator|.
name|toLatin1
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|unicodesrc
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
comment|// and back:
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|latin1
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|latin1
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|unicodedst
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_toLatin1Roundtrip_data
name|void
name|tst_QString
operator|::
name|stringRef_toLatin1Roundtrip_data
parameter_list|()
block|{
name|toLatin1Roundtrip_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stringRef_toLatin1Roundtrip
name|void
name|tst_QString
operator|::
name|stringRef_toLatin1Roundtrip
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicodesrc
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicodedst
argument_list|)
expr_stmt|;
comment|// QtTest safety check:
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isNull
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|length
argument_list|()
argument_list|,
name|unicodesrc
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isNull
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|latin1
operator|.
name|length
argument_list|()
argument_list|,
name|unicodedst
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|latin1
operator|.
name|isEmpty
argument_list|()
condition|)
while|while
condition|(
name|latin1
operator|.
name|length
argument_list|()
operator|<
literal|128
condition|)
block|{
name|latin1
operator|+=
name|latin1
expr_stmt|;
name|unicodesrc
operator|+=
name|unicodesrc
expr_stmt|;
name|unicodedst
operator|+=
name|unicodedst
expr_stmt|;
block|}
comment|// toLatin1
name|QStringRef
name|src
argument_list|(
operator|&
name|unicodesrc
argument_list|,
literal|0
argument_list|,
name|unicodesrc
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|toLatin1
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|latin1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|latin1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromLatin1
name|void
name|tst_QString
operator|::
name|fromLatin1
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\0abcd"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromAscii
name|void
name|tst_QString
operator|::
name|fromAscii
parameter_list|()
block|{
name|QString
name|a
decl_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"\0abcd"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|arg
name|void
name|tst_QString
operator|::
name|arg
parameter_list|()
block|{
comment|/*     Warning: If any of these test fails, the warning given by QtTest     is all messed up, because QtTest itself uses QString::arg(). */
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s4
argument_list|(
literal|"[%0]"
argument_list|)
decl_stmt|;
name|QString
name|s5
argument_list|(
literal|"[%1]"
argument_list|)
decl_stmt|;
name|QString
name|s6
argument_list|(
literal|"[%3]"
argument_list|)
decl_stmt|;
name|QString
name|s7
argument_list|(
literal|"[%9]"
argument_list|)
decl_stmt|;
name|QString
name|s8
argument_list|(
literal|"[%0 %1]"
argument_list|)
decl_stmt|;
name|QString
name|s9
argument_list|(
literal|"[%0 %3]"
argument_list|)
decl_stmt|;
name|QString
name|s10
argument_list|(
literal|"[%1 %2 %3]"
argument_list|)
decl_stmt|;
name|QString
name|s11
argument_list|(
literal|"[%9 %3 %0]"
argument_list|)
decl_stmt|;
name|QString
name|s12
argument_list|(
literal|"[%9 %1 %3 %9 %0 %8]"
argument_list|)
decl_stmt|;
name|QString
name|s13
argument_list|(
literal|"%1% %x%c%2 %d%2-%"
argument_list|)
decl_stmt|;
name|QString
name|s14
argument_list|(
literal|"%1%2%3"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s5
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s6
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s7
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo %1]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s9
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo %3]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s9
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s9
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo %2 %3]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar %3]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar %3]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar baz]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo bar baz]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[%9 %3 foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[%9 bar foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[%9 bar foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[baz bar foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[baz bar foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s12
operator|.
name|arg
argument_list|(
literal|"a"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"b"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"c"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"d"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[e b c e a d]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s12
operator|.
name|arg
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[e b c e a d]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s12
operator|.
name|arg
argument_list|(
literal|"a"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[e b c e a d]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s13
operator|.
name|arg
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"beta"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"alpha% %x%cbeta %dbeta-%"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s13
operator|.
name|arg
argument_list|(
literal|"alpha"
argument_list|,
literal|"beta"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"alpha% %x%cbeta %dbeta-%"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s14
operator|.
name|arg
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|arg
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|arg
argument_list|(
literal|"%1"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[%1 foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[       foo]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|,
operator|-
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[foo       ]"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|firstName
argument_list|(
literal|"James"
argument_list|)
decl_stmt|;
name|QString
name|lastName
argument_list|(
literal|"Bond"
argument_list|)
decl_stmt|;
name|QString
name|fullName
init|=
name|QString
argument_list|(
literal|"My name is %2, %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|firstName
argument_list|)
operator|.
name|arg
argument_list|(
name|lastName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fullName
argument_list|,
name|QString
argument_list|(
literal|"My name is Bond, James Bond"
argument_list|)
argument_list|)
expr_stmt|;
comment|// number overloads
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[0]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[-1]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
literal|4294967295UL
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"[4294967295]"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ULONG_MAX 32
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|arg
argument_list|(
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
argument_list|,
comment|// LLONG_MAX
name|QString
argument_list|(
literal|"[9223372036854775807]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|()
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|" "
argument_list|)
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%"
argument_list|)
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%%"
argument_list|)
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%%"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%%%"
argument_list|)
operator|.
name|arg
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%%%"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%%%1%%%2"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%%foo%%bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
operator|-
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello     "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
operator|-
literal|5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
operator|-
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
literal|5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"     hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hellohello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%2%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%2hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%2%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%2 %L1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345.6789
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345.6789
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12345.7 12.345,7"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%2 %L1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|123456789
argument_list|)
operator|.
name|arg
argument_list|(
literal|123456789
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123456789 123.456.789"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%L2 %L1 %3"
argument_list|)
operator|.
name|arg
argument_list|(
literal|12345.7
argument_list|)
operator|.
name|arg
argument_list|(
literal|123456789
argument_list|)
operator|.
name|arg
argument_list|(
literal|'c'
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123.456.789 12.345,7 c"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi-digit replacement
name|QString
name|input
argument_list|(
literal|"%%%L0 %1 %02 %3 %4 %5 %L6 %7 %8 %%% %090 %10 %11 %L12 %14 %L9888 %9999 %%%%%%%L"
argument_list|)
decl_stmt|;
name|input
operator|=
name|input
operator|.
name|arg
argument_list|(
literal|"A"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"B"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"C"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"D"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"E"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"f"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"g"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"h"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"i"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"j"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"k"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"l"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"m"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"n"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"o"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|input
argument_list|,
name|QString
argument_list|(
literal|"%%A B C D E f g h i %%% j0 k l m n o88 p99 %%%%%%%L"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str
argument_list|(
literal|"%1 %2 %3 %4 %5 %6 %7 %8 %9 foo %10 %11 bar"
argument_list|)
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|arg
argument_list|(
literal|"one"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|str
operator|=
name|str
operator|.
name|arg
argument_list|(
literal|"ahoy"
argument_list|,
literal|"there"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"one 2 3 4 5 6 7 8 9 foo ahoy there bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str2
argument_list|(
literal|"%123 %234 %345 %456 %567 %999 %1000 %1230"
argument_list|)
decl_stmt|;
name|str2
operator|=
name|str2
operator|.
name|arg
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
argument_list|,
name|QString
argument_list|(
literal|"A B C D E F %1000 %1230"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-01"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|" -1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1U
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"  1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1000U
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"x-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1U
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"xx1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1000U
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-01"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|" -1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"xx1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
literal|1000.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|1.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"x-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|-
literal|100.
argument_list|,
literal|3
argument_list|,
literal|'g'
argument_list|,
operator|-
literal|1
argument_list|,
name|QChar
argument_list|(
literal|'x'
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-100"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|number
name|void
name|tst_QString
operator|::
name|number
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
call|(
name|unsigned
name|int
call|)
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|-
literal|22L
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-22"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|333UL
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"333"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|4.4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"4.4"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|Q_INT64_C
argument_list|(
operator|-
literal|555
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-555"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|6666
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"6666"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacity_data
name|void
name|tst_QString
operator|::
name|capacity_data
parameter_list|()
block|{
name|length_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacity
name|void
name|tst_QString
operator|::
name|capacity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QString
name|s2
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|s2
operator|.
name|reserve
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|s2
operator|.
name|capacity
argument_list|()
operator|>=
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|s2
operator|.
name|reserve
argument_list|(
name|res
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|s2
operator|.
name|capacity
argument_list|()
operator|>=
name|res
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|s2
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|s2
operator|.
name|capacity
argument_list|()
operator|==
name|res
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|section_data
name|void
name|tst_QString
operator|::
name|section_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"wholeString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sectionString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"forename,middlename,surname,phone"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|","
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"surname"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/usr/local/bin/myapp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|3
operator|<<
literal|4
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bin/myapp"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/usr/local/bin/myapp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"myapp"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"forename**middlename**surname**phone"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"**"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"surname"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"forename**middlename**surname**phone"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"**"
argument_list|)
operator|<<
operator|-
literal|3
operator|<<
operator|-
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"middlename**surname"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"##Datt######wollen######wir######mal######sehen##"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Datt"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"##Datt######wollen######wir######mal######sehen##"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"wollen"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"##Datt######wollen######wir######mal######sehen##"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"wir"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"##Datt######wollen######wir######mal######sehen##"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mal"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"##Datt######wollen######wir######mal######sehen##"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"#"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sehen"
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// not fixed for 3.1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a/b/c/d"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/b/c/d"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aoLoboLocolod"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"olo"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionCaseInsensitiveSeps
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data12"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"F0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"F"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionSkipEmpty
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo1rx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo2rx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";foo"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo3rx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo;foo;"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|";"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qmake_path"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/Users/sam/troll/qt4.0/src/corelib/QtCore_debug.xcode/"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/Users/sam/troll/qt4.0/src/corelib/QtCore_debug.xcode"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qmake_pathrx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/Users/sam/troll/qt4.0/src/corelib/QtCore_debug.xcode/"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/Users/sam/troll/qt4.0/src/corelib/QtCore_debug.xcode"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data13"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"||2|3|||"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"||"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data14"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"||2|3|||"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\|"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"||"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data15"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|1|2|"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|1|"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|1|2|"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\|"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"|1|"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o2o"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|2
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o2o"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rx1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z]"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rx2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z]"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rx3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z]"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o2o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rx4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z]"
argument_list|)
operator|<<
literal|2
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o2o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rx5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z]"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
operator||
name|QString
operator|::
name|SectionIncludeTrailingSep
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"o1o2o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data17"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"This is a story, a small story"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\b"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionDefault
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"is"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data18"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"99.0 42.3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\s*[AaBb]\\s*"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|int
argument_list|(
name|QString
operator|::
name|SectionIncludeLeadingSep
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|section
name|void
name|tst_QString
operator|::
name|section
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|wholeString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sectionString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
if|if
condition|(
name|regexp
condition|)
block|{
name|QCOMPARE
argument_list|(
name|wholeString
operator|.
name|section
argument_list|(
name|QRegExp
argument_list|(
name|sep
argument_list|)
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|QString
operator|::
name|SectionFlag
argument_list|(
name|flags
argument_list|)
argument_list|)
argument_list|,
name|sectionString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|wholeString
operator|.
name|section
argument_list|(
name|sep
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|QString
operator|::
name|SectionFlag
argument_list|(
name|flags
argument_list|)
argument_list|)
argument_list|,
name|sectionString
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_eqeq_nullstring
name|void
name|tst_QString
operator|::
name|operator_eqeq_nullstring
parameter_list|()
block|{
comment|/* Some of these might not be all that logical but it's the behaviour we've had since 3.0.0        so we should probably stick with it. */
name|QVERIFY
argument_list|(
name|QString
argument_list|()
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|""
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|()
operator|==
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
operator|==
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_smaller
name|void
name|tst_QString
operator|::
name|operator_smaller
parameter_list|()
block|{
name|QString
name|null
decl_stmt|;
name|QString
name|empty
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QString
name|foo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|<
name|QString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|QString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|empty
operator|<
name|QString
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|empty
operator|>
name|QString
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|<
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|<
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|>
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|null
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|<
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|empty
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|>
name|empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|<
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|null
operator|>
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|empty
operator|<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|empty
operator|>
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|<
name|null
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|>
name|null
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|<
name|null
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|>
name|null
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|<
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|>
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|<
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|>
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|<
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|<
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|>
name|QLatin1String
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|>
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|==
name|empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|0
argument_list|)
operator|==
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|==
name|empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|==
name|null
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|>
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
operator|<
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|foo
operator|>
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
operator|<
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|"a"
argument_list|)
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|foo
operator|<
name|QLatin1String
argument_list|(
literal|"z"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|>
name|QLatin1String
argument_list|(
literal|"z"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QLatin1String
argument_list|(
literal|"z"
argument_list|)
operator|<
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|QLatin1String
argument_list|(
literal|"z"
argument_list|)
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integer_conversion_data
name|void
name|tst_QString
operator|::
name|integer_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 8"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 10"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null 16"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -0xf 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -0xf"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0xf   0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0xf  "
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t0xf\t 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t0xf\t"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010   0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010  "
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t-010\t 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t-010\t"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   123 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  123"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123   10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123  "
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t123\t 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t123\t"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   -0xf 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  -0xf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0xf   16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0xf  "
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C \t0xf\t 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\t0xf\t"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|15
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x"
argument_list|)
operator|<<
literal|16
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 010 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 0x10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|0
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -010 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-010"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -0x10 16"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-0x10"
argument_list|)
operator|<<
literal|16
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
operator|-
literal|16
expr_stmt|;
comment|// Let's try some Arabic
specifier|const
name|quint16
name|arabic_str
index|[]
init|=
block|{
literal|0x0661
block|,
literal|0x0662
block|,
literal|0x0663
block|,
literal|0x0664
block|,
literal|0x0000
block|}
decl_stmt|;
comment|// "1234"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar_SA 1234 0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|arabic_str
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integer_conversion
name|void
name|tst_QString
operator|::
name|integer_conversion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|qlonglong
name|d
init|=
name|num_str
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|double_conversion_data
name|void
name|tst_QString
operator|::
name|double_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
comment|// The good...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
comment|// The bad...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234e-10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234E10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
comment|// And the ugly...
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1  "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
comment|// Let's try some Arabic
specifier|const
name|quint16
name|arabic_str
index|[]
init|=
block|{
literal|0x0660
block|,
literal|0x066B
block|,
literal|0x0661
block|,
literal|0x0662
block|,
literal|0x0663
block|,
literal|0x0664
block|,
literal|0x0065
block|,
literal|0x0662
block|,
literal|0x0000
block|}
decl_stmt|;
comment|// "0.1234e2"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar_SA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|arabic_str
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_conversion
name|void
name|tst_QString
operator|::
name|double_conversion
parameter_list|()
block|{
DECL|macro|MY_DOUBLE_EPSILON
define|#
directive|define
name|MY_DOUBLE_EPSILON
value|(2.22045e-16)
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|num_str
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|double
name|diff
init|=
name|d
operator|-
name|num
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|diff
operator|=
operator|-
name|diff
expr_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
name|MY_DOUBLE_EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_MOC_RUN
end_ifndef
begin_include
include|#
directive|include
file|"double_data.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|tortureSprintfDouble
name|void
name|tst_QString
operator|::
name|tortureSprintfDouble
parameter_list|()
block|{
specifier|const
name|SprintfDoubleData
modifier|*
name|data
init|=
name|g_sprintf_double_data
decl_stmt|;
name|QString
name|s
decl_stmt|;
for|for
control|(
init|;
name|data
operator|->
name|fmt
operator|!=
literal|0
condition|;
operator|++
name|data
control|)
block|{
name|double
name|d
decl_stmt|;
name|char
modifier|*
name|buff
init|=
operator|(
name|char
operator|*
operator|)
operator|&
name|d
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_BYTE_ORDER
error|#
directive|error
literal|"Q_BYTE_ORDER not defined"
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|buff
index|[
literal|0
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|4
index|]
expr_stmt|;
name|buff
index|[
literal|1
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|5
index|]
expr_stmt|;
name|buff
index|[
literal|2
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|6
index|]
expr_stmt|;
name|buff
index|[
literal|3
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|7
index|]
expr_stmt|;
name|buff
index|[
literal|4
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|0
index|]
expr_stmt|;
name|buff
index|[
literal|5
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|1
index|]
expr_stmt|;
name|buff
index|[
literal|6
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|2
index|]
expr_stmt|;
name|buff
index|[
literal|7
index|]
operator|=
name|data
operator|->
name|bytes
index|[
literal|3
index|]
expr_stmt|;
elif|#
directive|elif
name|Q_BYTE_ORDER
operator|==
name|Q_LITTLE_ENDIAN
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
name|buff
index|[
name|i
index|]
operator|=
name|data
operator|->
name|bytes
index|[
name|i
index|]
expr_stmt|;
else|#
directive|else
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
name|buff
index|[
literal|7
operator|-
name|i
index|]
operator|=
name|data
operator|->
name|bytes
index|[
name|i
index|]
expr_stmt|;
endif|#
directive|endif
name|s
operator|.
name|sprintf
argument_list|(
name|data
operator|->
name|fmt
argument_list|,
name|d
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_FPU
comment|// reduced precision when running with hardfloats in qemu
if|if
condition|(
name|d
operator|-
literal|0.1
operator|<
literal|1e12
condition|)
name|QSKIP
argument_list|(
literal|"clib sprintf doesn't fill with 0's on this platform"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|left
argument_list|(
literal|16
argument_list|)
argument_list|,
name|QString
argument_list|(
name|data
operator|->
name|expected
argument_list|)
operator|.
name|left
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
name|data
operator|->
name|expected
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_function
DECL|function|localeAwareCompare_data
name|void
name|tst_QString
operator|::
name|localeAwareCompare_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|addColumn
argument_list|<
name|ulong
argument_list|>
argument_list|(
literal|"locale"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|/*         The C locale performs pure byte comparisons for         Latin-1-specific characters (I think). Compare with Swedish         below.     */
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// assume c locale to be english
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c1"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c2"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c3"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
comment|/*         It's hard to test English, because it's treated differently         on different platforms. For example, on Linux, it uses the         iso14651_t1 template file, which happens to provide good         defaults for Swedish. Mac OS X seems to do a pure bytewise         comparison of Latin-1 values, although I'm not sure. So I         just test digits to make sure that it's not totally broken.     */
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english1"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english2"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english3"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_ENGLISH
argument_list|,
name|SUBLANG_ENGLISH_US
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
comment|/*         In Swedish, a with ring above (E5) comes before a with         diaresis (E4), which comes before o diaresis (F6), which         all come after z.     */
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish1"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SWEDISH
argument_list|,
name|SUBLANG_SWEDISH
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish2"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SWEDISH
argument_list|,
name|SUBLANG_SWEDISH
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish3"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SWEDISH
argument_list|,
name|SUBLANG_SWEDISH
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish4"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_SWEDISH
argument_list|,
name|SUBLANG_SWEDISH
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
literal|0
comment|/*         In Norwegian, ae (E6) comes before o with stroke (D8), which         comes before a with ring above (E5).     */
block|QTest::newRow("norwegian1")<< QString("no_NO")<< QString("\xe6")<< QString("\xd8")<< -1;     QTest::newRow("norwegian2")<< QString("no_NO")<< QString("\xd8")<< QString("\xe5")<< -1;     QTest::newRow("norwegian3")<< QString("no_NO")<< QString("\xe6")<< QString("\xe5")<< -1;
endif|#
directive|endif
comment|/*         In German, z comes *after* a with diaresis (E4),         which comes before o diaresis (F6).     */
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE.ISO8859-1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german1"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_GERMAN
argument_list|,
name|SUBLANG_GERMAN
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german2"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_GERMAN
argument_list|,
name|SUBLANG_GERMAN
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german3"
argument_list|)
operator|<<
name|MAKELCID
argument_list|(
name|MAKELANGID
argument_list|(
name|LANG_GERMAN
argument_list|,
name|SUBLANG_GERMAN
argument_list|)
argument_list|,
name|SORT_DEFAULT
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|localeAwareCompare
name|void
name|tst_QString
operator|::
name|localeAwareCompare
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"On others than Win CE, we cannot set the system or user locale."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|ulong
argument_list|,
name|locale
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QStringRef
name|r1
argument_list|(
operator|&
name|s1
argument_list|,
literal|0
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QStringRef
name|r2
argument_list|(
operator|&
name|s2
argument_list|,
literal|0
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|DWORD
name|oldLcid
init|=
name|GetUserDefaultLCID
argument_list|()
decl_stmt|;
name|SetUserDefaultLCID
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
argument_list|,
name|GetUserDefaultLCID
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|DWORD
name|oldLcid
init|=
name|GetThreadLocale
argument_list|()
decl_stmt|;
name|SetThreadLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
argument_list|,
name|GetThreadLocale
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QSKIP
argument_list|(
literal|"Setting the locale is not supported on OS X (you can set the C locale, but that won't affect CFStringCompare which is used to compare strings)"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_USE_ICU
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|locale
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
operator|!
name|locale
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|char
modifier|*
name|newLocale
init|=
name|setlocale
argument_list|(
name|LC_ALL
argument_list|,
name|locale
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newLocale
condition|)
block|{
name|setlocale
argument_list|(
name|LC_ALL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Please install the proper locale on this machine to test properly"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_ICU
comment|// ### for c1, ICU disagrees with libc on how to compare
name|QEXPECT_FAIL
argument_list|(
literal|"c1"
argument_list|,
literal|"ICU disagrees with test"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|int
name|testres
init|=
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|testres
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|testres
operator|=
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|testres
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|testres
operator|=
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|testres
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|testres
operator|=
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|testres
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|testres
operator|=
name|QStringRef
operator|::
name|localeAwareCompare
argument_list|(
name|r2
argument_list|,
name|r1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|<
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|testres
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|testres
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|SetUserDefaultLCID
argument_list|(
name|oldLcid
argument_list|)
expr_stmt|;
else|#
directive|else
name|SetThreadLocale
argument_list|(
name|oldLcid
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
if|if
condition|(
operator|!
name|locale
operator|.
name|isEmpty
argument_list|()
condition|)
name|setlocale
argument_list|(
name|LC_ALL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|split_data
name|void
name|tst_QString
operator|::
name|split_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"a,b,c"
operator|<<
literal|","
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-rw-r--r--  1 0  0  519240 Jul  9  2002 bigfile"
argument_list|)
operator|<<
literal|" "
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-rw-r--r--"
operator|<<
literal|""
operator|<<
literal|"1"
operator|<<
literal|"0"
operator|<<
literal|""
operator|<<
literal|"0"
operator|<<
literal|""
operator|<<
literal|"519240"
operator|<<
literal|"Jul"
operator|<<
literal|""
operator|<<
literal|"9"
operator|<<
literal|""
operator|<<
literal|"2002"
operator|<<
literal|"bigfile"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|" "
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-empty"
argument_list|)
operator|<<
literal|" "
operator|<<
literal|" "
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"three-empty"
argument_list|)
operator|<<
literal|"  "
operator|<<
literal|" "
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all-empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sep-empty"
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|""
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|""
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|split
name|void
name|tst_QString
operator|::
name|split
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sep
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
init|=
name|QRegExp
argument_list|(
name|QRegExp
operator|::
name|escape
argument_list|(
name|sep
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|rx
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|sep
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
argument_list|,
name|QString
operator|::
name|KeepEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|rx
argument_list|,
name|QString
operator|::
name|KeepEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|sep
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
operator|::
name|KeepEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|removeAll
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|rx
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|sep
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|list
operator|=
name|str
operator|.
name|split
argument_list|(
name|sep
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|split_regexp
name|void
name|tst_QString
operator|::
name|split_regexp
parameter_list|()
block|{
name|QString
name|str1
init|=
literal|"Some  text\n\twith  strange whitespace."
decl_stmt|;
name|QStringList
name|list1
init|=
name|str1
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s+"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|result1
decl_stmt|;
name|result1
operator|<<
literal|"Some"
operator|<<
literal|"text"
operator|<<
literal|"with"
operator|<<
literal|"strange"
operator|<<
literal|"whitespace."
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|result1
argument_list|)
expr_stmt|;
name|list1
operator|=
name|str1
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s"
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|==
name|result1
argument_list|)
expr_stmt|;
name|QString
name|str2
init|=
literal|"This time, a normal English sentence."
decl_stmt|;
name|QStringList
name|list2
init|=
name|str2
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\W+"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|result2
decl_stmt|;
name|result2
operator|<<
literal|"This"
operator|<<
literal|"time"
operator|<<
literal|"a"
operator|<<
literal|"normal"
operator|<<
literal|"English"
operator|<<
literal|"sentence"
operator|<<
literal|""
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|result2
argument_list|)
expr_stmt|;
name|list2
operator|=
name|str2
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\W"
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|result2
operator|.
name|removeAll
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list2
operator|==
name|result2
argument_list|)
expr_stmt|;
name|QString
name|str3
init|=
literal|"Now: this sentence fragment."
decl_stmt|;
name|QStringList
name|list3
init|=
name|str3
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\b"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|result3
decl_stmt|;
name|result3
operator|<<
literal|""
operator|<<
literal|"Now"
operator|<<
literal|": "
operator|<<
literal|"this"
operator|<<
literal|" "
operator|<<
literal|"sentence"
operator|<<
literal|" "
operator|<<
literal|"fragment"
operator|<<
literal|"."
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|result3
argument_list|)
expr_stmt|;
name|list3
operator|=
name|str3
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\b"
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|result3
operator|.
name|removeAll
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list3
operator|==
name|result3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromUtf16_data
name|void
name|tst_QString
operator|::
name|fromUtf16_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ucs2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0-len"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromUtf16
name|void
name|tst_QString
operator|::
name|fromUtf16
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ucs2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromUtf16
argument_list|(
name|ucs2
operator|.
name|utf16
argument_list|()
argument_list|,
name|len
argument_list|)
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|latin1String
name|void
name|tst_QString
operator|::
name|latin1String
parameter_list|()
block|{
name|QString
name|s
argument_list|(
literal|"Hello"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
name|QLatin1String
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|!=
name|QLatin1String
argument_list|(
literal|"Hello World"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|<
name|QLatin1String
argument_list|(
literal|"Helloa"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|s
operator|>
name|QLatin1String
argument_list|(
literal|"Helloa"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|>
name|QLatin1String
argument_list|(
literal|"Helln"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|>
name|QLatin1String
argument_list|(
literal|"Hell"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|s
operator|<
name|QLatin1String
argument_list|(
literal|"Helln"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|s
operator|<
name|QLatin1String
argument_list|(
literal|"Hell"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nanAndInf
name|void
name|tst_QString
operator|::
name|nanAndInf
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|double
name|d
decl_stmt|;
DECL|macro|CHECK_DOUBLE
define|#
directive|define
name|CHECK_DOUBLE
parameter_list|(
name|str
parameter_list|,
name|expected_ok
parameter_list|,
name|expected_inf
parameter_list|)
define|\
value|d = QString(str).toDouble(&ok); \     QVERIFY(ok == expected_ok); \     QVERIFY((d == INFINITY) == expected_inf);
name|CHECK_DOUBLE
argument_list|(
literal|"inf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INF"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"inf  "
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"+inf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"\t +INF"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"\t INF"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"inF  "
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"+iNf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INFe-10"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"0xINF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"- INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"+ INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"-- INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"inf0"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"--INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"++INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INF++"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INF--"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INF +"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"INF -"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_DOUBLE
argument_list|(
literal|"0INF"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
DECL|macro|CHECK_INF
undef|#
directive|undef
name|CHECK_INF
DECL|macro|CHECK_NAN
define|#
directive|define
name|CHECK_NAN
parameter_list|(
name|str
parameter_list|,
name|expected_ok
parameter_list|,
name|expected_nan
parameter_list|)
define|\
value|d = QString(str).toDouble(&ok); \     QVERIFY(ok == expected_ok); \     QVERIFY((bool)isnan(d) == expected_nan); \      CHECK_NAN("nan", true, true)
name|CHECK_NAN
argument_list|(
literal|"NAN"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"nan  "
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"\t NAN"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"\t NAN  "
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
ifndef|#
directive|ifndef
name|QT_QLOCALE_USES_FCVT
comment|//In case we use glibc this tests will fail
name|CHECK_NAN
argument_list|(
literal|"-nan"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"+NAN"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
endif|#
directive|endif
name|CHECK_NAN
argument_list|(
literal|"NaN"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"nAn"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"NANe-10"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"0xNAN"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
name|CHECK_NAN
argument_list|(
literal|"0NAN"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
DECL|macro|CHECK_NAN
undef|#
directive|undef
name|CHECK_NAN
name|d
operator|=
name|QString
argument_list|(
literal|"-INF"
argument_list|)
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|==
operator|-
name|INFINITY
argument_list|)
expr_stmt|;
name|QString
argument_list|(
literal|"INF"
argument_list|)
operator|.
name|toLong
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QString
argument_list|(
literal|"INF"
argument_list|)
operator|.
name|toLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
argument_list|(
literal|"INF0"
argument_list|)
operator|.
name|toLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QString
argument_list|(
literal|"0INF0"
argument_list|)
operator|.
name|toLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|arg_fillChar_data
name|void
name|tst_QString
operator|::
name|arg_fillChar_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|(
literal|"replaceValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"widths"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fillChars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|replaceValues
decl_stmt|;
name|IntList
name|widths
decl_stmt|;
name|QString
name|fillChars
decl_stmt|;
name|replaceValues
operator|<<
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|5
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"f"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|widths
operator|<<
literal|3
operator|<<
literal|2
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%1%2%3"
argument_list|)
operator|<<
name|replaceValues
operator|<<
name|widths
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa5bfcccc0"
argument_list|)
expr_stmt|;
name|replaceValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|widths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|replaceValues
operator|<<
name|QVariant
argument_list|(
operator|(
name|int
operator|)
literal|5.5
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
operator|(
name|qulonglong
operator|)
name|INT_MAX
argument_list|)
expr_stmt|;
name|widths
operator|<<
literal|10
operator|<<
literal|2
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%3.%1.%3.%2"
argument_list|)
operator|<<
name|replaceValues
operator|<<
name|widths
operator|<<
name|QString
argument_list|(
literal|"0 c"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"2147483647.0000000005.2147483647.foo"
argument_list|)
expr_stmt|;
name|replaceValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|widths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|replaceValues
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"fisk"
argument_list|)
argument_list|)
expr_stmt|;
name|widths
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%9 og poteter"
argument_list|)
operator|<<
name|replaceValues
operator|<<
name|widths
operator|<<
name|QString
argument_list|(
literal|"f"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffisk og poteter"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|arg_fillChar
name|void
name|tst_QString
operator|::
name|arg_fillChar
parameter_list|()
block|{
specifier|static
specifier|const
name|int
name|base
init|=
literal|10
decl_stmt|;
specifier|static
specifier|const
name|char
name|fmt
init|=
literal|'g'
decl_stmt|;
specifier|static
specifier|const
name|int
name|prec
init|=
operator|-
literal|1
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|,
name|replaceValues
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|widths
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fillChars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replaceValues
operator|.
name|count
argument_list|()
argument_list|,
name|fillChars
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replaceValues
operator|.
name|count
argument_list|()
argument_list|,
name|widths
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|actual
init|=
name|pattern
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replaceValues
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QVariant
modifier|&
name|var
init|=
name|replaceValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|width
init|=
name|widths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QChar
modifier|&
name|fillChar
init|=
name|fillChars
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|var
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|String
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toString
argument_list|()
argument_list|,
name|width
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toInt
argument_list|()
argument_list|,
name|width
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toUInt
argument_list|()
argument_list|,
name|width
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|Double
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toDouble
argument_list|()
argument_list|,
name|width
argument_list|,
name|fmt
argument_list|,
name|prec
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toLongLong
argument_list|()
argument_list|,
name|width
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|actual
operator|=
name|actual
operator|.
name|arg
argument_list|(
name|var
operator|.
name|toULongLong
argument_list|()
argument_list|,
name|width
argument_list|,
name|base
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QVERIFY
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sign
specifier|static
specifier|inline
name|int
name|sign
parameter_list|(
name|int
name|x
parameter_list|)
block|{
return|return
name|x
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|x
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QString
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"csr"
argument_list|)
expr_stmt|;
comment|// case sensitive result
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cir"
argument_list|)
expr_stmt|;
comment|// case insensitive result
comment|// null strings
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// equal length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abC"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
comment|// different length
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abCdef"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QString
name|upper
decl_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|upper
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10400
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|lower
decl_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|lower
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x10428
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|upper
operator|<<
name|lower
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
comment|// embedded nulls
comment|// These don't work as of now. It's OK that these don't work since \0 is not a valid unicode
comment|/*QTest::newRow("data10")<< QString(QByteArray("\0", 1))<< QString(QByteArray("\0", 1))<< 0<< 0;     QTest::newRow("data11")<< QString(QByteArray("\0", 1))<< QString("")<< 1<< 1;     QTest::newRow("data12")<< QString("")<< QString(QByteArray("\0", 1))<< -1<< -1;     QTest::newRow("data13")<< QString("ab\0c")<< QString(QByteArray("ab\0c", 4))<< 0<< 0;     QTest::newRow("data14")<< QString(QByteArray("ab\0c", 4))<< QString("abc")<< -1<< -1;     QTest::newRow("data15")<< QString("abc")<< QString(QByteArray("ab\0c", 4))<< 1<< 1;*/
block|}
end_function
begin_function
DECL|function|isLatin
specifier|static
name|bool
name|isLatin
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|s
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|>
literal|0xff
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QString
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QStringRef
name|r1
argument_list|(
operator|&
name|s1
argument_list|,
literal|0
argument_list|,
name|s1
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QStringRef
name|r2
argument_list|(
operator|&
name|s2
argument_list|,
literal|0
argument_list|,
name|s2
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|s1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|r1
operator|.
name|compare
argument_list|(
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cir
condition|)
block|{
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|toCaseFolded
argument_list|()
argument_list|,
name|s2
operator|.
name|toCaseFolded
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s2
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|QLatin1String
argument_list|(
name|s2
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QByteArray
name|l1
init|=
name|s2
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|l1
operator|+=
literal|"x"
expr_stmt|;
name|QLatin1String
name|l1str
argument_list|(
name|l1
operator|.
name|constData
argument_list|()
argument_list|,
name|l1
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|l1str
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|s1
argument_list|,
name|l1str
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|l1str
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QStringRef
operator|::
name|compare
argument_list|(
name|r1
argument_list|,
name|l1str
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLatin
argument_list|(
name|s1
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|)
argument_list|)
argument_list|,
name|csr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sign
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|s1
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s2
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
argument_list|,
name|cir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resizeAfterFromRawData
name|void
name|tst_QString
operator|::
name|resizeAfterFromRawData
parameter_list|()
block|{
name|QString
name|buffer
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|QString
name|array
init|=
name|QString
operator|::
name|fromRawData
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|constData
argument_list|()
operator|==
name|buffer
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|constData
argument_list|()
operator|==
name|buffer
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeAfterReserve
name|void
name|tst_QString
operator|::
name|resizeAfterReserve
parameter_list|()
block|{
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|reserve
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|+=
literal|"hello world"
expr_stmt|;
comment|// resize should not affect capacity
name|s
operator|.
name|resize
argument_list|(
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|capacity
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
comment|// but squeeze does
name|s
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|capacity
argument_list|()
operator|==
name|s
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear does too
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test resize(0) border case
name|s
operator|.
name|reserve
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|s
operator|+=
literal|"hello world"
expr_stmt|;
name|s
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|capacity
argument_list|()
operator|==
literal|100
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeWithNegative
name|void
name|tst_QString
operator|::
name|resizeWithNegative
parameter_list|()
specifier|const
block|{
block|{
name|QString
name|string
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
name|string
operator|.
name|resize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|string
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
name|string
operator|.
name|resize
argument_list|(
operator|-
literal|9099
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|/* Example code from customer. */
name|QString
name|s
argument_list|(
name|QLatin1String
argument_list|(
literal|"hola"
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s
operator|.
name|resize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|truncateWithNegative
name|void
name|tst_QString
operator|::
name|truncateWithNegative
parameter_list|()
specifier|const
block|{
block|{
name|QString
name|string
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
name|string
operator|.
name|truncate
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|string
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
name|string
operator|.
name|truncate
argument_list|(
operator|-
literal|9099
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|/* Example code from customer. */
name|QString
name|test
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
decl_stmt|;
name|test
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"c"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|truncate
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|QCharRefMutableUnicode
name|void
name|tst_QString
operator|::
name|QCharRefMutableUnicode
parameter_list|()
specifier|const
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|.
name|resize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|str
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|=
literal|115
expr_stmt|;
name|str
index|[
literal|1
index|]
operator|.
name|unicode
argument_list|()
operator|=
literal|116
expr_stmt|;
name|str
index|[
literal|2
index|]
operator|.
name|unicode
argument_list|()
operator|=
literal|114
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"str"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QCharRefDetaching
name|void
name|tst_QString
operator|::
name|QCharRefDetaching
parameter_list|()
specifier|const
block|{
block|{
name|QString
name|str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"str"
argument_list|)
decl_stmt|;
name|QString
name|copy
decl_stmt|;
name|copy
index|[
literal|0
index|]
operator|=
name|QLatin1Char
argument_list|(
literal|'S'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"str"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|ushort
name|buf
index|[]
init|=
block|{
literal|'s'
block|,
literal|'t'
block|,
literal|'r'
block|}
decl_stmt|;
name|QString
name|str
init|=
name|QString
operator|::
name|fromRawData
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|buf
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|str
index|[
literal|0
index|]
operator|=
name|QLatin1Char
argument_list|(
literal|'S'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|,
name|ushort
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|static
specifier|const
name|ushort
name|buf
index|[]
init|=
block|{
literal|'s'
block|,
literal|'t'
block|,
literal|'r'
block|}
decl_stmt|;
name|QString
name|str
init|=
name|QString
operator|::
name|fromRawData
argument_list|(
operator|(
specifier|const
name|QChar
operator|*
operator|)
name|buf
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// this causes a crash in most systems if the detaching doesn't work
name|str
index|[
literal|0
index|]
operator|=
name|QLatin1Char
argument_list|(
literal|'S'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|,
name|ushort
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sprintfZU
name|void
name|tst_QString
operator|::
name|sprintfZU
parameter_list|()
specifier|const
block|{
block|{
name|QString
name|string
decl_stmt|;
name|size_t
name|s
init|=
literal|6
decl_stmt|;
name|string
operator|.
name|sprintf
argument_list|(
literal|"%zu"
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|string
decl_stmt|;
name|string
operator|.
name|sprintf
argument_list|(
literal|"%s\n"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|/* This code crashed. I don't know how to reduce it further. In other words,          * both %zu and %s needs to be present. */
name|size_t
name|s
init|=
literal|6
decl_stmt|;
name|QString
name|string
decl_stmt|;
name|string
operator|.
name|sprintf
argument_list|(
literal|"%zu%s"
argument_list|,
name|s
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"6foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|size_t
name|s
init|=
literal|6
decl_stmt|;
name|QString
name|string
decl_stmt|;
name|string
operator|.
name|sprintf
argument_list|(
literal|"%zu %s\n"
argument_list|,
name|s
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"6 foo\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|repeatedSignature
name|void
name|tst_QString
operator|::
name|repeatedSignature
parameter_list|()
specifier|const
block|{
comment|/* repated() should be a const member. */
specifier|const
name|QString
name|string
decl_stmt|;
name|string
operator|.
name|repeated
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeated
name|void
name|tst_QString
operator|::
name|repeated
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
operator|.
name|repeated
argument_list|(
name|count
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeated_data
name|void
name|tst_QString
operator|::
name|repeated_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
comment|/* Empty strings. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1004
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|5
expr_stmt|;
comment|/* On simple string. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1004
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcabc"
argument_list|)
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcabcabc"
argument_list|)
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"abcabcabcabc"
argument_list|)
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareRef
name|void
name|tst_QString
operator|::
name|compareRef
parameter_list|()
block|{
name|QString
name|a
init|=
literal|"ABCDEFGH"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"BC"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"BCD"
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"Bc"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"bCD"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BC"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BCD"
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Bc"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bCD"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BC"
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"BCD"
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Bc"
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bCD"
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QString
name|a2
init|=
literal|"ABCDEFGh"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|compare
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|a
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|arg_locale
name|void
name|tst_QString
operator|::
name|arg_locale
parameter_list|()
block|{
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
decl_stmt|;
name|l
operator|.
name|setNumberOptions
argument_list|(
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
name|QLocale
operator|::
name|setDefault
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|QString
name|str
argument_list|(
literal|"*%L1*%L2*"
argument_list|)
decl_stmt|;
name|str
operator|=
name|str
operator|.
name|arg
argument_list|(
literal|123456
argument_list|)
operator|.
name|arg
argument_list|(
literal|1234.56
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"*123456*1234.56*"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUpperLower_icu
name|void
name|tst_QString
operator|::
name|toUpperLower_icu
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_USE_ICU
name|QSKIP
argument_list|(
literal|"Qt was built without ICU support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|s
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Turkish
argument_list|,
name|QLocale
operator|::
name|Turkey
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
comment|// turkish locale has a capital I with a dot (U+0130, utf8 c4b0)
name|QLocale
name|l
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toUpper
argument_list|(
name|s
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc4\xb0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toLower
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc4\xb0"
argument_list|)
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
comment|// nothing should happen here
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toLower
argument_list|(
name|s
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toUpper
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
comment|// U+0131, utf8 c4b1 is the lower-case i without a dot
name|QString
name|sup
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc4\xb1"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toUpper
argument_list|(
name|sup
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toLower
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"I"
argument_list|)
argument_list|)
argument_list|,
name|sup
argument_list|)
expr_stmt|;
comment|// nothing should happen here
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toLower
argument_list|(
name|sup
argument_list|)
argument_list|,
name|sup
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toLower
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the cleanup function will restore the default locale
block|}
end_function
begin_function
DECL|function|literals
name|void
name|tst_QString
operator|::
name|literals
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_UNICODE_LITERAL
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|)
name|QString
name|str
argument_list|(
name|QStringLiteral
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
name|QLatin1String
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|data_ptr
argument_list|()
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|data_ptr
argument_list|()
operator|->
name|offset
operator|==
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QChar
modifier|*
name|s
init|=
name|str
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QString
name|str2
init|=
name|str
decl_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|constData
argument_list|()
operator|==
name|s
argument_list|)
expr_stmt|;
comment|// detach on non const access
name|QVERIFY
argument_list|(
name|str
operator|.
name|data
argument_list|()
operator|!=
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|constData
argument_list|()
operator|==
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|data
argument_list|()
operator|!=
name|s
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on c++0x compliant compiler or gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reserve
name|void
name|tst_QString
operator|::
name|reserve
parameter_list|()
block|{
name|QString
name|nil1
decl_stmt|,
name|nil2
decl_stmt|;
name|nil1
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nil2
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|nil1
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|nil2
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlEscaped_data
name|void
name|tst_QString
operator|::
name|toHtmlEscaped_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"original"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"Hello World\n"
operator|<<
literal|"Hello World\n"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"#include<QtCore>"
operator|<<
literal|"#include&lt;QtCore&gt;"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"<p class=\"cool\"><a href=\"http://example.com/?foo=bar&amp;bar=foo\">plop --&gt;</a></p>"
operator|<<
literal|"&lt;p class=&quot;cool&quot;&gt;&lt;a href=&quot;http://example.com/?foo=bar&amp;amp;bar=foo&quot;&gt;plop --&amp;gt;&lt;/a&gt;&lt;/p&gt;"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"<\320\222\321\201>"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"&lt;\320\222\321\201&gt;"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toHtmlEscaped
name|void
name|tst_QString
operator|::
name|toHtmlEscaped
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|toHtmlEscaped
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatorGreaterWithQLatin1String
name|void
name|tst_QString
operator|::
name|operatorGreaterWithQLatin1String
parameter_list|()
block|{
name|QLatin1String
name|latin1foo
argument_list|(
literal|"fooZZ"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QString
name|stringfoo
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stringfoo
operator|>=
name|latin1foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|stringfoo
operator|>
name|latin1foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stringfoo
operator|<=
name|latin1foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|stringfoo
operator|<
name|latin1foo
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQLatin1Strings
name|void
name|tst_QString
operator|::
name|compareQLatin1Strings
parameter_list|()
block|{
name|QLatin1String
name|abc
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|QLatin1String
name|abcd
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|QLatin1String
name|cba
argument_list|(
literal|"cba"
argument_list|)
decl_stmt|;
name|QLatin1String
name|de
argument_list|(
literal|"de"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|==
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|==
name|cba
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cba
operator|==
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|==
name|abcd
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abcd
operator|==
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|!=
name|cba
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|!=
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|!=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|!=
name|abcd
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abcd
operator|!=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<
name|abcd
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<
name|cba
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<
name|de
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abcd
operator|<
name|cba
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|<
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abcd
operator|<
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|de
operator|<
name|cba
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abcd
operator|>
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|>
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|de
operator|>
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|>
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|>
name|abcd
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abcd
operator|>
name|cba
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<=
name|abcd
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<=
name|cba
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|<=
name|de
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abcd
operator|<=
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cba
operator|<=
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cba
operator|<=
name|abcd
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|de
operator|<=
name|abc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abc
operator|>=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|abcd
operator|>=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|>=
name|abcd
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|>=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|>=
name|cba
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|de
operator|>=
name|abc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|abc
operator|>=
name|de
operator|)
argument_list|)
expr_stmt|;
name|QLatin1String
name|subfoo
argument_list|(
literal|"fooZZ"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QLatin1String
name|foo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|subfoo
operator|==
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|==
name|subfoo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subfoo
operator|!=
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|!=
name|subfoo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|<
name|subfoo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subfoo
operator|<
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|>=
name|subfoo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subfoo
operator|>=
name|foo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|foo
operator|>
name|subfoo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subfoo
operator|>
name|foo
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|<=
name|subfoo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subfoo
operator|<=
name|foo
argument_list|)
expr_stmt|;
name|QLatin1String
name|subabc
argument_list|(
literal|"abcZZ"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QLatin1String
name|subab
argument_list|(
literal|"abcZZ"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|subabc
operator|!=
name|subab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subab
operator|!=
name|subabc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subabc
operator|==
name|subab
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subab
operator|==
name|subabc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subab
operator|<
name|subabc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subabc
operator|<
name|subab
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subabc
operator|>
name|subab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subab
operator|>
name|subabc
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subab
operator|<=
name|subabc
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subabc
operator|<=
name|subab
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subabc
operator|>=
name|subab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|subab
operator|>=
name|subabc
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromQLatin1StringWithLength
name|void
name|tst_QString
operator|::
name|fromQLatin1StringWithLength
parameter_list|()
block|{
name|QLatin1String
name|latin1foo
argument_list|(
literal|"foobar"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QString
name|foo
argument_list|(
name|latin1foo
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|foo
operator|.
name|size
argument_list|()
argument_list|,
name|latin1foo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignQLatin1String
name|void
name|tst_QString
operator|::
name|assignQLatin1String
parameter_list|()
block|{
name|QString
name|empty
init|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|null
init|=
name|QLatin1String
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QLatin1String
name|latin1foo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QString
name|foo
init|=
name|latin1foo
decl_stmt|;
name|QCOMPARE
argument_list|(
name|foo
operator|.
name|size
argument_list|()
argument_list|,
name|latin1foo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QLatin1String
name|latin1subfoo
argument_list|(
literal|"foobar"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|foo
operator|=
name|latin1subfoo
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
operator|.
name|size
argument_list|()
argument_list|,
name|latin1subfoo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QString
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstring.moc"
end_include
end_unit
