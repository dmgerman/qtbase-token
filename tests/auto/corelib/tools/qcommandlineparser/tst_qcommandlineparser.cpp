begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 David Faure<faure@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineParser>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|char**
argument_list|)
end_macro
begin_class
DECL|class|tst_QCommandLineParser
class|class
name|tst_QCommandLineParser
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|parsingModes_data
parameter_list|()
function_decl|;
comment|// In-process tests
name|void
name|testInvalidOptions
parameter_list|()
function_decl|;
name|void
name|testPositionalArguments
parameter_list|()
function_decl|;
name|void
name|testBooleanOption_data
parameter_list|()
function_decl|;
name|void
name|testBooleanOption
parameter_list|()
function_decl|;
name|void
name|testMultipleNames_data
parameter_list|()
function_decl|;
name|void
name|testMultipleNames
parameter_list|()
function_decl|;
name|void
name|testSingleValueOption_data
parameter_list|()
function_decl|;
name|void
name|testSingleValueOption
parameter_list|()
function_decl|;
name|void
name|testValueNotSet
parameter_list|()
function_decl|;
name|void
name|testMultipleValuesOption
parameter_list|()
function_decl|;
name|void
name|testUnknownOptionErrorHandling_data
parameter_list|()
function_decl|;
name|void
name|testUnknownOptionErrorHandling
parameter_list|()
function_decl|;
name|void
name|testDoubleDash_data
parameter_list|()
function_decl|;
name|void
name|testDoubleDash
parameter_list|()
function_decl|;
name|void
name|testProcessNotCalled
parameter_list|()
function_decl|;
name|void
name|testEmptyArgsList
parameter_list|()
function_decl|;
name|void
name|testMissingOptionValue
parameter_list|()
function_decl|;
name|void
name|testStdinArgument_data
parameter_list|()
function_decl|;
name|void
name|testStdinArgument
parameter_list|()
function_decl|;
name|void
name|testSingleDashWordOptionModes_data
parameter_list|()
function_decl|;
name|void
name|testSingleDashWordOptionModes
parameter_list|()
function_decl|;
comment|// QProcess-based tests using qcommandlineparser_test_helper
name|void
name|testVersionOption
parameter_list|()
function_decl|;
name|void
name|testHelpOption_data
parameter_list|()
function_decl|;
name|void
name|testHelpOption
parameter_list|()
function_decl|;
name|void
name|testQuoteEscaping
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|empty_argv
specifier|static
name|char
modifier|*
name|empty_argv
index|[]
init|=
block|{
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|empty_argc
specifier|static
name|int
name|empty_argc
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initTestCase
name|void
name|tst_QCommandLineParser
operator|::
name|initTestCase
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|empty_argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|empty_argv
index|[
literal|0
index|]
operator|=
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QTest
operator|::
name|currentAppName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QCommandLineParser::SingleDashWordOptionMode
argument_list|)
end_macro
begin_function
DECL|function|parsingModes_data
name|void
name|tst_QCommandLineParser
operator|::
name|parsingModes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|>
argument_list|(
literal|"parsingMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInvalidOptions
name|void
name|tst_QCommandLineParser
operator|::
name|testInvalidOptions
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineOption: Option names cannot start with a '-'"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"-v"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Displays version information."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPositionalArguments
name|void
name|tst_QCommandLineParser
operator|::
name|testPositionalArguments
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"file.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testBooleanOption_data
name|void
name|tst_QCommandLineParser
operator|::
name|testBooleanOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedOptionNames"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedIsSet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"-b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unset"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testBooleanOption
name|void
name|tst_QCommandLineParser
operator|::
name|testBooleanOption
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"a boolean option"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|optionNames
argument_list|()
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should warn on typos
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineParser: option not defined: \"c\""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultipleNames_data
name|void
name|tst_QCommandLineParser
operator|::
name|testMultipleNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedOptionNames"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"-v"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"v"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--version"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"version"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"not_set"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultipleNames
name|void
name|tst_QCommandLineParser
operator|::
name|testMultipleNames
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineOption
name|option
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"v"
operator|<<
literal|"version"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Show version information"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|option
operator|.
name|names
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"v"
operator|<<
literal|"version"
argument_list|)
expr_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|optionNames
argument_list|()
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|expectedIsSet
init|=
operator|!
name|expectedOptionNames
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"v"
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"version"
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSingleValueOption_data
name|void
name|tst_QCommandLineParser
operator|::
name|testSingleValueOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"defaults"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedIsSet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|<<
literal|"-s"
operator|<<
literal|"oxygen"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|<<
literal|"--style"
operator|<<
literal|"oxygen"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longequal"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|<<
literal|"--style=oxygen"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"oxygen"
operator|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSingleValueOption
name|void
name|tst_QCommandLineParser
operator|::
name|testSingleValueOption
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|defaults
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QCommandLineOption
name|option
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"s"
operator|<<
literal|"style"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"style name"
argument_list|)
argument_list|,
literal|"styleName"
argument_list|)
decl_stmt|;
name|option
operator|.
name|setDefaultValues
argument_list|(
name|defaults
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|mode
init|=
literal|0
init|;
name|mode
operator|<
literal|2
condition|;
operator|++
name|mode
control|)
block|{
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
name|option
argument_list|)
argument_list|,
name|expectedIsSet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"oxygen"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"oxygen"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"oxygen"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"oxygen"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
name|option
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"oxygen"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Should warn on typos
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineParser: option not defined: \"c\""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"c"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testValueNotSet
name|void
name|tst_QCommandLineParser
operator|::
name|testValueNotSet
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
comment|// Not set, no default value
name|QCommandLineParser
name|parser
decl_stmt|;
name|QCommandLineOption
name|option
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"s"
operator|<<
literal|"style"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"style name"
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setValueName
argument_list|(
literal|"styleName"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|optionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
literal|"style"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"style"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMultipleValuesOption
name|void
name|tst_QCommandLineParser
operator|::
name|testMultipleValuesOption
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineOption
name|option
argument_list|(
name|QStringLiteral
argument_list|(
literal|"param"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Pass parameter to the backend."
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setValueName
argument_list|(
literal|"key=value"
argument_list|)
expr_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|<<
literal|"--param"
operator|<<
literal|"key1=value1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"param"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"key1=value1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"param"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"key1=value1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst"
operator|<<
literal|"--param"
operator|<<
literal|"key1=value1"
operator|<<
literal|"--param"
operator|<<
literal|"key2=value2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"param"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"param"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"key1=value1"
operator|<<
literal|"key2=value2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"param"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"key2=value2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|expected
init|=
literal|"Usage: tst_qcommandlineparser [options]\n"
literal|"\n"
literal|"Options:\n"
literal|"  --param<key=value>  Pass parameter to the backend.\n"
decl_stmt|;
specifier|const
name|QString
name|exeName
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|arguments
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
comment|// e.g. debug\tst_qcommandlineparser.exe on Windows
name|expected
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tst_qcommandlineparser"
argument_list|)
argument_list|,
name|exeName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|helpText
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testUnknownOptionErrorHandling_data
name|void
name|tst_QCommandLineParser
operator|::
name|testUnknownOptionErrorHandling_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|>
argument_list|(
literal|"parsingMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedUnknownOptionNames"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedErrorText"
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|args_hello
init|=
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--hello"
decl_stmt|;
specifier|const
name|QString
name|error_hello
argument_list|(
literal|"Unknown option 'hello'."
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown_name_collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|args_hello
operator|<<
name|QStringList
argument_list|(
literal|"hello"
argument_list|)
operator|<<
name|error_hello
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown_name_long"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
name|args_hello
operator|<<
name|QStringList
argument_list|(
literal|"hello"
argument_list|)
operator|<<
name|error_hello
expr_stmt|;
specifier|const
name|QStringList
name|args_value
init|=
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"-b=1"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool_with_value_collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|args_value
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Unexpected value after '-b'."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool_with_value_long"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
name|args_value
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Unexpected value after '-b'."
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|args_dash_long
init|=
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"-bool"
decl_stmt|;
specifier|const
name|QString
name|error_bool
argument_list|(
literal|"Unknown options: o, o, l."
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown_name_long_collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|args_dash_long
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"o"
operator|<<
literal|"o"
operator|<<
literal|"l"
operator|)
operator|<<
name|error_bool
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testUnknownOptionErrorHandling
name|void
name|tst_QCommandLineParser
operator|::
name|testUnknownOptionErrorHandling
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|,
name|parsingMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedUnknownOptionNames
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedErrorText
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|parsingMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"bool"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"a boolean option"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|args
argument_list|)
argument_list|,
name|expectedErrorText
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|expectedUnknownOptionNames
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|errorText
argument_list|()
argument_list|,
name|expectedErrorText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDoubleDash_data
name|void
name|tst_QCommandLineParser
operator|::
name|testDoubleDash_data
parameter_list|()
block|{
name|parsingModes_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDoubleDash
name|void
name|tst_QCommandLineParser
operator|::
name|testDoubleDash
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|,
name|parsingMode
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"o"
operator|<<
literal|"output"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Output file"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"filename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|parsingMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--output"
operator|<<
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"output"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--"
operator|<<
literal|"--output"
operator|<<
literal|"bar"
operator|<<
literal|"-b"
operator|<<
literal|"bleh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"output"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"--output"
operator|<<
literal|"bar"
operator|<<
literal|"-b"
operator|<<
literal|"bleh"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testProcessNotCalled
name|void
name|tst_QCommandLineParser
operator|::
name|testProcessNotCalled
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"a boolean option"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineParser: call process() or parse() before isSet"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineParser: call process() or parse() before values"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|values
argument_list|(
literal|"b"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testEmptyArgsList
name|void
name|tst_QCommandLineParser
operator|::
name|testEmptyArgsList
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QCommandLineParser: argument list cannot be empty, it should contain at least the executable name"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid call, argv[0] is missing
block|}
end_function
begin_function
DECL|function|testMissingOptionValue
name|void
name|tst_QCommandLineParser
operator|::
name|testMissingOptionValue
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"option"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"An option"
argument_list|)
argument_list|,
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"argv0"
operator|<<
literal|"--option"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the user forgot to pass a value for --option
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"option"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|errorText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Missing value after '--option'."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testStdinArgument_data
name|void
name|tst_QCommandLineParser
operator|::
name|testStdinArgument_data
parameter_list|()
block|{
name|parsingModes_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testStdinArgument
name|void
name|tst_QCommandLineParser
operator|::
name|testStdinArgument
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|,
name|parsingMode
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|parsingMode
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"i"
operator|<<
literal|"input"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Input file."
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"filename"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
literal|"b"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Boolean option."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--input"
operator|<<
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"input"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"--input"
operator|<<
literal|"-"
operator|<<
literal|"-b"
operator|<<
literal|"arg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"input"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|isSet
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"arg"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"tst_qcommandlineparser"
operator|<<
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
literal|"input"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|positionalArguments
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSingleDashWordOptionModes_data
name|void
name|tst_QCommandLineParser
operator|::
name|testSingleDashWordOptionModes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|>
argument_list|(
literal|"parsingMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"commandLine"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedOptionNames"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedOptionValues"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-abc"
operator|<<
literal|"val"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"val"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed_with_equalsign_value"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-abc=val"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|"val"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed_explicit_longoption"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|QStringList
argument_list|(
literal|"--nn"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"nn"
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed_longoption_value"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"--abc"
operator|<<
literal|"val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"compiler"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|QStringList
argument_list|(
literal|"-cab"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"compiler_with_space"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-c"
operator|<<
literal|"val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-abc"
operator|<<
literal|"val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong_equal"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-abc=val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong_longoption"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"--nn"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"nn"
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong_longoption_value"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"--abc"
operator|<<
literal|"val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"implicitlylong_with_space"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-c"
operator|<<
literal|"val"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSingleDashWordOptionModes
name|void
name|tst_QCommandLineParser
operator|::
name|testSingleDashWordOptionModes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|,
name|parsingMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|commandLine
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedOptionValues
argument_list|)
expr_stmt|;
name|commandLine
operator|.
name|prepend
argument_list|(
literal|"tst_QCommandLineParser"
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|parsingMode
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
literal|"a"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"a option."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
literal|"b"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"b option."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"abc"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"c option."
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
literal|"nn"
argument_list|,
name|QStringLiteral
argument_list|(
literal|"nn option."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
name|commandLine
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|optionNames
argument_list|()
argument_list|,
name|expectedOptionNames
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedOptionValues
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|value
argument_list|(
name|parser
operator|.
name|optionNames
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|expectedOptionValues
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|unknownOptionNames
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testVersionOption
name|void
name|tst_QCommandLineParser
operator|::
name|testVersionOption
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Reading and writing to a process is not supported on Qt/CE"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testhelper/qcommandlineparser_test_helper"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"0"
operator|<<
literal|"--version"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|output
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|QString
argument_list|(
literal|"qcommandlineparser_test_helper 1.0\n"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_PROCESS
block|}
end_function
begin_function
DECL|function|testHelpOption_data
name|void
name|tst_QCommandLineParser
operator|::
name|testHelpOption_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|>
argument_list|(
literal|"parsingMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedHelpOutput"
argument_list|)
expr_stmt|;
name|QString
name|expectedOutput
init|=
literal|"Usage: testhelper/qcommandlineparser_test_helper [options] parsingMode command\n"
literal|"Test helper\n"
literal|"\n"
literal|"Options:\n"
literal|"  -h, --help                  Displays this help.\n"
literal|"  -v, --version               Displays version information.\n"
literal|"  --load<url>                Load file from URL.\n"
literal|"  -o, --output<file>         Set output file.\n"
literal|"  -D<key=value>              Define macro.\n"
literal|"  -n, --no-implicit-includes  Disable automatic generation of implicit #include\n"
literal|"                              -directives.\n"
literal|"\n"
literal|"Arguments:\n"
literal|"  parsingMode                 The parsing mode to test.\n"
literal|"  command                     The command to execute.\n"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"  -h, --help                  Displays this help.\n"
argument_list|,
literal|"  -?, -h, --help              Displays this help.\n"
argument_list|)
expr_stmt|;
name|expectedOutput
operator|.
name|replace
argument_list|(
literal|"testhelper/"
argument_list|,
literal|"testhelper\\"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"collapsed"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
operator|<<
name|expectedOutput
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"long"
argument_list|)
operator|<<
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
operator|<<
name|expectedOutput
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testHelpOption
name|void
name|tst_QCommandLineParser
operator|::
name|testHelpOption
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Reading and writing to a process is not supported on Qt/CE"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QCommandLineParser
operator|::
name|SingleDashWordOptionMode
argument_list|,
name|parsingMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedHelpOutput
argument_list|)
expr_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testhelper/qcommandlineparser_test_helper"
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|parsingMode
argument_list|)
operator|<<
literal|"--help"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|output
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expectedHelpOutput
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testhelper/qcommandlineparser_test_helper"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"0"
operator|<<
literal|"resize"
operator|<<
literal|"--help"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|output
operator|=
name|process
operator|.
name|readAll
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|output
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QByteArray
name|expectedResizeHelp
init|=
literal|"Usage: testhelper/qcommandlineparser_test_helper [options] resize [resize_options]\n"
literal|"Test helper\n"
literal|"\n"
literal|"Options:\n"
literal|"  -h, --help                  Displays this help.\n"
literal|"  -v, --version               Displays version information.\n"
literal|"  --load<url>                Load file from URL.\n"
literal|"  -o, --output<file>         Set output file.\n"
literal|"  -D<key=value>              Define macro.\n"
literal|"  -n, --no-implicit-includes  Disable automatic generation of implicit #include\n"
literal|"                              -directives.\n"
literal|"  --size<size>               New size.\n"
literal|"\n"
literal|"Arguments:\n"
literal|"  resize                      Resize the object to a new size.\n"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|expectedResizeHelp
operator|.
name|replace
argument_list|(
literal|"  -h, --help                  Displays this help.\n"
argument_list|,
literal|"  -?, -h, --help              Displays this help.\n"
argument_list|)
expr_stmt|;
name|expectedResizeHelp
operator|.
name|replace
argument_list|(
literal|"testhelper/"
argument_list|,
literal|"testhelper\\"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|QString
argument_list|(
name|expectedResizeHelp
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_PROCESS
block|}
end_function
begin_function
DECL|function|testQuoteEscaping
name|void
name|tst_QCommandLineParser
operator|::
name|testQuoteEscaping
parameter_list|()
block|{
name|QCoreApplication
name|app
argument_list|(
name|empty_argc
argument_list|,
name|empty_argv
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testhelper/qcommandlineparser_test_helper"
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|QCommandLineParser
operator|::
name|ParseAsCompactedShortOptions
argument_list|)
operator|<<
literal|"-DKEY1=\"VALUE1\""
operator|<<
literal|"-DKEY2=\\\"VALUE2\\\""
operator|<<
literal|"-DQTBUG-15379=C:\\path\\'file.ext"
operator|<<
literal|"-DQTBUG-30628=C:\\temp\\'file'.ext"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|output
operator|.
name|contains
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"KEY1=\"VALUE1\""
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"KEY2=\\\"VALUE2\\\""
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"QTBUG-15379=C:\\path\\'file.ext"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|output
operator|.
name|contains
argument_list|(
literal|"QTBUG-30628=C:\\temp\\'file'.ext"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QCommandLineParser
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcommandlineparser.moc"
end_include
end_unit
