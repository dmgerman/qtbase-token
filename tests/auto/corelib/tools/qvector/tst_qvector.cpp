begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_class
DECL|class|tst_QVector
class|class
name|tst_QVector
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|constructors
parameter_list|()
specifier|const
function_decl|;
name|void
name|append
parameter_list|()
specifier|const
function_decl|;
name|void
name|at
parameter_list|()
specifier|const
function_decl|;
name|void
name|capacity
parameter_list|()
specifier|const
function_decl|;
name|void
name|clear
parameter_list|()
specifier|const
function_decl|;
name|void
name|constData
parameter_list|()
specifier|const
function_decl|;
name|void
name|contains
parameter_list|()
specifier|const
function_decl|;
name|void
name|count
parameter_list|()
specifier|const
function_decl|;
name|void
name|data
parameter_list|()
specifier|const
function_decl|;
name|void
name|empty
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|fill
parameter_list|()
specifier|const
function_decl|;
name|void
name|first
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromList
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromStdVector
parameter_list|()
specifier|const
function_decl|;
name|void
name|indexOf
parameter_list|()
specifier|const
function_decl|;
name|void
name|insert
parameter_list|()
specifier|const
function_decl|;
name|void
name|isEmpty
parameter_list|()
specifier|const
function_decl|;
name|void
name|last
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
specifier|const
function_decl|;
name|void
name|mid
parameter_list|()
specifier|const
function_decl|;
name|void
name|prepend
parameter_list|()
specifier|const
function_decl|;
name|void
name|remove
parameter_list|()
specifier|const
function_decl|;
name|void
name|size
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|swap
parameter_list|()
specifier|const
function_decl|;
name|void
name|toList
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdVector
parameter_list|()
specifier|const
function_decl|;
name|void
name|value
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperators
parameter_list|()
specifier|const
function_decl|;
name|void
name|outOfMemory
parameter_list|()
function_decl|;
name|void
name|reserve
parameter_list|()
function_decl|;
name|void
name|reallocAfterCopy_data
parameter_list|()
function_decl|;
name|void
name|reallocAfterCopy
parameter_list|()
function_decl|;
name|void
name|initializeList
parameter_list|()
function_decl|;
name|void
name|const_shared_null
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|constructors
name|void
name|tst_QVector
operator|::
name|constructors
parameter_list|()
specifier|const
block|{
comment|// pre-reserve capacity
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
comment|// default-initialise items
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
argument_list|(
literal|5
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// make sure all items are initialised ok
foreach|foreach
control|(
name|int
name|meaningoflife
decl|,
name|myvec
control|)
block|{
name|QCOMPARE
argument_list|(
name|meaningoflife
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QVector
operator|::
name|append
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
literal|44
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
literal|43
operator|<<
literal|44
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|at
name|void
name|tst_QVector
operator|::
name|at
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append an item
name|myvec
operator|<<
literal|"hello"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacity
name|void
name|tst_QVector
operator|::
name|capacity
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
comment|// TODO: is this guaranteed? seems a safe assumption, but I suppose preallocation of a
comment|// few items isn't an entirely unforseeable possibility.
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test it gets a size
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
comment|// make sure it grows ok
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
comment|// let's try squeeze a bit
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TODO: is this a safe assumption? presumably it won't release memory until shrink(), but can we asser that is true?
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// TODO: as above note
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QVector
operator|::
name|clear
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constData
name|void
name|tst_QVector
operator|::
name|constData
parameter_list|()
specifier|const
block|{
name|int
name|arr
index|[]
init|=
block|{
literal|42
block|,
literal|43
block|,
literal|44
block|}
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|42
operator|<<
literal|43
operator|<<
literal|44
expr_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|myvec
operator|.
name|constData
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
operator|&
name|arr
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QVector
operator|::
name|contains
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add it and make sure it does :)
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QVector
operator|::
name|count
parameter_list|()
specifier|const
block|{
comment|// total size
block|{
comment|// zero size
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// count of items
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
comment|// initial tests
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"pirates"
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|data
name|void
name|tst_QVector
operator|::
name|data
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|42
operator|<<
literal|43
operator|<<
literal|44
expr_stmt|;
comment|// make sure it starts off ok
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
literal|43
argument_list|)
expr_stmt|;
comment|// alter it
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
operator|=
literal|69
expr_stmt|;
comment|// check it altered
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
literal|69
argument_list|)
expr_stmt|;
name|int
name|arr
index|[]
init|=
block|{
literal|42
block|,
literal|69
block|,
literal|44
block|}
decl_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|myvec
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
operator|&
name|arr
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|empty
name|void
name|tst_QVector
operator|::
name|empty
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// starts empty
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not empty
name|myvec
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty again
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QVector
operator|::
name|endsWith
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// empty vector
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the one, should work
name|myvec
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add something else, fails now
name|myvec
operator|.
name|append
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove it again :)
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fill
name|void
name|tst_QVector
operator|::
name|fill
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// resize
name|myvec
operator|.
name|resize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|fill
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|69
operator|<<
literal|69
operator|<<
literal|69
operator|<<
literal|69
operator|<<
literal|69
argument_list|)
expr_stmt|;
comment|// make sure it can resize itself too
name|myvec
operator|.
name|fill
argument_list|(
literal|42
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
operator|<<
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|first
name|void
name|tst_QVector
operator|::
name|first
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|69
operator|<<
literal|42
operator|<<
literal|3
expr_stmt|;
comment|// test it starts ok
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|69
argument_list|)
expr_stmt|;
comment|// test removal changes
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// test prepend changes
name|myvec
operator|.
name|prepend
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromList
name|void
name|tst_QVector
operator|::
name|fromList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ninjas"
operator|<<
literal|"pirates"
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|=
name|QVector
argument_list|<
name|QString
argument_list|>
operator|::
name|fromList
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// test it worked ok
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ninjas"
operator|<<
literal|"pirates"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ninjas"
operator|<<
literal|"pirates"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromStdVector
name|void
name|tst_QVector
operator|::
name|fromStdVector
parameter_list|()
specifier|const
block|{
comment|// stl = :(
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
name|svec
decl_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"pirates"
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
init|=
name|QVector
argument_list|<
name|QString
argument_list|>
operator|::
name|fromStdVector
argument_list|(
name|svec
argument_list|)
decl_stmt|;
comment|// test it converts ok
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ninjas"
operator|<<
literal|"pirates"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QVector
operator|::
name|indexOf
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|6
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|4
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QVector
operator|::
name|insert
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// first position
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// middle
name|myvec
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// end
name|myvec
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
name|QLatin1String
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert a lot of garbage in the middle
name|myvec
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|QLatin1String
argument_list|(
literal|"infinity"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"X"
operator|<<
literal|"Z"
operator|<<
literal|"infinity"
operator|<<
literal|"infinity"
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"T"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QVector
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
comment|// starts ok
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not empty now
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"hello there"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty again
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|last
name|void
name|tst_QVector
operator|::
name|last
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// test starts ok
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test it changes ok
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
comment|// and remove again
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QVector
operator|::
name|lastIndexOf
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mid
name|void
name|tst_QVector
operator|::
name|mid
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
operator|<<
literal|"kitty"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"buck"
operator|<<
literal|"hello"
operator|<<
literal|"kitty"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend
name|void
name|tst_QVector
operator|::
name|prepend
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// starts ok
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add something
name|myvec
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|// something else
name|myvec
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// clear and append to an empty vector
name|myvec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QVector
operator|::
name|remove
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// remove middle
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
comment|// remove rest
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ::reserve() is really hard to think of tests for, so not doing it.
end_comment
begin_comment
comment|// ::resize() is tested in ::capacity().
end_comment
begin_function
DECL|function|size
name|void
name|tst_QVector
operator|::
name|size
parameter_list|()
specifier|const
block|{
comment|// total size
block|{
comment|// zero size
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ::squeeze() is tested in ::capacity().
end_comment
begin_function
DECL|function|startsWith
name|void
name|tst_QVector
operator|::
name|startsWith
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// empty vector
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the one, should work
name|myvec
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add something else, fails now
name|myvec
operator|.
name|prepend
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove it again :)
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QVector
operator|::
name|swap
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|,
name|v2
decl_stmt|;
name|v1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|v2
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toList
name|void
name|tst_QVector
operator|::
name|toList
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// make sure it converts and doesn't modify the original vector
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|toList
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdVector
name|void
name|tst_QVector
operator|::
name|toStdVector
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
name|svec
init|=
name|myvec
operator|.
name|toStdVector
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|void
name|tst_QVector
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// valid calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// default calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test calls with a provided default, valid calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|0
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|2
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test calls with a provided default that will return the default
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperators
name|void
name|tst_QVector
operator|::
name|testOperators
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvectwo
decl_stmt|;
name|myvectwo
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|combined
decl_stmt|;
name|combined
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
comment|// !=
name|QVERIFY
argument_list|(
name|myvec
operator|!=
name|myvectwo
argument_list|)
expr_stmt|;
comment|// +
name|QCOMPARE
argument_list|(
name|myvec
operator|+
name|myvectwo
argument_list|,
name|combined
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvectwo
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
argument_list|)
expr_stmt|;
comment|// +=
name|myvec
operator|+=
name|myvectwo
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|combined
argument_list|)
expr_stmt|;
comment|// ==
name|QVERIFY
argument_list|(
name|myvec
operator|==
name|combined
argument_list|)
expr_stmt|;
comment|// []
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|0
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|1
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|2
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|3
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|4
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|5
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|fooCtor
name|int
name|fooCtor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fooDtor
name|int
name|fooDtor
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|member|p
name|int
modifier|*
name|p
decl_stmt|;
DECL|function|Foo
name|Foo
parameter_list|()
block|{
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|Foo
name|Foo
parameter_list|(
specifier|const
name|Foo
modifier|&
name|other
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|operator =
name|void
name|operator
name|=
parameter_list|(
specifier|const
name|Foo
modifier|&
comment|/* other */
parameter_list|)
block|{ }
DECL|function|~Foo
name|~
name|Foo
parameter_list|()
block|{
operator|delete
name|p
expr_stmt|;
operator|++
name|fooDtor
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|outOfMemory
name|void
name|tst_QVector
operator|::
name|outOfMemory
parameter_list|()
block|{
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|N
init|=
literal|0x7fffffff
operator|/
sizeof|sizeof
argument_list|(
name|Foo
argument_list|)
decl_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
decl_stmt|;
name|QSKIP
argument_list|(
literal|"This test crashes on many of our machines."
argument_list|)
expr_stmt|;
name|a
operator|.
name|resize
argument_list|(
name|N
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|N
condition|)
block|{
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|+=
literal|35000
control|)
name|a
index|[
name|i
index|]
operator|=
name|Foo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// this is the case we're actually testing
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|Prealloc
init|=
name|a
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
name|Prealloc
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|Prealloc
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|Prealloc
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|Prealloc
operator|+
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|0x10000000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|Prealloc
operator|+
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
name|Prealloc
operator|+
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
argument_list|(
name|N
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|N
condition|)
block|{
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|+=
literal|35000
control|)
name|a
index|[
name|i
index|]
operator|=
name|Foo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// this is the case we're actually testing
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|Foo
name|foo
decl_stmt|;
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
argument_list|(
name|N
argument_list|,
name|foo
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|N
condition|)
block|{
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|N
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|+=
literal|35000
control|)
name|a
index|[
name|i
index|]
operator|=
name|Foo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// this is the case we're actually testing
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Foo
argument_list|>
name|b
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|a
operator|.
name|resize
argument_list|(
name|N
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|N
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|N
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooDtor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|b
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
name|N
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|N
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|+=
literal|60000
control|)
name|a
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|resize
argument_list|(
name|N
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|size
argument_list|()
operator|==
name|N
operator|-
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
operator|-
literal|1
condition|;
name|i
operator|+=
literal|60000
control|)
name|b
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|reserve
name|void
name|tst_QVector
operator|::
name|reserve
parameter_list|()
block|{
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Foo
argument_list|>
name|b
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|fooDtor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This is a regression test for QTBUG-11763, where memory would be reallocated
end_comment
begin_comment
comment|// soon after copying a QVector.
end_comment
begin_function
DECL|function|reallocAfterCopy_data
name|void
name|tst_QVector
operator|::
name|reallocAfterCopy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"capacity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fill_size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"func_id"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result4"
argument_list|)
expr_stmt|;
name|int
name|result1
decl_stmt|,
name|result2
decl_stmt|,
name|result3
decl_stmt|,
name|result4
decl_stmt|;
name|int
name|fill_size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|70
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|fill_size
operator|=
name|i
operator|-
literal|20
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|3
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
comment|// append
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|1
condition|)
block|{
comment|// insert(0)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|2
condition|)
block|{
comment|// insert(20)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|3
condition|)
block|{
comment|// insert(0, 10)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|10
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"reallocAfterCopy:%1,%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|i
operator|<<
name|fill_size
operator|<<
name|j
operator|<<
name|result1
operator|<<
name|result2
operator|<<
name|result3
operator|<<
name|result4
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|reallocAfterCopy
name|void
name|tst_QVector
operator|::
name|reallocAfterCopy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fill_size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|func_id
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result4
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|v1
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|v2
decl_stmt|;
name|v1
operator|.
name|reserve
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|v1
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|v1
operator|.
name|fill
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|fill_size
argument_list|)
expr_stmt|;
name|v2
operator|=
name|v1
expr_stmt|;
comment|// no need to test begin() and end(), there is a detach() in them
if|if
condition|(
name|func_id
operator|==
literal|0
condition|)
block|{
name|v1
operator|.
name|append
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
comment|//push_back is same as append
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|1
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
comment|//push_front is same as prepend, insert(0)
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|2
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|20
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|3
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|capacity
argument_list|()
argument_list|,
name|result1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|capacity
argument_list|()
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|result3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|size
argument_list|()
argument_list|,
name|result4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeList
name|void
name|tst_QVector
operator|::
name|initializeList
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QVector
argument_list|<
name|int
argument_list|>
name|v1
argument_list|{
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
operator|(
name|QVector
argument_list|<
name|int
argument_list|>
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
operator|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
name|v2
argument_list|{
name|v1
argument_list|,
block|{
literal|1
block|}
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|}
decl_stmt|;
name|QVector
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
name|v3
decl_stmt|;
name|v3
operator|<<
name|v1
operator|<<
operator|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|)
operator|<<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
argument_list|,
name|v2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|const_shared_null
name|void
name|tst_QVector
operator|::
name|const_shared_null
parameter_list|()
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v2
decl_stmt|;
name|v2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QVector
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvector.moc"
end_include
end_unit
