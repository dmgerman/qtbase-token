begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_struct
DECL|struct|Movable
struct|struct
name|Movable
block|{
DECL|function|Movable
name|Movable
parameter_list|(
name|char
name|input
init|=
literal|'j'
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|input
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
operator|++
name|counter
expr_stmt|;
block|}
DECL|function|Movable
name|Movable
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|other
operator|.
name|i
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
operator|++
name|counter
expr_stmt|;
block|}
DECL|function|~Movable
name|~
name|Movable
parameter_list|()
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
operator|--
name|counter
expr_stmt|;
name|state
operator|=
name|Destructed
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
DECL|function|operator =
name|Movable
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|i
operator|=
name|other
operator|.
name|i
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|i
name|char
name|i
decl_stmt|;
DECL|member|counter
specifier|static
name|int
name|counter
decl_stmt|;
private|private:
DECL|enum|State
DECL|enumerator|Constructed
DECL|enumerator|Destructed
enum|enum
name|State
block|{
name|Constructed
init|=
literal|106
block|,
name|Destructed
init|=
literal|110
block|}
enum|;
DECL|member|state
name|State
name|state
decl_stmt|;
DECL|function|check
specifier|static
name|void
name|check
parameter_list|(
specifier|const
name|State
name|state1
parameter_list|,
specifier|const
name|State
name|state2
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|state1
argument_list|,
name|state2
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|counter
name|int
name|Movable
operator|::
name|counter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|Movable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
parameter_list|(
name|Movable
parameter_list|)
function_decl|;
end_function_decl
begin_struct
DECL|struct|Custom
struct|struct
name|Custom
block|{
DECL|function|Custom
name|Custom
parameter_list|(
name|char
name|input
init|=
literal|'j'
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|input
argument_list|)
member_init_list|,
name|that
argument_list|(
name|this
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
operator|++
name|counter
expr_stmt|;
block|}
DECL|function|Custom
name|Custom
parameter_list|(
specifier|const
name|Custom
modifier|&
name|other
parameter_list|)
member_init_list|:
name|that
argument_list|(
name|this
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
name|check
argument_list|(
operator|&
name|other
argument_list|)
expr_stmt|;
operator|++
name|counter
expr_stmt|;
name|this
operator|->
name|i
operator|=
name|other
operator|.
name|i
expr_stmt|;
block|}
DECL|function|~Custom
name|~
name|Custom
parameter_list|()
block|{
name|check
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
operator|--
name|counter
expr_stmt|;
name|state
operator|=
name|Destructed
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Custom
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|check
argument_list|(
operator|&
name|other
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
DECL|function|operator =
name|Custom
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|Custom
modifier|&
name|other
parameter_list|)
block|{
name|check
argument_list|(
operator|&
name|other
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|i
operator|=
name|other
operator|.
name|i
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|counter
specifier|static
name|int
name|counter
decl_stmt|;
DECL|member|i
name|char
name|i
decl_stmt|;
comment|// used to identify orgin of an instance
private|private:
DECL|member|that
name|Custom
modifier|*
name|that
decl_stmt|;
comment|// used to check if an instance was moved
DECL|enum|State
DECL|enumerator|Constructed
DECL|enumerator|Destructed
enum|enum
name|State
block|{
name|Constructed
init|=
literal|106
block|,
name|Destructed
init|=
literal|110
block|}
enum|;
DECL|member|state
name|State
name|state
decl_stmt|;
DECL|function|check
specifier|static
name|void
name|check
parameter_list|(
specifier|const
name|Custom
modifier|*
name|c
parameter_list|)
block|{
comment|// check if c object has been moved
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|c
operator|->
name|that
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|->
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|counter
name|int
name|Custom
operator|::
name|counter
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|Custom
name|Q_DECLARE_METATYPE
argument_list|(
name|Custom
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// tests depends on the fact that:
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Custom
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Custom
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|tst_QVector
class|class
name|tst_QVector
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|constructors_empty
parameter_list|()
specifier|const
function_decl|;
name|void
name|constructors_emptyReserveZero
parameter_list|()
specifier|const
function_decl|;
name|void
name|constructors_emptyReserve
parameter_list|()
specifier|const
function_decl|;
name|void
name|constructors_reserveAndInitialize
parameter_list|()
specifier|const
function_decl|;
name|void
name|copyConstructorInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|copyConstructorMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|copyConstructorCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|addInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|addMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|addCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|appendInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|appendMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|appendCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|at
parameter_list|()
specifier|const
function_decl|;
name|void
name|capacityInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|capacityMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|capacityCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|clearInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|clearMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|clearCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|constData
parameter_list|()
specifier|const
function_decl|;
name|void
name|contains
parameter_list|()
specifier|const
function_decl|;
name|void
name|countInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|countMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|countCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|data
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyReservedInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyReservedMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseEmptyReservedCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseIntShared
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseMovableShared
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseCustomShared
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseReservedInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseReservedMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|eraseReservedCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|fillInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|fillMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|fillCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|first
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromListInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromListMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromListCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|fromStdVector
parameter_list|()
specifier|const
function_decl|;
name|void
name|indexOf
parameter_list|()
specifier|const
function_decl|;
name|void
name|insert
parameter_list|()
specifier|const
function_decl|;
name|void
name|isEmpty
parameter_list|()
specifier|const
function_decl|;
name|void
name|last
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
specifier|const
function_decl|;
name|void
name|mid
parameter_list|()
specifier|const
function_decl|;
name|void
name|prependInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|prependMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|prependCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizePOD_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizePOD
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizeComplexMovable_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizeComplexMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizeComplex_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizeComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|resizeCtorAndDtor
parameter_list|()
specifier|const
function_decl|;
name|void
name|sizeInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|sizeMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|sizeCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|swapInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|swapMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|swapCustom
parameter_list|()
specifier|const
function_decl|;
name|void
name|toList
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdVector
parameter_list|()
specifier|const
function_decl|;
name|void
name|value
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperators
parameter_list|()
specifier|const
function_decl|;
name|void
name|reserve
parameter_list|()
function_decl|;
name|void
name|reallocAfterCopy_data
parameter_list|()
function_decl|;
name|void
name|reallocAfterCopy
parameter_list|()
function_decl|;
name|void
name|initializeListInt
parameter_list|()
function_decl|;
name|void
name|initializeListMovable
parameter_list|()
function_decl|;
name|void
name|initializeListCustom
parameter_list|()
function_decl|;
name|void
name|const_shared_null
parameter_list|()
function_decl|;
name|void
name|setSharableInt_data
parameter_list|()
function_decl|;
name|void
name|setSharableInt
parameter_list|()
function_decl|;
name|void
name|setSharableMovable_data
parameter_list|()
function_decl|;
name|void
name|setSharableMovable
parameter_list|()
function_decl|;
name|void
name|setSharableCustom_data
parameter_list|()
function_decl|;
name|void
name|setSharableCustom
parameter_list|()
function_decl|;
name|void
name|detachInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|detachMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|detachCustom
parameter_list|()
specifier|const
function_decl|;
private|private:
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|copyConstructor
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|add
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|append
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|capacity
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|clear
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|count
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|empty
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|eraseEmpty
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|eraseEmptyReserved
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|erase
parameter_list|(
name|bool
name|shared
parameter_list|)
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|eraseReserved
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|fill
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|fromList
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|prepend
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|remove
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|size
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|swap
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|initializeList
parameter_list|()
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|setSharable_data
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|setSharable
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|detach
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|SimpleValue
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|SimpleValue
block|{
DECL|function|at
specifier|static
name|T
name|at
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Values
index|[
name|index
operator|%
name|MaxIndex
index|]
return|;
block|}
DECL|function|vector
specifier|static
name|QVector
argument_list|<
name|T
argument_list|>
name|vector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|append
argument_list|(
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|member|MaxIndex
specifier|static
specifier|const
name|uint
name|MaxIndex
init|=
literal|6
decl_stmt|;
DECL|member|Values
specifier|static
specifier|const
name|T
name|Values
index|[
name|MaxIndex
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|Values
specifier|const
name|int
name|SimpleValue
argument_list|<
name|int
argument_list|>
operator|::
name|Values
index|[]
init|=
block|{
literal|110
block|,
literal|105
block|,
literal|101
block|,
literal|114
block|,
literal|111
block|,
literal|98
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|Values
specifier|const
name|Movable
name|SimpleValue
argument_list|<
name|Movable
argument_list|>
operator|::
name|Values
index|[]
init|=
block|{
literal|110
block|,
literal|105
block|,
literal|101
block|,
literal|114
block|,
literal|111
block|,
literal|98
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|Values
specifier|const
name|Custom
name|SimpleValue
argument_list|<
name|Custom
argument_list|>
operator|::
name|Values
index|[]
init|=
block|{
literal|110
block|,
literal|105
block|,
literal|101
block|,
literal|114
block|,
literal|111
block|,
literal|98
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|constructors_empty
name|void
name|tst_QVector
operator|::
name|constructors_empty
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyInt
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|emptyMovable
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyCustom
decl_stmt|;
block|}
end_function
begin_function
DECL|function|constructors_emptyReserveZero
name|void
name|tst_QVector
operator|::
name|constructors_emptyReserveZero
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyInt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|emptyMovable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyCustom
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|constructors_emptyReserve
name|void
name|tst_QVector
operator|::
name|constructors_emptyReserve
parameter_list|()
specifier|const
block|{
comment|// pre-reserve capacity
name|QVector
argument_list|<
name|int
argument_list|>
name|myInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myInt
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|myMovable
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myMovable
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|myCustom
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myCustom
operator|.
name|capacity
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructors_reserveAndInitialize
name|void
name|tst_QVector
operator|::
name|constructors_reserveAndInitialize
parameter_list|()
specifier|const
block|{
comment|// default-initialise items
name|QVector
argument_list|<
name|int
argument_list|>
name|myInt
argument_list|(
literal|5
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myInt
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|meaningoflife
decl|,
name|myInt
control|)
block|{
name|QCOMPARE
argument_list|(
name|meaningoflife
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|QString
argument_list|>
name|myString
argument_list|(
literal|5
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c++"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myString
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// make sure all items are initialised ok
foreach|foreach
control|(
name|QString
name|meaningoflife
decl|,
name|myString
control|)
block|{
name|QCOMPARE
argument_list|(
name|meaningoflife
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c++"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|Custom
argument_list|>
name|myCustom
argument_list|(
literal|5
argument_list|,
name|Custom
argument_list|(
literal|'n'
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|myCustom
operator|.
name|capacity
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// make sure all items are initialised ok
foreach|foreach
control|(
name|Custom
name|meaningoflife
decl|,
name|myCustom
control|)
block|{
name|QCOMPARE
argument_list|(
name|meaningoflife
operator|.
name|i
argument_list|,
literal|'n'
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|copyConstructor
name|void
name|tst_QVector
operator|::
name|copyConstructor
parameter_list|()
specifier|const
block|{
name|T
name|value1
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|value2
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|value3
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|value4
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|<<
name|value1
operator|<<
name|value2
operator|<<
name|value3
operator|<<
name|value4
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|<<
name|value1
operator|<<
name|value2
operator|<<
name|value3
operator|<<
name|value4
expr_stmt|;
name|v1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v2
argument_list|(
name|v1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isSharedWith
argument_list|(
name|v2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copyConstructorInt
name|void
name|tst_QVector
operator|::
name|copyConstructorInt
parameter_list|()
specifier|const
block|{
name|copyConstructor
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyConstructorMovable
name|void
name|tst_QVector
operator|::
name|copyConstructorMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|copyConstructor
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyConstructorCustom
name|void
name|tst_QVector
operator|::
name|copyConstructorCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|copyConstructor
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|add
name|void
name|tst_QVector
operator|::
name|add
parameter_list|()
specifier|const
block|{
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|empty1
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|empty2
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|empty1
operator|+
name|empty2
operator|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|empty1
operator|+=
name|empty2
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|empty
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|v
operator|+
name|empty
operator|)
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|v
operator|+=
name|empty
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v2
decl_stmt|;
name|v2
operator|+=
name|v1
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addInt
name|void
name|tst_QVector
operator|::
name|addInt
parameter_list|()
specifier|const
block|{
name|add
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addMovable
name|void
name|tst_QVector
operator|::
name|addMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|add
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addCustom
name|void
name|tst_QVector
operator|::
name|addCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|add
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|append
name|void
name|tst_QVector
operator|::
name|append
parameter_list|()
specifier|const
block|{
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|v
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|v
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|v
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|v
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|last
argument_list|()
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendInt
name|void
name|tst_QVector
operator|::
name|appendInt
parameter_list|()
specifier|const
block|{
name|append
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendMovable
name|void
name|tst_QVector
operator|::
name|appendMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|append
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendCustom
name|void
name|tst_QVector
operator|::
name|appendCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|append
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|at
name|void
name|tst_QVector
operator|::
name|at
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append an item
name|myvec
operator|<<
literal|"hello"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|capacity
name|void
name|tst_QVector
operator|::
name|capacity
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
comment|// TODO: is this guaranteed? seems a safe assumption, but I suppose preallocation of a
comment|// few items isn't an entirely unforseeable possibility.
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test it gets a size
name|myvec
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
comment|// make sure it grows ok
name|myvec
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
comment|// let's try squeeze a bit
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// TODO: is this a safe assumption? presumably it won't release memory until shrink(), but can we asser that is true?
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|6
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// TODO: as above note
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacityInt
name|void
name|tst_QVector
operator|::
name|capacityInt
parameter_list|()
specifier|const
block|{
name|capacity
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacityMovable
name|void
name|tst_QVector
operator|::
name|capacityMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|capacity
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacityCustom
name|void
name|tst_QVector
operator|::
name|capacityCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|capacity
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|clear
name|void
name|tst_QVector
operator|::
name|clear
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearInt
name|void
name|tst_QVector
operator|::
name|clearInt
parameter_list|()
specifier|const
block|{
name|clear
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearMovable
name|void
name|tst_QVector
operator|::
name|clearMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|clear
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearCustom
name|void
name|tst_QVector
operator|::
name|clearCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|clear
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constData
name|void
name|tst_QVector
operator|::
name|constData
parameter_list|()
specifier|const
block|{
name|int
name|arr
index|[]
init|=
block|{
literal|42
block|,
literal|43
block|,
literal|44
block|}
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|42
operator|<<
literal|43
operator|<<
literal|44
expr_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|myvec
operator|.
name|constData
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
operator|&
name|arr
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QVector
operator|::
name|contains
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add it and make sure it does :)
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|count
name|void
name|tst_QVector
operator|::
name|count
parameter_list|()
specifier|const
block|{
comment|// total size
block|{
comment|// zero size
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// count of items
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// initial tests
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|count
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|countInt
name|void
name|tst_QVector
operator|::
name|countInt
parameter_list|()
specifier|const
block|{
name|count
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countMovable
name|void
name|tst_QVector
operator|::
name|countMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|count
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countCustom
name|void
name|tst_QVector
operator|::
name|countCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|count
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|data
name|void
name|tst_QVector
operator|::
name|data
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|42
operator|<<
literal|43
operator|<<
literal|44
expr_stmt|;
comment|// make sure it starts off ok
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
literal|43
argument_list|)
expr_stmt|;
comment|// alter it
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
operator|=
literal|69
expr_stmt|;
comment|// check it altered
name|QCOMPARE
argument_list|(
operator|*
operator|(
name|myvec
operator|.
name|data
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
literal|69
argument_list|)
expr_stmt|;
name|int
name|arr
index|[]
init|=
block|{
literal|42
block|,
literal|69
block|,
literal|44
block|}
decl_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|myvec
operator|.
name|data
argument_list|()
argument_list|,
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
operator|&
name|arr
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|3
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|empty
name|void
name|tst_QVector
operator|::
name|empty
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
comment|// starts empty
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not empty
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty again
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyInt
name|void
name|tst_QVector
operator|::
name|emptyInt
parameter_list|()
specifier|const
block|{
name|empty
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyMovable
name|void
name|tst_QVector
operator|::
name|emptyMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|empty
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyCustom
name|void
name|tst_QVector
operator|::
name|emptyCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|empty
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QVector
operator|::
name|endsWith
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// empty vector
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the one, should work
name|myvec
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add something else, fails now
name|myvec
operator|.
name|append
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove it again :)
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|endsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|eraseEmpty
name|void
name|tst_QVector
operator|::
name|eraseEmpty
parameter_list|()
specifier|const
block|{
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eraseEmptyInt
name|void
name|tst_QVector
operator|::
name|eraseEmptyInt
parameter_list|()
specifier|const
block|{
name|eraseEmpty
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseEmptyMovable
name|void
name|tst_QVector
operator|::
name|eraseEmptyMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|eraseEmpty
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseEmptyCustom
name|void
name|tst_QVector
operator|::
name|eraseEmptyCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|eraseEmpty
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|eraseEmptyReserved
name|void
name|tst_QVector
operator|::
name|eraseEmptyReserved
parameter_list|()
specifier|const
block|{
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|v
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eraseEmptyReservedInt
name|void
name|tst_QVector
operator|::
name|eraseEmptyReservedInt
parameter_list|()
specifier|const
block|{
name|eraseEmptyReserved
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseEmptyReservedMovable
name|void
name|tst_QVector
operator|::
name|eraseEmptyReservedMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|eraseEmptyReserved
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseEmptyReservedCustom
name|void
name|tst_QVector
operator|::
name|eraseEmptyReservedCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|eraseEmptyReserved
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
DECL|struct|SharedVectorChecker
name|SharedVectorChecker
block|{
DECL|function|SharedVectorChecker
name|SharedVectorChecker
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|T
argument_list|>
modifier|&
name|original
parameter_list|,
name|bool
name|doCopyVector
parameter_list|)
member_init_list|:
name|originalSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|copy
argument_list|(
literal|0
argument_list|)
block|{
if|if
condition|(
name|doCopyVector
condition|)
block|{
name|originalSize
operator|=
name|original
operator|.
name|size
argument_list|()
expr_stmt|;
name|copy
operator|=
operator|new
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|(
name|original
argument_list|)
expr_stmt|;
comment|// this is unlikely to fail, but if the check in the destructor fails it's good to know that
comment|// we were still alright here.
name|QCOMPARE
argument_list|(
name|originalSize
argument_list|,
name|copy
operator|->
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|~SharedVectorChecker
name|~
name|SharedVectorChecker
parameter_list|()
block|{
if|if
condition|(
name|copy
condition|)
name|QCOMPARE
argument_list|(
name|copy
operator|->
name|size
argument_list|()
argument_list|,
name|originalSize
argument_list|)
expr_stmt|;
operator|delete
name|copy
expr_stmt|;
block|}
DECL|member|originalSize
name|int
name|originalSize
decl_stmt|;
DECL|member|copy
name|QVector
argument_list|<
name|T
argument_list|>
modifier|*
name|copy
decl_stmt|;
block|}
struct|;
end_struct
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|erase
name|void
name|tst_QVector
operator|::
name|erase
parameter_list|(
name|bool
name|shared
parameter_list|)
specifier|const
block|{
comment|// note: remove() is actually more efficient, and more dangerous, because it uses the non-detaching
comment|// begin() / end() internally. you can also use constBegin() and constEnd() with erase(), but only
comment|// using reinterpret_cast... because both iterator types are really just pointers.
comment|// so we use a mix of erase() and remove() to cover more cases.
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
condition|)
name|QCOMPARE
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
argument_list|,
operator|*
name|svc
operator|.
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
condition|)
name|QCOMPARE
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
argument_list|,
operator|*
name|svc
operator|.
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
condition|)
name|QCOMPARE
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
argument_list|,
operator|*
name|svc
operator|.
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|remove
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
condition|)
name|QCOMPARE
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|12
argument_list|)
argument_list|,
operator|*
name|svc
operator|.
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SharedVectorChecker
argument_list|<
name|T
argument_list|>
name|svc2
argument_list|(
name|v
argument_list|,
name|shared
argument_list|)
decl_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
condition|)
name|QCOMPARE
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|vector
argument_list|(
literal|10
argument_list|)
argument_list|,
operator|*
name|svc
operator|.
name|copy
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eraseInt
name|void
name|tst_QVector
operator|::
name|eraseInt
parameter_list|()
specifier|const
block|{
name|erase
argument_list|<
name|int
argument_list|>
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseIntShared
name|void
name|tst_QVector
operator|::
name|eraseIntShared
parameter_list|()
specifier|const
block|{
name|erase
argument_list|<
name|int
argument_list|>
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseMovable
name|void
name|tst_QVector
operator|::
name|eraseMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|erase
argument_list|<
name|Movable
argument_list|>
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseMovableShared
name|void
name|tst_QVector
operator|::
name|eraseMovableShared
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|erase
argument_list|<
name|Movable
argument_list|>
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseCustom
name|void
name|tst_QVector
operator|::
name|eraseCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|erase
argument_list|<
name|Custom
argument_list|>
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseCustomShared
name|void
name|tst_QVector
operator|::
name|eraseCustomShared
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|erase
argument_list|<
name|Custom
argument_list|>
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseReserved
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|tst_QVector
operator|::
name|eraseReserved
parameter_list|()
specifier|const
block|{
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|v
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|v
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|v
operator|.
name|erase
argument_list|(
name|v
operator|.
name|begin
argument_list|()
argument_list|,
name|v
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eraseReservedInt
name|void
name|tst_QVector
operator|::
name|eraseReservedInt
parameter_list|()
specifier|const
block|{
name|eraseReserved
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseReservedMovable
name|void
name|tst_QVector
operator|::
name|eraseReservedMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|eraseReserved
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseReservedCustom
name|void
name|tst_QVector
operator|::
name|eraseReservedCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|eraseReserved
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|fill
name|void
name|tst_QVector
operator|::
name|fill
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
comment|// resize
name|myvec
operator|.
name|resize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|fill
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure it can resize itself too
name|myvec
operator|.
name|fill
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillInt
name|void
name|tst_QVector
operator|::
name|fillInt
parameter_list|()
specifier|const
block|{
name|fill
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillMovable
name|void
name|tst_QVector
operator|::
name|fillMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|fill
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillCustom
name|void
name|tst_QVector
operator|::
name|fillCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|fill
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|first
name|void
name|tst_QVector
operator|::
name|first
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|69
operator|<<
literal|42
operator|<<
literal|3
expr_stmt|;
comment|// test it starts ok
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|69
argument_list|)
expr_stmt|;
comment|// test removal changes
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// test prepend changes
name|myvec
operator|.
name|prepend
argument_list|(
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|first
argument_list|()
argument_list|,
literal|23
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|fromList
name|void
name|tst_QVector
operator|::
name|fromList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|=
name|QVector
argument_list|<
name|T
argument_list|>
operator|::
name|fromList
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// test it worked ok
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromListInt
name|void
name|tst_QVector
operator|::
name|fromListInt
parameter_list|()
specifier|const
block|{
name|fromList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromListMovable
name|void
name|tst_QVector
operator|::
name|fromListMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|fromList
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromListCustom
name|void
name|tst_QVector
operator|::
name|fromListCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|fromList
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromStdVector
name|void
name|tst_QVector
operator|::
name|fromStdVector
parameter_list|()
specifier|const
block|{
comment|// stl = :(
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
name|svec
decl_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
expr_stmt|;
name|svec
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"pirates"
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
init|=
name|QVector
argument_list|<
name|QString
argument_list|>
operator|::
name|fromStdVector
argument_list|(
name|svec
argument_list|)
decl_stmt|;
comment|// test it converts ok
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ninjas"
operator|<<
literal|"pirates"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QVector
operator|::
name|indexOf
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|6
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|4
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QVector
operator|::
name|insert
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// first position
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// middle
name|myvec
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// end
name|myvec
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
name|QLatin1String
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"T"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert a lot of garbage in the middle
name|myvec
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|QLatin1String
argument_list|(
literal|"infinity"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"X"
operator|<<
literal|"Z"
operator|<<
literal|"infinity"
operator|<<
literal|"infinity"
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"T"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QVector
operator|::
name|isEmpty
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
comment|// starts ok
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not empty now
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"hello there"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty again
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|last
name|void
name|tst_QVector
operator|::
name|last
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// test starts ok
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test it changes ok
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
comment|// and remove again
name|myvec
operator|.
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QVector
operator|::
name|lastIndexOf
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mid
name|void
name|tst_QVector
operator|::
name|mid
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
operator|<<
literal|"kitty"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|mid
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"buck"
operator|<<
literal|"hello"
operator|<<
literal|"kitty"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|prepend
name|void
name|tst_QVector
operator|::
name|prepend
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|T
name|val1
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|T
name|val2
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|T
name|val3
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|T
name|val4
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|T
name|val5
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|myvec
operator|<<
name|val1
operator|<<
name|val2
operator|<<
name|val3
expr_stmt|;
comment|// starts ok
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|val1
argument_list|)
expr_stmt|;
comment|// add something
name|myvec
operator|.
name|prepend
argument_list|(
name|val4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|val4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|// something else
name|myvec
operator|.
name|prepend
argument_list|(
name|val5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|val5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|val4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// clear and prepend to an empty vector
name|myvec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|prepend
argument_list|(
name|val5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|val5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prependInt
name|void
name|tst_QVector
operator|::
name|prependInt
parameter_list|()
specifier|const
block|{
name|prepend
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prependMovable
name|void
name|tst_QVector
operator|::
name|prependMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|prepend
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prependCustom
name|void
name|tst_QVector
operator|::
name|prependCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|prepend
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|remove
name|void
name|tst_QVector
operator|::
name|remove
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|T
name|val1
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|T
name|val2
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|T
name|val3
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|myvec
operator|<<
name|val1
operator|<<
name|val2
operator|<<
name|val3
expr_stmt|;
comment|// remove middle
name|myvec
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|val1
operator|<<
name|val3
argument_list|)
expr_stmt|;
comment|// remove rest
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeInt
name|void
name|tst_QVector
operator|::
name|removeInt
parameter_list|()
specifier|const
block|{
name|remove
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeMovable
name|void
name|tst_QVector
operator|::
name|removeMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|remove
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeCustom
name|void
name|tst_QVector
operator|::
name|removeCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|remove
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizePOD_data
name|void
name|tst_QVector
operator|::
name|resizePOD_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"vector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|null
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyReserved
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|nonEmpty
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|nonEmptyReserved
decl_stmt|;
name|emptyReserved
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmpty
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|nonEmptyReserved
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|nullNotShared
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyNotShared
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|emptyReservedNotShared
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|nonEmptyNotShared
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|nonEmptyReservedNotShared
decl_stmt|;
name|emptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|nonEmptyReservedNotShared
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|emptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|emptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|null
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|empty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReserved"
argument_list|)
operator|<<
name|emptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmpty"
argument_list|)
operator|<<
name|nonEmpty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReserved"
argument_list|)
operator|<<
name|nonEmptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullNotShared"
argument_list|)
operator|<<
name|nullNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyNotShared"
argument_list|)
operator|<<
name|emptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReservedNotShared"
argument_list|)
operator|<<
name|emptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyNotShared"
argument_list|)
operator|<<
name|nonEmptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReservedNotShared"
argument_list|)
operator|<<
name|nonEmptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizePOD
name|void
name|tst_QVector
operator|::
name|resizePOD
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|,
name|vector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|const
name|int
name|oldSize
init|=
name|vector
operator|.
name|size
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|>=
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldSize
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|vector
index|[
name|i
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// check initialization
specifier|const
name|int
name|capacity
init|=
name|vector
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|<=
name|capacity
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeComplexMovable_data
name|void
name|tst_QVector
operator|::
name|resizeComplexMovable_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|Movable
argument_list|>
argument_list|>
argument_list|(
literal|"vector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|null
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
literal|'Q'
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|emptyReserved
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|nonEmpty
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|nonEmptyReserved
decl_stmt|;
name|emptyReserved
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmpty
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
expr_stmt|;
name|nonEmptyReserved
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
operator|<<
literal|'5'
operator|<<
literal|'6'
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|nullNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|emptyNotShared
argument_list|(
literal|0
argument_list|,
literal|'Q'
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|emptyReservedNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|nonEmptyNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Movable
argument_list|>
name|nonEmptyReservedNotShared
decl_stmt|;
name|emptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
expr_stmt|;
name|nonEmptyReservedNotShared
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
operator|<<
literal|'5'
operator|<<
literal|'6'
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|emptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|emptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|null
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|empty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReserved"
argument_list|)
operator|<<
name|emptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmpty"
argument_list|)
operator|<<
name|nonEmpty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReserved"
argument_list|)
operator|<<
name|nonEmptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullNotShared"
argument_list|)
operator|<<
name|nullNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyNotShared"
argument_list|)
operator|<<
name|emptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReservedNotShared"
argument_list|)
operator|<<
name|emptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyNotShared"
argument_list|)
operator|<<
name|nonEmptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReservedNotShared"
argument_list|)
operator|<<
name|nonEmptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeComplexMovable
name|void
name|tst_QVector
operator|::
name|resizeComplexMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|items
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
block|{
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|Movable
argument_list|>
argument_list|,
name|vector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
specifier|const
name|int
name|oldSize
init|=
name|vector
operator|.
name|size
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|>=
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldSize
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|vector
index|[
name|i
index|]
operator|==
literal|'j'
argument_list|)
expr_stmt|;
comment|// check initialization
specifier|const
name|int
name|capacity
init|=
name|vector
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|<=
name|capacity
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|items
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeComplex_data
name|void
name|tst_QVector
operator|::
name|resizeComplex_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|Custom
argument_list|>
argument_list|>
argument_list|(
literal|"vector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|Custom
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTypeInfo
argument_list|<
name|Custom
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|null
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyReserved
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmpty
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmptyReserved
decl_stmt|;
name|emptyReserved
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmpty
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
expr_stmt|;
name|nonEmptyReserved
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
operator|<<
literal|'5'
operator|<<
literal|'6'
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nullNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyNotShared
argument_list|(
literal|0
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyReservedNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmptyNotShared
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmptyReservedNotShared
decl_stmt|;
name|emptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
expr_stmt|;
name|nonEmptyReservedNotShared
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
operator|<<
literal|'5'
operator|<<
literal|'6'
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReservedNotShared
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|emptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|emptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nonEmptyReservedNotShared
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|null
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|empty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReserved"
argument_list|)
operator|<<
name|emptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmpty"
argument_list|)
operator|<<
name|nonEmpty
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReserved"
argument_list|)
operator|<<
name|nonEmptyReserved
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullNotShared"
argument_list|)
operator|<<
name|nullNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyNotShared"
argument_list|)
operator|<<
name|emptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyReservedNotShared"
argument_list|)
operator|<<
name|emptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyNotShared"
argument_list|)
operator|<<
name|nonEmptyNotShared
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonEmptyReservedNotShared"
argument_list|)
operator|<<
name|nonEmptyReservedNotShared
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeComplex
name|void
name|tst_QVector
operator|::
name|resizeComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|items
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
block|{
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|Custom
argument_list|>
argument_list|,
name|vector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|int
name|oldSize
init|=
name|vector
operator|.
name|size
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|>=
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|oldSize
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|vector
index|[
name|i
index|]
operator|.
name|i
operator|==
literal|'j'
argument_list|)
expr_stmt|;
comment|// check default initialization
specifier|const
name|int
name|capacity
init|=
name|vector
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|vector
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|<=
name|capacity
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|Custom
operator|::
name|counter
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeCtorAndDtor
name|void
name|tst_QVector
operator|::
name|resizeCtorAndDtor
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|items
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
block|{
name|QVector
argument_list|<
name|Custom
argument_list|>
name|null
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
literal|'0'
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|emptyReserved
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmpty
decl_stmt|;
name|QVector
argument_list|<
name|Custom
argument_list|>
name|nonEmptyReserved
decl_stmt|;
name|emptyReserved
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmpty
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
expr_stmt|;
name|nonEmptyReserved
operator|<<
literal|'0'
operator|<<
literal|'1'
operator|<<
literal|'2'
operator|<<
literal|'3'
operator|<<
literal|'4'
operator|<<
literal|'5'
operator|<<
literal|'6'
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
comment|// start playing with vectors
name|null
operator|.
name|resize
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|nonEmpty
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|emptyReserved
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nonEmpty
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|Custom
operator|::
name|counter
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|size
name|void
name|tst_QVector
operator|::
name|size
parameter_list|()
specifier|const
block|{
comment|// zero size
name|QVector
argument_list|<
name|T
argument_list|>
name|myvec
decl_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// grow
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|append
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shrink
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeInt
name|void
name|tst_QVector
operator|::
name|sizeInt
parameter_list|()
specifier|const
block|{
name|size
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeMovable
name|void
name|tst_QVector
operator|::
name|sizeMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|size
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeCustom
name|void
name|tst_QVector
operator|::
name|sizeCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|size
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ::squeeze() is tested in ::capacity().
end_comment
begin_function
DECL|function|startsWith
name|void
name|tst_QVector
operator|::
name|startsWith
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|myvec
decl_stmt|;
comment|// empty vector
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the one, should work
name|myvec
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// add something else, fails now
name|myvec
operator|.
name|prepend
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove it again :)
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|startsWith
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|swap
name|void
name|tst_QVector
operator|::
name|swap
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
decl_stmt|,
name|v2
decl_stmt|;
name|T
name|val1
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|T
name|val2
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|T
name|val3
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|T
name|val4
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|T
name|val5
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|T
name|val6
init|=
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|v1
operator|<<
name|val1
operator|<<
name|val2
operator|<<
name|val3
expr_stmt|;
name|v2
operator|<<
name|val4
operator|<<
name|val5
operator|<<
name|val6
expr_stmt|;
name|v1
operator|.
name|swap
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|val4
operator|<<
name|val5
operator|<<
name|val6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|val1
operator|<<
name|val2
operator|<<
name|val3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapInt
name|void
name|tst_QVector
operator|::
name|swapInt
parameter_list|()
specifier|const
block|{
name|swap
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapMovable
name|void
name|tst_QVector
operator|::
name|swapMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|swap
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swapCustom
name|void
name|tst_QVector
operator|::
name|swapCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|swap
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toList
name|void
name|tst_QVector
operator|::
name|toList
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// make sure it converts and doesn't modify the original vector
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|toList
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdVector
name|void
name|tst_QVector
operator|::
name|toStdVector
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
name|std
operator|::
name|vector
argument_list|<
name|QString
argument_list|>
name|svec
init|=
name|myvec
operator|.
name|toStdVector
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|svec
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|void
name|tst_QVector
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
comment|// valid calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// default calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test calls with a provided default, valid calls
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|0
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|2
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test calls with a provided default that will return the default
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperators
name|void
name|tst_QVector
operator|::
name|testOperators
parameter_list|()
specifier|const
block|{
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|myvectwo
decl_stmt|;
name|myvectwo
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|combined
decl_stmt|;
name|combined
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
expr_stmt|;
comment|// !=
name|QVERIFY
argument_list|(
name|myvec
operator|!=
name|myvectwo
argument_list|)
expr_stmt|;
comment|// +
name|QCOMPARE
argument_list|(
name|myvec
operator|+
name|myvectwo
argument_list|,
name|combined
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvectwo
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"D"
operator|<<
literal|"E"
operator|<<
literal|"F"
argument_list|)
expr_stmt|;
comment|// +=
name|myvec
operator|+=
name|myvectwo
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
argument_list|,
name|combined
argument_list|)
expr_stmt|;
comment|// ==
name|QVERIFY
argument_list|(
name|myvec
operator|==
name|combined
argument_list|)
expr_stmt|;
comment|// []
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|0
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|1
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|2
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|3
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|4
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|myvec
index|[
literal|5
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|fooCtor
name|int
name|fooCtor
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fooDtor
name|int
name|fooDtor
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|member|p
name|int
modifier|*
name|p
decl_stmt|;
DECL|function|Foo
name|Foo
parameter_list|()
block|{
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|Foo
name|Foo
parameter_list|(
specifier|const
name|Foo
modifier|&
name|other
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|operator =
name|void
name|operator
name|=
parameter_list|(
specifier|const
name|Foo
modifier|&
comment|/* other */
parameter_list|)
block|{ }
DECL|function|~Foo
name|~
name|Foo
parameter_list|()
block|{
operator|delete
name|p
expr_stmt|;
operator|++
name|fooDtor
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|reserve
name|void
name|tst_QVector
operator|::
name|reserve
parameter_list|()
block|{
name|fooCtor
operator|=
literal|0
expr_stmt|;
name|fooDtor
operator|=
literal|0
expr_stmt|;
block|{
name|QVector
argument_list|<
name|Foo
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Foo
argument_list|>
name|b
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|b
operator|.
name|reserve
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|fooCtor
argument_list|,
name|fooDtor
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This is a regression test for QTBUG-11763, where memory would be reallocated
end_comment
begin_comment
comment|// soon after copying a QVector.
end_comment
begin_function
DECL|function|reallocAfterCopy_data
name|void
name|tst_QVector
operator|::
name|reallocAfterCopy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"capacity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fill_size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"func_id"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result4"
argument_list|)
expr_stmt|;
name|int
name|result1
decl_stmt|,
name|result2
decl_stmt|,
name|result3
decl_stmt|,
name|result4
decl_stmt|;
name|int
name|fill_size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|70
init|;
name|i
operator|<=
literal|100
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|fill_size
operator|=
name|i
operator|-
literal|20
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<=
literal|3
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|==
literal|0
condition|)
block|{
comment|// append
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|1
condition|)
block|{
comment|// insert(0)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|2
condition|)
block|{
comment|// insert(20)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|19
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|j
operator|==
literal|3
condition|)
block|{
comment|// insert(0, 10)
name|result1
operator|=
name|i
expr_stmt|;
name|result2
operator|=
name|i
expr_stmt|;
name|result3
operator|=
name|i
operator|-
literal|10
expr_stmt|;
name|result4
operator|=
name|i
operator|-
literal|20
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"reallocAfterCopy:%1,%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|i
operator|<<
name|fill_size
operator|<<
name|j
operator|<<
name|result1
operator|<<
name|result2
operator|<<
name|result3
operator|<<
name|result4
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|reallocAfterCopy
name|void
name|tst_QVector
operator|::
name|reallocAfterCopy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fill_size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|func_id
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result4
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|v1
decl_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|v2
decl_stmt|;
name|v1
operator|.
name|reserve
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|v1
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|v1
operator|.
name|fill
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|,
name|fill_size
argument_list|)
expr_stmt|;
name|v2
operator|=
name|v1
expr_stmt|;
comment|// no need to test begin() and end(), there is a detach() in them
if|if
condition|(
name|func_id
operator|==
literal|0
condition|)
block|{
name|v1
operator|.
name|append
argument_list|(
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
comment|//push_back is same as append
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|1
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
comment|//push_front is same as prepend, insert(0)
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|2
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|20
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|func_id
operator|==
literal|3
condition|)
block|{
name|v1
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|capacity
argument_list|()
argument_list|,
name|result1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|capacity
argument_list|()
argument_list|,
name|result2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
operator|.
name|size
argument_list|()
argument_list|,
name|result3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v2
operator|.
name|size
argument_list|()
argument_list|,
name|result4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|initializeList
name|void
name|tst_QVector
operator|::
name|initializeList
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|T
name|val1
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|val2
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|val3
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|val4
argument_list|(
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|v1
argument_list|{
name|val1
argument_list|,
name|val2
argument_list|,
name|val3
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|val1
operator|<<
name|val2
operator|<<
name|val3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
operator|(
name|QVector
argument_list|<
name|T
argument_list|>
block|{
name|val1
block|,
name|val2
block|,
name|val3
block|}
operator|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|>
name|v2
argument_list|{
name|v1
argument_list|,
block|{
name|val4
block|}
argument_list|,
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|,
block|{
name|val1
block|,
name|val2
block|,
name|val3
block|}
argument_list|}
decl_stmt|;
name|QVector
argument_list|<
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|>
name|v3
decl_stmt|;
name|v3
operator|<<
name|v1
operator|<<
operator|(
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|val4
operator|)
operator|<<
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
argument_list|,
name|v2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initializeListInt
name|void
name|tst_QVector
operator|::
name|initializeListInt
parameter_list|()
block|{
name|initializeList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeListMovable
name|void
name|tst_QVector
operator|::
name|initializeListMovable
parameter_list|()
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|initializeList
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeListCustom
name|void
name|tst_QVector
operator|::
name|initializeListCustom
parameter_list|()
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|initializeList
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|const_shared_null
name|void
name|tst_QVector
operator|::
name|const_shared_null
parameter_list|()
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|v1
decl_stmt|;
name|v1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|v2
decl_stmt|;
name|v2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|setSharable_data
name|void
name|tst_QVector
operator|::
name|setSharable_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
literal|"vector"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"capacity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isCapacityReserved"
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|null
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|empty
argument_list|(
literal|0
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|emptyReserved
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|nonEmpty
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|nonEmptyReserved
decl_stmt|;
name|emptyReserved
operator|.
name|reserve
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|.
name|reserve
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|nonEmpty
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|nonEmptyReserved
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|4
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|5
argument_list|)
operator|<<
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|emptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nonEmptyReserved
operator|.
name|capacity
argument_list|()
operator|>=
literal|15
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|null
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|empty
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, Reserved"
argument_list|)
operator|<<
name|emptyReserved
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty"
argument_list|)
operator|<<
name|nonEmpty
operator|<<
literal|5
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty, Reserved"
argument_list|)
operator|<<
name|nonEmptyReserved
operator|<<
literal|7
operator|<<
literal|15
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableInt_data
name|void
name|tst_QVector
operator|::
name|setSharableInt_data
parameter_list|()
block|{
name|setSharable_data
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableMovable_data
name|void
name|tst_QVector
operator|::
name|setSharableMovable_data
parameter_list|()
block|{
name|setSharable_data
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableCustom_data
name|void
name|tst_QVector
operator|::
name|setSharableCustom_data
parameter_list|()
block|{
name|setSharable_data
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|setSharable
name|void
name|tst_QVector
operator|::
name|setSharable
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|,
name|vector
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isCapacityReserved
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|vector
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|// Shared with QTest
name|vector
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCapacityReserved
condition|)
name|QVERIFY2
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|>=
name|capacity
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Capacity is %1, expected at least %2."
argument_list|)
operator|.
name|arg
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|capacity
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|copy
argument_list|(
name|vector
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|vector
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|vector
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|vector
operator|.
name|isDetached
argument_list|()
operator|||
name|vector
operator|.
name|isSharedWith
argument_list|(
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|copy
argument_list|(
name|vector
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isDetached
argument_list|()
operator|||
name|copy
operator|.
name|isEmpty
argument_list|()
operator|||
name|copy
operator|.
name|isSharedWith
argument_list|(
name|QVector
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCapacityReserved
condition|)
name|QVERIFY2
argument_list|(
name|copy
operator|.
name|capacity
argument_list|()
operator|>=
name|capacity
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Capacity is %1, expected at least %2."
argument_list|)
operator|.
name|arg
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|capacity
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
argument_list|,
name|vector
argument_list|)
expr_stmt|;
block|}
name|vector
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|QVector
argument_list|<
name|T
argument_list|>
name|copy
argument_list|(
name|vector
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|vector
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vector
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|vector
index|[
name|i
index|]
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|vector
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCapacityReserved
condition|)
name|QVERIFY2
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
operator|>=
name|capacity
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Capacity is %1, expected at least %2."
argument_list|)
operator|.
name|arg
argument_list|(
name|vector
operator|.
name|capacity
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|capacity
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableInt
name|void
name|tst_QVector
operator|::
name|setSharableInt
parameter_list|()
block|{
name|setSharable
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableMovable
name|void
name|tst_QVector
operator|::
name|setSharableMovable
parameter_list|()
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|setSharable
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableCustom
name|void
name|tst_QVector
operator|::
name|setSharableCustom
parameter_list|()
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|setSharable
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|detach
name|void
name|tst_QVector
operator|::
name|detach
parameter_list|()
specifier|const
block|{
block|{
comment|// detach an empty vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach an empty referenced vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|ref
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty referenced vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|31
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|ref
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|31
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
comment|// detaching a detached vector
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty vector with preallocated space
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|ref
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty vector with preallocated space
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
comment|// detaching a detached vector
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty, initialized vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|7
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|ref
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v
index|[
name|i
index|]
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty, initialized vector
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|7
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
comment|// detaching a detached vector
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v
index|[
name|i
index|]
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// detach a not empty, initialized vector with preallocated space
name|QVector
argument_list|<
name|T
argument_list|>
name|v
argument_list|(
literal|7
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|v
operator|.
name|reserve
argument_list|(
literal|31
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|T
argument_list|>
name|ref
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|,
literal|31
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|v
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|v
index|[
name|i
index|]
argument_list|,
name|SimpleValue
argument_list|<
name|T
argument_list|>
operator|::
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|detachInt
name|void
name|tst_QVector
operator|::
name|detachInt
parameter_list|()
specifier|const
block|{
name|detach
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachMovable
name|void
name|tst_QVector
operator|::
name|detachMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Movable
operator|::
name|counter
decl_stmt|;
name|detach
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Movable
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachCustom
name|void
name|tst_QVector
operator|::
name|detachCustom
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|instancesCount
init|=
name|Custom
operator|::
name|counter
decl_stmt|;
name|detach
argument_list|<
name|Custom
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instancesCount
argument_list|,
name|Custom
operator|::
name|counter
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QVector
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvector.moc"
end_include
end_unit
