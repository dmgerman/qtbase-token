begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qvarlengtharray.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_decl_stmt
DECL|variable|N
specifier|const
name|int
name|N
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QVarLengthArray
class|class
name|tst_QVarLengthArray
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|append
parameter_list|()
function_decl|;
name|void
name|removeLast
parameter_list|()
function_decl|;
name|void
name|oldTests
parameter_list|()
function_decl|;
name|void
name|appendCausingRealloc
parameter_list|()
function_decl|;
name|void
name|resize
parameter_list|()
function_decl|;
name|void
name|realloc
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|first
parameter_list|()
function_decl|;
name|void
name|last
parameter_list|()
function_decl|;
name|void
name|squeeze
parameter_list|()
function_decl|;
name|void
name|indexOf
parameter_list|()
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|fooCtor
name|int
name|fooCtor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fooDtor
name|int
name|fooDtor
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|member|p
name|int
modifier|*
name|p
decl_stmt|;
DECL|function|Foo
name|Foo
parameter_list|()
block|{
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|Foo
name|Foo
parameter_list|(
specifier|const
name|Foo
modifier|&
comment|/*other*/
parameter_list|)
block|{
name|p
operator|=
operator|new
name|int
expr_stmt|;
operator|++
name|fooCtor
expr_stmt|;
block|}
DECL|function|operator =
name|void
name|operator
name|=
parameter_list|(
specifier|const
name|Foo
modifier|&
comment|/* other */
parameter_list|)
block|{ }
DECL|function|~Foo
name|~
name|Foo
parameter_list|()
block|{
operator|delete
name|p
expr_stmt|;
operator|++
name|fooDtor
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|append
name|void
name|tst_QVarLengthArray
operator|::
name|append
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|v2
decl_stmt|;
comment|// rocket!
name|v2
operator|.
name|append
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeLast
name|void
name|tst_QVarLengthArray
operator|::
name|removeLast
parameter_list|()
block|{
block|{
name|QVarLengthArray
argument_list|<
name|char
argument_list|,
literal|2
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|2
argument_list|>
name|v
decl_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|v
operator|.
name|append
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|v
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|oldTests
name|void
name|tst_QVarLengthArray
operator|::
name|oldTests
parameter_list|()
block|{
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|256
argument_list|>
name|sa
argument_list|(
literal|128
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|data
argument_list|()
operator|==
operator|&
name|sa
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sa
index|[
literal|0
index|]
operator|=
literal|0xfee
expr_stmt|;
name|sa
index|[
literal|10
index|]
operator|=
literal|0xff
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|0
index|]
operator|==
literal|0xfee
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|10
index|]
operator|==
literal|0xff
argument_list|)
expr_stmt|;
name|sa
operator|.
name|resize
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|data
argument_list|()
operator|==
operator|&
name|sa
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|0
index|]
operator|==
literal|0xfee
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|10
index|]
operator|==
literal|0xff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|0xfee
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|at
argument_list|(
literal|10
argument_list|)
operator|==
literal|0xff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
literal|0xfee
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|10
argument_list|)
operator|==
literal|0xff
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|1000
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|1000
argument_list|,
literal|12
argument_list|)
operator|==
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|size
argument_list|()
operator|==
literal|512
argument_list|)
expr_stmt|;
name|sa
operator|.
name|reserve
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|capacity
argument_list|()
operator|==
literal|1024
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
operator|.
name|size
argument_list|()
operator|==
literal|512
argument_list|)
expr_stmt|;
block|}
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|sa
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|sa
index|[
literal|0
index|]
operator|=
literal|"Hello"
expr_stmt|;
name|sa
index|[
literal|9
index|]
operator|=
literal|"World"
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|sa
operator|.
name|data
argument_list|()
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|9
index|]
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|sa
operator|.
name|reserve
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|sa
operator|.
name|data
argument_list|()
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|9
index|]
operator|==
literal|"World"
argument_list|)
expr_stmt|;
name|sa
operator|.
name|resize
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|sa
operator|.
name|data
argument_list|()
operator|==
literal|"Hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sa
index|[
literal|9
index|]
operator|==
literal|"World"
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|arr
index|[
literal|2
index|]
init|=
block|{
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|sa
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sa
operator|.
name|append
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
index|[
literal|10
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
index|[
literal|11
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|arr
index|[
literal|2
index|]
init|=
block|{
name|QString
argument_list|(
literal|"hello"
argument_list|)
block|,
name|QString
argument_list|(
literal|"world"
argument_list|)
block|}
decl_stmt|;
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|sa
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|sa
operator|.
name|append
argument_list|(
name|arr
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
index|[
literal|10
index|]
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
index|[
literal|11
index|]
argument_list|,
name|QString
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|at
argument_list|(
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|at
argument_list|(
literal|11
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|11
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|value
argument_list|(
literal|1212112
argument_list|,
name|QString
argument_list|(
literal|"none"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"none"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|value
argument_list|(
operator|-
literal|12
argument_list|,
name|QString
argument_list|(
literal|"neg"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"neg"
argument_list|)
argument_list|)
expr_stmt|;
name|sa
operator|.
name|append
argument_list|(
name|arr
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
index|[
literal|12
index|]
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|sa
operator|.
name|append
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa
operator|.
name|size
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
block|{
comment|// assignment operator and copy constructor
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|sa
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|sa
index|[
literal|5
index|]
operator|=
literal|5
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|sa2
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|sa2
index|[
literal|5
index|]
operator|=
literal|6
expr_stmt|;
name|sa2
operator|=
name|sa
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sa2
index|[
literal|5
index|]
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|sa3
argument_list|(
name|sa
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sa3
index|[
literal|5
index|]
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendCausingRealloc
name|void
name|tst_QVarLengthArray
operator|::
name|appendCausingRealloc
parameter_list|()
block|{
comment|// This is a regression test for an old bug where creating a
comment|// QVarLengthArray of the same size as the prealloc size would make
comment|// the next call to append(const T&) corrupt the memory.
name|QVarLengthArray
argument_list|<
name|float
argument_list|,
literal|1
argument_list|>
name|d
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
name|d
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|tst_QVarLengthArray
operator|::
name|resize
parameter_list|()
block|{
comment|//MOVABLE
block|{
name|QVarLengthArray
argument_list|<
name|QVariant
argument_list|,
literal|1
argument_list|>
name|values
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|values
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
name|QVariant
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|//POD
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|,
literal|1
argument_list|>
name|values
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|values
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|//COMPLEX
block|{
name|QVarLengthArray
argument_list|<
name|QVarLengthArray
argument_list|<
name|QString
argument_list|,
literal|15
argument_list|>
argument_list|,
literal|1
argument_list|>
name|values
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|values
index|[
literal|0
index|]
operator|.
name|resize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|values
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|values
index|[
literal|1
index|]
operator|.
name|resize
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
index|[
literal|1
index|]
operator|.
name|size
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|MyBase
struct|struct
name|MyBase
block|{
DECL|function|MyBase
name|MyBase
parameter_list|()
member_init_list|:
name|data
argument_list|(
name|this
argument_list|)
member_init_list|,
name|isCopy
argument_list|(
literal|false
argument_list|)
block|{
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|MyBase
name|MyBase
parameter_list|(
name|MyBase
specifier|const
modifier|&
parameter_list|)
member_init_list|:
name|data
argument_list|(
name|this
argument_list|)
member_init_list|,
name|isCopy
argument_list|(
literal|true
argument_list|)
block|{
operator|++
name|copyCount
expr_stmt|;
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|operator =
name|MyBase
modifier|&
name|operator
name|=
parameter_list|(
name|MyBase
specifier|const
modifier|&
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isCopy
condition|)
block|{
name|isCopy
operator|=
literal|true
expr_stmt|;
operator|++
name|copyCount
expr_stmt|;
block|}
else|else
block|{
operator|++
name|errorCount
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|~MyBase
name|~
name|MyBase
parameter_list|()
block|{
if|if
condition|(
name|isCopy
condition|)
block|{
if|if
condition|(
operator|!
name|copyCount
condition|)
operator|++
name|errorCount
expr_stmt|;
else|else
operator|--
name|copyCount
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|liveCount
condition|)
operator|++
name|errorCount
expr_stmt|;
else|else
operator|--
name|liveCount
expr_stmt|;
block|}
DECL|function|hasMoved
name|bool
name|hasMoved
parameter_list|()
specifier|const
block|{
return|return
name|this
operator|!=
name|data
return|;
block|}
protected|protected:
DECL|member|data
name|MyBase
specifier|const
modifier|*
specifier|const
name|data
decl_stmt|;
DECL|member|isCopy
name|bool
name|isCopy
decl_stmt|;
public|public:
DECL|member|errorCount
specifier|static
name|int
name|errorCount
decl_stmt|;
DECL|member|liveCount
specifier|static
name|int
name|liveCount
decl_stmt|;
DECL|member|copyCount
specifier|static
name|int
name|copyCount
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|errorCount
name|int
name|MyBase
operator|::
name|errorCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|liveCount
name|int
name|MyBase
operator|::
name|liveCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|copyCount
name|int
name|MyBase
operator|::
name|copyCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
DECL|struct|MyPrimitive
struct|struct
name|MyPrimitive
super|:
name|MyBase
block|{
DECL|function|MyPrimitive
name|MyPrimitive
parameter_list|()
block|{
operator|++
name|errorCount
expr_stmt|;
block|}
DECL|function|~MyPrimitive
name|~
name|MyPrimitive
parameter_list|()
block|{
operator|++
name|errorCount
expr_stmt|;
block|}
DECL|function|MyPrimitive
name|MyPrimitive
parameter_list|(
name|MyPrimitive
specifier|const
modifier|&
name|other
parameter_list|)
member_init_list|:
name|MyBase
argument_list|(
name|other
argument_list|)
block|{
operator|++
name|errorCount
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
DECL|struct|MyMovable
struct|struct
name|MyMovable
super|:
name|MyBase
block|{
block|}
struct|;
end_struct
begin_struct
DECL|struct|MyComplex
struct|struct
name|MyComplex
super|:
name|MyBase
block|{
block|}
struct|;
end_struct
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|MyPrimitive
parameter_list|,
name|Q_PRIMITIVE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|MyMovable
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|MyComplex
argument_list|,
name|Q_COMPLEX_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
DECL|variable|reallocTestProceed
name|bool
name|reallocTestProceed
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|,
name|int
name|PreAlloc
parameter_list|>
DECL|function|countMoved
name|int
name|countMoved
parameter_list|(
name|QVarLengthArray
argument_list|<
name|T
argument_list|,
name|PreAlloc
argument_list|>
specifier|const
modifier|&
name|c
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|hasMoved
argument_list|()
condition|)
operator|++
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|reallocTest
name|void
name|reallocTest
parameter_list|()
block|{
name|reallocTestProceed
operator|=
literal|false
expr_stmt|;
typedef|typedef
name|QVarLengthArray
argument_list|<
name|T
argument_list|,
literal|16
argument_list|>
name|Container
typedef|;
enum|enum
block|{
name|isStatic
init|=
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isStatic
block|,
name|isComplex
init|=
name|QTypeInfo
argument_list|<
name|T
argument_list|>
operator|::
name|isComplex
block|,
name|isPrimitive
init|=
operator|!
name|isComplex
operator|&&
operator|!
name|isStatic
block|,
name|isMovable
init|=
operator|!
name|isStatic
block|}
enum|;
comment|// Constructors
name|Container
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Container
name|b_real
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|Container
specifier|const
modifier|&
name|b
init|=
name|b_real
decl_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Assignment
name|a
operator|=
name|b
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|8
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// append
name|a
operator|.
name|append
argument_list|(
name|b
operator|.
name|data
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|16
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// removeLast
name|a
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Movable types
specifier|const
name|int
name|capacity
init|=
name|a
operator|.
name|capacity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|a
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Reserve, no re-allocation
name|a
operator|.
name|reserve
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|a
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Reserve, force re-allocation
name|a
operator|.
name|reserve
argument_list|(
name|capacity
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|a
argument_list|)
argument_list|,
name|isMovable
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|23
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|capacity
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// resize, grow
name|a
operator|.
name|resize
argument_list|(
literal|40
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|a
argument_list|)
argument_list|,
name|isMovable
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|48
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|15
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Copy constructor, allocate
block|{
name|Container
name|c
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|c
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|88
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|55
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|capacity
argument_list|()
operator|>=
literal|40
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
comment|// resize, shrink
name|a
operator|.
name|resize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|a
argument_list|)
argument_list|,
name|isMovable
condition|?
literal|10
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|10
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Copy constructor, don't allocate
block|{
name|Container
name|c
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isPrimitive
condition|)
name|QCOMPARE
argument_list|(
name|countMoved
argument_list|(
name|c
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
name|isPrimitive
condition|?
literal|0
else|:
literal|28
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|copyCount
argument_list|,
name|isComplex
condition|?
literal|20
else|:
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|capacity
argument_list|()
operator|>=
name|a
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|capacity
argument_list|()
operator|>=
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|b_real
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|errorCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyBase
operator|::
name|liveCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// All done
name|reallocTestProceed
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|realloc
name|void
name|tst_QVarLengthArray
operator|::
name|realloc
parameter_list|()
block|{
name|reallocTest
argument_list|<
name|MyBase
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reallocTestProceed
argument_list|)
expr_stmt|;
name|reallocTest
argument_list|<
name|MyPrimitive
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reallocTestProceed
argument_list|)
expr_stmt|;
name|reallocTest
argument_list|<
name|MyMovable
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reallocTestProceed
argument_list|)
expr_stmt|;
name|reallocTest
argument_list|<
name|MyComplex
argument_list|>
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|reallocTestProceed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QVarLengthArray
operator|::
name|count
parameter_list|()
block|{
comment|// tests size(), count() and length(), since they're the same thing
block|{
specifier|const
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|// test removals too
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|first
name|void
name|tst_QVarLengthArray
operator|::
name|first
parameter_list|()
block|{
comment|// append some items, make sure it stays sane
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1987
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// remove some, make sure it stays sane
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|last
name|void
name|tst_QVarLengthArray
operator|::
name|last
parameter_list|()
block|{
comment|// append some items, make sure it stays sane
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1987
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
literal|1987
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// remove some, make sure it stays sane
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|squeeze
name|void
name|tst_QVarLengthArray
operator|::
name|squeeze
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|int
name|sizeOnStack
init|=
name|list
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|int
name|sizeOnHeap
init|=
name|sizeOnStack
operator|*
literal|2
decl_stmt|;
name|list
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnStack
argument_list|)
expr_stmt|;
name|list
operator|.
name|resize
argument_list|(
name|sizeOnHeap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnHeap
argument_list|)
expr_stmt|;
name|list
operator|.
name|resize
argument_list|(
name|sizeOnStack
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnHeap
argument_list|)
expr_stmt|;
name|list
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnHeap
argument_list|)
expr_stmt|;
name|list
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnStack
argument_list|)
expr_stmt|;
name|list
operator|.
name|resize
argument_list|(
name|sizeOnStack
argument_list|)
expr_stmt|;
name|list
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnStack
argument_list|)
expr_stmt|;
name|list
operator|.
name|resize
argument_list|(
name|sizeOnHeap
argument_list|)
expr_stmt|;
name|list
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|capacity
argument_list|()
argument_list|,
name|sizeOnHeap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QVarLengthArray
operator|::
name|indexOf
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"X"
argument_list|,
literal|6
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|indexOf
argument_list|(
literal|"A"
argument_list|,
literal|4
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QVarLengthArray
operator|::
name|lastIndexOf
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"A"
operator|<<
literal|"B"
operator|<<
literal|"C"
operator|<<
literal|"B"
operator|<<
literal|"A"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"B"
argument_list|,
literal|2
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// add an X
name|myvec
operator|<<
literal|"X"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|5
argument_list|)
operator|==
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"X"
argument_list|,
literal|3
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// remove first A
name|myvec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|lastIndexOf
argument_list|(
literal|"A"
argument_list|,
literal|2
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QVarLengthArray
operator|::
name|contains
parameter_list|()
block|{
name|QVarLengthArray
argument_list|<
name|QString
argument_list|>
name|myvec
decl_stmt|;
name|myvec
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add it and make sure it does :)
name|myvec
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|myvec
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"I don't exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QVarLengthArray
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qvarlengtharray.moc"
end_include
end_unit
