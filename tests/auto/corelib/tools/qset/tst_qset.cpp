begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define QT_STRICT_ITERATORS
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
DECL|function|toNumber
name|int
name|toNumber
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|int
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
name|res
operator|=
operator|(
name|res
operator|*
literal|10
operator|)
operator|+
name|str
index|[
name|i
index|]
operator|.
name|digitValue
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_class
DECL|class|tst_QSet
class|class
name|tst_QSet
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|operator_eq
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|size
parameter_list|()
function_decl|;
name|void
name|capacity
parameter_list|()
function_decl|;
name|void
name|reserve
parameter_list|()
function_decl|;
name|void
name|squeeze
parameter_list|()
function_decl|;
name|void
name|detach
parameter_list|()
function_decl|;
name|void
name|isDetached
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|containsSet
parameter_list|()
function_decl|;
name|void
name|begin
parameter_list|()
function_decl|;
name|void
name|end
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|setOperations
parameter_list|()
function_decl|;
name|void
name|stlIterator
parameter_list|()
function_decl|;
name|void
name|stlMutableIterator
parameter_list|()
function_decl|;
name|void
name|javaIterator
parameter_list|()
function_decl|;
name|void
name|javaMutableIterator
parameter_list|()
function_decl|;
name|void
name|makeSureTheComfortFunctionsCompile
parameter_list|()
function_decl|;
name|void
name|initializerList
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|operator_eq
name|void
name|tst_QSet
operator|::
name|operator_eq
parameter_list|()
block|{
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|!=
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|==
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|!=
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|==
name|set2
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|!=
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|==
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|==
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|!=
name|set2
operator|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|!=
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|set1
operator|==
name|set2
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|a
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|b
decl_stmt|;
name|a
operator|+=
literal|"otto"
expr_stmt|;
name|b
operator|+=
literal|"willy"
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QSet
operator|::
name|swap
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|s1
decl_stmt|,
name|s2
decl_stmt|;
name|s1
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s2
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|s1
operator|.
name|swap
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|s1
operator|.
name|begin
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|s2
operator|.
name|begin
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|void
name|tst_QSet
operator|::
name|size
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|count
argument_list|()
operator|==
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|==
name|set
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|capacity
name|void
name|tst_QSet
operator|::
name|capacity
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|int
name|n
init|=
name|set
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|reserve
name|void
name|tst_QSet
operator|::
name|reserve
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|int
name|n
init|=
name|set
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set
operator|.
name|reserve
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
name|set
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|500
condition|;
operator|++
name|j
control|)
name|set
operator|.
name|remove
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|1000
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|squeeze
name|void
name|tst_QSet
operator|::
name|squeeze
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|int
name|n
init|=
name|set
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|n
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set
operator|.
name|reserve
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|1000
argument_list|)
expr_stmt|;
name|set
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|<
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
name|set
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|500
operator|&&
name|set
operator|.
name|capacity
argument_list|()
operator|<
literal|10000
argument_list|)
expr_stmt|;
name|set
operator|.
name|reserve
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|50000
argument_list|)
expr_stmt|;
name|set
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|<
literal|500
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|499
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|<
literal|500
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|499
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|>=
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
name|set
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|set
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|capacity
argument_list|()
operator|<
literal|100
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detach
name|void
name|tst_QSet
operator|::
name|detach
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set
decl_stmt|;
name|set
operator|.
name|detach
argument_list|()
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|set
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|set
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|set
decl_stmt|;
name|set
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isDetached
name|void
name|tst_QSet
operator|::
name|isDetached
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|// shared_null
name|QVERIFY
argument_list|(
operator|!
name|set2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|// shared_null
name|set1
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
comment|// shared_null
name|set2
operator|=
name|set1
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|set1
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QSet
operator|::
name|clear
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|set2
operator|=
name|set1
expr_stmt|;
name|set1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|set2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QSet
operator|::
name|remove
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|set1
operator|.
name|size
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|500
condition|;
operator|++
name|j
control|)
block|{
name|set1
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|(
name|j
operator|*
literal|17
operator|)
operator|%
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|set1
operator|.
name|size
argument_list|()
argument_list|,
literal|500
operator|-
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QSet
operator|::
name|contains
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|set1
operator|.
name|size
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|500
condition|;
operator|++
name|j
control|)
block|{
name|int
name|i
init|=
operator|(
name|j
operator|*
literal|17
operator|)
operator|%
literal|500
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|containsSet
name|void
name|tst_QSet
operator|::
name|containsSet
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set2
decl_stmt|;
comment|// empty set contains the empty set
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
block|{
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|82
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|remove
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
comment|// filled set contains the empty set as well
name|QSet
argument_list|<
name|QString
argument_list|>
name|set3
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
name|set3
argument_list|)
argument_list|)
expr_stmt|;
comment|// the empty set doesn't contain a filled set
name|QVERIFY
argument_list|(
operator|!
name|set3
operator|.
name|contains
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify const signature
specifier|const
name|QSet
argument_list|<
name|QString
argument_list|>
name|set4
decl_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
name|set4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|begin
name|void
name|tst_QSet
operator|::
name|begin
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|set2
init|=
name|set1
decl_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|==
name|ell
argument_list|)
expr_stmt|;
block|}
name|set1
operator|.
name|insert
argument_list|(
literal|44
argument_list|)
expr_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|!=
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|!=
name|ell
argument_list|)
expr_stmt|;
block|}
name|set2
operator|=
name|set1
expr_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cbegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|==
name|ell
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|end
name|void
name|tst_QSet
operator|::
name|end
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|set2
init|=
name|set1
decl_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|constBegin
argument_list|()
operator|==
name|set1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|constBegin
argument_list|()
operator|==
name|set2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set1
operator|.
name|insert
argument_list|(
literal|44
argument_list|)
expr_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|!=
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|!=
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|constBegin
argument_list|()
operator|!=
name|set1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|constBegin
argument_list|()
operator|==
name|set2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set2
operator|=
name|set1
expr_stmt|;
block|{
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|j
init|=
name|set1
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|ell
init|=
name|set2
operator|.
name|cend
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|j
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|k
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|==
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|j
operator|==
name|ell
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|constBegin
argument_list|()
operator|!=
name|set1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|constBegin
argument_list|()
operator|!=
name|set2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|set1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|constBegin
argument_list|()
operator|==
name|set1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|constBegin
argument_list|()
operator|==
name|set2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QSet
operator|::
name|insert
parameter_list|()
block|{
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|insert
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|set1
operator|<<
literal|1
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|set1
operator|<<
literal|2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|set1
operator|<<
literal|2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|set1
operator|<<
literal|2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setOperations
name|void
name|tst_QSet
operator|::
name|setOperations
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|;
name|set1
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
operator|<<
literal|"delta"
operator|<<
literal|"zeta"
operator|<<
literal|"omega"
expr_stmt|;
name|set2
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
operator|<<
literal|"delta"
operator|<<
literal|"epsilon"
operator|<<
literal|"iota"
operator|<<
literal|"omega"
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set3
init|=
name|set1
decl_stmt|;
name|set3
operator|.
name|unite
argument_list|(
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|size
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"epsilon"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"zeta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"iota"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|contains
argument_list|(
literal|"omega"
argument_list|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set4
init|=
name|set2
decl_stmt|;
name|set4
operator|.
name|unite
argument_list|(
name|set1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|size
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"epsilon"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"zeta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"iota"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set4
operator|.
name|contains
argument_list|(
literal|"omega"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|==
name|set4
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set5
init|=
name|set1
decl_stmt|;
name|set5
operator|.
name|intersect
argument_list|(
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|.
name|contains
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|.
name|contains
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|.
name|contains
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|.
name|contains
argument_list|(
literal|"omega"
argument_list|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set6
init|=
name|set2
decl_stmt|;
name|set6
operator|.
name|intersect
argument_list|(
name|set1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set6
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set6
operator|.
name|contains
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set6
operator|.
name|contains
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set6
operator|.
name|contains
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set6
operator|.
name|contains
argument_list|(
literal|"omega"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set5
operator|==
name|set6
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set7
init|=
name|set1
decl_stmt|;
name|set7
operator|.
name|subtract
argument_list|(
name|set2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set7
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set7
operator|.
name|contains
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set7
operator|.
name|contains
argument_list|(
literal|"zeta"
argument_list|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set8
init|=
name|set2
decl_stmt|;
name|set8
operator|.
name|subtract
argument_list|(
name|set1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set8
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set8
operator|.
name|contains
argument_list|(
literal|"epsilon"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set8
operator|.
name|contains
argument_list|(
literal|"iota"
argument_list|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set9
init|=
name|set1
operator||
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set9
operator|==
name|set3
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set10
init|=
name|set1
operator|&
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set10
operator|==
name|set5
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set11
init|=
name|set1
operator|+
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set11
operator|==
name|set3
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set12
init|=
name|set1
operator|-
name|set2
decl_stmt|;
name|QVERIFY
argument_list|(
name|set12
operator|==
name|set7
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set13
init|=
name|set2
operator|-
name|set1
decl_stmt|;
name|QVERIFY
argument_list|(
name|set13
operator|==
name|set8
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set14
init|=
name|set1
decl_stmt|;
name|set14
operator||=
name|set2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set14
operator|==
name|set3
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set15
init|=
name|set1
decl_stmt|;
name|set15
operator|&=
name|set2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set15
operator|==
name|set5
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set16
init|=
name|set1
decl_stmt|;
name|set16
operator|+=
name|set2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set16
operator|==
name|set3
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set17
init|=
name|set1
decl_stmt|;
name|set17
operator|-=
name|set2
expr_stmt|;
name|QVERIFY
argument_list|(
name|set17
operator|==
name|set7
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set18
init|=
name|set2
decl_stmt|;
name|set18
operator|-=
name|set1
expr_stmt|;
name|QVERIFY
argument_list|(
name|set18
operator|==
name|set8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stlIterator
name|void
name|tst_QSet
operator|::
name|stlIterator
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25000
condition|;
operator|++
name|i
control|)
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|set1
operator|.
name|end
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|set1
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|set1
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stlMutableIterator
name|void
name|tst_QSet
operator|::
name|stlMutableIterator
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25000
condition|;
operator|++
name|i
control|)
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|i
init|=
name|set1
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|set1
operator|.
name|end
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|i
init|=
name|set1
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|set1
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set2
init|=
name|set1
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set3
init|=
name|set2
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|i
init|=
name|set2
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|j
init|=
name|set3
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|set2
operator|.
name|end
argument_list|()
condition|)
block|{
name|i
operator|=
name|set2
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|set2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|j
operator|=
name|set3
operator|.
name|end
argument_list|()
expr_stmt|;
while|while
condition|(
name|j
operator|!=
name|set3
operator|.
name|begin
argument_list|()
condition|)
block|{
name|j
operator|--
expr_stmt|;
if|if
condition|(
name|j
operator|+
literal|1
operator|!=
name|set3
operator|.
name|end
argument_list|()
condition|)
name|set3
operator|.
name|erase
argument_list|(
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|set3
operator|.
name|begin
argument_list|()
operator|!=
name|set3
operator|.
name|end
argument_list|()
condition|)
name|set3
operator|.
name|erase
argument_list|(
name|set3
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// #if QT_VERSION>= 0x050000
comment|//         i = set2.insert("foo");
comment|// #else
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|k
init|=
name|set2
operator|.
name|insert
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|i
operator|=
cast|reinterpret_cast
argument_list|<
name|QSet
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
operator|&
argument_list|>
argument_list|(
name|k
argument_list|)
expr_stmt|;
comment|// #endif
name|QVERIFY
argument_list|(
operator|*
name|i
operator|==
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|javaIterator
name|void
name|tst_QSet
operator|::
name|javaIterator
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|25000
condition|;
operator|++
name|k
control|)
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekNext
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|sum1
init|=
literal|0
decl_stmt|;
name|int
name|sum2
init|=
literal|0
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|QSetIterator
argument_list|<
name|QString
argument_list|>
name|j
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|j
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|set1
operator|.
name|remove
argument_list|(
name|i
operator|.
name|peekNext
argument_list|()
argument_list|)
expr_stmt|;
name|sum1
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|sum2
operator|+=
name|toNumber
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|j
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum1
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum2
operator|==
name|sum1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|javaMutableIterator
name|void
name|tst_QSet
operator|::
name|javaMutableIterator
parameter_list|()
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|25000
condition|;
operator|++
name|k
control|)
name|set1
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekNext
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekPrevious
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|i
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|i
operator|.
name|previous
argument_list|()
expr_stmt|;
name|sum
operator|+=
name|toNumber
argument_list|(
name|i
operator|.
name|peekNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|sum
operator|==
literal|24999
operator|*
literal|25000
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|set2
init|=
name|set1
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|set3
init|=
name|set2
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|set2
argument_list|)
decl_stmt|;
name|QMutableSetIterator
argument_list|<
name|QString
argument_list|>
name|j
argument_list|(
name|set3
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|set2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|j
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|j
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|j
operator|.
name|previous
argument_list|()
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|set2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|makeSureTheComfortFunctionsCompile
name|void
name|tst_QSet
operator|::
name|makeSureTheComfortFunctionsCompile
parameter_list|()
block|{
name|QSet
argument_list|<
name|int
argument_list|>
name|set1
decl_stmt|,
name|set2
decl_stmt|,
name|set3
decl_stmt|;
name|set1
operator|<<
literal|5
expr_stmt|;
name|set1
operator||=
name|set2
expr_stmt|;
name|set1
operator||=
literal|5
expr_stmt|;
name|set1
operator|&=
name|set2
expr_stmt|;
name|set1
operator|&=
literal|5
expr_stmt|;
name|set1
operator|+=
name|set2
expr_stmt|;
name|set1
operator|+=
literal|5
expr_stmt|;
name|set1
operator|-=
name|set2
expr_stmt|;
name|set1
operator|-=
literal|5
expr_stmt|;
name|set1
operator|=
name|set2
operator||
name|set3
expr_stmt|;
name|set1
operator|=
name|set2
operator|&
name|set3
expr_stmt|;
name|set1
operator|=
name|set2
operator|+
name|set3
expr_stmt|;
name|set1
operator|=
name|set2
operator|-
name|set3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializerList
name|void
name|tst_QSet
operator|::
name|initializerList
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QSet
argument_list|<
name|int
argument_list|>
name|set
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|set
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|emptySet
argument_list|{}
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptySet
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|set3
argument_list|{
block|{}
argument_list|,
block|{}
argument_list|,
block|{}
argument_list|}
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|set3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Compiler doesn't support initializer lists"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QSet
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qset.moc"
end_include
end_unit
