begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<private/qtools_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QByteArray
class|class
name|tst_QByteArray
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QByteArray
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|qCompress_data
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
name|void
name|qCompress
parameter_list|()
function_decl|;
name|void
name|qUncompressCorruptedData_data
parameter_list|()
function_decl|;
name|void
name|qUncompressCorruptedData
parameter_list|()
function_decl|;
name|void
name|qCompressionZeroTermination
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|constByteArray
parameter_list|()
function_decl|;
name|void
name|leftJustified
parameter_list|()
function_decl|;
name|void
name|rightJustified
parameter_list|()
function_decl|;
name|void
name|setNum
parameter_list|()
function_decl|;
name|void
name|startsWith_data
parameter_list|()
function_decl|;
name|void
name|startsWith
parameter_list|()
function_decl|;
name|void
name|startsWith_char
parameter_list|()
function_decl|;
name|void
name|endsWith_data
parameter_list|()
function_decl|;
name|void
name|endsWith
parameter_list|()
function_decl|;
name|void
name|endsWith_char
parameter_list|()
function_decl|;
name|void
name|split_data
parameter_list|()
function_decl|;
name|void
name|split
parameter_list|()
function_decl|;
name|void
name|base64_data
parameter_list|()
function_decl|;
name|void
name|base64
parameter_list|()
function_decl|;
name|void
name|fromBase64_data
parameter_list|()
function_decl|;
name|void
name|fromBase64
parameter_list|()
function_decl|;
name|void
name|qvsnprintf
parameter_list|()
function_decl|;
name|void
name|qstrlen
parameter_list|()
function_decl|;
name|void
name|qstrnlen
parameter_list|()
function_decl|;
name|void
name|qstrcpy
parameter_list|()
function_decl|;
name|void
name|qstrncpy
parameter_list|()
function_decl|;
name|void
name|qstricmp_data
parameter_list|()
function_decl|;
name|void
name|qstricmp
parameter_list|()
function_decl|;
name|void
name|qstricmp_singularities
parameter_list|()
function_decl|;
name|void
name|qstrnicmp_singularities
parameter_list|()
function_decl|;
name|void
name|chop_data
parameter_list|()
function_decl|;
name|void
name|chop
parameter_list|()
function_decl|;
name|void
name|prepend
parameter_list|()
function_decl|;
name|void
name|prependExtended_data
parameter_list|()
function_decl|;
name|void
name|prependExtended
parameter_list|()
function_decl|;
name|void
name|append
parameter_list|()
function_decl|;
name|void
name|appendExtended_data
parameter_list|()
function_decl|;
name|void
name|appendExtended
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|insertExtended_data
parameter_list|()
function_decl|;
name|void
name|insertExtended
parameter_list|()
function_decl|;
name|void
name|remove_data
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|replace_data
parameter_list|()
function_decl|;
name|void
name|replace
parameter_list|()
function_decl|;
name|void
name|replaceWithSpecifiedLength
parameter_list|()
function_decl|;
name|void
name|indexOf_data
parameter_list|()
function_decl|;
name|void
name|indexOf
parameter_list|()
function_decl|;
name|void
name|lastIndexOf_data
parameter_list|()
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
function_decl|;
name|void
name|toULong_data
parameter_list|()
function_decl|;
name|void
name|toULong
parameter_list|()
function_decl|;
name|void
name|toULongLong_data
parameter_list|()
function_decl|;
name|void
name|toULongLong
parameter_list|()
function_decl|;
name|void
name|number
parameter_list|()
function_decl|;
name|void
name|toInt_data
parameter_list|()
function_decl|;
name|void
name|toInt
parameter_list|()
function_decl|;
name|void
name|qAllocMore
parameter_list|()
function_decl|;
name|void
name|resizeAfterFromRawData
parameter_list|()
function_decl|;
name|void
name|appendAfterFromRawData
parameter_list|()
function_decl|;
name|void
name|toFromHex_data
parameter_list|()
function_decl|;
name|void
name|toFromHex
parameter_list|()
function_decl|;
name|void
name|toFromPercentEncoding
parameter_list|()
function_decl|;
name|void
name|fromPercentEncoding_data
parameter_list|()
function_decl|;
name|void
name|fromPercentEncoding
parameter_list|()
function_decl|;
name|void
name|toPercentEncoding_data
parameter_list|()
function_decl|;
name|void
name|toPercentEncoding
parameter_list|()
function_decl|;
name|void
name|toPercentEncoding2_data
parameter_list|()
function_decl|;
name|void
name|toPercentEncoding2
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|compareCharStar_data
parameter_list|()
function_decl|;
name|void
name|compareCharStar
parameter_list|()
function_decl|;
name|void
name|repeatedSignature
parameter_list|()
specifier|const
function_decl|;
name|void
name|repeated
parameter_list|()
specifier|const
function_decl|;
name|void
name|repeated_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|byteRefDetaching
parameter_list|()
specifier|const
function_decl|;
name|void
name|reserve
parameter_list|()
function_decl|;
name|void
name|reserveExtended_data
parameter_list|()
function_decl|;
name|void
name|reserveExtended
parameter_list|()
function_decl|;
name|void
name|movablity_data
parameter_list|()
function_decl|;
name|void
name|movablity
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
name|void
name|literals
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|macTypes
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|StaticByteArrays
specifier|static
specifier|const
struct|struct
name|StaticByteArrays
block|{
DECL|struct|Standard
struct|struct
name|Standard
block|{
DECL|member|data
name|QByteArrayData
name|data
decl_stmt|;
DECL|member|string
specifier|const
name|char
name|string
index|[
literal|8
index|]
decl_stmt|;
DECL|member|standard
block|}
name|standard
struct|;
DECL|struct|NotNullTerminated
struct|struct
name|NotNullTerminated
block|{
DECL|member|data
name|QByteArrayData
name|data
decl_stmt|;
DECL|member|string
specifier|const
name|char
name|string
index|[
literal|8
index|]
decl_stmt|;
DECL|member|notNullTerminated
block|}
name|notNullTerminated
struct|;
DECL|struct|Shifted
struct|struct
name|Shifted
block|{
DECL|member|data
name|QByteArrayData
name|data
decl_stmt|;
DECL|member|dummy
specifier|const
name|char
name|dummy
decl_stmt|;
comment|// added to change offset of string
DECL|member|string
specifier|const
name|char
name|string
index|[
literal|8
index|]
decl_stmt|;
DECL|member|shifted
block|}
name|shifted
struct|;
DECL|struct|ShiftedNotNullTerminated
struct|struct
name|ShiftedNotNullTerminated
block|{
DECL|member|data
name|QByteArrayData
name|data
decl_stmt|;
DECL|member|dummy
specifier|const
name|char
name|dummy
decl_stmt|;
comment|// added to change offset of string
DECL|member|string
specifier|const
name|char
name|string
index|[
literal|8
index|]
decl_stmt|;
DECL|member|shiftedNotNullTerminated
block|}
name|shiftedNotNullTerminated
struct|;
block|}
DECL|variable|statics
name|statics
init|=
block|{
block|{
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
literal|4
argument_list|)
block|,
literal|"data"
block|}
block|,
block|{
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER
argument_list|(
literal|4
argument_list|)
block|,
literal|"dataBAD"
block|}
block|,
block|{
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
argument_list|(
literal|4
argument_list|,
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
block|,
literal|0
block|,
literal|"data"
block|}
block|,
block|{
name|Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET
argument_list|(
literal|4
argument_list|,
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
argument_list|)
block|,
literal|0
block|,
literal|"dataBAD"
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|staticStandard
specifier|static
specifier|const
name|QByteArrayDataPtr
name|staticStandard
init|=
block|{
expr|const_cast
operator|<
name|QByteArrayData
operator|*
operator|>
operator|(
operator|&
name|statics
operator|.
name|standard
operator|.
name|data
operator|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|staticNotNullTerminated
specifier|static
specifier|const
name|QByteArrayDataPtr
name|staticNotNullTerminated
init|=
block|{
expr|const_cast
operator|<
name|QByteArrayData
operator|*
operator|>
operator|(
operator|&
name|statics
operator|.
name|notNullTerminated
operator|.
name|data
operator|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|staticShifted
specifier|static
specifier|const
name|QByteArrayDataPtr
name|staticShifted
init|=
block|{
expr|const_cast
operator|<
name|QByteArrayData
operator|*
operator|>
operator|(
operator|&
name|statics
operator|.
name|shifted
operator|.
name|data
operator|)
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|staticShiftedNotNullTerminated
specifier|static
specifier|const
name|QByteArrayDataPtr
name|staticShiftedNotNullTerminated
init|=
block|{
expr|const_cast
operator|<
name|QByteArrayData
operator|*
operator|>
operator|(
operator|&
name|statics
operator|.
name|shiftedNotNullTerminated
operator|.
name|data
operator|)
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|verifyZeroTermination
template|template
parameter_list|<
name|class
name|T
parameter_list|>
specifier|const
name|T
modifier|&
name|verifyZeroTermination
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|verifyZeroTermination
name|QByteArray
name|verifyZeroTermination
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
comment|// This test does some evil stuff, it's all supposed to work.
name|QByteArray
operator|::
name|DataPtr
name|baDataPtr
init|=
cast|const_cast
argument_list|<
name|QByteArray
operator|&
argument_list|>
argument_list|(
name|ba
argument_list|)
operator|.
name|data_ptr
argument_list|()
decl_stmt|;
comment|// Skip if isStatic() or fromRawData(), as those offer no guarantees
if|if
condition|(
name|baDataPtr
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
operator|||
name|baDataPtr
operator|->
name|offset
operator|!=
name|QByteArray
argument_list|()
operator|.
name|data_ptr
argument_list|()
operator|->
name|offset
condition|)
return|return
name|ba
return|;
name|int
name|baSize
init|=
name|ba
operator|.
name|size
argument_list|()
decl_stmt|;
name|char
name|baTerminator
init|=
name|ba
operator|.
name|constData
argument_list|()
index|[
name|baSize
index|]
decl_stmt|;
if|if
condition|(
literal|'\0'
operator|!=
name|baTerminator
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"*** Result ('%1') not null-terminated: 0x%2 ***"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|baTerminator
argument_list|,
literal|2
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
return|;
comment|// Skip mutating checks on shared strings
if|if
condition|(
name|baDataPtr
operator|->
name|ref
operator|.
name|isShared
argument_list|()
condition|)
return|return
name|ba
return|;
specifier|const
name|char
modifier|*
name|baData
init|=
name|ba
operator|.
name|constData
argument_list|()
decl_stmt|;
specifier|const
name|QByteArray
name|baCopy
argument_list|(
name|baData
argument_list|,
name|baSize
argument_list|)
decl_stmt|;
comment|// Deep copy
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|baData
argument_list|)
index|[
name|baSize
index|]
operator|=
literal|'x'
expr_stmt|;
if|if
condition|(
literal|'x'
operator|!=
name|ba
operator|.
name|constData
argument_list|()
index|[
name|baSize
index|]
condition|)
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"*** Failed to replace null-terminator in "
literal|"result ('%1') ***"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
return|;
block|}
if|if
condition|(
name|ba
operator|!=
name|baCopy
condition|)
block|{
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"*** Result ('%1') differs from its copy "
literal|"after null-terminator was replaced ***"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
return|;
block|}
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|baData
argument_list|)
index|[
name|baSize
index|]
operator|=
literal|'\0'
expr_stmt|;
comment|// Restore sanity
return|return
name|ba
return|;
block|}
end_function
begin_comment
comment|// Overriding QTest's QCOMPARE, to check QByteArray for null termination
end_comment
begin_undef
DECL|macro|QCOMPARE
undef|#
directive|undef
name|QCOMPARE
end_undef
begin_define
DECL|macro|QCOMPARE
define|#
directive|define
name|QCOMPARE
parameter_list|(
name|actual
parameter_list|,
name|expected
parameter_list|)
define|\
value|do {                                                                \         if (!QTest::qCompare(verifyZeroTermination(actual), expected,   \                 #actual, #expected, __FILE__, __LINE__))                \             return;                                                     \     } while (0)
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_undef
DECL|macro|QTEST
undef|#
directive|undef
name|QTEST
end_undef
begin_define
DECL|macro|QTEST
define|#
directive|define
name|QTEST
parameter_list|(
name|actual
parameter_list|,
name|testElement
parameter_list|)
define|\
value|do {                                                                \         if (!QTest::qTest(verifyZeroTermination(actual), testElement,   \                 #actual, #testElement, __FILE__, __LINE__))             \             return;                                                     \     } while (0)
end_define
begin_comment
unit|\
comment|/**/
end_comment
begin_constructor
DECL|function|tst_QByteArray
name|tst_QByteArray
operator|::
name|tst_QByteArray
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|qCompress_data
name|void
name|tst_QByteArray
operator|::
name|qCompress_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
specifier|const
name|int
name|size1
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|size1
init|=
literal|1024
decl_stmt|;
endif|#
directive|endif
name|QByteArray
name|ba1
argument_list|(
name|size1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"00"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size1
condition|;
name|i
operator|++
control|)
name|ba1
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|i
operator|/
literal|1024
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|ba1
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size1
condition|;
name|i
operator|++
control|)
name|ba1
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|i
operator|%
literal|256
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
name|ba1
expr_stmt|;
name|ba1
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
name|ba1
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|tmpArgc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|tmpArgv
init|=
literal|0
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|tmpArgc
argument_list|,
name|tmpArgv
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QFile
name|file
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"rfc3252.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"04"
argument_list|)
operator|<<
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
end_ifndef
begin_function
DECL|function|qCompress
name|void
name|tst_QByteArray
operator|::
name|qCompress
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QByteArray
name|compressed
init|=
operator|::
name|qCompress
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|QTEST
argument_list|(
operator|::
name|qUncompress
argument_list|(
name|compressed
argument_list|)
argument_list|,
literal|"ba"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qUncompressCorruptedData_data
name|void
name|tst_QByteArray
operator|::
name|qUncompressCorruptedData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x00000000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x000000ff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x3f000000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x3f\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x3fffffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x3f\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x7fffff00"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x7f\xff\xff\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x7fffffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x7f\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x80000000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x800000ff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x00\x00\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xcf000000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xcf\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xcfffffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xcf\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xffffff00"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xffffffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Corrupt data causes this test to lock up on HP-UX / PA-RISC with gcc,
end_comment
begin_comment
comment|// SOLARIS, and Windows.
end_comment
begin_comment
comment|// This test is expected to produce some warning messages in the test output.
end_comment
begin_function
DECL|function|qUncompressCorruptedData
name|void
name|tst_QByteArray
operator|::
name|qUncompressCorruptedData
parameter_list|()
block|{
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__ia64
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SOLARIS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QByteArray
name|res
decl_stmt|;
name|res
operator|=
operator|::
name|qUncompress
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
operator|::
name|qUncompress
argument_list|(
name|in
operator|+
literal|"blah"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"This test freezes on this platform"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qCompressionZeroTermination
name|void
name|tst_QByteArray
operator|::
name|qCompressionZeroTermination
parameter_list|()
block|{
name|QString
name|s
init|=
literal|"Hello, I'm a string."
decl_stmt|;
name|QByteArray
name|ba
init|=
operator|::
name|qUncompress
argument_list|(
operator|::
name|qCompress
argument_list|(
name|s
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
operator|*
operator|(
name|ba
operator|.
name|data
argument_list|()
operator|+
name|ba
operator|.
name|size
argument_list|()
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|constByteArray
name|void
name|tst_QByteArray
operator|::
name|constByteArray
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|ptr
init|=
literal|"abc"
decl_stmt|;
name|QByteArray
name|cba
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|ptr
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
operator|==
name|ptr
argument_list|)
expr_stmt|;
name|cba
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
operator|==
name|ptr
argument_list|)
expr_stmt|;
name|cba
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|capacity
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
operator|!=
name|ptr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
index|[
literal|0
index|]
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
index|[
literal|1
index|]
operator|==
literal|'b'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
index|[
literal|2
index|]
operator|==
literal|'c'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cba
operator|.
name|constData
argument_list|()
index|[
literal|3
index|]
operator|==
literal|'\0'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leftJustified
name|void
name|tst_QByteArray
operator|::
name|leftJustified
parameter_list|()
block|{
name|QByteArray
name|a
decl_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|5
argument_list|,
literal|'-'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC--"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC-"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|n
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// I expected true
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|3
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|2
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|1
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|leftJustified
argument_list|(
literal|0
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rightJustified
name|void
name|tst_QByteArray
operator|::
name|rightJustified
parameter_list|()
block|{
name|QByteArray
name|a
decl_stmt|;
name|a
operator|=
literal|"ABC"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|5
argument_list|,
literal|'-'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"--ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|" ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|n
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|n
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// I expected true
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|'-'
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|4
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|" ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|3
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|2
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"AB"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|1
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|rightJustified
argument_list|(
literal|0
argument_list|,
literal|' '
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QByteArray
argument_list|(
literal|"ABC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNum
name|void
name|tst_QByteArray
operator|::
name|setNum
parameter_list|()
block|{
name|QByteArray
name|a
decl_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0
argument_list|,
literal|36
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|35
argument_list|,
literal|36
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|37
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"100101"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|37
argument_list|,
literal|36
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Negative numbers are only properly supported for base 10.
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|short
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ffff"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|int
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ffffffff"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ffffffffffffffff"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|short
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|int
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
literal|123
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0x123
argument_list|,
literal|16
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|(
name|short
operator|)
literal|123
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|1.23
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1.23"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|1.234567
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1.23457"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note that there are no 'long' overloads, so not all of the
comment|// QString::setNum() tests can be re-used.
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
literal|123
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2^40 == 1099511627776
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
operator|-
literal|1099511627776
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-1099511627776"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|1099511627776
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1099511627776"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
argument_list|,
comment|// LLONG_MAX
name|QByteArray
argument_list|(
literal|"9223372036854775807"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
operator|-
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|-
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"-9223372036854775808"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
argument_list|,
comment|// ULLONG_MAX
name|QByteArray
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|setNum
argument_list|(
literal|0.000000000931322574615478515625
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"9.31323e-10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWith_data
name|void
name|tst_QByteArray
operator|::
name|startsWith_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"sw"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"04"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"05"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"06"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"07"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"08"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"09"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallohallo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWith
name|void
name|tst_QByteArray
operator|::
name|startsWith
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|startsWith
argument_list|(
name|sw
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|sw
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|ba
operator|.
name|startsWith
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|ba
operator|.
name|startsWith
argument_list|(
name|sw
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|startsWith_char
name|void
name|tst_QByteArray
operator|::
name|startsWith_char
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'l'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith_data
name|void
name|tst_QByteArray
operator|::
name|endsWith_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"ba"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"sw"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"02"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"03"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"04"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"05"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"06"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"07"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"o"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"08"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"09"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallohallo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QByteArray
operator|::
name|endsWith
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|sw
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ba
operator|.
name|endsWith
argument_list|(
name|sw
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|sw
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|ba
operator|.
name|endsWith
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|ba
operator|.
name|endsWith
argument_list|(
name|sw
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|endsWith_char
name|void
name|tst_QByteArray
operator|::
name|endsWith_char
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"h"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'o'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'l'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|split_data
name|void
name|tst_QByteArray
operator|::
name|split_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"sample"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-rw-r--r--  1 0  0  519240 Jul  9  2002 bigfile"
argument_list|)
operator|<<
literal|14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcde"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"three empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"  "
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|split
name|void
name|tst_QByteArray
operator|::
name|split
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|sample
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
init|=
name|sample
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QByteArray
operator|::
name|swap
parameter_list|()
block|{
name|QByteArray
name|b1
init|=
literal|"b1"
decl_stmt|,
name|b2
init|=
literal|"b2"
decl_stmt|;
name|b1
operator|.
name|swap
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b1
argument_list|,
name|QByteArray
argument_list|(
literal|"b2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b2
argument_list|,
name|QByteArray
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|base64_data
name|void
name|tst_QByteArray
operator|::
name|base64_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"rawdata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"base64"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MQ=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MTI="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MTIz"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1234"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MTIzNA=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Cg=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YQo="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWIK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjCg=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZAo="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcde\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGUK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGVmCg=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefg\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGVmZwo="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"e"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGVmZ2gK"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|ba
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"f"
argument_list|)
operator|<<
name|ba
operator|<<
name|QByteArray
argument_list|(
literal|"AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"g"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo\0bar"
argument_list|,
literal|7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Zm9vAGJhcg=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"h"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"f\xd1oo\x9ctar"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ZtFvb5x0YXI="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"i"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\"\0\0\0\0\0\0\""
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"IgAAAAAAACI="
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|base64
name|void
name|tst_QByteArray
operator|::
name|base64
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|base64
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arr
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
name|QByteArray
name|arr64
init|=
name|rawdata
operator|.
name|toBase64
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arr64
argument_list|,
name|base64
argument_list|)
expr_stmt|;
name|arr64
operator|=
name|rawdata
operator|.
name|toBase64
argument_list|(
name|QByteArray
operator|::
name|Base64Encoding
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr64
argument_list|,
name|base64
argument_list|)
expr_stmt|;
name|QByteArray
name|base64noequals
init|=
name|base64
decl_stmt|;
name|base64noequals
operator|.
name|replace
argument_list|(
literal|'='
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|arr64
operator|=
name|rawdata
operator|.
name|toBase64
argument_list|(
name|QByteArray
operator|::
name|Base64Encoding
operator||
name|QByteArray
operator|::
name|OmitTrailingEquals
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr64
argument_list|,
name|base64noequals
argument_list|)
expr_stmt|;
name|QByteArray
name|base64url
init|=
name|base64
decl_stmt|;
name|base64url
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|arr64
operator|=
name|rawdata
operator|.
name|toBase64
argument_list|(
name|QByteArray
operator|::
name|Base64UrlEncoding
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr64
argument_list|,
name|base64url
argument_list|)
expr_stmt|;
name|QByteArray
name|base64urlnoequals
init|=
name|base64url
decl_stmt|;
name|base64urlnoequals
operator|.
name|replace
argument_list|(
literal|'='
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|arr64
operator|=
name|rawdata
operator|.
name|toBase64
argument_list|(
name|QByteArray
operator|::
name|Base64UrlEncoding
operator||
name|QByteArray
operator|::
name|OmitTrailingEquals
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr64
argument_list|,
name|base64urlnoequals
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//different from the previous test as the input are invalid
end_comment
begin_function
DECL|function|fromBase64_data
name|void
name|tst_QByteArray
operator|::
name|fromBase64_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"rawdata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"base64"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MQ"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MTI       "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"M=TIz"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1234"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"MTI zN A "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Cg"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"======YQo="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Y\nWIK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjCg=="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJ\1j\x9cZAo="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcde\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YW JjZ\n G\tUK"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGVmCg="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefg\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJ\rjZGVmZwo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"e"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"YWJjZGVmZ2gK"
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|ba
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"f"
argument_list|)
operator|<<
name|ba
operator|<<
name|QByteArray
argument_list|(
literal|"AAECAwQFBgcICQoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Nj\n"
literal|"c4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1u\n"
literal|"b3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpa\n"
literal|"anqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd\n"
literal|"3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/w==                            "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"g"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo\0bar"
argument_list|,
literal|7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Zm9vAGJhcg"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"h"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"f\xd1oo\x9ctar"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ZtFvb5x0YXI="
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"i"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\"\0\0\0\0\0\0\""
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"IgAAAAAAACI"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromBase64
name|void
name|tst_QByteArray
operator|::
name|fromBase64
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|base64
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arr
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
name|arr
operator|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64
argument_list|,
name|QByteArray
operator|::
name|Base64Encoding
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
comment|// try "base64url" encoding
name|QByteArray
name|base64url
init|=
name|base64
decl_stmt|;
name|base64url
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'+'
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|arr
operator|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64url
argument_list|,
name|QByteArray
operator|::
name|Base64UrlEncoding
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr
argument_list|,
name|rawdata
argument_list|)
expr_stmt|;
if|if
condition|(
name|base64
operator|!=
name|base64url
condition|)
block|{
comment|// check that the invalid decodings fail
name|arr
operator|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64
argument_list|,
name|QByteArray
operator|::
name|Base64UrlEncoding
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|!=
name|rawdata
argument_list|)
expr_stmt|;
name|arr
operator|=
name|QByteArray
operator|::
name|fromBase64
argument_list|(
name|base64url
argument_list|,
name|QByteArray
operator|::
name|Base64Encoding
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|!=
name|rawdata
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qvsnprintf
name|void
name|tst_QByteArray
operator|::
name|qvsnprintf
parameter_list|()
block|{
name|char
name|buf
index|[
literal|20
index|]
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|42
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|10
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"bubu"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_MSVC
comment|// MSVC implementation of vsnprintf overwrites bytes after null terminator so this would fail.
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|5
index|]
argument_list|,
name|char
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|memset
argument_list|(
name|buf
argument_list|,
literal|42
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|5
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"bubu"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|5
index|]
argument_list|,
name|char
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|42
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// VS 2005 uses the Qt implementation of vsnprintf.
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"bu"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// windows has to do everything different, of course.
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|buf
index|[
literal|19
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"bub****************"
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_IRIX
comment|// Irix reports back the amount of characters written without the \0
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Every other system in this world reports the amount of data that could have been written
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|"%s"
argument_list|,
literal|"bubu"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"bu"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|4
index|]
argument_list|,
name|char
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|memset
argument_list|(
name|buf
argument_list|,
literal|42
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qsnprintf
argument_list|(
name|buf
argument_list|,
literal|10
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qstrlen
name|void
name|tst_QByteArray
operator|::
name|qstrlen
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|src
init|=
literal|"Something about ... \0 a string."
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrlen
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrlen
argument_list|(
name|src
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstrnlen
name|void
name|tst_QByteArray
operator|::
name|qstrnlen
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|src
init|=
literal|"Something about ... \0 a string."
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnlen
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnlen
argument_list|(
name|src
argument_list|,
literal|31
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnlen
argument_list|(
name|src
argument_list|,
literal|19
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|19
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnlen
argument_list|(
name|src
argument_list|,
literal|21
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnlen
argument_list|(
name|src
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|(
name|uint
operator|)
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstrcpy
name|void
name|tst_QByteArray
operator|::
name|qstrcpy
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|src
init|=
literal|"Something about ... \0 a string."
decl_stmt|;
specifier|const
name|char
modifier|*
name|expected
init|=
literal|"Something about ... "
decl_stmt|;
name|char
name|dst
index|[
literal|128
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrcpy
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrcpy
argument_list|(
name|dst
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|*
operator|)
name|dst
argument_list|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstrncpy
name|void
name|tst_QByteArray
operator|::
name|qstrncpy
parameter_list|()
block|{
name|QByteArray
name|src
argument_list|(
literal|1024
argument_list|,
literal|'a'
argument_list|)
decl_stmt|,
name|dst
argument_list|(
literal|1024
argument_list|,
literal|'b'
argument_list|)
decl_stmt|;
comment|// singularities
name|QCOMPARE
argument_list|(
operator|::
name|qstrncpy
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrncpy
argument_list|(
name|dst
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// normal copy
name|QCOMPARE
argument_list|(
operator|::
name|qstrncpy
argument_list|(
name|dst
operator|.
name|data
argument_list|()
argument_list|,
name|src
operator|.
name|data
argument_list|()
argument_list|,
name|src
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|dst
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|src
operator|=
name|QByteArray
argument_list|(
literal|"Tumdelidum"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
operator|::
name|qstrncpy
argument_list|(
name|dst
operator|.
name|data
argument_list|()
argument_list|,
name|src
operator|.
name|data
argument_list|()
argument_list|,
name|src
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Tumdelidu"
argument_list|)
argument_list|)
expr_stmt|;
comment|// normal copy with length is longer than necessary
name|src
operator|=
name|QByteArray
argument_list|(
literal|"Tumdelidum\0foo"
argument_list|)
expr_stmt|;
name|dst
operator|.
name|resize
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
operator|::
name|qstrncpy
argument_list|(
name|dst
operator|.
name|data
argument_list|()
argument_list|,
name|src
operator|.
name|data
argument_list|()
argument_list|,
name|dst
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Tumdelidum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstricmp_data
name|void
name|tst_QByteArray
operator|::
name|qstricmp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   1"
argument_list|)
operator|<<
literal|"abcEdb"
operator|<<
literal|"abcEdb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   2"
argument_list|)
operator|<<
literal|"abcEdb"
operator|<<
literal|"ABCeDB"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   3"
argument_list|)
operator|<<
literal|"ABCEDB"
operator|<<
literal|"abcedb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    1"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|"abcdefg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    2"
argument_list|)
operator|<<
literal|"abcdeF"
operator|<<
literal|"abcdef"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 1"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|"abcdeF"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 2"
argument_list|)
operator|<<
literal|"abcdefg"
operator|<<
literal|"abcdef"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstricmp
name|void
name|tst_QByteArray
operator|::
name|qstricmp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
name|strcmp
argument_list|(
name|str1
operator|.
name|toUpper
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|str2
operator|.
name|toUpper
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|0
condition|)
block|{
name|expected
operator|=
operator|(
name|expected
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
expr_stmt|;
block|}
name|int
name|actual
init|=
operator|::
name|qstricmp
argument_list|(
name|str1
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|str2
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
literal|0
condition|)
block|{
name|actual
operator|=
operator|(
name|actual
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstricmp_singularities
name|void
name|tst_QByteArray
operator|::
name|qstricmp_singularities
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
operator|::
name|qstricmp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qstricmp
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qstricmp
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstricmp
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qstrnicmp_singularities
name|void
name|tst_QByteArray
operator|::
name|qstrnicmp_singularities
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
operator|::
name|qstrnicmp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|123
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qstrnicmp
argument_list|(
literal|0
argument_list|,
literal|"a"
argument_list|,
literal|123
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qstrnicmp
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|123
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnicmp
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|123
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qstrnicmp
argument_list|(
literal|"a"
argument_list|,
literal|"B"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|chop_data
name|void
name|tst_QByteArray
operator|::
name|chop_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"choplength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"short1"
argument_list|)
operator|<<
literal|128
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"short2"
argument_list|)
operator|<<
name|int
argument_list|(
name|strlen
argument_list|(
literal|"short2"
argument_list|)
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef\0foo"
argument_list|,
literal|10
argument_list|)
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef\0f"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"STARTTLS\r\n"
argument_list|)
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"STARTTLS"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|0
argument_list|)
operator|<<
literal|28
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|chop
name|void
name|tst_QByteArray
operator|::
name|chop
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|choplength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|src
operator|.
name|chop
argument_list|(
name|choplength
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend
name|void
name|tst_QByteArray
operator|::
name|prepend
parameter_list|()
block|{
name|QByteArray
name|ba
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
name|QByteArray
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"21foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
literal|'3'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"321foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|prepend
argument_list|(
literal|"\0 "
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"\0 321foo"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prependExtended_data
name|void
name|tst_QByteArray
operator|::
name|prependExtended_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"array"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"literal"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"standard"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticStandard
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shifted"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticShifted
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notNullTerminated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticNotNullTerminated
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shiftedNotNullTerminated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticShiftedNotNullTerminated
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non static data"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from raw data"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"data"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"from raw data not terminated"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"dataBAD"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prependExtended
name|void
name|tst_QByteArray
operator|::
name|prependExtended
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|()
operator|.
name|prepend
argument_list|(
name|array
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|prepend
argument_list|(
name|array
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"1data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
name|QByteArray
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"21data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
literal|'3'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"321data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|prepend
argument_list|(
literal|"\0 "
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"\0 321data"
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QByteArray
operator|::
name|append
parameter_list|()
block|{
name|QByteArray
name|ba
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
literal|'3'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
literal|"\0"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"foo123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|append
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"foo123\0"
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendExtended_data
name|void
name|tst_QByteArray
operator|::
name|appendExtended_data
parameter_list|()
block|{
name|prependExtended_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendExtended
name|void
name|tst_QByteArray
operator|::
name|appendExtended
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|()
operator|.
name|append
argument_list|(
name|array
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|.
name|append
argument_list|(
name|array
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
literal|'3'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
literal|"\0"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"data123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|append
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"data123\0"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QByteArray
operator|::
name|insert
parameter_list|()
block|{
name|QByteArray
name|ba
argument_list|(
literal|"Meal"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|QByteArray
argument_list|(
literal|"ontr"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Montrealfoo"
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|=
name|QByteArray
argument_list|(
literal|"13"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
name|QByteArray
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|=
literal|"ac"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|'b'
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ba
operator|=
literal|"ikl"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"j"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"ijkl"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ba
operator|=
literal|"ab"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"\0X\0"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"a\0X\0b"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertExtended_data
name|void
name|tst_QByteArray
operator|::
name|insertExtended_data
parameter_list|()
block|{
name|prependExtended_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertExtended
name|void
name|tst_QByteArray
operator|::
name|insertExtended
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"i"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"diata"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_data
name|void
name|tst_QByteArray
operator|::
name|remove_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"length"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
operator|<<
literal|1
operator|<<
literal|4
operator|<<
name|QByteArray
argument_list|(
literal|"Meal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|10
operator|<<
literal|10
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hi"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
operator|<<
literal|4
operator|<<
literal|100
operator|<<
name|QByteArray
argument_list|(
literal|"Mont"
argument_list|)
expr_stmt|;
comment|// index out of range
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
operator|<<
literal|8
operator|<<
literal|1
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
operator|<<
literal|18
operator|<<
literal|4
operator|<<
name|QByteArray
argument_list|(
literal|"Montreal"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QByteArray
operator|::
name|remove
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|src
operator|.
name|remove
argument_list|(
name|position
argument_list|,
name|length
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace_data
name|void
name|tst_QByteArray
operator|::
name|replace_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Say yes!"
argument_list|)
operator|<<
literal|4
operator|<<
literal|3
operator|<<
name|QByteArray
argument_list|(
literal|"no"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Say no!"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"rock and roll"
argument_list|)
operator|<<
literal|5
operator|<<
literal|3
operator|<<
name|QByteArray
argument_list|(
literal|"&"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"rock& roll"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|3
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
comment|// index out of range
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|3
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"hi"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"   hi"
argument_list|)
expr_stmt|;
comment|// Optimized path
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|3
operator|<<
literal|12
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghijkl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcabcdefghijkl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|3
operator|<<
literal|4
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghijkl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcabcdefghijkl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghijkl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcabcdefghijkl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|3
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghijkl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcabcdefghijklf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"xx"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abxxef"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace
name|void
name|tst_QByteArray
operator|::
name|replace
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|after
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QByteArray
name|str1
init|=
name|src
decl_stmt|;
name|QByteArray
name|str2
init|=
name|src
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|.
name|replace
argument_list|(
name|pos
argument_list|,
name|len
argument_list|,
name|after
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|expected
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|.
name|replace
argument_list|(
name|pos
argument_list|,
name|len
argument_list|,
name|after
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replaceWithSpecifiedLength
name|void
name|tst_QByteArray
operator|::
name|replaceWithSpecifiedLength
parameter_list|()
block|{
specifier|const
name|char
name|after
index|[]
init|=
literal|"zxc\0vbnmqwert"
decl_stmt|;
name|int
name|lenAfter
init|=
literal|6
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
literal|"abcdefghjk"
argument_list|)
decl_stmt|;
name|ba
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|after
argument_list|,
name|lenAfter
argument_list|)
expr_stmt|;
specifier|const
name|char
name|_expected
index|[]
init|=
literal|"zxc\0vbcdefghjk"
decl_stmt|;
name|QByteArray
name|expected
argument_list|(
name|_expected
argument_list|,
sizeof|sizeof
argument_list|(
name|_expected
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ba
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf_data
name|void
name|tst_QByteArray
operator|::
name|indexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
specifier|static
specifier|const
name|char
name|h19
index|[]
init|=
block|{
literal|'x'
block|,
literal|0x00
block|,
operator|(
name|char
operator|)
literal|0xe7
block|,
literal|0x25
block|,
literal|0x1c
block|,
literal|0x0a
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
name|n19
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x00
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|h19
argument_list|,
sizeof|sizeof
argument_list|(
name|h19
argument_list|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|n19
argument_list|,
sizeof|sizeof
argument_list|(
name|n19
argument_list|)
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-in-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-in-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-in-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-in-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QByteArray
name|veryBigHaystack
argument_list|(
literal|500
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|veryBigHaystack
operator|+=
literal|'B'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest"
argument_list|)
operator|<<
name|veryBigHaystack
operator|<<
name|veryBigHaystack
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|'d'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BoyerMooreStressTest7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|veryBigHaystack
operator|+
literal|'c'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|'c'
operator|+
name|veryBigHaystack
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexOf
name|void
name|tst_QByteArray
operator|::
name|indexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startpos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|bool
name|hasNull
init|=
name|needle
operator|.
name|contains
argument_list|(
literal|'\0'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNull
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|data
argument_list|()
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|startpos
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNull
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|indexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lastIndexOf_data
name|void
name|tst_QByteArray
operator|::
name|lastIndexOf_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startpos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"A"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bc"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Bc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bC"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"aBc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"BC"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
specifier|static
specifier|const
name|char
name|h25
index|[]
init|=
block|{
literal|0x00
block|,
operator|(
name|char
operator|)
literal|0xbc
block|,
literal|0x03
block|,
literal|0x10
block|,
literal|0x0a
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
name|n25
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x00
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|h25
argument_list|,
sizeof|sizeof
argument_list|(
name|h25
argument_list|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|n25
argument_list|,
sizeof|sizeof
argument_list|(
name|n25
argument_list|)
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-in-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-in-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-in-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-in-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QByteArray
operator|::
name|lastIndexOf
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startpos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|bool
name|hasNull
init|=
name|needle
operator|.
name|contains
argument_list|(
literal|'\0'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNull
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|data
argument_list|()
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|startpos
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|startpos
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNull
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|needle
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|haystack
operator|.
name|lastIndexOf
argument_list|(
name|needle
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|number
name|void
name|tst_QByteArray
operator|::
name|number
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
operator|(
name|quint64
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|0xFFFFFFFFFFFFFFFF
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"18446744073709551615"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|Q_INT64_C
argument_list|(
literal|0xFFFFFFFFFFFFFFFF
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|Q_INT64_C
argument_list|(
literal|0x7FFFFFFFFFFFFFFF
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"9223372036854775807"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|Q_INT64_C
argument_list|(
literal|0x8000000000000000
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QByteArray
argument_list|(
literal|"-9223372036854775808"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// defined later
end_comment
begin_decl_stmt
specifier|extern
specifier|const
name|char
name|globalChar
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|toInt_data
name|void
name|tst_QByteArray
operator|::
name|toInt_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectednumber"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|10
operator|<<
name|int
argument_list|(
literal|100
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 16-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|16
operator|<<
name|int
argument_list|(
literal|256
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 16-2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0400"
argument_list|)
operator|<<
literal|16
operator|<<
name|int
argument_list|(
literal|1024
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111"
argument_list|)
operator|<<
literal|2
operator|<<
name|int
argument_list|(
literal|15
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|8
operator|<<
name|int
argument_list|(
literal|64
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 0-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x10"
argument_list|)
operator|<<
literal|0
operator|<<
name|int
argument_list|(
literal|16
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 0-2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|0
operator|<<
name|int
argument_list|(
literal|10
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"base 0-3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"010"
argument_list|)
operator|<<
literal|0
operator|<<
name|int
argument_list|(
literal|8
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
operator|<<
name|int
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// using fromRawData
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw1"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw2"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"1foo"
argument_list|,
literal|1
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw3"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"12"
argument_list|,
literal|1
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw4"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"123456789"
argument_list|,
literal|1
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw5"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"123456789"
argument_list|,
literal|2
argument_list|)
operator|<<
literal|10
operator|<<
literal|12
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw-static"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|&
name|globalChar
argument_list|,
literal|1
argument_list|)
operator|<<
literal|10
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toInt
name|void
name|tst_QByteArray
operator|::
name|toInt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectednumber
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedok
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|number
init|=
name|string
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|expectedok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|number
argument_list|,
name|expectednumber
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULong_data
name|void
name|tst_QByteArray
operator|::
name|toULong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ulong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|ulong
name|LongMaxPlusOne
init|=
operator|(
name|ulong
operator|)
name|LONG_MAX
operator|+
literal|1
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"LONG_MAX+1"
argument_list|)
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|LongMaxPlusOne
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|<<
literal|10
operator|<<
name|LongMaxPlusOne
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|10
operator|<<
literal|0UL
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"3234567890"
argument_list|)
operator|<<
literal|10
operator|<<
literal|3234567890UL
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ulong2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"fFFfFfFf"
argument_list|)
operator|<<
literal|16
operator|<<
literal|0xFFFFFFFFUL
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULong
name|void
name|tst_QByteArray
operator|::
name|toULong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ulong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULongLong_data
name|void
name|tst_QByteArray
operator|::
name|toULongLong_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"base"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|10
operator|<<
operator|(
name|qulonglong
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"out of base bound"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|10
operator|<<
operator|(
name|qulonglong
operator|)
literal|0
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toULongLong
name|void
name|tst_QByteArray
operator|::
name|toULongLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qulonglong
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|bool
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
literal|0
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|toULongLong
argument_list|(
operator|&
name|b
argument_list|,
name|base
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// global function defined in qbytearray.cpp
end_comment
begin_function
DECL|function|qAllocMore
name|void
name|tst_QByteArray
operator|::
name|qAllocMore
parameter_list|()
block|{
using|using
name|QT_PREPEND_NAMESPACE
argument_list|(
name|qAllocMore
argument_list|)
using|;
comment|// Not very important, but please behave :-)
name|QVERIFY
argument_list|(
name|qAllocMore
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|1
operator|<<
literal|8
condition|;
name|i
operator|<<=
literal|1
control|)
name|QVERIFY
argument_list|(
name|qAllocMore
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|>=
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
operator|<<
literal|8
init|;
name|i
operator|<
literal|1
operator|<<
literal|30
condition|;
name|i
operator|<<=
literal|1
control|)
block|{
specifier|const
name|int
name|alloc
init|=
name|qAllocMore
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|alloc
operator|>=
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|-
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|alloc
operator|-
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|-
literal|16
argument_list|,
literal|16
argument_list|)
argument_list|,
name|alloc
operator|-
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|-
literal|24
argument_list|,
literal|24
argument_list|)
argument_list|,
name|alloc
operator|-
literal|24
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|-
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|,
name|alloc
operator|-
literal|32
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|>=
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAllocMore
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
operator|>=
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resizeAfterFromRawData
name|void
name|tst_QByteArray
operator|::
name|resizeAfterFromRawData
parameter_list|()
block|{
name|QByteArray
name|buffer
argument_list|(
literal|"hello world"
argument_list|)
decl_stmt|;
name|QByteArray
name|array
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|constData
argument_list|()
operator|==
name|buffer
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|constData
argument_list|()
operator|==
name|buffer
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendAfterFromRawData
name|void
name|tst_QByteArray
operator|::
name|appendAfterFromRawData
parameter_list|()
block|{
name|QByteArray
name|arr
decl_stmt|;
block|{
name|char
name|data
index|[]
init|=
literal|"X"
decl_stmt|;
name|arr
operator|+=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|'Y'
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|arr
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|'X'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFromHex_data
name|void
name|tst_QByteArray
operator|::
name|toFromHex_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"hex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"hex_alt1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt is great!"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Qt is great!"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"517420697320677265617421"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"51 74 20 69 73 20 67 72 65 61 74 21"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt is so great!"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Qt is so great!"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"517420697320736f20677265617421"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"51 74 20 69 73 20 73 6f 20 67 72 65 61 74 21"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-constructed"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"array-of-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"00"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-leading-zero"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0f"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single-byte"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xaf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"af"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xaf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-leading-zero"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xd\xde\xad\xc0\xde"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0ddeadc0de"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ddeadc0de"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xC\xde\xeC\xea\xee\xDe\xee\xee"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0cdeeceaeedeeeee"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Code less. Create more. Deploy everywhere."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"under-defined-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x1\x23"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0123"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"under-defined-2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x12\x34"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1234"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x1234"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFromHex
name|void
name|tst_QByteArray
operator|::
name|toFromHex
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|hex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|hex_alt1
argument_list|)
expr_stmt|;
block|{
specifier|const
name|QByteArray
name|th
init|=
name|str
operator|.
name|toHex
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|th
operator|.
name|size
argument_list|()
argument_list|,
name|hex
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|th
argument_list|,
name|hex
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QByteArray
name|fh
init|=
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|hex
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fh
operator|.
name|size
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fh
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|hex_alt1
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toFromPercentEncoding
name|void
name|tst_QByteArray
operator|::
name|toFromPercentEncoding
parameter_list|()
block|{
name|QByteArray
name|arr
argument_list|(
literal|"Qt is great!"
argument_list|)
decl_stmt|;
name|QByteArray
name|data
init|=
name|arr
operator|.
name|toPercentEncoding
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|data
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Qt%20is%20great%21"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|data
argument_list|)
argument_list|,
name|arr
argument_list|)
expr_stmt|;
name|data
operator|=
name|arr
operator|.
name|toPercentEncoding
argument_list|(
literal|"! "
argument_list|,
literal|"Qt"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|data
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%51%74 is grea%74!"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|data
argument_list|)
argument_list|,
name|arr
argument_list|)
expr_stmt|;
name|data
operator|=
name|arr
operator|.
name|toPercentEncoding
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|,
literal|'Q'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|data
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Q51Q74Q20Q69Q73Q20Q67Q72Q65Q61Q74Q21"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|data
argument_list|,
literal|'Q'
argument_list|)
argument_list|,
name|arr
argument_list|)
expr_stmt|;
comment|// verify that to/from percent encoding preserves nullity
name|arr
operator|=
literal|""
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|arr
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|toPercentEncoding
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|arr
operator|.
name|toPercentEncoding
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
literal|""
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|arr
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|toPercentEncoding
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|toPercentEncoding
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPercentEncoding_data
name|void
name|tst_QByteArray
operator|::
name|fromPercentEncoding_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encodedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"decodedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NormalString"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filename"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NormalStringEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"file%20name"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"file name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"JustEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%20"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTPUrl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project.org"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project.org"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTPUrlEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project%20org"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project org"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EmptyString"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Task27166"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Fran%C3%A7aise"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FranÃ§aise"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPercentEncoding
name|void
name|tst_QByteArray
operator|::
name|fromPercentEncoding
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encodedString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|encodedString
argument_list|)
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPercentEncoding_data
name|void
name|tst_QByteArray
operator|::
name|toPercentEncoding_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"decodedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encodedString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NormalString"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filename"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NormalStringEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"file name"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"file%20name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"JustEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%20"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTPUrl"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project.org"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http%3A//qt-project.org"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTPUrlEncoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http://qt-project org"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"http%3A//qt-project%20org"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EmptyString"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Task27166"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FranÃ§aise"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Fran%C3%A7aise"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPercentEncoding
name|void
name|tst_QByteArray
operator|::
name|toPercentEncoding
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encodedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|decodedString
operator|.
name|toPercentEncoding
argument_list|(
literal|"/."
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|encodedString
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPercentEncoding2_data
name|void
name|tst_QByteArray
operator|::
name|toPercentEncoding2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"original"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"excludeInEncoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"includeInEncoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test_01"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdevghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345678-._~"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdevghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345678-._~"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test_02"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"{\t\n\r^\"abc}"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%7B%09%0A%0D%5E%22abc%7D"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test_03"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"://?#[]@!$&'()*+,;="
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%3A%2F%2F%3F%23%5B%5D%40%21%24%26%27%28%29%2A%2B%2C%3B%3D"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test_04"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"://?#[]@!$&'()*+,;="
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%3A%2F%2F%3F%23%5B%5D%40!$&'()*+,;="
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"!$&'()*+,;="
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test_05"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a%62%63d"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPercentEncoding2
name|void
name|tst_QByteArray
operator|::
name|toPercentEncoding2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|excludeInEncoding
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|includeInEncoding
argument_list|)
expr_stmt|;
name|QByteArray
name|encodedData
init|=
name|original
operator|.
name|toPercentEncoding
argument_list|(
name|excludeInEncoding
argument_list|,
name|includeInEncoding
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|encodedData
operator|.
name|constData
argument_list|()
argument_list|,
name|encoded
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
argument_list|,
name|QByteArray
operator|::
name|fromPercentEncoding
argument_list|(
name|encodedData
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QByteArray
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-full"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"full-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-full"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"full-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rawempty-full"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"full-rawempty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   2"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   3"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcdef"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcdef"
argument_list|,
literal|3
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   7"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"a\0bcdef"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal   8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"a\0bcdef"
argument_list|,
literal|4
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    2"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"00"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"000"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    5"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc\0"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc\0"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less    6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bd"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"000"
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"00"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcd"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bb"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|+
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QByteArray
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isEqual
init|=
name|result
operator|==
literal|0
decl_stmt|;
specifier|const
name|bool
name|isLess
init|=
name|result
operator|<
literal|0
decl_stmt|;
specifier|const
name|bool
name|isGreater
init|=
name|result
operator|>
literal|0
decl_stmt|;
comment|// basic tests:
name|QCOMPARE
argument_list|(
name|str1
operator|==
name|str2
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|<
name|str2
argument_list|,
name|isLess
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|>
name|str2
argument_list|,
name|isGreater
argument_list|)
expr_stmt|;
comment|// composed tests:
name|QCOMPARE
argument_list|(
name|str1
operator|<=
name|str2
argument_list|,
name|isLess
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|>=
name|str2
argument_list|,
name|isGreater
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|!=
name|str2
argument_list|,
operator|!
name|isEqual
argument_list|)
expr_stmt|;
comment|// inverted tests:
name|QCOMPARE
argument_list|(
name|str2
operator|==
name|str1
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|<
name|str1
argument_list|,
name|isGreater
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|>
name|str1
argument_list|,
name|isLess
argument_list|)
expr_stmt|;
comment|// composed, inverted tests:
name|QCOMPARE
argument_list|(
name|str2
operator|<=
name|str1
argument_list|,
name|isGreater
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|>=
name|str1
argument_list|,
name|isLess
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|!=
name|str1
argument_list|,
operator|!
name|isEqual
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEqual
condition|)
name|QVERIFY
argument_list|(
name|qHash
argument_list|(
name|str1
argument_list|)
operator|==
name|qHash
argument_list|(
name|str2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCharStar_data
name|void
name|tst_QByteArray
operator|::
name|compareCharStar_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"str1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|""
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-full"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|""
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-full"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw-null"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw-empty"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"raw-full"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|0
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"full-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"full-empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|""
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd"
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal3"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcd"
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abb"
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less3"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abc"
argument_list|,
literal|2
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less5"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"less6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\0bc"
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"a.bc"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ac"
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abd"
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|+
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greater4"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromRawData
argument_list|(
literal|"abcd"
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"abc"
operator|<<
operator|+
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCharStar
name|void
name|tst_QByteArray
operator|::
name|compareCharStar
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|str1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|isEqual
init|=
name|result
operator|==
literal|0
decl_stmt|;
specifier|const
name|bool
name|isLess
init|=
name|result
operator|<
literal|0
decl_stmt|;
specifier|const
name|bool
name|isGreater
init|=
name|result
operator|>
literal|0
decl_stmt|;
name|QByteArray
name|qba
init|=
name|string2
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|str2
init|=
name|qba
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|string2
operator|.
name|isNull
argument_list|()
condition|)
name|str2
operator|=
literal|0
expr_stmt|;
comment|// basic tests:
name|QCOMPARE
argument_list|(
name|str1
operator|==
name|str2
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|<
name|str2
argument_list|,
name|isLess
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|>
name|str2
argument_list|,
name|isGreater
argument_list|)
expr_stmt|;
comment|// composed tests:
name|QCOMPARE
argument_list|(
name|str1
operator|<=
name|str2
argument_list|,
name|isLess
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|>=
name|str2
argument_list|,
name|isGreater
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|!=
name|str2
argument_list|,
operator|!
name|isEqual
argument_list|)
expr_stmt|;
comment|// inverted tests:
name|QCOMPARE
argument_list|(
name|str2
operator|==
name|str1
argument_list|,
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|<
name|str1
argument_list|,
name|isGreater
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|>
name|str1
argument_list|,
name|isLess
argument_list|)
expr_stmt|;
comment|// composed, inverted tests:
name|QCOMPARE
argument_list|(
name|str2
operator|<=
name|str1
argument_list|,
name|isGreater
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|>=
name|str1
argument_list|,
name|isLess
operator|||
name|isEqual
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str2
operator|!=
name|str1
argument_list|,
operator|!
name|isEqual
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeatedSignature
name|void
name|tst_QByteArray
operator|::
name|repeatedSignature
parameter_list|()
specifier|const
block|{
comment|/* repated() should be a const member. */
specifier|const
name|QByteArray
name|string
decl_stmt|;
name|string
operator|.
name|repeated
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeated
name|void
name|tst_QByteArray
operator|::
name|repeated
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
operator|.
name|repeated
argument_list|(
name|count
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|repeated_data
name|void
name|tst_QByteArray
operator|::
name|repeated_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
comment|/* Empty strings. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|-
literal|1004
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|5
expr_stmt|;
comment|/* On simple string. */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|-
literal|1004
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abc"
operator|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abcabc"
operator|)
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abc"
operator|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abcabcabc"
operator|)
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abc"
operator|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
operator|(
literal|"abcabcabcabc"
operator|)
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"static not null terminated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticNotNullTerminated
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"datadatadatadata"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"static standard"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticStandard
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"datadatadatadata"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"static shifted not null terminated"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticShiftedNotNullTerminated
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"datadatadatadata"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"static shifted"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|staticShifted
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"datadatadatadata"
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|byteRefDetaching
name|void
name|tst_QByteArray
operator|::
name|byteRefDetaching
parameter_list|()
specifier|const
block|{
block|{
name|QByteArray
name|str
init|=
literal|"str"
decl_stmt|;
name|QByteArray
name|copy
decl_stmt|;
name|copy
index|[
literal|0
index|]
operator|=
literal|'S'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QByteArray
argument_list|(
literal|"str"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|char
name|buf
index|[]
init|=
block|{
literal|'s'
block|,
literal|'t'
block|,
literal|'r'
block|}
decl_stmt|;
name|QByteArray
name|str
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|str
index|[
literal|0
index|]
operator|=
literal|'S'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|,
name|char
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|static
specifier|const
name|char
name|buf
index|[]
init|=
block|{
literal|'s'
block|,
literal|'t'
block|,
literal|'r'
block|}
decl_stmt|;
name|QByteArray
name|str
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// this causes a crash in most systems if the detaching doesn't work
name|str
index|[
literal|0
index|]
operator|=
literal|'S'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|,
name|char
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|reserve
name|void
name|tst_QByteArray
operator|::
name|reserve
parameter_list|()
block|{
name|int
name|capacity
init|=
literal|100
decl_stmt|;
name|QByteArray
name|qba
decl_stmt|;
name|qba
operator|.
name|reserve
argument_list|(
name|capacity
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qba
operator|.
name|capacity
argument_list|()
operator|==
name|capacity
argument_list|)
expr_stmt|;
name|char
modifier|*
name|data
init|=
name|qba
operator|.
name|data
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|qba
operator|.
name|resize
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|capacity
operator|==
name|qba
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|==
name|qba
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|nil1
decl_stmt|,
name|nil2
decl_stmt|;
name|nil1
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nil2
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|nil1
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|nil2
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reserveExtended_data
name|void
name|tst_QByteArray
operator|::
name|reserveExtended_data
parameter_list|()
block|{
name|prependExtended_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reserveExtended
name|void
name|tst_QByteArray
operator|::
name|reserveExtended
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|array
operator|.
name|reserve
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|capacity
argument_list|()
operator|==
literal|1024
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|capacity
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|movablity_data
name|void
name|tst_QByteArray
operator|::
name|movablity_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"array"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x00000000"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x000000ff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xffffffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sss"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|3
argument_list|,
literal|'s'
argument_list|)
expr_stmt|;
name|prependExtended_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|movablity
name|void
name|tst_QByteArray
operator|::
name|movablity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QByteArray
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
specifier|const
name|int
name|size
init|=
name|array
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isEmpty
init|=
name|array
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isNull
init|=
name|array
operator|.
name|isNull
argument_list|()
decl_stmt|;
specifier|const
name|int
name|capacity
init|=
name|array
operator|.
name|capacity
argument_list|()
decl_stmt|;
name|QByteArray
name|memSpace
decl_stmt|;
comment|// we need only memory space not the instance
name|memSpace
operator|.
name|~
name|QByteArray
argument_list|()
expr_stmt|;
comment|// move array -> memSpace
name|memcpy
argument_list|(
operator|&
name|memSpace
argument_list|,
operator|&
name|array
argument_list|,
sizeof|sizeof
argument_list|(
name|QByteArray
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconstruct empty QByteArray
operator|new
operator|(
operator|&
name|array
operator|)
name|QByteArray
expr_stmt|;
name|QCOMPARE
argument_list|(
name|memSpace
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|memSpace
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|isEmpty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|memSpace
operator|.
name|isNull
argument_list|()
argument_list|,
name|isNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|memSpace
operator|.
name|capacity
argument_list|()
argument_list|,
name|capacity
argument_list|)
expr_stmt|;
comment|// try to not crash
name|memSpace
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|memSpace
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|memSpace
operator|.
name|prepend
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|memSpace
operator|.
name|append
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|memSpace
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|memSpace
operator|.
name|reserve
argument_list|(
name|array
operator|.
name|size
argument_list|()
operator|+
literal|16
argument_list|)
expr_stmt|;
name|QByteArray
name|copy
argument_list|(
name|memSpace
argument_list|)
decl_stmt|;
comment|// reinitialize base values
specifier|const
name|int
name|newSize
init|=
name|size
operator|+
literal|2
decl_stmt|;
specifier|const
name|bool
name|newIsEmpty
init|=
literal|false
decl_stmt|;
specifier|const
name|bool
name|newIsNull
init|=
literal|false
decl_stmt|;
specifier|const
name|int
name|newCapacity
init|=
literal|16
decl_stmt|;
comment|// move back memSpace -> array
name|array
operator|.
name|~
name|QByteArray
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|array
argument_list|,
operator|&
name|memSpace
argument_list|,
sizeof|sizeof
argument_list|(
name|QByteArray
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconstruct empty QByteArray
operator|new
operator|(
operator|&
name|memSpace
operator|)
name|QByteArray
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|newIsEmpty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|isNull
argument_list|()
argument_list|,
name|newIsNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|capacity
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|array
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|size
argument_list|()
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|newIsEmpty
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|isNull
argument_list|()
argument_list|,
name|newIsNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|capacity
argument_list|()
argument_list|,
name|newCapacity
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|endsWith
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try to not crash
name|array
operator|.
name|squeeze
argument_list|()
expr_stmt|;
name|array
operator|.
name|reserve
argument_list|(
name|array
operator|.
name|size
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_COMPILER_LAMBDA
argument_list|)
end_if
begin_comment
comment|// Only tested on c++0x compliant compiler or gcc
end_comment
begin_function
DECL|function|literals
name|void
name|tst_QByteArray
operator|::
name|literals
parameter_list|()
block|{
name|QByteArray
name|str
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"abcd"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|==
literal|"abcd"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|data_ptr
argument_list|()
operator|->
name|ref
operator|.
name|isStatic
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str
operator|.
name|data_ptr
argument_list|()
operator|->
name|offset
operator|==
sizeof|sizeof
argument_list|(
name|QByteArrayData
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|s
init|=
name|str
operator|.
name|constData
argument_list|()
decl_stmt|;
name|QByteArray
name|str2
init|=
name|str
decl_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|constData
argument_list|()
operator|==
name|s
argument_list|)
expr_stmt|;
comment|// detach on non const access
name|QVERIFY
argument_list|(
name|str
operator|.
name|data
argument_list|()
operator|!=
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|constData
argument_list|()
operator|==
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|str2
operator|.
name|data
argument_list|()
operator|!=
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|macTypes
name|void
name|tst_QByteArray
operator|::
name|macTypes
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"This is a Apple-only test"
argument_list|)
expr_stmt|;
else|#
directive|else
specifier|extern
name|void
name|tst_QByteArray_macTypes
argument_list|()
decl_stmt|;
comment|// in qbytearray_mac.mm
name|tst_QByteArray_macTypes
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
DECL|variable|globalChar
specifier|const
name|char
name|globalChar
init|=
literal|'1'
decl_stmt|;
end_decl_stmt
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QByteArray
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qbytearray.moc"
end_include
end_unit
