begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/*  * This file exists because tst_qsharedpointer.cpp is compiled with  * QT_SHAREDPOINTER_TRACK_POINTERS. That changes some behavior.  *  * Note that most of these tests may yield false-positives in debug mode, but  * they should not yield false negatives. That is, they may report PASS when  * they are failing, but they should not produce FAILs.  *  * The reason for that is because of C++'s One Definition Rule: the macro  * changes some functions and, in debug mode, they will not be inlined. At link  * time, the two functions would be merged.  */
end_comment
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|"nontracked.h"
end_include
begin_comment
comment|// We can't name our classes Data and DerivedData: those are in tst_qsharedpointer.cpp
end_comment
begin_namespace
DECL|namespace|NonTracked
namespace|namespace
name|NonTracked
block|{
DECL|class|Data
class|class
name|Data
block|{
public|public:
DECL|member|destructorCounter
specifier|static
name|int
name|destructorCounter
decl_stmt|;
DECL|member|generationCounter
specifier|static
name|int
name|generationCounter
decl_stmt|;
DECL|member|generation
name|int
name|generation
decl_stmt|;
DECL|function|Data
name|Data
parameter_list|()
member_init_list|:
name|generation
argument_list|(
operator|++
name|generationCounter
argument_list|)
block|{ }
DECL|function|~Data
specifier|virtual
name|~
name|Data
parameter_list|()
block|{
if|if
condition|(
name|generation
operator|<=
literal|0
condition|)
name|qFatal
argument_list|(
literal|"tst_qsharedpointer: Double deletion!"
argument_list|)
expr_stmt|;
name|generation
operator|=
literal|0
expr_stmt|;
operator|++
name|destructorCounter
expr_stmt|;
block|}
block|}
class|;
DECL|member|generationCounter
name|int
name|Data
operator|::
name|generationCounter
init|=
literal|0
decl_stmt|;
DECL|member|destructorCounter
name|int
name|Data
operator|::
name|destructorCounter
init|=
literal|0
decl_stmt|;
DECL|class|DerivedData
class|class
name|DerivedData
super|:
specifier|public
name|Data
block|{
public|public:
DECL|member|derivedDestructorCounter
specifier|static
name|int
name|derivedDestructorCounter
decl_stmt|;
DECL|member|moreData
name|int
name|moreData
decl_stmt|;
DECL|function|DerivedData
name|DerivedData
parameter_list|()
member_init_list|:
name|moreData
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~DerivedData
name|~
name|DerivedData
parameter_list|()
block|{
operator|++
name|derivedDestructorCounter
expr_stmt|;
block|}
block|}
class|;
DECL|member|derivedDestructorCounter
name|int
name|DerivedData
operator|::
name|derivedDestructorCounter
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QTEST_NO_RTTI
DECL|function|dynamicCastFailureNoLeak
name|void
name|dynamicCastFailureNoLeak
parameter_list|()
block|{
name|Data
operator|::
name|destructorCounter
operator|=
name|DerivedData
operator|::
name|derivedDestructorCounter
operator|=
literal|0
expr_stmt|;
comment|// see QTBUG-28924
name|QSharedPointer
argument_list|<
name|Data
argument_list|>
name|a
argument_list|(
operator|new
name|Data
argument_list|)
decl_stmt|;
name|QSharedPointer
argument_list|<
name|DerivedData
argument_list|>
name|b
init|=
name|a
operator|.
name|dynamicCast
argument_list|<
name|DerivedData
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|clear
argument_list|()
expr_stmt|;
name|b
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that the destructors were called
name|QCOMPARE
argument_list|(
name|Data
operator|::
name|destructorCounter
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|DerivedData
operator|::
name|derivedDestructorCounter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_namespace
begin_comment
comment|// namespace NonTracked
end_comment
end_unit
