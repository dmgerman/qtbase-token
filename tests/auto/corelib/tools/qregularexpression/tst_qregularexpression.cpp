begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Giuseppe D'Angelo<dangelog@gmail.com>. ** Copyright (C) 2013 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo<giuseppe.dangelo@kdab.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|"tst_qregularexpression.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|forceOptimize
end_ifndef
begin_define
DECL|macro|forceOptimize
define|#
directive|define
name|forceOptimize
value|false
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_struct
DECL|struct|Match
struct|struct
name|Match
block|{
DECL|function|Match
name|Match
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|hasMatch
operator|=
literal|false
expr_stmt|;
name|hasPartialMatch
operator|=
literal|false
expr_stmt|;
name|captured
operator|.
name|clear
argument_list|()
expr_stmt|;
name|namedCaptured
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|member|isValid
name|bool
name|isValid
decl_stmt|;
DECL|member|hasMatch
name|bool
name|hasMatch
decl_stmt|;
DECL|member|hasPartialMatch
name|bool
name|hasPartialMatch
decl_stmt|;
DECL|member|captured
name|QStringList
name|captured
decl_stmt|;
DECL|member|namedCaptured
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|namedCaptured
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Match
argument_list|)
end_macro
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QRegularExpressionMatch
modifier|&
name|rem
parameter_list|,
specifier|const
name|Match
modifier|&
name|m
parameter_list|)
block|{
if|if
condition|(
name|rem
operator|.
name|isValid
argument_list|()
operator|!=
name|m
operator|.
name|isValid
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|rem
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|(
name|rem
operator|.
name|hasMatch
argument_list|()
operator|!=
name|m
operator|.
name|hasMatch
operator|)
operator|||
operator|(
name|rem
operator|.
name|hasPartialMatch
argument_list|()
operator|!=
name|m
operator|.
name|hasPartialMatch
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|rem
operator|.
name|hasMatch
argument_list|()
operator|||
name|rem
operator|.
name|hasPartialMatch
argument_list|()
condition|)
block|{
if|if
condition|(
name|rem
operator|.
name|lastCapturedIndex
argument_list|()
operator|!=
operator|(
name|m
operator|.
name|captured
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|rem
operator|.
name|lastCapturedIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|remCaptured
init|=
name|rem
operator|.
name|captured
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|mCaptured
init|=
name|m
operator|.
name|captured
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|remCaptured
operator|!=
name|mCaptured
operator|||
name|remCaptured
operator|.
name|isNull
argument_list|()
operator|!=
name|mCaptured
operator|.
name|isNull
argument_list|()
operator|||
name|remCaptured
operator|.
name|isEmpty
argument_list|()
operator|!=
name|mCaptured
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|Q_FOREACH
argument_list|(
argument|const QString&name
argument_list|,
argument|m.namedCaptured.keys()
argument_list|)
block|{
name|QString
name|remCaptured
init|=
name|rem
operator|.
name|captured
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QString
name|mCaptured
init|=
name|m
operator|.
name|namedCaptured
operator|.
name|value
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|remCaptured
operator|!=
name|mCaptured
operator|||
name|remCaptured
operator|.
name|isNull
argument_list|()
operator|!=
name|mCaptured
operator|.
name|isNull
argument_list|()
operator|||
name|remCaptured
operator|.
name|isEmpty
argument_list|()
operator|!=
name|mCaptured
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Match
modifier|&
name|m
parameter_list|,
specifier|const
name|QRegularExpressionMatch
modifier|&
name|rem
parameter_list|)
block|{
return|return
name|operator
name|==
argument_list|(
name|rem
argument_list|,
name|m
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QRegularExpressionMatch
modifier|&
name|rem
parameter_list|,
specifier|const
name|Match
modifier|&
name|m
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|rem
argument_list|,
name|m
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|Match
modifier|&
name|m
parameter_list|,
specifier|const
name|QRegularExpressionMatch
modifier|&
name|rem
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|m
argument_list|,
name|rem
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QRegularExpressionMatchIterator
modifier|&
name|iterator
parameter_list|,
specifier|const
name|QList
argument_list|<
name|Match
argument_list|>
modifier|&
name|expectedMatchList
parameter_list|)
block|{
name|QRegularExpressionMatchIterator
name|i
init|=
name|iterator
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|Match
modifier|&
name|expectedMatch
decl|,
name|expectedMatchList
control|)
block|{
if|if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
name|QRegularExpressionMatch
name|match
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
operator|!=
name|expectedMatch
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|QList
argument_list|<
name|Match
argument_list|>
modifier|&
name|expectedMatchList
parameter_list|,
specifier|const
name|QRegularExpressionMatchIterator
modifier|&
name|iterator
parameter_list|)
block|{
return|return
name|operator
name|==
argument_list|(
name|iterator
argument_list|,
name|expectedMatchList
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QRegularExpressionMatchIterator
modifier|&
name|iterator
parameter_list|,
specifier|const
name|QList
argument_list|<
name|Match
argument_list|>
modifier|&
name|expectedMatchList
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|iterator
argument_list|,
name|expectedMatchList
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|QList
argument_list|<
name|Match
argument_list|>
modifier|&
name|expectedMatchList
parameter_list|,
specifier|const
name|QRegularExpressionMatchIterator
modifier|&
name|iterator
parameter_list|)
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|expectedMatchList
argument_list|,
name|iterator
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|consistencyCheck
name|void
name|consistencyCheck
parameter_list|(
specifier|const
name|QRegularExpressionMatch
modifier|&
name|match
parameter_list|)
block|{
if|if
condition|(
name|match
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|match
operator|.
name|regularExpression
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|match
operator|.
name|hasMatch
argument_list|()
operator|&&
name|match
operator|.
name|hasPartialMatch
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|.
name|hasMatch
argument_list|()
operator|||
name|match
operator|.
name|hasPartialMatch
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|match
operator|.
name|lastCapturedIndex
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|match
operator|.
name|hasPartialMatch
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|match
operator|.
name|lastCapturedIndex
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|match
operator|.
name|lastCapturedIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|int
name|startPos
init|=
name|match
operator|.
name|capturedStart
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|endPos
init|=
name|match
operator|.
name|capturedEnd
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|match
operator|.
name|capturedLength
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|captured
init|=
name|match
operator|.
name|captured
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QStringRef
name|capturedRef
init|=
name|match
operator|.
name|capturedRef
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|captured
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|startPos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|endPos
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|length
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|endPos
operator|>=
name|startPos
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|endPos
operator|-
name|startPos
operator|)
operator|==
name|length
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|captured
operator|==
name|capturedRef
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|startPos
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|endPos
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|endPos
operator|-
name|startPos
operator|)
operator|==
name|length
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|capturedRef
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|match
operator|.
name|hasMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|match
operator|.
name|hasPartialMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|capturedStart
argument_list|(
literal|0
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|capturedEnd
argument_list|(
literal|0
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|capturedLength
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|consistencyCheck
name|void
name|consistencyCheck
parameter_list|(
specifier|const
name|QRegularExpressionMatchIterator
modifier|&
name|iterator
parameter_list|)
block|{
name|QRegularExpressionMatchIterator
name|i
argument_list|(
name|iterator
argument_list|)
decl_stmt|;
comment|// make a copy, we modify it
if|if
condition|(
name|i
operator|.
name|isValid
argument_list|()
condition|)
block|{
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QRegularExpressionMatch
name|peeked
init|=
name|i
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|consistencyCheck
argument_list|(
name|peeked
argument_list|)
expr_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|match
operator|.
name|hasMatch
argument_list|()
operator|||
name|match
operator|.
name|hasPartialMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|match
operator|.
name|regularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|matchOptions
argument_list|()
argument_list|,
name|match
operator|.
name|matchOptions
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
operator|.
name|matchType
argument_list|()
argument_list|,
name|match
operator|.
name|matchType
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|isValid
argument_list|()
operator|==
name|match
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|hasMatch
argument_list|()
operator|==
name|match
operator|.
name|hasMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|hasPartialMatch
argument_list|()
operator|==
name|match
operator|.
name|hasPartialMatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|lastCapturedIndex
argument_list|()
operator|==
name|match
operator|.
name|lastCapturedIndex
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|peeked
operator|.
name|lastCapturedIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|captured
argument_list|(
name|i
argument_list|)
operator|==
name|match
operator|.
name|captured
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|capturedStart
argument_list|(
name|i
argument_list|)
operator|==
name|match
operator|.
name|capturedStart
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|peeked
operator|.
name|capturedEnd
argument_list|(
name|i
argument_list|)
operator|==
name|match
operator|.
name|capturedEnd
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionMatchIterator::peekNext() called on an iterator already at end"
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|peeked
init|=
name|i
operator|.
name|peekNext
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionMatchIterator::next() called on an iterator already at end"
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|consistencyCheck
argument_list|(
name|peeked
argument_list|)
expr_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|match
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|peeked
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Result
parameter_list|>
DECL|function|prepareResultForNoMatchType
specifier|static
name|void
name|prepareResultForNoMatchType
parameter_list|(
name|Result
modifier|*
name|r
parameter_list|,
specifier|const
name|Result
modifier|&
name|orig
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|orig
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepareResultForNoMatchType
specifier|static
name|void
name|prepareResultForNoMatchType
parameter_list|(
name|Match
modifier|*
name|m
parameter_list|,
specifier|const
name|Match
modifier|&
name|orig
parameter_list|)
block|{
name|m
operator|->
name|isValid
operator|=
name|orig
operator|.
name|isValid
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|QREMatch
parameter_list|,
name|typename
name|QREMatchFunc
parameter_list|,
name|typename
name|Result
parameter_list|>
DECL|function|testMatch
specifier|static
name|void
name|testMatch
parameter_list|(
specifier|const
name|QRegularExpression
modifier|&
name|regexp
parameter_list|,
name|QREMatchFunc
name|matchingMethod
parameter_list|,
specifier|const
name|QString
modifier|&
name|subject
parameter_list|,
name|int
name|offset
parameter_list|,
name|QRegularExpression
operator|::
name|MatchType
name|matchType
parameter_list|,
name|QRegularExpression
operator|::
name|MatchOptions
name|matchOptions
parameter_list|,
specifier|const
name|Result
modifier|&
name|result
parameter_list|)
block|{
if|if
condition|(
name|forceOptimize
condition|)
name|regexp
operator|.
name|optimize
argument_list|()
expr_stmt|;
block|{
specifier|const
name|QREMatch
name|m
init|=
call|(
name|regexp
operator|.*
name|matchingMethod
call|)
argument_list|(
name|subject
argument_list|,
name|offset
argument_list|,
name|matchType
argument_list|,
name|matchOptions
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|==
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|matchType
argument_list|()
argument_list|,
name|matchType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|matchOptions
argument_list|()
argument_list|,
name|matchOptions
argument_list|)
expr_stmt|;
block|}
block|{
comment|// ignore the expected results provided by the match object --
comment|// we'll never get any result when testing the NoMatch type.
comment|// Just check the validity of the match here.
name|Result
name|realMatch
decl_stmt|;
name|prepareResultForNoMatchType
argument_list|(
operator|&
name|realMatch
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|const
name|QREMatch
name|m
init|=
call|(
name|regexp
operator|.*
name|matchingMethod
call|)
argument_list|(
name|subject
argument_list|,
name|offset
argument_list|,
name|QRegularExpression
operator|::
name|NoMatch
argument_list|,
name|matchOptions
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|==
name|realMatch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|matchType
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoMatch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|matchOptions
argument_list|()
argument_list|,
name|matchOptions
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|provideRegularExpressions
name|void
name|tst_QRegularExpression
operator|::
name|provideRegularExpressions
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|>
argument_list|(
literal|"patternOptions"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptynull01"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptynull02"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
operator||
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
operator||
name|QRegularExpression
operator|::
name|MultilineOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptynull03"
argument_list|)
operator|<<
literal|""
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptynull04"
argument_list|)
operator|<<
literal|""
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
operator||
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
operator||
name|QRegularExpression
operator|::
name|MultilineOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp01"
argument_list|)
operator|<<
literal|"a pattern"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp02"
argument_list|)
operator|<<
literal|"^a (.*) more complicated(?<P>pattern)$"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp03"
argument_list|)
operator|<<
literal|"(?:a) pAttErN"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp04"
argument_list|)
operator|<<
literal|"a\nmultiline\npattern"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|MultilineOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp05"
argument_list|)
operator|<<
literal|"an extended # IGNOREME\npattern"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|ExtendedPatternSyntaxOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp06"
argument_list|)
operator|<<
literal|"a [sS]ingleline .* match"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"regexp07"
argument_list|)
operator|<<
literal|"multiple.*options"
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
operator||
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
operator||
name|QRegularExpression
operator|::
name|MultilineOption
operator||
name|QRegularExpression
operator|::
name|DontCaptureOption
operator||
name|QRegularExpression
operator|::
name|InvertedGreedinessOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode01"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$"
argument_list|)
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode02"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$"
argument_list|)
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
operator||
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
operator||
name|QRegularExpression
operator|::
name|InvertedGreedinessOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode03"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f"
argument_list|)
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode04"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f"
argument_list|)
operator|<<
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|(
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
operator||
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
operator||
name|QRegularExpression
operator|::
name|InvertedGreedinessOption
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultConstructors
name|void
name|tst_QRegularExpression
operator|::
name|defaultConstructors
parameter_list|()
block|{
name|QRegularExpression
name|re
decl_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pattern
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|patternOptions
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoPatternOption
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|match
decl_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|QRegularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|matchType
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoMatch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|matchOptions
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|hasMatch
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|hasPartialMatch
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|lastCapturedIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QRegularExpressionMatchIterator
name|iterator
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|QRegularExpression
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|regularExpression
argument_list|()
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|matchType
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoMatch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|matchOptions
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|hasNext
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gettersSetters_data
name|void
name|tst_QRegularExpression
operator|::
name|gettersSetters_data
parameter_list|()
block|{
name|provideRegularExpressions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|gettersSetters
name|void
name|tst_QRegularExpression
operator|::
name|gettersSetters
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|,
name|patternOptions
argument_list|)
expr_stmt|;
block|{
name|QRegularExpression
name|re
decl_stmt|;
name|re
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pattern
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|patternOptions
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoPatternOption
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegularExpression
name|re
decl_stmt|;
name|re
operator|.
name|setPatternOptions
argument_list|(
name|patternOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pattern
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|patternOptions
argument_list|()
argument_list|,
name|patternOptions
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pattern
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|patternOptions
argument_list|()
argument_list|,
name|QRegularExpression
operator|::
name|NoPatternOption
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pattern
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|patternOptions
argument_list|()
argument_list|,
name|patternOptions
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|escape_data
name|void
name|tst_QRegularExpression
operator|::
name|escape_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"escaped"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"escape01"
argument_list|)
operator|<<
literal|"a normal pattern"
operator|<<
literal|"a\\ normal\\ pattern"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"escape02"
argument_list|)
operator|<<
literal|"abcdefghijklmnopqrstuvzABCDEFGHIJKLMNOPQRSTUVZ1234567890_"
operator|<<
literal|"abcdefghijklmnopqrstuvzABCDEFGHIJKLMNOPQRSTUVZ1234567890_"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"escape03"
argument_list|)
operator|<<
literal|"^\\ba\\b.*(?<NAME>reg|exp)$"
operator|<<
literal|"\\^\\\\ba\\\\b\\.\\*\\(\\?\\<NAME\\>reg\\|exp\\)\\$"
expr_stmt|;
name|QString
name|nulString
argument_list|(
literal|"abcXabcXXabc"
argument_list|)
decl_stmt|;
name|nulString
index|[
literal|3
index|]
operator|=
name|nulString
index|[
literal|7
index|]
operator|=
name|nulString
index|[
literal|8
index|]
operator|=
name|QChar
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NUL"
argument_list|)
operator|<<
name|nulString
operator|<<
literal|"abc\\0abc\\0\\0abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode01"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"^s[ome] latin-1 \xc3\x80\xc3\x88\xc3\x8c\xc3\x92\xc3\x99 chars$"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\\^s\\[ome\\]\\ latin\\-1\\ \\\xc3\x80\\\xc3\x88\\\xc3\x8c\\\xc3\x92\\\xc3\x99\\ chars\\$"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode02"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unicode \xf0\x9d\x85\x9d \xf0\x9d\x85\x9e\xf0\x9d\x85\x9f"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Unicode\\ \\\xf0\x9d\x85\x9d\\ \\\xf0\x9d\x85\x9e\\\xf0\x9d\x85\x9f"
argument_list|)
expr_stmt|;
name|QString
name|unicodeAndNulString
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"^\xc3\x80\xc3\x88\xc3\x8cN\xc3\x92NN\xc3\x99 chars$"
argument_list|)
decl_stmt|;
name|unicodeAndNulString
index|[
literal|4
index|]
operator|=
name|unicodeAndNulString
index|[
literal|6
index|]
operator|=
name|unicodeAndNulString
index|[
literal|7
index|]
operator|=
name|QChar
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode03"
argument_list|)
operator|<<
name|unicodeAndNulString
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\\^\\\xc3\x80\\\xc3\x88\\\xc3\x8c\\0\\\xc3\x92\\0\\0\\\xc3\x99\\ chars\\$"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|escape
name|void
name|tst_QRegularExpression
operator|::
name|escape
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QRegularExpression
operator|::
name|escape
argument_list|(
name|string
argument_list|)
argument_list|,
name|escaped
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|escaped
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validity_data
name|void
name|tst_QRegularExpression
operator|::
name|validity_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"validity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid01"
argument_list|)
operator|<<
literal|"a pattern"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid02"
argument_list|)
operator|<<
literal|"(a|pattern)"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid03"
argument_list|)
operator|<<
literal|"a [pP]attern"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid04"
argument_list|)
operator|<<
literal|"^(?<article>a).*(?<noun>pattern)$"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid05"
argument_list|)
operator|<<
literal|"a \\P{Ll}attern"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid01"
argument_list|)
operator|<<
literal|"a pattern\\"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid02"
argument_list|)
operator|<<
literal|"(a|pattern"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid03"
argument_list|)
operator|<<
literal|"a \\P{BLAH}attern"
operator|<<
literal|false
expr_stmt|;
name|QString
name|pattern
decl_stmt|;
comment|// 0xD800 (high surrogate) not followed by a low surrogate
name|pattern
operator|=
literal|"abcdef"
expr_stmt|;
name|pattern
index|[
literal|3
index|]
operator|=
name|QChar
argument_list|(
literal|0x00
argument_list|,
literal|0xD8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidUnicode01"
argument_list|)
operator|<<
name|pattern
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validity
name|void
name|tst_QRegularExpression
operator|::
name|validity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|validity
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|,
name|validity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validity
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionPrivate::doMatch(): called on an invalid QRegularExpression object"
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|re
operator|.
name|match
argument_list|(
literal|"a pattern"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|isValid
argument_list|()
argument_list|,
name|validity
argument_list|)
expr_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|validity
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionPrivate::doMatch(): called on an invalid QRegularExpression object"
argument_list|)
expr_stmt|;
name|QRegularExpressionMatchIterator
name|iterator
init|=
name|re
operator|.
name|globalMatch
argument_list|(
literal|"a pattern"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|isValid
argument_list|()
argument_list|,
name|validity
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|patternOptions_data
name|void
name|tst_QRegularExpression
operator|::
name|patternOptions_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Match
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
comment|// none of these would successfully match if the respective
comment|// pattern option is not set
name|Match
name|m
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"AbC\xc3\xa0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/i"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\xc3\x80"
argument_list|)
argument_list|,
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"AbC\xc3\xa0"
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abc123\n678def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/s"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\Aabc.*def\\z"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
literal|"abc123\n678def"
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"jumped over"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/m"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^\\w+ \\w+$"
argument_list|,
name|QRegularExpression
operator|::
name|MultilineOption
argument_list|)
operator|<<
literal|"the quick fox\njumped over\nthe lazy\ndog"
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abc 123456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/x"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\w+  # a word\n"
literal|"\\ # a space\n"
literal|"\\w+ # another word"
argument_list|,
name|QRegularExpression
operator|::
name|ExtendedPatternSyntaxOption
argument_list|)
operator|<<
literal|"abc 123456 def"
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"the quick fox"
operator|<<
literal|"the"
operator|<<
literal|"quick fox"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/U"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(.+) (.+?)"
argument_list|,
name|QRegularExpression
operator|::
name|InvertedGreedinessOption
argument_list|)
operator|<<
literal|"the quick fox"
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"the quick fox"
operator|<<
literal|"quick"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"named"
index|]
operator|=
literal|"quick"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no cap"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+) (?<named>\\w+) (\\w+)"
argument_list|,
name|QRegularExpression
operator|::
name|DontCaptureOption
argument_list|)
operator|<<
literal|"the quick fox"
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\xc3\x80\xc3\xa0 12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\xc3\x80\xc3\xa0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode properties"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+) (\\d+)"
argument_list|,
name|QRegularExpression
operator|::
name|UseUnicodePropertiesOption
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"abc\xc3\x80\xc3\xa0 12\xdb\xb1\xdb\xb2\xf0\x9d\x9f\x98"
argument_list|)
operator|<<
name|m
expr_stmt|;
block|}
end_function
begin_function
DECL|function|patternOptions
name|void
name|tst_QRegularExpression
operator|::
name|patternOptions
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Match
argument_list|,
name|match
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|regexp
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QRegularExpressionMatch
name|m
init|=
name|regexp
operator|.
name|match
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|==
name|match
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalMatch_data
name|void
name|tst_QRegularExpression
operator|::
name|normalMatch_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|>
argument_list|(
literal|"matchOptions"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Match
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|Match
name|m
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"string"
operator|<<
literal|"string"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\bstring\\b)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"a string"
operator|<<
literal|"a"
operator|<<
literal|"string"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+) (\\w+)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"a string"
operator|<<
literal|"a"
operator|<<
literal|"string"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"article"
index|]
operator|=
literal|"a"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"noun"
index|]
operator|=
literal|"string"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(?<article>\\w+) (?<noun>\\w+)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" string"
operator|<<
name|QString
argument_list|()
operator|<<
literal|"string"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+)? (\\w+)"
argument_list|)
operator|<<
literal|" string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" string"
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|"string"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match05"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w*) (\\w+)"
argument_list|)
operator|<<
literal|" string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"c123def"
operator|<<
literal|"c12"
operator|<<
literal|"3"
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match06"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w*)(\\d+)(\\w*)"
argument_list|)
operator|<<
literal|"abc123def"
operator|<<
literal|2
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match07"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\w*"
argument_list|)
operator|<<
literal|"abc123def"
operator|<<
literal|9
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
name|QString
argument_list|(
literal|"a string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match08"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(.*)(.*)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
name|QString
argument_list|(
literal|"a string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match09"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(.*?)(.*)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// non existing names for capturing groups
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"a string"
operator|<<
literal|"a"
operator|<<
literal|"string"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"article"
index|]
operator|=
literal|"a"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"noun"
index|]
operator|=
literal|"string"
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"nonexisting1"
index|]
operator|=
name|QString
argument_list|()
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"nonexisting2"
index|]
operator|=
name|QString
argument_list|()
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"nonexisting3"
index|]
operator|=
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match10"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(?<article>\\w+) (?<noun>\\w+)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|m
operator|.
name|namedCaptured
index|[
literal|"digits"
index|]
operator|=
literal|""
expr_stmt|;
comment|// empty VS null
name|m
operator|.
name|namedCaptured
index|[
literal|"nonexisting"
index|]
operator|=
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match11"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(?<digits>\\d*)"
argument_list|)
operator|<<
literal|"abcde"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// ***
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\d+"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+) (\\w+)"
argument_list|)
operator|<<
literal|"a string"
operator|<<
literal|1
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\w+"
argument_list|)
operator|<<
literal|"abc123def"
operator|<<
literal|9
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// ***
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"anchoredmatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\d+"
argument_list|)
operator|<<
literal|"abc123def"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|AnchoredMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// ***
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"678"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeoffset01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\d+"
argument_list|)
operator|<<
literal|"abc123def678ghi"
operator|<<
operator|-
literal|6
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"678"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeoffset02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\d+"
argument_list|)
operator|<<
literal|"abc123def678ghi"
operator|<<
operator|-
literal|8
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"678ghi"
operator|<<
literal|"678"
operator|<<
literal|"ghi"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeoffset03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\d+)(\\w+)"
argument_list|)
operator|<<
literal|"abc123def678ghi"
operator|<<
operator|-
literal|8
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeoffset04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\d+"
argument_list|)
operator|<<
literal|"abc123def678ghi"
operator|<<
operator|-
literal|3
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"678"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"negativeoffset05"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^\\d+"
argument_list|,
name|QRegularExpression
operator|::
name|MultilineOption
argument_list|)
operator|<<
literal|"a\nbc123\ndef\n678gh\ni"
operator|<<
operator|-
literal|10
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalMatch
name|void
name|tst_QRegularExpression
operator|::
name|normalMatch
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|,
name|matchOptions
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Match
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|testMatch
argument_list|<
name|QRegularExpressionMatch
argument_list|>
argument_list|(
name|regexp
argument_list|,
operator|&
name|QRegularExpression
operator|::
name|match
argument_list|,
name|subject
argument_list|,
name|offset
argument_list|,
name|QRegularExpression
operator|::
name|NormalMatch
argument_list|,
name|matchOptions
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|partialMatch_data
name|void
name|tst_QRegularExpression
operator|::
name|partialMatch_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|MatchType
argument_list|>
argument_list|(
literal|"matchType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|>
argument_list|(
literal|"matchOptions"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Match
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|Match
name|m
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bstring\\b"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\bstring\\b)"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"8 Dec 19"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^(\\d{1,2}) (\\w{3}) (\\d{4})$"
argument_list|)
operator|<<
literal|"8 Dec 19"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"8 Dec 1985"
operator|<<
literal|"8"
operator|<<
literal|"Dec"
operator|<<
literal|"1985"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch05"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^(\\d{1,2}) (\\w{3}) (\\d{4})$"
argument_list|)
operator|<<
literal|"8 Dec 1985"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch06"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|def"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abcdef"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch07"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"softmatch08"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|1
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// ***
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bstring\\b"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|" str"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\bstring\\b)"
argument_list|)
operator|<<
literal|"a str"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"8 Dec 19"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^(\\d{1,2}) (\\w{3}) (\\d{4})$"
argument_list|)
operator|<<
literal|"8 Dec 19"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"8 Dec 1985"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch05"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"^(\\d{1,2}) (\\w{3}) (\\d{4})$"
argument_list|)
operator|<<
literal|"8 Dec 1985"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abcdef"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch06"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|def"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abcdef"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch07"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch08"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"abcdef"
operator|<<
literal|1
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"ab"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch09"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc|ab"
argument_list|)
operator|<<
literal|"ab"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch10"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc(def)?"
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasPartialMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hardmatch11"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(abc)*"
argument_list|)
operator|<<
literal|"abc"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
comment|// ***
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"123456"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"123456"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"ab123"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nomatch04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"abc\\w+X|defY"
argument_list|)
operator|<<
literal|"ab123"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|m
expr_stmt|;
block|}
end_function
begin_function
DECL|function|partialMatch
name|void
name|tst_QRegularExpression
operator|::
name|partialMatch
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|MatchType
argument_list|,
name|matchType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|,
name|matchOptions
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Match
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|testMatch
argument_list|<
name|QRegularExpressionMatch
argument_list|>
argument_list|(
name|regexp
argument_list|,
operator|&
name|QRegularExpression
operator|::
name|match
argument_list|,
name|subject
argument_list|,
name|offset
argument_list|,
name|matchType
argument_list|,
name|matchOptions
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|globalMatch_data
name|void
name|tst_QRegularExpression
operator|::
name|globalMatch_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"regexp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|MatchType
argument_list|>
argument_list|(
literal|"matchType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|>
argument_list|(
literal|"matchOptions"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|Match
argument_list|>
argument_list|>
argument_list|(
literal|"matchList"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Match
argument_list|>
name|matchList
decl_stmt|;
name|Match
name|m
decl_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\w+"
argument_list|)
operator|<<
literal|"the quick fox"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
operator|<<
literal|"t"
operator|<<
literal|"he"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
operator|<<
literal|"q"
operator|<<
literal|"uick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
operator|<<
literal|"f"
operator|<<
literal|"ox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(\\w+?)(\\w+)"
argument_list|)
operator|<<
literal|"the quick fox"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"ACA"
literal|"GTG"
literal|"CGA"
literal|"AAA"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"AAA"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"AAG"
literal|"GAA"
literal|"AAG"
literal|"AAA"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"AAA"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\G(?:\\w\\w\\w)*?AAA"
argument_list|)
operator|<<
literal|"ACA"
literal|"GTG"
literal|"CGA"
literal|"AAA"
literal|"AAA"
literal|"AAG"
literal|"GAA"
literal|"AAG"
literal|"AAA"
literal|"AAA"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(?:\\w\\w\\w)*?AAA"
argument_list|)
operator|<<
literal|"ACA"
literal|"GTG"
literal|"CGA"
literal|"AAA"
literal|"AAA"
literal|"AAG"
literal|"GAA"
literal|"AAG"
literal|"AAA"
literal|"AAA"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|AnchoredMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"c"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"c"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"aabb"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures01"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"a*b*|c"
argument_list|)
operator|<<
literal|"ccaabbd"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures02"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|".*"
argument_list|)
operator|<<
literal|"the\nquick\nfox"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures03"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|".*"
argument_list|)
operator|<<
literal|"the\nquick\nfox\n"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures04"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(*CRLF).*"
argument_list|)
operator|<<
literal|"the\r\nquick\r\nfox"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures05"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(*CRLF).*"
argument_list|)
operator|<<
literal|"the\r\nquick\r\nfox\r\n"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"the"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"quick"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"fox"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"jumped"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures06"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"(*ANYCRLF).*"
argument_list|)
operator|<<
literal|"the\r\nquick\nfox\rjumped"
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"ABC"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"DEF"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|"GHI"
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures07"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"[\\x{0000}-\\x{FFFF}]*"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ABC"
literal|"\xf0\x9d\x85\x9d"
literal|"DEF"
literal|"\xf0\x9d\x85\x9e"
literal|"GHI"
argument_list|)
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
name|matchList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m
operator|.
name|isValid
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|hasMatch
operator|=
literal|true
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ABC"
literal|"\xc3\x80"
argument_list|)
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc3\x80"
literal|"DEF"
literal|"\xc3\x80"
argument_list|)
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|m
operator|.
name|captured
operator|=
name|QStringList
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|matchList
operator|<<
name|m
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"globalmatch_emptycaptures08"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"[\\x{0000}-\\x{FFFF}]*"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"ABC"
literal|"\xc3\x80"
literal|"\xf0\x9d\x85\x9d"
literal|"\xc3\x80"
literal|"DEF"
literal|"\xc3\x80"
argument_list|)
operator|<<
literal|0
operator|<<
name|QRegularExpression
operator|::
name|NormalMatch
operator|<<
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|(
name|QRegularExpression
operator|::
name|NoMatchOption
argument_list|)
operator|<<
name|matchList
expr_stmt|;
block|}
end_function
begin_function
DECL|function|globalMatch
name|void
name|tst_QRegularExpression
operator|::
name|globalMatch
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|regexp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|MatchType
argument_list|,
name|matchType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|MatchOptions
argument_list|,
name|matchOptions
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|Match
argument_list|>
argument_list|,
name|matchList
argument_list|)
expr_stmt|;
name|testMatch
argument_list|<
name|QRegularExpressionMatchIterator
argument_list|>
argument_list|(
name|regexp
argument_list|,
operator|&
name|QRegularExpression
operator|::
name|globalMatch
argument_list|,
name|subject
argument_list|,
name|offset
argument_list|,
name|matchType
argument_list|,
name|matchOptions
argument_list|,
name|matchList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serialize_data
name|void
name|tst_QRegularExpression
operator|::
name|serialize_data
parameter_list|()
block|{
name|provideRegularExpressions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serialize
name|void
name|tst_QRegularExpression
operator|::
name|serialize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|,
name|patternOptions
argument_list|)
expr_stmt|;
name|QRegularExpression
name|outRe
argument_list|(
name|pattern
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|outRe
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|<<
name|outRe
expr_stmt|;
block|}
name|QRegularExpression
name|inRe
decl_stmt|;
block|{
name|QDataStream
name|in
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|>>
name|inRe
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|inRe
argument_list|,
name|outRe
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verifyEquality
specifier|static
name|void
name|verifyEquality
parameter_list|(
specifier|const
name|QRegularExpression
modifier|&
name|re1
parameter_list|,
specifier|const
name|QRegularExpression
modifier|&
name|re2
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|re1
operator|==
name|re2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re2
operator|==
name|re1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re1
operator|!=
name|re2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re2
operator|!=
name|re1
operator|)
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re3
argument_list|(
name|re1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|re1
operator|==
name|re3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re3
operator|==
name|re1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re1
operator|!=
name|re3
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re3
operator|!=
name|re1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re2
operator|==
name|re3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re3
operator|==
name|re2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re2
operator|!=
name|re3
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re3
operator|!=
name|re2
operator|)
argument_list|)
expr_stmt|;
name|re3
operator|=
name|re2
expr_stmt|;
name|QVERIFY
argument_list|(
name|re1
operator|==
name|re3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re3
operator|==
name|re1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re1
operator|!=
name|re3
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re3
operator|!=
name|re1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re2
operator|==
name|re3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|re3
operator|==
name|re2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re2
operator|!=
name|re3
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|re3
operator|!=
name|re2
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatoreq_data
name|void
name|tst_QRegularExpression
operator|::
name|operatoreq_data
parameter_list|()
block|{
name|provideRegularExpressions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatoreq
name|void
name|tst_QRegularExpression
operator|::
name|operatoreq
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
operator|::
name|PatternOptions
argument_list|,
name|patternOptions
argument_list|)
expr_stmt|;
block|{
name|QRegularExpression
name|re1
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|QRegularExpression
name|re2
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re1
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re2
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|verifyEquality
argument_list|(
name|re1
argument_list|,
name|re2
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegularExpression
name|re1
argument_list|(
name|QString
argument_list|()
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
name|QRegularExpression
name|re2
argument_list|(
name|QString
argument_list|()
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re1
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re2
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|verifyEquality
argument_list|(
name|re1
argument_list|,
name|re2
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegularExpression
name|re1
argument_list|(
name|pattern
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
name|QRegularExpression
name|re2
argument_list|(
name|pattern
argument_list|,
name|patternOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re1
operator|.
name|optimize
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re2
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|verifyEquality
argument_list|(
name|re1
argument_list|,
name|re2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|captureCount_data
name|void
name|tst_QRegularExpression
operator|::
name|captureCount_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"captureCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount01"
argument_list|)
operator|<<
literal|"a pattern"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount02"
argument_list|)
operator|<<
literal|"a.*pattern"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount03"
argument_list|)
operator|<<
literal|"(a) pattern"
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount04"
argument_list|)
operator|<<
literal|"(a).*(pattern)"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount05"
argument_list|)
operator|<<
literal|"^(?<article>\\w+) (?<noun>\\w+)$"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount06"
argument_list|)
operator|<<
literal|"^(\\w+) (?<word>\\w+) (.)$"
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount07"
argument_list|)
operator|<<
literal|"(?:non capturing) (capturing) (?<n>named) (?:non (capturing))"
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount08"
argument_list|)
operator|<<
literal|"(?|(a)(b)|(c)(d))"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount09"
argument_list|)
operator|<<
literal|"(?|(a)(b)|(c)(d)(?:e))"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount10"
argument_list|)
operator|<<
literal|"(?|(a)(b)|(c)(d)(e)) (f)(g)"
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount11"
argument_list|)
operator|<<
literal|"(?|(a)(b)|(c)(d)(e)) (f)(?:g)"
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount_invalid01"
argument_list|)
operator|<<
literal|"(.*"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount_invalid02"
argument_list|)
operator|<<
literal|"\\"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureCount_invalid03"
argument_list|)
operator|<<
literal|"(?<noun)"
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|captureCount
name|void
name|tst_QRegularExpression
operator|::
name|captureCount
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QTEST
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|"captureCount"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|re
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// the comma in the template breaks QFETCH...
end_comment
begin_typedef
DECL|typedef|StringToIntMap
typedef|typedef
name|QMultiHash
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|StringToIntMap
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|StringToIntMap
argument_list|)
end_macro
begin_function
DECL|function|captureNames_data
name|void
name|tst_QRegularExpression
operator|::
name|captureNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|StringToIntMap
argument_list|>
argument_list|(
literal|"namedCapturesIndexMap"
argument_list|)
expr_stmt|;
name|StringToIntMap
name|map
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames01"
argument_list|)
operator|<<
literal|"a pattern"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames02"
argument_list|)
operator|<<
literal|"a.*pattern"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames03"
argument_list|)
operator|<<
literal|"(a) pattern"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames04"
argument_list|)
operator|<<
literal|"(a).*(pattern)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"named"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames05"
argument_list|)
operator|<<
literal|"a.*(?<named>pattern)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"named"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames06"
argument_list|)
operator|<<
literal|"(a).*(?<named>pattern)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"name1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"name2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames07"
argument_list|)
operator|<<
literal|"(?<name1>a).*(?<name2>pattern)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"name1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"name2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames08"
argument_list|)
operator|<<
literal|"(?<name2>a).*(?<name1>pattern)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"date"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"month"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"year"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames09"
argument_list|)
operator|<<
literal|"^(?<date>\\d\\d)/(?<month>\\d\\d)/(?<year>\\d\\d\\d\\d)$"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"date"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"month"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"year"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames10"
argument_list|)
operator|<<
literal|"^(?<month>\\d\\d)/(?<date>\\d\\d)/(?<year>\\d\\d\\d\\d)$"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|.
name|replace
argument_list|(
literal|"noun"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames11"
argument_list|)
operator|<<
literal|"(a)(?|(?<noun>b)|(?<noun>c))(d)"
operator|<<
name|map
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames_invalid01"
argument_list|)
operator|<<
literal|"(.*"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames_invalid02"
argument_list|)
operator|<<
literal|"\\"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames_invalid03"
argument_list|)
operator|<<
literal|"(?<noun)"
operator|<<
name|map
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"captureNames_invalid04"
argument_list|)
operator|<<
literal|"(?|(?<noun1>a)|(?<noun2>b))"
operator|<<
name|map
expr_stmt|;
block|}
end_function
begin_function
DECL|function|captureNames
name|void
name|tst_QRegularExpression
operator|::
name|captureNames
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|StringToIntMap
argument_list|,
name|namedCapturesIndexMap
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QStringList
name|namedCaptureGroups
init|=
name|re
operator|.
name|namedCaptureGroups
argument_list|()
decl_stmt|;
name|int
name|namedCaptureGroupsCount
init|=
name|namedCaptureGroups
operator|.
name|size
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|namedCaptureGroupsCount
argument_list|,
name|re
operator|.
name|captureCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namedCaptureGroupsCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|name
init|=
name|namedCaptureGroups
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|namedCapturesIndexMap
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|namedCapturesIndexMap
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|namedCapturesIndexMap
operator|.
name|value
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|pcreJitStackUsage_data
name|void
name|tst_QRegularExpression
operator|::
name|pcreJitStackUsage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
comment|// these patterns cause enough backtrack (or even infinite recursion)
comment|// in the regexp engine, so that JIT requests more memory.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jitstack01"
argument_list|)
operator|<<
literal|"(?(R)a*(?1)|((?R))b)"
operator|<<
literal|"aaaabcde"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jitstack02"
argument_list|)
operator|<<
literal|"(?(R)a*(?1)|((?R))b)"
operator|<<
literal|"aaaaaaabcde"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pcreJitStackUsage
name|void
name|tst_QRegularExpression
operator|::
name|pcreJitStackUsage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|re
operator|.
name|match
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|QRegularExpressionMatchIterator
name|iterator
init|=
name|re
operator|.
name|globalMatch
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|match
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|regularExpressionMatch_data
name|void
name|tst_QRegularExpression
operator|::
name|regularExpressionMatch_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity01"
argument_list|)
operator|<<
literal|"(?<digits>\\d+)"
operator|<<
literal|"1234 abcd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity02"
argument_list|)
operator|<<
literal|"(?<digits>\\d+) (?<alpha>\\w+)"
operator|<<
literal|"1234 abcd"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|regularExpressionMatch
name|void
name|tst_QRegularExpression
operator|::
name|regularExpressionMatch
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|re
operator|.
name|match
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|consistencyCheck
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|"non-existing"
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionMatch::captured: empty capturing group name passed"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|captured
argument_list|(
literal|""
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QRegularExpressionMatch::captured: empty capturing group name passed"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|match
operator|.
name|captured
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|JOptionUsage_data
name|void
name|tst_QRegularExpression
operator|::
name|JOptionUsage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isValid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"JOptionUsed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-notused-01"
argument_list|)
operator|<<
literal|"a.*b"
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-notused-02"
argument_list|)
operator|<<
literal|"^a(b)(c)$"
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-notused-03"
argument_list|)
operator|<<
literal|"a(b)(?<c>d)|e"
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-notused-04"
argument_list|)
operator|<<
literal|"(?<a>.)(?<a>.)"
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-used-01"
argument_list|)
operator|<<
literal|"(?J)a.*b"
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-used-02"
argument_list|)
operator|<<
literal|"(?-J)a.*b"
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-used-03"
argument_list|)
operator|<<
literal|"(?J)(?<a>.)(?<a>.)"
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"joption-used-04"
argument_list|)
operator|<<
literal|"(?-J)(?<a>.)(?<a>.)"
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|JOptionUsage
name|void
name|tst_QRegularExpression
operator|::
name|JOptionUsage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isValid
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|JOptionUsed
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|warningMessage
init|=
name|QStringLiteral
argument_list|(
literal|"QRegularExpressionPrivate::getPatternInfo(): the pattern '%1'\n    is using the (?J) option; duplicate capturing group names are not supported by Qt"
argument_list|)
decl_stmt|;
name|QRegularExpression
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|isValid
operator|&&
name|JOptionUsed
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|qPrintable
argument_list|(
name|warningMessage
operator|.
name|arg
argument_list|(
name|pattern
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|forceOptimize
condition|)
name|re
operator|.
name|optimize
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|,
name|isValid
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
