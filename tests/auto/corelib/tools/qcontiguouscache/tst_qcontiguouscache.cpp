begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<QCache>
end_include
begin_include
include|#
directive|include
file|<QContiguousCache>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_class
DECL|class|tst_QContiguousCache
class|class
name|tst_QContiguousCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|empty
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|append_data
parameter_list|()
function_decl|;
name|void
name|append
parameter_list|()
function_decl|;
name|void
name|prepend_data
parameter_list|()
function_decl|;
name|void
name|prepend
parameter_list|()
function_decl|;
name|void
name|complexType
parameter_list|()
function_decl|;
name|void
name|operatorAt
parameter_list|()
function_decl|;
name|void
name|setCapacity
parameter_list|()
function_decl|;
name|void
name|zeroCapacity
parameter_list|()
function_decl|;
name|void
name|modifyZeroCapacityCache
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QContiguousCache
argument_list|)
end_macro
begin_function
DECL|function|empty
name|void
name|tst_QContiguousCache
operator|::
name|empty
parameter_list|()
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|c
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|capacity
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|capacity
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|prepend
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|capacity
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QContiguousCache
operator|::
name|swap
parameter_list|()
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|c1
argument_list|(
literal|10
argument_list|)
decl_stmt|,
name|c2
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|c1
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|swap
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|capacity
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|capacity
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append_data
name|void
name|tst_QContiguousCache
operator|::
name|append_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cacheSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"invalidIndexes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0+30[10]"
argument_list|)
operator|<<
literal|0
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"300+30[10]"
argument_list|)
operator|<<
literal|300
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MAX-10+30[10]"
argument_list|)
operator|<<
name|INT_MAX
operator|-
literal|10
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QContiguousCache
operator|::
name|append
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|invalidIndexes
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|c
argument_list|(
name|cacheSize
argument_list|)
decl_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
condition|)
name|c
operator|.
name|append
argument_list|(
name|i
operator|++
argument_list|)
expr_stmt|;
else|else
name|c
operator|.
name|insert
argument_list|(
name|start
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|count
condition|)
block|{
name|c
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|cacheSize
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
name|qMax
argument_list|(
literal|1
argument_list|,
name|i
operator|-
name|cacheSize
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|i
argument_list|,
name|cacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|isFull
argument_list|()
argument_list|,
name|i
operator|>=
name|cacheSize
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|c
operator|.
name|areIndexesValid
argument_list|()
argument_list|,
operator|!
name|invalidIndexes
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalidIndexes
condition|)
name|c
operator|.
name|normalizeIndexes
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|areIndexesValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// test taking from end until empty.
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|cacheSize
condition|;
name|j
operator|++
operator|,
name|i
operator|--
control|)
block|{
name|QCOMPARE
argument_list|(
name|c
operator|.
name|takeLast
argument_list|()
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
name|cacheSize
operator|-
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isFull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|j
operator|==
name|cacheSize
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|prepend_data
name|void
name|tst_QContiguousCache
operator|::
name|prepend_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cacheSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"invalidIndexes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30-30[10]"
argument_list|)
operator|<<
literal|30
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"300-30[10]"
argument_list|)
operator|<<
literal|300
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10-30[10]"
argument_list|)
operator|<<
literal|10
operator|<<
literal|30
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend
name|void
name|tst_QContiguousCache
operator|::
name|prepend
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|invalidIndexes
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|c
argument_list|(
name|cacheSize
argument_list|)
decl_stmt|;
name|i
operator|=
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|start
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|<
name|count
condition|)
block|{
name|c
operator|.
name|prepend
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|cacheSize
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|last
argument_list|()
argument_list|,
name|qMax
argument_list|(
literal|1
argument_list|,
name|i
operator|-
name|cacheSize
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|first
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
name|qMin
argument_list|(
name|i
argument_list|,
name|cacheSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|isFull
argument_list|()
argument_list|,
name|i
operator|>=
name|cacheSize
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|c
operator|.
name|areIndexesValid
argument_list|()
argument_list|,
operator|!
name|invalidIndexes
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalidIndexes
condition|)
name|c
operator|.
name|normalizeIndexes
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|.
name|areIndexesValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// test taking from start until empty.
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|cacheSize
condition|;
name|j
operator|++
operator|,
name|i
operator|--
control|)
block|{
name|QCOMPARE
argument_list|(
name|c
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|count
argument_list|()
argument_list|,
name|cacheSize
operator|-
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|available
argument_list|()
argument_list|,
name|j
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isFull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|j
operator|==
name|cacheSize
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|RefCountingClassData
struct|struct
name|RefCountingClassData
block|{
DECL|member|ref
name|QBasicAtomicInt
name|ref
decl_stmt|;
DECL|member|shared_null
specifier|static
name|RefCountingClassData
name|shared_null
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|shared_null
name|RefCountingClassData
name|RefCountingClassData
operator|::
name|shared_null
init|=
block|{
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|RefCountingClass
class|class
name|RefCountingClass
block|{
public|public:
DECL|function|RefCountingClass
name|RefCountingClass
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|&
name|RefCountingClassData
operator|::
name|shared_null
argument_list|)
block|{
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
DECL|function|RefCountingClass
name|RefCountingClass
parameter_list|(
specifier|const
name|RefCountingClass
modifier|&
name|other
parameter_list|)
block|{
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
block|}
DECL|function|~RefCountingClass
name|~
name|RefCountingClass
parameter_list|()
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
block|}
DECL|function|operator =
name|RefCountingClass
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|RefCountingClass
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|d
operator|->
name|ref
operator|.
name|deref
argument_list|()
condition|)
operator|delete
name|d
expr_stmt|;
name|d
operator|=
name|other
operator|.
name|d
expr_stmt|;
name|d
operator|->
name|ref
operator|.
name|ref
parameter_list|()
constructor_decl|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|refCount
name|int
name|refCount
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|ref
operator|.
name|load
argument_list|()
return|;
block|}
private|private:
DECL|member|d
name|RefCountingClassData
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|complexType
name|void
name|tst_QContiguousCache
operator|::
name|complexType
parameter_list|()
block|{
name|RefCountingClass
name|original
decl_stmt|;
name|QContiguousCache
argument_list|<
name|RefCountingClass
argument_list|>
name|contiguousCache
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|contiguousCache
operator|.
name|append
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// shared null, 'original'.
name|contiguousCache
operator|.
name|append
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|contiguousCache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// shared null, 'original', + 10 in contiguousCache.
name|contiguousCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|contiguousCache
operator|.
name|append
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// shared null, 'original', + 10 in contiguousCache.
name|contiguousCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|contiguousCache
operator|.
name|prepend
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// shared null, 'original', + 10 in contiguousCache.
name|contiguousCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|contiguousCache
operator|.
name|append
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|takeLast
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatorAt
name|void
name|tst_QContiguousCache
operator|::
name|operatorAt
parameter_list|()
block|{
name|RefCountingClass
name|original
decl_stmt|;
name|QContiguousCache
argument_list|<
name|RefCountingClass
argument_list|>
name|contiguousCache
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|25
init|;
name|i
operator|<
literal|35
condition|;
operator|++
name|i
control|)
name|contiguousCache
index|[
name|i
index|]
operator|=
name|original
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// shared null, orig, items in cache
comment|// verify const access does not copy items.
specifier|const
name|QContiguousCache
argument_list|<
name|RefCountingClass
argument_list|>
name|copy
argument_list|(
name|contiguousCache
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|25
init|;
name|i
operator|<
literal|35
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|copy
index|[
name|i
index|]
operator|.
name|refCount
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// verify modifying the original increments ref count (e.g. does a detach)
name|contiguousCache
index|[
literal|25
index|]
operator|=
name|original
expr_stmt|;
name|QCOMPARE
argument_list|(
name|original
operator|.
name|refCount
argument_list|()
argument_list|,
literal|22
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCapacity
name|void
name|tst_QContiguousCache
operator|::
name|setCapacity
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|280
init|;
name|i
operator|<
literal|310
condition|;
operator|++
name|i
control|)
name|contiguousCache
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|count
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|280
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|309
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
init|;
name|i
operator|<=
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|contiguousCache
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|contiguousCache
operator|.
name|setCapacity
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|count
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|280
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|309
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
init|;
name|i
operator|<=
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|contiguousCache
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|contiguousCache
operator|.
name|setCapacity
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|count
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
argument_list|,
literal|290
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
argument_list|,
literal|309
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|contiguousCache
operator|.
name|firstIndex
argument_list|()
init|;
name|i
operator|<=
name|contiguousCache
operator|.
name|lastIndex
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|contiguousCache
operator|.
name|containsIndex
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|zeroCapacity
name|void
name|tst_QContiguousCache
operator|::
name|zeroCapacity
parameter_list|()
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|setCapacity
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|contiguousCache
operator|.
name|setCapacity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|contiguousCache
operator|.
name|capacity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modifyZeroCapacityCache
name|void
name|tst_QContiguousCache
operator|::
name|modifyZeroCapacityCache
parameter_list|()
block|{
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
decl_stmt|;
name|contiguousCache
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
decl_stmt|;
name|contiguousCache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
decl_stmt|;
name|contiguousCache
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
block|{
name|QContiguousCache
argument_list|<
name|int
argument_list|>
name|contiguousCache
decl_stmt|;
name|contiguousCache
operator|.
name|prepend
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qcontiguouscache.moc"
end_include
end_unit
