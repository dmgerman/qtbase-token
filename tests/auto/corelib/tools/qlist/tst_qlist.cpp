begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_comment
comment|//TESTED_CLASS=QList
end_comment
begin_comment
comment|//TESTED_FILES=corelib/tools/qlist.h corelib/tools/qlist.cpp
end_comment
begin_comment
comment|/*!   \class tst_QVector   \internal   \since 4.5   \brief Test Qt's class QList.  */
end_comment
begin_class
DECL|class|tst_QList
class|class
name|tst_QList
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|length
parameter_list|()
specifier|const
function_decl|;
name|void
name|lengthSignature
parameter_list|()
specifier|const
function_decl|;
name|void
name|append
parameter_list|()
specifier|const
function_decl|;
name|void
name|prepend
parameter_list|()
specifier|const
function_decl|;
name|void
name|mid
parameter_list|()
specifier|const
function_decl|;
name|void
name|at
parameter_list|()
specifier|const
function_decl|;
name|void
name|first
parameter_list|()
specifier|const
function_decl|;
name|void
name|last
parameter_list|()
specifier|const
function_decl|;
name|void
name|begin
parameter_list|()
specifier|const
function_decl|;
name|void
name|end
parameter_list|()
specifier|const
function_decl|;
name|void
name|contains
parameter_list|()
specifier|const
function_decl|;
name|void
name|count
parameter_list|()
specifier|const
function_decl|;
name|void
name|empty
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastIndexOf
parameter_list|()
specifier|const
function_decl|;
name|void
name|move
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeAll
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeAt
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeOne
parameter_list|()
specifier|const
function_decl|;
name|void
name|replace
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWith
parameter_list|()
specifier|const
function_decl|;
name|void
name|swap
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeAt
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeFirst
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeLast
parameter_list|()
specifier|const
function_decl|;
name|void
name|toSet
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdList
parameter_list|()
specifier|const
function_decl|;
name|void
name|toVector
parameter_list|()
specifier|const
function_decl|;
name|void
name|value
parameter_list|()
specifier|const
function_decl|;
name|void
name|testSTLIterators
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperators
parameter_list|()
specifier|const
function_decl|;
name|void
name|initializeList
parameter_list|()
specifier|const
function_decl|;
name|void
name|const_shared_null
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|length
name|void
name|tst_QList
operator|::
name|length
parameter_list|()
specifier|const
block|{
comment|/* Empty list. */
block|{
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* One entry. */
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* Two entries. */
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/* Three entries. */
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|length
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lengthSignature
name|void
name|tst_QList
operator|::
name|lengthSignature
parameter_list|()
specifier|const
block|{
comment|/* Constness. */
block|{
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
comment|/* The function should be const. */
name|list
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QList
operator|::
name|append
parameter_list|()
specifier|const
block|{
comment|/* test append(const QList<T>&) function */
name|QString
name|one
argument_list|(
literal|"one"
argument_list|)
decl_stmt|;
name|QString
name|two
argument_list|(
literal|"two"
argument_list|)
decl_stmt|;
name|QString
name|three
argument_list|(
literal|"three"
argument_list|)
decl_stmt|;
name|QString
name|four
argument_list|(
literal|"four"
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list1
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
decl_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|listTotal
decl_stmt|;
name|list1
operator|.
name|append
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|list1
operator|.
name|append
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|list2
operator|.
name|append
argument_list|(
name|three
argument_list|)
expr_stmt|;
name|list2
operator|.
name|append
argument_list|(
name|four
argument_list|)
expr_stmt|;
name|list1
operator|.
name|append
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|listTotal
operator|.
name|append
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|listTotal
operator|.
name|append
argument_list|(
name|two
argument_list|)
expr_stmt|;
name|listTotal
operator|.
name|append
argument_list|(
name|three
argument_list|)
expr_stmt|;
name|listTotal
operator|.
name|append
argument_list|(
name|four
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list1
argument_list|,
name|listTotal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prepend
name|void
name|tst_QList
operator|::
name|prepend
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
modifier|*
argument_list|>
name|list
decl_stmt|;
name|QString
modifier|*
name|str1
init|=
operator|new
name|QString
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|str1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|str1
argument_list|)
expr_stmt|;
name|QString
modifier|*
name|str2
init|=
operator|new
name|QString
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|str2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|str2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|str1
argument_list|)
expr_stmt|;
name|QString
modifier|*
name|str3
init|=
operator|new
name|QString
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|str3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|str3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|str2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
name|str1
argument_list|)
expr_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|str2
argument_list|)
expr_stmt|;
operator|delete
name|str2
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|str3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|str1
argument_list|)
expr_stmt|;
name|QString
modifier|*
name|str4
init|=
operator|new
name|QString
decl_stmt|;
name|list
operator|.
name|prepend
argument_list|(
name|str4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|str4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|str3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
name|str1
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mid
name|void
name|tst_QList
operator|::
name|mid
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
operator|<<
literal|"kitty"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|mid
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"bak"
operator|<<
literal|"buck"
operator|<<
literal|"hello"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list1
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|at
name|void
name|tst_QList
operator|::
name|at
parameter_list|()
specifier|const
block|{
comment|// test at() and make sure it functions correctly with some simple list manipulation.
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
comment|// create a list
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// append an item
name|list
operator|<<
literal|"hello"
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item
name|list
operator|.
name|removeAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|first
name|void
name|tst_QList
operator|::
name|first
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|last
name|void
name|tst_QList
operator|::
name|last
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|begin
name|void
name|tst_QList
operator|::
name|begin
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|end
name|void
name|tst_QList
operator|::
name|end
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|--
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|--
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QList
operator|::
name|contains
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"pirates"
argument_list|)
argument_list|)
operator|!=
literal|true
argument_list|)
expr_stmt|;
comment|// add it and make sure it matches
name|list
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"ninjas"
argument_list|)
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QList
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
comment|// starts empty
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// goes up
name|list
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// and up
name|list
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// and down
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// and empty. :)
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|empty
name|void
name|tst_QList
operator|::
name|empty
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
comment|// make sure it starts empty
name|QVERIFY
argument_list|(
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// and doesn't stay empty
name|list
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// and goes back to being empty
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWith
name|void
name|tst_QList
operator|::
name|endsWith
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// test it returns correctly in both cases
name|QVERIFY
argument_list|(
name|list
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item and make sure the end item changes
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastIndexOf
name|void
name|tst_QList
operator|::
name|lastIndexOf
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// one instance of the target item
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// shouldn't find this
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"shouldntfindme"
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// multiple instances
name|list
operator|.
name|append
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|// search from the middle to find the last one
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|3
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// try find none
name|QVERIFY
argument_list|(
name|list
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|move
name|void
name|tst_QList
operator|::
name|move
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// move an item
name|list
operator|.
name|move
argument_list|(
literal|0
argument_list|,
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
argument_list|)
expr_stmt|;
comment|// move it back
name|list
operator|.
name|move
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// move an item in the middle
name|list
operator|.
name|move
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"bar"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAll
name|void
name|tst_QList
operator|::
name|removeAll
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// remove one instance
name|list
operator|.
name|removeAll
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// many instances
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// try remove something that doesn't exist
name|list
operator|.
name|removeAll
argument_list|(
name|QLatin1String
argument_list|(
literal|"you won't remove anything I hope"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAt
name|void
name|tst_QList
operator|::
name|removeAt
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// middle
name|list
operator|.
name|removeAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// start
name|list
operator|.
name|removeAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// final
name|list
operator|.
name|removeAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeOne
name|void
name|tst_QList
operator|::
name|removeOne
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// middle
name|list
operator|.
name|removeOne
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// start
name|list
operator|.
name|removeOne
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// last
name|list
operator|.
name|removeOne
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure it really only removes one :)
name|list
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|list
operator|.
name|removeOne
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
argument_list|)
expr_stmt|;
comment|// try remove something that doesn't exist
name|list
operator|.
name|removeOne
argument_list|(
name|QLatin1String
argument_list|(
literal|"you won't remove anything I hope"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|replace
name|void
name|tst_QList
operator|::
name|replace
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// start
name|list
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|"moo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"moo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// middle
name|list
operator|.
name|replace
argument_list|(
literal|1
argument_list|,
literal|"cow"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"moo"
operator|<<
literal|"cow"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// end
name|list
operator|.
name|replace
argument_list|(
literal|2
argument_list|,
literal|"milk"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"moo"
operator|<<
literal|"cow"
operator|<<
literal|"milk"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWith
name|void
name|tst_QList
operator|::
name|startsWith
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// make sure it starts ok
name|QVERIFY
argument_list|(
name|list
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item
name|list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QList
operator|::
name|swap
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// swap
name|list
operator|.
name|swap
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"baz"
operator|<<
literal|"bar"
operator|<<
literal|"foo"
argument_list|)
expr_stmt|;
comment|// swap again
name|list
operator|.
name|swap
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"bar"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|list2
decl_stmt|;
name|list2
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
expr_stmt|;
name|list
operator|.
name|swap
argument_list|(
name|list2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list2
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"bar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeAt
name|void
name|tst_QList
operator|::
name|takeAt
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeAt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeFirst
name|void
name|tst_QList
operator|::
name|takeFirst
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeLast
name|void
name|tst_QList
operator|::
name|takeLast
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toSet
name|void
name|tst_QList
operator|::
name|toSet
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// no duplicates
name|QCOMPARE
argument_list|(
name|list
operator|.
name|toSet
argument_list|()
argument_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
comment|// duplicates (is this more of a QSet test?)
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|toSet
argument_list|()
argument_list|,
name|QSet
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdList
name|void
name|tst_QList
operator|::
name|toStdList
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// yuck.
name|std
operator|::
name|list
argument_list|<
name|QString
argument_list|>
name|slist
decl_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|toStdList
argument_list|()
argument_list|,
name|slist
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toVector
name|void
name|tst_QList
operator|::
name|toVector
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|toVector
argument_list|()
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|void
name|tst_QList
operator|::
name|value
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// test real values
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test empty default
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test defaults
name|QLatin1String
name|defaultstr
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
operator|-
literal|1
argument_list|,
name|defaultstr
argument_list|)
argument_list|,
name|defaultstr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|value
argument_list|(
literal|3
argument_list|,
name|defaultstr
argument_list|)
argument_list|,
name|defaultstr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperators
name|void
name|tst_QList
operator|::
name|testOperators
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|listtwo
decl_stmt|;
name|listtwo
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
comment|// test equal
name|QVERIFY
argument_list|(
name|list
operator|==
name|listtwo
argument_list|)
expr_stmt|;
comment|// not equal
name|listtwo
operator|.
name|append
argument_list|(
literal|"not equal"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|!=
name|listtwo
argument_list|)
expr_stmt|;
comment|// +=
name|list
operator|+=
name|listtwo
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|listtwo
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"not equal"
argument_list|)
expr_stmt|;
comment|// =
name|list
operator|=
name|listtwo
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|listtwo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|"not equal"
argument_list|)
expr_stmt|;
comment|// []
name|QCOMPARE
argument_list|(
name|list
index|[
literal|0
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
index|[
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
argument_list|,
name|QLatin1String
argument_list|(
literal|"not equal"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSTLIterators
name|void
name|tst_QList
operator|::
name|testSTLIterators
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|QString
argument_list|>
name|list
decl_stmt|;
comment|// create a list
name|list
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
comment|// walk backwards
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test erase
name|it
operator|=
name|list
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test multiple erase
name|it
operator|=
name|list
operator|.
name|erase
argument_list|(
name|it
argument_list|,
name|it
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert again
name|it
operator|=
name|list
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert again
name|it
operator|=
name|list
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
operator|++
argument_list|,
name|QLatin1String
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeList
name|void
name|tst_QList
operator|::
name|initializeList
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QList
argument_list|<
name|int
argument_list|>
name|v1
argument_list|{
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
operator|(
name|QList
argument_list|<
name|int
argument_list|>
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
operator|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|v2
argument_list|{
name|v1
argument_list|,
block|{
literal|1
block|}
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|}
decl_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|v3
decl_stmt|;
name|v3
operator|<<
name|v1
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|)
operator|<<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
argument_list|,
name|v2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|const_shared_null
name|void
name|tst_QList
operator|::
name|const_shared_null
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list2
decl_stmt|;
name|list2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QList
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlist.moc"
end_include
end_unit
