begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_define
DECL|macro|QT_STRICT_ITERATORS
define|#
directive|define
name|QT_STRICT_ITERATORS
end_define
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_class
DECL|class|tst_QMap
class|class
name|tst_QMap
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
protected|protected:
template|template
parameter_list|<
name|class
name|KEY
parameter_list|,
name|class
name|VALUE
parameter_list|>
name|void
name|sanityCheckTree
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
modifier|&
name|m
parameter_list|,
name|int
name|calledFromLine
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|ctor
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|beginEnd
parameter_list|()
function_decl|;
name|void
name|key
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|operator_eq
parameter_list|()
function_decl|;
name|void
name|empty
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|find
parameter_list|()
function_decl|;
name|void
name|constFind
parameter_list|()
function_decl|;
name|void
name|lowerUpperBound
parameter_list|()
function_decl|;
name|void
name|mergeCompare
parameter_list|()
function_decl|;
name|void
name|take
parameter_list|()
function_decl|;
name|void
name|iterators
parameter_list|()
function_decl|;
name|void
name|keys_values_uniqueKeys
parameter_list|()
function_decl|;
name|void
name|qmultimap_specific
parameter_list|()
function_decl|;
name|void
name|const_shared_null
parameter_list|()
function_decl|;
name|void
name|equal_range
parameter_list|()
function_decl|;
name|void
name|setSharable
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|checkMostLeftNode
parameter_list|()
function_decl|;
name|void
name|initializerList
parameter_list|()
function_decl|;
name|void
name|testInsertWithHint
parameter_list|()
function_decl|;
name|void
name|testInsertMultiWithHint
parameter_list|()
function_decl|;
name|void
name|eraseValidIteratorOnSharedMap
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|StringMap
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|StringMap
typedef|;
end_typedef
begin_class
DECL|class|MyClass
class|class
name|MyClass
block|{
public|public:
DECL|function|MyClass
name|MyClass
parameter_list|()
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|MyClass
name|MyClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|c
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|str
operator|=
name|c
expr_stmt|;
block|}
DECL|function|~MyClass
name|~
name|MyClass
parameter_list|()
block|{
name|count
operator|--
expr_stmt|;
block|}
DECL|function|MyClass
name|MyClass
parameter_list|(
specifier|const
name|MyClass
modifier|&
name|c
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|str
operator|=
name|c
operator|.
name|str
expr_stmt|;
block|}
DECL|function|operator =
name|MyClass
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|MyClass
modifier|&
name|o
parameter_list|)
block|{
name|str
operator|=
name|o
operator|.
name|str
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|str
name|QString
name|str
decl_stmt|;
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|count
name|int
name|MyClass
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|MyMap
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|MyMap
typedef|;
end_typedef
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|MyClass
modifier|&
name|c
parameter_list|)
block|{
name|d
operator|<<
name|c
operator|.
name|str
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|KEY
parameter_list|,
name|class
name|VALUE
parameter_list|>
DECL|function|sanityCheckTree
name|void
name|tst_QMap
operator|::
name|sanityCheckTree
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
modifier|&
name|m
parameter_list|,
name|int
name|calledFromLine
parameter_list|)
block|{
name|QString
name|possibleFrom
decl_stmt|;
name|possibleFrom
operator|.
name|setNum
argument_list|(
name|calledFromLine
argument_list|)
expr_stmt|;
name|possibleFrom
operator|=
literal|"Called from line: "
operator|+
name|possibleFrom
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
typename|typename
name|QMap
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
operator|::
name|const_iterator
name|oldite
init|=
name|m
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
typename|typename
name|QMap
argument_list|<
name|KEY
argument_list|,
name|VALUE
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|m
operator|.
name|constBegin
argument_list|()
init|;
name|i
operator|!=
name|m
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|count
operator|++
expr_stmt|;
name|bool
name|oldIteratorIsLarger
init|=
name|i
operator|.
name|key
argument_list|()
operator|<
name|oldite
operator|.
name|key
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|oldIteratorIsLarger
argument_list|,
name|possibleFrom
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|oldite
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|size
argument_list|()
operator|!=
name|count
condition|)
block|{
comment|// Fail
name|qDebug
argument_list|()
operator|<<
name|possibleFrom
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|QVERIFY
argument_list|(
name|m
operator|.
name|constBegin
argument_list|()
operator|==
name|m
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QMap
operator|::
name|init
parameter_list|()
block|{
name|MyClass
operator|::
name|count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ctor
name|void
name|tst_QMap
operator|::
name|ctor
parameter_list|()
block|{
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
name|map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|pair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|i
operator|*
literal|3
argument_list|,
name|i
operator|*
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|qmap
argument_list|(
name|map
argument_list|)
decl_stmt|;
comment|// ctor.
comment|// Check that we have the same
name|std
operator|::
name|map
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|j
init|=
name|map
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|qmap
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|!=
name|qmap
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|(
operator|*
name|j
operator|)
operator|.
name|first
argument_list|,
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|*
name|j
operator|)
operator|.
name|second
argument_list|,
name|i
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|map
operator|.
name|size
argument_list|()
argument_list|,
name|qmap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QMap
operator|::
name|count
parameter_list|()
block|{
block|{
name|MyMap
name|map
decl_stmt|;
name|MyMap
name|map2
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// detach
name|map2
index|[
literal|"Hallo"
index|]
operator|=
name|MyClass
argument_list|(
literal|"Fritz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|{
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|Map
typedef|;
name|Map
name|map
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Torben"
argument_list|,
name|MyClass
argument_list|(
literal|"Weis"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Claudia"
argument_list|,
name|MyClass
argument_list|(
literal|"Sorg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Lars"
argument_list|,
name|MyClass
argument_list|(
literal|"Linzbach"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Matthias"
argument_list|,
name|MyClass
argument_list|(
literal|"Ettrich"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Sue"
argument_list|,
name|MyClass
argument_list|(
literal|"Paludo"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Eirik"
argument_list|,
name|MyClass
argument_list|(
literal|"Eng"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Haavard"
argument_list|,
name|MyClass
argument_list|(
literal|"Nord"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Arnt"
argument_list|,
name|MyClass
argument_list|(
literal|"Gulbrandsen"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 3"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 4"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 5"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"Paul"
argument_list|,
name|MyClass
argument_list|(
literal|"Tvete 6"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|(
literal|"Paul"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Map
name|map2
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|insert
argument_list|(
literal|"Kay"
argument_list|,
name|MyClass
argument_list|(
literal|"Roemer"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|19
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|=
name|map
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|insert
argument_list|(
literal|"Kay"
argument_list|,
name|MyClass
argument_list|(
literal|"Roemer"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|19
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|=
name|map
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|.
name|remove
argument_list|(
literal|"Lars"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|.
name|remove
argument_list|(
literal|"Mist"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
block|{
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|MyClass
argument_list|>
name|Map
typedef|;
name|Map
name|map
decl_stmt|;
name|map
index|[
literal|"Torben"
index|]
operator|=
name|MyClass
argument_list|(
literal|"Weis"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|map
index|[
literal|"Torben"
index|]
operator|.
name|str
expr_stmt|;
operator|(
name|void
operator|)
name|map
index|[
literal|"Lars"
index|]
operator|.
name|str
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|Map
modifier|&
name|cmap
init|=
name|map
decl_stmt|;
operator|(
name|void
operator|)
name|cmap
index|[
literal|"Depp"
index|]
operator|.
name|str
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_SUN
name|QVERIFY
argument_list|(
name|MyClass
operator|::
name|count
operator|==
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|map
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|MyClass
argument_list|>
name|map
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
name|map
operator|.
name|insert
argument_list|(
name|j
argument_list|,
name|MyClass
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QMap
operator|::
name|clear
parameter_list|()
block|{
block|{
name|MyMap
name|map
decl_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key"
argument_list|,
name|MyClass
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key0"
argument_list|,
name|MyClass
argument_list|(
literal|"value0"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key0"
argument_list|,
name|MyClass
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"key1"
argument_list|,
name|MyClass
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|MyClass
operator|::
name|count
argument_list|,
name|int
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginEnd
name|void
name|tst_QMap
operator|::
name|beginEnd
parameter_list|()
block|{
name|StringMap
name|m0
decl_stmt|;
name|QVERIFY
argument_list|(
name|m0
operator|.
name|begin
argument_list|()
operator|==
name|m0
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m0
operator|.
name|begin
argument_list|()
operator|==
name|m0
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
comment|// sample string->string map
name|StringMap
name|map
decl_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|==
name|map
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"0"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"1"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|==
name|map
operator|.
name|cbegin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
operator|==
name|map
operator|.
name|cend
argument_list|()
argument_list|)
expr_stmt|;
comment|// make a copy. const function shouldn't detach
name|StringMap
name|map2
init|=
name|map
decl_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|==
name|map2
operator|.
name|constBegin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
operator|==
name|map2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// test iteration
name|QString
name|result
decl_stmt|;
for|for
control|(
name|StringMap
operator|::
name|ConstIterator
name|it
init|=
name|map
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|map
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|result
operator|+=
operator|*
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
comment|// maps should still be identical
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|==
name|map2
operator|.
name|constBegin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
operator|==
name|map2
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// detach
name|map2
operator|.
name|insert
argument_list|(
literal|"2"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|==
name|map
operator|.
name|constBegin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|!=
name|map2
operator|.
name|constBegin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|key
name|void
name|tst_QMap
operator|::
name|key
parameter_list|()
block|{
block|{
name|QString
name|def
argument_list|(
literal|"default value"
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|map1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|3
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|"deux"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|1
argument_list|,
name|def
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
operator|==
literal|"deux"
operator|||
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|)
operator|==
literal|"two"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
operator|==
literal|"deux"
operator|||
name|map1
operator|.
name|key
argument_list|(
literal|2
argument_list|,
name|def
argument_list|)
operator|==
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|key
argument_list|(
literal|3
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|def
init|=
literal|666
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"one"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"three"
argument_list|,
name|def
argument_list|)
argument_list|,
name|def
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"two"
argument_list|,
name|def
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"zero"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"zero"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map2
operator|.
name|key
argument_list|(
literal|"zero"
argument_list|,
name|def
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|swap
name|void
name|tst_QMap
operator|::
name|swap
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|m1
decl_stmt|,
name|m2
decl_stmt|;
name|m1
index|[
literal|0
index|]
operator|=
literal|"m1[0]"
expr_stmt|;
name|m2
index|[
literal|1
index|]
operator|=
literal|"m2[1]"
expr_stmt|;
name|m1
operator|.
name|swap
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"m2[1]"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"m1[0]"
argument_list|)
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|m1
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|m2
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_eq
name|void
name|tst_QMap
operator|::
name|operator_eq
parameter_list|()
block|{
block|{
comment|// compare for equality:
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
comment|// compare for inequality:
name|a
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|65
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// a more complex map
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|a
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|b
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"Hello"
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"Goodbye"
argument_list|,
literal|"cruel world"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"Goodbye"
argument_list|,
literal|"cruel world"
argument_list|)
expr_stmt|;
comment|// what happens if we insert nulls?
name|a
operator|.
name|insert
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
comment|// empty keys and null keys match:
name|b
operator|.
name|insert
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|!=
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|"otto"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
literal|"willy"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|!=
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|a
operator|==
name|b
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|empty
name|void
name|tst_QMap
operator|::
name|empty
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QMap
operator|::
name|contains
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|int
name|i
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|map1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|"teststring"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|99
init|;
name|i
operator|>
literal|1
condition|;
operator|--
name|i
control|)
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|contains
argument_list|(
literal|43
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|find
name|void
name|tst_QMap
operator|::
name|find
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %0"
decl_stmt|;
name|QString
name|compareString
decl_stmt|;
name|int
name|i
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|1
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mensch"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mayer"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Hej"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Mayer"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|find
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Hej"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|4
argument_list|,
name|compareString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|(
literal|4
argument_list|)
argument_list|,
name|i
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|map1
operator|.
name|constFind
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|9
init|;
name|i
operator|>
literal|2
operator|&&
name|it
operator|!=
name|map1
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
literal|4
condition|;
operator|--
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|compareString
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constFind
name|void
name|tst_QMap
operator|::
name|constFind
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %0"
decl_stmt|;
name|QString
name|compareString
decl_stmt|;
name|int
name|i
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|)
operator|==
name|map1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mensch"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"Mayer"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"Hej"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|4
argument_list|)
operator|==
name|map1
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Mayer"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|constFind
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
operator|==
literal|"Hej"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|3
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|4
argument_list|,
name|compareString
argument_list|)
expr_stmt|;
block|}
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|map1
operator|.
name|constFind
argument_list|(
literal|4
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|9
init|;
name|i
operator|>
literal|2
operator|&&
name|it
operator|!=
name|map1
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|.
name|key
argument_list|()
operator|==
literal|4
condition|;
operator|--
name|i
control|)
block|{
name|compareString
operator|=
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|value
argument_list|()
operator|==
name|compareString
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lowerUpperBound
name|void
name|tst_QMap
operator|::
name|lowerUpperBound
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"five"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|"ten"
argument_list|)
expr_stmt|;
comment|//Copied from documentation
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// returns iterator to (1, "one")
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// returns iterator to (5, "five")
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|2
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// returns iterator to (5, "five")
name|QVERIFY
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|10
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// returns end()
name|QVERIFY
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|999
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// returns end()
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// returns iterator to (1, "one")
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// returns iterator to (1, "one")
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|2
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// returns iterator to (5, "five")
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|10
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// returns iterator to (10, "ten")
name|QVERIFY
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|999
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// returns end()
name|map1
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|7
argument_list|,
literal|"seven"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insertMulti
argument_list|(
literal|7
argument_list|,
literal|"seven_2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|2
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|3
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|7
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|10
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|upperBound
argument_list|(
literal|999
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|0
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|1
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|2
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|3
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|4
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|5
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|6
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|7
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|6
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"seven_2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|7
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"seven_2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|++
name|map1
operator|.
name|lowerBound
argument_list|(
literal|6
argument_list|)
operator|)
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"seven"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|++
name|map1
operator|.
name|lowerBound
argument_list|(
literal|7
argument_list|)
operator|)
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"seven"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|10
argument_list|)
operator|.
name|key
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|lowerBound
argument_list|(
literal|999
argument_list|)
operator|==
name|map1
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeCompare
name|void
name|tst_QMap
operator|::
name|mergeCompare
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|,
name|map2
decl_stmt|,
name|map3
decl_stmt|,
name|map1b
decl_stmt|,
name|map2b
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"ett"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"tre"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"fem"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"tvo"
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"fyra"
argument_list|)
expr_stmt|;
name|map1
operator|.
name|unite
argument_list|(
name|map2
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map1
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map1b
operator|=
name|map1
expr_stmt|;
name|map2b
operator|=
name|map2
expr_stmt|;
name|map2b
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"nul"
argument_list|)
expr_stmt|;
name|map1b
operator|.
name|unite
argument_list|(
name|map2b
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map1b
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|==
literal|"ett"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|==
literal|"tvo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|==
literal|"tre"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|==
literal|"fyra"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|==
literal|"fem"
argument_list|)
expr_stmt|;
name|map3
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"ett"
argument_list|)
expr_stmt|;
name|map3
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"tvo"
argument_list|)
expr_stmt|;
name|map3
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"tre"
argument_list|)
expr_stmt|;
name|map3
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"fyra"
argument_list|)
expr_stmt|;
name|map3
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"fem"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|==
name|map3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|take
name|void
name|tst_QMap
operator|::
name|take
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"zwei"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"drei"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|take
argument_list|(
literal|3
argument_list|)
operator|==
literal|"drei"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterators
name|void
name|tst_QMap
operator|::
name|iterators
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|QString
name|testString
init|=
literal|"Teststring %1"
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|map
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|//STL-Style iterators
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|stlIt
init|=
name|map
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 1"
argument_list|)
expr_stmt|;
name|stlIt
operator|+=
literal|5
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 6"
argument_list|)
expr_stmt|;
name|stlIt
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 7"
argument_list|)
expr_stmt|;
name|stlIt
operator|-=
literal|3
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 4"
argument_list|)
expr_stmt|;
name|stlIt
operator|--
expr_stmt|;
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 3"
argument_list|)
expr_stmt|;
for|for
control|(
name|stlIt
operator|=
name|map
operator|.
name|begin
argument_list|()
operator|,
name|i
operator|=
literal|1
init|;
name|stlIt
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|;
operator|++
name|stlIt
operator|,
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|stlIt
operator|.
name|value
argument_list|()
operator|==
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//STL-Style const-iterators
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|cstlIt
init|=
name|map
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 1"
argument_list|)
expr_stmt|;
name|cstlIt
operator|+=
literal|5
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 6"
argument_list|)
expr_stmt|;
name|cstlIt
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 7"
argument_list|)
expr_stmt|;
name|cstlIt
operator|-=
literal|3
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 4"
argument_list|)
expr_stmt|;
name|cstlIt
operator|--
expr_stmt|;
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
literal|"Teststring 3"
argument_list|)
expr_stmt|;
for|for
control|(
name|cstlIt
operator|=
name|map
operator|.
name|constBegin
argument_list|()
operator|,
name|i
operator|=
literal|1
init|;
name|cstlIt
operator|!=
name|map
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|cstlIt
operator|,
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|cstlIt
operator|.
name|value
argument_list|()
operator|==
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Java-Style iterators
name|QMapIterator
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|javaIt
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|javaIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|javaIt
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|i
operator|=
literal|51
expr_stmt|;
while|while
condition|(
name|javaIt
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
operator|--
name|i
expr_stmt|;
name|javaIt
operator|.
name|previous
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|javaIt
operator|.
name|value
argument_list|()
operator|==
name|testString
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|keys_values_uniqueKeys
name|void
name|tst_QMap
operator|::
name|keys_values_uniqueKeys
parameter_list|()
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|uniqueKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|"alpha"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|uniqueKeys
argument_list|()
operator|==
name|map
operator|.
name|keys
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|"beta"
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|==
name|map
operator|.
name|uniqueKeys
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
operator|-
literal|2
operator|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|"alpha"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|uniqueKeys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
operator|<<
operator|-
literal|2
operator|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|"beta"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|uniqueKeys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|keys
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"beta"
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|==
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|4
operator|<<
operator|-
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qmultimap_specific
name|void
name|tst_QMap
operator|::
name|qmultimap_specific
parameter_list|()
block|{
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|9
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|i
condition|;
operator|++
name|j
control|)
block|{
name|int
name|k
init|=
name|i
operator|*
literal|10
operator|+
name|j
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|9
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|i
condition|;
operator|++
name|j
control|)
block|{
name|int
name|k
init|=
name|i
operator|*
literal|10
operator|+
name|j
decl_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|map1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map1
operator|.
name|contains
argument_list|(
literal|9
argument_list|,
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|46
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|map1
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
block|{
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|map1
operator|.
name|constFind
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|map1
operator|.
name|constFind
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|map1
operator|.
name|constFind
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map2
argument_list|(
name|map1
argument_list|)
decl_stmt|;
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i
init|=
name|map2
operator|.
name|find
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|map2
operator|.
name|find
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|map2
operator|.
name|find
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|map1
operator|.
name|find
argument_list|(
literal|1
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|map1
operator|.
name|find
argument_list|(
literal|2
argument_list|,
literal|22
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|22
argument_list|)
expr_stmt|;
name|i
operator|=
name|map1
operator|.
name|find
argument_list|(
literal|9
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|98
argument_list|)
expr_stmt|;
block|}
block|{
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
literal|48
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|95
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|map1
operator|+=
name|map2
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map2
operator|.
name|insert
argument_list|(
literal|48
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|count
argument_list|()
argument_list|,
name|map2
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|remove
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map2
operator|.
name|remove
argument_list|(
literal|42
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|==
name|map2
argument_list|)
expr_stmt|;
block|}
name|map1
operator|.
name|insert
argument_list|(
name|map1
operator|.
name|constBegin
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
name|map1
operator|.
name|constBegin
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|46
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
name|map1
operator|.
name|constBegin
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|47
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
name|map1
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Invald hint
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|48
argument_list|)
expr_stmt|;
name|map1
operator|.
name|insert
argument_list|(
name|map1
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Invald hint
name|QCOMPARE
argument_list|(
name|map1
operator|.
name|size
argument_list|()
argument_list|,
literal|49
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map1
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|const_shared_null
name|void
name|tst_QMap
operator|::
name|const_shared_null
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map1
decl_stmt|;
name|map1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map2
decl_stmt|;
name|map2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equal_range
name|void
name|tst_QMap
operator|::
name|equal_range
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|QPair
argument_list|<
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
argument_list|,
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
argument_list|>
name|result
init|=
name|map
operator|.
name|equal_range
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|10
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|+=
literal|2
control|)
name|map
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|1
argument_list|,
literal|"another one"
argument_list|)
expr_stmt|;
name|result
operator|=
name|map
operator|.
name|equal_range
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|first
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|second
argument_list|,
name|map
operator|.
name|find
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|const_
specifier|const
name|T
modifier|&
name|const_
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|setSharable
name|void
name|tst_QMap
operator|::
name|setSharable
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"um"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"dois"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|4
argument_list|,
literal|"quatro"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|"cinco"
argument_list|)
expr_stmt|;
name|map
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|map
argument_list|)
index|[
literal|4
index|]
argument_list|,
name|QString
argument_list|(
literal|"quatro"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|copy
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|copy
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|map
argument_list|)
index|[
literal|4
index|]
argument_list|,
name|QString
argument_list|(
literal|"quatro"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|copy
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|map
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|copy
argument_list|)
index|[
literal|4
index|]
argument_list|,
name|QString
argument_list|(
literal|"quatro"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|copy
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|const_
argument_list|(
name|map
argument_list|)
index|[
literal|4
index|]
argument_list|,
name|QString
argument_list|(
literal|"quatro"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|copy
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|map
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QMap
operator|::
name|insert
parameter_list|()
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|float
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"cs/key1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"cs/key2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"cs/key1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|intMap
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|intMap
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|intMap
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|intMap
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|intMap
operator|.
name|insert
argument_list|(
name|i
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intMap
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intMap
operator|.
name|value
argument_list|(
name|i
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkMostLeftNode
name|void
name|tst_QMap
operator|::
name|checkMostLeftNode
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
comment|// insert
name|map
operator|.
name|insert
argument_list|(
literal|99
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|98
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|97
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|96
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|95
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// remove
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|take
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|96
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|erase
argument_list|(
name|map
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|98
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|200
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|.
name|key
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
comment|// remove the non left most node
name|map
operator|.
name|insert
argument_list|(
literal|202
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|203
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|204
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|202
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|203
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
literal|204
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
comment|// erase last item
name|map
operator|.
name|erase
argument_list|(
name|map
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializerList
name|void
name|tst_QMap
operator|::
name|initializerList
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|map
argument_list|{
block|{
literal|1
block|,
literal|"hello"
block|}
argument_list|,
block|{
literal|2
block|,
literal|"initializer_list"
block|}
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|1
index|]
operator|==
literal|"hello"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|map
index|[
literal|2
index|]
operator|==
literal|"initializer_list"
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|multiMap
argument_list|{
block|{
literal|"il"
block|,
literal|1
block|}
argument_list|,
block|{
literal|"il"
block|,
literal|2
block|}
argument_list|,
block|{
literal|"il"
block|,
literal|3
block|}
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|multiMap
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|values
init|=
name|multiMap
operator|.
name|values
argument_list|(
literal|"il"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|values
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|emptyMap
argument_list|{}
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|char
argument_list|,
name|char
argument_list|>
name|emptyPairs
argument_list|{
block|{}
argument_list|,
block|{}
argument_list|}
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|emptyPairs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|double
argument_list|,
name|double
argument_list|>
name|emptyMultiMap
argument_list|{}
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyMultiMap
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|float
argument_list|,
name|float
argument_list|>
name|emptyPairs2
argument_list|{
block|{}
argument_list|,
block|{}
argument_list|}
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|emptyPairs2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Compiler doesn't support initializer lists"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testInsertWithHint
name|void
name|tst_QMap
operator|::
name|testInsertWithHint
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Check with end hint();
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size == 1
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size = 2
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size = 3
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|key75
argument_list|(
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|75
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// size = 4
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size = 5
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|105
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size = 6
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// invalid hint and size = 7
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|lastkey
init|=
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|105
argument_list|,
literal|12
argument_list|)
decl_stmt|;
comment|// overwrite
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lastkey
operator|.
name|value
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lastkey
operator|.
name|key
argument_list|()
argument_list|,
literal|105
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// With regular hint
name|map
operator|.
name|insert
argument_list|(
name|key75
argument_list|,
literal|75
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// overwrite current key
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|key75
operator|.
name|key
argument_list|()
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|key75
operator|.
name|value
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|key75
argument_list|,
literal|50
argument_list|,
literal|101
argument_list|)
expr_stmt|;
comment|// overwrite previous value
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|key50
argument_list|(
name|key75
argument_list|)
decl_stmt|;
operator|--
name|key50
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|key50
operator|.
name|key
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|key50
operator|.
name|value
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|key75
argument_list|,
literal|17
argument_list|,
literal|125
argument_list|)
expr_stmt|;
comment|// invalid hint - size 8
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// begin
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// size 9
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// overwrite existing (leftmost) value
name|QCOMPARE
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|47
argument_list|,
literal|47
argument_list|)
expr_stmt|;
comment|// wrong hint  - size 10
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// insert with right == 0
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|i1
argument_list|(
name|map
operator|.
name|insert
argument_list|(
name|key75
argument_list|,
literal|70
argument_list|,
literal|12
argument_list|)
argument_list|)
decl_stmt|;
comment|// overwrite
name|map
operator|.
name|insert
argument_list|(
name|i1
argument_list|,
literal|69
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// size 12
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInsertMultiWithHint
name|void
name|tst_QMap
operator|::
name|testInsertMultiWithHint
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|cite
typedef|;
comment|// Hack since we define QT_STRICT_ITERATORS
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|map
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
literal|64
argument_list|,
literal|65
argument_list|)
expr_stmt|;
name|map
index|[
literal|128
index|]
operator|=
literal|129
expr_stmt|;
name|map
index|[
literal|256
index|]
operator|=
literal|257
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|map
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
literal|512
argument_list|,
literal|513
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|map
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
literal|512
argument_list|,
literal|513
operator|*
literal|2
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|map
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
literal|256
argument_list|,
literal|258
argument_list|)
expr_stmt|;
comment|// wrong hint
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|map
operator|.
name|insertMulti
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|256
argument_list|,
literal|259
argument_list|)
decl_stmt|;
comment|// wrong hint
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|j
init|=
name|map
operator|.
name|insertMulti
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|69
argument_list|,
literal|66
argument_list|)
decl_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|j
operator|=
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|j
argument_list|)
argument_list|,
literal|68
argument_list|,
literal|259
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|j
operator|=
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|j
argument_list|)
argument_list|,
literal|67
argument_list|,
literal|67
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|i
operator|=
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|i
argument_list|)
argument_list|,
literal|256
argument_list|,
literal|259
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|i
operator|=
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|i
argument_list|)
argument_list|,
literal|256
argument_list|,
literal|260
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|cite
argument_list|(
name|i
argument_list|)
argument_list|,
literal|64
argument_list|,
literal|67
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
name|map
operator|.
name|constBegin
argument_list|()
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|sanityCheckTree
argument_list|(
name|map
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eraseValidIteratorOnSharedMap
name|void
name|tst_QMap
operator|::
name|eraseValidIteratorOnSharedMap
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|10
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|10
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|a
operator|.
name|insertMulti
argument_list|(
literal|10
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|a
operator|.
name|insert
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|a
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|value
argument_list|()
operator|!=
literal|25
condition|)
operator|++
name|i
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|a
operator|.
name|erase
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|a
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|a
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|i
operator|.
name|value
argument_list|()
operator|!=
literal|25
argument_list|)
expr_stmt|;
name|int
name|itemsWith10
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
name|b
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|b
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
name|itemsWith10
operator|+=
operator|(
name|i
operator|.
name|key
argument_list|()
operator|==
literal|10
operator|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemsWith10
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Border cases
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|ms1
decl_stmt|,
name|ms2
decl_stmt|,
name|ms3
decl_stmt|;
name|ms1
operator|.
name|insert
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|ms1
operator|.
name|insertMulti
argument_list|(
literal|"foo"
argument_list|,
literal|"quux"
argument_list|)
expr_stmt|;
name|ms1
operator|.
name|insertMulti
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|si
init|=
name|ms1
operator|.
name|begin
argument_list|()
decl_stmt|;
name|ms2
operator|=
name|ms1
expr_stmt|;
name|ms1
operator|.
name|erase
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|si
operator|=
name|ms1
operator|.
name|begin
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|si
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quux"
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|si
expr_stmt|;
name|QCOMPARE
argument_list|(
name|si
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|si
operator|=
name|ms2
operator|.
name|begin
argument_list|()
expr_stmt|;
operator|++
name|si
expr_stmt|;
operator|++
name|si
expr_stmt|;
name|ms3
operator|=
name|ms2
expr_stmt|;
name|ms2
operator|.
name|erase
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|si
operator|=
name|ms2
operator|.
name|begin
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|si
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|si
expr_stmt|;
name|QCOMPARE
argument_list|(
name|si
operator|.
name|value
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quux"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ms1
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ms2
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ms3
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QMap
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmap.moc"
end_include
end_unit
