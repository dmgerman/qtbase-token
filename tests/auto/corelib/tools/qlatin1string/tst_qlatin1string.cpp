begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz<marc.mutz@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_class
DECL|class|tst_QLatin1String
class|class
name|tst_QLatin1String
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|nullString
parameter_list|()
function_decl|;
name|void
name|emptyString
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|nullString
name|void
name|tst_QLatin1String
operator|::
name|nullString
parameter_list|()
block|{
comment|// default ctor
block|{
name|QLatin1String
name|l1
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|Q_NULLPTR
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// from nullptr
block|{
specifier|const
name|char
modifier|*
name|null
init|=
name|Q_NULLPTR
decl_stmt|;
name|QLatin1String
name|l1
argument_list|(
name|null
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|Q_NULLPTR
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// from null QByteArray
block|{
specifier|const
name|QByteArray
name|null
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QLatin1String
name|l1
argument_list|(
name|null
argument_list|)
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"null QByteArrays become non-null QLatin1Strings..."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|Q_NULLPTR
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"null QByteArrays become non-null QLatin1Strings become non-null QStrings..."
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|emptyString
name|void
name|tst_QLatin1String
operator|::
name|emptyString
parameter_list|()
block|{
block|{
specifier|const
name|char
modifier|*
name|empty
init|=
literal|""
decl_stmt|;
name|QLatin1String
name|l1
argument_list|(
name|empty
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|empty
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|char
modifier|*
name|notEmpty
init|=
literal|"foo"
decl_stmt|;
name|QLatin1String
name|l1
argument_list|(
name|notEmpty
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|notEmpty
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QByteArray
name|empty
init|=
literal|""
decl_stmt|;
name|QLatin1String
name|l1
argument_list|(
name|empty
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|l1
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|(
name|empty
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|l1
decl_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QLatin1String
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlatin1string.moc"
end_include
end_unit
