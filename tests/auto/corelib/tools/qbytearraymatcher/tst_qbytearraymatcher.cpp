begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qbytearraymatcher.h>
end_include
begin_comment
comment|// COM interface
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|interface
argument_list|)
end_if
begin_undef
DECL|macro|interface
undef|#
directive|undef
name|interface
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QByteArrayMatcher
class|class
name|tst_QByteArrayMatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|interface
parameter_list|()
function_decl|;
name|void
name|indexIn
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|matcher1
specifier|static
name|QByteArrayMatcher
name|matcher1
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|interface
name|void
name|tst_QByteArrayMatcher
operator|::
name|interface
parameter_list|()
block|{
specifier|const
name|char
name|needle
index|[]
init|=
literal|"abc123"
decl_stmt|;
name|QByteArray
name|haystack
argument_list|(
literal|500
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|haystack
operator|.
name|insert
argument_list|(
literal|6
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|haystack
operator|.
name|insert
argument_list|(
literal|31
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|haystack
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
literal|"abc123"
argument_list|)
expr_stmt|;
name|haystack
operator|.
name|insert
argument_list|(
literal|84
argument_list|,
literal|"abc123"
argument_list|)
expr_stmt|;
name|matcher1
operator|=
name|QByteArrayMatcher
argument_list|(
name|QByteArray
argument_list|(
name|needle
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArrayMatcher
name|matcher2
decl_stmt|;
name|matcher2
operator|.
name|setPattern
argument_list|(
name|QByteArray
argument_list|(
name|needle
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArrayMatcher
name|matcher3
init|=
name|QByteArrayMatcher
argument_list|(
name|QByteArray
argument_list|(
name|needle
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArrayMatcher
name|matcher4
argument_list|(
name|needle
argument_list|,
sizeof|sizeof
argument_list|(
name|needle
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QByteArrayMatcher
name|matcher5
argument_list|(
name|matcher2
argument_list|)
decl_stmt|;
name|QByteArrayMatcher
name|matcher6
decl_stmt|;
name|matcher6
operator|=
name|matcher3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher2
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher3
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher4
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher5
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher6
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
operator|.
name|constData
argument_list|()
argument_list|,
name|haystack
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|43
argument_list|)
argument_list|,
literal|84
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
operator|.
name|constData
argument_list|()
argument_list|,
name|haystack
operator|.
name|length
argument_list|()
argument_list|,
literal|43
argument_list|)
argument_list|,
literal|84
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|85
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher1
operator|.
name|indexIn
argument_list|(
name|haystack
operator|.
name|constData
argument_list|()
argument_list|,
name|haystack
operator|.
name|length
argument_list|()
argument_list|,
literal|85
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QByteArrayMatcher
name|matcher7
argument_list|(
name|QByteArray
argument_list|(
literal|"123"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|matcher7
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|matcher7
operator|=
name|QByteArrayMatcher
argument_list|(
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher7
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|matcher7
operator|.
name|setPattern
argument_list|(
name|matcher4
operator|.
name|pattern
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher7
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|)
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|matcher
specifier|static
name|QByteArrayMatcher
name|matcher
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|indexIn
name|void
name|tst_QByteArrayMatcher
operator|::
name|indexIn
parameter_list|()
block|{
specifier|const
name|char
name|p_data
index|[]
init|=
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|}
decl_stmt|;
name|QByteArray
name|pattern
argument_list|(
name|p_data
argument_list|,
sizeof|sizeof
argument_list|(
name|p_data
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|haystack
argument_list|(
literal|8
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
name|haystack
index|[
literal|7
index|]
operator|=
literal|0x1
expr_stmt|;
name|matcher
operator|=
name|QByteArrayMatcher
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QByteArrayMatcher
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qbytearraymatcher.moc"
end_include
end_unit
