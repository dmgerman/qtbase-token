begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qmargins.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMargins
argument_list|)
end_macro
begin_class
DECL|class|tst_QMargins
class|class
name|tst_QMargins
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|dataStreamCheck
parameter_list|()
function_decl|;
name|void
name|operators
parameter_list|()
function_decl|;
name|void
name|getSetCheckF
parameter_list|()
function_decl|;
name|void
name|dataStreamCheckF
parameter_list|()
function_decl|;
name|void
name|operatorsF
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QMargins
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QMargins
name|margins
decl_stmt|;
comment|// int QMargins::width()
comment|// void QMargins::setWidth(int)
name|margins
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|margins
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setTop
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setBottom
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setRight
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|margins
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|=
name|QMargins
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|margins
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setLeft
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setRight
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|margins
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|margins
argument_list|,
name|QMargins
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operators
name|void
name|tst_QMargins
operator|::
name|operators
parameter_list|()
block|{
specifier|const
name|QMargins
name|m1
argument_list|(
literal|12
argument_list|,
literal|14
argument_list|,
literal|16
argument_list|,
literal|18
argument_list|)
decl_stmt|;
specifier|const
name|QMargins
name|m2
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|const
name|QMargins
name|added
init|=
name|m1
operator|+
name|m2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|added
argument_list|,
name|QMargins
argument_list|(
literal|14
argument_list|,
literal|17
argument_list|,
literal|20
argument_list|,
literal|23
argument_list|)
argument_list|)
expr_stmt|;
name|QMargins
name|a
init|=
name|m1
decl_stmt|;
name|a
operator|+=
name|m2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|added
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
name|subtracted
init|=
name|m1
operator|-
name|m2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|subtracted
argument_list|,
name|QMargins
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|-=
name|m2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|subtracted
argument_list|)
expr_stmt|;
name|QMargins
name|h
init|=
name|m1
decl_stmt|;
name|h
operator|+=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
argument_list|,
name|QMargins
argument_list|(
literal|14
argument_list|,
literal|16
argument_list|,
literal|18
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|-=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
argument_list|,
name|m1
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
name|doubled
init|=
name|m1
operator|*
literal|2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|doubled
argument_list|,
name|QMargins
argument_list|(
literal|24
argument_list|,
literal|28
argument_list|,
literal|32
argument_list|,
literal|36
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|2
operator|*
name|m1
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qreal
argument_list|(
literal|2
argument_list|)
operator|*
name|m1
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|*
name|qreal
argument_list|(
literal|2
argument_list|)
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|*=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|*=
name|qreal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
specifier|const
name|QMargins
name|halved
init|=
name|m1
operator|/
literal|2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|halved
argument_list|,
name|QMargins
argument_list|(
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|/=
literal|2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|halved
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|/=
name|qreal
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|halved
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|+
operator|(
operator|-
name|m1
operator|)
argument_list|,
name|QMargins
argument_list|()
argument_list|)
expr_stmt|;
name|QMargins
name|m3
init|=
name|QMargins
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m3
operator|+
literal|1
argument_list|,
name|QMargins
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
operator|+
name|m3
argument_list|,
name|QMargins
argument_list|(
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m3
operator|-
literal|1
argument_list|,
name|QMargins
argument_list|(
literal|9
argument_list|,
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|+
name|m3
argument_list|,
name|QMargins
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|,
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
name|m3
argument_list|,
name|QMargins
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|11
argument_list|,
operator|-
literal|12
argument_list|,
operator|-
literal|13
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing QDataStream operators
end_comment
begin_function
DECL|function|dataStreamCheck
name|void
name|tst_QMargins
operator|::
name|dataStreamCheck
parameter_list|()
block|{
name|QByteArray
name|buffer
decl_stmt|;
comment|// stream out
block|{
name|QMargins
name|marginsOut
argument_list|(
literal|0
argument_list|,
name|INT_MIN
argument_list|,
name|INT_MAX
argument_list|,
literal|6852
argument_list|)
decl_stmt|;
name|QDataStream
name|streamOut
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|streamOut
operator|<<
name|marginsOut
expr_stmt|;
block|}
comment|// stream in& compare
block|{
name|QMargins
name|marginsIn
decl_stmt|;
name|QDataStream
name|streamIn
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|streamIn
operator|>>
name|marginsIn
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|left
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|top
argument_list|()
argument_list|,
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|right
argument_list|()
argument_list|,
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|bottom
argument_list|()
argument_list|,
literal|6852
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheckF
name|void
name|tst_QMargins
operator|::
name|getSetCheckF
parameter_list|()
block|{
name|QMarginsF
name|margins
decl_stmt|;
comment|// int QMarginsF::width()
comment|// void QMarginsF::setWidth(int)
name|margins
operator|.
name|setLeft
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1.1
argument_list|,
name|margins
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setTop
argument_list|(
literal|2.2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|2.2
argument_list|,
name|margins
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setBottom
argument_list|(
literal|3.3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3.3
argument_list|,
name|margins
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setRight
argument_list|(
literal|4.4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|4.4
argument_list|,
name|margins
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|=
name|QMarginsF
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|margins
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setLeft
argument_list|(
literal|5.5
argument_list|)
expr_stmt|;
name|margins
operator|.
name|setRight
argument_list|(
literal|5.5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|margins
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|margins
argument_list|,
name|QMarginsF
argument_list|(
literal|5.5
argument_list|,
literal|0.0
argument_list|,
literal|5.5
argument_list|,
literal|0.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatorsF
name|void
name|tst_QMargins
operator|::
name|operatorsF
parameter_list|()
block|{
specifier|const
name|QMarginsF
name|m1
argument_list|(
literal|12.1
argument_list|,
literal|14.1
argument_list|,
literal|16.1
argument_list|,
literal|18.1
argument_list|)
decl_stmt|;
specifier|const
name|QMarginsF
name|m2
argument_list|(
literal|2.1
argument_list|,
literal|3.1
argument_list|,
literal|4.1
argument_list|,
literal|5.1
argument_list|)
decl_stmt|;
specifier|const
name|QMarginsF
name|added
init|=
name|m1
operator|+
name|m2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|added
argument_list|,
name|QMarginsF
argument_list|(
literal|14.2
argument_list|,
literal|17.2
argument_list|,
literal|20.2
argument_list|,
literal|23.2
argument_list|)
argument_list|)
expr_stmt|;
name|QMarginsF
name|a
init|=
name|m1
decl_stmt|;
name|a
operator|+=
name|m2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|added
argument_list|)
expr_stmt|;
specifier|const
name|QMarginsF
name|subtracted
init|=
name|m1
operator|-
name|m2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|subtracted
argument_list|,
name|QMarginsF
argument_list|(
literal|10.0
argument_list|,
literal|11.0
argument_list|,
literal|12.0
argument_list|,
literal|13.0
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|-=
name|m2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|subtracted
argument_list|)
expr_stmt|;
name|QMarginsF
name|h
init|=
name|m1
decl_stmt|;
name|h
operator|+=
literal|2.1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
argument_list|,
name|QMarginsF
argument_list|(
literal|14.2
argument_list|,
literal|16.2
argument_list|,
literal|18.2
argument_list|,
literal|20.2
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|-=
literal|2.1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|h
argument_list|,
name|m1
argument_list|)
expr_stmt|;
specifier|const
name|QMarginsF
name|doubled
init|=
name|m1
operator|*
literal|2.0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|doubled
argument_list|,
name|QMarginsF
argument_list|(
literal|24.2
argument_list|,
literal|28.2
argument_list|,
literal|32.2
argument_list|,
literal|36.2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|2.0
operator|*
name|m1
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|*
literal|2.0
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|*=
literal|2.0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|doubled
argument_list|)
expr_stmt|;
specifier|const
name|QMarginsF
name|halved
init|=
name|m1
operator|/
literal|2.0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|halved
argument_list|,
name|QMarginsF
argument_list|(
literal|6.05
argument_list|,
literal|7.05
argument_list|,
literal|8.05
argument_list|,
literal|9.05
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
name|m1
expr_stmt|;
name|a
operator|/=
literal|2.0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|halved
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|+
operator|(
operator|-
name|m1
operator|)
argument_list|,
name|QMarginsF
argument_list|()
argument_list|)
expr_stmt|;
name|QMarginsF
name|m3
init|=
name|QMarginsF
argument_list|(
literal|10.3
argument_list|,
literal|11.4
argument_list|,
literal|12.5
argument_list|,
literal|13.6
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m3
operator|+
literal|1.1
argument_list|,
name|QMarginsF
argument_list|(
literal|11.4
argument_list|,
literal|12.5
argument_list|,
literal|13.6
argument_list|,
literal|14.7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1.1
operator|+
name|m3
argument_list|,
name|QMarginsF
argument_list|(
literal|11.4
argument_list|,
literal|12.5
argument_list|,
literal|13.6
argument_list|,
literal|14.7
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m3
operator|-
literal|1.1
argument_list|,
name|QMarginsF
argument_list|(
literal|9.2
argument_list|,
literal|10.3
argument_list|,
literal|11.4
argument_list|,
literal|12.5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|+
name|m3
argument_list|,
name|QMarginsF
argument_list|(
literal|10.3
argument_list|,
literal|11.4
argument_list|,
literal|12.5
argument_list|,
literal|13.6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
name|m3
argument_list|,
name|QMarginsF
argument_list|(
operator|-
literal|10.3
argument_list|,
operator|-
literal|11.4
argument_list|,
operator|-
literal|12.5
argument_list|,
operator|-
literal|13.6
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing QDataStream operators
end_comment
begin_function
DECL|function|dataStreamCheckF
name|void
name|tst_QMargins
operator|::
name|dataStreamCheckF
parameter_list|()
block|{
name|QByteArray
name|buffer
decl_stmt|;
comment|// stream out
block|{
name|QMarginsF
name|marginsOut
argument_list|(
literal|1.1
argument_list|,
literal|2.2
argument_list|,
literal|3.3
argument_list|,
literal|4.4
argument_list|)
decl_stmt|;
name|QDataStream
name|streamOut
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|streamOut
operator|<<
name|marginsOut
expr_stmt|;
block|}
comment|// stream in& compare
block|{
name|QMarginsF
name|marginsIn
decl_stmt|;
name|QDataStream
name|streamIn
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|streamIn
operator|>>
name|marginsIn
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|left
argument_list|()
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|top
argument_list|()
argument_list|,
literal|2.2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|right
argument_list|()
argument_list|,
literal|3.3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|marginsIn
operator|.
name|bottom
argument_list|()
argument_list|,
literal|4.4
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QMargins
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmargins.moc"
end_include
end_unit
