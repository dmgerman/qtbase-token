begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_decl_stmt
DECL|variable|N
specifier|const
name|int
name|N
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QRegExp
class|class
name|tst_QRegExp
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|indexIn_data
parameter_list|()
function_decl|;
name|void
name|indexIn_addMoreRows
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|stri
parameter_list|)
function_decl|;
name|void
name|indexIn
parameter_list|()
function_decl|;
name|void
name|lastIndexIn_data
parameter_list|()
function_decl|;
name|void
name|lastIndexIn
parameter_list|()
function_decl|;
name|void
name|matchedLength
parameter_list|()
function_decl|;
name|void
name|wildcard_data
parameter_list|()
function_decl|;
name|void
name|wildcard
parameter_list|()
function_decl|;
name|void
name|testEscapingWildcard_data
parameter_list|()
function_decl|;
name|void
name|testEscapingWildcard
parameter_list|()
function_decl|;
name|void
name|testInvalidWildcard_data
parameter_list|()
function_decl|;
name|void
name|testInvalidWildcard
parameter_list|()
function_decl|;
name|void
name|caretAnchoredOptimization
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|prepareEngineOptimization
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|operator_eq
parameter_list|()
function_decl|;
name|void
name|exactMatch
parameter_list|()
function_decl|;
name|void
name|capturedTexts
parameter_list|()
function_decl|;
name|void
name|staticRegExp
parameter_list|()
function_decl|;
name|void
name|rainersSlowRegExpCopyBug
parameter_list|()
function_decl|;
name|void
name|nonExistingBackReferenceBug
parameter_list|()
function_decl|;
name|void
name|reentrancy
parameter_list|()
function_decl|;
name|void
name|threadsafeEngineCache
parameter_list|()
function_decl|;
name|void
name|posAndCapConsistency_data
parameter_list|()
function_decl|;
name|void
name|posAndCapConsistency
parameter_list|()
function_decl|;
name|void
name|interval
parameter_list|()
function_decl|;
name|void
name|validityCheck_data
parameter_list|()
function_decl|;
name|void
name|validityCheck
parameter_list|()
function_decl|;
name|void
name|escapeSequences
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QRegExp
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QRegExp
name|obj1
decl_stmt|;
comment|// PatternSyntax QRegExp::patternSyntax()
comment|// void QRegExp::setPatternSyntax(PatternSyntax)
name|obj1
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
argument_list|,
name|obj1
operator|.
name|patternSyntax
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
argument_list|,
name|obj1
operator|.
name|patternSyntax
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
argument_list|,
name|obj1
operator|.
name|patternSyntax
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|extern
specifier|const
name|char
name|email
index|[]
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|lastIndexIn_data
name|void
name|tst_QRegExp
operator|::
name|lastIndexIn_data
parameter_list|()
block|{
name|indexIn_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexIn_data
name|void
name|tst_QRegExp
operator|::
name|indexIn_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"regexpStr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pos"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"caps"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|stri
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|stri
operator|.
name|setNum
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// anchors
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?=)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?!)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?=)|(?=))z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?=)|(?!))z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?!)|(?=))z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?!)|(?!))z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?=)|b)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?=)|b)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abz"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?!)|b)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"az"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(?:(?!)|b)z"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abz"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a?(?=^b$)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"anc11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a?(?=^b$)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// back-references
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)(\\1)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aa"
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<(\\w*)>.+</\\1>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<b>blabla</b>bla</>"
argument_list|)
operator|<<
literal|0
operator|<<
literal|13
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<(\\w*)>.+</\\1>"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<>blabla</b>bla</>"
argument_list|)
operator|<<
literal|0
operator|<<
literal|18
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((a*\\2)\\2)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"aaaa"
argument_list|)
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(aa+)\\1+$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|6
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"bref05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)"
literal|"\\14\\13\\12\\11\\10\\9\\8\\7\\6\\5\\4\\3\\2\\1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12345678910111213141413121110987654321"
argument_list|)
operator|<<
literal|0
operator|<<
literal|38
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|<<
literal|"6"
operator|<<
literal|"7"
operator|<<
literal|"8"
operator|<<
literal|"9"
operator|<<
literal|"10"
operator|<<
literal|"11"
operator|<<
literal|"12"
operator|<<
literal|"13"
operator|<<
literal|"14"
argument_list|)
expr_stmt|;
comment|// captures
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aaa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"baaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)(a*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)(b*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaabbb"
argument_list|)
operator|<<
literal|0
operator|<<
literal|6
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)a*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((a*a*)*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aaa"
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((a)*(b)*)*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ababa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"ababa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((a)*(b)*)c)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((a)*(b)*)c)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abc"
operator|<<
literal|"ab"
operator|<<
literal|"a"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((a)*(b)*)c)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap12"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(((a)*(b)*)c)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcac"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"ac"
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(to|top)?(o|polo)?(gical|o?logical)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"topological"
argument_list|)
operator|<<
literal|0
operator|<<
literal|11
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"top"
operator|<<
literal|"o"
operator|<<
literal|"logical"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cap14"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
comment|// concatenation
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ba"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cat08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abab"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abbaababab"
argument_list|)
operator|<<
literal|4
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|indexIn_addMoreRows
argument_list|(
name|stri
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|indexIn_addMoreRows
name|void
name|tst_QRegExp
operator|::
name|indexIn_addMoreRows
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|stri
parameter_list|)
block|{
comment|// from Perl Cookbook
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(m*)(d?c{0,3}|c[dm])(1?x{0,3}|x[lc])(v?i{0,3}|i[vx])$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"mmxl"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"mm"
operator|<<
literal|""
operator|<<
literal|"xl"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(\\S+)(\\s+)(\\S+)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" a   b"
argument_list|)
operator|<<
literal|1
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"   "
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(\\w+)\\s*=\\s*(.*)\\s*$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" PATH=. "
argument_list|)
operator|<<
literal|1
operator|<<
literal|7
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"PATH"
operator|<<
literal|". "
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".{80,}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0000000011111111222222223333333344444444555"
literal|"5555566666666777777778888888899999999000000"
literal|"00aaaaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|96
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(\\d+)/(\\d+)/(\\d+) (\\d+):(\\d+):(\\d+)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1978/05/24 07:30:00"
argument_list|)
operator|<<
literal|0
operator|<<
literal|19
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"1978"
operator|<<
literal|"05"
operator|<<
literal|"24"
operator|<<
literal|"07"
operator|<<
literal|"30"
operator|<<
literal|"00"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/usr/bin"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/usr/local/bin:/usr/bin"
argument_list|)
operator|<<
literal|15
operator|<<
literal|8
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%([0-9A-Fa-f]{2})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"http://%7f"
argument_list|)
operator|<<
literal|7
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"7f"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/\\*.*\\*/"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"i++; /* increment i */"
argument_list|)
operator|<<
literal|5
operator|<<
literal|17
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^\\s+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   aaa   "
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\\s+$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"   aaa   "
argument_list|)
operator|<<
literal|6
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.*::"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Box::cat"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^([01]?\\d\\d|2[0-4]\\d|25[0-5])\\.([01]?\\"
literal|"d\\d|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d|2[0-"
literal|"4]\\d|25[0-5])\\.([01]?\\d\\d|2[0-4]\\d|25["
literal|"0-5])$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"255.00.40.30"
argument_list|)
operator|<<
literal|0
operator|<<
literal|12
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"255"
operator|<<
literal|"00"
operator|<<
literal|"40"
operator|<<
literal|"30"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook12"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^.*/"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" /usr/local/bin/moc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|16
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":co#(\\d+):"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bla:co#55:"
argument_list|)
operator|<<
literal|3
operator|<<
literal|7
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"55"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook14"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"linux"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"alphalinuxinunix"
argument_list|)
operator|<<
literal|5
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"cook15"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(\\d+\\.?\\d*|\\.\\d+)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"0.0.5"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"0.0"
argument_list|)
expr_stmt|;
comment|// mathematical trivia
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aaaa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|8
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aaaaaaaa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(a\\1*)$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaaaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^a(?:a(\\1a))*$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^a(?:a(\\1a))*$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:((?:^a)?\\2\\3)(\\3\\1|(?=a$))(\\1\\2|("
literal|"?=a$)))*a$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math14"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:((?:^a)?\\2\\3)(\\3\\1|(?=a$))(\\1\\2|("
literal|"?=a$)))*a$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math17"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:(a(?:(\\1\\3)(\\1\\2))*(?:\\1\\3)?)|((?"
literal|":(\\4(?:^a)?\\6)(\\4\\5))*(?:\\4\\6)?))$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"aaa"
operator|<<
literal|"a"
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math18"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:(a(?:(\\1\\3)(\\1\\2))*(?:\\1\\3)?)|((?"
literal|":(\\4(?:^a)?\\6)(\\4\\5))*(?:\\4\\6)?))$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aaaaa"
operator|<<
literal|"a"
operator|<<
literal|"aaa"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math19"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:(a(?:(\\1\\3)(\\1\\2))*(?:\\1\\3)?)|((?"
literal|":(\\4(?:^a)?\\6)(\\4\\5))*(?:\\4\\6)?))$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|8
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"aaaaaaaa"
operator|<<
literal|"a"
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math20"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(?:(a(?:(\\1\\3)(\\1\\2))*(?:\\1\\3)?)|((?"
literal|":(\\4(?:^a)?\\6)(\\4\\5))*(?:\\4\\6)?))$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaaaa"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"math21"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"^(aa+)\\1+$"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaaaaaaaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|12
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"aa"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|squareRegExp
index|[]
init|=
block|{
literal|"^a(?:(\\1aa)a)*$"
block|,
literal|"^(\\2(\\1a))+$"
block|,
literal|"^((\\2a)*)\\1\\2a$"
block|,
literal|0
block|}
decl_stmt|;
name|int
name|ii
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|squareRegExp
index|[
name|ii
index|]
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
name|j
operator|++
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|QString
operator|::
name|asprintf
argument_list|(
literal|"square%.1d%.2d"
argument_list|,
name|ii
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|QString
name|target
init|=
literal|""
decl_stmt|;
name|target
operator|.
name|fill
argument_list|(
literal|'a'
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|len
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|*
name|k
operator|<=
name|j
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|k
operator|*
name|k
operator|==
name|j
condition|)
block|{
name|pos
operator|=
literal|0
expr_stmt|;
name|len
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
name|name
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
name|squareRegExp
index|[
name|ii
index|]
argument_list|)
operator|<<
name|target
operator|<<
name|pos
operator|<<
name|len
operator|<<
name|QStringList
argument_list|(
literal|"IGNORE ME"
argument_list|)
expr_stmt|;
block|}
name|ii
operator|++
expr_stmt|;
block|}
comment|// miscellaneous
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"misc00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|email
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"email123@example.com"
argument_list|)
operator|<<
literal|0
operator|<<
literal|20
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"misc01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[0-9]*\\.[0-9]+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"pi = 3.14"
argument_list|)
operator|<<
literal|5
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// or operator
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xxx"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b|)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b|)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:||b||)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:||b||)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cc"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cba"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:ab|ba)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aba"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:ab|ba)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bab"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or12"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:ab|ba)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"caba"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"or13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:ab|ba)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"cbab"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// quantifiers
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,0})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,0})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,0})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xyz"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j]))?)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j]))?)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j]))?)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j]))?)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j]))?)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,3})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,3})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,3})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abc"
operator|<<
literal|"c"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,3})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcde"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abc"
operator|<<
literal|"c"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua12"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){2,4})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){2,4})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ab"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"ab"
operator|<<
literal|"b"
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua14"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){2,4})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcd"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abcd"
operator|<<
literal|"d"
operator|<<
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua15"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){2,4})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abcd"
operator|<<
literal|"d"
operator|<<
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua16"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){2,4})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xaybcd"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"bcd"
operator|<<
literal|"d"
operator|<<
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua17"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){0,})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|8
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"abcdefgh"
operator|<<
literal|"h"
operator|<<
literal|"h"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua18"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"((([a-j])){,0})"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua19"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"123332333"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"123332333"
operator|<<
literal|"2333"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua20"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12333323333233331233332333323333"
argument_list|)
operator|<<
literal|0
operator|<<
literal|32
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"1233332333323333"
operator|<<
literal|"23333"
operator|<<
literal|"3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua21"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua22"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12333"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua23"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12333233"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"qua24"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(1(2(3){3,4}){2,3}){1,2}"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"122333"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// star operator
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star00"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star01"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star02"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star03"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star04"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star05"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbbbaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star06"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbbbaaabbaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star07"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b)*(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star08"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b)*(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star09"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b)*(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"aaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star10"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b)*(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbbbaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|7
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star11"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:b)*(?:a)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bbbbaaabbaaaaa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|7
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star12"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star13"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abac"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star14"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b|)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star15"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:a|b|)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abac"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|stri
operator|+
literal|"star16"
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(?:ab|ba|b)*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abbbababbbaaab"
argument_list|)
operator|<<
literal|0
operator|<<
literal|11
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exactMatch
name|void
name|tst_QRegExp
operator|::
name|exactMatch
parameter_list|()
block|{
name|QRegExp
name|rx_d
argument_list|(
literal|"\\d"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx_s
argument_list|(
literal|"\\s"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx_w
argument_list|(
literal|"\\w"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx_D
argument_list|(
literal|"\\D"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx_S
argument_list|(
literal|"\\S"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx_W
argument_list|(
literal|"\\W"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|65536
condition|;
name|i
operator|++
control|)
block|{
name|QChar
name|ch
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bool
name|is_d
init|=
operator|(
name|ch
operator|.
name|category
argument_list|()
operator|==
name|QChar
operator|::
name|Number_DecimalDigit
operator|)
decl_stmt|;
name|bool
name|is_s
init|=
name|ch
operator|.
name|isSpace
argument_list|()
decl_stmt|;
name|bool
name|is_w
init|=
operator|(
name|ch
operator|.
name|isLetterOrNumber
argument_list|()
operator|||
name|ch
operator|.
name|isMark
argument_list|()
operator|||
name|ch
operator|==
literal|'_'
operator|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx_d
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|==
name|is_d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx_s
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|==
name|is_s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx_w
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|==
name|is_w
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx_D
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|!=
name|is_d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx_S
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|!=
name|is_s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx_W
operator|.
name|exactMatch
argument_list|(
name|QString
argument_list|(
name|ch
argument_list|)
argument_list|)
operator|!=
name|is_w
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|capturedTexts
name|void
name|tst_QRegExp
operator|::
name|capturedTexts
parameter_list|()
block|{
name|QRegExp
name|rx1
argument_list|(
literal|"a*(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
name|rx1
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx2
argument_list|(
literal|"a*(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|rx2
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx3
argument_list|(
literal|"(?:a|aa)(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
name|rx3
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx3
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx3
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx3
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx4
argument_list|(
literal|"(?:a|aa)(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|rx4
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx4
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx4
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx4
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx5
argument_list|(
literal|"(a)*(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
name|rx5
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx5
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx5
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx5
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx5
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx6
argument_list|(
literal|"(a)*(a*)"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|rx6
operator|.
name|exactMatch
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx6
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx6
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx6
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx6
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx7
argument_list|(
literal|"([A-Za-z_])([A-Za-z_0-9]*)"
argument_list|)
decl_stmt|;
name|rx7
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|rx7
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx7
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|rx7
operator|.
name|indexIn
argument_list|(
literal|"(10 + delta4) * 32"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pos
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx7
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx7
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"delta4"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx7
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx7
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"elta4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexIn
name|void
name|tst_QRegExp
operator|::
name|indexIn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|regexpStr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|caps
operator|.
name|prepend
argument_list|(
literal|"dummy cap(0)"
argument_list|)
expr_stmt|;
block|{
name|QRegExp
name|rx
argument_list|(
name|regexpStr
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mypos
init|=
name|rx
operator|.
name|indexIn
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|int
name|mylen
init|=
name|rx
operator|.
name|matchedLength
argument_list|()
decl_stmt|;
name|QStringList
name|mycaps
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mypos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mylen
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|caps
index|[
literal|1
index|]
operator|!=
literal|"IGNORE ME"
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mycaps
operator|.
name|count
argument_list|()
argument_list|,
name|caps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|mycaps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|mycaps
index|[
name|i
index|]
argument_list|,
name|caps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// same as above, but with RegExp2
block|{
name|QRegExp
name|rx
argument_list|(
name|regexpStr
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mypos
init|=
name|rx
operator|.
name|indexIn
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|int
name|mylen
init|=
name|rx
operator|.
name|matchedLength
argument_list|()
decl_stmt|;
name|QStringList
name|mycaps
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mypos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mylen
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|caps
index|[
literal|1
index|]
operator|!=
literal|"IGNORE ME"
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mycaps
operator|.
name|count
argument_list|()
argument_list|,
name|caps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|mycaps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|mycaps
index|[
name|i
index|]
argument_list|,
name|caps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|lastIndexIn
name|void
name|tst_QRegExp
operator|::
name|lastIndexIn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|regexpStr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|caps
argument_list|)
expr_stmt|;
name|caps
operator|.
name|prepend
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
comment|/*       The test data was really designed for indexIn(), not       lastIndexIn(), but it turns out that we can reuse much of that       for lastIndexIn().     */
block|{
name|QRegExp
name|rx
argument_list|(
name|regexpStr
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mypos
init|=
name|rx
operator|.
name|lastIndexIn
argument_list|(
name|target
argument_list|,
name|target
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|mylen
init|=
name|rx
operator|.
name|matchedLength
argument_list|()
decl_stmt|;
name|QStringList
name|mycaps
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
if|if
condition|(
name|mypos
operator|<=
name|pos
operator|||
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mypos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mylen
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|caps
index|[
literal|1
index|]
operator|!=
literal|"IGNORE ME"
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mycaps
operator|.
name|count
argument_list|()
argument_list|,
name|caps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|mycaps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|mycaps
index|[
name|i
index|]
argument_list|,
name|caps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
name|QRegExp
name|rx
argument_list|(
name|regexpStr
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|mypos
init|=
name|rx
operator|.
name|lastIndexIn
argument_list|(
name|target
argument_list|,
name|target
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|mylen
init|=
name|rx
operator|.
name|matchedLength
argument_list|()
decl_stmt|;
name|QStringList
name|mycaps
init|=
name|rx
operator|.
name|capturedTexts
argument_list|()
decl_stmt|;
if|if
condition|(
name|mypos
operator|<=
name|pos
operator|||
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mypos
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mylen
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|caps
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|caps
index|[
literal|1
index|]
operator|!=
literal|"IGNORE ME"
condition|)
block|{
name|QCOMPARE
argument_list|(
name|mycaps
operator|.
name|count
argument_list|()
argument_list|,
name|caps
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|mycaps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|mycaps
index|[
name|i
index|]
argument_list|,
name|caps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|matchedLength
name|void
name|tst_QRegExp
operator|::
name|matchedLength
parameter_list|()
block|{
name|QRegExp
name|r1
argument_list|(
literal|"a+"
argument_list|)
decl_stmt|;
name|r1
operator|.
name|exactMatch
argument_list|(
literal|"aaaba"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|email
specifier|const
name|char
name|email
index|[]
init|=
literal|"^[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff"
literal|"]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\x"
literal|"ff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:"
literal|"(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@"
literal|",;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\""
literal|"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?"
literal|":\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x"
literal|"80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*"
literal|")*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*"
literal|"(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\"
literal|"\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015("
literal|")]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>"
literal|"@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\["
literal|"\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\"
literal|"x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x"
literal|"80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\"
literal|"015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\"
literal|"\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x"
literal|"80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\"
literal|"015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\"
literal|"\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\["
literal|"\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037"
literal|"\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff"
literal|"])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80"
literal|"-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x"
literal|"80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]"
literal|"*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x"
literal|"80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\"
literal|"\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040"
literal|"\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\"
literal|"040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xf"
literal|"f\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-"
literal|"\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015"
literal|"()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x8"
literal|"0-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*|(?:[^(\\040)<>@,;:\".\\\\\\[\\"
literal|"]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x"
literal|"80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\"
literal|"\\x80-\\xff\\n\\015\"]*)*\")[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\"
literal|"010\\012-\\037]*(?:(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x8"
literal|"0-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\"
literal|"x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)|\"[^\\\\"
literal|"\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015"
literal|"\"]*)*\")[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]*)*<"
literal|"[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]"
literal|"|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xf"
literal|"f\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:@"
literal|"[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]"
literal|"|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xf"
literal|"f\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:["
literal|"^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:"
literal|"\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015"
literal|"\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n"
literal|"\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:"
literal|"\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff"
literal|"\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff"
literal|"\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*("
literal|"?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\x"
literal|"ff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-"
literal|"\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xf"
literal|"f])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\"
literal|"040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\"
literal|"([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\"
literal|"n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*(?:,["
literal|"\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|"
literal|"\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff"
literal|"\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*@[\\0"
literal|"40\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\("
literal|"[^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n"
literal|"\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\"
literal|"040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\"
literal|"\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]"
literal|"]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()"
literal|"]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\"
literal|"x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015"
literal|"()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015"
literal|"()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^"
literal|"\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\0"
literal|"15()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x8"
literal|"0-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?"
literal|":[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*("
literal|"?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\"
literal|"x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]"
literal|"*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)*)*:[\\040\\t]*"
literal|"(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\"
literal|"\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015("
literal|")]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*)?(?:[^(\\040)"
literal|"<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\"
literal|"[\\]\\000-\\037\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^"
literal|"\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\"
literal|"\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\"
literal|"n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\"
literal|"\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\040\\t]*(?:\\([^\\"
literal|"\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff"
literal|"\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^"
literal|"\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\"
literal|"\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\0"
literal|"37\\x80-\\xff])|\"[^\\\\\\x80-\\xff\\n\\015\"]*(?:\\\\[^\\x80-\\xff][^"
literal|"\\\\\\x80-\\xff\\n\\015\"]*)*\")[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n"
literal|"\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:"
literal|"\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff"
literal|"\\n\\015()]*)*\\)[\\040\\t]*)*)*@[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n"
literal|"\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:"
literal|"\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff"
literal|"\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\0"
literal|"37\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff])"
literal|"|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]]|\\\\[^\\x80-\\xff])*\\])[\\040"
literal|"\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\([^"
literal|"\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n\\"
literal|"015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:\\.[\\0"
literal|"40\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()]*(?:(?:\\\\[^\\x80-\\xff]|\\("
literal|"[^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\x80-\\xff][^\\\\\\x80-\\xff\\n"
literal|"\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015()]*)*\\)[\\040\\t]*)*(?:[^(\\"
literal|"040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+(?![^(\\040)<>@,;:\".\\"
literal|"\\\\[\\]\\000-\\037\\x80-\\xff])|\\[(?:[^\\\\\\x80-\\xff\\n\\015\\[\\]"
literal|"]|\\\\[^\\x80-\\xff])*\\])[\\040\\t]*(?:\\([^\\\\\\x80-\\xff\\n\\015()"
literal|"]*(?:(?:\\\\[^\\x80-\\xff]|\\([^\\\\\\x80-\\xff\\n\\015()]*(?:\\\\[^\\"
literal|"x80-\\xff][^\\\\\\x80-\\xff\\n\\015()]*)*\\))[^\\\\\\x80-\\xff\\n\\015"
literal|"()]*)*\\)[\\040\\t]*)*)*>)$"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|wildcard_data
name|void
name|tst_QRegExp
operator|::
name|wildcard_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rxp"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"foundIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.html"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.html"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.htm"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foobarbaz"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Qt Rocks!"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".html"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.cpp"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".???l"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"?"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"?m"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".h[a-z]ml"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".h[A-Z]ml"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.html"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".h[A-Z]ml"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test.hTml"
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wildcard
name|void
name|tst_QRegExp
operator|::
name|wildcard
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rxp
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|foundIndex
argument_list|)
expr_stmt|;
name|QRegExp
name|r
argument_list|(
name|rxp
argument_list|)
decl_stmt|;
name|r
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|WildcardUnix
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|indexIn
argument_list|(
name|string
argument_list|)
argument_list|,
name|foundIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testEscapingWildcard_data
name|void
name|tst_QRegExp
operator|::
name|testEscapingWildcard_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"teststring"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isMatching"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"[ Not escaped"
argument_list|)
operator|<<
literal|"[Qt;"
operator|<<
literal|"[Qt;"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"[ Escaped"
argument_list|)
operator|<<
literal|"\\[Qt;"
operator|<<
literal|"[Qt;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"] Not escaped"
argument_list|)
operator|<<
literal|"]Ik;"
operator|<<
literal|"]Ik;"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"] Escaped"
argument_list|)
operator|<<
literal|"\\]Ip;"
operator|<<
literal|"]Ip;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"? Not escaped valid"
argument_list|)
operator|<<
literal|"?Ou:"
operator|<<
literal|".Ou:"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"? Not escaped invalid"
argument_list|)
operator|<<
literal|"?Tr;"
operator|<<
literal|"Tr;"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"? Escaped"
argument_list|)
operator|<<
literal|"\\?O;"
operator|<<
literal|"?O;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"[] not escaped"
argument_list|)
operator|<<
literal|"[lL]"
operator|<<
literal|"l"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"[] escaped"
argument_list|)
operator|<<
literal|"\\[\\]"
operator|<<
literal|"[]"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case [[]"
argument_list|)
operator|<<
literal|"[[abc]"
operator|<<
literal|"["
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case []abc] match ]"
argument_list|)
operator|<<
literal|"[]abc]"
operator|<<
literal|"]"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case []abc] match a"
argument_list|)
operator|<<
literal|"[]abc]"
operator|<<
literal|"a"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case [abc] match a"
argument_list|)
operator|<<
literal|"[abc]"
operator|<<
literal|"a"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case []] don't match ["
argument_list|)
operator|<<
literal|"[]abc]"
operator|<<
literal|"["
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case [^]abc] match d"
argument_list|)
operator|<<
literal|"[^]abc]"
operator|<<
literal|"d"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case [^]abc] don't match ]"
argument_list|)
operator|<<
literal|"[^]abc]"
operator|<<
literal|"]"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"* Not escaped with char"
argument_list|)
operator|<<
literal|"*Te;"
operator|<<
literal|"12345Te;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"* Not escaped without char"
argument_list|)
operator|<<
literal|"*Ch;"
operator|<<
literal|"Ch;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"* Not escaped invalid"
argument_list|)
operator|<<
literal|"*Ro;"
operator|<<
literal|"o;"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"* Escaped"
argument_list|)
operator|<<
literal|"\\[Cks;"
operator|<<
literal|"[Cks;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a true '\\' in input"
argument_list|)
operator|<<
literal|"\\Qt;"
operator|<<
literal|"\\Qt;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two true '\\' in input"
argument_list|)
operator|<<
literal|"\\\\Qt;"
operator|<<
literal|"\\\\Qt;"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a '\\' at the end"
argument_list|)
operator|<<
literal|"\\\\Qt;\\"
operator|<<
literal|"\\\\Qt;\\"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testEscapingWildcard
name|void
name|tst_QRegExp
operator|::
name|testEscapingWildcard
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QRegExp
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|re
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|WildcardUnix
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|teststring
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isMatching
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
name|teststring
argument_list|)
argument_list|,
name|isMatching
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInvalidWildcard_data
name|void
name|tst_QRegExp
operator|::
name|testInvalidWildcard_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isValid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid []"
argument_list|)
operator|<<
literal|"[abc]"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid ["
argument_list|)
operator|<<
literal|"[abc"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending ["
argument_list|)
operator|<<
literal|"abc["
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending ]"
argument_list|)
operator|<<
literal|"abc]"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending [^"
argument_list|)
operator|<<
literal|"abc[^"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending [\\"
argument_list|)
operator|<<
literal|"abc[\\"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending []"
argument_list|)
operator|<<
literal|"abc[]"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending [["
argument_list|)
operator|<<
literal|"abc[["
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInvalidWildcard
name|void
name|tst_QRegExp
operator|::
name|testInvalidWildcard
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QRegExp
name|re
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|re
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isValid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|isValid
argument_list|()
argument_list|,
name|isValid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caretAnchoredOptimization
name|void
name|tst_QRegExp
operator|::
name|caretAnchoredOptimization
parameter_list|()
block|{
name|QString
name|s
init|=
literal|"---babnana----"
decl_stmt|;
name|s
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"^-*|(-*)$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"babnana"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"---babnana----"
expr_stmt|;
name|s
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"^-*|(-{0,})$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"babnana"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"---babnana----"
expr_stmt|;
name|s
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"^-*|(-{1,})$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"babnana"
argument_list|)
expr_stmt|;
name|s
operator|=
literal|"---babnana----"
expr_stmt|;
name|s
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"^-*|(-+)$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s
operator|==
literal|"babnana"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QRegExp
operator|::
name|isEmpty
parameter_list|()
block|{
name|QRegExp
name|rx1
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx2
init|=
name|rx1
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPattern
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPattern
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPattern
argument_list|(
literal|")("
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPattern
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
name|rx2
operator|.
name|setPattern
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
specifier|static
name|QRegExp
name|re
argument_list|(
literal|"foo.*bar"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|staticRegExp
name|void
name|tst_QRegExp
operator|::
name|staticRegExp
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|re
operator|.
name|exactMatch
argument_list|(
literal|"fooHARRYbar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the actual test is that a static regexp should not crash
block|}
end_function
begin_function
DECL|function|rainersSlowRegExpCopyBug
name|void
name|tst_QRegExp
operator|::
name|rainersSlowRegExpCopyBug
parameter_list|()
block|{
comment|// this test should take an extreme amount of time if QRegExp is broken
name|QRegExp
name|original
argument_list|(
name|email
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
else|#
directive|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100000
condition|;
operator|++
name|i
control|)
block|{
endif|#
directive|endif
name|QRegExp
name|copy
init|=
name|original
decl_stmt|;
operator|(
name|void
operator|)
name|copy
operator|.
name|exactMatch
argument_list|(
literal|"~"
argument_list|)
expr_stmt|;
name|QRegExp
name|copy2
init|=
name|original
decl_stmt|;
block|}
block|}
DECL|function|nonExistingBackReferenceBug
name|void
name|tst_QRegExp
operator|::
name|nonExistingBackReferenceBug
parameter_list|()
block|{
block|{
name|QRegExp
name|rx
argument_list|(
literal|"<\\5>"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"<>"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|"<>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegExp
name|rx
argument_list|(
literal|"<\\1>"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"<>"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|"<>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegExp
name|rx
argument_list|(
literal|"(?:<\\1>)\\1\\5\\4"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
literal|"<>"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|"<>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Thread
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|Thread
name|Thread
parameter_list|(
specifier|const
name|QRegExp
modifier|&
name|rx
parameter_list|)
member_init_list|:
name|rx
argument_list|(
name|rx
argument_list|)
block|{}
name|void
name|run
parameter_list|()
function_decl|;
DECL|member|rx
name|QRegExp
name|rx
decl_stmt|;
block|}
class|;
DECL|function|run
name|void
name|Thread
operator|::
name|run
parameter_list|()
block|{
name|QString
name|str
init|=
literal|"abc"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|str
operator|+=
name|str
expr_stmt|;
name|str
operator|+=
literal|"abbbdekcz"
expr_stmt|;
name|int
name|x
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
operator|++
name|j
control|)
block|{
else|#
directive|else
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10000
condition|;
operator|++
name|j
control|)
block|{
endif|#
directive|endif
name|x
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|3072
argument_list|)
expr_stmt|;
block|}
DECL|function|reentrancy
name|void
name|tst_QRegExp
operator|::
name|reentrancy
parameter_list|()
block|{
name|QRegExp
name|rx
argument_list|(
literal|"(ab{2,}d?e?f?[g-z]?)c"
argument_list|)
decl_stmt|;
name|Thread
modifier|*
name|threads
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|rx
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|->
name|wait
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
operator|delete
name|threads
index|[
name|i
index|]
expr_stmt|;
block|}
DECL|class|Thread2
class|class
name|Thread2
super|:
specifier|public
name|QThread
block|{
public|public:
name|void
name|run
parameter_list|()
function_decl|;
block|}
class|;
DECL|function|run
name|void
name|Thread2
operator|::
name|run
parameter_list|()
block|{
name|QRegExp
name|rx
argument_list|(
literal|"(ab{2,}d?e?f?[g-z]?)c"
argument_list|)
decl_stmt|;
name|QString
name|str
init|=
literal|"abc"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|str
operator|+=
name|str
expr_stmt|;
name|str
operator|+=
literal|"abbbdekcz"
expr_stmt|;
name|int
name|x
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
operator|++
name|j
control|)
block|{
else|#
directive|else
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10000
condition|;
operator|++
name|j
control|)
block|{
endif|#
directive|endif
name|x
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|3072
argument_list|)
expr_stmt|;
block|}
comment|// Test that multiple threads can construct equal QRegExps.
comment|// (In the current QRegExp design each engine instatance will share
comment|// the same cache key, so the threads will race for the cache entry
comment|// in the global cache.)
DECL|function|threadsafeEngineCache
name|void
name|tst_QRegExp
operator|::
name|threadsafeEngineCache
parameter_list|()
block|{
name|Thread2
modifier|*
name|threads
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread2
argument_list|()
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|->
name|wait
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|threads
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|threads
index|[
literal|0
index|]
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
operator|delete
name|threads
index|[
name|i
index|]
expr_stmt|;
block|}
DECL|function|prepareEngineOptimization
name|void
name|tst_QRegExp
operator|::
name|prepareEngineOptimization
parameter_list|()
block|{
name|QRegExp
name|rx0
argument_list|(
literal|"(f?)(?:(o?)(o?))?"
argument_list|)
decl_stmt|;
name|QRegExp
name|rx1
argument_list|(
name|rx0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|exactMatch
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|"o"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|"o"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|pos
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|exactMatch
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|"o"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|pos
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QRegExp
name|rx2
init|=
name|rx1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|"o"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|pos
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|"o"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|pos
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|exactMatch
argument_list|(
literal|"fo"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|capturedTexts
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"fo"
operator|<<
literal|"f"
operator|<<
literal|"o"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx1
operator|.
name|pos
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QRegExp
name|rx3
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx3
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx4
argument_list|(
literal|"foo"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx4
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx5
argument_list|(
literal|"foo"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx5
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx6
argument_list|(
literal|"foo"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx6
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx7
argument_list|(
literal|"foo"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx7
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx8
argument_list|(
literal|"]["
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx8
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx9
argument_list|(
literal|"]["
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx9
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx10
argument_list|(
literal|"]["
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx10
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QRegExp
name|rx11
argument_list|(
literal|"]["
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rx11
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx11
operator|.
name|exactMatch
argument_list|(
literal|"]["
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx11
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rx11
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPattern
argument_list|(
literal|"(foo)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rx11
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|indexIn
argument_list|(
literal|"ofoo"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|/*         This behavior isn't entirely consistent with setPatter(),         setPatternSyntax(), and setCaseSensitivity(), but I'm testing         it here to ensure that it doesn't change subtly in future         releases.     */
name|rx11
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setMinimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rx11
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx11
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|swap
name|void
name|tst_QRegExp
operator|::
name|swap
parameter_list|()
block|{
name|QRegExp
name|r1
argument_list|(
name|QLatin1String
argument_list|(
literal|".*"
argument_list|)
argument_list|)
decl_stmt|,
name|r2
argument_list|(
name|QLatin1String
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
decl_stmt|;
name|r1
operator|.
name|swap
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r1
operator|.
name|pattern
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r2
operator|.
name|pattern
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|".*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|operator_eq
name|void
name|tst_QRegExp
operator|::
name|operator_eq
parameter_list|()
block|{
specifier|const
name|int
name|I
init|=
literal|2
decl_stmt|;
specifier|const
name|int
name|J
init|=
literal|4
decl_stmt|;
specifier|const
name|int
name|K
init|=
literal|2
decl_stmt|;
specifier|const
name|int
name|ELL
init|=
literal|2
decl_stmt|;
name|QRegExp
name|rxtable
index|[
name|I
operator|*
name|J
operator|*
name|K
operator|*
name|ELL
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|I
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|J
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|K
condition|;
operator|++
name|k
control|)
block|{
for|for
control|(
name|int
name|ell
init|=
literal|0
init|;
name|ell
operator|<
name|ELL
condition|;
operator|++
name|ell
control|)
block|{
name|Qt
operator|::
name|CaseSensitivity
name|cs
init|=
name|i
operator|==
literal|0
condition|?
name|Qt
operator|::
name|CaseSensitive
else|:
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
name|QRegExp
operator|::
name|PatternSyntax
name|syntax
init|=
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|bool
name|minimal
init|=
name|k
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|ell
operator|==
literal|0
condition|)
block|{
name|QRegExp
name|rx
argument_list|(
literal|"foo"
argument_list|,
name|cs
argument_list|,
name|syntax
argument_list|)
decl_stmt|;
name|rx
operator|.
name|setMinimal
argument_list|(
name|minimal
argument_list|)
expr_stmt|;
name|rxtable
index|[
name|n
operator|++
index|]
operator|=
name|rx
expr_stmt|;
block|}
else|else
block|{
name|QRegExp
name|rx
decl_stmt|;
name|rx
operator|.
name|setPattern
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setCaseSensitivity
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setMinimal
argument_list|(
name|minimal
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setPattern
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setPatternSyntax
argument_list|(
name|syntax
argument_list|)
expr_stmt|;
name|rx
operator|.
name|exactMatch
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|rxtable
index|[
name|n
operator|++
index|]
operator|=
name|rx
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|I
operator|*
name|J
operator|*
name|K
operator|*
name|ELL
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|I
operator|*
name|J
operator|*
name|K
operator|*
name|ELL
condition|;
operator|++
name|j
control|)
block|{
name|QCOMPARE
argument_list|(
name|rxtable
index|[
name|i
index|]
operator|==
name|rxtable
index|[
name|j
index|]
argument_list|,
name|i
operator|/
name|ELL
operator|==
name|j
operator|/
name|ELL
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rxtable
index|[
name|i
index|]
operator|!=
name|rxtable
index|[
name|j
index|]
argument_list|,
name|i
operator|/
name|ELL
operator|!=
name|j
operator|/
name|ELL
argument_list|)
expr_stmt|;
comment|// this just happens to have no hash collisions. If at some point
comment|// we get collisions, restrict the test to only equal elements:
name|QCOMPARE
argument_list|(
name|qHash
argument_list|(
name|rxtable
index|[
name|i
index|]
argument_list|)
operator|==
name|qHash
argument_list|(
name|rxtable
index|[
name|j
index|]
argument_list|)
argument_list|,
name|i
operator|/
name|ELL
operator|==
name|j
operator|/
name|ELL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// This test aims to ensure that the values returned by pos() and cap()
comment|// are consistent.
DECL|function|posAndCapConsistency_data
name|void
name|tst_QRegExp
operator|::
name|posAndCapConsistency_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"reStr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"matchIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pos0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pos1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pos2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cap0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cap1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cap2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no match"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a) (b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b a"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both captures match"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a) (b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"a b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first capture matches @0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)|(b*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"axx"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second capture matches @0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)|(b*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bxx"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first capture empty match @0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a*)|(b*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xx"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second capture empty match @0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)|(b*)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xx"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first capture matches @1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x(?:(a*)|(b*))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-xa"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|"xa"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second capture matches @1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x(?:(a*)|(b*))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-xb"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"xb"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first capture empty match @1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x(?:(a*)|(b*))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-xx"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second capture empty match @1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x(?:(a)|(b*))"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-xx"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first capture matches @2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)|(b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xxa"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|2
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second capture matches @2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)|(b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xxb"
argument_list|)
operator|<<
literal|2
operator|<<
literal|2
operator|<<
operator|-
literal|1
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no match - with options"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"(a)|(b)"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"xx"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
DECL|function|posAndCapConsistency
name|void
name|tst_QRegExp
operator|::
name|posAndCapConsistency
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|reStr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|matchIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pos2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cap0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cap1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cap2
argument_list|)
expr_stmt|;
name|QRegExp
name|re
argument_list|(
name|reStr
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|captureCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|capturedTexts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|indexIn
argument_list|(
name|text
argument_list|)
argument_list|,
name|matchIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pos
argument_list|(
literal|0
argument_list|)
argument_list|,
name|pos0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pos
argument_list|(
literal|1
argument_list|)
argument_list|,
name|pos1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|pos
argument_list|(
literal|2
argument_list|)
argument_list|,
name|pos2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
name|cap0
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cap0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
name|cap1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cap1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
name|cap2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cap2
argument_list|)
expr_stmt|;
block|}
DECL|function|interval
name|void
name|tst_QRegExp
operator|::
name|interval
parameter_list|()
block|{
block|{
name|QRegExp
name|exp
argument_list|(
literal|"a{0,1}"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|exp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegExp
name|exp
argument_list|(
literal|"a{1,1}"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|exp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QRegExp
name|exp
argument_list|(
literal|"a{1,0}"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|exp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|validityCheck_data
name|void
name|tst_QRegExp
operator|::
name|validityCheck_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"validity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity01"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc.*abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity03"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"[a-z"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validity04"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a(b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
DECL|function|validityCheck
name|void
name|tst_QRegExp
operator|::
name|validityCheck
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QRegExp
name|rx
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|QTEST
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|,
literal|"validity"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|pos
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|cap
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QRegExp
name|rx2
argument_list|(
name|rx
argument_list|)
decl_stmt|;
name|QTEST
argument_list|(
name|rx2
operator|.
name|isValid
argument_list|()
argument_list|,
literal|"validity"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|matchedLength
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|pos
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx2
operator|.
name|cap
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|escapeSequences
name|void
name|tst_QRegExp
operator|::
name|escapeSequences
parameter_list|()
block|{
name|QString
name|perlSyntaxSpecialChars
argument_list|(
literal|"0123456789afnrtvbBdDwWsSx\\|[]{}()^$?+*"
argument_list|)
decl_stmt|;
name|QString
name|w3cXmlSchema11SyntaxSpecialChars
argument_list|(
literal|"cCiIpP"
argument_list|)
decl_stmt|;
comment|// as well as the perl ones
for|for
control|(
name|int
name|i
init|=
literal|' '
init|;
name|i
operator|<=
literal|127
condition|;
operator|++
name|i
control|)
block|{
name|QLatin1Char
name|c
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|perlSyntaxSpecialChars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QRegExp
name|rx
argument_list|(
name|QString
argument_list|(
literal|"\\%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
decl_stmt|;
comment|// we'll never have c == 'a' since it's a special character
name|QString
name|s
init|=
name|QString
argument_list|(
literal|"aaa%1aaa"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rx
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|RegExp2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|w3cXmlSchema11SyntaxSpecialChars
operator|.
name|indexOf
argument_list|(
name|c
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|rx
operator|.
name|setPatternSyntax
argument_list|(
name|QRegExp
operator|::
name|W3CXmlSchema11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rx
operator|.
name|indexIn
argument_list|(
name|s
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QRegExp
argument_list|)
end_function
begin_include
include|#
directive|include
file|"tst_qregexp.moc"
end_include
end_unit
