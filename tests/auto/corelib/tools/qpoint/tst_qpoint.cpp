begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qpoint.h>
end_include
begin_class
DECL|class|tst_QPoint
class|class
name|tst_QPoint
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|division
parameter_list|()
function_decl|;
name|void
name|manhattanLength
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|manhattanLength
name|void
name|tst_QPoint
operator|::
name|manhattanLength
parameter_list|()
block|{
block|{
name|QPoint
name|p
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|manhattanLength
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
block|{
name|QPointF
name|p
argument_list|(
literal|10.
argument_list|,
literal|20.
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|manhattanLength
argument_list|()
argument_list|,
literal|30.
argument_list|)
expr_stmt|;
block|}
block|{
name|QPointF
name|p
argument_list|(
literal|10.1
argument_list|,
literal|20.2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|manhattanLength
argument_list|()
argument_list|,
literal|30.3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QPoint
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QPoint
name|obj1
decl_stmt|;
comment|// int QPoint::x()
comment|// void QPoint::setX(int)
name|obj1
operator|.
name|setX
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setX
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setX
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QPoint::y()
comment|// void QPoint::setY(int)
name|obj1
operator|.
name|setY
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setY
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setY
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QPointF
name|obj2
decl_stmt|;
comment|// qreal QPointF::x()
comment|// void QPointF::setX(qreal)
name|obj2
operator|.
name|setX
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0
argument_list|,
name|obj2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setX
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1.1
argument_list|,
name|obj2
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
comment|// qreal QPointF::y()
comment|// void QPointF::setY(qreal)
name|obj2
operator|.
name|setY
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0.0
argument_list|,
name|obj2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setY
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1.1
argument_list|,
name|obj2
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dot
specifier|static
specifier|inline
name|qreal
name|dot
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|a
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|x
argument_list|()
operator|*
name|b
operator|.
name|x
argument_list|()
operator|+
name|a
operator|.
name|y
argument_list|()
operator|*
name|b
operator|.
name|y
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|division
name|void
name|tst_QPoint
operator|::
name|division
parameter_list|()
block|{
block|{
name|QPointF
name|p
argument_list|(
literal|1e-14
argument_list|,
literal|1e-14
argument_list|)
decl_stmt|;
name|p
operator|=
name|p
operator|/
name|sqrt
argument_list|(
name|dot
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|qFuzzyCompare
argument_list|(
name|dot
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QPointF
name|p
argument_list|(
literal|1e-14
argument_list|,
literal|1e-14
argument_list|)
decl_stmt|;
name|p
operator|/=
name|sqrt
argument_list|(
name|dot
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|qFuzzyCompare
argument_list|(
name|dot
argument_list|(
name|p
argument_list|,
name|p
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPoint
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpoint.moc"
end_include
end_unit
