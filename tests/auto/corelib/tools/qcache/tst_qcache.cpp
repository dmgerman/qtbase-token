begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcache.h>
end_include
begin_class
DECL|class|tst_QCache
class|class
name|tst_QCache
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|maxCost
parameter_list|()
function_decl|;
name|void
name|setMaxCost
parameter_list|()
function_decl|;
name|void
name|totalCost
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|operator_bracket_bracket
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|take
parameter_list|()
function_decl|;
name|void
name|axioms_on_key_type
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|Foo
struct|struct
name|Foo
block|{
DECL|member|count
specifier|static
name|int
name|count
decl_stmt|;
DECL|function|Foo
name|Foo
parameter_list|()
member_init_list|:
name|c
argument_list|(
name|count
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|Foo
name|Foo
parameter_list|(
specifier|const
name|Foo
modifier|&
name|o
parameter_list|)
member_init_list|:
name|c
argument_list|(
name|o
operator|.
name|c
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
DECL|function|~Foo
name|~
name|Foo
parameter_list|()
block|{
operator|--
name|count
expr_stmt|;
block|}
DECL|member|c
name|int
name|c
decl_stmt|;
DECL|member|data
name|int
name|data
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|count
name|int
name|Foo
operator|::
name|count
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initTestCase
name|void
name|tst_QCache
operator|::
name|initTestCase
parameter_list|()
block|{
name|Foo
operator|::
name|count
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QCache
operator|::
name|cleanupTestCase
parameter_list|()
block|{
comment|// always check for memory leaks
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxCost
name|void
name|tst_QCache
operator|::
name|maxCost
parameter_list|()
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|cache1
decl_stmt|,
name|cache2
argument_list|(
literal|100
argument_list|)
decl_stmt|,
name|cache3
argument_list|(
literal|200
argument_list|)
decl_stmt|,
name|cache4
argument_list|(
operator|-
literal|50
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache2
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache3
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache4
operator|.
name|maxCost
argument_list|()
argument_list|,
operator|-
literal|50
argument_list|)
expr_stmt|;
comment|// 0 would also make sense
name|cache1
operator|.
name|setMaxCost
argument_list|(
literal|101
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|,
operator|new
name|int
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
operator|new
name|int
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|insert
argument_list|(
literal|"three"
argument_list|,
operator|new
name|int
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|insert
argument_list|(
literal|"four"
argument_list|,
operator|new
name|int
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|insert
argument_list|(
literal|"five"
argument_list|,
operator|new
name|int
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache1
operator|.
name|totalCost
argument_list|()
operator|<=
literal|101
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache1
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|cache1
operator|.
name|setMaxCost
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache1
operator|.
name|maxCost
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cache2
operator|.
name|setMaxCost
argument_list|(
literal|202
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache2
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|202
argument_list|)
expr_stmt|;
name|cache3
operator|.
name|setMaxCost
argument_list|(
operator|-
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache3
operator|.
name|maxCost
argument_list|()
argument_list|,
operator|-
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaxCost
name|void
name|tst_QCache
operator|::
name|setMaxCost
parameter_list|()
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|Foo
argument_list|>
name|cache
decl_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|Foo
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
operator|new
name|Foo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
operator|new
name|Foo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|totalCost
name|void
name|tst_QCache
operator|::
name|totalCost
parameter_list|()
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|cache
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|,
operator|new
name|int
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
operator|new
name|int
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"three"
argument_list|,
operator|new
name|int
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"four"
argument_list|,
operator|new
name|int
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|"four"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"five"
argument_list|,
operator|new
name|int
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|-
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"six"
argument_list|,
operator|new
name|int
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"seven"
argument_list|,
operator|new
name|int
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|98
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"eight"
argument_list|,
operator|new
name|int
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QCache
operator|::
name|clear
parameter_list|()
block|{
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|Foo
argument_list|>
name|cache
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|-
literal|3
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
name|cache
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|Foo
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|300
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
block|{
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|maxCost
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|insert
argument_list|(
literal|"10"
argument_list|,
operator|new
name|Foo
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"11"
argument_list|,
operator|new
name|Foo
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QCache
operator|::
name|insert
parameter_list|()
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|Foo
argument_list|>
name|cache
decl_stmt|;
name|Foo
modifier|*
name|f1
init|=
operator|new
name|Foo
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"one"
argument_list|,
name|f1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|Foo
modifier|*
name|f2
init|=
operator|new
name|Foo
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
name|f2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Foo
modifier|*
name|f3
init|=
operator|new
name|Foo
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
name|f3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|"two"
index|]
operator|==
name|f3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/*         If the new item is too big, any item with the same name in         the cache must still be removed, otherwise the application         might get bad results.     */
name|Foo
modifier|*
name|f4
init|=
operator|new
name|Foo
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"two"
argument_list|,
name|f4
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QCache
operator|::
name|contains
parameter_list|()
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|cache
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|int
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|int
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cache
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_bracket_bracket
name|void
name|tst_QCache
operator|::
name|operator_bracket_bracket
parameter_list|()
block|{
name|QCache
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|cache
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|int
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|0
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|1
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|cache
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
operator|new
name|int
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|1
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|cache
index|[
literal|1
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// check that operator[] doesn't remove the item
name|QVERIFY
argument_list|(
name|cache
index|[
literal|1
index|]
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|cache
index|[
literal|1
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|1
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QCache
operator|::
name|remove
parameter_list|()
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|Foo
argument_list|>
name|cache
decl_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"alpha"
argument_list|,
operator|new
name|Foo
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"beta"
argument_list|,
operator|new
name|Foo
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|cache
operator|.
name|remove
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
literal|"beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|take
name|void
name|tst_QCache
operator|::
name|take
parameter_list|()
block|{
name|QCache
argument_list|<
name|QString
argument_list|,
name|Foo
argument_list|>
name|cache
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|take
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|,
operator|(
name|Foo
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|take
argument_list|(
literal|"alpha"
argument_list|)
argument_list|,
operator|(
name|Foo
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Foo
modifier|*
name|f1
init|=
operator|new
name|Foo
decl_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"alpha"
argument_list|,
name|f1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cache
index|[
literal|"alpha"
index|]
operator|==
name|f1
argument_list|)
expr_stmt|;
name|cache
operator|.
name|insert
argument_list|(
literal|"beta"
argument_list|,
operator|new
name|Foo
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|take
argument_list|(
literal|"alpha"
argument_list|)
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|f1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|take
argument_list|(
literal|"alpha"
argument_list|)
argument_list|,
operator|(
name|Foo
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Foo
operator|::
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|totalCost
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cache
operator|.
name|setMaxCost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|take
argument_list|(
literal|"beta"
argument_list|)
argument_list|,
operator|(
name|Foo
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|KeyType
struct|struct
name|KeyType
block|{
DECL|member|foo
name|int
name|foo
decl_stmt|;
DECL|function|KeyType
name|KeyType
parameter_list|(
name|int
name|x
parameter_list|)
member_init_list|:
name|foo
argument_list|(
name|x
argument_list|)
block|{}
private|private:
name|KeyType
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|KeyType
modifier|&
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|ValueType
struct|struct
name|ValueType
block|{
DECL|member|foo
name|int
name|foo
decl_stmt|;
DECL|function|ValueType
name|ValueType
parameter_list|(
name|int
name|x
parameter_list|)
member_init_list|:
name|foo
argument_list|(
name|x
argument_list|)
block|{}
private|private:
name|ValueType
parameter_list|(
specifier|const
name|ValueType
modifier|&
parameter_list|)
constructor_decl|;
name|ValueType
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|ValueType
modifier|&
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_function
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|KeyType
modifier|&
name|key1
parameter_list|,
specifier|const
name|KeyType
modifier|&
name|key2
parameter_list|)
block|{
return|return
name|key1
operator|.
name|foo
operator|==
name|key2
operator|.
name|foo
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|KeyType
modifier|&
name|key
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|key
operator|.
name|foo
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|axioms_on_key_type
name|void
name|tst_QCache
operator|::
name|axioms_on_key_type
parameter_list|()
block|{
name|QCache
argument_list|<
name|KeyType
argument_list|,
name|ValueType
argument_list|>
name|foo
decl_stmt|;
name|foo
operator|.
name|setMaxCost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|foo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|foo
operator|.
name|insert
argument_list|(
name|KeyType
argument_list|(
literal|123
argument_list|)
argument_list|,
operator|new
name|ValueType
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|foo
operator|.
name|object
argument_list|(
name|KeyType
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|foo
operator|.
name|contains
argument_list|(
name|KeyType
argument_list|(
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|foo
index|[
name|KeyType
argument_list|(
literal|456
argument_list|)
index|]
expr_stmt|;
name|foo
operator|.
name|remove
argument_list|(
name|KeyType
argument_list|(
literal|456
argument_list|)
argument_list|)
expr_stmt|;
name|foo
operator|.
name|remove
argument_list|(
name|KeyType
argument_list|(
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|foo
operator|.
name|take
argument_list|(
name|KeyType
argument_list|(
literal|789
argument_list|)
argument_list|)
expr_stmt|;
comment|// If this fails, contact the maintaner
name|QVERIFY
argument_list|(
sizeof|sizeof
argument_list|(
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QCache
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcache.moc"
end_include
end_unit
