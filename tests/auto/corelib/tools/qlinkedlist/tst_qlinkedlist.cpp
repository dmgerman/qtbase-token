begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QLinkedList>
end_include
begin_struct
DECL|struct|Movable
struct|struct
name|Movable
block|{
DECL|function|Movable
name|Movable
parameter_list|(
name|char
name|input
init|=
literal|'j'
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|input
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|Movable
name|Movable
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|other
operator|.
name|i
argument_list|)
member_init_list|,
name|state
argument_list|(
name|Constructed
argument_list|)
block|{
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|~Movable
name|~
name|Movable
parameter_list|()
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
operator|--
name|liveCount
expr_stmt|;
name|state
operator|=
name|Destructed
expr_stmt|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
return|return
name|i
operator|==
name|other
operator|.
name|i
return|;
block|}
DECL|function|operator =
name|Movable
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|Movable
modifier|&
name|other
parameter_list|)
block|{
name|check
argument_list|(
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|check
argument_list|(
name|other
operator|.
name|state
argument_list|,
name|Constructed
argument_list|)
expr_stmt|;
name|i
operator|=
name|other
operator|.
name|i
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|member|i
name|char
name|i
decl_stmt|;
DECL|function|getLiveCount
specifier|static
name|int
name|getLiveCount
parameter_list|()
block|{
return|return
name|liveCount
return|;
block|}
private|private:
DECL|member|liveCount
specifier|static
name|int
name|liveCount
decl_stmt|;
DECL|enum|State
DECL|enumerator|Constructed
DECL|enumerator|Destructed
enum|enum
name|State
block|{
name|Constructed
init|=
literal|106
block|,
name|Destructed
init|=
literal|110
block|}
enum|;
DECL|member|state
name|State
name|state
decl_stmt|;
DECL|function|check
specifier|static
name|void
name|check
parameter_list|(
specifier|const
name|State
name|state1
parameter_list|,
specifier|const
name|State
name|state2
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|state1
argument_list|)
argument_list|,
name|int
argument_list|(
name|state2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|liveCount
name|int
name|Movable
operator|::
name|liveCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|Movable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QT_END_NAMESPACE
name|Q_DECLARE_METATYPE
parameter_list|(
name|Movable
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
DECL|variable|QLinkedList
name|Q_DECLARE_METATYPE
argument_list|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qHash
name|int
name|qHash
parameter_list|(
specifier|const
name|Movable
modifier|&
name|movable
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|movable
operator|.
name|i
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|Complex
struct|struct
name|Complex
block|{
DECL|function|Complex
name|Complex
parameter_list|(
name|int
name|val
init|=
literal|0
parameter_list|)
member_init_list|:
name|value
argument_list|(
name|val
argument_list|)
member_init_list|,
name|checkSum
argument_list|(
name|this
argument_list|)
block|{
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|Complex
name|Complex
parameter_list|(
name|Complex
specifier|const
modifier|&
name|other
parameter_list|)
member_init_list|:
name|value
argument_list|(
name|other
operator|.
name|value
argument_list|)
member_init_list|,
name|checkSum
argument_list|(
name|this
argument_list|)
block|{
operator|++
name|liveCount
expr_stmt|;
block|}
DECL|function|operator =
name|Complex
modifier|&
name|operator
name|=
parameter_list|(
name|Complex
specifier|const
modifier|&
name|other
parameter_list|)
block|{
name|check
argument_list|()
expr_stmt|;
name|other
operator|.
name|check
argument_list|()
expr_stmt|;
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
DECL|function|~Complex
name|~
name|Complex
parameter_list|()
block|{
operator|--
name|liveCount
expr_stmt|;
name|check
argument_list|()
expr_stmt|;
block|}
DECL|function|operator int
name|operator
name|int
parameter_list|()
specifier|const
block|{
return|return
name|value
return|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
name|Complex
specifier|const
modifier|&
name|other
parameter_list|)
specifier|const
block|{
name|check
argument_list|()
expr_stmt|;
name|other
operator|.
name|check
argument_list|()
expr_stmt|;
return|return
name|value
operator|==
name|other
operator|.
name|value
return|;
block|}
DECL|function|check
name|void
name|check
parameter_list|()
specifier|const
block|{
name|QVERIFY
argument_list|(
name|this
operator|==
name|checkSum
argument_list|)
expr_stmt|;
block|}
DECL|function|getLiveCount
specifier|static
name|int
name|getLiveCount
parameter_list|()
block|{
return|return
name|liveCount
return|;
block|}
private|private:
DECL|member|liveCount
specifier|static
name|int
name|liveCount
decl_stmt|;
DECL|member|value
name|int
name|value
decl_stmt|;
DECL|member|checkSum
name|void
modifier|*
name|checkSum
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|member|liveCount
name|int
name|Complex
operator|::
name|liveCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|Complex
name|Q_DECLARE_METATYPE
argument_list|(
name|Complex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// Tests depend on the fact that:
end_comment
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|int
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Movable
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Complex
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|Complex
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|tst_QLinkedList
class|class
name|tst_QLinkedList
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|eraseValidIteratorsOnSharedList
parameter_list|()
specifier|const
function_decl|;
name|void
name|insertWithIteratorsOnSharedList
parameter_list|()
specifier|const
function_decl|;
name|void
name|lengthInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|lengthMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|lengthComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|lengthSignature
parameter_list|()
specifier|const
function_decl|;
name|void
name|firstInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|firstMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|firstComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|lastComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|beginInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|beginMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|beginComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|endInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|endMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|endComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|containsInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|containsMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|containsComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|countInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|countMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|countComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|emptyComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWithInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWithMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|endsWithComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeAllInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeAllMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeAllComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeOneInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeOneMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|removeOneComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|reverseIterators
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWithInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWithMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|startsWithComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeFirstInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeFirstMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeFirstComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeLastInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeLastMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|takeLastComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdListInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdListMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|toStdListComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperatorsInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperatorsMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|testOperatorsComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|testSTLIteratorsInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|testSTLIteratorsMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|testSTLIteratorsComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|initializeList
parameter_list|()
specifier|const
function_decl|;
name|void
name|constSharedNullInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|constSharedNullMovable
parameter_list|()
specifier|const
function_decl|;
name|void
name|constSharedNullComplex
parameter_list|()
specifier|const
function_decl|;
name|void
name|setSharableInt
parameter_list|()
specifier|const
function_decl|;
private|private:
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|length
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|first
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|last
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|begin
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|end
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|contains
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|count
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|empty
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|endsWith
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|move
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|removeAll
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|removeOne
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|startsWith
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|swap
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|takeFirst
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|takeLast
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|toStdList
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|value
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|testOperators
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|testSTLIterators
parameter_list|()
specifier|const
function_decl|;
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|constSharedNull
parameter_list|()
specifier|const
function_decl|;
DECL|member|dummyForGuard
name|int
name|dummyForGuard
decl_stmt|;
block|}
class|;
end_class
begin_struct
DECL|struct|SimpleValue
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|SimpleValue
block|{
DECL|function|at
specifier|static
name|T
name|at
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|values
index|[
name|index
operator|%
name|maxSize
index|]
return|;
block|}
DECL|member|maxSize
specifier|static
specifier|const
name|uint
name|maxSize
init|=
literal|7
decl_stmt|;
DECL|member|values
specifier|static
specifier|const
name|T
name|values
index|[
name|maxSize
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|values
specifier|const
name|int
name|SimpleValue
argument_list|<
name|int
argument_list|>
operator|::
name|values
index|[]
init|=
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|100
block|,
literal|101
block|,
literal|102
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|values
specifier|const
name|Movable
name|SimpleValue
argument_list|<
name|Movable
argument_list|>
operator|::
name|values
index|[]
init|=
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|100
block|,
literal|101
block|,
literal|102
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
template|template
parameter_list|<>
DECL|member|values
specifier|const
name|Complex
name|SimpleValue
argument_list|<
name|Complex
argument_list|>
operator|::
name|values
index|[]
init|=
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|100
block|,
literal|101
block|,
literal|102
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Make some macros for the tests to use in order to be slightly more readable...
end_comment
begin_define
DECL|macro|T_FOO
define|#
directive|define
name|T_FOO
value|SimpleValue<T>::at(0)
end_define
begin_define
DECL|macro|T_BAR
define|#
directive|define
name|T_BAR
value|SimpleValue<T>::at(1)
end_define
begin_define
DECL|macro|T_BAZ
define|#
directive|define
name|T_BAZ
value|SimpleValue<T>::at(2)
end_define
begin_define
DECL|macro|T_CAT
define|#
directive|define
name|T_CAT
value|SimpleValue<T>::at(3)
end_define
begin_define
DECL|macro|T_DOG
define|#
directive|define
name|T_DOG
value|SimpleValue<T>::at(4)
end_define
begin_define
DECL|macro|T_BLAH
define|#
directive|define
name|T_BLAH
value|SimpleValue<T>::at(5)
end_define
begin_define
DECL|macro|T_WEEE
define|#
directive|define
name|T_WEEE
value|SimpleValue<T>::at(6)
end_define
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|length
name|void
name|tst_QLinkedList
operator|::
name|length
parameter_list|()
specifier|const
block|{
comment|/* Empty list. */
block|{
specifier|const
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* One entry. */
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* Two entries. */
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/* Three entries. */
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|list
operator|.
name|append
argument_list|(
name|T_BAZ
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|eraseValidIteratorsOnSharedList
name|void
name|tst_QLinkedList
operator|::
name|eraseValidIteratorsOnSharedList
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|a
operator|.
name|begin
argument_list|()
decl_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|r
init|=
name|a
operator|.
name|erase
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
operator|--
name|r
expr_stmt|;
operator|--
name|r
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|r
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Ensure that number 2 instance was removed;
block|}
end_function
begin_function
DECL|function|insertWithIteratorsOnSharedList
name|void
name|tst_QLinkedList
operator|::
name|insertWithIteratorsOnSharedList
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i
init|=
name|a
operator|.
name|begin
argument_list|()
decl_stmt|;
operator|++
name|i
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|iterator
name|i2
init|=
name|a
operator|.
name|insert
argument_list|(
name|i
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
operator|--
name|i2
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|i2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lengthInt
name|void
name|tst_QLinkedList
operator|::
name|lengthInt
parameter_list|()
specifier|const
block|{
name|length
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lengthMovable
name|void
name|tst_QLinkedList
operator|::
name|lengthMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|length
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lengthComplex
name|void
name|tst_QLinkedList
operator|::
name|lengthComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|length
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lengthSignature
name|void
name|tst_QLinkedList
operator|::
name|lengthSignature
parameter_list|()
specifier|const
block|{
comment|/* Constness. */
block|{
specifier|const
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
comment|/* The function should be const. */
name|list
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|first
name|void
name|tst_QLinkedList
operator|::
name|first
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|first
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstInt
name|void
name|tst_QLinkedList
operator|::
name|firstInt
parameter_list|()
specifier|const
block|{
name|first
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstMovable
name|void
name|tst_QLinkedList
operator|::
name|firstMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|first
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|firstComplex
name|void
name|tst_QLinkedList
operator|::
name|firstComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|first
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|last
name|void
name|tst_QLinkedList
operator|::
name|last
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|last
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastInt
name|void
name|tst_QLinkedList
operator|::
name|lastInt
parameter_list|()
specifier|const
block|{
name|last
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastMovable
name|void
name|tst_QLinkedList
operator|::
name|lastMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|last
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastComplex
name|void
name|tst_QLinkedList
operator|::
name|lastComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|last
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|begin
name|void
name|tst_QLinkedList
operator|::
name|begin
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginInt
name|void
name|tst_QLinkedList
operator|::
name|beginInt
parameter_list|()
specifier|const
block|{
name|begin
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginMovable
name|void
name|tst_QLinkedList
operator|::
name|beginMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|begin
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|beginComplex
name|void
name|tst_QLinkedList
operator|::
name|beginComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|begin
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|end
name|void
name|tst_QLinkedList
operator|::
name|end
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|--
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
comment|// remove an item, make sure it still works
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
operator|--
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endInt
name|void
name|tst_QLinkedList
operator|::
name|endInt
parameter_list|()
specifier|const
block|{
name|end
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endMovable
name|void
name|tst_QLinkedList
operator|::
name|endMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|end
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endComplex
name|void
name|tst_QLinkedList
operator|::
name|endComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|end
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|contains
name|void
name|tst_QLinkedList
operator|::
name|contains
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|T_FOO
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|T_BLAH
argument_list|)
operator|!=
literal|true
argument_list|)
expr_stmt|;
comment|// add it and make sure it matches
name|list
operator|.
name|append
argument_list|(
name|T_BLAH
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|contains
argument_list|(
name|T_BLAH
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|containsInt
name|void
name|tst_QLinkedList
operator|::
name|containsInt
parameter_list|()
specifier|const
block|{
name|contains
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|containsMovable
name|void
name|tst_QLinkedList
operator|::
name|containsMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|contains
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|containsComplex
name|void
name|tst_QLinkedList
operator|::
name|containsComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|contains
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|count
name|void
name|tst_QLinkedList
operator|::
name|count
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
comment|// starts empty
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// goes up
name|list
operator|.
name|append
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// and up
name|list
operator|.
name|append
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// and down
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// and empty. :)
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countInt
name|void
name|tst_QLinkedList
operator|::
name|countInt
parameter_list|()
specifier|const
block|{
name|count
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countMovable
name|void
name|tst_QLinkedList
operator|::
name|countMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|count
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|countComplex
name|void
name|tst_QLinkedList
operator|::
name|countComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|count
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|empty
name|void
name|tst_QLinkedList
operator|::
name|empty
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
comment|// make sure it starts empty
name|QVERIFY
argument_list|(
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// and doesn't stay empty
name|list
operator|.
name|append
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
comment|// and goes back to being empty
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyInt
name|void
name|tst_QLinkedList
operator|::
name|emptyInt
parameter_list|()
specifier|const
block|{
name|empty
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyMovable
name|void
name|tst_QLinkedList
operator|::
name|emptyMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|empty
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyComplex
name|void
name|tst_QLinkedList
operator|::
name|emptyComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|empty
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|endsWith
name|void
name|tst_QLinkedList
operator|::
name|endsWith
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// test it returns correctly in both cases
name|QVERIFY
argument_list|(
name|list
operator|.
name|endsWith
argument_list|(
name|T_BAZ
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|endsWith
argument_list|(
name|T_BAR
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item and make sure the end item changes
name|list
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|endsWith
argument_list|(
name|T_BAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWithInt
name|void
name|tst_QLinkedList
operator|::
name|endsWithInt
parameter_list|()
specifier|const
block|{
name|endsWith
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWithMovable
name|void
name|tst_QLinkedList
operator|::
name|endsWithMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|endsWith
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|endsWithComplex
name|void
name|tst_QLinkedList
operator|::
name|endsWithComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|endsWith
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|removeAll
name|void
name|tst_QLinkedList
operator|::
name|removeAll
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// remove one instance
name|list
operator|.
name|removeAll
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
comment|// many instances
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
name|list
operator|.
name|removeAll
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
comment|// try remove something that doesn't exist
name|list
operator|.
name|removeAll
argument_list|(
name|T_WEEE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAllInt
name|void
name|tst_QLinkedList
operator|::
name|removeAllInt
parameter_list|()
specifier|const
block|{
name|removeAll
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAllMovable
name|void
name|tst_QLinkedList
operator|::
name|removeAllMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|removeAll
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAllComplex
name|void
name|tst_QLinkedList
operator|::
name|removeAllComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|removeAll
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|removeOne
name|void
name|tst_QLinkedList
operator|::
name|removeOne
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// middle
name|list
operator|.
name|removeOne
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
comment|// start
name|list
operator|.
name|removeOne
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
comment|// last
name|list
operator|.
name|removeOne
argument_list|(
name|T_BAZ
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure it really only removes one :)
name|list
operator|<<
name|T_FOO
operator|<<
name|T_FOO
expr_stmt|;
name|list
operator|.
name|removeOne
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
argument_list|)
expr_stmt|;
comment|// try remove something that doesn't exist
name|list
operator|.
name|removeOne
argument_list|(
name|T_WEEE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeOneInt
name|void
name|tst_QLinkedList
operator|::
name|removeOneInt
parameter_list|()
specifier|const
block|{
name|removeOne
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeOneMovable
name|void
name|tst_QLinkedList
operator|::
name|removeOneMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|removeOne
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeOneComplex
name|void
name|tst_QLinkedList
operator|::
name|removeOneComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|removeOne
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reverseIterators
name|void
name|tst_QLinkedList
operator|::
name|reverseIterators
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|l
decl_stmt|;
name|l
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|lr
init|=
name|l
decl_stmt|;
name|std
operator|::
name|reverse
argument_list|(
name|lr
operator|.
name|begin
argument_list|()
argument_list|,
name|lr
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QLinkedList
argument_list|<
name|int
argument_list|>
modifier|&
name|clr
init|=
name|lr
decl_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|l
operator|.
name|begin
argument_list|()
argument_list|,
name|l
operator|.
name|end
argument_list|()
argument_list|,
name|lr
operator|.
name|rbegin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|l
operator|.
name|begin
argument_list|()
argument_list|,
name|l
operator|.
name|end
argument_list|()
argument_list|,
name|lr
operator|.
name|crbegin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|l
operator|.
name|begin
argument_list|()
argument_list|,
name|l
operator|.
name|end
argument_list|()
argument_list|,
name|clr
operator|.
name|rbegin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|lr
operator|.
name|rbegin
argument_list|()
argument_list|,
name|lr
operator|.
name|rend
argument_list|()
argument_list|,
name|l
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|lr
operator|.
name|crbegin
argument_list|()
argument_list|,
name|lr
operator|.
name|crend
argument_list|()
argument_list|,
name|l
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|std
operator|::
name|equal
argument_list|(
name|clr
operator|.
name|rbegin
argument_list|()
argument_list|,
name|clr
operator|.
name|rend
argument_list|()
argument_list|,
name|l
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|startsWith
name|void
name|tst_QLinkedList
operator|::
name|startsWith
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// make sure it starts ok
name|QVERIFY
argument_list|(
name|list
operator|.
name|startsWith
argument_list|(
name|T_FOO
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove an item
name|list
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|startsWith
argument_list|(
name|T_BAR
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWithInt
name|void
name|tst_QLinkedList
operator|::
name|startsWithInt
parameter_list|()
specifier|const
block|{
name|startsWith
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWithMovable
name|void
name|tst_QLinkedList
operator|::
name|startsWithMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|startsWith
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startsWithComplex
name|void
name|tst_QLinkedList
operator|::
name|startsWithComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|startsWith
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|takeFirst
name|void
name|tst_QLinkedList
operator|::
name|takeFirst
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeFirst
argument_list|()
argument_list|,
name|T_BAZ
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeFirstInt
name|void
name|tst_QLinkedList
operator|::
name|takeFirstInt
parameter_list|()
specifier|const
block|{
name|takeFirst
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeFirstMovable
name|void
name|tst_QLinkedList
operator|::
name|takeFirstMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|takeFirst
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeFirstComplex
name|void
name|tst_QLinkedList
operator|::
name|takeFirstComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|takeFirst
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|takeLast
name|void
name|tst_QLinkedList
operator|::
name|takeLast
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|T_BAZ
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|takeLast
argument_list|()
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeLastInt
name|void
name|tst_QLinkedList
operator|::
name|takeLastInt
parameter_list|()
specifier|const
block|{
name|takeLast
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeLastMovable
name|void
name|tst_QLinkedList
operator|::
name|takeLastMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|takeLast
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|takeLastComplex
name|void
name|tst_QLinkedList
operator|::
name|takeLastComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|takeLast
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|toStdList
name|void
name|tst_QLinkedList
operator|::
name|toStdList
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// yuck.
name|std
operator|::
name|list
argument_list|<
name|T
argument_list|>
name|slist
decl_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|T_FOO
argument_list|)
expr_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|T_BAR
argument_list|)
expr_stmt|;
name|slist
operator|.
name|push_back
argument_list|(
name|T_BAZ
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|toStdList
argument_list|()
argument_list|,
name|slist
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdListInt
name|void
name|tst_QLinkedList
operator|::
name|toStdListInt
parameter_list|()
specifier|const
block|{
name|toStdList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdListMovable
name|void
name|tst_QLinkedList
operator|::
name|toStdListMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|toStdList
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toStdListComplex
name|void
name|tst_QLinkedList
operator|::
name|toStdListComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|toStdList
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|testOperators
name|void
name|tst_QLinkedList
operator|::
name|testOperators
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|listtwo
decl_stmt|;
name|listtwo
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
comment|// test equal
name|QVERIFY
argument_list|(
name|list
operator|==
name|listtwo
argument_list|)
expr_stmt|;
comment|// not equal
name|listtwo
operator|.
name|append
argument_list|(
name|T_CAT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|!=
name|listtwo
argument_list|)
expr_stmt|;
comment|// +=
name|list
operator|+=
name|listtwo
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|listtwo
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
operator|<<
name|T_CAT
argument_list|)
expr_stmt|;
comment|// =
name|list
operator|=
name|listtwo
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|listtwo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|QLinkedList
argument_list|<
name|T
argument_list|>
argument_list|()
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
operator|<<
name|T_CAT
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperatorsInt
name|void
name|tst_QLinkedList
operator|::
name|testOperatorsInt
parameter_list|()
specifier|const
block|{
name|testOperators
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperatorsMovable
name|void
name|tst_QLinkedList
operator|::
name|testOperatorsMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|testOperators
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testOperatorsComplex
name|void
name|tst_QLinkedList
operator|::
name|testOperatorsComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|testOperators
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|testSTLIterators
name|void
name|tst_QLinkedList
operator|::
name|testSTLIterators
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list
decl_stmt|;
comment|// create a list
name|list
operator|<<
name|T_FOO
operator|<<
name|T_BAR
operator|<<
name|T_BAZ
expr_stmt|;
typename|typename
name|QLinkedList
argument_list|<
name|T
argument_list|>
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_BAZ
argument_list|)
expr_stmt|;
name|it
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
comment|// walk backwards
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_BAZ
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|it
operator|--
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
comment|// test erase
name|it
operator|=
name|list
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
comment|// test multiple erase
name|it
operator|=
name|list
operator|.
name|erase
argument_list|(
name|it
argument_list|,
name|it
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert again
name|it
operator|=
name|list
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
comment|// insert again
name|it
operator|=
name|list
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
operator|++
argument_list|,
name|T_BAR
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|it
argument_list|,
name|T_FOO
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSTLIteratorsInt
name|void
name|tst_QLinkedList
operator|::
name|testSTLIteratorsInt
parameter_list|()
specifier|const
block|{
name|testSTLIterators
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSTLIteratorsMovable
name|void
name|tst_QLinkedList
operator|::
name|testSTLIteratorsMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|testSTLIterators
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSTLIteratorsComplex
name|void
name|tst_QLinkedList
operator|::
name|testSTLIteratorsComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|testSTLIterators
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeList
name|void
name|tst_QLinkedList
operator|::
name|initializeList
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|v1
argument_list|{
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v1
argument_list|,
operator|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
operator|)
argument_list|)
expr_stmt|;
name|QLinkedList
argument_list|<
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|>
name|v2
argument_list|{
name|v1
argument_list|,
block|{
literal|1
block|}
argument_list|,
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|,
block|{
literal|2
block|,
literal|3
block|,
literal|4
block|}
argument_list|}
decl_stmt|;
name|QLinkedList
argument_list|<
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|>
name|v3
decl_stmt|;
name|v3
operator|<<
name|v1
operator|<<
operator|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|)
operator|<<
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|v1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v3
argument_list|,
name|v2
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|constSharedNull
name|void
name|tst_QLinkedList
operator|::
name|constSharedNull
parameter_list|()
specifier|const
block|{
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list2
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_UNSHARABLE_CONTAINERS
argument_list|)
name|QLinkedList
argument_list|<
name|T
argument_list|>
name|list1
decl_stmt|;
name|list1
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list1
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|list2
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|list2
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constSharedNullInt
name|void
name|tst_QLinkedList
operator|::
name|constSharedNullInt
parameter_list|()
specifier|const
block|{
name|constSharedNull
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constSharedNullMovable
name|void
name|tst_QLinkedList
operator|::
name|constSharedNullMovable
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Movable
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|constSharedNull
argument_list|<
name|Movable
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Movable
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constSharedNullComplex
name|void
name|tst_QLinkedList
operator|::
name|constSharedNullComplex
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|liveCount
init|=
name|Complex
operator|::
name|getLiveCount
argument_list|()
decl_stmt|;
name|constSharedNull
argument_list|<
name|Complex
argument_list|>
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|liveCount
argument_list|,
name|Complex
operator|::
name|getLiveCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSharableInt
name|void
name|tst_QLinkedList
operator|::
name|setSharableInt
parameter_list|()
specifier|const
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_UNSHARABLE_CONTAINERS
argument_list|)
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|orglist
decl_stmt|;
name|orglist
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
expr_stmt|;
name|int
name|size
init|=
literal|6
decl_stmt|;
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|=
name|orglist
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|list
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|isDetached
argument_list|()
operator|||
name|list
operator|.
name|isSharedWith
argument_list|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isDetached
argument_list|()
operator|||
name|copy
operator|.
name|isSharedWith
argument_list|(
name|QLinkedList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|setSharable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|{
name|QLinkedList
argument_list|<
name|int
argument_list|>
name|copy
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isSharedWith
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QLinkedList
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|list
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
operator|*
name|it
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QLinkedList
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlinkedlist.moc"
end_include
end_unit
