begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qnumeric.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_include
include|#
directive|include
file|<fenv.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_comment
comment|// needed for GetUserDefaultLCID
end_comment
begin_define
DECL|macro|_control87
define|#
directive|define
name|_control87
value|_controlfp
end_define
begin_extern
DECL|function|GetThreadLocale
extern|extern
literal|"C"
name|DWORD
name|GetThreadLocale
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|GetUserDefaultLCID
argument_list|()
return|;
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qlonglong
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDate
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLocale::FormatType
argument_list|)
end_macro
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QLocale
class|class
name|tst_QLocale
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QLocale
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|windowsDefaultLocale
parameter_list|()
function_decl|;
name|void
name|macDefaultLocale
parameter_list|()
function_decl|;
name|void
name|ctor
parameter_list|()
function_decl|;
name|void
name|emptyCtor
parameter_list|()
function_decl|;
name|void
name|unixLocaleName
parameter_list|()
function_decl|;
name|void
name|double_conversion_data
parameter_list|()
function_decl|;
name|void
name|double_conversion
parameter_list|()
function_decl|;
name|void
name|long_long_conversion_data
parameter_list|()
function_decl|;
name|void
name|long_long_conversion
parameter_list|()
function_decl|;
name|void
name|long_long_conversion_extra
parameter_list|()
function_decl|;
name|void
name|testInfAndNan
parameter_list|()
function_decl|;
name|void
name|fpExceptions
parameter_list|()
function_decl|;
name|void
name|negativeZero
parameter_list|()
function_decl|;
name|void
name|dayOfWeek
parameter_list|()
function_decl|;
name|void
name|dayOfWeek_data
parameter_list|()
function_decl|;
name|void
name|formatDate
parameter_list|()
function_decl|;
name|void
name|formatDate_data
parameter_list|()
function_decl|;
name|void
name|formatTime
parameter_list|()
function_decl|;
name|void
name|formatTime_data
parameter_list|()
function_decl|;
name|void
name|formatDateTime
parameter_list|()
function_decl|;
name|void
name|formatDateTime_data
parameter_list|()
function_decl|;
name|void
name|toDateTime_data
parameter_list|()
function_decl|;
name|void
name|toDateTime
parameter_list|()
function_decl|;
name|void
name|negativeNumbers
parameter_list|()
function_decl|;
name|void
name|numberOptions
parameter_list|()
function_decl|;
name|void
name|testNames
parameter_list|()
function_decl|;
name|void
name|dayName_data
parameter_list|()
function_decl|;
name|void
name|dayName
parameter_list|()
function_decl|;
name|void
name|standaloneDayName_data
parameter_list|()
function_decl|;
name|void
name|standaloneDayName
parameter_list|()
function_decl|;
name|void
name|underflowOverflow
parameter_list|()
function_decl|;
name|void
name|dateFormat
parameter_list|()
function_decl|;
name|void
name|timeFormat
parameter_list|()
function_decl|;
name|void
name|dateTimeFormat
parameter_list|()
function_decl|;
name|void
name|monthName
parameter_list|()
function_decl|;
name|void
name|standaloneMonthName
parameter_list|()
function_decl|;
comment|// QSystemLocale tests
name|void
name|queryDateTime
parameter_list|()
function_decl|;
name|void
name|ampm
parameter_list|()
function_decl|;
name|void
name|currency
parameter_list|()
function_decl|;
name|void
name|quoteString
parameter_list|()
function_decl|;
name|void
name|uiLanguages
parameter_list|()
function_decl|;
name|void
name|weekendDays
parameter_list|()
function_decl|;
name|void
name|listPatterns
parameter_list|()
function_decl|;
private|private:
DECL|member|m_decimal
DECL|member|m_thousand
DECL|member|m_sdate
DECL|member|m_ldate
DECL|member|m_time
name|QString
name|m_decimal
decl_stmt|,
name|m_thousand
decl_stmt|,
name|m_sdate
decl_stmt|,
name|m_ldate
decl_stmt|,
name|m_time
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QLocale
name|tst_QLocale
operator|::
name|tst_QLocale
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"QLocale::FormatType"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|ctor
name|void
name|tst_QLocale
operator|::
name|ctor
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
name|argv
index|[
literal|20
index|]
init|=
literal|"tst_qlocale.exe"
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
operator|(
name|char
operator|*
operator|*
operator|)
operator|&
name|argv
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QLocale
name|default_locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
name|QLocale
operator|::
name|Language
name|default_lang
init|=
name|default_locale
operator|.
name|language
argument_list|()
decl_stmt|;
name|QLocale
operator|::
name|Country
name|default_country
init|=
name|default_locale
operator|.
name|country
argument_list|()
decl_stmt|;
name|qDebug
argument_list|(
literal|"Default: %s/%s"
argument_list|,
name|QLocale
operator|::
name|languageToString
argument_list|(
name|default_lang
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|QLocale
operator|::
name|countryToString
argument_list|(
name|default_country
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|default_lang
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|default_country
argument_list|)
expr_stmt|;
block|}
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lang
parameter_list|,
name|req_country
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(QLocale::req_lang, QLocale::req_country); \         QCOMPARE(l.language(), exp_lang); \         QCOMPARE(l.country(), exp_country); \     }
block|{
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|language
argument_list|()
argument_list|,
name|QLocale
operator|::
name|C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|AnyLanguage
argument_list|,
argument|AnyCountry
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|,
argument|QLocale::Spanish
argument_list|,
argument|QLocale::LatinAmericaAndTheCaribbean
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|France
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedStates
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Aymara
argument_list|,
name|QLocale
operator|::
name|France
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Aymara
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Arabic
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Arabic
argument_list|,
argument|QLocale::SaudiArabia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Dutch
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Dutch
argument_list|,
argument|QLocale::Netherlands
argument_list|)
name|TEST_CTOR
argument_list|(
argument|German
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::German
argument_list|,
argument|QLocale::Germany
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Greek
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Greek
argument_list|,
argument|QLocale::Greece
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Malay
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Malay
argument_list|,
argument|QLocale::Malaysia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Persian
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Persian
argument_list|,
argument|QLocale::Iran
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Portuguese
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Portuguese
argument_list|,
argument|QLocale::Portugal
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Serbian
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Serbian
argument_list|,
argument|QLocale::SerbiaAndMontenegro
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Somali
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Somali
argument_list|,
argument|QLocale::Somalia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Spanish
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Spanish
argument_list|,
argument|QLocale::Spain
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Swedish
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Swedish
argument_list|,
argument|QLocale::Sweden
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Uzbek
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Uzbek
argument_list|,
argument|QLocale::Uzbekistan
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(req_lc); \         QVERIFY2(l.language() == QLocale::exp_lang \&& l.country() == QLocale::exp_country, \                 QString("requested: \"" + QString(req_lc) + "\", got: " \                 + QLocale::languageToString(l.language()) \                 + "/" + QLocale::countryToString(l.country())).toLatin1().constData()); \     }
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"C"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"bla"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz_zz"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz..."
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|""
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en/"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|QString::null
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en."
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_U"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_."
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_.@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_blaaa"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_zz"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en-GB"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en-GB@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|QVERIFY
argument_list|(
name|QLocale
operator|::
name|Norwegian
operator|==
name|QLocale
operator|::
name|NorwegianBokmal
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"no"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn"
argument_list|,
argument|NorwegianNynorsk
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"no_NO"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb_NO"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn_NO"
argument_list|,
argument|NorwegianNynorsk
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es_ES"
argument_list|,
argument|Spanish
argument_list|,
argument|Spain
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es_419"
argument_list|,
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es-419"
argument_list|,
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|)
comment|// test default countries for languages
name|TEST_CTOR
argument_list|(
literal|"zh"
argument_list|,
argument|Chinese
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh-Hans"
argument_list|,
argument|Chinese
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"mn"
argument_list|,
argument|Mongolian
argument_list|,
argument|Mongolia
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ne"
argument_list|,
argument|Nepali
argument_list|,
argument|Nepal
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_script
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \     QLocale l(req_lc); \     QVERIFY2(l.language() == QLocale::exp_lang \&& l.script() == QLocale::exp_script \&& l.country() == QLocale::exp_country, \         QString("requested: \"" + QString(req_lc) + "\", got: " \         + QLocale::languageToString(l.language()) \         + "/" + QLocale::scriptToString(l.script()) \         + "/" + QLocale::countryToString(l.country())).toLatin1().constData()); \     }
name|TEST_CTOR
argument_list|(
literal|"zh_CN"
argument_list|,
argument|Chinese
argument_list|,
argument|AnyScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans_CN"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hant"
argument_list|,
argument|Chinese
argument_list|,
argument|TraditionalHanScript
argument_list|,
argument|HongKong
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans_MO"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|Macau
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hant_MO"
argument_list|,
argument|Chinese
argument_list|,
argument|TraditionalHanScript
argument_list|,
argument|Macau
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"az_Latn_AZ"
argument_list|,
argument|Azerbaijani
argument_list|,
argument|LatinScript
argument_list|,
argument|Azerbaijan
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ha_Arab_NG"
argument_list|,
argument|Hausa
argument_list|,
argument|ArabicScript
argument_list|,
argument|Nigeria
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ha_Latn_NG"
argument_list|,
argument|Hausa
argument_list|,
argument|LatinScript
argument_list|,
argument|Nigeria
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
block|}
end_function
begin_function
DECL|function|emptyCtor
name|void
name|tst_QLocale
operator|::
name|emptyCtor
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Uses unsupported Windows CE QProcess functionality (std streams, env)"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt was compiled with QT_NO_PROCESS"
argument_list|)
expr_stmt|;
else|#
directive|else
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_str
parameter_list|)
define|\
value|{ \
comment|/* Test constructor without arguments. Needs separate process */
value|\
comment|/* because of caching of the system locale. */
value|\     QProcess process; \     process.setEnvironment(QStringList(env)<< QString("LANG=%1").arg(req_lc)); \     process.start("syslocaleapp/syslocaleapp"); \     process.waitForReadyRead(); \     QString ret = QString(process.readAll()); \     process.waitForFinished(); \     QVERIFY2(!ret.isEmpty(), "Cannot launch external process"); \     QVERIFY2(QString(exp_str) == ret, QString("Expected: " + QString(exp_str) + ", got: " \             + ret + ". Requested: " + QString(req_lc)).toLatin1().constData()); \     }
comment|// Get an environment free of any locale-related variables
name|QStringList
name|env
decl_stmt|;
foreach|foreach
control|(
name|QString
specifier|const
modifier|&
name|entry
decl|,
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|startsWith
argument_list|(
literal|"LANG="
argument_list|)
operator|||
name|entry
operator|.
name|startsWith
argument_list|(
literal|"LC_"
argument_list|)
condition|)
continue|continue;
name|env
operator|<<
name|entry
expr_stmt|;
block|}
comment|// Get default locale.
name|QProcess
name|p
decl_stmt|;
name|p
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|p
operator|.
name|start
argument_list|(
literal|"syslocaleapp/syslocaleapp"
argument_list|)
expr_stmt|;
name|p
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|QString
name|defaultLoc
init|=
name|QString
argument_list|(
name|p
operator|.
name|readAll
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"bla"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz_zz"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz..."
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en."
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_."
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_.@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.bla"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@bla"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_blaaa"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_zz"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB.bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@.bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"de"
argument_list|,
literal|"de_DE"
argument_list|)
name|QVERIFY
argument_list|(
name|QLocale
operator|::
name|Norwegian
operator|==
name|QLocale
operator|::
name|NorwegianBokmal
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"no"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn"
argument_list|,
literal|"nn_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"no_NO"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb_NO"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn_NO"
argument_list|,
literal|"nn_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"DE"
argument_list|,
literal|"de_DE"
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"EN"
argument_list|,
literal|"en_US"
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"en/"
argument_list|,
argument|defaultLoc
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"asdfghj"
argument_list|,
name|defaultLoc
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"123456"
argument_list|,
name|defaultLoc
argument_list|)
expr_stmt|;
undef|#
directive|undef
name|TEST_CTOR
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|unixLocaleName
name|void
name|tst_QLocale
operator|::
name|unixLocaleName
parameter_list|()
block|{
DECL|macro|TEST_NAME
define|#
directive|define
name|TEST_NAME
parameter_list|(
name|req_lang
parameter_list|,
name|req_country
parameter_list|,
name|exp_name
parameter_list|)
define|\
value|{ \         QLocale l(QLocale::req_lang, QLocale::req_country); \         QCOMPARE(l.name(), QString(exp_name)); \     }
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_NAME
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
literal|"C"
argument_list|)
name|TEST_NAME
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_NAME
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_NAME
argument_list|(
argument|Aymara
argument_list|,
argument|UnitedKingdom
argument_list|,
literal|"C"
argument_list|)
DECL|macro|TEST_NAME
undef|#
directive|undef
name|TEST_NAME
block|}
end_function
begin_function
DECL|function|double_conversion_data
name|void
name|tst_QLocale
operator|::
name|double_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C  1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1 "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1 "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1  "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,23"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,5"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,56"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567.8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12,34567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12,34567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234,567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234,567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234567.8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|","
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",123"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C , 3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|", 3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3.2e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3.2e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,,234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000e-6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000e-6"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000.0e-6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.23"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.5"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.56"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567,"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567,8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12.34567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12.34567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234.567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234.567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234567,8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".123"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE . 3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|". 3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3,2e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3,2e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1..234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1..234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE ,1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -,1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-,1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543.0e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543.0e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9876.543"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,0e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,0e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543e--2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543e"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|8722
argument_list|)
operator|+
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,0e--2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,0e"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|8722
argument_list|)
operator|+
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_conversion
name|void
name|tst_QLocale
operator|::
name|double_conversion
parameter_list|()
block|{
DECL|macro|MY_DOUBLE_EPSILON
define|#
directive|define
name|MY_DOUBLE_EPSILON
value|(2.22045e-16)
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QLocale
name|locale
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|name
argument_list|()
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|locale
operator|.
name|toDouble
argument_list|(
name|num_str
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|double
name|diff
init|=
name|d
operator|-
name|num
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|diff
operator|=
operator|-
name|diff
expr_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
name|MY_DOUBLE_EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|long_long_conversion_data
name|void
name|tst_QLocale
operator|::
name|long_long_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,2"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,23"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12,34567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"12,34567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123,4567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"123,4567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234,567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12345,67"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"12345,67"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123456,7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"123456,7"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234,567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1."
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.2"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.23"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1234567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12.34567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"12.34567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 123.4567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"123.4567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1234.567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12345.67"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"12345.67"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 123456.7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"123456.7"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234.567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 ldspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"  1.234.567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 trspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234.567  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 ldtrspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"  1.234.567  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
comment|// test that space is also accepted whenever QLocale::groupSeparator() == 0xa0 (which looks like space).
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 groupsep"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
name|QString
argument_list|(
literal|"234"
argument_list|)
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 groupsep_space"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x20
argument_list|)
operator|+
name|QString
argument_list|(
literal|"234"
argument_list|)
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 ldspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"  123"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 trspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"123  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 ldtrspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"  123  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"  1234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1234  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"  1234  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
block|}
end_function
begin_function
DECL|function|long_long_conversion
name|void
name|tst_QLocale
operator|::
name|long_long_conversion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QLocale
name|locale
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|name
argument_list|()
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|qlonglong
name|l
init|=
name|locale
operator|.
name|toLongLong
argument_list|(
name|num_str
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|long_long_conversion_extra
name|void
name|tst_QLocale
operator|::
name|long_long_conversion_extra
parameter_list|()
block|{
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* void tst_QLocale::languageToString() { }  void tst_QLocale::setDefault() { } */
end_comment
begin_function
DECL|function|testInfAndNan
name|void
name|tst_QLocale
operator|::
name|testInfAndNan
parameter_list|()
block|{
name|double
name|neginf
init|=
name|log
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|double
name|nan
init|=
name|sqrt
argument_list|(
operator|-
literal|1.0
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// these cause INVALID floating point exception so we want to clear the status.
name|_clear87
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsNaN
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsFinite
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsInf
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsFinite
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsInf
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsNaN
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsFinite
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fpExceptions
name|void
name|tst_QLocale
operator|::
name|fpExceptions
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|_MCW_EM
DECL|macro|_MCW_EM
define|#
directive|define
name|_MCW_EM
value|0x0008001F
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_EM_INEXACT
DECL|macro|_EM_INEXACT
define|#
directive|define
name|_EM_INEXACT
value|0x00000001
endif|#
directive|endif
comment|// check that qdtoa doesn't throw floating point exceptions when they are enabled
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|unsigned
name|int
name|oldbits
init|=
name|_control87
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|_control87
argument_list|(
literal|0
operator||
name|_EM_INEXACT
argument_list|,
name|_MCW_EM
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|fenv_t
name|envp
decl_stmt|;
name|fegetenv
argument_list|(
operator|&
name|envp
argument_list|)
expr_stmt|;
name|feclearexcept
argument_list|(
name|FE_ALL_EXCEPT
argument_list|)
expr_stmt|;
name|feenableexcept
argument_list|(
name|FE_DIVBYZERO
operator||
name|FE_OVERFLOW
operator||
name|FE_UNDERFLOW
operator||
name|FE_INVALID
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
operator|::
name|number
argument_list|(
literal|1000.1245
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|_clear87
argument_list|()
expr_stmt|;
name|_control87
argument_list|(
name|oldbits
argument_list|,
literal|0xFFFFF
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|fesetenv
argument_list|(
operator|&
name|envp
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|negativeZero
name|void
name|tst_QLocale
operator|::
name|negativeZero
parameter_list|()
block|{
name|double
name|negativeZero
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
comment|// Initialise to zero.
name|uchar
modifier|*
name|ptr
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|negativeZero
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_ARMFPA
name|ptr
index|[
literal|3
index|]
operator|=
literal|0x80
expr_stmt|;
else|#
directive|else
name|ptr
index|[
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0
else|:
literal|7
index|]
operator|=
literal|0x80
expr_stmt|;
endif|#
directive|endif
name|QString
name|s
init|=
name|QString
operator|::
name|number
argument_list|(
name|negativeZero
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayOfWeek_data
name|void
name|tst_QLocale
operator|::
name|dayOfWeek_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"shortName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"longName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"Sun"
operator|<<
literal|"Sunday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mon"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|<<
literal|"Mon"
operator|<<
literal|"Monday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Tue"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"Tue"
operator|<<
literal|"Tuesday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wed"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"Wed"
operator|<<
literal|"Wednesday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Thu"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
operator|<<
literal|"Thu"
operator|<<
literal|"Thursday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Fri"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
operator|<<
literal|"Fri"
operator|<<
literal|"Friday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sat"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
operator|<<
literal|"Sat"
operator|<<
literal|"Saturday"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayOfWeek
name|void
name|tst_QLocale
operator|::
name|dayOfWeek
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|shortName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|longName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|toString
argument_list|(
name|date
argument_list|,
literal|"ddd"
argument_list|)
argument_list|,
name|shortName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|toString
argument_list|(
name|date
argument_list|,
literal|"dddd"
argument_list|)
argument_list|,
name|longName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDate_data
name|void
name|tst_QLocale
operator|::
name|formatDate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyy"
operator|<<
literal|"1/12/1974"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyyy"
operator|<<
literal|"1/12/1974y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyy"
operator|<<
literal|"1/1/1974"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"dd/MM/yyy"
operator|<<
literal|"01/01/74y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"ddd/MMM/yy"
operator|<<
literal|"Sun/Dec/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"dddd/MMMM/y"
operator|<<
literal|"Sunday/December/y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy"
operator|<<
literal|"Sunday1/December12/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy"
operator|<<
literal|"dddd/December/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy"
operator|<<
literal|"1dd1/December/74y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yy"
operator|<<
literal|"1dd1/DecM/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'd'dd/M/yy"
operator|<<
literal|"1d01/12/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\"yy\""
operator|<<
literal|"\"74\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'\"yy\"'"
operator|<<
literal|"\"yy\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|QDate
argument_list|()
operator|<<
literal|"'\"yy\"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"hh:mm:ss.zzz ap d'd'dd/M/yy"
operator|<<
literal|"hh:mm:ss.zzz ap 1d01/12/74"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDate
name|void
name|tst_QLocale
operator|::
name|formatDate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|date
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTime
argument_list|)
end_macro
begin_function
DECL|function|formatTime_data
name|void
name|tst_QLocale
operator|::
name|formatTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTime
argument_list|>
argument_list|(
literal|"time"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s"
operator|<<
literal|"1:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s"
operator|<<
literal|"1:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss"
operator|<<
literal|"01:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss"
operator|<<
literal|"01:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hhh:mmm:sss"
operator|<<
literal|"011:022:033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s"
operator|<<
literal|"14:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s"
operator|<<
literal|"14:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss"
operator|<<
literal|"14:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss"
operator|<<
literal|"14:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hhh:mmm:sss"
operator|<<
literal|"1414:022:033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s ap"
operator|<<
literal|"2:2:3 pm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s AP"
operator|<<
literal|"14:2:3 PM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss aap"
operator|<<
literal|"02:02:03 pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss AP aa"
operator|<<
literal|"14:02:03 PM pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s ap"
operator|<<
literal|"1:2:3 am"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s AP"
operator|<<
literal|"1:2:3 AM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\"H\""
operator|<<
literal|"\"1\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'\"H\"'"
operator|<<
literal|"\"H\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.z"
operator|<<
literal|"1:2:3.456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.zz"
operator|<<
literal|"1:2:3.456456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|"1:2:3.456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"H:m:s.z"
operator|<<
literal|"1:2:3.4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|"1:2:3.004"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"33"
argument_list|)
operator|<<
name|QTime
argument_list|()
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"34"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"dd MM yyyy H:m:s.zzz"
operator|<<
literal|"dd MM yyyy 1:2:3.004"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatTime
name|void
name|tst_QLocale
operator|::
name|formatTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTime
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|time
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDateTime_data
name|void
name|tst_QLocale
operator|::
name|formatDateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"localeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"dateTime"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddd/MMM/yy AP"
operator|<<
literal|"Mon/Dec/74 PM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dddd/MMMM/y apa"
operator|<<
literal|"Monday/December/y pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"Monday2/December12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/December/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|4
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/December/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/DecM/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"yymm\""
operator|<<
literal|"\"7414\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|"\"yymm\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|()
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddd/MMM/yy AP"
operator|<<
literal|"man./des./74 PM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dddd/MMMM/y apa"
operator|<<
literal|"mandag/desember/y pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"mandag2/desember12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/desember/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|4
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/desember/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/des.M/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"yymm\""
operator|<<
literal|"\"7414\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|"\"yymm\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|()
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDateTime
name|void
name|tst_QLocale
operator|::
name|formatDateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|localeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|dateTime
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|localeName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|dateTime
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime_data
name|void
name|tst_QLocale
operator|::
name|toDateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"localeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"Monday2/December12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/December/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/December/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/DecM/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"mandag2/desember12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/desember/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/desember/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/des.M/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC-1123"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|18
argument_list|,
literal|8
argument_list|,
literal|30
argument_list|)
argument_list|)
operator|<<
literal|"ddd, dd MMM yyyy hh:mm:ss 'GMT'"
operator|<<
literal|"Thu, 01 Nov 2007 18:08:30 GMT"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longFormat"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2009
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|11
argument_list|,
literal|48
argument_list|,
literal|32
argument_list|)
argument_list|)
operator|<<
literal|"dddd, MMMM d, yyyy h:mm:ss AP "
operator|<<
literal|"Monday, January 5, 2009 11:48:32 AM "
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime
name|void
name|tst_QLocale
operator|::
name|toDateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|localeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|localeName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toDateTime
argument_list|(
name|string
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
operator|==
name|format
condition|)
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toDateTime
argument_list|(
name|string
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|macDefaultLocale
name|void
name|tst_QLocale
operator|::
name|macDefaultLocale
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"This is a Mac OS X-only test"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QLocale
name|locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
if|if
condition|(
name|locale
operator|.
name|name
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"en_US"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This test only tests for en_US"
argument_list|)
expr_stmt|;
name|QTime
name|invalidTime
decl_stmt|;
name|QDate
name|invalidDate
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"M/d/yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"MMMM d, yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h:mm AP"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h:mm:ss AP t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we are using the system to parse them
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|1234.56
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12/1/74"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"December 1, 1974"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1:02 AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|currentTime
init|=
name|QTime
operator|::
name|currentTime
argument_list|()
decl_stmt|;
name|QTime
name|utcTime
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toUTC
argument_list|()
operator|.
name|time
argument_list|()
decl_stmt|;
name|int
name|diff
init|=
name|currentTime
operator|.
name|hour
argument_list|()
operator|-
name|utcTime
operator|.
name|hour
argument_list|()
decl_stmt|;
comment|// Check if local time and utc time are on opposite sides of the 24-hour wrap-around.
if|if
condition|(
name|diff
operator|<
operator|-
literal|12
condition|)
name|diff
operator|+=
literal|24
expr_stmt|;
if|if
condition|(
name|diff
operator|>
literal|12
condition|)
name|diff
operator|-=
literal|24
expr_stmt|;
specifier|const
name|QString
name|timeString
init|=
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|timeString
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"1:02:03"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$1,234.00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"($1,234.00)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"($1,234.56)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Depending on the configured time zone, the time string might not
comment|// contain a GMT specifier. (Sometimes it just names the zone, like "CEST")
if|if
condition|(
name|timeString
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|expectedGMTSpecifier
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>=
literal|0
condition|)
name|expectedGMTSpecifier
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
else|else
name|expectedGMTSpecifier
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
if|if
condition|(
name|qAbs
argument_list|(
name|diff
argument_list|)
operator|<
literal|10
condition|)
name|expectedGMTSpecifier
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"0%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qAbs
argument_list|(
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|expectedGMTSpecifier
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qAbs
argument_list|(
name|diff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|timeString
operator|.
name|contains
argument_list|(
name|expectedGMTSpecifier
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"timeString `%1', expectedGMTSpecifier `%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|timeString
argument_list|)
operator|.
name|arg
argument_list|(
name|expectedGMTSpecifier
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dayName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Monday"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dayName
argument_list|(
literal|7
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|monthName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|monthName
argument_list|(
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"December"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|firstDayOfWeek
argument_list|()
argument_list|,
name|Qt
operator|::
name|Sunday
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|quoteString
argument_list|(
literal|"string"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\x9c"
literal|"string"
literal|"\xe2\x80\x9d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|quoteString
argument_list|(
literal|"string"
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\x98"
literal|"string"
literal|"\xe2\x80\x99"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|days
decl_stmt|;
name|days
operator|<<
name|Qt
operator|::
name|Monday
operator|<<
name|Qt
operator|::
name|Tuesday
operator|<<
name|Qt
operator|::
name|Wednesday
operator|<<
name|Qt
operator|::
name|Thursday
operator|<<
name|Qt
operator|::
name|Friday
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|weekdays
argument_list|()
argument_list|,
name|days
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_function
DECL|function|getWinLocaleInfo
specifier|static
name|QString
name|getWinLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|)
block|{
name|LCID
name|id
init|=
name|GetThreadLocale
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLocale: empty windows locale info (%d)"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QByteArray
name|buff
argument_list|(
name|cnt
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cnt
operator|=
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
cast|reinterpret_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|buff
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|buff
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"QLocale: empty windows locale info (%d)"
argument_list|,
name|type
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
cast|reinterpret_cast
argument_list|<
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|buff
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setWinLocaleInfo
specifier|static
name|void
name|setWinLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|LCID
name|id
init|=
name|GetThreadLocale
argument_list|()
decl_stmt|;
name|SetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RestoreLocaleHelper
class|class
name|RestoreLocaleHelper
block|{
public|public:
DECL|function|RestoreLocaleHelper
name|RestoreLocaleHelper
parameter_list|()
block|{
name|m_decimal
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|)
expr_stmt|;
name|m_thousand
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|)
expr_stmt|;
name|m_sdate
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|)
expr_stmt|;
name|m_ldate
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|)
expr_stmt|;
name|m_time
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_STIMEFORMAT
argument_list|)
expr_stmt|;
block|}
DECL|function|~RestoreLocaleHelper
name|~
name|RestoreLocaleHelper
parameter_list|()
block|{
comment|// restore these, or the user will get a surprise
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|,
name|m_decimal
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|,
name|m_thousand
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|,
name|m_sdate
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|,
name|m_ldate
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STIMEFORMAT
argument_list|,
name|m_time
argument_list|)
expr_stmt|;
block|}
DECL|member|m_decimal
DECL|member|m_thousand
DECL|member|m_sdate
DECL|member|m_ldate
DECL|member|m_time
name|QString
name|m_decimal
decl_stmt|,
name|m_thousand
decl_stmt|,
name|m_sdate
decl_stmt|,
name|m_ldate
decl_stmt|,
name|m_time
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|windowsDefaultLocale
name|void
name|tst_QLocale
operator|::
name|windowsDefaultLocale
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QSKIP
argument_list|(
literal|"This is a Windows test"
argument_list|)
expr_stmt|;
else|#
directive|else
name|RestoreLocaleHelper
name|systemLocale
decl_stmt|;
comment|// set weird system defaults and make sure we're using them
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|,
name|QLatin1String
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|,
name|QLatin1String
argument_list|(
literal|"?"
argument_list|)
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|,
name|QLatin1String
argument_list|(
literal|"d*M*yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|,
name|QLatin1String
argument_list|(
literal|"d@M@yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STIMEFORMAT
argument_list|,
name|QLatin1String
argument_list|(
literal|"h^m^s"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
comment|// make sure we are seeing the system's format strings
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d*M*yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d@M@yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h^m^s"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"h^m^s"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d*M*yyyy h^m^s"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d@M@yyyy h^m^s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we are using the system to parse them
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|1234.56
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1?234@56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1*12*1974"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1@12@1974"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1^2^3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1^2^3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1*12*1974 1^2^3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1@12@1974 1^2^3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1^2^3"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|numberOptions
name|void
name|tst_QLocale
operator|::
name|numberOptions
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|locale
operator|.
name|setNumberOptions
argument_list|(
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|)
expr_stmt|;
name|locale
operator|.
name|setNumberOptions
argument_list|(
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|locale2
init|=
name|locale
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale2
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negativeNumbers
name|void
name|tst_QLocale
operator|::
name|negativeNumbers
parameter_list|()
block|{
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|i
decl_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-10,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-10000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1,000,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1000000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000000
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|LocaleListItem
struct|struct
name|LocaleListItem
block|{
DECL|member|language
name|int
name|language
decl_stmt|;
DECL|member|country
name|int
name|country
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// first two rows of locale_data[] in qlocale_data_p.h
end_comment
begin_decl_stmt
DECL|variable|g_locale_list
specifier|static
specifier|const
name|LocaleListItem
name|g_locale_list
index|[]
init|=
block|{
block|{
literal|1
block|,
literal|0
block|}
block|,
comment|// C/AnyCountry
block|{
literal|3
block|,
literal|69
block|}
block|,
comment|// Afan/Ethiopia
block|{
literal|3
block|,
literal|111
block|}
block|,
comment|// Afan/Kenya
block|{
literal|4
block|,
literal|59
block|}
block|,
comment|// Afar/Djibouti
block|{
literal|4
block|,
literal|67
block|}
block|,
comment|// Afar/Eritrea
block|{
literal|4
block|,
literal|69
block|}
block|,
comment|// Afar/Ethiopia
block|{
literal|5
block|,
literal|195
block|}
block|,
comment|// Afrikaans/SouthAfrica
block|{
literal|5
block|,
literal|148
block|}
block|,
comment|// Afrikaans/Namibia
block|{
literal|6
block|,
literal|2
block|}
block|,
comment|// Albanian/Albania
block|{
literal|7
block|,
literal|69
block|}
block|,
comment|// Amharic/Ethiopia
block|{
literal|8
block|,
literal|186
block|}
block|,
comment|// Arabic/SaudiArabia
block|{
literal|8
block|,
literal|3
block|}
block|,
comment|// Arabic/Algeria
block|{
literal|8
block|,
literal|17
block|}
block|,
comment|// Arabic/Bahrain
block|{
literal|8
block|,
literal|64
block|}
block|,
comment|// Arabic/Egypt
block|{
literal|8
block|,
literal|103
block|}
block|,
comment|// Arabic/Iraq
block|{
literal|8
block|,
literal|109
block|}
block|,
comment|// Arabic/Jordan
block|{
literal|8
block|,
literal|115
block|}
block|,
comment|// Arabic/Kuwait
block|{
literal|8
block|,
literal|119
block|}
block|,
comment|// Arabic/Lebanon
block|{
literal|8
block|,
literal|122
block|}
block|,
comment|// Arabic/LibyanArabJamahiriya
block|{
literal|8
block|,
literal|145
block|}
block|,
comment|// Arabic/Morocco
block|{
literal|8
block|,
literal|162
block|}
block|,
comment|// Arabic/Oman
block|{
literal|8
block|,
literal|175
block|}
block|,
comment|// Arabic/Qatar
block|{
literal|8
block|,
literal|201
block|}
block|,
comment|// Arabic/Sudan
block|{
literal|8
block|,
literal|207
block|}
block|,
comment|// Arabic/SyrianArabRepublic
block|{
literal|8
block|,
literal|216
block|}
block|,
comment|// Arabic/Tunisia
block|{
literal|8
block|,
literal|223
block|}
block|,
comment|// Arabic/UnitedArabEmirates
block|{
literal|8
block|,
literal|237
block|}
block|,
comment|// Arabic/Yemen
block|{
literal|9
block|,
literal|11
block|}
block|,
comment|// Armenian/Armenia
block|{
literal|10
block|,
literal|100
block|}
block|,
comment|// Assamese/India
block|{
literal|12
block|,
literal|15
block|}
block|,
comment|// Azerbaijani/Azerbaijan
block|{
literal|12
block|,
literal|102
block|}
block|,
comment|// Azerbaijani/Iran
block|{
literal|14
block|,
literal|197
block|}
block|,
comment|// Basque/Spain
block|{
literal|15
block|,
literal|18
block|}
block|,
comment|// Bengali/Bangladesh
block|{
literal|15
block|,
literal|100
block|}
block|,
comment|// Bengali/India
block|{
literal|16
block|,
literal|25
block|}
block|,
comment|// Bhutani/Bhutan
block|{
literal|19
block|,
literal|74
block|}
block|,
comment|// Breton/France
block|{
literal|20
block|,
literal|33
block|}
block|,
comment|// Bulgarian/Bulgaria
block|{
literal|21
block|,
literal|147
block|}
block|,
comment|// Burmese/Myanmar
block|{
literal|22
block|,
literal|20
block|}
block|,
comment|// Byelorussian/Belarus
block|{
literal|23
block|,
literal|36
block|}
block|,
comment|// Cambodian/Cambodia
block|{
literal|24
block|,
literal|197
block|}
block|,
comment|// Catalan/Spain
block|{
literal|25
block|,
literal|44
block|}
block|,
comment|// Chinese/China
block|{
literal|25
block|,
literal|97
block|}
block|,
comment|// Chinese/HongKong
block|{
literal|25
block|,
literal|126
block|}
block|,
comment|// Chinese/Macau
block|{
literal|25
block|,
literal|190
block|}
block|,
comment|// Chinese/Singapore
block|{
literal|25
block|,
literal|208
block|}
block|,
comment|// Chinese/Taiwan
block|{
literal|27
block|,
literal|54
block|}
block|,
comment|// Croatian/Croatia
block|{
literal|28
block|,
literal|57
block|}
block|,
comment|// Czech/CzechRepublic
block|{
literal|29
block|,
literal|58
block|}
block|,
comment|// Danish/Denmark
block|{
literal|30
block|,
literal|151
block|}
block|,
comment|// Dutch/Netherlands
block|{
literal|30
block|,
literal|21
block|}
block|,
comment|// Dutch/Belgium
block|{
literal|31
block|,
literal|225
block|}
block|,
comment|// English/UnitedStates
block|{
literal|31
block|,
literal|4
block|}
block|,
comment|// English/AmericanSamoa
block|{
literal|31
block|,
literal|13
block|}
block|,
comment|// English/Australia
block|{
literal|31
block|,
literal|21
block|}
block|,
comment|// English/Belgium
block|{
literal|31
block|,
literal|22
block|}
block|,
comment|// English/Belize
block|{
literal|31
block|,
literal|28
block|}
block|,
comment|// English/Botswana
block|{
literal|31
block|,
literal|38
block|}
block|,
comment|// English/Canada
block|{
literal|31
block|,
literal|89
block|}
block|,
comment|// English/Guam
block|{
literal|31
block|,
literal|97
block|}
block|,
comment|// English/HongKong
block|{
literal|31
block|,
literal|100
block|}
block|,
comment|// English/India
block|{
literal|31
block|,
literal|104
block|}
block|,
comment|// English/Ireland
block|{
literal|31
block|,
literal|107
block|}
block|,
comment|// English/Jamaica
block|{
literal|31
block|,
literal|133
block|}
block|,
comment|// English/Malta
block|{
literal|31
block|,
literal|134
block|}
block|,
comment|// English/MarshallIslands
block|{
literal|31
block|,
literal|137
block|}
block|,
comment|// English/Mauritius
block|{
literal|31
block|,
literal|148
block|}
block|,
comment|// English/Namibia
block|{
literal|31
block|,
literal|154
block|}
block|,
comment|// English/NewZealand
block|{
literal|31
block|,
literal|160
block|}
block|,
comment|// English/NorthernMarianaIslands
block|{
literal|31
block|,
literal|163
block|}
block|,
comment|// English/Pakistan
block|{
literal|31
block|,
literal|170
block|}
block|,
comment|// English/Philippines
block|{
literal|31
block|,
literal|190
block|}
block|,
comment|// English/Singapore
block|{
literal|31
block|,
literal|195
block|}
block|,
comment|// English/SouthAfrica
block|{
literal|31
block|,
literal|215
block|}
block|,
comment|// English/TrinidadAndTobago
block|{
literal|31
block|,
literal|224
block|}
block|,
comment|// English/UnitedKingdom
block|{
literal|31
block|,
literal|226
block|}
block|,
comment|// English/UnitedStatesMinorOutlyingIslands
block|{
literal|31
block|,
literal|234
block|}
block|,
comment|// English/USVirginIslands
block|{
literal|31
block|,
literal|240
block|}
block|,
comment|// English/Zimbabwe
block|{
literal|33
block|,
literal|68
block|}
block|,
comment|// Estonian/Estonia
block|{
literal|34
block|,
literal|71
block|}
block|,
comment|// Faroese/FaroeIslands
block|{
literal|36
block|,
literal|73
block|}
block|,
comment|// Finnish/Finland
block|{
literal|37
block|,
literal|74
block|}
block|,
comment|// French/France
block|{
literal|37
block|,
literal|21
block|}
block|,
comment|// French/Belgium
block|{
literal|37
block|,
literal|37
block|}
block|,
comment|// French/Cameroon
block|{
literal|37
block|,
literal|38
block|}
block|,
comment|// French/Canada
block|{
literal|37
block|,
literal|41
block|}
block|,
comment|// French/CentralAfricanRepublic
block|{
literal|37
block|,
literal|53
block|}
block|,
comment|// French/IvoryCoast
block|{
literal|37
block|,
literal|88
block|}
block|,
comment|// French/Guadeloupe
block|{
literal|37
block|,
literal|91
block|}
block|,
comment|// French/Guinea
block|{
literal|37
block|,
literal|125
block|}
block|,
comment|// French/Luxembourg
block|{
literal|37
block|,
literal|128
block|}
block|,
comment|// French/Madagascar
block|{
literal|37
block|,
literal|132
block|}
block|,
comment|// French/Mali
block|{
literal|37
block|,
literal|135
block|}
block|,
comment|// French/Martinique
block|{
literal|37
block|,
literal|142
block|}
block|,
comment|// French/Monaco
block|{
literal|37
block|,
literal|156
block|}
block|,
comment|// French/Niger
block|{
literal|37
block|,
literal|176
block|}
block|,
comment|// French/Reunion
block|{
literal|37
block|,
literal|187
block|}
block|,
comment|// French/Senegal
block|{
literal|37
block|,
literal|206
block|}
block|,
comment|// French/Switzerland
block|{
literal|37
block|,
literal|244
block|}
block|,
comment|// French/Saint Barthelemy
block|{
literal|37
block|,
literal|245
block|}
block|,
comment|// French/Saint Martin
block|{
literal|40
block|,
literal|197
block|}
block|,
comment|// Galician/Spain
block|{
literal|41
block|,
literal|81
block|}
block|,
comment|// Georgian/Georgia
block|{
literal|42
block|,
literal|82
block|}
block|,
comment|// German/Germany
block|{
literal|42
block|,
literal|14
block|}
block|,
comment|// German/Austria
block|{
literal|42
block|,
literal|21
block|}
block|,
comment|// German/Belgium
block|{
literal|42
block|,
literal|123
block|}
block|,
comment|// German/Liechtenstein
block|{
literal|42
block|,
literal|125
block|}
block|,
comment|// German/Luxembourg
block|{
literal|42
block|,
literal|206
block|}
block|,
comment|// German/Switzerland
block|{
literal|43
block|,
literal|85
block|}
block|,
comment|// Greek/Greece
block|{
literal|43
block|,
literal|56
block|}
block|,
comment|// Greek/Cyprus
block|{
literal|44
block|,
literal|86
block|}
block|,
comment|// Greenlandic/Greenland
block|{
literal|46
block|,
literal|100
block|}
block|,
comment|// Gujarati/India
block|{
literal|47
block|,
literal|83
block|}
block|,
comment|// Hausa/Ghana
block|{
literal|47
block|,
literal|156
block|}
block|,
comment|// Hausa/Niger
block|{
literal|47
block|,
literal|157
block|}
block|,
comment|// Hausa/Nigeria
block|{
literal|47
block|,
literal|201
block|}
block|,
comment|// Hausa/Sudan
block|{
literal|48
block|,
literal|105
block|}
block|,
comment|// Hebrew/Israel
block|{
literal|49
block|,
literal|100
block|}
block|,
comment|// Hindi/India
block|{
literal|50
block|,
literal|98
block|}
block|,
comment|// Hungarian/Hungary
block|{
literal|51
block|,
literal|99
block|}
block|,
comment|// Icelandic/Iceland
block|{
literal|52
block|,
literal|101
block|}
block|,
comment|// Indonesian/Indonesia
block|{
literal|57
block|,
literal|104
block|}
block|,
comment|// Irish/Ireland
block|{
literal|58
block|,
literal|106
block|}
block|,
comment|// Italian/Italy
block|{
literal|58
block|,
literal|206
block|}
block|,
comment|// Italian/Switzerland
block|{
literal|59
block|,
literal|108
block|}
block|,
comment|// Japanese/Japan
block|{
literal|61
block|,
literal|100
block|}
block|,
comment|// Kannada/India
block|{
literal|63
block|,
literal|110
block|}
block|,
comment|// Kazakh/Kazakhstan
block|{
literal|64
block|,
literal|179
block|}
block|,
comment|// Kinyarwanda/Rwanda
block|{
literal|65
block|,
literal|116
block|}
block|,
comment|// Kirghiz/Kyrgyzstan
block|{
literal|66
block|,
literal|114
block|}
block|,
comment|// Korean/RepublicOfKorea
block|{
literal|67
block|,
literal|102
block|}
block|,
comment|// Kurdish/Iran
block|{
literal|67
block|,
literal|103
block|}
block|,
comment|// Kurdish/Iraq
block|{
literal|67
block|,
literal|207
block|}
block|,
comment|// Kurdish/SyrianArabRepublic
block|{
literal|67
block|,
literal|217
block|}
block|,
comment|// Kurdish/Turkey
block|{
literal|69
block|,
literal|117
block|}
block|,
comment|// Laothian/Lao
block|{
literal|71
block|,
literal|118
block|}
block|,
comment|// Latvian/Latvia
block|{
literal|72
block|,
literal|49
block|}
block|,
comment|// Lingala/DemocraticRepublicOfCongo
block|{
literal|72
block|,
literal|50
block|}
block|,
comment|// Lingala/PeoplesRepublicOfCongo
block|{
literal|73
block|,
literal|124
block|}
block|,
comment|// Lithuanian/Lithuania
block|{
literal|74
block|,
literal|127
block|}
block|,
comment|// Macedonian/Macedonia
block|{
literal|75
block|,
literal|128
block|}
block|,
comment|// Malagasy/Madagascar
block|{
literal|76
block|,
literal|130
block|}
block|,
comment|// Malay/Malaysia
block|{
literal|76
block|,
literal|32
block|}
block|,
comment|// Malay/BruneiDarussalam
block|{
literal|77
block|,
literal|100
block|}
block|,
comment|// Malayalam/India
block|{
literal|78
block|,
literal|133
block|}
block|,
comment|// Maltese/Malta
block|{
literal|79
block|,
literal|154
block|}
block|,
comment|// Maori/NewZealand
block|{
literal|80
block|,
literal|100
block|}
block|,
comment|// Marathi/India
block|{
literal|82
block|,
literal|44
block|}
block|,
comment|// Mongolian/China
block|{
literal|82
block|,
literal|143
block|}
block|,
comment|// Mongolian/Mongolia
block|{
literal|84
block|,
literal|100
block|}
block|,
comment|// Nepali/India
block|{
literal|84
block|,
literal|150
block|}
block|,
comment|// Nepali/Nepal
block|{
literal|85
block|,
literal|161
block|}
block|,
comment|// Norwegian/Norway
block|{
literal|86
block|,
literal|74
block|}
block|,
comment|// Occitan/France
block|{
literal|87
block|,
literal|100
block|}
block|,
comment|// Oriya/India
block|{
literal|88
block|,
literal|1
block|}
block|,
comment|// Pashto/Afghanistan
block|{
literal|89
block|,
literal|102
block|}
block|,
comment|// Persian/Iran
block|{
literal|89
block|,
literal|1
block|}
block|,
comment|// Persian/Afghanistan
block|{
literal|90
block|,
literal|172
block|}
block|,
comment|// Polish/Poland
block|{
literal|91
block|,
literal|173
block|}
block|,
comment|// Portuguese/Portugal
block|{
literal|91
block|,
literal|30
block|}
block|,
comment|// Portuguese/Brazil
block|{
literal|91
block|,
literal|92
block|}
block|,
comment|// Portuguese/GuineaBissau
block|{
literal|91
block|,
literal|146
block|}
block|,
comment|// Portuguese/Mozambique
block|{
literal|92
block|,
literal|100
block|}
block|,
comment|// Punjabi/India
block|{
literal|92
block|,
literal|163
block|}
block|,
comment|// Punjabi/Pakistan
block|{
literal|94
block|,
literal|206
block|}
block|,
comment|// RhaetoRomance/Switzerland
block|{
literal|95
block|,
literal|141
block|}
block|,
comment|// Romanian/Moldova
block|{
literal|95
block|,
literal|177
block|}
block|,
comment|// Romanian/Romania
block|{
literal|96
block|,
literal|178
block|}
block|,
comment|// Russian/RussianFederation
block|{
literal|96
block|,
literal|141
block|}
block|,
comment|// Russian/Moldova
block|{
literal|96
block|,
literal|222
block|}
block|,
comment|// Russian/Ukraine
block|{
literal|98
block|,
literal|41
block|}
block|,
comment|// Sangho/CentralAfricanRepublic
block|{
literal|99
block|,
literal|100
block|}
block|,
comment|// Sanskrit/India
block|{
literal|100
block|,
literal|241
block|}
block|,
comment|// Serbian/SerbiaAndMontenegro
block|{
literal|100
block|,
literal|27
block|}
block|,
comment|// Serbian/BosniaAndHerzegowina
block|{
literal|100
block|,
literal|238
block|}
block|,
comment|// Serbian/Yugoslavia
block|{
literal|100
block|,
literal|242
block|}
block|,
comment|// Serbian/Montenegro
block|{
literal|100
block|,
literal|243
block|}
block|,
comment|// Serbian/Serbia
block|{
literal|101
block|,
literal|241
block|}
block|,
comment|// SerboCroatian/SerbiaAndMontenegro
block|{
literal|101
block|,
literal|27
block|}
block|,
comment|// SerboCroatian/BosniaAndHerzegowina
block|{
literal|101
block|,
literal|238
block|}
block|,
comment|// SerboCroatian/Yugoslavia
block|{
literal|102
block|,
literal|120
block|}
block|,
comment|// Sesotho/Lesotho
block|{
literal|102
block|,
literal|195
block|}
block|,
comment|// Sesotho/SouthAfrica
block|{
literal|103
block|,
literal|195
block|}
block|,
comment|// Setswana/SouthAfrica
block|{
literal|104
block|,
literal|240
block|}
block|,
comment|// Shona/Zimbabwe
block|{
literal|106
block|,
literal|198
block|}
block|,
comment|// Singhalese/SriLanka
block|{
literal|107
block|,
literal|195
block|}
block|,
comment|// Siswati/SouthAfrica
block|{
literal|107
block|,
literal|204
block|}
block|,
comment|// Siswati/Swaziland
block|{
literal|108
block|,
literal|191
block|}
block|,
comment|// Slovak/Slovakia
block|{
literal|109
block|,
literal|192
block|}
block|,
comment|// Slovenian/Slovenia
block|{
literal|110
block|,
literal|194
block|}
block|,
comment|// Somali/Somalia
block|{
literal|110
block|,
literal|59
block|}
block|,
comment|// Somali/Djibouti
block|{
literal|110
block|,
literal|69
block|}
block|,
comment|// Somali/Ethiopia
block|{
literal|110
block|,
literal|111
block|}
block|,
comment|// Somali/Kenya
block|{
literal|111
block|,
literal|197
block|}
block|,
comment|// Spanish/Spain
block|{
literal|111
block|,
literal|10
block|}
block|,
comment|// Spanish/Argentina
block|{
literal|111
block|,
literal|26
block|}
block|,
comment|// Spanish/Bolivia
block|{
literal|111
block|,
literal|43
block|}
block|,
comment|// Spanish/Chile
block|{
literal|111
block|,
literal|47
block|}
block|,
comment|// Spanish/Colombia
block|{
literal|111
block|,
literal|52
block|}
block|,
comment|// Spanish/CostaRica
block|{
literal|111
block|,
literal|61
block|}
block|,
comment|// Spanish/DominicanRepublic
block|{
literal|111
block|,
literal|63
block|}
block|,
comment|// Spanish/Ecuador
block|{
literal|111
block|,
literal|65
block|}
block|,
comment|// Spanish/ElSalvador
block|{
literal|111
block|,
literal|66
block|}
block|,
comment|// Spanish/EquatorialGuinea
block|{
literal|111
block|,
literal|90
block|}
block|,
comment|// Spanish/Guatemala
block|{
literal|111
block|,
literal|96
block|}
block|,
comment|// Spanish/Honduras
block|{
literal|111
block|,
literal|139
block|}
block|,
comment|// Spanish/Mexico
block|{
literal|111
block|,
literal|155
block|}
block|,
comment|// Spanish/Nicaragua
block|{
literal|111
block|,
literal|166
block|}
block|,
comment|// Spanish/Panama
block|{
literal|111
block|,
literal|168
block|}
block|,
comment|// Spanish/Paraguay
block|{
literal|111
block|,
literal|169
block|}
block|,
comment|// Spanish/Peru
block|{
literal|111
block|,
literal|174
block|}
block|,
comment|// Spanish/PuertoRico
block|{
literal|111
block|,
literal|225
block|}
block|,
comment|// Spanish/UnitedStates
block|{
literal|111
block|,
literal|227
block|}
block|,
comment|// Spanish/Uruguay
block|{
literal|111
block|,
literal|231
block|}
block|,
comment|// Spanish/Venezuela
block|{
literal|113
block|,
literal|111
block|}
block|,
comment|// Swahili/Kenya
block|{
literal|113
block|,
literal|210
block|}
block|,
comment|// Swahili/Tanzania
block|{
literal|114
block|,
literal|205
block|}
block|,
comment|// Swedish/Sweden
block|{
literal|114
block|,
literal|73
block|}
block|,
comment|// Swedish/Finland
block|{
literal|116
block|,
literal|209
block|}
block|,
comment|// Tajik/Tajikistan
block|{
literal|117
block|,
literal|100
block|}
block|,
comment|// Tamil/India
block|{
literal|117
block|,
literal|198
block|}
block|,
comment|// Tamil/SriLanka
block|{
literal|118
block|,
literal|178
block|}
block|,
comment|// Tatar/RussianFederation
block|{
literal|119
block|,
literal|100
block|}
block|,
comment|// Telugu/India
block|{
literal|120
block|,
literal|211
block|}
block|,
comment|// Thai/Thailand
block|{
literal|121
block|,
literal|44
block|}
block|,
comment|// Tibetan/China
block|{
literal|121
block|,
literal|100
block|}
block|,
comment|// Tibetan/India
block|{
literal|122
block|,
literal|67
block|}
block|,
comment|// Tigrinya/Eritrea
block|{
literal|122
block|,
literal|69
block|}
block|,
comment|// Tigrinya/Ethiopia
block|{
literal|123
block|,
literal|214
block|}
block|,
comment|// Tonga/Tonga
block|{
literal|124
block|,
literal|195
block|}
block|,
comment|// Tsonga/SouthAfrica
block|{
literal|125
block|,
literal|217
block|}
block|,
comment|// Turkish/Turkey
block|{
literal|128
block|,
literal|44
block|}
block|,
comment|// Uigur/China
block|{
literal|129
block|,
literal|222
block|}
block|,
comment|// Ukrainian/Ukraine
block|{
literal|130
block|,
literal|100
block|}
block|,
comment|// Urdu/India
block|{
literal|130
block|,
literal|163
block|}
block|,
comment|// Urdu/Pakistan
block|{
literal|131
block|,
literal|228
block|}
block|,
comment|// Uzbek/Uzbekistan
block|{
literal|131
block|,
literal|1
block|}
block|,
comment|// Uzbek/Afghanistan
block|{
literal|132
block|,
literal|232
block|}
block|,
comment|// Vietnamese/VietNam
block|{
literal|134
block|,
literal|224
block|}
block|,
comment|// Welsh/UnitedKingdom
block|{
literal|135
block|,
literal|187
block|}
block|,
comment|// Wolof/Senegal
block|{
literal|136
block|,
literal|195
block|}
block|,
comment|// Xhosa/SouthAfrica
block|{
literal|138
block|,
literal|157
block|}
block|,
comment|// Yoruba/Nigeria
block|{
literal|140
block|,
literal|195
block|}
block|,
comment|// Zulu/SouthAfrica
block|{
literal|141
block|,
literal|161
block|}
block|,
comment|// Nynorsk/Norway
block|{
literal|142
block|,
literal|27
block|}
block|,
comment|// Bosnian/BosniaAndHerzegowina
block|{
literal|143
block|,
literal|131
block|}
block|,
comment|// Divehi/Maldives
block|{
literal|144
block|,
literal|224
block|}
block|,
comment|// Manx/UnitedKingdom
block|{
literal|145
block|,
literal|224
block|}
block|,
comment|// Cornish/UnitedKingdom
block|{
literal|146
block|,
literal|83
block|}
block|,
comment|// Akan/Ghana
block|{
literal|147
block|,
literal|100
block|}
block|,
comment|// Konkani/India
block|{
literal|148
block|,
literal|83
block|}
block|,
comment|// Ga/Ghana
block|{
literal|149
block|,
literal|157
block|}
block|,
comment|// Igbo/Nigeria
block|{
literal|150
block|,
literal|111
block|}
block|,
comment|// Kamba/Kenya
block|{
literal|151
block|,
literal|207
block|}
block|,
comment|// Syriac/SyrianArabRepublic
block|{
literal|152
block|,
literal|67
block|}
block|,
comment|// Blin/Eritrea
block|{
literal|153
block|,
literal|67
block|}
block|,
comment|// Geez/Eritrea
block|{
literal|153
block|,
literal|69
block|}
block|,
comment|// Geez/Ethiopia
block|{
literal|154
block|,
literal|53
block|}
block|,
comment|// Koro/IvoryCoast
block|{
literal|155
block|,
literal|69
block|}
block|,
comment|// Sidamo/Ethiopia
block|{
literal|156
block|,
literal|157
block|}
block|,
comment|// Atsam/Nigeria
block|{
literal|157
block|,
literal|67
block|}
block|,
comment|// Tigre/Eritrea
block|{
literal|158
block|,
literal|157
block|}
block|,
comment|// Jju/Nigeria
block|{
literal|159
block|,
literal|106
block|}
block|,
comment|// Friulian/Italy
block|{
literal|160
block|,
literal|195
block|}
block|,
comment|// Venda/SouthAfrica
block|{
literal|161
block|,
literal|83
block|}
block|,
comment|// Ewe/Ghana
block|{
literal|161
block|,
literal|212
block|}
block|,
comment|// Ewe/Togo
block|{
literal|162
block|,
literal|69
block|}
block|,
comment|// Walamo/Ethiopia
block|{
literal|163
block|,
literal|225
block|}
block|,
comment|// Hawaiian/UnitedStates
block|{
literal|164
block|,
literal|157
block|}
block|,
comment|// Tyap/Nigeria
block|{
literal|165
block|,
literal|129
block|}
block|,
comment|// Chewa/Malawi
block|{
literal|166
block|,
literal|170
block|}
block|,
comment|// Filipino/Philippines
block|{
literal|167
block|,
literal|206
block|}
block|,
comment|// Swiss German/Switzerland
block|{
literal|168
block|,
literal|44
block|}
block|,
comment|// Sichuan Yi/China
block|{
literal|169
block|,
literal|91
block|}
block|,
comment|// Kpelle/Guinea
block|{
literal|169
block|,
literal|121
block|}
block|,
comment|// Kpelle/Liberia
block|{
literal|170
block|,
literal|82
block|}
block|,
comment|// Low German/Germany
block|{
literal|171
block|,
literal|195
block|}
block|,
comment|// South Ndebele/SouthAfrica
block|{
literal|172
block|,
literal|195
block|}
block|,
comment|// Northern Sotho/SouthAfrica
block|{
literal|173
block|,
literal|73
block|}
block|,
comment|// Northern Sami/Finland
block|{
literal|173
block|,
literal|161
block|}
block|,
comment|// Northern Sami/Norway
block|{
literal|174
block|,
literal|208
block|}
block|,
comment|// Taroko/Taiwan
block|{
literal|175
block|,
literal|111
block|}
block|,
comment|// Gusii/Kenya
block|{
literal|176
block|,
literal|111
block|}
block|,
comment|// Taita/Kenya
block|{
literal|177
block|,
literal|187
block|}
block|,
comment|// Fulah/Senegal
block|{
literal|178
block|,
literal|111
block|}
block|,
comment|// Kikuyu/Kenya
block|{
literal|179
block|,
literal|111
block|}
block|,
comment|// Samburu/Kenya
block|{
literal|180
block|,
literal|146
block|}
block|,
comment|// Sena/Mozambique
block|{
literal|181
block|,
literal|240
block|}
block|,
comment|// North Ndebele/Zimbabwe
block|{
literal|182
block|,
literal|210
block|}
block|,
comment|// Rombo/Tanzania
block|{
literal|183
block|,
literal|145
block|}
block|,
comment|// Tachelhit/Morocco
block|{
literal|184
block|,
literal|3
block|}
block|,
comment|// Kabyle/Algeria
block|{
literal|185
block|,
literal|221
block|}
block|,
comment|// Nyankole/Uganda
block|{
literal|186
block|,
literal|210
block|}
block|,
comment|// Bena/Tanzania
block|{
literal|187
block|,
literal|210
block|}
block|,
comment|// Vunjo/Tanzania
block|{
literal|188
block|,
literal|132
block|}
block|,
comment|// Bambara/Mali
block|{
literal|189
block|,
literal|111
block|}
block|,
comment|// Embu/Kenya
block|{
literal|190
block|,
literal|225
block|}
block|,
comment|// Cherokee/UnitedStates
block|{
literal|191
block|,
literal|137
block|}
block|,
comment|// Morisyen/Mauritius
block|{
literal|192
block|,
literal|210
block|}
block|,
comment|// Makonde/Tanzania
block|{
literal|193
block|,
literal|210
block|}
block|,
comment|// Langi/Tanzania
block|{
literal|194
block|,
literal|221
block|}
block|,
comment|// Ganda/Uganda
block|{
literal|195
block|,
literal|239
block|}
block|,
comment|// Bemba/Zambia
block|{
literal|196
block|,
literal|39
block|}
block|,
comment|// Kabuverdianu/CapeVerde
block|{
literal|197
block|,
literal|111
block|}
block|,
comment|// Meru/Kenya
block|{
literal|198
block|,
literal|111
block|}
block|,
comment|// Kalenjin/Kenya
block|{
literal|199
block|,
literal|148
block|}
block|,
comment|// Nama/Namibia
block|{
literal|200
block|,
literal|210
block|}
block|,
comment|// Machame/Tanzania
block|{
literal|201
block|,
literal|82
block|}
block|,
comment|// Colognian/Germany
block|{
literal|202
block|,
literal|111
block|}
block|,
comment|// Masai/Kenya
block|{
literal|202
block|,
literal|210
block|}
block|,
comment|// Masai/Tanzania
block|{
literal|203
block|,
literal|221
block|}
block|,
comment|// Soga/Uganda
block|{
literal|204
block|,
literal|111
block|}
block|,
comment|// Luyia/Kenya
block|{
literal|205
block|,
literal|210
block|}
block|,
comment|// Asu/Tanzania
block|{
literal|206
block|,
literal|111
block|}
block|,
comment|// Teso/Kenya
block|{
literal|206
block|,
literal|221
block|}
block|,
comment|// Teso/Uganda
block|{
literal|207
block|,
literal|67
block|}
block|,
comment|// Saho/Eritrea
block|{
literal|208
block|,
literal|132
block|}
block|,
comment|// Koyra Chiini/Mali
block|{
literal|209
block|,
literal|210
block|}
block|,
comment|// Rwa/Tanzania
block|{
literal|210
block|,
literal|111
block|}
block|,
comment|// Luo/Kenya
block|{
literal|211
block|,
literal|221
block|}
block|,
comment|// Chiga/Uganda
block|{
literal|212
block|,
literal|145
block|}
block|,
comment|// Central Morocco Tamazight/Morocco
block|{
literal|213
block|,
literal|132
block|}
block|,
comment|// Koyraboro Senni/Mali
block|{
literal|214
block|,
literal|210
block|}
comment|// Shambala/Tanzania
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|g_locale_list_count
specifier|static
specifier|const
name|int
name|g_locale_list_count
init|=
sizeof|sizeof
argument_list|(
name|g_locale_list
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|g_locale_list
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|testNames
name|void
name|tst_QLocale
operator|::
name|testNames
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|g_locale_list_count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|LocaleListItem
modifier|&
name|item
init|=
name|g_locale_list
index|[
name|i
index|]
decl_stmt|;
name|QLocale
name|l1
argument_list|(
operator|(
name|QLocale
operator|::
name|Language
operator|)
name|item
operator|.
name|language
argument_list|,
operator|(
name|QLocale
operator|::
name|Country
operator|)
name|item
operator|.
name|country
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l1
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l1
operator|.
name|country
argument_list|()
argument_list|,
name|item
operator|.
name|country
argument_list|)
expr_stmt|;
name|QString
name|name
init|=
name|l1
operator|.
name|name
argument_list|()
decl_stmt|;
name|QLocale
name|l2
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l2
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l2
operator|.
name|country
argument_list|()
argument_list|,
name|item
operator|.
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l2
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QLocale
name|l3
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|"@foo"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l3
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l3
operator|.
name|country
argument_list|()
argument_list|,
name|item
operator|.
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l3
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QLocale
name|l4
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".foo"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l4
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l4
operator|.
name|country
argument_list|()
argument_list|,
name|item
operator|.
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l4
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|language
operator|!=
name|QLocale
operator|::
name|C
condition|)
block|{
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QString
name|lang
init|=
name|name
operator|.
name|left
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
operator|+
name|QLatin1String
argument_list|(
literal|"@foo"
argument_list|)
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
operator|+
name|QLatin1String
argument_list|(
literal|".foo"
argument_list|)
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|item
operator|.
name|language
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|dayName_data
name|void
name|tst_QLocale
operator|::
name|dayName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dayName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"day"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tysdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"7"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\262\320\276\321\201\320\272\321\200\320\265\321\201\320\265\320\275\321\214\320\265"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222\321\201"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayName
name|void
name|tst_QLocale
operator|::
name|dayName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLocale
operator|::
name|FormatType
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|dayName
argument_list|(
name|day
argument_list|,
name|format
argument_list|)
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneDayName_data
name|void
name|tst_QLocale
operator|::
name|standaloneDayName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dayName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"day"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tysdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"S"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222\320\276\321\201\320\272\321\200\320\265\321\201\320\265\320\275\321\214\320\265"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222\321\201"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneDayName
name|void
name|tst_QLocale
operator|::
name|standaloneDayName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLocale
operator|::
name|FormatType
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|standaloneDayName
argument_list|(
name|day
argument_list|,
name|format
argument_list|)
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|underflowOverflow
name|void
name|tst_QLocale
operator|::
name|underflowOverflow
parameter_list|()
block|{
name|QString
name|a
argument_list|(
name|QLatin1String
argument_list|(
literal|e10"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|a
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
name|QLatin1String
argument_list|(
literal|"1e600"
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
name|a
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
name|QLatin1String
argument_list|(
literal|"-9223372036854775809"
argument_list|)
expr_stmt|;
name|a
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SystemLocale
class|class
name|SystemLocale
super|:
specifier|public
name|QSystemLocale
block|{
public|public:
DECL|function|query
specifier|virtual
name|QVariant
name|query
parameter_list|(
name|QueryType
name|type
parameter_list|,
name|QVariant
name|in
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DateTimeFormatLong
case|:
return|return
name|QLatin1String
argument_list|(
literal|"dddd ddd dd d MMMM MMM MM M yyyy hh:mm:ss.zzz"
argument_list|)
return|;
case|case
name|DateTimeFormatShort
case|:
return|return
name|QLatin1String
argument_list|(
literal|"d M yy h:m"
argument_list|)
return|;
case|case
name|DateTimeToStringLong
case|:
case|case
name|DateTimeToStringShort
case|:
return|return
name|in
operator|.
name|toDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|type
operator|==
name|DateTimeToStringShort
condition|?
name|QLatin1String
argument_list|(
literal|"dMyyhm"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"ddMMyyyyhhmmsszzz"
argument_list|)
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QSystemLocale
operator|::
name|query
argument_list|(
name|type
argument_list|,
name|in
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|queryDateTime
name|void
name|tst_QLocale
operator|::
name|queryDateTime
parameter_list|()
block|{
name|SystemLocale
name|loc
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|loc
operator|.
name|query
argument_list|(
name|QSystemLocale
operator|::
name|DateTimeFormatLong
argument_list|,
name|QVariant
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|loc
operator|.
name|query
argument_list|(
name|QSystemLocale
operator|::
name|DateTimeFormatShort
argument_list|,
name|QVariant
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1127412"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|system
argument_list|()
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"01121974010203004"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ampm
name|void
name|tst_QLocale
operator|::
name|ampm
parameter_list|()
block|{
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"PM"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"vorm."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"nachm."
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|sv
argument_list|(
literal|"sv_SE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sv
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"fm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sv
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"em"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|nn
argument_list|(
literal|"nl_NL"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nn
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nn
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"PM"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ua
argument_list|(
literal|"uk_UA"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ua
operator|.
name|amText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\264\320\277"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ua
operator|.
name|pmText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\277\320\277"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateFormat
name|void
name|tst_QLocale
operator|::
name|dateFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dddd d. MMMM yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timeFormat
name|void
name|tst_QLocale
operator|::
name|timeFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH:mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH:mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"'kl'. HH:mm:ss t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTimeFormat
name|void
name|tst_QLocale
operator|::
name|dateTimeFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy HH:mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy HH:mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dddd d. MMMM yyyy 'kl'. HH:mm:ss t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|monthName
name|void
name|tst_QLocale
operator|::
name|monthName
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Jan"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dezember"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dez"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 'de' locale doesn't have narrow month name
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ru
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\321\217\320\275\320\262\320\260\321\200\321\217"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\321\217\320\275\320\262\56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that our CLDR scripts handle surrogate pairs correctly
name|QLocale
name|dsrt
argument_list|(
literal|"en-Dsrt-US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dsrt
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xf0\x90\x90\x96\xf0\x90\x90\xb0\xf0\x90\x91\x8c\xf0\x90\x90\xb7\xf0\x90\x90\xad\xf0\x90\x90\xaf\xf0\x90\x91\x89\xf0\x90\x90\xa8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneMonthName
name|void
name|tst_QLocale
operator|::
name|standaloneMonthName
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Jan"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
comment|// For de_DE locale Unicode CLDR database doesn't contain standalone long months
comment|// so just checking if the return value is the same as in monthName().
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dezember"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dez"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ru
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257\320\275\320\262\320\260\321\200\321\214"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\321\217\320\275\320\262\56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currency
name|void
name|tst_QLocale
operator|::
name|currency
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1234.56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1234.56"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ru_RU
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1234\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1234,56\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234,56\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de_DE
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1234\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1234\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1234,56\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234,56\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1234,56\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|system
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|system
operator|.
name|toCurrencyString
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteString
name|void
name|tst_QLocale
operator|::
name|quoteString
parameter_list|()
block|{
specifier|const
name|QString
name|someText
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x22"
literal|"text"
literal|"\x22"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x27"
literal|"text"
literal|"\x27"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de_CH
argument_list|(
literal|"de_CH"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de_CH
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc2\xab"
literal|"text"
literal|"\xc2\xbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_CH
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\xb9"
literal|"text"
literal|"\xe2\x80\xba"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uiLanguages
name|void
name|tst_QLocale
operator|::
name|uiLanguages
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_US
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-US"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ru_RU
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ru-RU"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|weekendDays
name|void
name|tst_QLocale
operator|::
name|weekendDays
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|days
decl_stmt|;
name|days
operator|<<
name|Qt
operator|::
name|Monday
operator|<<
name|Qt
operator|::
name|Tuesday
operator|<<
name|Qt
operator|::
name|Wednesday
operator|<<
name|Qt
operator|::
name|Thursday
operator|<<
name|Qt
operator|::
name|Friday
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|weekdays
argument_list|()
argument_list|,
name|days
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listPatterns
name|void
name|tst_QLocale
operator|::
name|listPatterns
parameter_list|()
block|{
name|QStringList
name|sl1
decl_stmt|;
name|QStringList
name|sl2
decl_stmt|;
name|sl2
operator|<<
literal|"aaa"
expr_stmt|;
name|QStringList
name|sl3
decl_stmt|;
name|sl3
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
expr_stmt|;
name|QStringList
name|sl4
decl_stmt|;
name|sl4
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QStringList
name|sl5
decl_stmt|;
name|sl5
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
operator|<<
literal|"ddd"
expr_stmt|;
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc, ddd"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_US
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa and bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, and ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc, and ddd"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|zh_CN
argument_list|(
literal|"zh_CN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe5\x92\x8c"
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe3\x80\x81"
literal|"bbb"
literal|"\xe5\x92\x8c"
literal|"ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe3\x80\x81"
literal|"bbb"
literal|"\xe3\x80\x81"
literal|"ccc"
literal|"\xe5\x92\x8c"
literal|"ddd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QLocale
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlocale.moc"
end_include
end_unit
