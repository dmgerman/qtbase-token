begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<QScopedArrayPointer>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_include
include|#
directive|include
file|<float.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<private/qlocale_p.h>
end_include
begin_include
include|#
directive|include
file|<qnumeric.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__UCLIBC__
argument_list|)
end_if
begin_define
DECL|macro|QT_USE_FENV
define|#
directive|define
name|QT_USE_FENV
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_USE_FENV
end_ifdef
begin_include
include|#
directive|include
file|<fenv.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WINCE
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_comment
comment|// needed for GetUserDefaultLCID
end_comment
begin_define
DECL|macro|_control87
define|#
directive|define
name|_control87
value|_controlfp
end_define
begin_extern
DECL|function|GetThreadLocale
extern|extern
literal|"C"
name|DWORD
name|GetThreadLocale
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|GetUserDefaultLCID
argument_list|()
return|;
block|}
end_extern
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_BLACKBERRY
end_ifdef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/pps.h>
end_include
begin_decl_stmt
DECL|variable|ppsLanguageLocalePath
specifier|static
specifier|const
name|char
name|ppsLanguageLocalePath
index|[]
init|=
literal|"/pps/services/confstr/_CS_LOCALE"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ppsBufferSize
specifier|static
specifier|const
name|size_t
name|ppsBufferSize
init|=
literal|256
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|readPpsValue
specifier|static
name|QByteArray
name|readPpsValue
parameter_list|(
specifier|const
name|char
modifier|*
name|ppsObject
parameter_list|,
name|int
name|ppsFd
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|ppsObject
operator|||
name|ppsFd
operator|==
operator|-
literal|1
condition|)
return|return
name|result
return|;
name|char
name|buffer
index|[
name|ppsBufferSize
index|]
decl_stmt|;
name|int
name|bytes
init|=
name|read
argument_list|(
name|ppsFd
argument_list|,
name|buffer
argument_list|,
name|ppsBufferSize
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
operator|-
literal|1
condition|)
block|{
name|qFatal
argument_list|(
literal|"Failed to read Locale pps, errno=%d"
argument_list|,
name|errno
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// ensure data is null terminated
name|buffer
index|[
name|bytes
index|]
operator|=
literal|'\0'
expr_stmt|;
name|pps_decoder_t
name|ppsDecoder
decl_stmt|;
name|pps_decoder_initialize
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|pps_decoder_parse_pps_str
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|buffer
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
block|{
name|pps_decoder_push
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|ppsBuff
decl_stmt|;
if|if
condition|(
name|pps_decoder_get_string
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|ppsObject
argument_list|,
operator|&
name|ppsBuff
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
block|{
name|result
operator|=
name|ppsBuff
expr_stmt|;
block|}
else|else
block|{
name|int
name|val
decl_stmt|;
if|if
condition|(
name|pps_decoder_get_int
argument_list|(
operator|&
name|ppsDecoder
argument_list|,
name|ppsObject
argument_list|,
operator|&
name|val
argument_list|)
operator|==
name|PPS_DECODER_OK
condition|)
name|result
operator|=
name|QByteArray
operator|::
name|number
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|pps_decoder_cleanup
argument_list|(
operator|&
name|ppsDecoder
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_BLACKBERRY
end_comment
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLocale::FormatType
argument_list|)
end_macro
begin_class
DECL|class|tst_QLocale
class|class
name|tst_QLocale
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QLocale
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|void
name|windowsDefaultLocale
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|void
name|macDefaultLocale
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ctor
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|void
name|emptyCtor
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|legacyNames
parameter_list|()
function_decl|;
name|void
name|unixLocaleName
parameter_list|()
function_decl|;
name|void
name|matchingLocales
parameter_list|()
function_decl|;
name|void
name|double_conversion_data
parameter_list|()
function_decl|;
name|void
name|double_conversion
parameter_list|()
function_decl|;
name|void
name|long_long_conversion_data
parameter_list|()
function_decl|;
name|void
name|long_long_conversion
parameter_list|()
function_decl|;
name|void
name|long_long_conversion_extra
parameter_list|()
function_decl|;
name|void
name|testInfAndNan
parameter_list|()
function_decl|;
name|void
name|fpExceptions
parameter_list|()
function_decl|;
name|void
name|negativeZero
parameter_list|()
function_decl|;
name|void
name|dayOfWeek
parameter_list|()
function_decl|;
name|void
name|dayOfWeek_data
parameter_list|()
function_decl|;
name|void
name|formatDate
parameter_list|()
function_decl|;
name|void
name|formatDate_data
parameter_list|()
function_decl|;
name|void
name|formatTime
parameter_list|()
function_decl|;
name|void
name|formatTime_data
parameter_list|()
function_decl|;
name|void
name|formatDateTime
parameter_list|()
function_decl|;
name|void
name|formatDateTime_data
parameter_list|()
function_decl|;
name|void
name|formatTimeZone
parameter_list|()
function_decl|;
name|void
name|toDateTime_data
parameter_list|()
function_decl|;
name|void
name|toDateTime
parameter_list|()
function_decl|;
name|void
name|negativeNumbers
parameter_list|()
function_decl|;
name|void
name|numberOptions
parameter_list|()
function_decl|;
name|void
name|testNames_data
parameter_list|()
function_decl|;
name|void
name|testNames
parameter_list|()
function_decl|;
name|void
name|dayName_data
parameter_list|()
function_decl|;
name|void
name|dayName
parameter_list|()
function_decl|;
name|void
name|standaloneDayName_data
parameter_list|()
function_decl|;
name|void
name|standaloneDayName
parameter_list|()
function_decl|;
name|void
name|underflowOverflow
parameter_list|()
function_decl|;
name|void
name|dateFormat
parameter_list|()
function_decl|;
name|void
name|timeFormat
parameter_list|()
function_decl|;
name|void
name|dateTimeFormat
parameter_list|()
function_decl|;
name|void
name|monthName
parameter_list|()
function_decl|;
name|void
name|standaloneMonthName
parameter_list|()
function_decl|;
name|void
name|defaultNumeringSystem
parameter_list|()
function_decl|;
name|void
name|ampm
parameter_list|()
function_decl|;
name|void
name|currency
parameter_list|()
function_decl|;
name|void
name|quoteString
parameter_list|()
function_decl|;
name|void
name|uiLanguages
parameter_list|()
function_decl|;
name|void
name|weekendDays
parameter_list|()
function_decl|;
name|void
name|listPatterns
parameter_list|()
function_decl|;
name|void
name|measurementSystems
parameter_list|()
function_decl|;
name|void
name|QTBUG_26035_positivesign
parameter_list|()
function_decl|;
name|void
name|textDirection_data
parameter_list|()
function_decl|;
name|void
name|textDirection
parameter_list|()
function_decl|;
private|private:
DECL|member|m_decimal
DECL|member|m_thousand
DECL|member|m_sdate
DECL|member|m_ldate
DECL|member|m_time
name|QString
name|m_decimal
decl_stmt|,
name|m_thousand
decl_stmt|,
name|m_sdate
decl_stmt|,
name|m_ldate
decl_stmt|,
name|m_time
decl_stmt|;
DECL|member|m_sysapp
name|QString
name|m_sysapp
decl_stmt|;
DECL|member|europeanTimeZone
name|bool
name|europeanTimeZone
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_BLACKBERRY
DECL|member|m_languageFd
name|int
name|m_languageFd
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QLocale
name|tst_QLocale
operator|::
name|tst_QLocale
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"QLocale::FormatType"
argument_list|)
expr_stmt|;
comment|// Test if in Central European Time zone
name|uint
name|x1
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1990
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|()
argument_list|)
operator|.
name|toTime_t
argument_list|()
decl_stmt|;
name|uint
name|x2
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1990
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|()
argument_list|)
operator|.
name|toTime_t
argument_list|()
decl_stmt|;
name|europeanTimeZone
operator|=
operator|(
name|x1
operator|==
literal|631148400
operator|&&
name|x2
operator|==
literal|644191200
operator|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QLocale
operator|::
name|initTestCase
parameter_list|()
block|{
specifier|const
name|QString
name|syslocaleapp_dir
init|=
name|QFINDTESTDATA
argument_list|(
literal|"syslocaleapp"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|syslocaleapp_dir
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Cannot find 'syslocaleapp' starting from "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_sysapp
operator|=
name|syslocaleapp_dir
operator|+
name|QStringLiteral
argument_list|(
literal|"/syslocaleapp"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|m_sysapp
operator|+=
name|QStringLiteral
argument_list|(
literal|".exe"
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QFileInfo
name|fi
argument_list|(
name|m_sysapp
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|isExecutable
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|m_sysapp
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|" does not exist or is not executable."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_BLACKBERRY
if|if
condition|(
operator|(
name|m_languageFd
operator|=
name|open
argument_list|(
name|ppsLanguageLocalePath
argument_list|,
name|O_RDONLY
argument_list|)
operator|)
operator|==
operator|-
literal|1
condition|)
name|QFAIL
argument_list|(
literal|"Failed to open language pps."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QLocale
operator|::
name|cleanupTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_BLACKBERRY
name|close
argument_list|(
name|m_languageFd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|ctor
name|void
name|tst_QLocale
operator|::
name|ctor
parameter_list|()
block|{
name|QLocale
name|default_locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
name|QLocale
operator|::
name|Language
name|default_lang
init|=
name|default_locale
operator|.
name|language
argument_list|()
decl_stmt|;
name|QLocale
operator|::
name|Country
name|default_country
init|=
name|default_locale
operator|.
name|country
argument_list|()
decl_stmt|;
name|qDebug
argument_list|(
literal|"Default: %s/%s"
argument_list|,
name|QLocale
operator|::
name|languageToString
argument_list|(
name|default_lang
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|QLocale
operator|::
name|countryToString
argument_list|(
name|default_country
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|default_lang
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|default_country
argument_list|)
expr_stmt|;
block|}
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lang
parameter_list|,
name|req_country
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(QLocale::req_lang, QLocale::req_country); \         QCOMPARE((int)l.language(), (int)exp_lang); \         QCOMPARE((int)l.country(), (int)exp_country); \     }
block|{
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|language
argument_list|()
argument_list|,
name|QLocale
operator|::
name|C
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|AnyLanguage
argument_list|,
argument|AnyCountry
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|default_lang
argument_list|,
argument|default_country
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|,
argument|QLocale::Spanish
argument_list|,
argument|QLocale::LatinAmericaAndTheCaribbean
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|France
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedStates
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Aymara
argument_list|,
name|QLocale
operator|::
name|France
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Aymara
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QLocale
name|l
decl_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|English
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|.
name|country
argument_list|()
operator|==
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
block|}
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Aymara
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedStates
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|France
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
argument|QLocale::English
argument_list|,
argument|QLocale::UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
argument|French
argument_list|,
argument|France
argument_list|,
argument|QLocale::French
argument_list|,
argument|QLocale::France
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|C
argument_list|,
argument|France
argument_list|,
argument|QLocale::C
argument_list|,
argument|QLocale::AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Arabic
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Arabic
argument_list|,
argument|QLocale::Egypt
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Dutch
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Dutch
argument_list|,
argument|QLocale::Netherlands
argument_list|)
name|TEST_CTOR
argument_list|(
argument|German
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::German
argument_list|,
argument|QLocale::Germany
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Greek
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Greek
argument_list|,
argument|QLocale::Greece
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Malay
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Malay
argument_list|,
argument|QLocale::Malaysia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Persian
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Persian
argument_list|,
argument|QLocale::Iran
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Portuguese
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Portuguese
argument_list|,
argument|QLocale::Brazil
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Serbian
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Serbian
argument_list|,
argument|QLocale::Serbia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Somali
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Somali
argument_list|,
argument|QLocale::Somalia
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Spanish
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Spanish
argument_list|,
argument|QLocale::Spain
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Swedish
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Swedish
argument_list|,
argument|QLocale::Sweden
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Uzbek
argument_list|,
argument|AnyCountry
argument_list|,
argument|QLocale::Uzbek
argument_list|,
argument|QLocale::Uzbekistan
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(req_lc); \         QVERIFY2(l.language() == QLocale::exp_lang \&& l.country() == QLocale::exp_country, \                 QString("requested: \"" + QString(req_lc) + "\", got: " \                 + QLocale::languageToString(l.language()) \                 + "/" + QLocale::countryToString(l.country())).toLatin1().constData()); \     }
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"C"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"bla"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz_zz"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz..."
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|""
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en/"
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
argument|QString::null
argument_list|,
argument|C
argument_list|,
argument|AnyCountry
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en."
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_U"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_."
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_.@"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_blaaa"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_zz"
argument_list|,
argument|English
argument_list|,
argument|UnitedStates
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@.bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en-GB"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en-GB@bla"
argument_list|,
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|)
name|QVERIFY
argument_list|(
name|QLocale
operator|::
name|Norwegian
operator|==
name|QLocale
operator|::
name|NorwegianBokmal
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"no"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn"
argument_list|,
argument|NorwegianNynorsk
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"no_NO"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb_NO"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn_NO"
argument_list|,
argument|NorwegianNynorsk
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es_ES"
argument_list|,
argument|Spanish
argument_list|,
argument|Spain
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es_419"
argument_list|,
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"es-419"
argument_list|,
argument|Spanish
argument_list|,
argument|LatinAmericaAndTheCaribbean
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"fr_MA"
argument_list|,
argument|French
argument_list|,
argument|Morocco
argument_list|)
comment|// test default countries for languages
name|TEST_CTOR
argument_list|(
literal|"zh"
argument_list|,
argument|Chinese
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh-Hans"
argument_list|,
argument|Chinese
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ne"
argument_list|,
argument|Nepali
argument_list|,
argument|Nepal
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_script
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \     QLocale l(req_lc); \     QVERIFY2(l.language() == QLocale::exp_lang \&& l.script() == QLocale::exp_script \&& l.country() == QLocale::exp_country, \         QString("requested: \"" + QString(req_lc) + "\", got: " \         + QLocale::languageToString(l.language()) \         + "/" + QLocale::scriptToString(l.script()) \         + "/" + QLocale::countryToString(l.country())).toLatin1().constData()); \     }
name|TEST_CTOR
argument_list|(
literal|"zh_CN"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans_CN"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|China
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hant"
argument_list|,
argument|Chinese
argument_list|,
argument|TraditionalHanScript
argument_list|,
argument|Taiwan
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hans_MO"
argument_list|,
argument|Chinese
argument_list|,
argument|SimplifiedHanScript
argument_list|,
argument|Macau
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zh_Hant_MO"
argument_list|,
argument|Chinese
argument_list|,
argument|TraditionalHanScript
argument_list|,
argument|Macau
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"az_Latn_AZ"
argument_list|,
argument|Azerbaijani
argument_list|,
argument|LatinScript
argument_list|,
argument|Azerbaijan
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ha_NG"
argument_list|,
argument|Hausa
argument_list|,
argument|LatinScript
argument_list|,
argument|Nigeria
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ru"
argument_list|,
argument|Russian
argument_list|,
argument|CyrillicScript
argument_list|,
argument|RussianFederation
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"ru_Cyrl"
argument_list|,
argument|Russian
argument_list|,
argument|CyrillicScript
argument_list|,
argument|RussianFederation
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
end_if
begin_comment
comment|// Not when Q_OS_WINCE is defined because the test uses unsupported
end_comment
begin_comment
comment|// Windows CE QProcess functionality (std streams, env)
end_comment
begin_comment
comment|// Also Qt needs to be compiled without QT_NO_PROCESS
end_comment
begin_function
DECL|function|runSysApp
specifier|static
specifier|inline
name|bool
name|runSysApp
parameter_list|(
specifier|const
name|QString
modifier|&
name|binary
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|env
parameter_list|,
name|QString
modifier|*
name|output
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|output
operator|->
name|clear
argument_list|()
expr_stmt|;
name|errorMessage
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|binary
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|waitForStarted
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot start '%1': %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|binary
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|()
condition|)
block|{
name|process
operator|.
name|kill
argument_list|()
expr_stmt|;
operator|*
name|errorMessage
operator|=
name|QStringLiteral
argument_list|(
literal|"Timeout waiting for "
argument_list|)
operator|+
name|binary
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|output
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|runSysAppTest
specifier|static
specifier|inline
name|bool
name|runSysAppTest
parameter_list|(
specifier|const
name|QString
modifier|&
name|binary
parameter_list|,
name|QStringList
name|baseEnv
parameter_list|,
specifier|const
name|QString
modifier|&
name|requestedLocale
parameter_list|,
specifier|const
name|QString
modifier|&
name|expectedOutput
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|QString
name|output
decl_stmt|;
name|baseEnv
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|"LANG="
argument_list|)
operator|+
name|requestedLocale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runSysApp
argument_list|(
name|binary
argument_list|,
name|baseEnv
argument_list|,
operator|&
name|output
argument_list|,
name|errorMessage
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Empty output received for requested '%1' (expected '%2')"
argument_list|)
operator|.
name|arg
argument_list|(
name|requestedLocale
argument_list|,
name|expectedOutput
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|output
operator|!=
name|expectedOutput
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Output mismatch for requested '%1': Expected '%2', got '%3'"
argument_list|)
operator|.
name|arg
argument_list|(
name|requestedLocale
argument_list|,
name|expectedOutput
argument_list|,
name|output
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|emptyCtor
name|void
name|tst_QLocale
operator|::
name|emptyCtor
parameter_list|()
block|{
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_str
parameter_list|)
define|\
value|{ \
comment|/* Test constructor without arguments. Needs separate process */
value|\
comment|/* because of caching of the system locale. */
value|\     QString errorMessage; \     QVERIFY2(runSysAppTest(m_sysapp, env, QLatin1String(req_lc), QLatin1String(exp_str),&errorMessage), \              qPrintable(errorMessage)); \     }
comment|// Get an environment free of any locale-related variables
name|QStringList
name|env
decl_stmt|;
foreach|foreach
control|(
name|QString
specifier|const
modifier|&
name|entry
decl|,
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|startsWith
argument_list|(
literal|"LANG="
argument_list|)
operator|||
name|entry
operator|.
name|startsWith
argument_list|(
literal|"LC_"
argument_list|)
operator|||
name|entry
operator|.
name|startsWith
argument_list|(
literal|"LANGUAGE="
argument_list|)
condition|)
continue|continue;
name|env
operator|<<
name|entry
expr_stmt|;
block|}
comment|// Get default locale.
name|QString
name|defaultLoc
decl_stmt|;
name|QString
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|runSysApp
argument_list|(
name|m_sysapp
argument_list|,
name|env
argument_list|,
operator|&
name|defaultLoc
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_BLACKBERRY
name|QString
name|locale
init|=
name|readPpsValue
argument_list|(
literal|"_CS_LOCALE"
argument_list|,
name|m_languageFd
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|runSysApp
argument_list|(
name|m_sysapp
argument_list|,
name|env
argument_list|,
operator|&
name|locale
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|TEST_CTOR
argument_list|(
literal|"C"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"bla"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz_zz"
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"zz..."
argument_list|,
literal|"C"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en."
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_."
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_.@"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en.bla"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en@bla"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_blaaa"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_zz"
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB.bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@.bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"en_GB@bla"
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"de"
argument_list|,
literal|"de_DE"
argument_list|)
name|QVERIFY
argument_list|(
name|QLocale
operator|::
name|Norwegian
operator|==
name|QLocale
operator|::
name|NorwegianBokmal
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"no"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn"
argument_list|,
literal|"nn_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"no_NO"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nb_NO"
argument_list|,
literal|"nb_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"nn_NO"
argument_list|,
literal|"nn_NO"
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"DE"
argument_list|,
literal|"de_DE"
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"EN"
argument_list|,
literal|"en_US"
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"en/"
argument_list|,
argument|defaultLoc.toLatin1()
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"asdfghj"
argument_list|,
name|defaultLoc
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_CTOR
argument_list|(
literal|"123456"
argument_list|,
name|defaultLoc
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_BLACKBERRY
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|legacyNames
name|void
name|tst_QLocale
operator|::
name|legacyNames
parameter_list|()
block|{
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
argument_list|)
expr_stmt|;
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lang
parameter_list|,
name|req_country
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(QLocale::req_lang, QLocale::req_country); \         QCOMPARE((int)l.language(), (int)QLocale::exp_lang); \         QCOMPARE((int)l.country(), (int)QLocale::exp_country); \     }
name|TEST_CTOR
argument_list|(
argument|Moldavian
argument_list|,
argument|Moldova
argument_list|,
argument|Romanian
argument_list|,
argument|Moldova
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Norwegian
argument_list|,
argument|AnyCountry
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
argument|SerboCroatian
argument_list|,
argument|Montenegro
argument_list|,
argument|Serbian
argument_list|,
argument|Montenegro
argument_list|)
name|TEST_CTOR
argument_list|(
argument|Tagalog
argument_list|,
argument|AnyCountry
argument_list|,
argument|Filipino
argument_list|,
argument|Philippines
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
DECL|macro|TEST_CTOR
define|#
directive|define
name|TEST_CTOR
parameter_list|(
name|req_lc
parameter_list|,
name|exp_lang
parameter_list|,
name|exp_country
parameter_list|)
define|\
value|{ \         QLocale l(req_lc); \         QVERIFY2(l.language() == QLocale::exp_lang \&& l.country() == QLocale::exp_country, \                 QString("requested: \"" + QString(req_lc) + "\", got: " \                 + QLocale::languageToString(l.language()) \                 + "/" + QLocale::countryToString(l.country())).toLatin1().constData()); \     }
name|TEST_CTOR
argument_list|(
literal|"mo_MD"
argument_list|,
argument|Romanian
argument_list|,
argument|Moldova
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"no"
argument_list|,
argument|Norwegian
argument_list|,
argument|Norway
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"sh_ME"
argument_list|,
argument|Serbian
argument_list|,
argument|Montenegro
argument_list|)
name|TEST_CTOR
argument_list|(
literal|"tl"
argument_list|,
argument|Filipino
argument_list|,
argument|Philippines
argument_list|)
DECL|macro|TEST_CTOR
undef|#
directive|undef
name|TEST_CTOR
block|}
end_function
begin_function
DECL|function|matchingLocales
name|void
name|tst_QLocale
operator|::
name|matchingLocales
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
specifier|const
name|QLocale
name|ru_RU
argument_list|(
name|QLocale
operator|::
name|Russian
argument_list|,
name|QLocale
operator|::
name|Russia
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QLocale
argument_list|>
name|locales
init|=
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|QLocale
operator|::
name|C
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locales
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locales
operator|.
name|contains
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|locales
operator|=
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|QLocale
operator|::
name|Russian
argument_list|,
name|QLocale
operator|::
name|CyrillicScript
argument_list|,
name|QLocale
operator|::
name|Russia
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locales
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locales
operator|.
name|contains
argument_list|(
name|ru_RU
argument_list|)
argument_list|)
expr_stmt|;
name|locales
operator|=
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|QLocale
operator|::
name|Russian
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|contains
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locales
operator|.
name|contains
argument_list|(
name|ru_RU
argument_list|)
argument_list|)
expr_stmt|;
name|locales
operator|=
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|QLocale
operator|::
name|AnyLanguage
argument_list|,
name|QLocale
operator|::
name|CyrillicScript
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|contains
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locales
operator|.
name|contains
argument_list|(
name|ru_RU
argument_list|)
argument_list|)
expr_stmt|;
name|locales
operator|=
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|QLocale
operator|::
name|AnyLanguage
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|QLocale
operator|::
name|Russia
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|locales
operator|.
name|contains
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locales
operator|.
name|contains
argument_list|(
name|ru_RU
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unixLocaleName
name|void
name|tst_QLocale
operator|::
name|unixLocaleName
parameter_list|()
block|{
DECL|macro|TEST_NAME
define|#
directive|define
name|TEST_NAME
parameter_list|(
name|req_lang
parameter_list|,
name|req_country
parameter_list|,
name|exp_name
parameter_list|)
define|\
value|{ \         QLocale l(QLocale::req_lang, QLocale::req_country); \         QCOMPARE(l.name(), QString(exp_name)); \     }
name|QLocale
operator|::
name|setDefault
argument_list|(
name|QLocale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_NAME
argument_list|(
argument|C
argument_list|,
argument|AnyCountry
argument_list|,
literal|"C"
argument_list|)
name|TEST_NAME
argument_list|(
argument|English
argument_list|,
argument|AnyCountry
argument_list|,
literal|"en_US"
argument_list|)
name|TEST_NAME
argument_list|(
argument|English
argument_list|,
argument|UnitedKingdom
argument_list|,
literal|"en_GB"
argument_list|)
name|TEST_NAME
argument_list|(
argument|Aymara
argument_list|,
argument|UnitedKingdom
argument_list|,
literal|"C"
argument_list|)
DECL|macro|TEST_NAME
undef|#
directive|undef
name|TEST_NAME
block|}
end_function
begin_function
DECL|function|double_conversion_data
name|void
name|tst_QLocale
operator|::
name|double_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C  1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|" 1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1 "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1 "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1  "
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,23"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,5"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,56"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234,567.8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12,34567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12,34567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234,567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234,567.8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234567.8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234567.8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|","
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",123"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C , 3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|", 3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  3.2e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  3.2e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ,  e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",  e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,,234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,000e-6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,000e-6"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1000.0e-6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.23"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.5"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.56"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.56"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567,"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234.567,8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12.34567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12.34567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234.567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234.567,8"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234567,8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1234567,8"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234567.8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".123"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE . 3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|". 3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  3,2e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  3,2e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .  e2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".  e2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1..234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1..234"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1234.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -.1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-.1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.E10"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e+10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e+10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,0"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234e-10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234e-10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e-10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,234E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,234E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.234e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE ,1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|",1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -,1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-,1"
argument_list|)
operator|<<
literal|true
operator|<<
operator|-
literal|0.1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1,E10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1,E10"
argument_list|)
operator|<<
literal|true
operator|<<
literal|1.0e10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e1.0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e1.0"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e+"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e+"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1e-"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1e-"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543.2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 9,876543.0e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9,876543.0e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9876.543"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,0e-2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,0e-2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543e--2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543e"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|8722
argument_list|)
operator|+
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 9.876543,0e--2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9.876543,0e"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|8722
argument_list|)
operator|+
name|QString
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_conversion
name|void
name|tst_QLocale
operator|::
name|double_conversion
parameter_list|()
block|{
DECL|macro|MY_DOUBLE_EPSILON
define|#
directive|define
name|MY_DOUBLE_EPSILON
value|(2.22045e-16)
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QStringRef
name|num_strRef
init|=
name|num_str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QLocale
name|locale
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|name
argument_list|()
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|double
name|d
init|=
name|locale
operator|.
name|toDouble
argument_list|(
name|num_str
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|double
name|diff
init|=
name|d
operator|-
name|num
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|diff
operator|=
operator|-
name|diff
expr_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
name|MY_DOUBLE_EPSILON
argument_list|)
expr_stmt|;
block|}
name|d
operator|=
name|locale
operator|.
name|toDouble
argument_list|(
name|num_strRef
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|double
name|diff
init|=
name|d
operator|-
name|num
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
name|diff
operator|=
operator|-
name|diff
expr_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
name|MY_DOUBLE_EPSILON
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|long_long_conversion_data
name|void
name|tst_QLocale
operator|::
name|long_long_conversion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"num_str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"num"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C null"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,2"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,23"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12,34567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"12,34567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123,4567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"123,4567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234,567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12345,67"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"12345,67"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 123456,7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"123456,7"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1,234,567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1,234,567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1."
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.2"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.23"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.23"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1234567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12.34567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"12.34567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 123.4567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"123.4567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1234.567"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12345.67"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"12345.67"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 123456.7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"123456.7"
operator|<<
literal|false
operator|<<
operator|(
name|qlonglong
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234.567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 ldspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"  1.234.567"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 trspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"1.234.567  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 1.234.567 ldtrspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|"  1.234.567  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234567
expr_stmt|;
comment|// test that space is also accepted whenever QLocale::groupSeparator() == 0xa0 (which looks like space).
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 groupsep"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|+
name|QString
argument_list|(
literal|"234"
argument_list|)
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 groupsep_space"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x20
argument_list|)
operator|+
name|QString
argument_list|(
literal|"234"
argument_list|)
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 ldspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"  123"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 trspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"123  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO 123 ldtrspcs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
literal|"  123  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1234"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"  1234"
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 1234  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"1234  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C   1234  "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|"  1234  "
operator|<<
literal|true
operator|<<
operator|(
name|qlonglong
operator|)
literal|1234
expr_stmt|;
block|}
end_function
begin_function
DECL|function|long_long_conversion
name|void
name|tst_QLocale
operator|::
name|long_long_conversion
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|num_str
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|good
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|QStringRef
name|num_strRef
init|=
name|num_str
operator|.
name|leftRef
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QLocale
name|locale
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|name
argument_list|()
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|qlonglong
name|l
init|=
name|locale
operator|.
name|toLongLong
argument_list|(
name|num_str
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|l
operator|=
name|locale
operator|.
name|toLongLong
argument_list|(
name|num_strRef
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|good
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|long_long_conversion_extra
name|void
name|tst_QLocale
operator|::
name|long_long_conversion_extra
parameter_list|()
block|{
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qlonglong
operator|)
operator|-
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|123
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|1234
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
operator|(
name|qulonglong
operator|)
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInfAndNan
name|void
name|tst_QLocale
operator|::
name|testInfAndNan
parameter_list|()
block|{
name|double
name|neginf
init|=
name|log
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
name|double
name|nan
init|=
name|sqrt
argument_list|(
operator|-
literal|1.0
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// these cause INVALID floating point exception so we want to clear the status.
name|_clear87
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsNaN
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsFinite
argument_list|(
operator|-
name|neginf
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsInf
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsFinite
argument_list|(
name|nan
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsInf
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qIsNaN
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsFinite
argument_list|(
literal|1.234
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fpExceptions
name|void
name|tst_QLocale
operator|::
name|fpExceptions
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|_MCW_EM
DECL|macro|_MCW_EM
define|#
directive|define
name|_MCW_EM
value|0x0008001F
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_EM_INEXACT
DECL|macro|_EM_INEXACT
define|#
directive|define
name|_EM_INEXACT
value|0x00000001
endif|#
directive|endif
comment|// check that qdtoa doesn't throw floating point exceptions when they are enabled
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|unsigned
name|int
name|oldbits
init|=
name|_control87
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|_control87
argument_list|(
literal|0
operator||
name|_EM_INEXACT
argument_list|,
name|_MCW_EM
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_FENV
name|fenv_t
name|envp
decl_stmt|;
name|fegetenv
argument_list|(
operator|&
name|envp
argument_list|)
expr_stmt|;
name|feclearexcept
argument_list|(
name|FE_ALL_EXCEPT
argument_list|)
expr_stmt|;
name|feenableexcept
argument_list|(
name|FE_DIVBYZERO
operator||
name|FE_OVERFLOW
operator||
name|FE_UNDERFLOW
operator||
name|FE_INVALID
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
operator|::
name|number
argument_list|(
literal|1000.1245
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
name|QString
operator|::
name|number
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|_clear87
argument_list|()
expr_stmt|;
name|_control87
argument_list|(
name|oldbits
argument_list|,
literal|0xFFFFF
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_USE_FENV
name|fesetenv
argument_list|(
operator|&
name|envp
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|negativeZero
name|void
name|tst_QLocale
operator|::
name|negativeZero
parameter_list|()
block|{
name|double
name|negativeZero
argument_list|(
literal|0.0
argument_list|)
decl_stmt|;
comment|// Initialise to zero.
name|uchar
modifier|*
name|ptr
init|=
operator|(
name|uchar
operator|*
operator|)
operator|&
name|negativeZero
decl_stmt|;
name|ptr
index|[
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|?
literal|0
else|:
literal|7
index|]
operator|=
literal|0x80
expr_stmt|;
name|QString
name|s
init|=
name|QString
operator|::
name|number
argument_list|(
name|negativeZero
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayOfWeek_data
name|void
name|tst_QLocale
operator|::
name|dayOfWeek_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"shortName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"longName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"Sun"
operator|<<
literal|"Sunday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mon"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|<<
literal|"Mon"
operator|<<
literal|"Monday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Tue"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"Tue"
operator|<<
literal|"Tuesday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wed"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"Wed"
operator|<<
literal|"Wednesday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Thu"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
operator|<<
literal|"Thu"
operator|<<
literal|"Thursday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Fri"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|)
operator|<<
literal|"Fri"
operator|<<
literal|"Friday"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sat"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|)
operator|<<
literal|"Sat"
operator|<<
literal|"Saturday"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayOfWeek
name|void
name|tst_QLocale
operator|::
name|dayOfWeek
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|shortName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|longName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|toString
argument_list|(
name|date
argument_list|,
literal|"ddd"
argument_list|)
argument_list|,
name|shortName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocale
operator|::
name|c
argument_list|()
operator|.
name|toString
argument_list|(
name|date
argument_list|,
literal|"dddd"
argument_list|)
argument_list|,
name|longName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDate_data
name|void
name|tst_QLocale
operator|::
name|formatDate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDate
argument_list|>
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyy"
operator|<<
literal|"1/12/1974"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyyy"
operator|<<
literal|"1/12/1974y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d/M/yyyy"
operator|<<
literal|"1/1/1974"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"dd/MM/yyy"
operator|<<
literal|"01/01/74y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"ddd/MMM/yy"
operator|<<
literal|"Sun/Dec/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"dddd/MMMM/y"
operator|<<
literal|"Sunday/December/y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy"
operator|<<
literal|"Sunday1/December12/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy"
operator|<<
literal|"dddd/December/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy"
operator|<<
literal|"1dd1/December/74y"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yy"
operator|<<
literal|"1dd1/DecM/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"d'd'dd/M/yy"
operator|<<
literal|"1d01/12/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"\"yy\""
operator|<<
literal|"\"74\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"'\"yy\"'"
operator|<<
literal|"\"yy\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|QDate
argument_list|()
operator|<<
literal|"'\"yy\"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"hh:mm:ss.zzz ap d'd'dd/M/yy"
operator|<<
literal|"hh:mm:ss.zzz ap 1d01/12/74"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dd MMMM yyyy"
argument_list|)
operator|<<
name|QDate
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|<<
literal|"dd MMMM yyyy"
operator|<<
literal|"01 January 0001"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDate
name|void
name|tst_QLocale
operator|::
name|formatDate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QDate
argument_list|,
name|date
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|date
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatTime_data
name|void
name|tst_QLocale
operator|::
name|formatTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTime
argument_list|>
argument_list|(
literal|"time"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s"
operator|<<
literal|"1:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s"
operator|<<
literal|"1:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss"
operator|<<
literal|"01:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss"
operator|<<
literal|"01:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hhh:mmm:sss"
operator|<<
literal|"011:022:033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s"
operator|<<
literal|"14:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s"
operator|<<
literal|"14:2:3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss"
operator|<<
literal|"14:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss"
operator|<<
literal|"14:02:03"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hhh:mmm:sss"
operator|<<
literal|"1414:022:033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s ap"
operator|<<
literal|"2:2:3 pm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s AP"
operator|<<
literal|"14:2:3 PM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"hh:mm:ss aap"
operator|<<
literal|"02:02:03 pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|14
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"HH:mm:ss AP aa"
operator|<<
literal|"14:02:03 PM pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"h:m:s ap"
operator|<<
literal|"1:2:3 am"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"H:m:s AP"
operator|<<
literal|"1:2:3 AM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"\"H\""
operator|<<
literal|"\"1\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
operator|<<
literal|"'\"H\"'"
operator|<<
literal|"\"H\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.z"
operator|<<
literal|"1:2:3.456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.zz"
operator|<<
literal|"1:2:3.456456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|456
argument_list|)
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|"1:2:3.456"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"H:m:s.z"
operator|<<
literal|"1:2:3.4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|"1:2:3.004"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"33"
argument_list|)
operator|<<
name|QTime
argument_list|()
operator|<<
literal|"H:m:s.zzz"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"34"
argument_list|)
operator|<<
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
literal|"dd MM yyyy H:m:s.zzz"
operator|<<
literal|"dd MM yyyy 1:2:3.004"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatTime
name|void
name|tst_QLocale
operator|::
name|formatTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTime
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|time
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDateTime_data
name|void
name|tst_QLocale
operator|::
name|formatDateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"localeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"dateTime"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddd/MMM/yy AP"
operator|<<
literal|"Mon/Dec/74 PM"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dddd/MMMM/y apa"
operator|<<
literal|"Monday/December/y pmpm"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"Monday2/December12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/December/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|4
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/December/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/DecM/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dd MMMM yyyy, hh:mm:ss"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|00
argument_list|,
literal|00
argument_list|)
argument_list|)
operator|<<
literal|"dd MMMM yyyy, hh:mm:ss"
operator|<<
literal|"01 January 0001, 12:00:00"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"yymm\""
operator|<<
literal|"\"7414\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|"\"yymm\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|()
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddd/MMM/yy AP"
operator|<<
literal|"man./des./74 P.M."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"dddd/MMMM/y apa"
operator|<<
literal|"mandag/desember/y p.m.p.m."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"mandag2/desember12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/desember/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|4
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/desember/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/des.M/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'''"
operator|<<
literal|"'"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\""
operator|<<
literal|"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"\""
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"\"yymm\""
operator|<<
literal|"\"7414\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|14
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|"\"yymm\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|()
operator|<<
literal|"'\"yymm\"'"
operator|<<
literal|""
expr_stmt|;
name|QDateTime
name|testLongHour
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
decl_stmt|;
name|QDateTime
name|testShortHour
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|3
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
decl_stmt|;
name|QDateTime
name|testZeroHour
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime0"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|QDateTime
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"dd-MM-yyyy hh:mm:ss"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime1"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"dd-'mmddyy'MM-yyyy hh:mm:ss.zzz"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"31-mmddyy12-1999 23:59:59.999"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime2"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"dd-'apAP'MM-yyyy hh:mm:ss.zzz"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"31-apAP12-1999 23:59:59.999"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime3"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"Apdd-MM-yyyy hh:mm:ss.zzz"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"PMp31-12-1999 11:59:59.999"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime4"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"'ap'apdd-MM-yyyy 'AP'hh:mm:ss.zzz"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"appm31-12-1999 AP11:59:59.999"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime5"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"'''"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime6"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"'ap"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ap"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime7"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"' ' 'hh' hh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  hh 23"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime8"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"d'foobar'"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"31foobar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime9"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testShortHour
operator|<<
name|QString
argument_list|(
literal|"hhhhh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"03033"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime11"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testLongHour
operator|<<
name|QString
argument_list|(
literal|"HHHhhhAaAPap"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"23231111PMpmPMpm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime12"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testShortHour
operator|<<
name|QString
argument_list|(
literal|"HHHhhhAaAPap"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"033033AMamAMam"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime13"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|,
literal|20
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hh''mm''ss dd''MM''yyyy"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"14'14'20 01'12'1974"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AM no p"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"hhAX"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12AMX"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AM no p, x 2"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testShortHour
operator|<<
name|QString
argument_list|(
literal|"hhhhhaA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"03033amAM"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"am 0 hour"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"hAP"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12AM"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AM zero hour"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"hhAP"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12AM"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dddd"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"dddd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Friday"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ddd"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"ddd"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Fri"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MMMM"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"MMMM"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"December"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MMM"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|"MMM"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Dec"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|testZeroHour
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatDateTime
name|void
name|tst_QLocale
operator|::
name|formatDateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|localeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|dateTime
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|localeName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toString
argument_list|(
name|dateTime
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatTimeZone
name|void
name|tst_QLocale
operator|::
name|formatTimeZone
parameter_list|()
block|{
name|QLocale
name|enUS
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QDateTime
name|dt1
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|OffsetFromUTC
argument_list|,
literal|60
operator|*
literal|60
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt1
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QDateTime
name|dt2
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|OffsetFromUTC
argument_list|,
operator|-
literal|60
operator|*
literal|60
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt2
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC-01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QDateTime
name|dt3
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt3
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
comment|// LocalTime should vary
if|if
condition|(
name|europeanTimeZone
condition|)
block|{
comment|// Time definitely in Standard Time
name|QDateTime
name|dt4
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|LocalTime
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Windows only returns long name (QTBUG-32759)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WIN
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt4
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Time definitely in Daylight Time
name|QDateTime
name|dt5
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|LocalTime
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Windows only returns long name (QTBUG-32759)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WIN
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt5
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"You must test using Central European (CET/CEST) time zone, e.g. TZ=Europe/Oslo"
argument_list|)
expr_stmt|;
block|}
name|QDateTime
name|dt6
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QTimeZone
argument_list|(
literal|"Europe/Berlin"
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTimeZone windows backend only returns long name"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt6
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QDateTime
name|dt7
argument_list|(
name|QDate
argument_list|(
literal|2013
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QTimeZone
argument_list|(
literal|"Europe/Berlin"
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTimeZone windows backend only returns long name"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|dt7
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Current datetime should return current abbreviation
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|timeZoneAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Time on its own will always be current local time zone
name|QCOMPARE
argument_list|(
name|enUS
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"t"
argument_list|)
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|timeZoneAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime_data
name|void
name|tst_QLocale
operator|::
name|toDateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"localeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"Monday2/December12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/December/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/December/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/DecM/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12C"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|5
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy hh:h:mm"
operator|<<
literal|"1/12/1974 05:5:14"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyyy h"
operator|<<
literal|"1/12/1974y 15"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d/M/yyyy zzz"
operator|<<
literal|"1/1/1974 000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"dd/MM/yyy z"
operator|<<
literal|"01/01/74y 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"ddddd/MMMMM/yy ss"
operator|<<
literal|"mandag2/desember12/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|13
argument_list|)
argument_list|)
operator|<<
literal|"'dddd'/MMMM/yy s"
operator|<<
literal|"dddd/desember/74 13"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMMM/yyy m'm'mm"
operator|<<
literal|"1dd1/desember/74y 4m04"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"d'dd'd/MMM'M'/yysss"
operator|<<
literal|"1dd1/des.M/74033"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12no_NO"
argument_list|)
operator|<<
literal|"no_NO"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|15
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
literal|"d'd'dd/M/yyh"
operator|<<
literal|"1d01/12/7415"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC-1123"
argument_list|)
operator|<<
literal|"C"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|18
argument_list|,
literal|8
argument_list|,
literal|30
argument_list|)
argument_list|)
operator|<<
literal|"ddd, dd MMM yyyy hh:mm:ss 'GMT'"
operator|<<
literal|"Thu, 01 Nov 2007 18:08:30 GMT"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longFormat"
argument_list|)
operator|<<
literal|"en_US"
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2009
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|11
argument_list|,
literal|48
argument_list|,
literal|32
argument_list|)
argument_list|)
operator|<<
literal|"dddd, MMMM d, yyyy h:mm:ss AP "
operator|<<
literal|"Monday, January 5, 2009 11:48:32 AM "
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toDateTime
name|void
name|tst_QLocale
operator|::
name|toDateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|localeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|localeName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toDateTime
argument_list|(
name|string
argument_list|,
name|format
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
operator|==
name|format
condition|)
name|QCOMPARE
argument_list|(
name|l
operator|.
name|toDateTime
argument_list|(
name|string
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_comment
comment|// Format number string according to system locale settings.
end_comment
begin_comment
comment|// Expected in format is US "1,234.56".
end_comment
begin_function
DECL|function|systemLocaleFormatNumber
name|QString
name|systemLocaleFormatNumber
parameter_list|(
specifier|const
name|QString
modifier|&
name|numberString
parameter_list|)
block|{
name|QLocale
name|locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
name|QString
name|numberStringCopy
init|=
name|numberString
decl_stmt|;
return|return
name|numberStringCopy
operator|.
name|replace
argument_list|(
name|QChar
argument_list|(
literal|','
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'G'
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QChar
argument_list|(
literal|'D'
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'G'
argument_list|)
argument_list|,
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
name|QChar
argument_list|(
literal|'D'
argument_list|)
argument_list|,
name|locale
operator|.
name|decimalPoint
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|macDefaultLocale
name|void
name|tst_QLocale
operator|::
name|macDefaultLocale
parameter_list|()
block|{
name|QLocale
name|locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
if|if
condition|(
name|locale
operator|.
name|name
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"en_US"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This test only tests for en_US"
argument_list|)
expr_stmt|;
name|QTime
name|invalidTime
decl_stmt|;
name|QDate
name|invalidDate
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidTime
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|invalidDate
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// On OS X the decimal point and group separator are configurable
comment|// independently of the locale. Verify that they have one of the
comment|// allowed values and are not the same.
name|QVERIFY
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|==
name|QChar
argument_list|(
literal|'.'
argument_list|)
operator|||
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|==
name|QChar
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|==
name|QChar
argument_list|(
literal|','
argument_list|)
operator|||
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|==
name|QChar
argument_list|(
literal|'.'
argument_list|)
operator|||
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|==
name|QChar
argument_list|(
literal|'\xA0'
argument_list|)
comment|// no-breaking space
operator|||
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|==
name|QChar
argument_list|(
literal|'\''
argument_list|)
operator|||
name|locale
operator|.
name|groupSeparator
argument_list|()
operator|==
name|QChar
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
operator|!=
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we are using the system to parse them
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|1234.56
argument_list|)
argument_list|,
name|systemLocaleFormatNumber
argument_list|(
name|QString
argument_list|(
literal|"1,234.56"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|currentTime
init|=
name|QTime
operator|::
name|currentTime
argument_list|()
decl_stmt|;
name|QTime
name|utcTime
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toUTC
argument_list|()
operator|.
name|time
argument_list|()
decl_stmt|;
name|int
name|diff
init|=
name|currentTime
operator|.
name|hour
argument_list|()
operator|-
name|utcTime
operator|.
name|hour
argument_list|()
decl_stmt|;
comment|// Check if local time and utc time are on opposite sides of the 24-hour wrap-around.
if|if
condition|(
name|diff
operator|<
operator|-
literal|12
condition|)
name|diff
operator|+=
literal|24
expr_stmt|;
if|if
condition|(
name|diff
operator|>
literal|12
condition|)
name|diff
operator|-=
literal|24
expr_stmt|;
specifier|const
name|QString
name|timeString
init|=
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|timeString
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"1:02:03"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// To run this test make sure "Curreny" is US Dollar in System Preferences->Language& Region->Advanced.
if|if
condition|(
name|locale
operator|.
name|currencySymbol
argument_list|()
operator|==
name|QString
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|systemLocaleFormatNumber
argument_list|(
name|QString
argument_list|(
literal|"$1,234.00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|systemLocaleFormatNumber
argument_list|(
name|QString
argument_list|(
literal|"($1,234.00)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|systemLocaleFormatNumber
argument_list|(
name|QString
argument_list|(
literal|"$1,234.56"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|systemLocaleFormatNumber
argument_list|(
name|QString
argument_list|(
literal|"($1,234.56)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Depending on the configured time zone, the time string might not
comment|// contain a GMT specifier. (Sometimes it just names the zone, like "CEST")
if|if
condition|(
name|timeString
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"GMT"
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|expectedGMTSpecifierBase
argument_list|(
literal|"GMT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>=
literal|0
condition|)
name|expectedGMTSpecifierBase
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
else|else
name|expectedGMTSpecifierBase
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|QString
name|expectedGMTSpecifier
init|=
name|expectedGMTSpecifierBase
operator|+
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qAbs
argument_list|(
name|diff
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|expectedGMTSpecifierZeroExtended
init|=
name|expectedGMTSpecifierBase
operator|+
name|QString
argument_list|(
literal|"0%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qAbs
argument_list|(
name|diff
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|timeString
operator|.
name|contains
argument_list|(
name|expectedGMTSpecifier
argument_list|)
operator|||
name|timeString
operator|.
name|contains
argument_list|(
name|expectedGMTSpecifierZeroExtended
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"timeString `%1', expectedGMTSpecifier `%2' or `%3'"
argument_list|)
operator|.
name|arg
argument_list|(
name|timeString
argument_list|)
operator|.
name|arg
argument_list|(
name|expectedGMTSpecifier
argument_list|)
operator|.
name|arg
argument_list|(
name|expectedGMTSpecifierZeroExtended
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dayName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Monday"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dayName
argument_list|(
literal|7
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|monthName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|monthName
argument_list|(
literal|12
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"December"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|quoteString
argument_list|(
literal|"string"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\x9c"
literal|"string"
literal|"\xe2\x80\x9d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|quoteString
argument_list|(
literal|"string"
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\x98"
literal|"string"
literal|"\xe2\x80\x99"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|days
decl_stmt|;
name|days
operator|<<
name|Qt
operator|::
name|Monday
operator|<<
name|Qt
operator|::
name|Tuesday
operator|<<
name|Qt
operator|::
name|Wednesday
operator|<<
name|Qt
operator|::
name|Thursday
operator|<<
name|Qt
operator|::
name|Friday
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|weekdays
argument_list|()
argument_list|,
name|days
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_MAC
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_function
DECL|function|getWinLocaleInfo
specifier|static
name|QString
name|getWinLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|)
block|{
name|LCID
name|id
init|=
name|GetThreadLocale
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|*
literal|2
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QLocale: empty windows locale info ("
operator|<<
name|type
operator|<<
literal|')'
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|cnt
operator|/=
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
expr_stmt|;
name|QScopedArrayPointer
argument_list|<
name|wchar_t
argument_list|>
name|buf
argument_list|(
operator|new
name|wchar_t
index|[
name|cnt
index|]
argument_list|)
decl_stmt|;
name|cnt
operator|=
name|GetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QLocale: empty windows locale info ("
operator|<<
name|type
operator|<<
literal|')'
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
return|return
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setWinLocaleInfo
specifier|static
name|void
name|setWinLocaleInfo
parameter_list|(
name|LCTYPE
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|LCID
name|id
init|=
name|GetThreadLocale
argument_list|()
decl_stmt|;
name|SetLocaleInfo
argument_list|(
name|id
argument_list|,
name|type
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|value
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|LOCALE_SSHORTTIME
end_ifndef
begin_define
DECL|macro|LOCALE_SSHORTTIME
define|#
directive|define
name|LOCALE_SSHORTTIME
value|0x00000079
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|shortTimeType
specifier|static
specifier|inline
name|LCTYPE
name|shortTimeType
parameter_list|()
block|{
return|return
operator|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|&&
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS7
condition|?
name|LOCALE_SSHORTTIME
else|:
name|LOCALE_STIMEFORMAT
return|;
block|}
end_function
begin_class
DECL|class|RestoreLocaleHelper
class|class
name|RestoreLocaleHelper
block|{
public|public:
DECL|function|RestoreLocaleHelper
name|RestoreLocaleHelper
parameter_list|()
block|{
name|m_decimal
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|)
expr_stmt|;
name|m_thousand
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|)
expr_stmt|;
name|m_sdate
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|)
expr_stmt|;
name|m_ldate
operator|=
name|getWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|)
expr_stmt|;
name|m_time
operator|=
name|getWinLocaleInfo
argument_list|(
name|shortTimeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|~RestoreLocaleHelper
name|~
name|RestoreLocaleHelper
parameter_list|()
block|{
comment|// restore these, or the user will get a surprise
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|,
name|m_decimal
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|,
name|m_thousand
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|,
name|m_sdate
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|,
name|m_ldate
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|shortTimeType
argument_list|()
argument_list|,
name|m_time
argument_list|)
expr_stmt|;
comment|// make sure QLocale::system() gets updated
name|QLocalePrivate
operator|::
name|updateSystemPrivate
argument_list|()
expr_stmt|;
block|}
DECL|member|m_decimal
DECL|member|m_thousand
DECL|member|m_sdate
DECL|member|m_ldate
DECL|member|m_time
name|QString
name|m_decimal
decl_stmt|,
name|m_thousand
decl_stmt|,
name|m_sdate
decl_stmt|,
name|m_ldate
decl_stmt|,
name|m_time
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|windowsDefaultLocale
name|void
name|tst_QLocale
operator|::
name|windowsDefaultLocale
parameter_list|()
block|{
name|RestoreLocaleHelper
name|systemLocale
decl_stmt|;
specifier|const
name|bool
name|win7OrLater
init|=
operator|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
operator|)
operator|&&
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
decl_stmt|;
comment|// set weird system defaults and make sure we're using them
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SDECIMAL
argument_list|,
name|QLatin1String
argument_list|(
literal|"@"
argument_list|)
argument_list|)
expr_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_STHOUSAND
argument_list|,
name|QLatin1String
argument_list|(
literal|"?"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|shortDateFormat
init|=
name|QStringLiteral
argument_list|(
literal|"d*M*yyyy"
argument_list|)
decl_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SSHORTDATE
argument_list|,
name|shortDateFormat
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|longDateFormat
init|=
name|QStringLiteral
argument_list|(
literal|"d@M@yyyy"
argument_list|)
decl_stmt|;
name|setWinLocaleInfo
argument_list|(
name|LOCALE_SLONGDATE
argument_list|,
name|longDateFormat
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|shortTimeFormat
init|=
name|QStringLiteral
argument_list|(
literal|"h^m^s"
argument_list|)
decl_stmt|;
name|setWinLocaleInfo
argument_list|(
name|shortTimeType
argument_list|()
argument_list|,
name|shortTimeFormat
argument_list|)
expr_stmt|;
comment|// make sure QLocale::system() gets updated
name|QLocalePrivate
operator|::
name|updateSystemPrivate
argument_list|()
expr_stmt|;
name|QLocale
name|locale
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
comment|// make sure we are seeing the system's format strings
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|decimalPoint
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|groupSeparator
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|shortDateFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|longDateFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|shortTimeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|shortDateFormat
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|shortTimeFormat
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedLongDateTimeFormat
init|=
name|longDateFormat
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
operator|(
name|win7OrLater
condition|?
name|QStringLiteral
argument_list|(
literal|"h:mm:ss AP"
argument_list|)
else|:
name|shortTimeFormat
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|expectedLongDateTimeFormat
argument_list|)
expr_stmt|;
comment|// make sure we are using the system to parse them
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|1234.56
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1?234@56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1*12*1974"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1@12@1974"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedFormattedShortTimeSeconds
init|=
name|QStringLiteral
argument_list|(
literal|"1^2^3"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|expectedFormattedShortTime
init|=
name|win7OrLater
condition|?
name|QStringLiteral
argument_list|(
literal|"1^2"
argument_list|)
else|:
name|expectedFormattedShortTimeSeconds
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|expectedFormattedShortTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedFormattedLongTime
init|=
name|win7OrLater
condition|?
name|QStringLiteral
argument_list|(
literal|"1:02:03 AM"
argument_list|)
else|:
name|expectedFormattedShortTimeSeconds
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|expectedFormattedLongTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"1*12*1974 "
argument_list|)
operator|+
name|expectedFormattedShortTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1974
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"1@12@1974 "
argument_list|)
operator|+
name|expectedFormattedLongTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|expectedFormattedLongTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// #ifdef Q_OS_WIN
end_comment
begin_function
DECL|function|numberOptions
name|void
name|tst_QLocale
operator|::
name|numberOptions
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|locale
operator|.
name|setNumberOptions
argument_list|(
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|OmitGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|)
expr_stmt|;
name|locale
operator|.
name|setNumberOptions
argument_list|(
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"12345"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toString
argument_list|(
literal|12345
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"12,345"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|locale2
init|=
name|locale
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale2
operator|.
name|numberOptions
argument_list|()
argument_list|,
name|QLocale
operator|::
name|RejectGroupSeparator
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|negativeNumbers
name|void
name|tst_QLocale
operator|::
name|negativeNumbers
parameter_list|()
block|{
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|i
decl_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-10,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-10000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|10000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-100000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|100000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1,000,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000000
argument_list|)
expr_stmt|;
name|i
operator|=
name|locale
operator|.
name|toInt
argument_list|(
name|QLatin1String
argument_list|(
literal|"-1000000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
operator|-
literal|1000000
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<private/qlocale_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qlocale_data_p.h>
end_include
begin_decl_stmt
DECL|variable|locale_data_count
specifier|static
specifier|const
name|int
name|locale_data_count
init|=
sizeof|sizeof
argument_list|(
name|locale_data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|locale_data
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|testNames_data
name|void
name|tst_QLocale
operator|::
name|testNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"language"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"country"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|locale_data_count
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QLocaleData
modifier|&
name|item
init|=
name|locale_data
index|[
name|i
index|]
decl_stmt|;
specifier|const
name|QString
name|testName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"data_%1 (%2/%3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
operator|::
name|languageToString
argument_list|(
operator|(
name|QLocale
operator|::
name|Language
operator|)
name|item
operator|.
name|m_language_id
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QLocale
operator|::
name|countryToString
argument_list|(
operator|(
name|QLocale
operator|::
name|Country
operator|)
name|item
operator|.
name|m_country_id
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|item
operator|.
name|m_language_id
operator|<<
operator|(
name|int
operator|)
name|item
operator|.
name|m_country_id
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testNames
name|void
name|tst_QLocale
operator|::
name|testNames
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|QLocale
name|l1
argument_list|(
operator|(
name|QLocale
operator|::
name|Language
operator|)
name|language
argument_list|,
operator|(
name|QLocale
operator|::
name|Country
operator|)
name|country
argument_list|)
decl_stmt|;
if|if
condition|(
name|language
operator|==
name|QLocale
operator|::
name|AnyLanguage
operator|&&
name|country
operator|==
name|QLocale
operator|::
name|AnyCountry
condition|)
name|language
operator|=
name|QLocale
operator|::
name|C
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l1
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l1
operator|.
name|country
argument_list|()
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|QString
name|name
init|=
name|l1
operator|.
name|name
argument_list|()
decl_stmt|;
name|QLocale
name|l2
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l2
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l2
operator|.
name|country
argument_list|()
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l2
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QLocale
name|l3
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|"@foo"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l3
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l3
operator|.
name|country
argument_list|()
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l3
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QLocale
name|l4
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".foo"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l4
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|l4
operator|.
name|country
argument_list|()
argument_list|,
name|country
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l4
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|language
operator|!=
name|QLocale
operator|::
name|C
condition|)
block|{
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QString
name|lang
init|=
name|name
operator|.
name|left
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
operator|+
name|QLatin1String
argument_list|(
literal|"@foo"
argument_list|)
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QLocale
argument_list|(
name|lang
operator|+
name|QLatin1String
argument_list|(
literal|".foo"
argument_list|)
argument_list|)
operator|.
name|language
argument_list|()
argument_list|,
name|language
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dayName_data
name|void
name|tst_QLocale
operator|::
name|dayName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dayName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"day"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tysdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"7"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\262\320\276\321\201\320\272\321\200\320\265\321\201\320\265\320\275\321\214\320\265"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\262\321\201"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\262\321\201"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dayName
name|void
name|tst_QLocale
operator|::
name|dayName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLocale
operator|::
name|FormatType
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|dayName
argument_list|(
name|day
argument_list|,
name|format
argument_list|)
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
name|QLocale
name|ir
argument_list|(
literal|"ga_IE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ir
operator|.
name|dayName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Luan"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ir
operator|.
name|dayName
argument_list|(
literal|7
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Domh"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|gr
argument_list|(
literal|"el_GR"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|gr
operator|.
name|dayName
argument_list|(
literal|2
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\316\244\317\201\316\257"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gr
operator|.
name|dayName
argument_list|(
literal|4
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\316\240\316\255\316\274"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gr
operator|.
name|dayName
argument_list|(
literal|6
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\316\243\316\254\316\262"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneDayName_data
name|void
name|tst_QLocale
operator|::
name|standaloneDayName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale_name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dayName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"day"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLocale
operator|::
name|FormatType
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nb_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tirsdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nn_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tysdag"
argument_list|)
operator|<<
literal|2
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 0 narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C invalid: 8 narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|8
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sunday"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Sun"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"S"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU long"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222\320\276\321\201\320\272\321\200\320\265\321\201\320\265\320\275\321\214\320\265"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|LongFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU short"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222\321\201"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|ShortFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ru_RU narrow"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ru_RU"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\222"
argument_list|)
operator|<<
literal|7
operator|<<
name|QLocale
operator|::
name|NarrowFormat
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneDayName
name|void
name|tst_QLocale
operator|::
name|standaloneDayName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale_name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|day
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLocale
operator|::
name|FormatType
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QLocale
name|l
argument_list|(
name|locale_name
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|standaloneDayName
argument_list|(
name|day
argument_list|,
name|format
argument_list|)
argument_list|,
name|dayName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|underflowOverflow
name|void
name|tst_QLocale
operator|::
name|underflowOverflow
parameter_list|()
block|{
name|QString
name|a
argument_list|(
name|QLatin1String
argument_list|(
literal|e10"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|a
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
name|QLatin1String
argument_list|(
literal|"1e600"
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
name|a
operator|.
name|toDouble
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|a
operator|=
name|QLatin1String
argument_list|(
literal|"-9223372036854775809"
argument_list|)
expr_stmt|;
name|a
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultNumeringSystem
name|void
name|tst_QLocale
operator|::
name|defaultNumeringSystem
parameter_list|()
block|{
name|QLocale
name|sk
argument_list|(
literal|"sk_SK"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sk
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ta
argument_list|(
literal|"ta_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ta
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|te
argument_list|(
literal|"te_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|te
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|hi
argument_list|(
literal|"hi_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|hi
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|gu
argument_list|(
literal|"gu_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|gu
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|kn
argument_list|(
literal|"kn_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|kn
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|pa
argument_list|(
literal|"pa_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pa
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ne
argument_list|(
literal|"ne_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ne
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¥§à¥¨à¥©"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|mr
argument_list|(
literal|"mr_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mr
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¥§à¥¨à¥©"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ml
argument_list|(
literal|"ml_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ml
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|kok
argument_list|(
literal|"kok_IN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|kok
operator|.
name|toString
argument_list|(
literal|123
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ampm
name|void
name|tst_QLocale
operator|::
name|ampm
parameter_list|()
block|{
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"PM"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"vorm."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"nachm."
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|sv
argument_list|(
literal|"sv_SE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sv
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"fm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sv
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"em"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|nn
argument_list|(
literal|"nl_NL"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nn
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nn
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"PM"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ua
argument_list|(
literal|"uk_UA"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ua
operator|.
name|amText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\264\320\277"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ua
operator|.
name|pmText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\277\320\277"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|tr
argument_list|(
literal|"tr_TR"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tr
operator|.
name|amText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\303\226\303\226"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tr
operator|.
name|pmText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\303\226\123"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|id
argument_list|(
literal|"id_ID"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|id
operator|.
name|amText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"AM"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|id
operator|.
name|pmText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"PM"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ta
argument_list|(
literal|"ta_LK"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ta
operator|.
name|amText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à®®à¯à®±à¯à®ªà®à®²à¯"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ta
operator|.
name|pmText
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à®ªà®¿à®±à¯à®ªà®à®²à¯"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateFormat
name|void
name|tst_QLocale
operator|::
name|dateFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dddd d. MMMM yyyy"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ca
argument_list|(
literal|"en_CA"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ca
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"M/d/yy"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ca
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dddd, MMMM d, yyyy"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ja
argument_list|(
literal|"ja_JP"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ja
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"yyyy/MM/dd"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ir
argument_list|(
literal|"ga_IE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ir
operator|.
name|dateFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd/MM/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timeFormat
name|void
name|tst_QLocale
operator|::
name|timeFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH.mm.ss t"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|id
argument_list|(
literal|"id_ID"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|id
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|id
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH.mm.ss t"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|cat
argument_list|(
literal|"ca_ES"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cat
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"H.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cat
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"H.mm.ss t"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|bra
argument_list|(
literal|"pt_BR"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bra
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH:mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bra
operator|.
name|timeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"HH:mm:ss t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTimeFormat
name|void
name|tst_QLocale
operator|::
name|dateTimeFormat
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
comment|// check that the NarrowFormat is the same as ShortFormat.
name|QCOMPARE
argument_list|(
name|c
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|c
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|no
argument_list|(
literal|"no_NO"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy HH.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dd.MM.yy HH.mm"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|no
operator|.
name|dateTimeFormat
argument_list|(
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"dddd d. MMMM yyyy HH.mm.ss t"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|monthName
name|void
name|tst_QLocale
operator|::
name|monthName
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Jan"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dezember"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dez."
argument_list|)
argument_list|)
expr_stmt|;
comment|// 'de' locale doesn't have narrow month name
name|QCOMPARE
argument_list|(
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ru
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\321\217\320\275\320\262\320\260\321\200\321\217"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\321\217\320\275\320\262\56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that our CLDR scripts handle surrogate pairs correctly
name|QLocale
name|dsrt
argument_list|(
literal|"en-Dsrt-US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dsrt
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xf0\x90\x90\x96\xf0\x90\x90\xb0\xf0\x90\x91\x8c\xf0\x90\x90\xb7\xf0\x90\x90\xad\xf0\x90\x90\xaf\xf0\x90\x91\x89\xf0\x90\x90\xa8"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ir
argument_list|(
literal|"ga_IE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ir
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Ean"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ir
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Noll"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|cz
argument_list|(
literal|"cs_CZ"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cz
operator|.
name|monthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"led"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cz
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"pro"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|standaloneMonthName
name|void
name|tst_QLocale
operator|::
name|standaloneMonthName
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|0
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|monthName
argument_list|(
literal|13
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"January"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Jan"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
comment|// For de_DE locale Unicode CLDR database doesn't contain standalone long months
comment|// so just checking if the return value is the same as in monthName().
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dezember"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|de
operator|.
name|monthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Dez"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de
operator|.
name|standaloneMonthName
argument_list|(
literal|12
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocale
name|ru
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|LongFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257\320\275\320\262\320\260\321\200\321\214"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|ShortFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257\320\275\320\262\56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru
operator|.
name|standaloneMonthName
argument_list|(
literal|1
argument_list|,
name|QLocale
operator|::
name|NarrowFormat
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\320\257"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currency
name|void
name|tst_QLocale
operator|::
name|currency
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"-1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_US
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$-1,234"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"$-1,234.56"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ru_RU
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1"
literal|"\xc2\xa0"
literal|"234\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1"
literal|"\xc2\xa0"
literal|"234\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1"
literal|"\xc2\xa0"
literal|"234,56\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1"
literal|"\xc2\xa0"
literal|"234,56\xc2\xa0\xd1\x80\xd1\x83\xd0\xb1."
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de_DE
argument_list|(
literal|"de_DE"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1.234\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qulonglong
argument_list|(
literal|1234
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1.234\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1.234\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|qlonglong
argument_list|(
operator|-
literal|1234
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1.234\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"1.234,56\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1.234,56\xc2\xa0\xe2\x82\xac"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_DE
operator|.
name|toCurrencyString
argument_list|(
name|double
argument_list|(
operator|-
literal|1234.56
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"BAZ"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"-1.234,56\xc2\xa0"
literal|"BAZ"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|system
init|=
name|QLocale
operator|::
name|system
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|system
operator|.
name|toCurrencyString
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteString
name|void
name|tst_QLocale
operator|::
name|quoteString
parameter_list|()
block|{
specifier|const
name|QString
name|someText
argument_list|(
literal|"text"
argument_list|)
decl_stmt|;
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x22"
literal|"text"
literal|"\x22"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x27"
literal|"text"
literal|"\x27"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|de_CH
argument_list|(
literal|"de_CH"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|de_CH
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xc2\xab"
literal|"text"
literal|"\xc2\xbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|de_CH
operator|.
name|quoteString
argument_list|(
name|someText
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xe2\x80\xb9"
literal|"text"
literal|"\xe2\x80\xba"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uiLanguages
name|void
name|tst_QLocale
operator|::
name|uiLanguages
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_US
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-US"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-Latn-US"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_Latn_US
argument_list|(
literal|"en_Latn_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_Latn_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_Latn_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_Latn_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-US"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_Latn_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-Latn-US"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_GB
argument_list|(
literal|"en_GB"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_GB
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_GB
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-GB"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_GB
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-Latn-GB"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_Dsrt_US
argument_list|(
literal|"en_Dsrt_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_Dsrt_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_Dsrt_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-Dsrt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_Dsrt_US
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"en-Dsrt-US"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|ru_RU
argument_list|(
literal|"ru_RU"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ru"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ru-RU"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ru_RU
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"ru-Cyrl-RU"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|zh_Hant
argument_list|(
literal|"zh_Hant"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|zh_Hant
operator|.
name|uiLanguages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_Hant
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"zh-TW"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_Hant
operator|.
name|uiLanguages
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"zh-Hant-TW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|weekendDays
name|void
name|tst_QLocale
operator|::
name|weekendDays
parameter_list|()
block|{
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|Qt
operator|::
name|DayOfWeek
argument_list|>
name|days
decl_stmt|;
name|days
operator|<<
name|Qt
operator|::
name|Monday
operator|<<
name|Qt
operator|::
name|Tuesday
operator|<<
name|Qt
operator|::
name|Wednesday
operator|<<
name|Qt
operator|::
name|Thursday
operator|<<
name|Qt
operator|::
name|Friday
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|weekdays
argument_list|()
argument_list|,
name|days
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listPatterns
name|void
name|tst_QLocale
operator|::
name|listPatterns
parameter_list|()
block|{
name|QStringList
name|sl1
decl_stmt|;
name|QStringList
name|sl2
decl_stmt|;
name|sl2
operator|<<
literal|"aaa"
expr_stmt|;
name|QStringList
name|sl3
decl_stmt|;
name|sl3
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
expr_stmt|;
name|QStringList
name|sl4
decl_stmt|;
name|sl4
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
expr_stmt|;
name|QStringList
name|sl5
decl_stmt|;
name|sl5
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
operator|<<
literal|"ddd"
expr_stmt|;
specifier|const
name|QLocale
name|c
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc, ddd"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|en_US
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa and bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, and ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|en_US
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa, bbb, ccc, and ddd"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QLocale
name|zh_CN
argument_list|(
literal|"zh_CN"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl3
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe5\x92\x8c"
literal|"bbb"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl4
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe3\x80\x81"
literal|"bbb"
literal|"\xe5\x92\x8c"
literal|"ccc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|zh_CN
operator|.
name|createSeparatedList
argument_list|(
name|sl5
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"aaa"
literal|"\xe3\x80\x81"
literal|"bbb"
literal|"\xe3\x80\x81"
literal|"ccc"
literal|"\xe5\x92\x8c"
literal|"ddd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|measurementSystems
name|void
name|tst_QLocale
operator|::
name|measurementSystems
parameter_list|()
block|{
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedStates
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|measurementSystem
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ImperialUSSystem
argument_list|)
expr_stmt|;
name|locale
operator|=
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|UnitedKingdom
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|measurementSystem
argument_list|()
argument_list|,
name|QLocale
operator|::
name|ImperialUKSystem
argument_list|)
expr_stmt|;
name|locale
operator|=
name|QLocale
argument_list|(
name|QLocale
operator|::
name|English
argument_list|,
name|QLocale
operator|::
name|Australia
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|measurementSystem
argument_list|()
argument_list|,
name|QLocale
operator|::
name|MetricSystem
argument_list|)
expr_stmt|;
name|locale
operator|=
name|QLocale
argument_list|(
name|QLocale
operator|::
name|German
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|measurementSystem
argument_list|()
argument_list|,
name|QLocale
operator|::
name|MetricSystem
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_26035_positivesign
name|void
name|tst_QLocale
operator|::
name|QTBUG_26035_positivesign
parameter_list|()
block|{
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|C
argument_list|)
decl_stmt|;
name|bool
name|ok
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"+100,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toInt
argument_list|(
name|QString
argument_list|(
literal|"+100,000,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|100000000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toLongLong
argument_list|(
name|QString
argument_list|(
literal|"+100,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|qlonglong
operator|)
literal|100000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|toLongLong
argument_list|(
name|QString
argument_list|(
literal|"+100,000,000"
argument_list|)
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
operator|(
name|qlonglong
operator|)
literal|100000000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textDirection_data
name|void
name|tst_QLocale
operator|::
name|textDirection_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"language"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"script"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"rightToLeft"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|language
init|=
name|QLocale
operator|::
name|C
init|;
name|language
operator|<=
name|QLocale
operator|::
name|LastLanguage
condition|;
operator|++
name|language
control|)
block|{
name|bool
name|rightToLeft
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|language
condition|)
block|{
case|case
name|QLocale
operator|::
name|Arabic
case|:
case|case
name|QLocale
operator|::
name|Hebrew
case|:
case|case
name|QLocale
operator|::
name|Kashmiri
case|:
case|case
name|QLocale
operator|::
name|Persian
case|:
case|case
name|QLocale
operator|::
name|Pashto
case|:
case|case
name|QLocale
operator|::
name|Urdu
case|:
case|case
name|QLocale
operator|::
name|Syriac
case|:
case|case
name|QLocale
operator|::
name|Divehi
case|:
name|rightToLeft
operator|=
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Language
argument_list|(
name|language
argument_list|)
argument_list|)
operator|.
name|language
argument_list|()
operator|==
name|QLocale
operator|::
name|Language
argument_list|(
name|language
argument_list|)
expr_stmt|;
comment|// false if there is no locale data for language
break|break;
default|default:
break|break;
block|}
name|QString
name|testName
init|=
name|QLocalePrivate
operator|::
name|languageToCode
argument_list|(
name|QLocale
operator|::
name|Language
argument_list|(
name|language
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testName
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|language
operator|<<
name|int
argument_list|(
name|QLocale
operator|::
name|AnyScript
argument_list|)
operator|<<
name|rightToLeft
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pa_Arab"
argument_list|)
operator|<<
name|int
argument_list|(
name|QLocale
operator|::
name|Punjabi
argument_list|)
operator|<<
name|int
argument_list|(
name|QLocale
operator|::
name|ArabicScript
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uz_Arab"
argument_list|)
operator|<<
name|int
argument_list|(
name|QLocale
operator|::
name|Uzbek
argument_list|)
operator|<<
name|int
argument_list|(
name|QLocale
operator|::
name|ArabicScript
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textDirection
name|void
name|tst_QLocale
operator|::
name|textDirection
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|language
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|rightToLeft
argument_list|)
expr_stmt|;
name|QLocale
name|locale
argument_list|(
name|QLocale
operator|::
name|Language
argument_list|(
name|language
argument_list|)
argument_list|,
name|QLocale
operator|::
name|Script
argument_list|(
name|script
argument_list|)
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|locale
operator|.
name|textDirection
argument_list|()
operator|==
name|Qt
operator|::
name|RightToLeft
argument_list|,
name|rightToLeft
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLocale
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlocale.moc"
end_include
end_unit
