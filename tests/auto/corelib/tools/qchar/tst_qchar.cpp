begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qchar.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<private/qunicodetables_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QChar
class|class
name|tst_QChar
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|operators_data
parameter_list|()
function_decl|;
name|void
name|operators
parameter_list|()
function_decl|;
name|void
name|toUpper
parameter_list|()
function_decl|;
name|void
name|toLower
parameter_list|()
function_decl|;
name|void
name|toTitle
parameter_list|()
function_decl|;
name|void
name|toCaseFolded
parameter_list|()
function_decl|;
name|void
name|isDigit_data
parameter_list|()
function_decl|;
name|void
name|isDigit
parameter_list|()
function_decl|;
name|void
name|isLetter_data
parameter_list|()
function_decl|;
name|void
name|isLetter
parameter_list|()
function_decl|;
name|void
name|isLetterOrNumber_data
parameter_list|()
function_decl|;
name|void
name|isLetterOrNumber
parameter_list|()
function_decl|;
name|void
name|isPrint
parameter_list|()
function_decl|;
name|void
name|isUpper
parameter_list|()
function_decl|;
name|void
name|isLower
parameter_list|()
function_decl|;
name|void
name|isTitleCase
parameter_list|()
function_decl|;
name|void
name|isSpace_data
parameter_list|()
function_decl|;
name|void
name|isSpace
parameter_list|()
function_decl|;
name|void
name|isSpaceSpecial
parameter_list|()
function_decl|;
name|void
name|category
parameter_list|()
function_decl|;
name|void
name|direction
parameter_list|()
function_decl|;
name|void
name|joiningType
parameter_list|()
function_decl|;
name|void
name|combiningClass
parameter_list|()
function_decl|;
name|void
name|digitValue
parameter_list|()
function_decl|;
name|void
name|mirroredChar
parameter_list|()
function_decl|;
name|void
name|decomposition
parameter_list|()
function_decl|;
name|void
name|lineBreakClass
parameter_list|()
function_decl|;
name|void
name|script
parameter_list|()
function_decl|;
name|void
name|normalization_data
parameter_list|()
function_decl|;
name|void
name|normalization
parameter_list|()
function_decl|;
name|void
name|normalization_manual
parameter_list|()
function_decl|;
name|void
name|normalizationCorrections
parameter_list|()
function_decl|;
name|void
name|unicodeVersion
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
private|private:
DECL|member|app
name|QCoreApplication
modifier|*
name|app
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QChar
operator|::
name|init
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|app
operator|=
operator|new
name|QCoreApplication
argument_list|(
name|argc
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QChar
operator|::
name|cleanup
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|delete
name|app
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|operators_data
name|void
name|tst_QChar
operator|::
name|operators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"lhs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"rhs"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"'\\%d' (op) '\\%d'"
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QChar
argument_list|(
name|ushort
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
name|QChar
argument_list|(
name|ushort
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operators
name|void
name|tst_QChar
operator|::
name|operators
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
DECL|macro|CHECK
define|#
directive|define
name|CHECK
parameter_list|(
name|op
parameter_list|)
value|QCOMPARE((lhs op rhs), (lhs.unicode() op rhs.unicode()))
name|CHECK
argument_list|(
operator|==
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|!=
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|<
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|>
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|<=
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|>=
argument_list|)
expr_stmt|;
DECL|macro|CHECK
undef|#
directive|undef
name|CHECK
block|}
end_function
begin_function
DECL|function|toUpper
name|void
name|tst_QChar
operator|::
name|toUpper
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c7
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c8
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c9
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x25c
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa7ab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x29e
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa7b0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1d79
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa77d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0265
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa78d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|'a'
argument_list|)
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|'A'
argument_list|)
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0xdf
argument_list|)
operator|==
literal|0xdf
argument_list|)
expr_stmt|;
comment|// german sharp s
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x1c7
argument_list|)
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x1c8
argument_list|)
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x1c9
argument_list|)
operator|==
literal|0x1c7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x25c
argument_list|)
operator|==
literal|0xa7ab
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x29e
argument_list|)
operator|==
literal|0xa7b0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x1d79
argument_list|)
operator|==
literal|0xa77d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x0265
argument_list|)
operator|==
literal|0xa78d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x10400
argument_list|)
operator|==
literal|0x10400
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toUpper
argument_list|(
literal|0x10428
argument_list|)
operator|==
literal|0x10400
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toLower
name|void
name|tst_QChar
operator|::
name|toLower
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c7
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c8
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c9
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa77d
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1d79
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa78d
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x0265
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa7ab
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x25c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa7b1
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x287
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|'a'
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|'A'
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0x1c7
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0x1c8
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0x1c9
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0xa77d
argument_list|)
operator|==
literal|0x1d79
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0xa78d
argument_list|)
operator|==
literal|0x0265
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0xa7ab
argument_list|)
operator|==
literal|0x25c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0xa7b1
argument_list|)
operator|==
literal|0x287
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0x10400
argument_list|)
operator|==
literal|0x10428
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toLower
argument_list|(
literal|0x10428
argument_list|)
operator|==
literal|0x10428
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toTitle
name|void
name|tst_QChar
operator|::
name|toTitle
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c7
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c8
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c9
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1d79
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa77d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0265
argument_list|)
operator|.
name|toTitleCase
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0xa78d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|'a'
argument_list|)
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|'A'
argument_list|)
operator|==
literal|'A'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0xdf
argument_list|)
operator|==
literal|0xdf
argument_list|)
expr_stmt|;
comment|// german sharp s
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x1c7
argument_list|)
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x1c8
argument_list|)
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x1c9
argument_list|)
operator|==
literal|0x1c8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x1d79
argument_list|)
operator|==
literal|0xa77d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x0265
argument_list|)
operator|==
literal|0xa78d
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x10400
argument_list|)
operator|==
literal|0x10400
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toTitleCase
argument_list|(
literal|0x10428
argument_list|)
operator|==
literal|0x10400
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toCaseFolded
name|void
name|tst_QChar
operator|::
name|toCaseFolded
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c7
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c8
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1c9
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa77d
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x1d79
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa78d
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x0265
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa7ab
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x25c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa7b1
argument_list|)
operator|.
name|toCaseFolded
argument_list|()
operator|.
name|unicode
argument_list|()
operator|==
literal|0x287
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|'a'
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|'A'
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0x1c7
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0x1c8
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0x1c9
argument_list|)
operator|==
literal|0x1c9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0xa77d
argument_list|)
operator|==
literal|0x1d79
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0xa78d
argument_list|)
operator|==
literal|0x0265
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0xa7ab
argument_list|)
operator|==
literal|0x25c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0xa7b1
argument_list|)
operator|==
literal|0x287
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0x10400
argument_list|)
operator|==
literal|0x10428
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0x10428
argument_list|)
operator|==
literal|0x10428
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|toCaseFolded
argument_list|(
literal|0xb5
argument_list|)
operator|==
literal|0x3bc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isDigit_data
name|void
name|tst_QChar
operator|::
name|isDigit_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"ucs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|ucs
init|=
literal|0
init|;
name|ucs
operator|<
literal|256
condition|;
operator|++
name|ucs
control|)
block|{
name|bool
name|isDigit
init|=
operator|(
name|ucs
operator|<=
literal|'9'
operator|&&
name|ucs
operator|>=
literal|'0'
operator|)
decl_stmt|;
name|QString
name|tag
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|ucs
operator|<<
name|isDigit
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isDigit
name|void
name|tst_QChar
operator|::
name|isDigit
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|ucs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QChar
argument_list|(
name|ucs
argument_list|)
operator|.
name|isDigit
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isExpectedLetter
specifier|static
name|bool
name|isExpectedLetter
parameter_list|(
name|ushort
name|ucs
parameter_list|)
block|{
return|return
operator|(
name|ucs
operator|>=
literal|'a'
operator|&&
name|ucs
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|ucs
operator|>=
literal|'A'
operator|&&
name|ucs
operator|<=
literal|'Z'
operator|)
operator|||
name|ucs
operator|==
literal|0xAA
operator|||
name|ucs
operator|==
literal|0xB5
operator|||
name|ucs
operator|==
literal|0xBA
operator|||
operator|(
name|ucs
operator|>=
literal|0xC0
operator|&&
name|ucs
operator|<=
literal|0xD6
operator|)
operator|||
operator|(
name|ucs
operator|>=
literal|0xD8
operator|&&
name|ucs
operator|<=
literal|0xF6
operator|)
operator|||
operator|(
name|ucs
operator|>=
literal|0xF8
operator|&&
name|ucs
operator|<=
literal|0xFF
operator|)
return|;
block|}
end_function
begin_function
DECL|function|isLetter_data
name|void
name|tst_QChar
operator|::
name|isLetter_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"ucs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|ucs
init|=
literal|0
init|;
name|ucs
operator|<
literal|256
condition|;
operator|++
name|ucs
control|)
block|{
name|QString
name|tag
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|ucs
operator|<<
name|isExpectedLetter
argument_list|(
name|ucs
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isLetter
name|void
name|tst_QChar
operator|::
name|isLetter
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|ucs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QChar
argument_list|(
name|ucs
argument_list|)
operator|.
name|isLetter
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLetterOrNumber_data
name|void
name|tst_QChar
operator|::
name|isLetterOrNumber_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"ucs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|ucs
init|=
literal|0
init|;
name|ucs
operator|<
literal|256
condition|;
operator|++
name|ucs
control|)
block|{
name|bool
name|isLetterOrNumber
init|=
name|isExpectedLetter
argument_list|(
name|ucs
argument_list|)
operator|||
operator|(
name|ucs
operator|>=
literal|'0'
operator|&&
name|ucs
operator|<=
literal|'9'
operator|)
operator|||
name|ucs
operator|==
literal|0xB2
operator|||
name|ucs
operator|==
literal|0xB3
operator|||
name|ucs
operator|==
literal|0xB9
operator|||
operator|(
name|ucs
operator|>=
literal|0xBC
operator|&&
name|ucs
operator|<=
literal|0xBE
operator|)
decl_stmt|;
name|QString
name|tag
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|ucs
operator|<<
name|isLetterOrNumber
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isLetterOrNumber
name|void
name|tst_QChar
operator|::
name|isLetterOrNumber
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|ucs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QChar
argument_list|(
name|ucs
argument_list|)
operator|.
name|isLetterOrNumber
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isPrint
name|void
name|tst_QChar
operator|::
name|isPrint
parameter_list|()
block|{
comment|// noncharacters, reserved (General_Gategory =Cn)
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x2064
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x2069
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfdd0
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfdef
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfff0
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfff8
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfffe
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xffff
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe0000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe0002
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe001f
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe0080
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe00ff
argument_list|)
argument_list|)
expr_stmt|;
comment|// Other_Default_Ignorable_Code_Point, Variation_Selector
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x034f
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x115f
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x180b
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x180d
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x3164
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xfe00
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xfe0f
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xffa0
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe0100
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0xe01ef
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cf, Cs, Cc, White_Space, Annotation Characters
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x0008
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x000a
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0020
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x00a0
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x00ad
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x0085
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xd800
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xdc00
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0x1d173
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0370
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigned in 5.1
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0524
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigned in 5.2
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0526
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigned in 6.0
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x08a0
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigned in 6.1
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0x1aff
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// not assigned
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1e9e
argument_list|)
operator|.
name|isPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigned in 5.1
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0x1b000
argument_list|)
argument_list|)
expr_stmt|;
comment|// assigned in 6.0
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0x110d0
argument_list|)
argument_list|)
expr_stmt|;
comment|// assigned in 5.1
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|isPrint
argument_list|(
literal|0x1bca0
argument_list|)
argument_list|)
expr_stmt|;
comment|// assigned in 7.0
block|}
end_function
begin_function
DECL|function|isUpper
name|void
name|tst_QChar
operator|::
name|isUpper
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'Z'
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'z'
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'?'
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xC2
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
comment|// A with ^
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xE2
argument_list|)
operator|.
name|isUpper
argument_list|()
argument_list|)
expr_stmt|;
comment|// a with ^
for|for
control|(
name|uint
name|codepoint
init|=
literal|0
init|;
name|codepoint
operator|<=
name|QChar
operator|::
name|LastValidCodePoint
condition|;
operator|++
name|codepoint
control|)
block|{
if|if
condition|(
name|QChar
operator|::
name|isUpper
argument_list|(
name|codepoint
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|codepoint
operator|==
name|QChar
operator|::
name|toUpper
argument_list|(
name|codepoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isLower
name|void
name|tst_QChar
operator|::
name|isLower
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'Z'
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'z'
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|'?'
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
literal|0xC2
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
comment|// A with ^
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xE2
argument_list|)
operator|.
name|isLower
argument_list|()
argument_list|)
expr_stmt|;
comment|// a with ^
for|for
control|(
name|uint
name|codepoint
init|=
literal|0
init|;
name|codepoint
operator|<=
name|QChar
operator|::
name|LastValidCodePoint
condition|;
operator|++
name|codepoint
control|)
block|{
if|if
condition|(
name|QChar
operator|::
name|isLower
argument_list|(
name|codepoint
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|codepoint
operator|==
name|QChar
operator|::
name|toLower
argument_list|(
name|codepoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isTitleCase
name|void
name|tst_QChar
operator|::
name|isTitleCase
parameter_list|()
block|{
for|for
control|(
name|uint
name|codepoint
init|=
literal|0
init|;
name|codepoint
operator|<=
name|QChar
operator|::
name|LastValidCodePoint
condition|;
operator|++
name|codepoint
control|)
block|{
if|if
condition|(
name|QChar
operator|::
name|isTitleCase
argument_list|(
name|codepoint
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|codepoint
operator|==
name|QChar
operator|::
name|toTitleCase
argument_list|(
name|codepoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isSpace_data
name|void
name|tst_QChar
operator|::
name|isSpace_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"ucs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|ucs
init|=
literal|0
init|;
name|ucs
operator|<
literal|256
condition|;
operator|++
name|ucs
control|)
block|{
name|bool
name|isSpace
init|=
operator|(
name|ucs
operator|<=
literal|0x0D
operator|&&
name|ucs
operator|>=
literal|0x09
operator|)
operator|||
name|ucs
operator|==
literal|0x20
operator|||
name|ucs
operator|==
literal|0xA0
operator|||
name|ucs
operator|==
literal|0x85
decl_stmt|;
name|QString
name|tag
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|ucs
operator|<<
name|isSpace
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isSpace
name|void
name|tst_QChar
operator|::
name|isSpace
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|ucs
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QChar
argument_list|(
name|ucs
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSpaceSpecial
name|void
name|tst_QChar
operator|::
name|isSpaceSpecial
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|QChar
argument_list|(
name|QChar
operator|::
name|Null
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ParagraphSeparator
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|LineSeparator
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x1680
argument_list|)
operator|.
name|isSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|category
name|void
name|tst_QChar
operator|::
name|category
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|category
argument_list|()
operator|==
name|QChar
operator|::
name|Letter_Lowercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'A'
argument_list|)
operator|.
name|category
argument_list|()
operator|==
name|QChar
operator|::
name|Letter_Uppercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|'a'
argument_list|)
operator|==
name|QChar
operator|::
name|Letter_Lowercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|'A'
argument_list|)
operator|==
name|QChar
operator|::
name|Letter_Uppercase
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xe0100
argument_list|)
operator|==
name|QChar
operator|::
name|Mark_NonSpacing
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xeffff
argument_list|)
operator|!=
name|QChar
operator|::
name|Other_PrivateUse
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xf0000
argument_list|)
operator|==
name|QChar
operator|::
name|Other_PrivateUse
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xf0001
argument_list|)
operator|==
name|QChar
operator|::
name|Other_PrivateUse
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xd900
argument_list|)
operator|==
name|QChar
operator|::
name|Other_Surrogate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xdc00
argument_list|)
operator|==
name|QChar
operator|::
name|Other_Surrogate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0xdc01
argument_list|)
operator|==
name|QChar
operator|::
name|Other_Surrogate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0x1aff
argument_list|)
operator|==
name|QChar
operator|::
name|Other_NotAssigned
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0x10fffd
argument_list|)
operator|==
name|QChar
operator|::
name|Other_PrivateUse
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0x10ffff
argument_list|)
operator|==
name|QChar
operator|::
name|Other_NotAssigned
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|category
argument_list|(
literal|0x110000
argument_list|)
operator|==
name|QChar
operator|::
name|Other_NotAssigned
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|direction
name|void
name|tst_QChar
operator|::
name|direction
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x200E
argument_list|)
operator|==
name|QChar
operator|::
name|DirL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x200F
argument_list|)
operator|==
name|QChar
operator|::
name|DirR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x202A
argument_list|)
operator|==
name|QChar
operator|::
name|DirLRE
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x202B
argument_list|)
operator|==
name|QChar
operator|::
name|DirRLE
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x202C
argument_list|)
operator|==
name|QChar
operator|::
name|DirPDF
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x202D
argument_list|)
operator|==
name|QChar
operator|::
name|DirLRO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x202E
argument_list|)
operator|==
name|QChar
operator|::
name|DirRLO
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x2066
argument_list|)
operator|==
name|QChar
operator|::
name|DirLRI
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x2067
argument_list|)
operator|==
name|QChar
operator|::
name|DirRLI
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x2068
argument_list|)
operator|==
name|QChar
operator|::
name|DirFSI
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x2069
argument_list|)
operator|==
name|QChar
operator|::
name|DirPDI
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirEN
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x627
argument_list|)
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirAL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x5d0
argument_list|)
operator|.
name|direction
argument_list|()
operator|==
name|QChar
operator|::
name|DirR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|'a'
argument_list|)
operator|==
name|QChar
operator|::
name|DirL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|'0'
argument_list|)
operator|==
name|QChar
operator|::
name|DirEN
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x627
argument_list|)
operator|==
name|QChar
operator|::
name|DirAL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x5d0
argument_list|)
operator|==
name|QChar
operator|::
name|DirR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0xE01DA
argument_list|)
operator|==
name|QChar
operator|::
name|DirNSM
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0xf0000
argument_list|)
operator|==
name|QChar
operator|::
name|DirL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0xE0030
argument_list|)
operator|==
name|QChar
operator|::
name|DirBN
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|direction
argument_list|(
literal|0x2FA17
argument_list|)
operator|==
name|QChar
operator|::
name|DirL
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joiningType
name|void
name|tst_QChar
operator|::
name|joiningType
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0627
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x05d0
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x00ad
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_Transparent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xA872
argument_list|)
operator|.
name|joiningType
argument_list|()
operator|==
name|QChar
operator|::
name|Joining_Left
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|'a'
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|'0'
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x0627
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Right
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x05d0
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x00ad
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Transparent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0xE01DA
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Transparent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0xf0000
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0xE0030
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Transparent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x2FA17
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_None
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0xA872
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Left
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x10ACD
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Left
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|joiningType
argument_list|(
literal|0x10AD7
argument_list|)
operator|==
name|QChar
operator|::
name|Joining_Left
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|combiningClass
name|void
name|tst_QChar
operator|::
name|combiningClass
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|combiningClass
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|combiningClass
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x627
argument_list|)
operator|.
name|combiningClass
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x5d0
argument_list|)
operator|.
name|combiningClass
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|'a'
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|'0'
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0x627
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0x5d0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0xE01DA
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0xf0000
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0xE0030
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0x2FA17
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0x300
argument_list|)
operator|==
literal|230
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|combiningClass
argument_list|(
literal|0x1d244
argument_list|)
operator|==
literal|230
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unicodeVersion
name|void
name|tst_QChar
operator|::
name|unicodeVersion
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x627
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x5d0
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|'a'
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|'0'
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x627
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x5d0
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_1_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0591
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_2_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0591
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_2_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x20AC
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_2_1_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x20AC
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_2_1_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xfffc
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_2_1_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0xfffc
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_2_1_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x01f6
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_3_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x01f6
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_3_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x03F4
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_3_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x03F4
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_3_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x10300
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_3_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0220
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_3_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0220
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_3_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0xFF5F
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_3_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0221
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_4_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0221
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_4_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x10000
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_4_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0237
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_4_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0237
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_4_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x10140
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_4_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0242
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_5_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0242
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x12000
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0370
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_5_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0370
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x1f093
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x0524
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_5_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x0524
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x2b734
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_5_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x26ce
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_6_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x26ce
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x1f618
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa69f
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_6_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0xa69f
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x1f600
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x20ba
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_6_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x20ba
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x061c
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_6_3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x061c
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_6_3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x20bd
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_7_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x20bd
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_7_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x16b00
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_7_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x08b3
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_8_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x08b3
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_8_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x108e0
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_8_0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x09ff
argument_list|)
operator|.
name|unicodeVersion
argument_list|()
operator|==
name|QChar
operator|::
name|Unicode_Unassigned
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x09ff
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_Unassigned
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|unicodeVersion
argument_list|(
literal|0x110000
argument_list|)
operator|==
name|QChar
operator|::
name|Unicode_Unassigned
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|digitValue
name|void
name|tst_QChar
operator|::
name|digitValue
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'9'
argument_list|)
operator|.
name|digitValue
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'0'
argument_list|)
operator|.
name|digitValue
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|.
name|digitValue
argument_list|()
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|'9'
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|'0'
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|0x1049
argument_list|)
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|0x1040
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|0xd800
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|digitValue
argument_list|(
literal|0x110000
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mirroredChar
name|void
name|tst_QChar
operator|::
name|mirroredChar
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x169B
argument_list|)
operator|.
name|hasMirrored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x169B
argument_list|)
operator|.
name|mirroredChar
argument_list|()
operator|==
name|QChar
argument_list|(
literal|0x169C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x169C
argument_list|)
operator|.
name|hasMirrored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x169C
argument_list|)
operator|.
name|mirroredChar
argument_list|()
operator|==
name|QChar
argument_list|(
literal|0x169B
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x301A
argument_list|)
operator|.
name|hasMirrored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x301A
argument_list|)
operator|.
name|mirroredChar
argument_list|()
operator|==
name|QChar
argument_list|(
literal|0x301B
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x301B
argument_list|)
operator|.
name|hasMirrored
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x301B
argument_list|)
operator|.
name|mirroredChar
argument_list|()
operator|==
name|QChar
argument_list|(
literal|0x301A
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|decomposition
name|void
name|tst_QChar
operator|::
name|decomposition
parameter_list|()
block|{
comment|// Hangul syllables
for|for
control|(
name|uint
name|ucs
init|=
literal|0xac00
init|;
name|ucs
operator|<=
literal|0xd7af
condition|;
operator|++
name|ucs
control|)
block|{
name|QChar
operator|::
name|Decomposition
name|expected
init|=
name|QChar
operator|::
name|unicodeVersion
argument_list|(
name|ucs
argument_list|)
operator|>
name|QChar
operator|::
name|Unicode_Unassigned
condition|?
name|QChar
operator|::
name|Canonical
else|:
name|QChar
operator|::
name|NoDecomposition
decl_stmt|;
name|QString
name|desc
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ucs = 0x%1, tag = %2, expected = %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs
argument_list|,
literal|16
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
name|ucs
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
name|ucs
argument_list|)
operator|==
name|expected
argument_list|,
name|desc
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa0
argument_list|)
operator|.
name|decompositionTag
argument_list|()
operator|==
name|QChar
operator|::
name|NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0xa8
argument_list|)
operator|.
name|decompositionTag
argument_list|()
operator|==
name|QChar
operator|::
name|Compat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
argument_list|(
literal|0x41
argument_list|)
operator|.
name|decompositionTag
argument_list|()
operator|==
name|QChar
operator|::
name|NoDecomposition
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
literal|0xa0
argument_list|)
operator|==
name|QChar
operator|::
name|NoBreak
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
literal|0xa8
argument_list|)
operator|==
name|QChar
operator|::
name|Compat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decompositionTag
argument_list|(
literal|0x41
argument_list|)
operator|==
name|QChar
operator|::
name|NoDecomposition
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decomposition
argument_list|(
literal|0xa0
argument_list|)
operator|==
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decomposition
argument_list|(
literal|0xc0
argument_list|)
operator|==
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x41
argument_list|)
argument_list|)
operator|+
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x300
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x1D157
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x1D157
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x1D165
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x1D165
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decomposition
argument_list|(
literal|0x1D15e
argument_list|)
operator|==
name|str
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x1100
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x1161
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decomposition
argument_list|(
literal|0xac00
argument_list|)
operator|==
name|str
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|str
decl_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x110c
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x1165
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x11b7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|decomposition
argument_list|(
literal|0xc810
argument_list|)
operator|==
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lineBreakClass
name|void
name|tst_QChar
operator|::
name|lineBreakClass
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x0029
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_CP
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x0041
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_AL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x0033
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_NU
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x00ad
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_BA
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x05d0
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_HL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0xfffc
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_CB
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0xe0164
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_CM
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x2f9a4
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_ID
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x10000
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_AL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x1f1e6
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_RI
argument_list|)
expr_stmt|;
comment|// mapped to AL:
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0xfffd
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_AL
argument_list|)
expr_stmt|;
comment|// AI -> AL
name|QVERIFY
argument_list|(
name|QUnicodeTables
operator|::
name|lineBreakClass
argument_list|(
literal|0x100000
argument_list|)
operator|==
name|QUnicodeTables
operator|::
name|LineBreak_AL
argument_list|)
expr_stmt|;
comment|// XX -> AL
block|}
end_function
begin_function
DECL|function|script
name|void
name|tst_QChar
operator|::
name|script
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0020
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Common
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0041
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Latin
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0375
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Greek
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0400
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Cyrillic
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0531
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Armenian
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0591
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Hebrew
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0600
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Arabic
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0700
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Syriac
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0780
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Thaana
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x07c0
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Nko
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0900
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Devanagari
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0981
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Bengali
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0a01
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Gurmukhi
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0a81
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Gujarati
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0b01
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Oriya
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0b82
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Tamil
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0c01
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Telugu
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0c82
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Kannada
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0d02
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Malayalam
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0d82
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Sinhala
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0e01
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Thai
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0e81
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Lao
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x0f00
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Tibetan
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1000
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Myanmar
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x10a0
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Georgian
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1100
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Hangul
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1680
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Ogham
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x16a0
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Runic
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1780
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Khmer
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x200c
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Inherited
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x200d
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Inherited
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1018a
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Greek
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0x1f130
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Common
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QChar
operator|::
name|script
argument_list|(
literal|0xe0100
argument_list|)
operator|==
name|QChar
operator|::
name|Script_Inherited
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalization_data
name|void
name|tst_QChar
operator|::
name|normalization_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"columns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"part"
argument_list|)
expr_stmt|;
name|int
name|linenum
init|=
literal|0
decl_stmt|;
name|int
name|part
init|=
literal|0
decl_stmt|;
name|QString
name|testFile
init|=
name|QFINDTESTDATA
argument_list|(
literal|"data/NormalizationTest.txt"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|testFile
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"data/NormalizationTest.txt not found!"
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|linenum
operator|++
expr_stmt|;
name|QByteArray
name|line
decl_stmt|;
name|line
operator|.
name|resize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|f
operator|.
name|readLine
argument_list|(
name|line
operator|.
name|data
argument_list|()
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|line
operator|.
name|resize
argument_list|(
name|len
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|comment
init|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|comment
operator|>=
literal|0
condition|)
name|line
operator|=
name|line
operator|.
name|left
argument_list|(
name|comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"@Part"
argument_list|)
operator|&&
name|line
operator|.
name|size
argument_list|()
operator|>
literal|5
operator|&&
name|QChar
argument_list|(
name|line
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|isDigit
argument_list|()
condition|)
name|part
operator|=
name|QChar
argument_list|(
name|line
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|digitValue
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|line
operator|=
name|line
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
literal|';'
argument_list|)
condition|)
name|line
operator|.
name|truncate
argument_list|(
name|line
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|l
init|=
name|line
operator|.
name|split
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QStringList
name|columns
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|columns
operator|.
name|append
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|c
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|c
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|c
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|bool
name|ok
decl_stmt|;
name|uint
name|uc
init|=
name|c
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|uc
argument_list|)
condition|)
block|{
name|columns
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|uc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// convert to utf16
name|columns
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|columns
index|[
name|i
index|]
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|uc
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QString
name|nm
init|=
name|QString
argument_list|(
literal|"line #%1 (part %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|linenum
argument_list|)
operator|.
name|arg
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|nm
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|columns
operator|<<
name|part
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|normalization
name|void
name|tst_QChar
operator|::
name|normalization
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|part
argument_list|)
comment|// CONFORMANCE:
comment|// 1. The following invariants must be true for all conformant implementations
comment|//
comment|//    NFC
comment|//      c2 ==  NFC(c1) ==  NFC(c2) ==  NFC(c3)
comment|//      c4 ==  NFC(c4) ==  NFC(c5)
name|QVERIFY
argument_list|(
name|columns
index|[
literal|1
index|]
operator|==
name|columns
index|[
literal|0
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|1
index|]
operator|==
name|columns
index|[
literal|1
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|1
index|]
operator|==
name|columns
index|[
literal|2
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|3
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|4
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
argument_list|)
expr_stmt|;
comment|//    NFD
comment|//      c3 ==  NFD(c1) ==  NFD(c2) ==  NFD(c3)
comment|//      c5 ==  NFD(c4) ==  NFD(c5)
name|QVERIFY
argument_list|(
name|columns
index|[
literal|2
index|]
operator|==
name|columns
index|[
literal|0
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|2
index|]
operator|==
name|columns
index|[
literal|1
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|2
index|]
operator|==
name|columns
index|[
literal|2
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|3
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|4
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
argument_list|)
expr_stmt|;
comment|//    NFKC
comment|//      c4 == NFKC(c1) == NFKC(c2) == NFKC(c3) == NFKC(c4) == NFKC(c5)
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|0
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|1
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|2
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|3
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|3
index|]
operator|==
name|columns
index|[
literal|4
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
argument_list|)
expr_stmt|;
comment|//    NFKD
comment|//      c5 == NFKD(c1) == NFKD(c2) == NFKD(c3) == NFKD(c4) == NFKD(c5)
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|0
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|1
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|2
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|3
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columns
index|[
literal|4
index|]
operator|==
name|columns
index|[
literal|4
index|]
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. For every code point X assigned in this version of Unicode that is not specifically
comment|//    listed in Part 1, the following invariants must be true for all conformant
comment|//    implementations:
comment|//
comment|//      X == NFC(X) == NFD(X) == NFKC(X) == NFKD(X)
comment|// #################
block|}
end_function
begin_function
DECL|function|normalization_manual
name|void
name|tst_QChar
operator|::
name|normalization_manual
parameter_list|()
block|{
block|{
name|QString
name|decomposed
decl_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x41
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x0221
argument_list|)
expr_stmt|;
comment|// assigned in 4.0
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|,
name|QChar
operator|::
name|Unicode_3_2
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|decomposed
index|[
literal|1
index|]
operator|=
name|QChar
argument_list|(
literal|0x037f
argument_list|)
expr_stmt|;
comment|// unassigned in 6.1
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|composed
decl_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0xc0
argument_list|)
expr_stmt|;
name|QString
name|decomposed
decl_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x41
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|composed
decl_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0xa0
argument_list|)
expr_stmt|;
name|QString
name|decomposed
decl_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|composed
decl_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0x0061
argument_list|)
expr_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0x00f2
argument_list|)
expr_stmt|;
name|QString
name|decomposed
decl_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x0061
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x006f
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x0300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
block|}
block|{
comment|// hangul
name|QString
name|composed
decl_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0xc154
argument_list|)
expr_stmt|;
name|composed
operator|+=
name|QChar
argument_list|(
literal|0x11f0
argument_list|)
expr_stmt|;
name|QString
name|decomposed
decl_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x1109
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x1167
argument_list|)
expr_stmt|;
name|decomposed
operator|+=
name|QChar
argument_list|(
literal|0x11f0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|composed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KD
argument_list|)
operator|==
name|decomposed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|decomposed
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_KC
argument_list|)
operator|==
name|composed
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|normalizationCorrections
name|void
name|tst_QChar
operator|::
name|normalizationCorrections
parameter_list|()
block|{
name|QString
name|s
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0xf951
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|n
init|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
decl_stmt|;
name|QString
name|res
decl_stmt|;
name|res
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x964b
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|n
operator|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|,
name|QChar
operator|::
name|Unicode_3_1
argument_list|)
expr_stmt|;
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|res
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
literal|0x96fb
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|s
operator|.
name|clear
argument_list|()
expr_stmt|;
name|s
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|highSurrogate
argument_list|(
literal|0x2f868
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|+=
name|QChar
argument_list|(
name|QChar
operator|::
name|lowSurrogate
argument_list|(
literal|0x2f868
argument_list|)
argument_list|)
expr_stmt|;
name|n
operator|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|)
expr_stmt|;
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|res
operator|+=
name|QChar
argument_list|(
literal|0x36fc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|n
operator|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|,
name|QChar
operator|::
name|Unicode_3_1
argument_list|)
expr_stmt|;
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|res
operator|+=
name|QChar
argument_list|(
literal|0xd844
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QChar
argument_list|(
literal|0xdf6a
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|n
operator|=
name|s
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_C
argument_list|,
name|QChar
operator|::
name|Unicode_3_2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QChar
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qchar.moc"
end_include
end_unit
