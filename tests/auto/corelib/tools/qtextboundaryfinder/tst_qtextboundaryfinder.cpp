begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextboundaryfinder.h>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_class
DECL|class|tst_QTextBoundaryFinder
class|class
name|tst_QTextBoundaryFinder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|graphemeBoundariesDefault_data
parameter_list|()
function_decl|;
name|void
name|graphemeBoundariesDefault
parameter_list|()
function_decl|;
name|void
name|wordBoundariesDefault_data
parameter_list|()
function_decl|;
name|void
name|wordBoundariesDefault
parameter_list|()
function_decl|;
name|void
name|sentenceBoundariesDefault_data
parameter_list|()
function_decl|;
name|void
name|sentenceBoundariesDefault
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|wordBoundaries_manual_data
parameter_list|()
function_decl|;
name|void
name|wordBoundaries_manual
parameter_list|()
function_decl|;
name|void
name|sentenceBoundaries_manual_data
parameter_list|()
function_decl|;
name|void
name|sentenceBoundaries_manual
parameter_list|()
function_decl|;
name|void
name|lineBoundaries_manual_data
parameter_list|()
function_decl|;
name|void
name|lineBoundaries_manual
parameter_list|()
function_decl|;
name|void
name|fastConstructor
parameter_list|()
function_decl|;
name|void
name|thaiLineBreak
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QTextBoundaryFinder
operator|::
name|init
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_IRIX
comment|// chdir into the top-level data dir, then refer to our testdata using relative paths
name|QString
name|testdata_dir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"data"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|testdata_dir
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not chdir to "
operator|+
name|testdata_dir
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<int>
argument_list|)
end_macro
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
template|template
parameter_list|<>
DECL|function|toString
specifier|inline
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QTextBoundaryFinder
operator|::
name|BoundaryReasons
modifier|&
name|flags
parameter_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|int
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
template|template
parameter_list|<>
DECL|function|toString
specifier|inline
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QByteArray
name|s
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|list
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
name|s
operator|+=
literal|", "
expr_stmt|;
name|s
operator|+=
name|QByteArray
operator|::
name|number
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
literal|"{ "
operator|+
name|s
operator|+
literal|" }"
expr_stmt|;
return|return
name|qstrdup
argument_list|(
name|s
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
block|}
end_namespace
begin_comment
comment|// namespace QTest
end_comment
begin_function
name|QT_END_NAMESPACE
DECL|function|generateDataFromFile
specifier|static
name|void
name|generateDataFromFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fname
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedBreakPositions"
argument_list|)
expr_stmt|;
name|QString
name|testFile
init|=
name|QFINDTESTDATA
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|testFile
operator|.
name|isEmpty
argument_list|()
argument_list|,
operator|(
name|fname
operator|.
name|toLatin1
argument_list|()
operator|+
name|QByteArray
argument_list|(
literal|" not found!"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|int
name|linenum
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|linenum
operator|++
expr_stmt|;
name|QByteArray
name|line
init|=
name|f
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|'#'
argument_list|)
condition|)
continue|continue;
name|QString
name|test
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|QString
name|comments
decl_stmt|;
name|int
name|hash
init|=
name|test
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|hash
operator|>
literal|0
condition|)
block|{
name|comments
operator|=
name|test
operator|.
name|mid
argument_list|(
name|hash
operator|+
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|test
operator|=
name|test
operator|.
name|left
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
name|QString
name|testString
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|part
decl|,
name|test
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
control|)
block|{
if|if
condition|(
name|part
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|0xf7
condition|)
name|expectedBreakPositions
operator|.
name|append
argument_list|(
name|testString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|part
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|0xd7
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|bool
name|ok
init|=
literal|true
decl_stmt|;
name|uint
name|ucs4
init|=
name|part
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
operator|&&
name|ucs4
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QChar
operator|::
name|requiresSurrogates
argument_list|(
name|ucs4
argument_list|)
argument_list|)
expr_stmt|;
name|testString
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|ucs4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|testString
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|expectedBreakPositions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|comments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|lst
init|=
name|comments
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|comments
operator|.
name|clear
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|part
decl|,
name|lst
control|)
block|{
if|if
condition|(
name|part
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|0xf7
condition|)
name|comments
operator|+=
name|QLatin1Char
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|0xd7
condition|)
name|comments
operator|+=
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|part
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
operator|&&
name|part
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
condition|)
name|comments
operator|+=
name|part
expr_stmt|;
block|}
block|}
name|QString
name|nm
init|=
name|QString
argument_list|(
literal|"line #%1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|linenum
argument_list|)
operator|.
name|arg
argument_list|(
name|comments
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|nm
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_AUTOTEST_EXPORT
name|int
name|qt_initcharattributes_default_algorithm_only
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
DECL|function|doTestData
specifier|static
name|void
name|doTestData
parameter_list|(
specifier|const
name|QString
modifier|&
name|testString
parameter_list|,
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
name|expectedBreakPositions
parameter_list|,
name|QTextBoundaryFinder
operator|::
name|BoundaryType
name|type
parameter_list|,
name|bool
name|default_algorithm_only
init|=
literal|false
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QScopedValueRollback
argument_list|<
name|int
argument_list|>
name|default_algorithm
argument_list|(
name|qt_initcharattributes_default_algorithm_only
argument_list|)
decl_stmt|;
if|if
condition|(
name|default_algorithm_only
condition|)
name|qt_initcharattributes_default_algorithm_only
operator|++
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|default_algorithm_only
argument_list|)
endif|#
directive|endif
name|QTextBoundaryFinder
name|boundaryFinder
argument_list|(
name|type
argument_list|,
name|testString
argument_list|)
decl_stmt|;
comment|// test toNextBoundary()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|actualBreakPositions
decl_stmt|;
if|if
condition|(
name|boundaryFinder
operator|.
name|isAtBoundary
argument_list|()
condition|)
name|actualBreakPositions
operator|.
name|append
argument_list|(
name|boundaryFinder
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|boundaryFinder
operator|.
name|toNextBoundary
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|boundaryFinder
operator|.
name|isAtBoundary
argument_list|()
argument_list|)
expr_stmt|;
name|actualBreakPositions
operator|.
name|append
argument_list|(
name|boundaryFinder
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|actualBreakPositions
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
block|}
comment|// test toPreviousBoundary()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositionsRev
init|=
name|expectedBreakPositions
decl_stmt|;
name|qSort
argument_list|(
name|expectedBreakPositionsRev
operator|.
name|begin
argument_list|()
argument_list|,
name|expectedBreakPositionsRev
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|actualBreakPositions
decl_stmt|;
name|boundaryFinder
operator|.
name|toEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|boundaryFinder
operator|.
name|isAtBoundary
argument_list|()
condition|)
name|actualBreakPositions
operator|.
name|append
argument_list|(
name|boundaryFinder
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|boundaryFinder
operator|.
name|toPreviousBoundary
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|boundaryFinder
operator|.
name|isAtBoundary
argument_list|()
argument_list|)
expr_stmt|;
name|actualBreakPositions
operator|.
name|append
argument_list|(
name|boundaryFinder
operator|.
name|position
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|actualBreakPositions
argument_list|,
name|expectedBreakPositionsRev
argument_list|)
expr_stmt|;
block|}
comment|// test isAtBoundary()
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testString
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|boundaryFinder
operator|.
name|setPosition
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boundaryFinder
operator|.
name|isAtBoundary
argument_list|()
argument_list|,
name|expectedBreakPositions
operator|.
name|contains
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|graphemeBoundariesDefault_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|graphemeBoundariesDefault_data
parameter_list|()
block|{
name|generateDataFromFile
argument_list|(
literal|"data/GraphemeBreakTest.txt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|graphemeBoundariesDefault
name|void
name|tst_QTextBoundaryFinder
operator|::
name|graphemeBoundariesDefault
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Grapheme
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordBoundariesDefault_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|wordBoundariesDefault_data
parameter_list|()
block|{
name|generateDataFromFile
argument_list|(
literal|"data/WordBreakTest.txt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wordBoundariesDefault
name|void
name|tst_QTextBoundaryFinder
operator|::
name|wordBoundariesDefault
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sentenceBoundariesDefault_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|sentenceBoundariesDefault_data
parameter_list|()
block|{
name|generateDataFromFile
argument_list|(
literal|"data/SentenceBreakTest.txt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sentenceBoundariesDefault
name|void
name|tst_QTextBoundaryFinder
operator|::
name|sentenceBoundariesDefault
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Sentence
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_INTERNAL
end_comment
begin_function
DECL|function|wordBoundaries_manual_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|wordBoundaries_manual_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedBreakPositions"
argument_list|)
expr_stmt|;
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000D
block|,
literal|0x000A
block|,
literal|0x000A
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+CRxLF+LF+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000D
block|,
literal|0x0308
block|,
literal|0x000A
block|,
literal|0x000A
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+CR+FE+LF+LF+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QString
name|testString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Aaa bbb ccc.\r\nDdd eee fff."
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|11
operator|<<
literal|12
operator|<<
literal|14
operator|<<
literal|17
operator|<<
literal|18
operator|<<
literal|21
operator|<<
literal|22
operator|<<
literal|25
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
comment|// Sample Strings from WordBreakTest.html
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0063
block|,
literal|0x0061
block|,
literal|0x006E
block|,
literal|0x0027
block|,
literal|0x0074
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 1"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0063
block|,
literal|0x0061
block|,
literal|0x006E
block|,
literal|0x2019
block|,
literal|0x0074
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 2"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0061
block|,
literal|0x0062
block|,
literal|0x00AD
block|,
literal|0x0062
block|,
literal|0x0061
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 3"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0061
block|,
literal|0x0024
block|,
literal|0x002D
block|,
literal|0x0033
block|,
literal|0x0034
block|,
literal|0x002C
block|,
literal|0x0035
block|,
literal|0x0036
block|,
literal|0x0037
block|,
literal|0x002E
block|,
literal|0x0031
block|,
literal|0x0034
block|,
literal|0x0025
block|,
literal|0x0062
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|12
operator|<<
literal|13
operator|<<
literal|14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 4"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0033
block|,
literal|0x0061
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 5"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x2060
block|,
literal|0x0063
block|,
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x006E
block|,
literal|0x2060
block|,
literal|0x0027
block|,
literal|0x2060
block|,
literal|0x0074
block|,
literal|0x2060
block|,
literal|0x2060
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 1e"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x2060
block|,
literal|0x0063
block|,
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x006E
block|,
literal|0x2060
block|,
literal|0x2019
block|,
literal|0x2060
block|,
literal|0x0074
block|,
literal|0x2060
block|,
literal|0x2060
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 2e"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x0062
block|,
literal|0x2060
block|,
literal|0x00AD
block|,
literal|0x2060
block|,
literal|0x0062
block|,
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x2060
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 3e"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x0024
block|,
literal|0x2060
block|,
literal|0x002D
block|,
literal|0x2060
block|,
literal|0x0033
block|,
literal|0x2060
block|,
literal|0x0034
block|,
literal|0x2060
block|,
literal|0x002C
block|,
literal|0x2060
block|,
literal|0x0035
block|,
literal|0x2060
block|,
literal|0x0036
block|,
literal|0x2060
block|,
literal|0x0037
block|,
literal|0x2060
block|,
literal|0x002E
block|,
literal|0x2060
block|,
literal|0x0031
block|,
literal|0x2060
block|,
literal|0x0034
block|,
literal|0x2060
block|,
literal|0x0025
block|,
literal|0x2060
block|,
literal|0x0062
block|,
literal|0x2060
block|,
literal|0x2060
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|25
operator|<<
literal|27
operator|<<
literal|30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 4e"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x2060
block|,
literal|0x0033
block|,
literal|0x2060
block|,
literal|0x0061
block|,
literal|0x2060
block|,
literal|0x2060
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ts 5e"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|wordBoundaries_manual
name|void
name|tst_QTextBoundaryFinder
operator|::
name|wordBoundaries_manual
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sentenceBoundaries_manual_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|sentenceBoundaries_manual_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedBreakPositions"
argument_list|)
expr_stmt|;
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000D
block|,
literal|0x000A
block|,
literal|0x000A
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+CRxLF+LF+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000D
block|,
literal|0x0308
block|,
literal|0x000A
block|,
literal|0x000A
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+CR+FExLF+LF+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QString
name|testString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Aaa bbb ccc.\r\nDdd eee fff."
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|14
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QString
name|testString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Diga-nos qualÃ© a sua opiniÃ£o"
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|28
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sentenceBoundaries_manual
name|void
name|tst_QTextBoundaryFinder
operator|::
name|sentenceBoundaries_manual
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Sentence
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lineBoundaries_manual_data
name|void
name|tst_QTextBoundaryFinder
operator|::
name|lineBoundaries_manual_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"expectedBreakPositions"
argument_list|)
expr_stmt|;
block|{
name|QString
name|testString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Aaa bbb ccc.\r\nDdd eee fff."
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|4
operator|<<
literal|8
operator|<<
literal|14
operator|<<
literal|18
operator|<<
literal|22
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QString
name|testString
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Diga-nos qualÃ© a sua opiniÃ£o"
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|9
operator|<<
literal|15
operator|<<
literal|17
operator|<<
literal|21
operator|<<
literal|28
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000A
block|,
literal|0x2E80
block|,
literal|0x0308
block|,
literal|0x0023
block|,
literal|0x0023
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"x(LF)+(ID)x(CM)+(AL)x(AL)+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x000A
block|,
literal|0x0308
block|,
literal|0x0023
block|,
literal|0x0023
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"x(LF)+(CM)x(AL)x(AL)+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|{
name|QChar
name|s
index|[]
init|=
block|{
literal|0x0061
block|,
literal|0x00AD
block|,
literal|0x0062
block|,
literal|0x0009
block|,
literal|0x0063
block|,
literal|0x0064
block|}
decl_stmt|;
name|QString
name|testString
argument_list|(
name|s
argument_list|,
sizeof|sizeof
argument_list|(
name|s
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|s
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expectedBreakPositions
decl_stmt|;
name|expectedBreakPositions
operator|<<
literal|0
operator|<<
literal|4
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"x(AL)x(BA)+(AL)x(BA)+(AL)x(AL)+"
argument_list|)
operator|<<
name|testString
operator|<<
name|expectedBreakPositions
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lineBoundaries_manual
name|void
name|tst_QTextBoundaryFinder
operator|::
name|lineBoundaries_manual
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|expectedBreakPositions
argument_list|)
expr_stmt|;
name|doTestData
argument_list|(
name|testString
argument_list|,
name|expectedBreakPositions
argument_list|,
name|QTextBoundaryFinder
operator|::
name|Line
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fastConstructor
name|void
name|tst_QTextBoundaryFinder
operator|::
name|fastConstructor
parameter_list|()
block|{
name|QString
name|text
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|QTextBoundaryFinder
name|finder
argument_list|(
name|QTextBoundaryFinder
operator|::
name|Word
argument_list|,
name|text
operator|.
name|constData
argument_list|()
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|,
comment|/*buffer*/
literal|0
argument_list|,
comment|/*buffer size*/
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|boundaryReasons
argument_list|()
argument_list|,
name|QTextBoundaryFinder
operator|::
name|StartWord
argument_list|)
expr_stmt|;
name|finder
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|position
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|boundaryReasons
argument_list|()
argument_list|,
name|QTextBoundaryFinder
operator|::
name|EndWord
argument_list|)
expr_stmt|;
name|finder
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|position
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|boundaryReasons
argument_list|()
argument_list|,
name|QTextBoundaryFinder
operator|::
name|StartWord
argument_list|)
expr_stmt|;
name|finder
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|position
argument_list|()
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|boundaryReasons
argument_list|()
argument_list|,
name|QTextBoundaryFinder
operator|::
name|EndWord
argument_list|)
expr_stmt|;
name|finder
operator|.
name|toNextBoundary
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|position
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finder
operator|.
name|boundaryReasons
argument_list|()
argument_list|,
name|QTextBoundaryFinder
operator|::
name|NotAtBoundary
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_define
DECL|macro|LIBTHAI_MAJOR
define|#
directive|define
name|LIBTHAI_MAJOR
value|0
end_define
begin_typedef
DECL|typedef|th_brk_def
typedef|typedef
name|int
function_decl|(
modifier|*
name|th_brk_def
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_typedef
begin_decl_stmt
DECL|variable|th_brk
specifier|static
name|th_brk_def
name|th_brk
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|init_libthai
specifier|static
name|bool
name|init_libthai
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_LIBRARY
argument_list|)
specifier|static
name|bool
name|triedResolve
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|triedResolve
condition|)
block|{
name|th_brk
operator|=
operator|(
name|th_brk_def
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
literal|"thai"
argument_list|,
operator|(
name|int
operator|)
name|LIBTHAI_MAJOR
argument_list|,
literal|"th_brk"
argument_list|)
expr_stmt|;
name|triedResolve
operator|=
literal|true
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|th_brk
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|thaiLineBreak
name|void
name|tst_QTextBoundaryFinder
operator|::
name|thaiLineBreak
parameter_list|()
block|{
if|if
condition|(
operator|!
name|init_libthai
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test requires libThai-0.1.1x to be installed."
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// à¸ªà¸§à¸±à¸ªà¸à¸µà¸à¸£à¸±à¸ à¸à¸µà¹à¹à¸à¹à¸à¸à¸²à¸£à¸à¸à¸à¸ªà¸­à¸à¸à¸±à¸§à¹à¸­
block|QTextCodec *codec = QTextCodec::codecForMib(2259);     QString text = codec->toUnicode(QByteArray("\xca\xc7\xd1\xca\xb4\xd5\xa4\xc3\xd1\xba\x20\xb9\xd5\xe8\xe0\xbb\xe7\xb9\xa1\xd2\xc3\xb7\xb4\xca\xcd\xba\xb5\xd1\xc7\xe0\xcd\xa7"));     QCOMPARE(text.length(), 32);      QTextBoundaryFinder finder(QTextBoundaryFinder::Line, text);     finder.setPosition(0);     QVERIFY(finder.isAtBoundary());     finder.setPosition(1);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(2);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(3);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(4);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(5);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(6);     QVERIFY(finder.isAtBoundary());     finder.setPosition(7);     QVERIFY(finder.isAtBoundary());     finder.setPosition(8);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(9);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(10);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(11);     QVERIFY(finder.isAtBoundary());     finder.setPosition(12);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(13);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(14);     QVERIFY(finder.isAtBoundary());     finder.setPosition(15);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(16);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(17);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(18);     QVERIFY(finder.isAtBoundary());     finder.setPosition(19);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(20);     QVERIFY(finder.isAtBoundary());     finder.setPosition(21);     QVERIFY(finder.isAtBoundary());     finder.setPosition(22);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(23);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(24);     QVERIFY(!finder.isAtBoundary());     finder.setPosition(25);     QVERIFY(finder.isAtBoundary());     finder.setPosition(26);     QVERIFY(finder.isAtBoundary());     for (int i = 27; i< 32; ++i) {         finder.setPosition(i);         QVERIFY(!finder.isAtBoundary());     }
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextBoundaryFinder
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextboundaryfinder.moc"
end_include
end_unit
