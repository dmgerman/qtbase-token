begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<private/qringbuffer_p.h>
end_include
begin_class
DECL|class|tst_QRingBuffer
class|class
name|tst_QRingBuffer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|readPointerAtPositionWriteRead
parameter_list|()
function_decl|;
name|void
name|readPointerAtPositionEmptyRead
parameter_list|()
function_decl|;
name|void
name|readPointerAtPositionWithHead
parameter_list|()
function_decl|;
name|void
name|readPointerAtPositionReadTooMuch
parameter_list|()
function_decl|;
name|void
name|sizeWhenEmpty
parameter_list|()
function_decl|;
name|void
name|sizeWhenReservedAndChopped
parameter_list|()
function_decl|;
name|void
name|sizeWhenReserved
parameter_list|()
function_decl|;
name|void
name|appendAndRead
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|sizeWhenReserved
name|void
name|tst_QRingBuffer
operator|::
name|sizeWhenReserved
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|ringBuffer
operator|.
name|reserve
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeWhenReservedAndChopped
name|void
name|tst_QRingBuffer
operator|::
name|sizeWhenReservedAndChopped
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|ringBuffer
operator|.
name|reserve
argument_list|(
literal|31337
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|chop
argument_list|(
literal|31337
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeWhenEmpty
name|void
name|tst_QRingBuffer
operator|::
name|sizeWhenEmpty
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPointerAtPositionReadTooMuch
name|void
name|tst_QRingBuffer
operator|::
name|readPointerAtPositionReadTooMuch
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|qint64
name|length
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf
init|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
literal|42
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPointerAtPositionWithHead
name|void
name|tst_QRingBuffer
operator|::
name|readPointerAtPositionWithHead
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|char
modifier|*
name|buf
init|=
name|ringBuffer
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|buf
argument_list|,
literal|"0123"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|free
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// ringBuffer should have stayed the same except
comment|// its head it had moved to position 2
name|qint64
name|length
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf2
init|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|length
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
name|buf2
operator|==
literal|'2'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|buf2
operator|+
literal|1
operator|)
operator|==
literal|'3'
argument_list|)
expr_stmt|;
comment|// advance 2 more, ringBuffer should be empty then
name|ringBuffer
operator|.
name|free
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|buf2
operator|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|length
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf2
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// check buffer with 2 blocks
name|memcpy
argument_list|(
name|ringBuffer
operator|.
name|reserve
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"0123"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|append
argument_list|(
name|QByteArray
argument_list|(
literal|"45678"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|free
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|buf2
operator|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
literal|1
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|length
argument_list|,
name|qint64
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPointerAtPositionEmptyRead
name|void
name|tst_QRingBuffer
operator|::
name|readPointerAtPositionEmptyRead
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|qint64
name|length
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf
init|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPointerAtPositionWriteRead
name|void
name|tst_QRingBuffer
operator|::
name|readPointerAtPositionWriteRead
parameter_list|()
block|{
comment|//create some data
name|QBuffer
name|inData
decl_stmt|;
name|inData
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|inData
operator|.
name|putChar
argument_list|(
literal|0x42
argument_list|)
expr_stmt|;
name|inData
operator|.
name|putChar
argument_list|(
literal|0x23
argument_list|)
expr_stmt|;
name|inData
operator|.
name|write
argument_list|(
literal|"Qt rocks!"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
name|inData
operator|.
name|write
argument_list|(
name|QString
argument_list|(
literal|"Number %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|inData
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|inData
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//put the inData in the QRingBuffer
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|qint64
name|remaining
init|=
name|inData
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
comment|// write in chunks of 50 bytes
comment|// this ensures there will be multiple QByteArrays inside the QRingBuffer
comment|// since QRingBuffer is then only using individual arrays of around 4000 bytes
name|qint64
name|thisWrite
init|=
name|qMin
argument_list|(
name|remaining
argument_list|,
name|qint64
argument_list|(
literal|50
argument_list|)
argument_list|)
decl_stmt|;
name|char
modifier|*
name|pos
init|=
name|ringBuffer
operator|.
name|reserve
argument_list|(
name|thisWrite
argument_list|)
decl_stmt|;
name|inData
operator|.
name|read
argument_list|(
name|pos
argument_list|,
name|thisWrite
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|thisWrite
expr_stmt|;
block|}
comment|// was data put into it?
name|QVERIFY
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qint64
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|inData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//read from the QRingBuffer in loop, put back into another QBuffer
name|QBuffer
name|outData
decl_stmt|;
name|outData
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|remaining
operator|=
name|ringBuffer
operator|.
name|size
argument_list|()
expr_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|qint64
name|thisRead
decl_stmt|;
comment|// always try to read as much as possible
specifier|const
name|char
modifier|*
name|buf
init|=
name|ringBuffer
operator|.
name|readPointerAtPosition
argument_list|(
name|ringBuffer
operator|.
name|size
argument_list|()
operator|-
name|remaining
argument_list|,
name|thisRead
argument_list|)
decl_stmt|;
name|outData
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|thisRead
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|thisRead
expr_stmt|;
block|}
name|outData
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|outData
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// was the data read from the QRingBuffer the same as the one written into it?
name|QCOMPARE
argument_list|(
name|outData
operator|.
name|size
argument_list|()
argument_list|,
name|inData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outData
operator|.
name|buffer
argument_list|()
operator|.
name|startsWith
argument_list|(
name|inData
operator|.
name|buffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendAndRead
name|void
name|tst_QRingBuffer
operator|::
name|appendAndRead
parameter_list|()
block|{
name|QRingBuffer
name|ringBuffer
decl_stmt|;
name|QByteArray
name|ba1
argument_list|(
literal|"Hello world!"
argument_list|)
decl_stmt|;
name|QByteArray
name|ba2
argument_list|(
literal|"Test string."
argument_list|)
decl_stmt|;
name|QByteArray
name|ba3
argument_list|(
literal|"0123456789"
argument_list|)
decl_stmt|;
name|ringBuffer
operator|.
name|append
argument_list|(
name|ba1
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|append
argument_list|(
name|ba2
argument_list|)
expr_stmt|;
name|ringBuffer
operator|.
name|append
argument_list|(
name|ba3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ringBuffer
operator|.
name|read
argument_list|()
operator|==
name|ba1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ringBuffer
operator|.
name|read
argument_list|()
operator|==
name|ba2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ringBuffer
operator|.
name|read
argument_list|()
operator|==
name|ba3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QRingBuffer
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qringbuffer.moc"
end_include
end_unit
