begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<iomanip>
end_include
begin_include
include|#
directive|include
file|<sstream>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<qalgorithms.h>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_define
DECL|macro|Q_TEST_PERFORMANCE
define|#
directive|define
name|Q_TEST_PERFORMANCE
value|0
end_define
begin_using
using|using
namespace|namespace
name|std
namespace|;
end_using
begin_class
DECL|class|tst_QAlgorithms
class|class
name|tst_QAlgorithms
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|test_qLowerBound_data
parameter_list|()
function_decl|;
name|void
name|test_qLowerBound
parameter_list|()
function_decl|;
name|void
name|test_qUpperBound_data
parameter_list|()
function_decl|;
name|void
name|test_qUpperBound
parameter_list|()
function_decl|;
name|void
name|test_qBinaryFind_data
parameter_list|()
function_decl|;
name|void
name|test_qBinaryFind
parameter_list|()
function_decl|;
name|void
name|qBinaryFindOneEntry
parameter_list|()
function_decl|;
name|void
name|swap
parameter_list|()
function_decl|;
name|void
name|swap2
parameter_list|()
function_decl|;
name|void
name|sortEmptyList
parameter_list|()
function_decl|;
name|void
name|sortedList
parameter_list|()
function_decl|;
name|void
name|sortAPItest
parameter_list|()
function_decl|;
name|void
name|stableSortTest
parameter_list|()
function_decl|;
name|void
name|stableSortCorrectnessTest_data
parameter_list|()
function_decl|;
name|void
name|stableSortCorrectnessTest
parameter_list|()
function_decl|;
name|void
name|convenienceAPI
parameter_list|()
function_decl|;
name|void
name|qCountIterators
parameter_list|()
specifier|const
function_decl|;
name|void
name|qCountContainer
parameter_list|()
specifier|const
function_decl|;
name|void
name|binaryFindOnLargeContainer
parameter_list|()
specifier|const
function_decl|;
if|#
directive|if
name|Q_TEST_PERFORMANCE
private|private:
name|void
name|performance
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|TestInt
class|class
name|TestInt
block|{
public|public:
DECL|function|TestInt
name|TestInt
parameter_list|(
name|int
name|number
parameter_list|)
member_init_list|:
name|m_number
argument_list|(
name|number
argument_list|)
block|{}
empty_stmt|;
DECL|function|TestInt
name|TestInt
parameter_list|()
member_init_list|:
name|m_number
argument_list|(
literal|0
argument_list|)
block|{}
empty_stmt|;
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|TestInt
modifier|&
name|other
parameter_list|)
specifier|const
block|{
operator|++
name|TestInt
operator|::
name|lessThanRefCount
expr_stmt|;
return|return
operator|(
name|m_number
operator|<
name|other
operator|.
name|m_number
operator|)
return|;
block|}
DECL|member|m_number
name|int
name|m_number
decl_stmt|;
DECL|member|lessThanRefCount
specifier|static
name|long
name|int
name|lessThanRefCount
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|lessThanRefCount
name|long
name|int
name|TestInt
operator|::
name|lessThanRefCount
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|dataSetTypes
name|QStringList
name|dataSetTypes
init|=
name|QStringList
argument_list|()
operator|<<
literal|"Random"
operator|<<
literal|"Ascending"
operator|<<
literal|"Descending"
operator|<<
literal|"Equal"
operator|<<
literal|"Duplicates"
operator|<<
literal|"Almost Sorted"
decl_stmt|;
end_decl_stmt
begin_function
template|template
parameter_list|<
name|typename
name|DataType
parameter_list|>
DECL|function|generateData
name|QVector
argument_list|<
name|DataType
argument_list|>
name|generateData
parameter_list|(
name|QString
name|dataSetType
parameter_list|,
specifier|const
name|int
name|length
parameter_list|)
block|{
name|QVector
argument_list|<
name|DataType
argument_list|>
name|container
decl_stmt|;
if|if
condition|(
name|dataSetType
operator|==
literal|"Random"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|rand
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSetType
operator|==
literal|"Ascending"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSetType
operator|==
literal|"Descending"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSetType
operator|==
literal|"Equal"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
literal|43
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSetType
operator|==
literal|"Duplicates"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|i
operator|%
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dataSetType
operator|==
literal|"Almost Sorted"
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
name|container
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|length
operator|/
literal|10
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|iswap
init|=
name|i
operator|*
literal|9
decl_stmt|;
name|DataType
name|tmp
init|=
name|container
operator|.
name|at
argument_list|(
name|iswap
argument_list|)
decl_stmt|;
name|container
index|[
name|iswap
index|]
operator|=
name|container
operator|.
name|at
argument_list|(
name|iswap
operator|+
literal|1
argument_list|)
expr_stmt|;
name|container
index|[
name|iswap
operator|+
literal|1
index|]
operator|=
name|tmp
expr_stmt|;
block|}
block|}
return|return
name|container
return|;
block|}
end_function
begin_struct
DECL|struct|ResultSet
struct|struct
name|ResultSet
block|{
DECL|member|numSorts
name|int
name|numSorts
decl_stmt|;
DECL|member|lessThanRefCount
name|long
name|int
name|lessThanRefCount
decl_stmt|;
block|}
struct|;
end_struct
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|Algorithm
parameter_list|>
DECL|function|testRun
name|ResultSet
name|testRun
parameter_list|(
name|ContainerType
modifier|&
name|container
parameter_list|,
name|Algorithm
modifier|&
name|algorithm
parameter_list|,
name|int
name|millisecs
parameter_list|)
block|{
name|TestInt
operator|::
name|lessThanRefCount
operator|=
literal|0
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|<
name|millisecs
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|algorithm
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|ResultSet
name|result
decl_stmt|;
name|result
operator|.
name|numSorts
operator|=
name|count
expr_stmt|;
name|result
operator|.
name|lessThanRefCount
operator|=
name|TestInt
operator|::
name|lessThanRefCount
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|LessThan
parameter_list|>
DECL|function|isSorted
name|bool
name|isSorted
parameter_list|(
name|ContainerType
modifier|&
name|container
parameter_list|,
name|LessThan
name|lessThan
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|container
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|lessThan
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|>
DECL|function|isSorted
name|bool
name|isSorted
parameter_list|(
name|ContainerType
modifier|&
name|container
parameter_list|)
block|{
return|return
name|isSorted
argument_list|(
argument|container
argument_list|,
argument|qLess<Q_TYPENAME ContainerType::value_type>()
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|Q_TEST_PERFORMANCE
end_if
begin_function
DECL|function|printHeader
name|void
name|printHeader
parameter_list|(
name|QStringList
modifier|&
name|headers
parameter_list|)
block|{
name|cout
operator|<<
name|setw
argument_list|(
literal|10
argument_list|)
operator|<<
name|setiosflags
argument_list|(
name|ios_base
operator|::
name|left
argument_list|)
operator|<<
literal|" "
expr_stmt|;
for|for
control|(
name|int
name|h
init|=
literal|0
init|;
name|h
operator|<
name|headers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|h
control|)
block|{
name|cout
operator|<<
name|setw
argument_list|(
literal|20
argument_list|)
operator|<<
name|setiosflags
argument_list|(
name|ios_base
operator|::
name|left
argument_list|)
operator|<<
name|headers
operator|.
name|at
argument_list|(
name|h
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
expr_stmt|;
block|}
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|>
DECL|function|print
name|void
name|print
parameter_list|(
name|ContainerType
name|testContainer
parameter_list|)
block|{
typedef|typedef
typename|typename
name|ContainerType
operator|::
name|value_type
name|T
typedef|;
foreach|foreach
control|(
name|T
name|value
decl|,
name|testContainer
control|)
block|{
name|cout
operator|<<
name|value
operator|<<
literal|" "
expr_stmt|;
block|}
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Algorithm
parameter_list|,
name|typename
name|DataType
parameter_list|>
DECL|function|testAlgorithm
name|QList
argument_list|<
name|ResultSet
argument_list|>
name|testAlgorithm
parameter_list|(
name|Algorithm
modifier|&
name|algorithm
parameter_list|,
name|QStringList
name|dataSetTypes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|time
parameter_list|)
block|{
name|QList
argument_list|<
name|ResultSet
argument_list|>
name|results
decl_stmt|;
foreach|foreach
control|(
name|QString
name|dataSetType
decl|,
name|dataSetTypes
control|)
block|{
name|QVector
argument_list|<
name|DataType
argument_list|>
name|container
init|=
name|generateData
argument_list|<
name|DataType
argument_list|>
argument_list|(
name|dataSetType
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|results
operator|.
name|append
argument_list|(
name|testRun
argument_list|(
name|container
argument_list|,
name|algorithm
argument_list|,
name|time
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSorted
argument_list|(
name|container
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"%s: container is not sorted after test"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|Algorithm
parameter_list|,
name|typename
name|DataType
parameter_list|>
DECL|function|testAlgorithm
name|void
name|testAlgorithm
parameter_list|(
name|Algorithm
name|algorithm
parameter_list|,
name|QStringList
modifier|&
name|dataSetTypes
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|sizes
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
operator|<<
literal|15
operator|<<
literal|35
operator|<<
literal|70
operator|<<
literal|200
operator|<<
literal|1000
operator|<<
literal|10000
decl_stmt|;
name|printHeader
argument_list|(
name|dataSetTypes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|sizes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|s
control|)
block|{
name|cout
operator|<<
name|setw
argument_list|(
literal|10
argument_list|)
operator|<<
name|setiosflags
argument_list|(
name|ios_base
operator|::
name|left
argument_list|)
operator|<<
name|sizes
operator|.
name|at
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|ResultSet
argument_list|>
name|results
init|=
name|testAlgorithm
argument_list|<
name|Algorithm
argument_list|,
name|DataType
argument_list|>
argument_list|(
name|algorithm
argument_list|,
name|dataSetTypes
argument_list|,
name|sizes
operator|.
name|at
argument_list|(
name|s
argument_list|)
argument_list|,
literal|100
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|ResultSet
name|result
decl|,
name|results
control|)
block|{
name|stringstream
name|numSorts
decl_stmt|;
name|numSorts
operator|<<
name|setiosflags
argument_list|(
name|ios_base
operator|::
name|left
argument_list|)
operator|<<
name|setw
argument_list|(
literal|10
argument_list|)
operator|<<
name|result
operator|.
name|numSorts
expr_stmt|;
name|stringstream
name|lessThan
decl_stmt|;
name|lessThan
operator|<<
name|setiosflags
argument_list|(
name|ios_base
operator|::
name|left
argument_list|)
operator|<<
name|setw
argument_list|(
literal|10
argument_list|)
operator|<<
name|result
operator|.
name|lessThanRefCount
operator|/
name|result
operator|.
name|numSorts
expr_stmt|;
name|cout
operator|<<
name|numSorts
operator|.
name|str
argument_list|()
operator|<<
name|lessThan
operator|.
name|str
argument_list|()
expr_stmt|;
block|}
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|swap
name|void
name|tst_QAlgorithms
operator|::
name|swap
parameter_list|()
block|{
block|{
name|int
name|a
init|=
literal|1
decl_stmt|,
name|b
init|=
literal|2
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|2
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|double
name|a
init|=
literal|1.0
decl_stmt|,
name|b
init|=
literal|2.0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|1.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|2.0
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|2.0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|1.0
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|a
init|=
literal|"1"
decl_stmt|,
name|b
init|=
literal|"2"
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|qSwap
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
literal|"2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
literal|"1"
argument_list|)
expr_stmt|;
block|}
block|{
name|void
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|void
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
modifier|*
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
modifier|*
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
modifier|*
specifier|const
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
decl_stmt|const
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
modifier|*
specifier|const
modifier|*
name|a
init|=
literal|0
decl_stmt|,
modifier|*
decl_stmt|const
modifier|*
name|b
init|=
literal|0
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_namespace
DECL|namespace|SwapTest
namespace|namespace
name|SwapTest
block|{
DECL|struct|ST
DECL|member|i
DECL|member|j
struct|struct
name|ST
block|{
name|int
name|i
decl_stmt|;
name|int
name|j
decl_stmt|;
block|}
struct|;
DECL|function|swap
name|void
name|swap
parameter_list|(
name|ST
modifier|&
name|a
parameter_list|,
name|ST
modifier|&
name|b
parameter_list|)
block|{
name|a
operator|.
name|i
operator|=
name|b
operator|.
name|j
expr_stmt|;
name|b
operator|.
name|i
operator|=
name|a
operator|.
name|j
expr_stmt|;
block|}
block|}
end_namespace
begin_function
DECL|function|swap2
name|void
name|tst_QAlgorithms
operator|::
name|swap2
parameter_list|()
block|{
block|{
ifndef|#
directive|ifndef
name|QT_NO_SQL
comment|//check the namespace lookup works correctly
name|SwapTest
operator|::
name|ST
name|a
init|=
block|{
literal|45
block|,
literal|65
block|}
decl_stmt|;
name|SwapTest
operator|::
name|ST
name|b
init|=
block|{
literal|48
block|,
literal|68
block|}
decl_stmt|;
name|qSwap
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|i
argument_list|,
literal|68
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|i
argument_list|,
literal|65
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|sortEmptyList
name|void
name|tst_QAlgorithms
operator|::
name|sortEmptyList
parameter_list|()
block|{
comment|// Only test if it crashes
name|QStringList
name|stringList
decl_stmt|;
name|stringList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortedList
name|void
name|tst_QAlgorithms
operator|::
name|sortedList
parameter_list|()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|6
expr_stmt|;
operator|::
name|qSort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|insert
argument_list|(
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<int>
argument_list|)
end_macro
begin_function
DECL|function|test_qLowerBound_data
name|void
name|tst_QAlgorithms
operator|::
name|test_qLowerBound_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-duplicate"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|3
operator|)
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_qLowerBound
name|void
name|tst_QAlgorithms
operator|::
name|test_qLowerBound
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qLowerBound
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qLowerBound
argument_list|(
name|data
operator|.
name|begin
argument_list|()
argument_list|,
name|data
operator|.
name|end
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|begin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qLowerBound
argument_list|(
name|data
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qLowerBound
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_qUpperBound_data
name|void
name|tst_QAlgorithms
operator|::
name|test_qUpperBound_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-duplicate"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|3
operator|)
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_qUpperBound
name|void
name|tst_QAlgorithms
operator|::
name|test_qUpperBound
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qUpperBound
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qUpperBound
argument_list|(
name|data
operator|.
name|begin
argument_list|()
argument_list|,
name|data
operator|.
name|end
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|begin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qUpperBound
argument_list|(
name|data
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qUpperBound
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
operator|+
name|resultIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_qBinaryFind_data
name|void
name|tst_QAlgorithms
operator|::
name|test_qBinaryFind_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resultValue"
argument_list|)
expr_stmt|;
comment|// -42 means not found
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-duplicate"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|2
operator|<<
literal|3
operator|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-end"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|5
operator|<<
operator|-
literal|2
operator|<<
literal|0
operator|<<
literal|8
operator|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-beginning"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|5
operator|<<
operator|-
literal|2
operator|<<
literal|0
operator|<<
literal|8
operator|)
operator|<<
operator|-
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sorted-duplicate-beginning"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|5
operator|<<
operator|-
literal|5
operator|<<
operator|-
literal|2
operator|<<
literal|0
operator|<<
literal|8
operator|)
operator|<<
operator|-
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|)
operator|<<
operator|-
literal|42
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"not found 1 "
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|5
operator|<<
literal|8
operator|<<
literal|65
operator|)
operator|<<
operator|-
literal|42
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"not found 2 "
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|456
operator|<<
operator|-
literal|5
operator|<<
literal|8
operator|<<
literal|65
operator|)
operator|<<
operator|-
literal|42
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test_qBinaryFind
name|void
name|tst_QAlgorithms
operator|::
name|test_qBinaryFind
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
comment|//-42 means not found
if|if
condition|(
name|resultValue
operator|==
operator|-
literal|42
condition|)
block|{
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|)
operator|==
name|data
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|data
argument_list|,
name|resultValue
argument_list|)
operator|==
name|data
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|data
operator|.
name|begin
argument_list|()
argument_list|,
name|data
operator|.
name|end
argument_list|()
argument_list|,
name|resultValue
argument_list|)
operator|==
name|data
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qBinaryFind
argument_list|(
name|data
operator|.
name|begin
argument_list|()
argument_list|,
name|data
operator|.
name|end
argument_list|()
argument_list|,
name|resultValue
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
operator|==
name|data
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
operator|*
name|qBinaryFind
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|qBinaryFind
argument_list|(
name|data
operator|.
name|begin
argument_list|()
argument_list|,
name|data
operator|.
name|end
argument_list|()
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|qBinaryFind
argument_list|(
name|data
argument_list|,
name|resultValue
argument_list|)
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|qBinaryFind
argument_list|(
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|,
name|resultValue
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
argument_list|,
name|resultValue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qBinaryFindOneEntry
name|void
name|tst_QAlgorithms
operator|::
name|qBinaryFindOneEntry
parameter_list|()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|2
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|qBinaryFind
argument_list|(
name|list
operator|.
name|constBegin
argument_list|()
argument_list|,
name|list
operator|.
name|constEnd
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|!=
name|list
operator|.
name|constEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortAPItest
name|void
name|tst_QAlgorithms
operator|::
name|sortAPItest
parameter_list|()
block|{
name|QVector
argument_list|<
name|int
argument_list|>
name|testVector
init|=
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Random"
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|qSort
argument_list|(
name|testVector
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|testVector
operator|.
name|begin
argument_list|()
argument_list|,
name|testVector
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|testVector
operator|.
name|begin
argument_list|()
argument_list|,
name|testVector
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|testVector
operator|=
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Random"
argument_list|,
literal|71
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|testVector
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|testVector
operator|.
name|begin
argument_list|()
argument_list|,
name|testVector
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|testVector
operator|.
name|begin
argument_list|()
argument_list|,
name|testVector
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testVector
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|testList
init|=
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Random"
argument_list|,
literal|101
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|testList
operator|.
name|begin
argument_list|()
argument_list|,
name|testList
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|testList
operator|.
name|begin
argument_list|()
argument_list|,
name|testList
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|testList
operator|=
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Random"
argument_list|,
literal|71
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
name|qStableSort
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|testList
operator|.
name|begin
argument_list|()
argument_list|,
name|testList
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|testList
operator|.
name|begin
argument_list|()
argument_list|,
name|testList
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|StableSortTest
class|class
name|StableSortTest
block|{
public|public:
DECL|function|StableSortTest
name|StableSortTest
parameter_list|()
block|{}
empty_stmt|;
DECL|function|StableSortTest
name|StableSortTest
parameter_list|(
name|int
name|Major
parameter_list|,
name|int
name|Minor
parameter_list|)
member_init_list|:
name|Major
argument_list|(
name|Major
argument_list|)
member_init_list|,
name|Minor
argument_list|(
name|Minor
argument_list|)
block|{}
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|StableSortTest
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|Major
operator|<
name|other
operator|.
name|Major
operator|)
return|;
block|}
DECL|function|testMinor
name|bool
name|testMinor
parameter_list|(
specifier|const
name|StableSortTest
modifier|&
name|other
parameter_list|)
specifier|const
block|{
return|return
name|Minor
operator|<
name|other
operator|.
name|Minor
return|;
block|}
DECL|member|Major
name|int
name|Major
decl_stmt|;
DECL|member|Minor
name|int
name|Minor
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|operator <<
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|ostream
modifier|&
name|out
parameter_list|,
specifier|const
name|StableSortTest
modifier|&
name|obj
parameter_list|)
block|{
name|out
operator|<<
name|obj
operator|.
name|Major
operator|<<
literal|"-"
operator|<<
name|obj
operator|.
name|Minor
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|createStableTestVector
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|createStableTestVector
parameter_list|()
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|500
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|stableTestVector
operator|.
name|append
argument_list|(
name|StableSortTest
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|stableTestVector
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|ContainerType
parameter_list|,
name|typename
name|LessThan
parameter_list|>
DECL|function|isStableSorted
name|bool
name|isStableSorted
parameter_list|(
name|ContainerType
modifier|&
name|container
parameter_list|,
name|LessThan
name|lessThan
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|container
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
comment|//not sorted?
if|if
condition|(
name|lessThan
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
comment|// equal?
if|if
condition|(
name|lessThan
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|container
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|// minor version?
if|if
condition|(
name|container
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|testMinor
argument_list|(
name|container
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|stableSortTest
name|void
name|tst_QAlgorithms
operator|::
name|stableSortTest
parameter_list|()
block|{
comment|// Selftests:
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Stable sort with qLess
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|qStableSort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qLess
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Stable sort with qGreater
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QVector
argument_list|<
name|StableSortTest
argument_list|>
name|stableTestVector
init|=
name|createStableTestVector
argument_list|()
decl_stmt|;
name|qStableSort
argument_list|(
name|stableTestVector
operator|.
name|begin
argument_list|()
argument_list|,
name|stableTestVector
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isStableSorted
argument_list|(
name|stableTestVector
argument_list|,
name|qGreater
argument_list|<
name|StableSortTest
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVector<int>
argument_list|)
end_macro
begin_function
DECL|function|stableSortCorrectnessTest_data
name|void
name|tst_QAlgorithms
operator|::
name|stableSortCorrectnessTest_data
parameter_list|()
block|{
specifier|const
name|int
name|dataSize
init|=
literal|1000
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"unsorted"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"From documentation"
argument_list|)
operator|<<
operator|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|33
operator|<<
literal|12
operator|<<
literal|68
operator|<<
literal|6
operator|<<
literal|12
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Equal"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Equal"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ascending"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Ascending"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Descending"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Descending"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Duplicates"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Duplicates"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Almost Sorted"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Almost Sorted"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Random"
argument_list|)
operator|<<
operator|(
name|generateData
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"Random"
argument_list|,
name|dataSize
argument_list|)
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stableSortCorrectnessTest
name|void
name|tst_QAlgorithms
operator|::
name|stableSortCorrectnessTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|,
name|unsorted
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|sorted
init|=
name|unsorted
decl_stmt|;
name|qStableSort
argument_list|(
name|sorted
operator|.
name|begin
argument_list|()
argument_list|,
name|sorted
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that sorted contains the same numbers as unsorted.
foreach|foreach
control|(
name|int
name|value
decl|,
name|unsorted
control|)
block|{
name|QVERIFY
argument_list|(
name|sorted
operator|.
name|contains
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|unsortedCount
init|=
literal|0
decl_stmt|;
name|qCount
argument_list|(
name|unsorted
operator|.
name|begin
argument_list|()
argument_list|,
name|unsorted
operator|.
name|end
argument_list|()
argument_list|,
name|value
argument_list|,
name|unsortedCount
argument_list|)
expr_stmt|;
name|int
name|sortedCount
init|=
literal|0
decl_stmt|;
name|qCount
argument_list|(
name|sorted
operator|.
name|begin
argument_list|()
argument_list|,
name|sorted
operator|.
name|end
argument_list|()
argument_list|,
name|value
argument_list|,
name|sortedCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sortedCount
argument_list|,
name|unsortedCount
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|isSorted
argument_list|(
name|sorted
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convenienceAPI
name|void
name|tst_QAlgorithms
operator|::
name|convenienceAPI
parameter_list|()
block|{
comment|// Compile-test for QAlgorithm convenience functions.
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|,
name|list2
decl_stmt|;
name|qCopy
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|list2
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|qCopyBackward
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|list2
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|qEqual
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|list2
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|qFill
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qFill
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qFind
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qFind
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|count1
init|=
literal|0
decl_stmt|,
name|count2
init|=
literal|0
decl_stmt|,
name|count3
init|=
literal|0
decl_stmt|;
name|qCount
argument_list|(
name|list
argument_list|,
literal|1
argument_list|,
name|count1
argument_list|)
expr_stmt|;
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|,
name|count2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count1
argument_list|,
name|count2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count2
argument_list|,
name|count3
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|qStableSort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|qLowerBound
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
empty_stmt|;
name|qLowerBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qLowerBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|qUpperBound
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qUpperBound
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|qBinaryFind
argument_list|(
name|list
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qBinaryFind
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|qBinaryFind
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|,
name|qLess
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
modifier|*
argument_list|>
name|pointerList
decl_stmt|;
name|qDeleteAll
argument_list|(
name|pointerList
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|pointerList
operator|.
name|begin
argument_list|()
argument_list|,
name|pointerList
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
template|template
parameter_list|<
name|typename
name|DataType
parameter_list|>
class|class
DECL|class|QuickSortHelper
name|QuickSortHelper
block|{
public|public:
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|QVector
argument_list|<
name|DataType
argument_list|>
name|list
parameter_list|)
block|{
operator|::
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
template|template
parameter_list|<
name|typename
name|DataType
parameter_list|>
class|class
DECL|class|StableSortHelper
name|StableSortHelper
block|{
public|public:
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|QVector
argument_list|<
name|DataType
argument_list|>
name|list
parameter_list|)
block|{
operator|::
name|qStableSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
template|template
parameter_list|<
name|typename
name|DataType
parameter_list|>
class|class
DECL|class|StlSortHelper
name|StlSortHelper
block|{
public|public:
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|QVector
argument_list|<
name|DataType
argument_list|>
name|list
parameter_list|)
block|{
name|std
operator|::
name|sort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
template|template
parameter_list|<
name|typename
name|DataType
parameter_list|>
class|class
DECL|class|StlStableSortHelper
name|StlStableSortHelper
block|{
public|public:
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|(
name|QVector
argument_list|<
name|DataType
argument_list|>
name|list
parameter_list|)
block|{
name|std
operator|::
name|stable_sort
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_if
if|#
directive|if
name|Q_TEST_PERFORMANCE
end_if
begin_function
DECL|function|performance
name|void
name|tst_QAlgorithms
operator|::
name|performance
parameter_list|()
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Quick sort"
operator|<<
name|endl
expr_stmt|;
name|testAlgorithm
argument_list|<
name|QuickSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|,
name|TestInt
argument_list|>
argument_list|(
name|QuickSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|()
argument_list|,
name|dataSetTypes
argument_list|)
expr_stmt|;
name|cout
operator|<<
name|endl
operator|<<
literal|"stable sort"
operator|<<
name|endl
expr_stmt|;
name|testAlgorithm
argument_list|<
name|StableSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|,
name|TestInt
argument_list|>
argument_list|(
name|StableSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|()
argument_list|,
name|dataSetTypes
argument_list|)
expr_stmt|;
name|cout
operator|<<
name|endl
operator|<<
literal|"std::sort"
operator|<<
name|endl
expr_stmt|;
name|testAlgorithm
argument_list|<
name|StlSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|,
name|TestInt
argument_list|>
argument_list|(
name|StlSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|()
argument_list|,
name|dataSetTypes
argument_list|)
expr_stmt|;
name|cout
operator|<<
name|endl
operator|<<
literal|"std::stable_sort"
operator|<<
name|endl
expr_stmt|;
name|testAlgorithm
argument_list|<
name|StlStableSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|,
name|TestInt
argument_list|>
argument_list|(
name|StlStableSortHelper
argument_list|<
name|TestInt
argument_list|>
argument_list|()
argument_list|,
name|dataSetTypes
argument_list|)
expr_stmt|;
comment|/*     cout<< endl<< "Sorting lists of ints"<< endl;     cout<< endl<< "Quick sort"<< endl;     testAlgorithm<QuickSortHelper<int>, int>(QuickSortHelper<int>(), dataSetTypes);     cout<< endl<< "std::sort"<< endl;     testAlgorithm<StlSortHelper<int>, int>(StlSortHelper<int>(), dataSetTypes);     cout<< endl<< "std::stable_sort"<< endl;     testAlgorithm<StlStableSortHelper<int>, int>(StlStableSortHelper<int>(), dataSetTypes); */
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qCountIterators
name|void
name|tst_QAlgorithms
operator|::
name|qCountIterators
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|3
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|8
expr_stmt|;
block|{
name|int
name|countOf7
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|7
argument_list|,
name|countOf7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf3
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|3
argument_list|,
name|countOf3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf6
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|6
argument_list|,
name|countOf6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf6
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf8
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|8
argument_list|,
name|countOf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf8
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* Check that we add to the count, not set it. */
block|{
name|int
name|countOf8
init|=
literal|5
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
operator|.
name|begin
argument_list|()
argument_list|,
name|list
operator|.
name|end
argument_list|()
argument_list|,
literal|8
argument_list|,
name|countOf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf8
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qCountContainer
name|void
name|tst_QAlgorithms
operator|::
name|qCountContainer
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|3
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|8
expr_stmt|;
block|{
name|int
name|countOf7
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
argument_list|,
literal|7
argument_list|,
name|countOf7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf3
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
argument_list|,
literal|3
argument_list|,
name|countOf3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf6
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
argument_list|,
literal|6
argument_list|,
name|countOf6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf6
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|countOf8
init|=
literal|0
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
argument_list|,
literal|8
argument_list|,
name|countOf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf8
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/* Check that we add to the count, not set it. */
block|{
name|int
name|countOf8
init|=
literal|5
decl_stmt|;
operator|::
name|qCount
argument_list|(
name|list
argument_list|,
literal|8
argument_list|,
name|countOf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|countOf8
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|RAI
class|class
name|RAI
block|{
public|public:
DECL|function|RAI
name|RAI
parameter_list|(
name|int
name|searched
init|=
literal|5
parameter_list|,
name|int
name|hidePos
init|=
literal|4
parameter_list|,
name|int
name|len
init|=
literal|10
parameter_list|)
member_init_list|:
name|curPos_
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|length_
argument_list|(
name|len
argument_list|)
member_init_list|,
name|searchedVal_
argument_list|(
name|searched
argument_list|)
member_init_list|,
name|searchedValPos_
argument_list|(
name|hidePos
argument_list|)
block|{     }
DECL|function|at
name|int
name|at
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|pos
operator|==
name|searchedValPos_
condition|)
block|{
return|return
name|searchedVal_
return|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|<
name|searchedValPos_
condition|)
block|{
return|return
name|searchedVal_
operator|-
literal|1
return|;
block|}
return|return
name|searchedVal_
operator|+
literal|1
return|;
block|}
DECL|function|begin
name|RAI
name|begin
parameter_list|()
specifier|const
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
name|rai
operator|.
name|setCurPos
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|rai
return|;
block|}
DECL|function|end
name|RAI
name|end
parameter_list|()
specifier|const
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
name|rai
operator|.
name|setCurPos
argument_list|(
name|length_
argument_list|)
expr_stmt|;
return|return
name|rai
return|;
block|}
DECL|function|pos
name|int
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|curPos
argument_list|()
return|;
block|}
DECL|function|size
name|int
name|size
parameter_list|()
specifier|const
block|{
return|return
name|length_
return|;
block|}
DECL|function|operator +
name|RAI
name|operator
name|+
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
name|rai
operator|.
name|setCurPos
argument_list|(
name|rai
operator|.
name|curPos
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|rai
operator|.
name|curPos
argument_list|()
operator|>
name|length_
condition|)
block|{
name|rai
operator|.
name|setCurPos
argument_list|(
name|length_
argument_list|)
expr_stmt|;
block|}
return|return
name|rai
return|;
block|}
DECL|function|operator -
name|RAI
name|operator
name|-
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
name|rai
operator|.
name|setCurPos
argument_list|(
name|rai
operator|.
name|curPos
argument_list|()
operator|-
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|rai
operator|.
name|curPos
argument_list|()
operator|<
literal|0
condition|)
block|{
name|rai
operator|.
name|setCurPos
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|rai
return|;
block|}
DECL|function|operator -
name|int
name|operator
name|-
parameter_list|(
specifier|const
name|RAI
modifier|&
name|it
parameter_list|)
specifier|const
block|{
return|return
name|curPos
argument_list|()
operator|-
name|it
operator|.
name|curPos
argument_list|()
return|;
block|}
DECL|function|operator +=
name|RAI
modifier|&
name|operator
name|+=
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|curPos
argument_list|()
operator|>
name|length_
condition|)
block|{
name|setCurPos
argument_list|(
name|length_
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator -=
name|RAI
modifier|&
name|operator
name|-=
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|-
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|curPos
argument_list|()
operator|<
literal|0
condition|)
block|{
name|setCurPos
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator ++
name|RAI
modifier|&
name|operator
name|++
parameter_list|()
block|{
if|if
condition|(
name|curPos
argument_list|()
operator|<
name|length_
condition|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator ++
name|RAI
name|operator
name|++
parameter_list|(
name|int
parameter_list|)
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
if|if
condition|(
name|curPos
argument_list|()
operator|<
name|length_
condition|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|rai
return|;
block|}
DECL|function|operator --
name|RAI
modifier|&
name|operator
name|--
parameter_list|()
block|{
if|if
condition|(
name|curPos
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
DECL|function|operator --
name|RAI
name|operator
name|--
parameter_list|(
name|int
parameter_list|)
block|{
name|RAI
name|rai
init|=
operator|*
name|this
decl_stmt|;
if|if
condition|(
name|curPos
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setCurPos
argument_list|(
name|curPos
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|rai
return|;
block|}
DECL|function|operator ==
name|bool
name|operator
name|==
parameter_list|(
specifier|const
name|RAI
modifier|&
name|rai
parameter_list|)
specifier|const
block|{
return|return
name|rai
operator|.
name|curPos
argument_list|()
operator|==
name|curPos
argument_list|()
return|;
block|}
DECL|function|operator !=
name|bool
name|operator
name|!=
parameter_list|(
specifier|const
name|RAI
modifier|&
name|rai
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|operator
name|==
argument_list|(
name|rai
argument_list|)
return|;
block|}
DECL|function|operator *
name|int
name|operator
name|*
parameter_list|()
specifier|const
block|{
return|return
name|at
argument_list|(
name|curPos
argument_list|()
argument_list|)
return|;
block|}
DECL|function|operator []
name|int
name|operator
name|[]
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
private|private:
DECL|function|curPos
name|int
name|curPos
parameter_list|()
specifier|const
block|{
return|return
name|curPos_
return|;
block|}
DECL|function|setCurPos
name|void
name|setCurPos
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|curPos_
operator|=
name|pos
expr_stmt|;
block|}
DECL|member|curPos_
name|int
name|curPos_
decl_stmt|;
DECL|member|length_
name|int
name|length_
decl_stmt|;
DECL|member|searchedVal_
name|int
name|searchedVal_
decl_stmt|;
DECL|member|searchedValPos_
name|int
name|searchedValPos_
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|binaryFindOnLargeContainer
name|void
name|tst_QAlgorithms
operator|::
name|binaryFindOnLargeContainer
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|len
init|=
literal|2
operator|*
literal|1000
operator|*
literal|1000
operator|*
literal|537
decl_stmt|;
specifier|const
name|int
name|pos
init|=
name|len
operator|-
literal|12345
decl_stmt|;
name|RAI
name|rai
argument_list|(
literal|5
argument_list|,
name|pos
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|RAI
name|foundIt
init|=
name|qBinaryFind
argument_list|(
name|rai
operator|.
name|begin
argument_list|()
argument_list|,
name|rai
operator|.
name|end
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|foundIt
operator|.
name|pos
argument_list|()
argument_list|,
literal|1073987655
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QAlgorithms
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qalgorithms.moc"
end_include
end_unit
