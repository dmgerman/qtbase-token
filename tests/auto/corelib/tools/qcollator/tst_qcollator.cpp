begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_include
include|#
directive|include
file|<qcollator.h>
end_include
begin_include
include|#
directive|include
file|<cstring>
end_include
begin_class
DECL|class|tst_QCollator
class|class
name|tst_QCollator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|moveSemantics
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|state
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
end_ifdef
begin_function
DECL|function|dpointer_is_null
specifier|static
name|bool
name|dpointer_is_null
parameter_list|(
name|QCollator
modifier|&
name|c
parameter_list|)
block|{
name|char
name|mem
index|[
sizeof|sizeof
name|c
index|]
decl_stmt|;
using|using
namespace|namespace
name|std
namespace|;
name|memcpy
argument_list|(
name|mem
argument_list|,
operator|&
name|c
argument_list|,
sizeof|sizeof
name|c
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
name|c
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|mem
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|moveSemantics
name|void
name|tst_QCollator
operator|::
name|moveSemantics
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_RVALUE_REFS
specifier|const
name|QLocale
name|de_AT
argument_list|(
name|QLocale
operator|::
name|German
argument_list|,
name|QLocale
operator|::
name|Austria
argument_list|)
decl_stmt|;
name|QCollator
name|c1
argument_list|(
name|de_AT
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|locale
argument_list|()
argument_list|,
name|de_AT
argument_list|)
expr_stmt|;
name|QCollator
name|c2
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|c1
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|locale
argument_list|()
argument_list|,
name|de_AT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dpointer_is_null
argument_list|(
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|c1
operator|=
name|std
operator|::
name|move
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|locale
argument_list|()
argument_list|,
name|de_AT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dpointer_is_null
argument_list|(
name|c2
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"The compiler is not in C++11 mode or does not support move semantics."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QCollator
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"s2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"caseInsensitiveResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"numericMode"
argument_list|)
expr_stmt|;
comment|/*         A few tests below are commented out on the mac. It's unclear why they fail,         as it looks like the collator for the locale is created correctly.     */
comment|/*         It's hard to test English, because it's treated differently         on different platforms. For example, on Linux, it uses the         iso14651_t1 template file, which happens to provide good         defaults for Swedish. Mac OS X seems to do a pure bytewise         comparison of Latin-1 values, although I'm not sure. So I         just test digits to make sure that it's not totally broken.     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"english5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"en_US"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test 9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test 19"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
comment|/*         In Swedish, a with ring above (E5) comes before a with         diaresis (E4), which comes before o diaresis (F6), which         all come after z.     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"swedish5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sv_SE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"19"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
comment|/*         In Norwegian, ae (E6) comes before o with stroke (D8), which         comes before a with ring above (E5).     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"norwegian1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xd8"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"norwegian2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xd8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"norwegian3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe5"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"norwegian4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"no_NO"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"19"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
comment|/*         In German, z comes *after* a with diaresis (E4),         which comes before o diaresis (F6).     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"z"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xc0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german7"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xd6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german8"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"oe"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xf6"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"A"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"german10"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"19"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
comment|/*         French sorting of e and e with accent     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"french1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fr_FR"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe9"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"e"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"french2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fr_FR"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe9t"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"et"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"french3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fr_FR"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe9"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"d"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"french4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fr_FR"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\xe9"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"f"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"french5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fr_FR"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"19"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QCollator
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|caseInsensitiveResult
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|numericMode
argument_list|)
expr_stmt|;
name|QCollator
name|collator
argument_list|(
name|locale
argument_list|)
decl_stmt|;
if|if
condition|(
name|numericMode
condition|)
name|collator
operator|.
name|setNumericMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|collator
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|collator
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|collator
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|,
name|caseInsensitiveResult
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|state
name|void
name|tst_QCollator
operator|::
name|state
parameter_list|()
block|{
name|QCollator
name|c
decl_stmt|;
name|c
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLocale
argument_list|(
name|QLocale
operator|::
name|German
argument_list|)
expr_stmt|;
name|c
operator|.
name|compare
argument_list|(
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|locale
argument_list|()
argument_list|,
name|QLocale
argument_list|(
name|QLocale
operator|::
name|German
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLocale
argument_list|(
name|QLocale
operator|::
name|French
argument_list|)
expr_stmt|;
name|c
operator|.
name|setNumericMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setIgnorePunctuation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|.
name|setLocale
argument_list|(
name|QLocale
operator|::
name|Norwegian
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|numericMode
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|ignorePunctuation
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|locale
argument_list|()
argument_list|,
name|QLocale
argument_list|(
name|QLocale
operator|::
name|Norwegian
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QCollator
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcollator.moc"
end_include
end_unit
