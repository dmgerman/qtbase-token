begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstringmatcher.h>
end_include
begin_class
DECL|class|tst_QStringMatcher
class|class
name|tst_QStringMatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|qstringmatcher
parameter_list|()
function_decl|;
name|void
name|caseSensitivity
parameter_list|()
function_decl|;
name|void
name|indexIn_data
parameter_list|()
function_decl|;
name|void
name|indexIn
parameter_list|()
function_decl|;
name|void
name|setCaseSensitivity_data
parameter_list|()
function_decl|;
name|void
name|setCaseSensitivity
parameter_list|()
function_decl|;
name|void
name|assignOperator
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Subclass that exposes the protected functions.
end_comment
begin_class
DECL|class|SubQStringMatcher
class|class
name|SubQStringMatcher
super|:
specifier|public
name|QStringMatcher
block|{
public|public:
block|}
class|;
end_class
begin_function
DECL|function|qstringmatcher
name|void
name|tst_QStringMatcher
operator|::
name|qstringmatcher
parameter_list|()
block|{
name|SubQStringMatcher
name|matcher
decl_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|pattern
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// public Qt::CaseSensitivity caseSensitivity() const
end_comment
begin_function
DECL|function|caseSensitivity
name|void
name|tst_QStringMatcher
operator|::
name|caseSensitivity
parameter_list|()
block|{
name|SubQStringMatcher
name|matcher
decl_stmt|;
name|matcher
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|caseSensitivity
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexIn_data
name|void
name|tst_QStringMatcher
operator|::
name|indexIn_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"indexIn"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|10
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
operator|-
literal|10
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"harder"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"slkdf sldkjf slakjf lskd ffools ldjf"
argument_list|)
operator|<<
literal|0
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"harder"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"slkdf sldkjf slakjf lskd ffools ldjf"
argument_list|)
operator|<<
literal|20
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"harder"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"slkdf sldkjf slakjf lskd ffools ldjf"
argument_list|)
operator|<<
literal|26
operator|<<
literal|26
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"harder"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"slkdf sldkjf slakjf lskd ffools ldjf"
argument_list|)
operator|<<
literal|27
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|indexIn
name|void
name|tst_QStringMatcher
operator|::
name|indexIn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
name|SubQStringMatcher
name|matcher
decl_stmt|;
name|matcher
operator|.
name|setPattern
argument_list|(
name|needle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
name|from
argument_list|)
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCaseSensitivity_data
name|void
name|tst_QStringMatcher
operator|::
name|setCaseSensitivity_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"haystack"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"from"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"indexIn"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"cs"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overshot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"baFooz foo bar"
argument_list|)
operator|<<
literal|14
operator|<<
operator|-
literal|1
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|CaseSensitive
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sensitive"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"baFooz foo bar"
argument_list|)
operator|<<
literal|1
operator|<<
literal|7
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|CaseSensitive
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insensitive"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"baFooz foo bar"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
operator|<<
operator|(
name|int
operator|)
name|Qt
operator|::
name|CaseInsensitive
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCaseSensitivity
name|void
name|tst_QStringMatcher
operator|::
name|setCaseSensitivity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|haystack
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|SubQStringMatcher
name|matcher
decl_stmt|;
name|matcher
operator|.
name|setPattern
argument_list|(
name|needle
argument_list|)
expr_stmt|;
name|matcher
operator|.
name|setCaseSensitivity
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CaseSensitivity
argument_list|>
argument_list|(
name|cs
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matcher
operator|.
name|indexIn
argument_list|(
name|haystack
argument_list|,
name|from
argument_list|)
argument_list|,
name|indexIn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignOperator
name|void
name|tst_QStringMatcher
operator|::
name|assignOperator
parameter_list|()
block|{
name|QString
name|needle
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|QString
name|hayStack
argument_list|(
literal|"abcdef"
argument_list|)
decl_stmt|;
name|QStringMatcher
name|m1
argument_list|(
name|needle
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m1
operator|.
name|indexIn
argument_list|(
name|hayStack
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QStringMatcher
name|m2
init|=
name|m1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m2
operator|.
name|pattern
argument_list|()
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m2
operator|.
name|indexIn
argument_list|(
name|hayStack
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QStringMatcher
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstringmatcher.moc"
end_include
end_unit
