begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz<marc.mutz@kdab.com> ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QPair>
end_include
begin_class
DECL|class|tst_QPair
class|class
name|tst_QPair
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
DECL|function|dummy
name|void
name|dummy
parameter_list|()
block|{}
block|}
class|;
end_class
begin_class
DECL|class|C
DECL|member|_
class|class
name|C
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|M
DECL|member|_
class|class
name|M
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|P
DECL|member|_
class|class
name|P
block|{
name|char
name|_
index|[
literal|4
index|]
decl_stmt|;
block|}
class|;
end_class
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|M
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|P
argument_list|,
name|Q_PRIMITIVE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_comment
comment|// avoid the comma:
end_comment
begin_typedef
DECL|typedef|QPairCC
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|C
argument_list|>
name|QPairCC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairCM
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|M
argument_list|>
name|QPairCM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairCP
typedef|typedef
name|QPair
argument_list|<
name|C
argument_list|,
name|P
argument_list|>
name|QPairCP
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMC
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|C
argument_list|>
name|QPairMC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMM
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|M
argument_list|>
name|QPairMM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairMP
typedef|typedef
name|QPair
argument_list|<
name|M
argument_list|,
name|P
argument_list|>
name|QPairMP
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPC
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|C
argument_list|>
name|QPairPC
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPM
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|M
argument_list|>
name|QPairPM
typedef|;
end_typedef
begin_typedef
DECL|typedef|QPairPP
typedef|typedef
name|QPair
argument_list|<
name|P
argument_list|,
name|P
argument_list|>
name|QPairPP
typedef|;
end_typedef
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCC
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCC
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCM
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCM
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCP
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairCP
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairMC
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairMC
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairMM
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairMM
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairMP
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairMP
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairPC
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isStatic
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairPC
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|isComplex
name|Q_STATIC_ASSERT
argument_list|(
name|QTypeInfo
argument_list|<
name|QPairPM
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairPM
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairPP
argument_list|>
operator|::
name|isComplex
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairPP
argument_list|>
operator|::
name|isStatic
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairPP
argument_list|>
operator|::
name|isDummy
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|Q_STATIC_ASSERT
argument_list|(
operator|!
name|QTypeInfo
argument_list|<
name|QPairPP
argument_list|>
operator|::
name|isPointer
argument_list|)
expr_stmt|;
end_expr_stmt
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QPair
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpair.moc"
end_include
end_unit
