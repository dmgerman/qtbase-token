begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtimezone.h>
end_include
begin_include
include|#
directive|include
file|<private/qtimezoneprivate_p.h>
end_include
begin_include
include|#
directive|include
file|<qlocale.h>
end_include
begin_class
DECL|class|tst_QTimeZone
class|class
name|tst_QTimeZone
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTimeZone
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
comment|// Public class default system tests
name|void
name|createTest
parameter_list|()
function_decl|;
name|void
name|nullTest
parameter_list|()
function_decl|;
name|void
name|dataStreamTest
parameter_list|()
function_decl|;
name|void
name|isTimeZoneIdAvailable
parameter_list|()
function_decl|;
name|void
name|availableTimeZoneIds
parameter_list|()
function_decl|;
name|void
name|stressTest
parameter_list|()
function_decl|;
name|void
name|windowsId
parameter_list|()
function_decl|;
name|void
name|isValidId_data
parameter_list|()
function_decl|;
name|void
name|isValidId
parameter_list|()
function_decl|;
comment|// Backend tests
name|void
name|utcTest
parameter_list|()
function_decl|;
name|void
name|icuTest
parameter_list|()
function_decl|;
name|void
name|tzTest
parameter_list|()
function_decl|;
name|void
name|macTest
parameter_list|()
function_decl|;
name|void
name|winTest
parameter_list|()
function_decl|;
private|private:
name|void
name|printTimeZone
parameter_list|(
specifier|const
name|QTimeZone
name|tz
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|testCetPrivate
parameter_list|(
specifier|const
name|QTimeZonePrivate
modifier|&
name|tzp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// QT_BUILD_INTERNAL
DECL|member|debug
name|bool
name|debug
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTimeZone
name|tst_QTimeZone
operator|::
name|tst_QTimeZone
parameter_list|()
block|{
comment|// Set to true to print debug output, test Display Names and run long stress tests
name|debug
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|printTimeZone
name|void
name|tst_QTimeZone
operator|::
name|printTimeZone
parameter_list|(
specifier|const
name|QTimeZone
name|tz
parameter_list|)
block|{
name|QDateTime
name|now
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|QDateTime
name|jan
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|jun
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Time Zone               = "
operator|<<
name|tz
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Is Valid                = "
operator|<<
name|tz
operator|.
name|isValid
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Zone ID                 = "
operator|<<
name|tz
operator|.
name|id
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Country                 = "
operator|<<
name|QLocale
operator|::
name|countryToString
argument_list|(
name|tz
operator|.
name|country
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Comment                 = "
operator|<<
name|tz
operator|.
name|comment
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Locale                  = "
operator|<<
name|QLocale
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long               = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short              = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset             = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long DST           = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short DST          = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset DST         = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long Generic       = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short Generic      = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset Generic     = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|QLocale
name|locale
init|=
name|QLocale
argument_list|(
name|QStringLiteral
argument_list|(
literal|"de_DE"
argument_list|)
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Locale                  = "
operator|<<
name|locale
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long               = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short              = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset             = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long DST           = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short DST          = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset DST         = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Long Generic       = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Short Generic      = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Name Offset Generic     = "
operator|<<
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Abbreviation Now        = "
operator|<<
name|tz
operator|.
name|abbreviation
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Abbreviation on 1 Jan   = "
operator|<<
name|tz
operator|.
name|abbreviation
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Abbreviation on 1 June  = "
operator|<<
name|tz
operator|.
name|abbreviation
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Offset on 1 January     = "
operator|<<
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Offset on 1 June        = "
operator|<<
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Offset Now              = "
operator|<<
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"UTC Offset Now          = "
operator|<<
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"UTC Offset on 1 January = "
operator|<<
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"UTC Offset on 1 June    = "
operator|<<
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DST Offset on 1 January = "
operator|<<
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DST Offset on 1 June    = "
operator|<<
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DST Offset Now          = "
operator|<<
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Has DST                 = "
operator|<<
name|tz
operator|.
name|hasDaylightTime
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Is DST Now              = "
operator|<<
name|tz
operator|.
name|isDaylightTime
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Is DST on 1 January     = "
operator|<<
name|tz
operator|.
name|isDaylightTime
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Is DST on 1 June        = "
operator|<<
name|tz
operator|.
name|isDaylightTime
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Has Transitions         = "
operator|<<
name|tz
operator|.
name|hasTransitions
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Transition after 1 Jan  = "
operator|<<
name|tz
operator|.
name|nextTransition
argument_list|(
name|jan
argument_list|)
operator|.
name|atUtc
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Transition after 1 Jun  = "
operator|<<
name|tz
operator|.
name|nextTransition
argument_list|(
name|jun
argument_list|)
operator|.
name|atUtc
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Transition before 1 Jan = "
operator|<<
name|tz
operator|.
name|previousTransition
argument_list|(
name|jan
argument_list|)
operator|.
name|atUtc
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Transition before 1 Jun = "
operator|<<
name|tz
operator|.
name|previousTransition
argument_list|(
name|jun
argument_list|)
operator|.
name|atUtc
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createTest
name|void
name|tst_QTimeZone
operator|::
name|createTest
parameter_list|()
block|{
name|QTimeZone
name|tz
argument_list|(
literal|"Pacific/Auckland"
argument_list|)
decl_stmt|;
if|if
condition|(
name|debug
condition|)
name|printTimeZone
argument_list|(
name|tz
argument_list|)
expr_stmt|;
comment|// If the tz is not valid then skip as is probably using the UTC backend which is tested later
if|if
condition|(
operator|!
name|tz
operator|.
name|isValid
argument_list|()
condition|)
return|return;
comment|// Validity tests
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Comparison tests
name|QTimeZone
name|tz2
argument_list|(
literal|"Pacific/Auckland"
argument_list|)
decl_stmt|;
name|QTimeZone
name|tz3
argument_list|(
literal|"Australia/Sydney"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|tz
operator|==
name|tz2
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|tz
operator|!=
name|tz2
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|tz
operator|==
name|tz3
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|tz
operator|!=
name|tz3
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|NewZealand
argument_list|)
expr_stmt|;
name|QDateTime
name|jan
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|jun
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|janPrev
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2011
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|46800
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|hasDaylightTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isDaylightTime
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isDaylightTime
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Only test transitions if host system supports them
if|if
condition|(
name|tz
operator|.
name|hasTransitions
argument_list|()
condition|)
block|{
name|QTimeZone
operator|::
name|OffsetData
name|tran
init|=
name|tz
operator|.
name|nextTransition
argument_list|(
name|jan
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atUtc
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|1333202400000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tz
operator|.
name|nextTransition
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atUtc
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|1348927200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|46800
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tz
operator|.
name|previousTransition
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atUtc
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|1316872800000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|46800
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tz
operator|.
name|previousTransition
argument_list|(
name|jun
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atUtc
operator|.
name|toMSecsSinceEpoch
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|1333202400000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|43200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTimeZone
operator|::
name|OffsetDataList
name|expected
decl_stmt|;
name|tran
operator|.
name|atUtc
operator|=
name|QDateTime
operator|::
name|fromMSecsSinceEpoch
argument_list|(
literal|1301752800000
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|tran
operator|.
name|offsetFromUtc
operator|=
literal|46800
expr_stmt|;
name|tran
operator|.
name|standardTimeOffset
operator|=
literal|43200
expr_stmt|;
name|tran
operator|.
name|daylightTimeOffset
operator|=
literal|3600
expr_stmt|;
name|expected
operator|<<
name|tran
expr_stmt|;
name|tran
operator|.
name|atUtc
operator|=
name|QDateTime
operator|::
name|fromMSecsSinceEpoch
argument_list|(
literal|1316872800000
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|tran
operator|.
name|offsetFromUtc
operator|=
literal|43200
expr_stmt|;
name|tran
operator|.
name|standardTimeOffset
operator|=
literal|43200
expr_stmt|;
name|tran
operator|.
name|daylightTimeOffset
operator|=
literal|0
expr_stmt|;
name|expected
operator|<<
name|tran
expr_stmt|;
name|QTimeZone
operator|::
name|OffsetDataList
name|result
init|=
name|tz
operator|.
name|transitions
argument_list|(
name|janPrev
argument_list|,
name|jan
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|>
name|expected
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|atUtc
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|atUtc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|offsetFromUtc
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|offsetFromUtc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|standardTimeOffset
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|standardTimeOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|daylightTimeOffset
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|daylightTimeOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|nullTest
name|void
name|tst_QTimeZone
operator|::
name|nullTest
parameter_list|()
block|{
name|QTimeZone
name|nullTz1
decl_stmt|;
name|QTimeZone
name|nullTz2
decl_stmt|;
name|QTimeZone
name|utc
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
comment|// Validity tests
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz2
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|utc
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Comparison tests
name|QCOMPARE
argument_list|(
operator|(
name|nullTz1
operator|==
name|nullTz2
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|nullTz1
operator|!=
name|nullTz2
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|nullTz1
operator|==
name|utc
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|nullTz1
operator|!=
name|utc
operator|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Assignment tests
name|nullTz2
operator|=
name|utc
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz2
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|utc
operator|=
name|nullTz1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|utc
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QDateTime
name|jan
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|jun
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|janPrev
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2011
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|abbreviation
argument_list|(
name|jan
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|displayName
argument_list|(
name|jan
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|offsetFromUtc
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|offsetFromUtc
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|standardTimeOffset
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|standardTimeOffset
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|daylightTimeOffset
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|daylightTimeOffset
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|hasDaylightTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|isDaylightTime
argument_list|(
name|jan
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|isDaylightTime
argument_list|(
name|jun
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTimeZone
operator|::
name|OffsetData
name|data
init|=
name|nullTz1
operator|.
name|offsetData
argument_list|(
name|jan
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|atUtc
argument_list|,
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|offsetFromUtc
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|standardTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|daylightTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullTz1
operator|.
name|hasTransitions
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|data
operator|=
name|nullTz1
operator|.
name|nextTransition
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|atUtc
argument_list|,
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|offsetFromUtc
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|standardTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|daylightTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|=
name|nullTz1
operator|.
name|previousTransition
argument_list|(
name|jan
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|atUtc
argument_list|,
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|offsetFromUtc
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|standardTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|daylightTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataStreamTest
name|void
name|tst_QTimeZone
operator|::
name|dataStreamTest
parameter_list|()
block|{
comment|// Test the OffsetFromUtc backend serialization
name|QTimeZone
name|tz1
argument_list|(
literal|"QST"
argument_list|,
literal|123456
argument_list|,
literal|"Qt Standard Time"
argument_list|,
literal|"QST"
argument_list|,
name|QLocale
operator|::
name|Norway
argument_list|,
literal|"Qt Testing"
argument_list|)
decl_stmt|;
name|QByteArray
name|tmp
decl_stmt|;
block|{
name|QDataStream
name|ds
argument_list|(
operator|&
name|tmp
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|ds
operator|<<
name|tz1
expr_stmt|;
block|}
name|QTimeZone
name|tz2
argument_list|(
literal|"UTC"
argument_list|)
decl_stmt|;
block|{
name|QDataStream
name|ds
argument_list|(
operator|&
name|tmp
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|ds
operator|>>
name|tz2
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Qt Testing"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|Norway
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|abbreviation
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"QST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Qt Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Qt Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|offsetFromUtc
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
argument_list|,
literal|123456
argument_list|)
expr_stmt|;
comment|// Test the system backend serialization
name|tz1
operator|=
name|QTimeZone
argument_list|(
literal|"Pacific/Auckland"
argument_list|)
expr_stmt|;
comment|// If not valid then probably using the UTC system backend so skip
if|if
condition|(
operator|!
name|tz1
operator|.
name|isValid
argument_list|()
condition|)
return|return;
block|{
name|QDataStream
name|ds
argument_list|(
operator|&
name|tmp
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|ds
operator|<<
name|tz1
expr_stmt|;
block|}
name|tz2
operator|=
name|QTimeZone
argument_list|(
literal|"UTC"
argument_list|)
expr_stmt|;
block|{
name|QDataStream
name|ds
argument_list|(
operator|&
name|tmp
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|ds
operator|>>
name|tz2
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|tz2
operator|.
name|id
argument_list|()
argument_list|,
name|tz1
operator|.
name|id
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTimeZoneIdAvailable
name|void
name|tst_QTimeZone
operator|::
name|isTimeZoneIdAvailable
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|available
init|=
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|id
decl|,
name|available
control|)
name|QVERIFY
argument_list|(
name|QTimeZone
operator|::
name|isTimeZoneIdAvailable
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
comment|// a-z, A-Z, 0-9, '.', '-', '_' are valid chars
comment|// Can't start with '-'
comment|// Parts separated by '/', each part min 1 and max of 14 chars
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"az"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"AZ"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"09"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a/z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a.z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a-z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a_z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|".z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"_z"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"12345678901234"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"12345678901234/12345678901234"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a z"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a\\z"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"a,z"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"/z"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"-z"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"123456789012345"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"123456789012345/12345678901234"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
literal|"12345678901234/123456789012345"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|availableTimeZoneIds
name|void
name|tst_QTimeZone
operator|::
name|availableTimeZoneIds
parameter_list|()
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Available Time Zones"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Available Time Zones in the US"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|(
name|QLocale
operator|::
name|UnitedStates
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Available Time Zones with UTC Offset 0"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|""
expr_stmt|;
block|}
else|else
block|{
comment|//Just test the calls work, we cannot know what any test machine has available
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|listAll
init|=
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|listUs
init|=
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|(
name|QLocale
operator|::
name|UnitedStates
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|listZero
init|=
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stressTest
name|void
name|tst_QTimeZone
operator|::
name|stressTest
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|idList
init|=
name|QTimeZone
operator|::
name|availableTimeZoneIds
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|id
decl|,
name|idList
control|)
block|{
name|QTimeZone
name|testZone
init|=
name|QTimeZone
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|testZone
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testZone
operator|.
name|id
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|QDateTime
name|testDate
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2015
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|testZone
operator|.
name|country
argument_list|()
expr_stmt|;
name|testZone
operator|.
name|comment
argument_list|()
expr_stmt|;
name|testZone
operator|.
name|displayName
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|abbreviation
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|offsetFromUtc
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|standardTimeOffset
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|daylightTimeOffset
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|hasDaylightTime
argument_list|()
expr_stmt|;
name|testZone
operator|.
name|isDaylightTime
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|offsetData
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|hasTransitions
argument_list|()
expr_stmt|;
name|testZone
operator|.
name|nextTransition
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|previousTransition
argument_list|(
name|testDate
argument_list|)
expr_stmt|;
comment|// Dates known to be outside possible tz file pre-calculated rules range
name|QDateTime
name|lowDate1
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1800
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|lowDate2
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1800
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|highDate1
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2200
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|QDateTime
name|highDate2
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2200
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
decl_stmt|;
name|testZone
operator|.
name|nextTransition
argument_list|(
name|lowDate1
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|nextTransition
argument_list|(
name|lowDate2
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|previousTransition
argument_list|(
name|lowDate2
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|previousTransition
argument_list|(
name|lowDate2
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|nextTransition
argument_list|(
name|highDate1
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|nextTransition
argument_list|(
name|highDate2
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|previousTransition
argument_list|(
name|highDate1
argument_list|)
expr_stmt|;
name|testZone
operator|.
name|previousTransition
argument_list|(
name|highDate2
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
comment|// This could take a long time, depending on platform and database
name|qDebug
argument_list|()
operator|<<
literal|"Stress test calculating transistions for"
operator|<<
name|testZone
operator|.
name|id
argument_list|()
expr_stmt|;
name|testZone
operator|.
name|transitions
argument_list|(
name|lowDate1
argument_list|,
name|highDate1
argument_list|)
expr_stmt|;
block|}
name|testDate
operator|.
name|setTimeZone
argument_list|(
name|testZone
argument_list|)
expr_stmt|;
name|testDate
operator|.
name|isValid
argument_list|()
expr_stmt|;
name|testDate
operator|.
name|offsetFromUtc
argument_list|()
expr_stmt|;
name|testDate
operator|.
name|timeZoneAbbreviation
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowsId
name|void
name|tst_QTimeZone
operator|::
name|windowsId
parameter_list|()
block|{
comment|/*     Current Windows zones for "Central Standard Time":     Region      IANA Id(s)     Default     "America/Chicago"     Canada      "America/Winnipeg America/Rainy_River America/Rankin_Inlet America/Resolute"     Mexico      "America/Matamoros"     USA         "America/Chicago America/Indiana/Knox America/Indiana/Tell_City America/Menominee"                 "America/North_Dakota/Beulah America/North_Dakota/Center"                 "America/North_Dakota/New_Salem"     AnyCountry  "CST6CDT" */
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|ianaIdToWindowsId
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Central Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|ianaIdToWindowsId
argument_list|(
literal|"America/Resolute"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"Central Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Partials shouldn't match
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|ianaIdToWindowsId
argument_list|(
literal|"America/Chi"
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|ianaIdToWindowsId
argument_list|(
literal|"InvalidZone"
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|ianaIdToWindowsId
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check default value
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToDefaultIanaId
argument_list|(
literal|"Central Standard Time"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"America/Chicago"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToDefaultIanaId
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|Canada
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"America/Winnipeg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToDefaultIanaId
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"CST6CDT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToDefaultIanaId
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// No country is sorted list of all zones
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
name|list
operator|<<
literal|"America/Chicago"
operator|<<
literal|"America/Indiana/Knox"
operator|<<
literal|"America/Indiana/Tell_City"
operator|<<
literal|"America/Matamoros"
operator|<<
literal|"America/Menominee"
operator|<<
literal|"America/North_Dakota/Beulah"
operator|<<
literal|"America/North_Dakota/Center"
operator|<<
literal|"America/North_Dakota/New_Salem"
operator|<<
literal|"America/Rainy_River"
operator|<<
literal|"America/Rankin_Inlet"
operator|<<
literal|"America/Resolute"
operator|<<
literal|"America/Winnipeg"
operator|<<
literal|"CST6CDT"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|// Check country with no match returns empty list
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|NewZealand
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|// Check valid country returns list in preference order
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|"America/Winnipeg"
operator|<<
literal|"America/Rainy_River"
operator|<<
literal|"America/Rankin_Inlet"
operator|<<
literal|"America/Resolute"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|Canada
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|"America/Matamoros"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|Mexico
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|"America/Chicago"
operator|<<
literal|"America/Indiana/Knox"
operator|<<
literal|"America/Indiana/Tell_City"
operator|<<
literal|"America/Menominee"
operator|<<
literal|"America/North_Dakota/Beulah"
operator|<<
literal|"America/North_Dakota/Center"
operator|<<
literal|"America/North_Dakota/New_Salem"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|UnitedStates
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|<<
literal|"CST6CDT"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
literal|"Central Standard Time"
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
comment|// Check no windowsId return empty
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
operator|::
name|windowsIdToIanaIds
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValidId_data
name|void
name|tst_QTimeZone
operator|::
name|isValidId_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
DECL|macro|TESTSET
define|#
directive|define
name|TESTSET
parameter_list|(
name|name
parameter_list|,
name|section
parameter_list|,
name|valid
parameter_list|)
define|\
value|QTest::newRow(name " front")<< QByteArray(section "/xyz/xyz")<< valid; \     QTest::newRow(name " middle")<< QByteArray("xyz/" section "/xyz")<< valid; \     QTest::newRow(name " back")<< QByteArray("xyz/xyz/" section)<< valid
name|TESTSET
argument_list|(
literal|"empty"
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"minimal"
argument_list|,
literal|"m"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"maximal"
argument_list|,
literal|"12345678901234"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"too long"
argument_list|,
literal|"123456789012345"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"bad hyphen"
argument_list|,
literal|"-hyphen"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"good hyphen"
argument_list|,
literal|"hy-phen"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char _"
argument_list|,
literal|"_"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char ."
argument_list|,
literal|"."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char :"
argument_list|,
literal|":"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char +"
argument_list|,
literal|"+"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char A"
argument_list|,
literal|"A"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char Z"
argument_list|,
literal|"Z"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char a"
argument_list|,
literal|"a"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char z"
argument_list|,
literal|"z"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char 0"
argument_list|,
literal|"0"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"valid char 9"
argument_list|,
literal|"9"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char ^"
argument_list|,
literal|"^"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char \""
argument_list|,
literal|"\""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char $"
argument_list|,
literal|"$"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char %"
argument_list|,
literal|"%"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char&"
argument_list|,
literal|"&"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char ("
argument_list|,
literal|"("
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char )"
argument_list|,
literal|")"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char ="
argument_list|,
literal|"="
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char ?"
argument_list|,
literal|"?"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char Ã"
argument_list|,
literal|"Ã"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char \\x01"
argument_list|,
literal|"\x01"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TESTSET
argument_list|(
literal|"invalid char ' '"
argument_list|,
literal|" "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
DECL|macro|TESTSET
undef|#
directive|undef
name|TESTSET
endif|#
directive|endif
comment|// QT_BUILD_INTERNAL
block|}
end_function
begin_function
DECL|function|isValidId
name|void
name|tst_QTimeZone
operator|::
name|isValidId
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZonePrivate
operator|::
name|isValidId
argument_list|(
name|input
argument_list|)
argument_list|,
name|valid
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"This test requires a Qt -developer-build."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|utcTest
name|void
name|tst_QTimeZone
operator|::
name|utcTest
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
comment|// Test default UTC constructor
name|QUtcTimeZonePrivate
name|tzp
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|offsetFromUtc
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|standardTimeOffset
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|daylightTimeOffset
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|hasDaylightTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|hasTransitions
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test create from UTC Offset
name|QDateTime
name|now
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|QTimeZone
name|tz
argument_list|(
literal|36000
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"UTC+10:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|now
argument_list|)
argument_list|,
literal|36000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|36000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test invalid UTC offset, must be in range -14 to +14 hours
name|int
name|min
init|=
operator|-
literal|14
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
name|int
name|max
init|=
literal|14
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|min
operator|-
literal|1
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|min
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|min
operator|+
literal|1
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|max
operator|-
literal|1
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|max
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTimeZone
argument_list|(
name|max
operator|+
literal|1
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test create from standard name
name|tz
operator|=
name|QTimeZone
argument_list|(
literal|"UTC+10:00"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"UTC+10:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|now
argument_list|)
argument_list|,
literal|36000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|36000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test invalid UTC ID, must be in available list
name|tz
operator|=
name|QTimeZone
argument_list|(
literal|"UTC+00:01"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test create custom zone
name|tz
operator|=
name|QTimeZone
argument_list|(
literal|"QST"
argument_list|,
literal|123456
argument_list|,
literal|"Qt Standard Time"
argument_list|,
literal|"QST"
argument_list|,
name|QLocale
operator|::
name|Norway
argument_list|,
literal|"Qt Testing"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|id
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"QST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Qt Testing"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|country
argument_list|()
argument_list|,
name|QLocale
operator|::
name|Norway
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|abbreviation
argument_list|(
name|now
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"QST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Qt Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|offsetFromUtc
argument_list|(
name|now
argument_list|)
argument_list|,
literal|123456
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|standardTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|123456
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tz
operator|.
name|daylightTimeOffset
argument_list|(
name|now
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_BUILD_INTERNAL
block|}
end_function
begin_function
DECL|function|icuTest
name|void
name|tst_QTimeZone
operator|::
name|icuTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|QT_USE_ICU
argument_list|)
comment|// Known datetimes
name|qint64
name|std
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dst
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
comment|// Test default constructor
name|QIcuTimeZonePrivate
name|tzpd
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzpd
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test invalid constructor
name|QIcuTimeZonePrivate
name|tzpi
argument_list|(
literal|"Gondwana/Erewhon"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzpi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test named constructor
name|QIcuTimeZonePrivate
name|tzp
argument_list|(
literal|"Europe/Berlin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only test names in debug mode, names used can vary by ICU version installed
if|if
condition|(
name|debug
condition|)
block|{
comment|// Test display names by type
name|QLocale
name|enUS
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Summer Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+02:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ICU C api does not support Generic Time yet, C++ api does
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Abbreviations
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|std
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|dst
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testCetPrivate
argument_list|(
name|tzp
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_USE_ICU
block|}
end_function
begin_function
DECL|function|tzTest
name|void
name|tst_QTimeZone
operator|::
name|tzTest
parameter_list|()
block|{
if|#
directive|if
name|defined
name|QT_BUILD_INTERNAL
operator|&&
name|defined
name|Q_OS_UNIX
operator|&&
operator|!
name|defined
name|Q_OS_MAC
comment|// Known datetimes
name|qint64
name|std
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dst
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
comment|// Test default constructor
name|QTzTimeZonePrivate
name|tzpd
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzpd
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test invalid constructor
name|QTzTimeZonePrivate
name|tzpi
argument_list|(
literal|"Gondwana/Erewhon"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzpi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test named constructor
name|QTzTimeZonePrivate
name|tzp
argument_list|(
literal|"Europe/Berlin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test display names by type, either ICU or abbreviation only
name|QLocale
name|enUS
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_USE_ICU
comment|// Only test names in debug mode, names used can vary by ICU version installed
if|if
condition|(
name|debug
condition|)
block|{
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Summer Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+02:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ICU C api does not support Generic Time yet, C++ api does
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
if|if
condition|(
name|debug
condition|)
block|{
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_USE_ICU
if|if
condition|(
name|debug
condition|)
block|{
comment|// Test Abbreviations
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|std
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|dst
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testCetPrivate
argument_list|(
name|tzp
argument_list|)
expr_stmt|;
comment|// Test first and last transition rule
comment|// Warning: This could vary depending on age of TZ file!
comment|// Test low date uses first rule found
comment|// Note: Depending on the OS in question, the database may be carrying the
comment|// Local Mean Time. which for Berlin is 0:53:28
name|QTimeZonePrivate
operator|::
name|Data
name|dat
init|=
name|tzp
operator|.
name|data
argument_list|(
operator|-
literal|9999999999999
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
operator|-
literal|9999999999999
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|dat
operator|.
name|abbreviation
operator|==
literal|"LMT"
condition|)
block|{
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3208
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
comment|// Test previous to low value is invalid
name|dat
operator|=
name|tzp
operator|.
name|previousTransition
argument_list|(
operator|-
literal|9999999999999
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|qint64
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
name|std
operator|::
name|numeric_limits
argument_list|<
name|int
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dat
operator|=
name|tzp
operator|.
name|nextTransition
argument_list|(
operator|-
literal|9999999999999
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
operator|-
literal|2422054408000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Known high datetimes
name|qint64
name|stdHi
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2100
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dstHi
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2100
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
comment|// Tets high dates use the POSIX rule
name|dat
operator|=
name|tzp
operator|.
name|data
argument_list|(
name|stdHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
name|stdHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|data
argument_list|(
name|dstHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
name|dstHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|previousTransition
argument_list|(
name|stdHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|4096659600000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|previousTransition
argument_list|(
name|dstHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|4109965200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|nextTransition
argument_list|(
name|stdHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|4109965200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|nextTransition
argument_list|(
name|dstHi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|4128109200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test TZ timezone vs UTC timezone for fractionary negative offset
name|QTzTimeZonePrivate
name|tztz1
argument_list|(
literal|"America/Caracas"
argument_list|)
decl_stmt|;
name|QUtcTimeZonePrivate
name|tzutc1
argument_list|(
literal|"UTC-04:30"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tztz1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tzutc1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTzTimeZonePrivate
operator|::
name|Data
name|datatz1
init|=
name|tztz1
operator|.
name|data
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QTzTimeZonePrivate
operator|::
name|Data
name|datautc1
init|=
name|tzutc1
operator|.
name|data
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|datatz1
operator|.
name|offsetFromUtc
argument_list|,
name|datautc1
operator|.
name|offsetFromUtc
argument_list|)
expr_stmt|;
comment|// Test TZ timezone vs UTC timezone for fractionary positive offset
name|QTzTimeZonePrivate
name|tztz2
argument_list|(
literal|"Asia/Calcutta"
argument_list|)
decl_stmt|;
name|QUtcTimeZonePrivate
name|tzutc2
argument_list|(
literal|"UTC+05:30"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tztz2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tzutc2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTzTimeZonePrivate
operator|::
name|Data
name|datatz2
init|=
name|tztz2
operator|.
name|data
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QTzTimeZonePrivate
operator|::
name|Data
name|datautc2
init|=
name|tzutc2
operator|.
name|data
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|datatz2
operator|.
name|offsetFromUtc
argument_list|,
name|datautc2
operator|.
name|offsetFromUtc
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_UNIX
block|}
end_function
begin_function
DECL|function|macTest
name|void
name|tst_QTimeZone
operator|::
name|macTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
comment|// Known datetimes
name|qint64
name|std
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dst
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
comment|// Test default constructor
name|QMacTimeZonePrivate
name|tzpd
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzpd
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test invalid constructor
name|QMacTimeZonePrivate
name|tzpi
argument_list|(
literal|"Gondwana/Erewhon"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzpi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test named constructor
name|QMacTimeZonePrivate
name|tzp
argument_list|(
literal|"Europe/Berlin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only test names in debug mode, names used can vary by version
if|if
condition|(
name|debug
condition|)
block|{
comment|// Test display names by type
name|QLocale
name|enUS
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Summer Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"GMT+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+02:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ICU C api does not support Generic Time yet, C++ api does
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Central European Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Germany Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Abbreviations
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|std
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CET"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|dst
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"CEST"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testCetPrivate
argument_list|(
name|tzp
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
block|}
end_function
begin_function
DECL|function|winTest
name|void
name|tst_QTimeZone
operator|::
name|winTest
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Known datetimes
name|qint64
name|std
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dst
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
comment|// Test default constructor
name|QWinTimeZonePrivate
name|tzpd
decl_stmt|;
if|if
condition|(
name|debug
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"System ID = "
operator|<<
name|tzpd
operator|.
name|id
argument_list|()
operator|<<
name|tzpd
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QLocale
argument_list|()
argument_list|)
operator|<<
name|tzpd
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|QLocale
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tzpd
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test invalid constructor
name|QWinTimeZonePrivate
name|tzpi
argument_list|(
literal|"Gondwana/Erewhon"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzpi
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test named constructor
name|QWinTimeZonePrivate
name|tzp
argument_list|(
literal|"Europe/Berlin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tzp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only test names in debug mode, names used can vary by version
if|if
condition|(
name|debug
condition|)
block|{
comment|// Test display names by type
name|QLocale
name|enUS
argument_list|(
literal|"en_US"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|StandardTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Daylight Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Daylight Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|DaylightTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+02:00"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|LongName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|ShortName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|displayName
argument_list|(
name|QTimeZone
operator|::
name|GenericTime
argument_list|,
name|QTimeZone
operator|::
name|OffsetName
argument_list|,
name|enUS
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"UTC+01:00"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test Abbreviations
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|std
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Standard Time"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|abbreviation
argument_list|(
name|dst
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"W. Europe Daylight Time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testCetPrivate
argument_list|(
name|tzp
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WIN
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_comment
comment|// Test each private produces the same basic results for CET
end_comment
begin_function
DECL|function|testCetPrivate
name|void
name|tst_QTimeZone
operator|::
name|testCetPrivate
parameter_list|(
specifier|const
name|QTimeZonePrivate
modifier|&
name|tzp
parameter_list|)
block|{
comment|// Known datetimes
name|qint64
name|std
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|dst
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|qint64
name|prev
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2011
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toMSecsSinceEpoch
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|offsetFromUtc
argument_list|(
name|std
argument_list|)
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|offsetFromUtc
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|standardTimeOffset
argument_list|(
name|std
argument_list|)
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|standardTimeOffset
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|daylightTimeOffset
argument_list|(
name|std
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|daylightTimeOffset
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|hasDaylightTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|isDaylightTime
argument_list|(
name|std
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tzp
operator|.
name|isDaylightTime
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTimeZonePrivate
operator|::
name|Data
name|dat
init|=
name|tzp
operator|.
name|data
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
name|std
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|abbreviation
argument_list|,
name|tzp
operator|.
name|abbreviation
argument_list|(
name|std
argument_list|)
argument_list|)
expr_stmt|;
name|dat
operator|=
name|tzp
operator|.
name|data
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|atMSecsSinceEpoch
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|abbreviation
argument_list|,
name|tzp
operator|.
name|abbreviation
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only test transitions if host system supports them
if|if
condition|(
name|tzp
operator|.
name|hasTransitions
argument_list|()
condition|)
block|{
name|QTimeZonePrivate
operator|::
name|Data
name|tran
init|=
name|tzp
operator|.
name|nextTransition
argument_list|(
name|std
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|1332637200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tzp
operator|.
name|nextTransition
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|1351386000000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tzp
operator|.
name|previousTransition
argument_list|(
name|std
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|1319936400000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tran
operator|=
name|tzp
operator|.
name|previousTransition
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|atMSecsSinceEpoch
argument_list|,
operator|(
name|qint64
operator|)
literal|1332637200000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|offsetFromUtc
argument_list|,
literal|7200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|standardTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tran
operator|.
name|daylightTimeOffset
argument_list|,
literal|3600
argument_list|)
expr_stmt|;
name|QTimeZonePrivate
operator|::
name|DataList
name|expected
decl_stmt|;
name|tran
operator|.
name|atMSecsSinceEpoch
operator|=
operator|(
name|qint64
operator|)
literal|1301752800000
expr_stmt|;
name|tran
operator|.
name|offsetFromUtc
operator|=
literal|7200
expr_stmt|;
name|tran
operator|.
name|standardTimeOffset
operator|=
literal|3600
expr_stmt|;
name|tran
operator|.
name|daylightTimeOffset
operator|=
literal|3600
expr_stmt|;
name|expected
operator|<<
name|tran
expr_stmt|;
name|tran
operator|.
name|atMSecsSinceEpoch
operator|=
operator|(
name|qint64
operator|)
literal|1316872800000
expr_stmt|;
name|tran
operator|.
name|offsetFromUtc
operator|=
literal|3600
expr_stmt|;
name|tran
operator|.
name|standardTimeOffset
operator|=
literal|3600
expr_stmt|;
name|tran
operator|.
name|daylightTimeOffset
operator|=
literal|0
expr_stmt|;
name|expected
operator|<<
name|tran
expr_stmt|;
name|QTimeZonePrivate
operator|::
name|DataList
name|result
init|=
name|tzp
operator|.
name|transitions
argument_list|(
name|prev
argument_list|,
name|std
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|>
name|expected
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|atMSecsSinceEpoch
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|atMSecsSinceEpoch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|offsetFromUtc
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|offsetFromUtc
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|standardTimeOffset
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|standardTimeOffset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|daylightTimeOffset
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|daylightTimeOffset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_INTERNAL
end_comment
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QTimeZone
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtimezone.moc"
end_include
end_unit
