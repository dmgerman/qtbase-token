begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2014 Olivier Goffart<ogoffart@woboq.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_qmessagehandler
class|class
name|tst_qmessagehandler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|defaultHandler
parameter_list|()
function_decl|;
name|void
name|installMessageHandler
parameter_list|()
function_decl|;
name|void
name|installMsgHandler
parameter_list|()
function_decl|;
name|void
name|installBothHandler
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|cleanupFuncinfo_data
parameter_list|()
function_decl|;
name|void
name|cleanupFuncinfo
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|qMessagePattern_data
parameter_list|()
function_decl|;
name|void
name|qMessagePattern
parameter_list|()
function_decl|;
name|void
name|setMessagePattern
parameter_list|()
function_decl|;
name|void
name|formatLogMessage_data
parameter_list|()
function_decl|;
name|void
name|formatLogMessage
parameter_list|()
function_decl|;
private|private:
DECL|member|m_appDir
name|QString
name|m_appDir
decl_stmt|;
DECL|member|m_baseEnvironment
name|QStringList
name|m_baseEnvironment
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|s_type
specifier|static
name|QtMsgType
name|s_type
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_file
specifier|const
name|char
modifier|*
name|s_file
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_line
name|int
name|s_line
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_function
specifier|const
name|char
modifier|*
name|s_function
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_message
specifier|static
name|QString
name|s_message
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|customMessageHandler
name|void
name|customMessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|s_type
operator|=
name|type
expr_stmt|;
name|s_file
operator|=
name|context
operator|.
name|file
expr_stmt|;
name|s_line
operator|=
name|context
operator|.
name|line
expr_stmt|;
name|s_function
operator|=
name|context
operator|.
name|function
expr_stmt|;
name|s_message
operator|=
name|msg
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customMsgHandler
name|void
name|customMsgHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
block|{
name|s_type
operator|=
name|type
expr_stmt|;
name|s_file
operator|=
literal|0
expr_stmt|;
name|s_line
operator|=
literal|0
expr_stmt|;
name|s_function
operator|=
literal|0
expr_stmt|;
name|s_message
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_qmessagehandler
operator|::
name|initTestCase
parameter_list|()
block|{
name|m_appDir
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|m_appDir
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Couldn't find helper app dir starting from %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
name|m_baseEnvironment
operator|=
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_baseEnvironment
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_baseEnvironment
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"QT_MESSAGE_PATTERN="
argument_list|)
condition|)
block|{
name|m_baseEnvironment
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
comment|// !QT_NO_PROCESS
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_qmessagehandler
operator|::
name|cleanup
parameter_list|()
block|{
name|qInstallMsgHandler
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|qInstallMessageHandler
argument_list|(
operator|(
name|QtMessageHandler
operator|)
literal|0
argument_list|)
expr_stmt|;
name|s_type
operator|=
name|QtFatalMsg
expr_stmt|;
name|s_file
operator|=
literal|0
expr_stmt|;
name|s_line
operator|=
literal|0
expr_stmt|;
name|s_function
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultHandler
name|void
name|tst_qmessagehandler
operator|::
name|defaultHandler
parameter_list|()
block|{
comment|// check that the default works
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"defaultHandler"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"defaultHandler"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|installMessageHandler
name|void
name|tst_qmessagehandler
operator|::
name|installMessageHandler
parameter_list|()
block|{
name|QtMessageHandler
name|oldHandler
init|=
name|qInstallMessageHandler
argument_list|(
name|customMessageHandler
argument_list|)
decl_stmt|;
name|qDebug
argument_list|(
literal|"installMessageHandler"
argument_list|)
expr_stmt|;
name|int
name|line
init|=
name|__LINE__
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s_type
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_message
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
literal|"installMessageHandler"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_file
argument_list|,
name|__FILE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_function
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QtMessageHandler
name|myHandler
init|=
name|qInstallMessageHandler
argument_list|(
name|oldHandler
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|void
operator|*
operator|)
name|myHandler
argument_list|,
operator|(
name|void
operator|*
operator|)
name|customMessageHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|installMsgHandler
name|void
name|tst_qmessagehandler
operator|::
name|installMsgHandler
parameter_list|()
block|{
name|QtMsgHandler
name|oldHandler
init|=
name|qInstallMsgHandler
argument_list|(
name|customMsgHandler
argument_list|)
decl_stmt|;
name|qDebug
argument_list|(
literal|"installMsgHandler"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_type
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_message
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
literal|"installMsgHandler"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_file
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_function
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QtMsgHandler
name|myHandler
init|=
name|qInstallMsgHandler
argument_list|(
name|oldHandler
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|void
operator|*
operator|)
name|myHandler
argument_list|,
operator|(
name|void
operator|*
operator|)
name|customMsgHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|installBothHandler
name|void
name|tst_qmessagehandler
operator|::
name|installBothHandler
parameter_list|()
block|{
name|qInstallMessageHandler
argument_list|(
name|customMessageHandler
argument_list|)
expr_stmt|;
name|qInstallMsgHandler
argument_list|(
name|customMsgHandler
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"installBothHandler"
argument_list|)
expr_stmt|;
name|int
name|line
init|=
name|__LINE__
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s_type
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_message
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
literal|"installBothHandler"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_file
argument_list|,
name|__FILE__
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_function
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|ADD
define|#
directive|define
name|ADD
parameter_list|(
name|x
parameter_list|)
value|QTest::newRow(x)<< Q_FUNC_INFO<< x;
end_define
begin_class
DECL|class|TestClass1
class|class
name|TestClass1
block|{
public|public:
DECL|enum|Something
DECL|enumerator|foo
enum|enum
name|Something
block|{
name|foo
block|}
enum|;
DECL|member|c
name|char
name|c
decl_stmt|;
DECL|function|func_void
name|void
name|func_void
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_void"
argument_list|)
expr_stmt|;
block|}
DECL|function|func_int
name|int
name|func_int
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_int"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_unsigned
name|unsigned
name|func_unsigned
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_unsigned"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_long
name|long
name|func_long
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_long"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_ll
name|long
name|long
name|func_ll
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_ll"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_ull
name|unsigned
name|long
name|long
name|func_ull
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_ull"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_char
name|char
name|func_char
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_char"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_schar
name|signed
name|char
name|func_schar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_schar"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_uchar
name|unsigned
name|char
name|func_uchar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_uchar"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_Rchar
name|char
modifier|&
name|func_Rchar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_Rchar"
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
DECL|function|func_Pchar
name|char
modifier|*
name|func_Pchar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_Pchar"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_KPchar
specifier|const
name|char
modifier|*
name|func_KPchar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_KPchar"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_VKPchar
specifier|const
specifier|volatile
name|char
modifier|*
name|func_VKPchar
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_VKPchar"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_KVPKVull
specifier|const
specifier|volatile
name|unsigned
name|long
name|long
modifier|*
specifier|const
specifier|volatile
name|func_KVPKVull
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_KVPKVull"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_KPKVvoid
specifier|const
name|void
modifier|*
specifier|const
specifier|volatile
modifier|*
name|func_KPKVvoid
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_KPKVvoid"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_ai
name|QList
argument_list|<
name|int
argument_list|>
name|func_ai
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_ai"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
DECL|function|func_aptr
name|QList
argument_list|<
name|unsigned
name|long
name|long
specifier|const
specifier|volatile
operator|*
argument_list|>
name|func_aptr
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_aptr"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|unsigned
name|long
name|long
specifier|const
specifier|volatile
operator|*
argument_list|>
argument_list|()
return|;
block|}
DECL|function|func_aenum
name|QList
argument_list|<
name|Something
argument_list|>
name|func_aenum
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_aenum"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|Something
argument_list|>
argument_list|()
return|;
block|}
DECL|function|func_aaptr
name|QList
argument_list|<
name|QList
argument_list|<
specifier|const
name|void
modifier|*
argument_list|>
argument_list|>
name|func_aaptr
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_aaptr"
argument_list|)
expr_stmt|;
return|return
name|QList
argument_list|<
name|QList
argument_list|<
specifier|const
name|void
operator|*
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
DECL|function|func_ienummap
name|QMap
argument_list|<
name|int
argument_list|,
name|Something
argument_list|>
name|func_ienummap
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_ienummap"
argument_list|)
expr_stmt|;
return|return
name|QMap
argument_list|<
name|int
argument_list|,
name|Something
argument_list|>
argument_list|()
return|;
block|}
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|func_template1
name|T
modifier|*
name|func_template1
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_template1"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
template|template
parameter_list|<
name|Something
name|val
parameter_list|>
DECL|function|func_template2
name|long
name|func_template2
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_template2"
argument_list|)
expr_stmt|;
return|return
name|long
argument_list|(
name|val
argument_list|)
return|;
block|}
DECL|typedef|fptr
typedef|typedef
name|unsigned
name|long
name|long
modifier|*
function_decl|(
modifier|*
name|fptr
function_decl|)
parameter_list|()
function_decl|;
DECL|typedef|pmf
typedef|typedef
name|unsigned
name|long
name|long
modifier|*
function_decl|(
name|TestClass1
operator|::
modifier|*
name|pmf
function_decl|)
parameter_list|()
function_decl|;
DECL|typedef|uglypmf
typedef|typedef
name|fptr
function_decl|(
name|TestClass1
operator|::
modifier|*
name|uglypmf
function_decl|)
parameter_list|()
function_decl|;
DECL|function|func_fptr
name|fptr
name|func_fptr
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_fptr"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_pmf
name|pmf
name|func_pmf
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_pmf"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_uglypmf
name|uglypmf
name|func_uglypmf
parameter_list|(
name|uglypmf
init|=
literal|0
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_uglypmf"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|func_uglypmf2
name|QMap
argument_list|<
name|QString
argument_list|,
name|uglypmf
argument_list|>
name|func_uglypmf2
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::func_uglypmf2"
argument_list|)
expr_stmt|;
return|return
name|QMap
argument_list|<
name|QString
argument_list|,
name|uglypmf
argument_list|>
argument_list|()
return|;
block|}
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator()"
argument_list|)
expr_stmt|;
block|}
DECL|function|operator <
name|int
name|operator
name|<
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator<"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator >
name|int
name|operator
name|>
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator>"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator <=
name|int
name|operator
name|<=
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator<="
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator >=
name|int
name|operator
name|>=
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator>="
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator =
name|int
name|operator
name|=
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator="
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator +
name|int
name|operator
name|+
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator+"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator -
name|int
name|operator
name|-
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator-"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator *
name|int
name|operator
name|*
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator*"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator /
name|int
name|operator
name|/
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator/"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator %
name|int
name|operator
name|%
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator%"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|member|x
name|int
name|x
decl_stmt|;
DECL|function|operator ++
name|int
modifier|&
name|operator
name|++
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator++"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|operator ++
name|int
name|operator
name|++
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator++"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|operator --
name|int
modifier|&
name|operator
name|--
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator--"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|operator --
name|int
name|operator
name|--
parameter_list|(
name|int
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::operator--"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|nested_struct
name|int
name|nested_struct
parameter_list|()
block|{
struct|struct
name|Nested
block|{
name|void
name|nested
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::nested_struct"
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
name|Nested
argument_list|()
operator|.
name|nested
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|nested_struct_const
name|int
name|nested_struct_const
parameter_list|()
specifier|const
block|{
struct|struct
name|Nested
block|{
name|void
name|nested
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass1::nested_struct_const"
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
name|Nested
argument_list|()
operator|.
name|nested
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
ifdef|#
directive|ifdef
name|Q_COMPILER_REF_QUALIFIERS
DECL|function|lvalue
name|int
name|lvalue
parameter_list|()
ref_qualifier|&
block|{
name|ADD
argument_list|(
literal|"TestClass1::lvalue"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|const_lvalue
name|int
name|const_lvalue
parameter_list|()
specifier|const
ref_qualifier|&
block|{
name|ADD
argument_list|(
literal|"TestClass1::const_lvalue"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|rvalue
name|int
name|rvalue
parameter_list|()
ref_qualifier|&&
block|{
name|ADD
argument_list|(
literal|"TestClass1::rvalue"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|const_rvalue
name|int
name|const_rvalue
parameter_list|()
specifier|const
ref_qualifier|&&
block|{
name|ADD
argument_list|(
literal|"TestClass1::const_rvalue"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_COMPILER_DECLTYPE
DECL|function|decltype_param
name|int
name|decltype_param
parameter_list|(
name|int
name|x
init|=
literal|0
parameter_list|,
decltype|decltype
argument_list|(
name|x
argument_list|)
init|=
literal|0
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::decltype_param"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|decltype_template_param
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|int
name|decltype_template_param
parameter_list|(
name|T
name|x
init|=
literal|0
parameter_list|,
decltype|decltype
argument_list|(
name|x
argument_list|)
init|=
literal|0
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::decltype_template_param"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|decltype_template_param2
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|decltype_template_param2
parameter_list|(
name|T
name|x
parameter_list|,
decltype|decltype
argument_list|(
name|x
operator|+
name|QString
argument_list|()
argument_list|)
parameter_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::decltype_template_param2"
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_COMPILER_AUTO_FUNCTION
DECL|function|decltype
name|auto
name|decltype_return
parameter_list|(
name|int
name|x
init|=
literal|0
parameter_list|)
function|->
decltype|decltype
argument_list|(
name|x
argument_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::decltype_return"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
DECL|function|decltype
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|auto
name|decltype_template_return
parameter_list|(
name|T
name|x
init|=
literal|0
parameter_list|)
function|->
decltype|decltype
argument_list|(
name|x
argument_list|)
block|{
name|ADD
argument_list|(
literal|"TestClass1::decltype_template_return"
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
endif|#
directive|endif
endif|#
directive|endif
public|public:
DECL|function|TestClass1
name|TestClass1
parameter_list|()
block|{
comment|// instantiate
name|func_void
argument_list|()
expr_stmt|;
name|func_int
argument_list|()
expr_stmt|;
name|func_unsigned
argument_list|()
expr_stmt|;
name|func_long
argument_list|()
expr_stmt|;
name|func_ll
argument_list|()
expr_stmt|;
name|func_ull
argument_list|()
expr_stmt|;
name|func_char
argument_list|()
expr_stmt|;
name|func_schar
argument_list|()
expr_stmt|;
name|func_uchar
argument_list|()
expr_stmt|;
name|func_Rchar
argument_list|()
expr_stmt|;
name|func_Pchar
argument_list|()
expr_stmt|;
name|func_KPchar
argument_list|()
expr_stmt|;
name|func_VKPchar
argument_list|()
expr_stmt|;
name|func_KVPKVull
argument_list|()
expr_stmt|;
name|func_KPKVvoid
argument_list|()
expr_stmt|;
name|func_ai
argument_list|()
expr_stmt|;
name|func_aptr
argument_list|()
expr_stmt|;
name|func_aenum
argument_list|()
expr_stmt|;
name|func_aaptr
argument_list|()
expr_stmt|;
name|func_ienummap
argument_list|()
expr_stmt|;
name|func_template1
argument_list|<
name|TestClass1
argument_list|>
argument_list|()
expr_stmt|;
name|func_template2
argument_list|<
name|foo
argument_list|>
argument_list|()
expr_stmt|;
name|func_fptr
argument_list|()
expr_stmt|;
name|func_pmf
argument_list|()
expr_stmt|;
name|func_uglypmf
argument_list|()
expr_stmt|;
name|func_uglypmf2
argument_list|()
expr_stmt|;
name|operator
name|()
parameter_list|()
function_decl|;
name|operator
name|<
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|<=
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|>=
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|=
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|+
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|-
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|*
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|/
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|%
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|++
parameter_list|()
function_decl|;
name|operator
name|++
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|operator
name|--
parameter_list|()
function_decl|;
name|operator
name|--
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nested_struct
argument_list|()
expr_stmt|;
name|nested_struct_const
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_REF_QUALIFIERS
name|lvalue
argument_list|()
expr_stmt|;
name|const_lvalue
argument_list|()
expr_stmt|;
name|std
operator|::
name|move
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|rvalue
argument_list|()
expr_stmt|;
name|std
operator|::
name|move
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|const_rvalue
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_COMPILER_DECLTYPE
name|decltype_param
argument_list|()
expr_stmt|;
name|decltype_template_param
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|decltype_template_param2
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_AUTO_FUNCTION
name|decltype_return
argument_list|()
expr_stmt|;
name|decltype_template_return
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
block|}
class|;
end_class
begin_class
DECL|class|TestClass2
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
class|class
name|TestClass2
block|{
DECL|function|func_long
name|long
name|func_long
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass2::func_long"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
template|template
parameter_list|<
name|typename
name|S
parameter_list|>
DECL|function|func_template1
name|T
modifier|*
name|func_template1
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass2::func_template1"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
template|template
parameter_list|<
name|TestClass1
operator|::
name|Something
name|val
parameter_list|>
DECL|function|func_template2
name|long
name|func_template2
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass2::func_template2"
argument_list|)
expr_stmt|;
return|return
name|long
argument_list|(
name|val
argument_list|)
return|;
block|}
public|public:
DECL|function|TestClass2
name|TestClass2
parameter_list|()
block|{
name|func_long
argument_list|()
expr_stmt|;
name|func_template1
argument_list|<
name|TestClass2
argument_list|>
argument_list|()
expr_stmt|;
name|func_template2
argument_list|<
name|TestClass1
operator|::
name|foo
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|TestClass3
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
name|TestClass1
operator|::
name|Something
name|v
parameter_list|>
class|class
name|TestClass3
block|{
DECL|function|func_long
name|long
name|func_long
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass3::func_long"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
template|template
parameter_list|<
name|typename
name|S
parameter_list|>
DECL|function|func_template1
name|S
modifier|*
name|func_template1
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass3::func_template1"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
template|template
parameter_list|<
name|TestClass1
operator|::
name|Something
name|val
parameter_list|>
DECL|function|func_template2
name|long
name|func_template2
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass3::func_template2"
argument_list|)
expr_stmt|;
return|return
name|long
argument_list|(
name|val
argument_list|)
return|;
block|}
public|public:
DECL|struct|Foo
DECL|member|foo
struct|struct
name|Foo
block|{
name|TestClass3
name|foo
decl_stmt|;
block|}
struct|;
DECL|function|TestClass3
name|TestClass3
parameter_list|()
block|{
name|func_long
argument_list|()
expr_stmt|;
name|func_template1
argument_list|<
name|TestClass2
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|func_template2
argument_list|<
name|TestClass1
operator|::
name|foo
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|TestClass4
class|class
name|TestClass4
block|{
DECL|member|c1
name|TestClass1
name|c1
decl_stmt|;
DECL|function|func2
name|TestClass2
argument_list|<
name|std
operator|::
name|map
argument_list|<
name|long
argument_list|,
specifier|const
name|void
modifier|*
argument_list|>
argument_list|>
name|func2
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass4::func2"
argument_list|)
expr_stmt|;
return|return
name|TestClass2
argument_list|<
name|std
operator|::
name|map
argument_list|<
name|long
argument_list|,
specifier|const
name|void
operator|*
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
DECL|function|func3
name|TestClass3
argument_list|<
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|list
argument_list|<
name|int
argument_list|>
argument_list|,
specifier|const
name|void
modifier|*
argument_list|>
argument_list|,
name|TestClass1
operator|::
name|foo
argument_list|>
operator|::
name|Foo
name|func3
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass4::func3"
argument_list|)
expr_stmt|;
return|return
name|TestClass3
argument_list|<
name|std
operator|::
name|map
argument_list|<
name|std
operator|::
name|list
argument_list|<
name|int
argument_list|>
argument_list|,
specifier|const
name|void
operator|*
argument_list|>
argument_list|,
name|TestClass1
operator|::
name|foo
argument_list|>
operator|::
name|Foo
argument_list|()
return|;
block|}
public|public:
DECL|function|TestClass4
name|TestClass4
parameter_list|()
block|{
name|func2
argument_list|()
expr_stmt|;
name|func3
argument_list|()
expr_stmt|;
name|ADD
argument_list|(
literal|"TestClass4::TestClass4"
argument_list|)
expr_stmt|;
block|}
DECL|function|~TestClass4
name|~
name|TestClass4
parameter_list|()
block|{
name|ADD
argument_list|(
literal|"TestClass4::~TestClass4"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|cleanupFuncinfo_data
name|void
name|tst_qmessagehandler
operator|::
name|cleanupFuncinfo_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"funcinfo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|TestClass4
name|c4
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_01"
argument_list|)
operator|<<
literal|"void __thiscall TestClass1::func_void(void)"
operator|<<
literal|"TestClass1::func_void"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_01"
argument_list|)
operator|<<
literal|"void TestClass1::func_void()"
operator|<<
literal|"TestClass1::func_void"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_02"
argument_list|)
operator|<<
literal|"int __thiscall TestClass1::func_int(void)"
operator|<<
literal|"TestClass1::func_int"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_02"
argument_list|)
operator|<<
literal|"int TestClass1::func_int()"
operator|<<
literal|"TestClass1::func_int"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_03"
argument_list|)
operator|<<
literal|"unsigned int __thiscall TestClass1::func_unsigned(void)"
operator|<<
literal|"TestClass1::func_unsigned"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_03"
argument_list|)
operator|<<
literal|"unsigned int TestClass1::func_unsigned()"
operator|<<
literal|"TestClass1::func_unsigned"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_04"
argument_list|)
operator|<<
literal|"long __thiscall TestClass1::func_long(void)"
operator|<<
literal|"TestClass1::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_04"
argument_list|)
operator|<<
literal|"long int TestClass1::func_long()"
operator|<<
literal|"TestClass1::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_05"
argument_list|)
operator|<<
literal|"__int64 __thiscall TestClass1::func_ll(void)"
operator|<<
literal|"TestClass1::func_ll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_05"
argument_list|)
operator|<<
literal|"long long int TestClass1::func_ll()"
operator|<<
literal|"TestClass1::func_ll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_06"
argument_list|)
operator|<<
literal|"unsigned __int64 __thiscall TestClass1::func_ull(void)"
operator|<<
literal|"TestClass1::func_ull"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_06"
argument_list|)
operator|<<
literal|"long long unsigned int TestClass1::func_ull()"
operator|<<
literal|"TestClass1::func_ull"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_07"
argument_list|)
operator|<<
literal|"char __thiscall TestClass1::func_char(void)"
operator|<<
literal|"TestClass1::func_char"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_07"
argument_list|)
operator|<<
literal|"char TestClass1::func_char()"
operator|<<
literal|"TestClass1::func_char"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_08"
argument_list|)
operator|<<
literal|"signed char __thiscall TestClass1::func_schar(void)"
operator|<<
literal|"TestClass1::func_schar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_08"
argument_list|)
operator|<<
literal|"signed char TestClass1::func_schar()"
operator|<<
literal|"TestClass1::func_schar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_09"
argument_list|)
operator|<<
literal|"unsigned char __thiscall TestClass1::func_uchar(void)"
operator|<<
literal|"TestClass1::func_uchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_09"
argument_list|)
operator|<<
literal|"unsigned char TestClass1::func_uchar()"
operator|<<
literal|"TestClass1::func_uchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_09a"
argument_list|)
operator|<<
literal|"char&__thiscall TestClass1::func_Rchar(void)"
operator|<<
literal|"TestClass1::func_Rchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_09a"
argument_list|)
operator|<<
literal|"char& TestClass1::func_Rchar()"
operator|<<
literal|"TestClass1::func_Rchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"clang_09a"
argument_list|)
operator|<<
literal|"char&TestClass1::func_Rchar()"
operator|<<
literal|"TestClass1::func_Rchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_10"
argument_list|)
operator|<<
literal|"char *__thiscall TestClass1::func_Pchar(void)"
operator|<<
literal|"TestClass1::func_Pchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_10"
argument_list|)
operator|<<
literal|"char* TestClass1::func_Pchar()"
operator|<<
literal|"TestClass1::func_Pchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"clang_10"
argument_list|)
operator|<<
literal|"char *TestClass1::func_Pchar()"
operator|<<
literal|"TestClass1::func_Pchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_11"
argument_list|)
operator|<<
literal|"const char *__thiscall TestClass1::func_KPchar(void)"
operator|<<
literal|"TestClass1::func_KPchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_11"
argument_list|)
operator|<<
literal|"const char* TestClass1::func_KPchar()"
operator|<<
literal|"TestClass1::func_KPchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_12"
argument_list|)
operator|<<
literal|"volatile const char *__thiscall TestClass1::func_VKPchar(void)"
operator|<<
literal|"TestClass1::func_VKPchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_12"
argument_list|)
operator|<<
literal|"const volatile char* TestClass1::func_VKPchar()"
operator|<<
literal|"TestClass1::func_VKPchar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_13"
argument_list|)
operator|<<
literal|"volatile const unsigned __int64 *volatile const __thiscall TestClass1::func_KVPKVull(void)"
operator|<<
literal|"TestClass1::func_KVPKVull"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_13"
argument_list|)
operator|<<
literal|"const volatile long long unsigned int* const volatile TestClass1::func_KVPKVull()"
operator|<<
literal|"TestClass1::func_KVPKVull"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_14"
argument_list|)
operator|<<
literal|"const void *volatile const *__thiscall TestClass1::func_KPKVvoid(void)"
operator|<<
literal|"TestClass1::func_KPKVvoid"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_14"
argument_list|)
operator|<<
literal|"const void* const volatile* TestClass1::func_KPKVvoid()"
operator|<<
literal|"TestClass1::func_KPKVvoid"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_15"
argument_list|)
operator|<<
literal|"class QList<int> __thiscall TestClass1::func_ai(void)"
operator|<<
literal|"TestClass1::func_ai"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_15"
argument_list|)
operator|<<
literal|"QList<int> TestClass1::func_ai()"
operator|<<
literal|"TestClass1::func_ai"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_16"
argument_list|)
operator|<<
literal|"class QList<unsigned __int64 const volatile *> __thiscall TestClass1::func_aptr(void)"
operator|<<
literal|"TestClass1::func_aptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_16"
argument_list|)
operator|<<
literal|"QList<const volatile long long unsigned int*> TestClass1::func_aptr()"
operator|<<
literal|"TestClass1::func_aptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_17"
argument_list|)
operator|<<
literal|"class QList<enum TestClass1::Something> __thiscall TestClass1::func_aenum(void)"
operator|<<
literal|"TestClass1::func_aenum"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_17"
argument_list|)
operator|<<
literal|"QList<TestClass1::Something> TestClass1::func_aenum()"
operator|<<
literal|"TestClass1::func_aenum"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_18"
argument_list|)
operator|<<
literal|"class QList<class QList<void const *>> __thiscall TestClass1::func_aaptr(void)"
operator|<<
literal|"TestClass1::func_aaptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_18"
argument_list|)
operator|<<
literal|"QList<QList<const void*>> TestClass1::func_aaptr()"
operator|<<
literal|"TestClass1::func_aaptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_19"
argument_list|)
operator|<<
literal|"class QMap<int,enum TestClass1::Something> __thiscall TestClass1::func_ienummap(void)"
operator|<<
literal|"TestClass1::func_ienummap"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_19"
argument_list|)
operator|<<
literal|"QMap<int, TestClass1::Something> TestClass1::func_ienummap()"
operator|<<
literal|"TestClass1::func_ienummap"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_20"
argument_list|)
operator|<<
literal|"class TestClass1 *__thiscall TestClass1::func_template1<class TestClass1>(void)"
operator|<<
literal|"TestClass1::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_20"
argument_list|)
operator|<<
literal|"T* TestClass1::func_template1() [with T = TestClass1]"
operator|<<
literal|"TestClass1::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_21"
argument_list|)
operator|<<
literal|"long __thiscall TestClass1::func_template2<foo>(void)"
operator|<<
literal|"TestClass1::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_21"
argument_list|)
operator|<<
literal|"long int TestClass1::func_template2() [with TestClass1::Something val = foo]"
operator|<<
literal|"TestClass1::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_22"
argument_list|)
operator|<<
literal|"unsigned __int64 *(__cdecl *__thiscall TestClass1::func_fptr(void))(void)"
operator|<<
literal|"TestClass1::func_fptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_22"
argument_list|)
operator|<<
literal|"long long unsigned int* (* TestClass1::func_fptr())()"
operator|<<
literal|"TestClass1::func_fptr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_23"
argument_list|)
operator|<<
literal|"unsigned __int64 *(__thiscall TestClass1::* __thiscall TestClass1::func_pmf(void))(void)"
operator|<<
literal|"TestClass1::func_pmf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_23"
argument_list|)
operator|<<
literal|"long long unsigned int* (TestClass1::* TestClass1::func_pmf())()"
operator|<<
literal|"TestClass1::func_pmf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_24"
argument_list|)
operator|<<
literal|"unsigned __int64 *(__cdecl *(__thiscall TestClass1::* __thiscall TestClass1::func_uglypmf(unsigned __int64 *(__cdecl *(__thiscall TestClass1::* )(void))(void)))(void))(void)"
operator|<<
literal|"TestClass1::func_uglypmf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_24"
argument_list|)
operator|<<
literal|"long long unsigned int* (* (TestClass1::* TestClass1::func_uglypmf(long long unsigned int* (* (TestClass1::*)())()))())()"
operator|<<
literal|"TestClass1::func_uglypmf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_25"
argument_list|)
operator|<<
literal|"class QMap<class QString,unsigned __int64 * (__cdecl*(__thiscall TestClass1::*)(void))(void)> __thiscall TestClass1::func_uglypmf2(void)"
operator|<<
literal|"TestClass1::func_uglypmf2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_25"
argument_list|)
operator|<<
literal|"QMap<QString, long long unsigned int* (* (TestClass1::*)())()> TestClass1::func_uglypmf2()"
operator|<<
literal|"TestClass1::func_uglypmf2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_26"
argument_list|)
operator|<<
literal|"class TestClass2<class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>>> __thiscall TestClass4::func2(void)"
operator|<<
literal|"TestClass4::func2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_26"
argument_list|)
operator|<<
literal|"TestClass2<std::map<long int, const void*, std::less<long int>, std::allocator<std::pair<const long int, const void*>>>> TestClass4::func2()"
operator|<<
literal|"TestClass4::func2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_27"
argument_list|)
operator|<<
literal|"long __thiscall TestClass2<class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>>>::func_long(void)"
operator|<<
literal|"TestClass2::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_27"
argument_list|)
operator|<<
literal|"long int TestClass2<T>::func_long() [with T = std::map<long int, const void*, std::less<long int>, std::allocator<std::pair<const long int, const void*>>>]"
operator|<<
literal|"TestClass2::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_28"
argument_list|)
operator|<<
literal|"class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>> *__thiscall TestClass2<class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>>>::func_template1<class TestClass2<class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>>>>(void)"
operator|<<
literal|"TestClass2::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_21"
argument_list|)
operator|<<
literal|"T* TestClass2<T>::func_template1() [with S = TestClass2<std::map<long int, const void*, std::less<long int>, std::allocator<std::pair<const long int, const void*>>>>, T = std::map<long int, const void*, std::less<long int>, std::allocator<std::pair<const long int, const void*>>>]"
operator|<<
literal|"TestClass2::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_29"
argument_list|)
operator|<<
literal|"long __thiscall TestClass2<class std::map<long,void const *,struct std::less<long>,class std::allocator<struct std::pair<long const ,void const *>>>>::func_template2<foo>(void)"
operator|<<
literal|"TestClass2::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_29"
argument_list|)
operator|<<
literal|"long int TestClass2<T>::func_template2() [with TestClass1::Something val = foo, T = std::map<long int, const void*, std::less<long int>, std::allocator<std::pair<const long int, const void*>>>]"
operator|<<
literal|"TestClass2::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_30"
argument_list|)
operator|<<
literal|"struct TestClass3<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>,0>::Foo __thiscall TestClass4::func3(void)"
operator|<<
literal|"TestClass4::func3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_30"
argument_list|)
operator|<<
literal|"TestClass3<std::map<std::list<int, std::allocator<int>>, const void*, std::less<std::list<int, std::allocator<int>>>, std::allocator<std::pair<const std::list<int, std::allocator<int>>, const void*>>>, foo>::Foo TestClass4::func3()"
operator|<<
literal|"TestClass4::func3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_31"
argument_list|)
operator|<<
literal|"long __thiscall TestClass3<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>,0>::func_long(void)"
operator|<<
literal|"TestClass3::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_31"
argument_list|)
operator|<<
literal|"long int TestClass3<T, v>::func_long() [with T = std::map<std::list<int, std::allocator<int>>, const void*, std::less<std::list<int, std::allocator<int>>>, std::allocator<std::pair<const std::list<int, std::allocator<int>>, const void*>>>, TestClass1::Something v = foo]"
operator|<<
literal|"TestClass3::func_long"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_32"
argument_list|)
operator|<<
literal|"class TestClass2<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>> *__thiscall TestClass3<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>,0>::func_template1<class TestClass2<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>>>(void)"
operator|<<
literal|"TestClass3::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_32"
argument_list|)
operator|<<
literal|"S* TestClass3<T, v>::func_template1() [with S = TestClass2<std::map<std::list<int, std::allocator<int>>, const void*, std::less<std::list<int, std::allocator<int>>>, std::allocator<std::pair<const std::list<int, std::allocator<int>>, const void*>>>>, T = std::map<std::list<int, std::allocator<int>>, const void*, std::less<std::list<int, std::allocator<int>>>, std::allocator<std::pair<const std::list<int, std::allocator<int>>, const void*>>>, TestClass1::Something v = foo]"
operator|<<
literal|"TestClass3::func_template1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_33"
argument_list|)
operator|<<
literal|"long __thiscall TestClass3<class std::map<class std::list<int,class std::allocator<int>>,void const *,struct std::less<class std::list<int,class std::allocator<int>>>,class std::allocator<struct std::pair<class std::list<int,class std::allocator<int>> const ,void const *>>>,0>::func_template2<foo>(void)"
operator|<<
literal|"TestClass3::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_33"
argument_list|)
operator|<<
literal|"long int TestClass3<T, v>::func_template2() [with TestClass1::Something val = foo, T = std::map<std::list<int, std::allocator<int>>, const void*, std::less<std::list<int, std::allocator<int>>>, std::allocator<std::pair<const std::list<int, std::allocator<int>>, const void*>>>, TestClass1::Something v = foo]"
operator|<<
literal|"TestClass3::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_34"
argument_list|)
operator|<<
literal|"__thiscall TestClass4::TestClass4(void)"
operator|<<
literal|"TestClass4::TestClass4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_34"
argument_list|)
operator|<<
literal|"TestClass4::TestClass4()"
operator|<<
literal|"TestClass4::TestClass4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msvc_35"
argument_list|)
operator|<<
literal|"__thiscall TestClass4::~TestClass4(void)"
operator|<<
literal|"TestClass4::~TestClass4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_35"
argument_list|)
operator|<<
literal|"TestClass4::~TestClass4()"
operator|<<
literal|"TestClass4::~TestClass4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_36"
argument_list|)
operator|<<
literal|"void TestClass1::operator()()"
operator|<<
literal|"TestClass1::operator()"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_37"
argument_list|)
operator|<<
literal|"long int TestClass1::func_template2() [with TestClass1::Something val = (TestClass1::Something)0u]"
operator|<<
literal|"TestClass1::func_template2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_38"
argument_list|)
operator|<<
literal|"int TestClass1::operator<(int)"
operator|<<
literal|"TestClass1::operator<"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gcc_39"
argument_list|)
operator|<<
literal|"int TestClass1::operator>(int)"
operator|<<
literal|"TestClass1::operator>"
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QByteArray
name|qCleanupFuncinfo
parameter_list|(
name|QByteArray
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
DECL|function|cleanupFuncinfo
name|void
name|tst_qmessagehandler
operator|::
name|cleanupFuncinfo
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|funcinfo
argument_list|)
expr_stmt|;
comment|//    qDebug()<< funcinfo.toLatin1();
name|QByteArray
name|result
init|=
name|qCleanupFuncinfo
argument_list|(
name|funcinfo
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"TestClass1::nested_struct"
argument_list|,
literal|"Nested function processing is broken"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"TestClass1::nested_struct_const"
argument_list|,
literal|"Nested function processing is broken"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|result
argument_list|)
argument_list|,
literal|"expected"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qMessagePattern_data
name|void
name|tst_qmessagehandler
operator|::
name|qMessagePattern_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
comment|// %{file} is tricky because of shadow builds
name|QTest
operator|::
name|newRow
argument_list|(
literal|"basic"
argument_list|)
operator|<<
literal|"%{type} %{appname} %{line} %{function} %{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"debug  44 T::T static constructor"
comment|//  we can't be sure whether the QT_MESSAGE_PATTERN is already destructed
operator|<<
literal|"static destructor"
operator|<<
literal|"debug tst_qlogging 65 MyClass::myFunction from_a_function 34"
operator|<<
literal|"debug tst_qlogging 75 main qDebug"
operator|<<
literal|"warning tst_qlogging 76 main qWarning"
operator|<<
literal|"critical tst_qlogging 77 main qCritical"
operator|<<
literal|"warning tst_qlogging 80 main qDebug with category"
operator|<<
literal|"debug tst_qlogging 84 main qDebug2"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
literal|"PREFIX: %{unknown} %{message}"
operator|<<
literal|false
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"QT_MESSAGE_PATTERN: Unknown placeholder %{unknown}"
operator|<<
literal|"PREFIX:  qDebug"
operator|)
expr_stmt|;
comment|// test the if condition
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ifs"
argument_list|)
operator|<<
literal|"[%{if-debug}D%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}] %{if-category}%{category}: %{endif}%{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"[D] static constructor"
comment|//  we can't be sure whether the QT_MESSAGE_PATTERN is already destructed
operator|<<
literal|"static destructor"
operator|<<
literal|"[D] qDebug"
operator|<<
literal|"[W] qWarning"
operator|<<
literal|"[C] qCritical"
operator|<<
literal|"[W] category: qDebug with category"
operator|<<
literal|"[D] qDebug2"
operator|)
expr_stmt|;
comment|// test few errors cases
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ifs-invalid1"
argument_list|)
operator|<<
literal|"PREFIX: %{unknown} %{endif}  %{if-warning}"
operator|<<
literal|false
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"QT_MESSAGE_PATTERN: Unknown placeholder %{unknown}"
operator|<<
literal|"QT_MESSAGE_PATTERN: %{endif} without an %{if-*}"
operator|<<
literal|"QT_MESSAGE_PATTERN: missing %{endif}"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ifs-invalid2"
argument_list|)
operator|<<
literal|"A %{if-debug}DEBUG%{if-warning}WARNING%{endif} %{message}  "
operator|<<
literal|false
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"QT_MESSAGE_PATTERN: %{if-*} cannot be nested"
operator|<<
literal|"A DEBUG qDebug  "
operator|<<
literal|"A  qWarning  "
operator|)
expr_stmt|;
comment|// This test won't work when midnight is too close... wait a bit
while|while
condition|(
name|QTime
operator|::
name|currentTime
argument_list|()
operator|>
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|30
argument_list|)
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time"
argument_list|)
operator|<<
literal|"/%{time yyyy - MM - d}/%{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
operator|(
literal|'/'
operator|+
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
literal|"yyyy - MM - d"
argument_list|)
operator|.
name|toUtf8
argument_list|()
operator|+
literal|"/qDebug"
operator|)
operator|)
expr_stmt|;
comment|// %{time}  should have a padding of 6 so if it takes less than 10 seconds to show
comment|// the first message, there should be 5 spaces
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time"
argument_list|)
operator|<<
literal|"<%{time}>%{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"<     "
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GLIBC__
ifdef|#
directive|ifdef
name|QT_NAMESPACE
DECL|macro|QT_NAMESPACE_STR
define|#
directive|define
name|QT_NAMESPACE_STR
value|QT_STRINGIFY(QT_NAMESPACE::)
else|#
directive|else
define|#
directive|define
name|QT_NAMESPACE_STR
value|""
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backtrace"
argument_list|)
operator|<<
literal|"[%{backtrace}] %{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
comment|// MyClass::qt_static_metacall is explicitly marked as hidden in the Q_OBJECT macro
operator|<<
literal|"[MyClass::myFunction|MyClass::mySlot1|?app?|"
name|QT_NAMESPACE_STR
literal|"QMetaMethod::invoke|"
name|QT_NAMESPACE_STR
literal|"QMetaObject::invokeMethod] from_a_function 34"
operator|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backtrace depth,separator"
argument_list|)
operator|<<
literal|"[%{backtrace depth=2 separator=\"\n\"}] %{message}"
operator|<<
literal|true
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"[MyClass::myFunction\nMyClass::mySlot1] from_a_function 34"
operator|<<
literal|"[T::T\n"
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|qMessagePattern
name|void
name|tst_qmessagehandler
operator|::
name|qMessagePattern
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
specifier|const
name|QString
name|appExe
init|=
name|m_appDir
operator|+
literal|"/app"
decl_stmt|;
comment|//
comment|// test QT_MESSAGE_PATTERN
comment|//
name|QStringList
name|environment
init|=
name|m_baseEnvironment
decl_stmt|;
name|environment
operator|.
name|prepend
argument_list|(
literal|"QT_MESSAGE_PATTERN=\""
operator|+
name|pattern
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|process
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|appExe
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not start %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|appExe
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QByteArray
name|output
init|=
name|process
operator|.
name|readAllStandardError
argument_list|()
decl_stmt|;
comment|//    qDebug()<< output;
name|QVERIFY
argument_list|(
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|output
operator|.
name|contains
argument_list|(
literal|"QT_MESSAGE_PATTERN"
argument_list|)
argument_list|,
name|valid
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|e
decl|,
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|output
operator|.
name|contains
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|output
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"expected: "
operator|<<
name|e
expr_stmt|;
name|QVERIFY
argument_list|(
name|output
operator|.
name|contains
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setMessagePattern
name|void
name|tst_qmessagehandler
operator|::
name|setMessagePattern
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|//
comment|// test qSetMessagePattern
comment|//
name|QProcess
name|process
decl_stmt|;
specifier|const
name|QString
name|appExe
init|=
name|m_appDir
operator|+
literal|"/app"
decl_stmt|;
comment|// make sure there is no QT_MESSAGE_PATTERN in the environment
name|QStringList
name|environment
init|=
name|m_baseEnvironment
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|QString
argument_list|>
name|iter
argument_list|(
name|environment
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QT_MESSAGE_PATTERN"
argument_list|)
condition|)
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|process
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|appExe
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not start %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|appExe
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QByteArray
name|output
init|=
name|process
operator|.
name|readAllStandardError
argument_list|()
decl_stmt|;
comment|//qDebug()<< output;
name|QByteArray
name|expected
init|=
literal|"static constructor\n"
literal|"[debug] qDebug\n"
literal|"[warning] qWarning\n"
literal|"[critical] qCritical\n"
literal|"[warning] qDebug with category\n"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|output
operator|.
name|replace
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|output
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_PROCESS
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QtMsgType
argument_list|)
end_macro
begin_function
DECL|function|formatLogMessage_data
name|void
name|tst_qmessagehandler
operator|::
name|formatLogMessage_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QtMsgType
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"line"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"function"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"category"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
DECL|macro|BA
define|#
directive|define
name|BA
value|QByteArrayLiteral
name|QTest
operator|::
name|newRow
argument_list|(
literal|"basic"
argument_list|)
operator|<<
literal|"%{type} %{file} %{line} %{function} %{message}"
operator|<<
literal|"debug main.cpp 1 func msg\n"
operator|<<
name|QtDebugMsg
operator|<<
name|BA
argument_list|(
literal|"main.cpp"
argument_list|)
operator|<<
literal|1
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|"msg"
expr_stmt|;
comment|// test the if conditions
name|QString
name|format
init|=
literal|"[%{if-debug}D%{endif}%{if-warning}W%{endif}%{if-critical}C%{endif}%{if-fatal}F%{endif}] %{if-category}%{category}: %{endif}%{message}"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"if-debug"
argument_list|)
operator|<<
name|format
operator|<<
literal|"[D] msg\n"
operator|<<
name|QtDebugMsg
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|"msg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"if_warning"
argument_list|)
operator|<<
name|format
operator|<<
literal|"[W] msg\n"
operator|<<
name|QtWarningMsg
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|"msg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"if_critical"
argument_list|)
operator|<<
name|format
operator|<<
literal|"[C] msg\n"
operator|<<
name|QtCriticalMsg
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|"msg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"if_fatal"
argument_list|)
operator|<<
name|format
operator|<<
literal|"[F] msg\n"
operator|<<
name|QtFatalMsg
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|"msg"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"if_cat"
argument_list|)
operator|<<
name|format
operator|<<
literal|"[F] cat: msg\n"
operator|<<
name|QtFatalMsg
operator|<<
name|BA
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
name|BA
argument_list|(
literal|"func"
argument_list|)
operator|<<
name|BA
argument_list|(
literal|"cat"
argument_list|)
operator|<<
literal|"msg"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatLogMessage
name|void
name|tst_qmessagehandler
operator|::
name|formatLogMessage
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QtMsgType
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|function
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|category
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|qSetMessagePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|QMessageLogContext
name|ctxt
argument_list|(
name|file
argument_list|,
name|line
argument_list|,
name|function
argument_list|,
name|category
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|category
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|r
init|=
name|qFormatLogMessage
argument_list|(
name|type
argument_list|,
name|ctxt
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|r
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qmessagehandler
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlogging.moc"
end_include
end_unit
