begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_class
DECL|class|tst_QGetPutEnv
class|class
name|tst_QGetPutEnv
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|intValue_data
parameter_list|()
function_decl|;
name|void
name|intValue
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|getSetCheck
name|void
name|tst_QGetPutEnv
operator|::
name|getSetCheck
parameter_list|()
block|{
specifier|const
name|char
name|varName
index|[]
init|=
literal|"should_not_exist"
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qEnvironmentVariableIsSet
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qEnvironmentVariableIsEmpty
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|QByteArray
name|result
init|=
name|qgetenv
argument_list|(
name|varName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QVERIFY
argument_list|(
name|qputenv
argument_list|(
name|varName
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// deletes varName instead of making it empty, on Windows
name|QVERIFY
argument_list|(
name|qEnvironmentVariableIsSet
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qEnvironmentVariableIsEmpty
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|qputenv
argument_list|(
name|varName
argument_list|,
name|QByteArray
argument_list|(
literal|"supervalue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qEnvironmentVariableIsSet
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qEnvironmentVariableIsEmpty
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|result
operator|=
name|qgetenv
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QByteArrayLiteral
argument_list|(
literal|"supervalue"
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
name|varName
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now test qunsetenv
name|QVERIFY
argument_list|(
name|qunsetenv
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qEnvironmentVariableIsSet
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qEnvironmentVariableIsEmpty
argument_list|(
name|varName
argument_list|)
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|,
operator|&
name|ok
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
name|result
operator|=
name|qgetenv
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intValue_data
name|void
name|tst_QGetPutEnv
operator|::
name|intValue_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
comment|// most non-success cases already tested in getSetCheck()
DECL|macro|ROW
define|#
directive|define
name|ROW
parameter_list|(
name|x
parameter_list|,
name|i
parameter_list|,
name|b
parameter_list|)
define|\
value|QTest::newRow(#x)<< QByteArray(#x)<< (i)<< (b)
name|ROW
argument_list|(
name|auto
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
literal|010
argument_list|,
literal|8
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
literal|0x10
argument_list|,
literal|16
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ROW
argument_list|(
operator|-
literal|010
argument_list|,
operator|-
literal|8
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ROW(0xffffffff, -1, true); // could be expected, but not how QByteArray::toInt() works
name|ROW
argument_list|(
literal|0xffffffff
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|int
name|bases
index|[]
init|=
block|{
literal|10
block|,
literal|8
block|,
literal|16
block|}
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
name|bases
operator|/
sizeof|sizeof
expr|*
name|bases
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"INT_MAX, base %d"
argument_list|,
name|bases
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|INT_MAX
argument_list|)
operator|<<
name|INT_MAX
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"INT_MAX+1, base %d"
argument_list|,
name|bases
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|qlonglong
argument_list|(
name|INT_MAX
argument_list|)
operator|+
literal|1
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"INT_MIN, base %d"
argument_list|,
name|bases
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|INT_MIN
argument_list|)
operator|<<
name|INT_MIN
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|asprintf
argument_list|(
literal|"INT_MIN-1, base %d"
argument_list|,
name|bases
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
operator|::
name|number
argument_list|(
name|qlonglong
argument_list|(
name|INT_MIN
argument_list|)
operator|-
literal|1
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
block|}
empty_stmt|;
block|}
end_function
begin_function
DECL|function|intValue
name|void
name|tst_QGetPutEnv
operator|::
name|intValue
parameter_list|()
block|{
specifier|const
name|char
name|varName
index|[]
init|=
literal|"should_not_exist"
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|bool
name|actualOk
init|=
operator|!
name|ok
decl_stmt|;
name|QVERIFY
argument_list|(
name|qputenv
argument_list|(
name|varName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qEnvironmentVariableIntValue
argument_list|(
name|varName
argument_list|,
operator|&
name|actualOk
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualOk
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QGetPutEnv
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qgetputenv.moc"
end_include
end_unit
