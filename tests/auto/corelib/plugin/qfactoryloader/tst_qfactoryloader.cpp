begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<private/qfactoryloader_p.h>
end_include
begin_include
include|#
directive|include
file|"plugin1/plugininterface1.h"
end_include
begin_include
include|#
directive|include
file|"plugin2/plugininterface2.h"
end_include
begin_class
DECL|class|tst_QFactoryLoader
class|class
name|tst_QFactoryLoader
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|usingTwoFactoriesFromSameDir
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|binFolderC
specifier|static
specifier|const
name|char
name|binFolderC
index|[]
init|=
literal|"bin"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initTestCase
name|void
name|tst_QFactoryLoader
operator|::
name|initTestCase
parameter_list|()
block|{
specifier|const
name|QString
name|binFolder
init|=
name|QFINDTESTDATA
argument_list|(
name|binFolderC
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|binFolder
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Unable to locate 'bin' folder"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setLibraryPaths
argument_list|(
name|QStringList
argument_list|(
name|QFileInfo
argument_list|(
name|binFolder
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|usingTwoFactoriesFromSameDir
name|void
name|tst_QFactoryLoader
operator|::
name|usingTwoFactoriesFromSameDir
parameter_list|()
block|{
specifier|const
name|QString
name|suffix
init|=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|binFolderC
argument_list|)
decl_stmt|;
name|QFactoryLoader
name|loader1
argument_list|(
name|PluginInterface1_iid
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|PluginInterface1
modifier|*
name|plugin1
init|=
name|qobject_cast
argument_list|<
name|PluginInterface1
operator|*
argument_list|>
argument_list|(
name|loader1
operator|.
name|instance
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|plugin1
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot load plugin '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|PluginInterface1_iid
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QFactoryLoader
name|loader2
argument_list|(
name|PluginInterface2_iid
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|PluginInterface2
modifier|*
name|plugin2
init|=
name|qobject_cast
argument_list|<
name|PluginInterface2
operator|*
argument_list|>
argument_list|(
name|loader2
operator|.
name|instance
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|plugin2
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot load plugin '%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|PluginInterface2_iid
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|plugin1
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin1 ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|plugin2
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin2 ok"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFactoryLoader
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfactoryloader.moc"
end_include
end_unit
