begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qpluginloader.h>
end_include
begin_include
include|#
directive|include
file|"theplugin/plugininterface.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OF_MACH_O
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/private/qmachparser_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Helper macros to let us know if some suffixes are valid
end_comment
begin_define
DECL|macro|bundle_VALID
define|#
directive|define
name|bundle_VALID
value|false
end_define
begin_define
DECL|macro|dylib_VALID
define|#
directive|define
name|dylib_VALID
value|false
end_define
begin_define
DECL|macro|sl_VALID
define|#
directive|define
name|sl_VALID
value|false
end_define
begin_define
DECL|macro|a_VALID
define|#
directive|define
name|a_VALID
value|false
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|false
end_define
begin_define
DECL|macro|dll_VALID
define|#
directive|define
name|dll_VALID
value|false
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
end_if
begin_undef
DECL|macro|bundle_VALID
undef|#
directive|undef
name|bundle_VALID
end_undef
begin_undef
DECL|macro|dylib_VALID
undef|#
directive|undef
name|dylib_VALID
end_undef
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|bundle_VALID
define|#
directive|define
name|bundle_VALID
value|true
end_define
begin_define
DECL|macro|dylib_VALID
define|#
directive|define
name|dylib_VALID
value|true
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_comment
comment|//# ifdef QT_NO_DEBUG
end_comment
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".dylib"
end_define
begin_comment
comment|//# else
end_comment
begin_comment
comment|//#  define SUFFIX         "_debug.dylib"
end_comment
begin_comment
comment|//#endif
end_comment
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__ia64
argument_list|)
end_elif
begin_undef
DECL|macro|sl_VALID
undef|#
directive|undef
name|sl_VALID
end_undef
begin_define
DECL|macro|sl_VALID
define|#
directive|define
name|sl_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".sl"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
end_elif
begin_undef
DECL|macro|a_VALID
undef|#
directive|undef
name|a_VALID
end_undef
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|a_VALID
define|#
directive|define
name|a_VALID
value|true
end_define
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".so"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_undef
DECL|macro|dll_VALID
undef|#
directive|undef
name|dll_VALID
end_undef
begin_define
DECL|macro|dll_VALID
define|#
directive|define
name|dll_VALID
value|true
end_define
begin_comment
comment|//# ifdef QT_NO_DEBUG
end_comment
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".dll"
end_define
begin_comment
comment|//# else
end_comment
begin_comment
comment|//#  define SUFFIX         "d.dll"
end_comment
begin_comment
comment|//# endif
end_comment
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|""
end_define
begin_else
else|#
directive|else
end_else
begin_comment
comment|// all other Unix
end_comment
begin_undef
DECL|macro|so_VALID
undef|#
directive|undef
name|so_VALID
end_undef
begin_define
DECL|macro|so_VALID
define|#
directive|define
name|so_VALID
value|true
end_define
begin_define
DECL|macro|SUFFIX
define|#
directive|define
name|SUFFIX
value|".so"
end_define
begin_define
DECL|macro|PREFIX
define|#
directive|define
name|PREFIX
value|"lib"
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|sys_qualifiedLibraryName
specifier|static
name|QString
name|sys_qualifiedLibraryName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QString
name|name
init|=
name|QLatin1String
argument_list|(
literal|"bin/"
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|PREFIX
argument_list|)
operator|+
name|fileName
operator|+
name|QLatin1String
argument_list|(
name|SUFFIX
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|libname
init|=
name|QFINDTESTDATA
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|libname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
condition|)
return|return
name|fi
operator|.
name|canonicalFilePath
argument_list|()
return|;
return|return
name|libname
return|;
block|}
end_function
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QPluginLoader
argument_list|)
end_macro
begin_class
DECL|class|tst_QPluginLoader
class|class
name|tst_QPluginLoader
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|errorString
parameter_list|()
function_decl|;
name|void
name|loadHints
parameter_list|()
function_decl|;
name|void
name|deleteinstanceOnUnload
parameter_list|()
function_decl|;
name|void
name|loadDebugObj
parameter_list|()
function_decl|;
name|void
name|loadCorruptElf
parameter_list|()
function_decl|;
name|void
name|loadMachO_data
parameter_list|()
function_decl|;
name|void
name|loadMachO
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|void
name|loadGarbage
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|relativePath
parameter_list|()
function_decl|;
name|void
name|absolutePath
parameter_list|()
function_decl|;
name|void
name|reloadPlugin
parameter_list|()
function_decl|;
name|void
name|preloadedPlugin_data
parameter_list|()
function_decl|;
name|void
name|preloadedPlugin
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|cleanup
name|void
name|tst_QPluginLoader
operator|::
name|cleanup
parameter_list|()
block|{
comment|// check if the library/plugin was leaked
comment|// we can't use QPluginLoader::isLoaded here because on some platforms the plugin is always loaded by QPluginLoader.
comment|// Also, if this test fails once, it will keep on failing because we can't force the unload,
comment|// so we report it only once.
specifier|static
name|bool
name|failedAlready
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|failedAlready
condition|)
block|{
name|QLibrary
name|lib
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
decl_stmt|;
name|failedAlready
operator|=
literal|true
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|lib
operator|.
name|isLoaded
argument_list|()
argument_list|,
literal|"Plugin was leaked - will not check again"
argument_list|)
expr_stmt|;
name|failedAlready
operator|=
literal|false
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|errorString
name|void
name|tst_QPluginLoader
operator|::
name|errorString
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// On WinCE we need an QCoreApplication object for current dir
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
endif|#
directive|endif
specifier|const
name|QString
name|unknown
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|QPluginLoader
name|loader
decl_stmt|;
comment|// default constructed
name|bool
name|loaded
init|=
name|loader
operator|.
name|load
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|loaded
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|obj
init|=
name|loader
operator|.
name|instance
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
argument_list|,
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|unloaded
init|=
name|loader
operator|.
name|unload
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|unloaded
argument_list|)
expr_stmt|;
block|}
block|{
name|QPluginLoader
name|loader
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"tst_qpluginloaderlib"
argument_list|)
argument_list|)
decl_stmt|;
comment|//not a plugin
name|bool
name|loaded
init|=
name|loader
operator|.
name|load
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|loaded
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|obj
init|=
name|loader
operator|.
name|instance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
argument_list|,
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|unloaded
init|=
name|loader
operator|.
name|unload
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|unloaded
argument_list|)
expr_stmt|;
block|}
block|{
name|QPluginLoader
name|loader
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"nosuchfile"
argument_list|)
argument_list|)
decl_stmt|;
comment|//not a file
name|bool
name|loaded
init|=
name|loader
operator|.
name|load
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|loaded
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|obj
init|=
name|loader
operator|.
name|instance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
argument_list|,
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|unloaded
init|=
name|loader
operator|.
name|unload
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|unloaded
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
operator|!
name|defined
name|Q_OS_WIN
operator|&&
operator|!
name|defined
name|Q_OS_MAC
operator|&&
operator|!
name|defined
name|Q_OS_HPUX
block|{
name|QPluginLoader
name|loader
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"almostplugin"
argument_list|)
argument_list|)
decl_stmt|;
comment|//a plugin with unresolved symbols
name|loader
operator|.
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ResolveAllSymbolsHint
argument_list|)
expr_stmt|;
name|bool
name|loaded
init|=
name|loader
operator|.
name|load
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|loaded
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|obj
init|=
name|loader
operator|.
name|instance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
argument_list|,
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|unloaded
init|=
name|loader
operator|.
name|unload
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
operator|!=
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|unloaded
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|{
name|QPluginLoader
name|loader
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
decl_stmt|;
comment|//a plugin
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|load
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
operator|!=
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
comment|// Make sure that plugin really works
name|PluginInterface
modifier|*
name|theplugin
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|pluginName
init|=
name|theplugin
operator|->
name|pluginName
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pluginName
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|unload
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|errorString
argument_list|()
argument_list|,
name|unknown
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadHints
name|void
name|tst_QPluginLoader
operator|::
name|loadHints
parameter_list|()
block|{
name|QPluginLoader
name|loader
decl_stmt|;
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|loadHints
argument_list|()
argument_list|,
operator|(
name|QLibrary
operator|::
name|LoadHints
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|//Do not crash
name|loader
operator|.
name|setLoadHints
argument_list|(
name|QLibrary
operator|::
name|ResolveAllSymbolsHint
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setFileName
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
expr_stmt|;
comment|//a plugin
name|QCOMPARE
argument_list|(
name|loader
operator|.
name|loadHints
argument_list|()
argument_list|,
name|QLibrary
operator|::
name|ResolveAllSymbolsHint
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteinstanceOnUnload
name|void
name|tst_QPluginLoader
operator|::
name|deleteinstanceOnUnload
parameter_list|()
block|{
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
operator|++
name|pass
control|)
block|{
name|QPluginLoader
name|loader1
decl_stmt|;
name|loader1
operator|.
name|setFileName
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
expr_stmt|;
comment|//a plugin
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
name|loader1
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// not recommended, instance() should do the job.
name|PluginInterface
modifier|*
name|instance1
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader1
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|instance1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance1
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|loader2
decl_stmt|;
name|loader2
operator|.
name|setFileName
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
expr_stmt|;
comment|//a plugin
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
name|loader2
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// not recommended, instance() should do the job.
name|PluginInterface
modifier|*
name|instance2
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader2
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|instance2
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|loader1
operator|.
name|instance
argument_list|()
argument_list|,
operator|&
name|QObject
operator|::
name|destroyed
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|loader2
operator|.
name|instance
argument_list|()
argument_list|,
operator|&
name|QObject
operator|::
name|destroyed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|loader2
operator|.
name|unload
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// refcount not reached 0, not really unloaded
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|instance1
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance2
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader1
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
comment|// refcount reached 0, did really unload
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadDebugObj
name|void
name|tst_QPluginLoader
operator|::
name|loadDebugObj
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|__ELF__
argument_list|)
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/debugobj.so"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|lib1
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/debugobj.so"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|loadCorruptElf
name|void
name|tst_QPluginLoader
operator|::
name|loadCorruptElf
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|__ELF__
argument_list|)
if|if
condition|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|==
literal|8
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/corrupt1.elf64.so"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|lib1
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/corrupt1.elf64.so"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib1
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|lib1
operator|.
name|errorString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not an ELF object"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|lib1
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|lib2
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/corrupt2.elf64.so"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib2
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|lib2
operator|.
name|errorString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|lib2
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|lib3
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/corrupt3.elf64.so"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib3
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|lib3
operator|.
name|errorString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"invalid"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|lib3
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|==
literal|4
condition|)
block|{
name|QPluginLoader
name|libW
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"elftest/corrupt3.elf64.so"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|libW
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|libW
operator|.
name|errorString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"architecture"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|libW
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Please port QElfParser to this platform or blacklist this test."
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|loadMachO_data
name|void
name|tst_QPluginLoader
operator|::
name|loadMachO_data
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OF_MACH_O
argument_list|)
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"parseResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/dev/null"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"elftest/debugobj.so"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tst_qpluginloader.cpp"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tst_qpluginloader"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_PROCESSOR_X86_64
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.x86_64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|QtMetaDataSection
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.i386.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.no-x86_64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.no-i386.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|QtMetaDataSection
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_PROCESSOR_X86_32
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.i386.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|QtMetaDataSection
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.x86_64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.no-i386.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.no-x86_64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|QtMetaDataSection
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_PROCESSOR_POWER_64
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.ppc64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.all.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|QtMetaDataSection
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.stub-x86_64.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"machtest/good.fat.stub-i386.dylib"
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
name|QDir
name|d
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"machtest"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|badlist
init|=
name|d
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"bad*.dylib"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|bad
decl|,
name|badlist
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
literal|"machtest/"
operator|+
name|bad
argument_list|)
argument_list|)
operator|<<
name|int
argument_list|(
name|QMachOParser
operator|::
name|NotSuitable
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|loadMachO
name|void
name|tst_QPluginLoader
operator|::
name|loadMachO
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_OF_MACH_O
argument_list|)
name|QFile
name|f
argument_list|(
name|QFINDTESTDATA
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|f
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|long
name|pos
decl_stmt|;
name|ulong
name|len
decl_stmt|;
name|QString
name|errorString
decl_stmt|;
name|int
name|r
init|=
name|QMachOParser
operator|::
name|parse
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|,
name|f
operator|.
name|fileName
argument_list|()
argument_list|,
operator|&
name|errorString
argument_list|,
operator|&
name|pos
argument_list|,
operator|&
name|len
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|parseResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
argument_list|,
name|parseResult
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|QMachOParser
operator|::
name|NotSuitable
condition|)
return|return;
name|QVERIFY
argument_list|(
name|pos
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|len
operator|>=
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pos
operator|+
name|long
argument_list|(
name|len
argument_list|)
operator|<
name|data
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pos
operator|&
operator|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|-
literal|1
operator|)
argument_list|,
literal|0UL
argument_list|)
expr_stmt|;
name|void
modifier|*
name|value
init|=
operator|*
operator|(
name|void
operator|*
operator|*
operator|)
operator|(
name|data
operator|.
name|constData
argument_list|()
operator|+
name|pos
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|>
literal|4
condition|?
operator|(
name|void
operator|*
operator|)
operator|(
literal|0xc0ffeec0ffeeL
operator|)
else|:
operator|(
name|void
operator|*
operator|)
literal|0xc0ffee
argument_list|)
expr_stmt|;
comment|// now that we know it's valid, let's try to make it invalid
name|ulong
name|offeredlen
init|=
name|pos
decl_stmt|;
do|do
block|{
operator|--
name|offeredlen
expr_stmt|;
name|r
operator|=
name|QMachOParser
operator|::
name|parse
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|offeredlen
argument_list|,
name|f
operator|.
name|fileName
argument_list|()
argument_list|,
operator|&
name|errorString
argument_list|,
operator|&
name|pos
argument_list|,
operator|&
name|len
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|r
operator|==
name|QMachOParser
operator|::
name|NotSuitable
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Failed at size 0x%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|offeredlen
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|offeredlen
condition|)
do|;
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_function
DECL|function|loadGarbage
name|void
name|tst_QPluginLoader
operator|::
name|loadGarbage
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|QLatin1String
argument_list|(
literal|"elftest/garbage"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|".so"
argument_list|)
decl_stmt|;
name|QPluginLoader
name|lib
argument_list|(
name|QFINDTESTDATA
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lib
operator|.
name|load
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lib
operator|.
name|errorString
argument_list|()
operator|!=
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|relativePath
name|void
name|tst_QPluginLoader
operator|::
name|relativePath
parameter_list|()
block|{
comment|// Windows binaries run from release and debug subdirs, so we can't rely on the current dir.
specifier|const
name|QString
name|binDir
init|=
name|QFINDTESTDATA
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|binDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|addLibraryPath
argument_list|(
name|binDir
argument_list|)
expr_stmt|;
name|QPluginLoader
name|loader
argument_list|(
literal|"theplugin"
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// not recommended, instance() should do the job.
name|PluginInterface
modifier|*
name|instance
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePath
name|void
name|tst_QPluginLoader
operator|::
name|absolutePath
parameter_list|()
block|{
comment|// Windows binaries run from release and debug subdirs, so we can't rely on the current dir.
specifier|const
name|QString
name|binDir
init|=
name|QFINDTESTDATA
argument_list|(
literal|"bin"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|binDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|binDir
argument_list|)
argument_list|)
expr_stmt|;
name|QPluginLoader
name|loader
argument_list|(
name|binDir
operator|+
literal|"/theplugin"
argument_list|)
decl_stmt|;
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// not recommended, instance() should do the job.
name|PluginInterface
modifier|*
name|instance
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reloadPlugin
name|void
name|tst_QPluginLoader
operator|::
name|reloadPlugin
parameter_list|()
block|{
name|QPluginLoader
name|loader
decl_stmt|;
name|loader
operator|.
name|setFileName
argument_list|(
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
argument_list|)
expr_stmt|;
comment|//a plugin
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// not recommended, instance() should do the job.
name|PluginInterface
modifier|*
name|instance
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|instance
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|,
operator|&
name|QObject
operator|::
name|destroyed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
comment|// refcount reached 0, did really unload
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reload plugin
name|QVERIFY
argument_list|(
name|loader
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|isLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|PluginInterface
modifier|*
name|instance2
init|=
name|qobject_cast
argument_list|<
name|PluginInterface
operator|*
argument_list|>
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|instance2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|instance2
operator|->
name|pluginName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plugin ok"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loader
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preloadedPlugin_data
name|void
name|tst_QPluginLoader
operator|::
name|preloadedPlugin_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"doLoad"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"libname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"create-plugin"
argument_list|)
operator|<<
literal|false
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"load-plugin"
argument_list|)
operator|<<
literal|true
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
literal|"theplugin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"create-non-plugin"
argument_list|)
operator|<<
literal|false
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
literal|"tst_qpluginloaderlib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"load-non-plugin"
argument_list|)
operator|<<
literal|true
operator|<<
name|sys_qualifiedLibraryName
argument_list|(
literal|"tst_qpluginloaderlib"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|preloadedPlugin
name|void
name|tst_QPluginLoader
operator|::
name|preloadedPlugin
parameter_list|()
block|{
comment|// check that using QPluginLoader does not interfere with QLibrary
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|libname
argument_list|)
expr_stmt|;
name|QLibrary
name|lib
argument_list|(
name|libname
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lib
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
typedef|typedef
name|int
modifier|*
function_decl|(
modifier|*
name|pf_t
function_decl|)
parameter_list|()
function_decl|;
name|pf_t
name|pf
init|=
operator|(
name|pf_t
operator|)
name|lib
operator|.
name|resolve
argument_list|(
literal|"pointerAddress"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pf
argument_list|)
expr_stmt|;
name|int
modifier|*
name|pluginVariable
init|=
name|pf
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|pluginVariable
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
name|pluginVariable
argument_list|,
literal|0xc0ffee
argument_list|)
expr_stmt|;
block|{
comment|// load the plugin
name|QPluginLoader
name|loader
argument_list|(
name|libname
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|doLoad
argument_list|)
expr_stmt|;
if|if
condition|(
name|doLoad
operator|&&
name|loader
operator|.
name|load
argument_list|()
condition|)
block|{
comment|// unload() returns false because QLibrary has it loaded
name|QVERIFY
argument_list|(
operator|!
name|loader
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|lib
operator|.
name|isLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the library was unloaded behind our backs, the following will crash:
name|QCOMPARE
argument_list|(
operator|*
name|pluginVariable
argument_list|,
literal|0xc0ffee
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lib
operator|.
name|unload
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPluginLoader
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qpluginloader.moc"
end_include
end_unit
