begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_include
include|#
directive|include
file|<QThreadPool>
end_include
begin_class
DECL|class|tst_QTextCodec
class|class
name|tst_QTextCodec
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|threadSafety
parameter_list|()
function_decl|;
name|void
name|toUnicode_data
parameter_list|()
function_decl|;
name|void
name|toUnicode
parameter_list|()
function_decl|;
name|void
name|codecForName_data
parameter_list|()
function_decl|;
name|void
name|codecForName
parameter_list|()
function_decl|;
name|void
name|fromUnicode_data
parameter_list|()
function_decl|;
name|void
name|fromUnicode
parameter_list|()
function_decl|;
name|void
name|toUnicode_codecForHtml
parameter_list|()
function_decl|;
name|void
name|toUnicode_incremental
parameter_list|()
function_decl|;
name|void
name|codecForLocale
parameter_list|()
function_decl|;
name|void
name|asciiToIscii
parameter_list|()
specifier|const
function_decl|;
name|void
name|nonFlaggedCodepointFFFF
parameter_list|()
specifier|const
function_decl|;
name|void
name|flagF7808080
parameter_list|()
specifier|const
function_decl|;
name|void
name|nonFlaggedEFBFBF
parameter_list|()
specifier|const
function_decl|;
name|void
name|decode0D
parameter_list|()
specifier|const
function_decl|;
name|void
name|aliasForUTF16
parameter_list|()
specifier|const
function_decl|;
name|void
name|mibForTSCII
parameter_list|()
specifier|const
function_decl|;
name|void
name|codecForTSCII
parameter_list|()
specifier|const
function_decl|;
name|void
name|utf8Codec_data
parameter_list|()
function_decl|;
name|void
name|utf8Codec
parameter_list|()
function_decl|;
name|void
name|utf8bom_data
parameter_list|()
function_decl|;
name|void
name|utf8bom
parameter_list|()
function_decl|;
name|void
name|utf8stateful_data
parameter_list|()
function_decl|;
name|void
name|utf8stateful
parameter_list|()
function_decl|;
name|void
name|utfHeaders_data
parameter_list|()
function_decl|;
name|void
name|utfHeaders
parameter_list|()
function_decl|;
name|void
name|codecForHtml_data
parameter_list|()
function_decl|;
name|void
name|codecForHtml
parameter_list|()
function_decl|;
name|void
name|codecForUtfText_data
parameter_list|()
function_decl|;
name|void
name|codecForUtfText
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|void
name|toLocal8Bit
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|invalidNames
parameter_list|()
function_decl|;
name|void
name|checkAliases_data
parameter_list|()
function_decl|;
name|void
name|checkAliases
parameter_list|()
function_decl|;
name|void
name|moreToFromUnicode_data
parameter_list|()
function_decl|;
name|void
name|moreToFromUnicode
parameter_list|()
function_decl|;
name|void
name|shiftJis
parameter_list|()
function_decl|;
name|void
name|userCodec
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|toUnicode_data
name|void
name|tst_QTextCodec
operator|::
name|toUnicode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"codecName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"korean-eucKR"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"korean.txt"
argument_list|)
operator|<<
literal|"eucKR"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"utf8.txt"
argument_list|)
operator|<<
literal|"UTF-8"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toUnicode
name|void
name|tst_QTextCodec
operator|::
name|toUnicode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QByteArray
name|ba
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ba
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QString
name|uniString
init|=
name|c
operator|->
name|toUnicode
argument_list|(
name|ba
argument_list|)
decl_stmt|;
if|if
condition|(
name|codecName
operator|==
name|QLatin1String
argument_list|(
literal|"UTF-8"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|uniString
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|ba
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
argument_list|,
name|uniString
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|uniString
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
argument_list|,
name|c
operator|->
name|fromUnicode
argument_list|(
name|uniString
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|ch
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|->
name|toUnicode
argument_list|(
operator|&
name|ch
argument_list|,
literal|1
argument_list|)
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|->
name|toUnicode
argument_list|(
operator|&
name|ch
argument_list|,
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
literal|"File could not be opened: "
operator|+
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|codecForName_data
name|void
name|tst_QTextCodec
operator|::
name|codecForName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hint"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"actualCodecName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"iso88591"
operator|<<
literal|"ISO-8859-1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"iso88592"
operator|<<
literal|"ISO-8859-2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|" IsO(8)8/5*9-2 "
operator|<<
literal|"ISO-8859-2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|" IsO(8)8/5*2-9 "
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|"latin2"
operator|<<
literal|"ISO-8859-2"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForName
name|void
name|tst_QTextCodec
operator|::
name|codecForName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hint
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|actualCodecName
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|hint
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualCodecName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|codec
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|codec
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|codec
operator|->
name|name
argument_list|()
argument_list|)
argument_list|,
name|actualCodecName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromUnicode_data
name|void
name|tst_QTextCodec
operator|::
name|fromUnicode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"codecName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"eightBit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-1"
argument_list|)
operator|<<
literal|"ISO-8859-1"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-2"
argument_list|)
operator|<<
literal|"ISO-8859-2"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-3"
argument_list|)
operator|<<
literal|"ISO-8859-3"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-4"
argument_list|)
operator|<<
literal|"ISO-8859-4"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-5"
argument_list|)
operator|<<
literal|"ISO-8859-5"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-6"
argument_list|)
operator|<<
literal|"ISO-8859-6"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-7"
argument_list|)
operator|<<
literal|"ISO-8859-7"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-8"
argument_list|)
operator|<<
literal|"ISO-8859-8"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-9"
argument_list|)
operator|<<
literal|"ISO-8859-9"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-10"
argument_list|)
operator|<<
literal|"ISO-8859-10"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-13"
argument_list|)
operator|<<
literal|"ISO-8859-13"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-14"
argument_list|)
operator|<<
literal|"ISO-8859-14"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO-8859-15"
argument_list|)
operator|<<
literal|"ISO-8859-15"
operator|<<
literal|true
expr_stmt|;
comment|//    QTest::newRow("ISO-8859-16")<< "ISO-8859-16"<< true;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM850"
argument_list|)
operator|<<
literal|"IBM850"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM874"
argument_list|)
operator|<<
literal|"IBM874"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM866"
argument_list|)
operator|<<
literal|"IBM866"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1250"
argument_list|)
operator|<<
literal|"windows-1250"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1251"
argument_list|)
operator|<<
literal|"windows-1251"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1252"
argument_list|)
operator|<<
literal|"windows-1252"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1253"
argument_list|)
operator|<<
literal|"windows-1253"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1254"
argument_list|)
operator|<<
literal|"windows-1254"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1255"
argument_list|)
operator|<<
literal|"windows-1255"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1256"
argument_list|)
operator|<<
literal|"windows-1256"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1257"
argument_list|)
operator|<<
literal|"windows-1257"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-1258"
argument_list|)
operator|<<
literal|"windows-1258"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Apple Roman"
argument_list|)
operator|<<
literal|"Apple Roman"
operator|<<
literal|true
expr_stmt|;
comment|//QTest::newRow("WINSAMI2")<< "WINSAMI2"<< true;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TIS-620"
argument_list|)
operator|<<
literal|"TIS-620"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SJIS"
argument_list|)
operator|<<
literal|"SJIS"
operator|<<
literal|false
expr_stmt|;
comment|// all codecs from documentation
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Big5"
argument_list|)
operator|<<
literal|"Big5"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Big5-HKSCS"
argument_list|)
operator|<<
literal|"Big5-HKSCS"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CP949"
argument_list|)
operator|<<
literal|"CP949"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"windows-949"
argument_list|)
operator|<<
literal|"windows-949"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EUC-JP"
argument_list|)
operator|<<
literal|"EUC-JP"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EUC-KR"
argument_list|)
operator|<<
literal|"EUC-KR"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GB18030"
argument_list|)
operator|<<
literal|"GB18030"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HP-ROMAN8"
argument_list|)
operator|<<
literal|"HP-ROMAN8"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM 850"
argument_list|)
operator|<<
literal|"IBM 850"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM 866"
argument_list|)
operator|<<
literal|"IBM 866"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IBM 874"
argument_list|)
operator|<<
literal|"IBM 874"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ISO 2022-JP"
argument_list|)
operator|<<
literal|"ISO 2022-JP"
operator|<<
literal|false
expr_stmt|;
comment|//ISO 8859-1 to 10 and  ISO 8859-13 to 16 tested previously
comment|// Iscii-Bng, Dev, Gjr, Knd, Mlm, Ori, Pnj, Tlg, and Tml  tested in Iscii test
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KOI8-R"
argument_list|)
operator|<<
literal|"KOI8-R"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KOI8-U"
argument_list|)
operator|<<
literal|"KOI8-U"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Macintosh"
argument_list|)
operator|<<
literal|"Macintosh"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Shift-JIS"
argument_list|)
operator|<<
literal|"Shift-JIS"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TIS-620"
argument_list|)
operator|<<
literal|"TIS-620"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TSCII"
argument_list|)
operator|<<
literal|"TSCII"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
literal|"UTF-8"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
literal|"UTF-16"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-16BE"
argument_list|)
operator|<<
literal|"UTF-16BE"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-16LE"
argument_list|)
operator|<<
literal|"UTF-16LE"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
literal|"UTF-32"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-32BE"
argument_list|)
operator|<<
literal|"UTF-32BE"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-32LE"
argument_list|)
operator|<<
literal|"UTF-32LE"
operator|<<
literal|false
expr_stmt|;
comment|//Windows-1250 to 1258 tested previously
block|}
end_function
begin_function
DECL|function|fromUnicode
name|void
name|tst_QTextCodec
operator|::
name|fromUnicode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|eightBit
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Check if the reverse lookup is what we expect
if|if
condition|(
name|eightBit
condition|)
block|{
name|char
name|chars
index|[
literal|128
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
condition|;
operator|++
name|i
control|)
name|chars
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|128
expr_stmt|;
name|QString
name|s
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|chars
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QByteArray
name|c
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|size
argument_list|()
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|int
name|numberOfQuestionMarks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|128
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'?'
condition|)
operator|++
name|numberOfQuestionMarks
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|c
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|char
argument_list|(
name|i
operator|+
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|numberOfQuestionMarks
operator|!=
literal|128
argument_list|)
expr_stmt|;
block|}
comment|/*         If the encoding is a superset of ASCII, test that the byte         array is correct (no off by one, no trailing '\0').     */
name|QByteArray
name|result
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|QString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toUnicode_codecForHtml
name|void
name|tst_QTextCodec
operator|::
name|toUnicode_codecForHtml
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"QT4-crashtest.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForHtml
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|codec
operator|->
name|toUnicode
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// this line crashes
block|}
end_function
begin_function
DECL|function|toUnicode_incremental
name|void
name|tst_QTextCodec
operator|::
name|toUnicode_incremental
parameter_list|()
block|{
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0x90
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0xf4
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0x8f
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|ba
operator|+=
name|char
argument_list|(
literal|0xbd
argument_list|)
expr_stmt|;
name|QString
name|expected
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|QString
name|incremental
decl_stmt|;
name|QTextDecoder
modifier|*
name|utf8Decoder
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
operator|->
name|makeDecoder
argument_list|()
decl_stmt|;
name|QString
name|actual
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|utf8Decoder
operator|->
name|toUnicode
argument_list|(
operator|&
name|actual
argument_list|,
name|ba
operator|.
name|constData
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
operator|delete
name|utf8Decoder
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForLocale
name|void
name|tst_QTextCodec
operator|::
name|codecForLocale
parameter_list|()
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// The rest of this test is for Unix only
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
comment|// get a time string that is locale-encoded
name|QByteArray
name|originalLocaleEncodedTimeString
decl_stmt|;
name|originalLocaleEncodedTimeString
operator|.
name|resize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|time_t
name|t
decl_stmt|;
name|time
argument_list|(
operator|&
name|t
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|strftime
argument_list|(
name|originalLocaleEncodedTimeString
operator|.
name|data
argument_list|()
argument_list|,
name|originalLocaleEncodedTimeString
operator|.
name|size
argument_list|()
argument_list|,
literal|"%A%a%B%b%Z"
argument_list|,
name|localtime
argument_list|(
operator|&
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|originalLocaleEncodedTimeString
operator|.
name|resize
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|QString
name|unicodeTimeString
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|originalLocaleEncodedTimeString
argument_list|)
decl_stmt|;
name|QByteArray
name|localeEncodedTimeString
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|unicodeTimeString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|localeEncodedTimeString
argument_list|,
name|originalLocaleEncodedTimeString
argument_list|)
expr_stmt|;
comment|// find a codec that is not the codecForLocale()
name|QTextCodec
modifier|*
name|codec2
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|int
name|mib
decl|,
name|QTextCodec
operator|::
name|availableMibs
argument_list|()
control|)
block|{
if|if
condition|(
name|mib
operator|!=
name|codec
operator|->
name|mibEnum
argument_list|()
condition|)
block|{
name|codec2
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|mib
argument_list|)
expr_stmt|;
if|if
condition|(
name|codec2
condition|)
break|break;
block|}
block|}
comment|// Only run the rest of the test if we could find a codec that is not
comment|// already the codecForLocale().
if|if
condition|(
name|codec2
condition|)
block|{
comment|// set it, codecForLocale() should return it now
name|QTextCodec
operator|::
name|setCodecForLocale
argument_list|(
name|codec2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
argument_list|,
name|codec2
argument_list|)
expr_stmt|;
comment|// reset back to the default
name|QTextCodec
operator|::
name|setCodecForLocale
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|asciiToIscii
name|void
name|tst_QTextCodec
operator|::
name|asciiToIscii
parameter_list|()
specifier|const
block|{
comment|/* Add all low, 7-bit ASCII characters. */
name|QString
name|ascii
decl_stmt|;
specifier|const
name|int
name|len
init|=
literal|0xA0
operator|-
literal|1
decl_stmt|;
name|ascii
operator|.
name|resize
argument_list|(
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
name|ascii
index|[
name|i
index|]
operator|=
name|QChar
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|isciiCodecs
index|[]
init|=
block|{
literal|"Iscii-Mlm"
block|,
literal|"Iscii-Knd"
block|,
literal|"Iscii-Tlg"
block|,
literal|"Iscii-Tml"
block|,
literal|"Iscii-Ori"
block|,
literal|"Iscii-Gjr"
block|,
literal|"Iscii-Pnj"
block|,
literal|"Iscii-Bng"
block|,
literal|"Iscii-Dev"
block|}
decl_stmt|;
specifier|const
name|int
name|isciiCodecsLen
init|=
sizeof|sizeof
argument_list|(
name|isciiCodecs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|isciiCodecsLen
condition|;
operator|++
name|i
control|)
block|{
comment|/* For each codec. */
specifier|const
name|QTextCodec
modifier|*
specifier|const
name|textCodec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|isciiCodecs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|textCodec
condition|)
name|QSKIP
argument_list|(
literal|"No ISCII codecs available."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i2
init|=
literal|0
init|;
name|i2
operator|<
name|len
condition|;
operator|++
name|i2
control|)
block|{
comment|/* For each character in ascii. */
specifier|const
name|QChar
name|c
argument_list|(
name|ascii
index|[
name|i2
index|]
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|textCodec
operator|->
name|canEncode
argument_list|(
name|c
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to encode %1 with encoding %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|c
operator|.
name|unicode
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|textCodec
operator|->
name|name
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|textCodec
operator|->
name|canEncode
argument_list|(
name|ascii
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed for full string with encoding %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|textCodec
operator|->
name|name
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nonFlaggedCodepointFFFF
name|void
name|tst_QTextCodec
operator|::
name|nonFlaggedCodepointFFFF
parameter_list|()
specifier|const
block|{
comment|//Check that the code point 0xFFFF (=non-character code 0xEFBFBF) is not flagged
specifier|const
name|QChar
name|ch
argument_list|(
literal|0xFFFF
argument_list|)
decl_stmt|;
name|QString
name|input
argument_list|(
name|ch
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
specifier|const
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// UTF-8
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|asDecoded
argument_list|(
name|codec
operator|->
name|fromUnicode
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|asDecoded
argument_list|,
name|QByteArray
argument_list|(
literal|"\357\277\277"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|ffff
argument_list|(
literal|"\357\277\277"
argument_list|)
decl_stmt|;
name|QTextCodec
operator|::
name|ConverterState
name|state
argument_list|(
name|QTextCodec
operator|::
name|ConvertInvalidToNull
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|ffff
operator|.
name|constData
argument_list|()
argument_list|,
name|ffff
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
operator|==
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"EFBFBF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flagF7808080
name|void
name|tst_QTextCodec
operator|::
name|flagF7808080
parameter_list|()
specifier|const
block|{
comment|/* This test case stems from test not-wf-sa-170, tests/qxmlstream/XML-Test-Suite/xmlconf/xmltest/not-wf/sa/166.xml,      * whose description reads:      *      * "Four byte UTF-8 encodings can encode UCS-4 characters      *  which are beyond the range of legal XML characters      *  (and can't be expressed in Unicode surrogate pairs).      *  This document holds such a character."      *      *  In binary, this is:      *  11110111100000001000000010000000      *  *       *       *       *      *  11110www10xxxxxx10yyyyyy10zzzzzz      *      *  With multibyte logic removed it is the codepoint 0x1C0000.      */
name|QByteArray
name|input
decl_stmt|;
name|input
operator|.
name|resize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|input
index|[
literal|0
index|]
operator|=
name|char
argument_list|(
literal|0xF7
argument_list|)
expr_stmt|;
name|input
index|[
literal|1
index|]
operator|=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|input
index|[
literal|2
index|]
operator|=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|input
index|[
literal|3
index|]
operator|=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
specifier|const
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// UTF-8
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
comment|//QVERIFY(!codec->canEncode(QChar(0x1C0000)));
name|QTextCodec
operator|::
name|ConverterState
name|state
argument_list|(
name|QTextCodec
operator|::
name|ConvertInvalidToNull
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|input
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
argument_list|,
name|QString
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|,
name|QChar
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonFlaggedEFBFBF
name|void
name|tst_QTextCodec
operator|::
name|nonFlaggedEFBFBF
parameter_list|()
specifier|const
block|{
comment|/* Check that the codec does NOT flag EFBFBF.      * This is a regression test; see QTBUG-33229      */
name|QByteArray
name|validInput
decl_stmt|;
name|validInput
operator|.
name|resize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|validInput
index|[
literal|0
index|]
operator|=
name|char
argument_list|(
literal|0xEF
argument_list|)
expr_stmt|;
name|validInput
index|[
literal|1
index|]
operator|=
name|char
argument_list|(
literal|0xBF
argument_list|)
expr_stmt|;
name|validInput
index|[
literal|2
index|]
operator|=
name|char
argument_list|(
literal|0xBF
argument_list|)
expr_stmt|;
specifier|const
name|QTextCodec
modifier|*
specifier|const
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// UTF-8
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
block|{
comment|//QVERIFY(!codec->canEncode(QChar(0xFFFF)));
name|QTextCodec
operator|::
name|ConverterState
name|state
argument_list|(
name|QTextCodec
operator|::
name|ConvertInvalidToNull
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|validInput
operator|.
name|constData
argument_list|()
argument_list|,
name|validInput
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
operator|==
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"EFBFBF"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|start
argument_list|(
literal|"<?pi "
argument_list|)
decl_stmt|;
name|start
operator|.
name|append
argument_list|(
name|validInput
argument_list|)
expr_stmt|;
name|start
operator|.
name|append
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
block|}
comment|// Check that 0xEFBFBF is correctly decoded when preceded by an arbitrary character
block|{
name|QByteArray
name|start
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|start
operator|.
name|append
argument_list|(
name|validInput
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|ConverterState
name|state
argument_list|(
name|QTextCodec
operator|::
name|ConvertInvalidToNull
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|start
operator|.
name|constData
argument_list|()
argument_list|,
name|start
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"B"
argument_list|)
operator|.
name|append
argument_list|(
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"EFBFBF"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|decode0D
name|void
name|tst_QTextCodec
operator|::
name|decode0D
parameter_list|()
specifier|const
block|{
name|QByteArray
name|input
decl_stmt|;
name|input
operator|.
name|resize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|input
index|[
literal|0
index|]
operator|=
literal|'A'
expr_stmt|;
name|input
index|[
literal|1
index|]
operator|=
literal|'\r'
expr_stmt|;
name|input
index|[
literal|2
index|]
operator|=
literal|'B'
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|input
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|aliasForUTF16
name|void
name|tst_QTextCodec
operator|::
name|aliasForUTF16
parameter_list|()
specifier|const
block|{
name|QVERIFY
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-16"
argument_list|)
operator|->
name|aliases
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mibForTSCII
name|void
name|tst_QTextCodec
operator|::
name|mibForTSCII
parameter_list|()
specifier|const
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"TSCII"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|mibEnum
argument_list|()
argument_list|,
literal|2107
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForTSCII
name|void
name|tst_QTextCodec
operator|::
name|codecForTSCII
parameter_list|()
specifier|const
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|2107
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|mibEnum
argument_list|()
argument_list|,
literal|2107
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromInvalidUtf8Sequence
specifier|static
name|QString
name|fromInvalidUtf8Sequence
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
return|return
name|QString
argument_list|()
operator|.
name|fill
argument_list|(
name|QChar
operator|::
name|ReplacementCharacter
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// copied from tst_QString::fromUtf8_data()
end_comment
begin_function
DECL|function|utf8Codec_data
name|void
name|tst_QTextCodec
operator|::
name|utf8Codec_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"len"
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str0-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefgh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\366\344\374\326\304\334\370\346\345\330\306\305"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str1-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\303\266\303\244\303\274\303\226\303\204\303\234\303\270\303\246\303\245\303\230\303\206\303\205"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\366\344\374\326\304"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05e9
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d3
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x05d2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\327\251\327\223\327\222"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x05e9
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str2-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\327\251\327\223\327\222"
argument_list|)
operator|<<
name|str
operator|<<
literal|2
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x20ac
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|" some text"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\202\254 some text"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x20ac
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|" some "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"str3-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\202\254 some text"
argument_list|)
operator|<<
name|str
operator|<<
literal|9
expr_stmt|;
name|str
operator|=
literal|"hello"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x68
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x61
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hello\344h\344\344\366\344a\304"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid utf8-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hello\344h\344\344\366\344a\304"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|str
operator|=
literal|"Prohl"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|"e"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|" plugin"
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
literal|" Netscape"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task28417"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Prohl\355\276e\350 plugin\371 Netscape"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"task28417-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Prohl\355\276e\350 plugin\371 Netscape"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
comment|// QTest::newRow("null5")<< QByteArray()<< QString()<< 5;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\0abcd"
argument_list|,
literal|5
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ab"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ab\0cd"
argument_list|,
literal|5
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|str
operator|=
literal|"Old Italic: "
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf00
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf01
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf02
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf03
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdf04
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"surrogate"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Old Italic: \360\220\214\200\360\220\214\201\360\220\214\202\360\220\214\203\360\220\214\204"
argument_list|)
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"surrogate-len"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Old Italic: \360\220\214\200\360\220\214\201\360\220\214\202\360\220\214\203\360\220\214\204"
argument_list|)
operator|<<
name|str
operator|.
name|left
argument_list|(
literal|16
argument_list|)
operator|<<
literal|20
expr_stmt|;
comment|// from http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html
comment|// 2.1.1 U+00000000
name|QByteArray
name|utf8
decl_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x00
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|Null
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
literal|1
expr_stmt|;
comment|// 2.1.2 U+00000080
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc2
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.1.3 U+00000800
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xa0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x800
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.1.4 U+00010000
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x90
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xd800
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdc00
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.1.5 U+00200000 (not a valid Unicode character)
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x88
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.1.6 U+04000000 (not a valid Unicode character)
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x84
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.1.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.1 U+0000007F
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x7f
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x7f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.2 U+000007FF
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xdf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0x7ff
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.3 U+000FFFF - non-character code
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.4 U+001FFFFF
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf7
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.5 U+03FFFFFF (not a valid Unicode character)
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.2.6 U+7FFFFFFF
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.2.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.3.1 U+0000D7FF
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x9f
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0xd7ff
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.3.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.3.2 U+0000E000
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xee
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
literal|0xe000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.3.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.3.3 U+0000FFFD
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbd
argument_list|)
expr_stmt|;
name|str
operator|=
name|QChar
argument_list|(
name|QChar
operator|::
name|ReplacementCharacter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.3.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.3.4 U+0010FFFD
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf4
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x8f
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbd
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdbff
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0xdffd
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.3.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 2.3.5 U+00110000
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf4
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x90
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 2.3.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.6
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.7
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.8
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.8"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.1.9
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0x80
init|;
name|i
operator|<=
literal|0xbf
condition|;
operator|++
name|i
control|)
name|utf8
operator|+=
name|i
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.1.9"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.2.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0xc8
init|;
name|i
operator|<=
literal|0xdf
condition|;
operator|++
name|i
control|)
block|{
name|utf8
operator|+=
name|i
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x20
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x0020
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.2.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.2.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0xe0
init|;
name|i
operator|<=
literal|0xef
condition|;
operator|++
name|i
control|)
block|{
name|utf8
operator|+=
name|i
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x20
argument_list|)
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x0020
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.2.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.2.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0xf0
init|;
name|i
operator|<=
literal|0xf7
condition|;
operator|++
name|i
control|)
block|{
name|utf8
operator|+=
name|i
expr_stmt|;
name|utf8
operator|+=
literal|0x20
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x0020
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.2.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.2.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0xf8
init|;
name|i
operator|<=
literal|0xfb
condition|;
operator|++
name|i
control|)
block|{
name|utf8
operator|+=
name|i
expr_stmt|;
name|utf8
operator|+=
literal|0x20
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x0020
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.2.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.2.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0xfc
init|;
name|i
operator|<=
literal|0xfd
condition|;
operator|++
name|i
control|)
block|{
name|utf8
operator|+=
name|i
expr_stmt|;
name|utf8
operator|+=
literal|0x20
expr_stmt|;
name|str
operator|+=
name|QChar
operator|::
name|ReplacementCharacter
expr_stmt|;
name|str
operator|+=
name|QChar
argument_list|(
literal|0x0020
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.2.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc0
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.1-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.2-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.2-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
literal|0x30
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.2-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.3-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.4-7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-8"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.5-9"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.6
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xdf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.6-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.7
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.7-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.7-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.7-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.8
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf7
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf7
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf7
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.8-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.9
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.9-7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.3.10
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-8"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x30
argument_list|)
expr_stmt|;
name|str
operator|+=
literal|0x30
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.3.10-9"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xdf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf7
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfb
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfd
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.5.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfe
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.5.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.5.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xff
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.5.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 3.5.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfe
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfe
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xff
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 3.5.2-1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.1.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.1.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.1.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.1.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.1.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.1.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.1.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.1.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.1.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.1.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.2.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc1
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.2.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.2.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x9f
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.2.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.2.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x8f
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.2.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.2.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x87
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.2.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.2.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x83
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.2.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.3.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xc0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.3.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.3.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xe0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.3.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.3.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.3.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.3.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xf8
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.3.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 4.3.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xfc
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 4.3.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xa0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xad
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xae
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xb0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.6
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbe
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.1.7
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.1.7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.1
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xa0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xb0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.2
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xa0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.3
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xad
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xb0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.3"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.4
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xad
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.4"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.5
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xae
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xb0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.5"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.6
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xae
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.6"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.7
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xb0
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0x80
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.7"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.2.8
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xaf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xed
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|str
operator|=
name|fromInvalidUtf8Sequence
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.2.8"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.3.1 - non-character code
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbe
argument_list|)
expr_stmt|;
comment|//str = QChar(QChar::ReplacementCharacter);
name|str
operator|=
name|QChar
argument_list|(
literal|0xfffe
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.3.1"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
comment|// 5.3.2 - non-character code
name|utf8
operator|.
name|clear
argument_list|()
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xef
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
name|utf8
operator|+=
name|char
argument_list|(
literal|0xbf
argument_list|)
expr_stmt|;
comment|//str = QChar(QChar::ReplacementCharacter);
name|str
operator|=
name|QChar
argument_list|(
literal|0xffff
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.w3.org/2001/06/utf-8-wrong/UTF-8-test.html 5.3.2"
argument_list|)
operator|<<
name|utf8
operator|<<
name|str
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8Codec
name|void
name|tst_QTextCodec
operator|::
name|utf8Codec
parameter_list|()
block|{
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// UTF-8
name|QVERIFY
argument_list|(
name|codec
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|utf8
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|utf8
operator|.
name|constData
argument_list|()
argument_list|,
name|len
operator|<
literal|0
condition|?
name|qstrlen
argument_list|(
name|utf8
operator|.
name|constData
argument_list|()
argument_list|)
else|:
name|len
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|str
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|utf8
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
name|utf8
operator|.
name|constData
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8bom_data
name|void
name|tst_QTextCodec
operator|::
name|utf8bom_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\302\240"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\240"
argument_list|)
expr_stmt|;
block|{
specifier|static
specifier|const
name|ushort
name|data
index|[]
init|=
block|{
literal|0x201d
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nobom 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\342\200\235"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|static
specifier|const
name|ushort
name|data
index|[]
init|=
block|{
literal|0xf000
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bom1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\357\200\200"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|static
specifier|const
name|ushort
name|data
index|[]
init|=
block|{
literal|0xfec0
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bom2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\357\273\200"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal-bom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\357\273\277a"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|{
specifier|static
specifier|const
name|ushort
name|data
index|[]
init|=
block|{
literal|0x61
block|,
literal|0xfeff
block|,
literal|0x62
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"middle-bom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\357\273\277b"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|utf8bom
name|void
name|tst_QTextCodec
operator|::
name|utf8bom
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
specifier|const
name|codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
comment|// UTF-8
name|QVERIFY
argument_list|(
name|codec
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|ConverterState
name|state
decl_stmt|;
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|toUnicode
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8stateful_data
name|void
name|tst_QTextCodec
operator|::
name|utf8stateful_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"buffer1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"buffer2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// null QString indicates decoder error
comment|// valid buffer continuations
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of2+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xa0"
argument_list|)
operator|<<
literal|"\xc2\xa0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of3+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xa0\x80"
argument_list|)
operator|<<
literal|"\xe0\xa0\x80"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of3+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0\xa0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80"
argument_list|)
operator|<<
literal|"\xe0\xa0\x80"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of4+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\220\210\203"
argument_list|)
operator|<<
literal|"\360\220\210\203"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of4+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\210\203"
argument_list|)
operator|<<
literal|"\360\220\210\203"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3of4+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220\210"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\203"
argument_list|)
operator|<<
literal|"\360\220\210\203"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1ofBom+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xef"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xbb\xbf"
argument_list|)
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2ofBom+valid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xef\xbb"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xbf"
argument_list|)
operator|<<
literal|""
expr_stmt|;
comment|// invalid continuation
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of2+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of3+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of3+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0\xa0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of4+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of4+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3of4+invalid"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220\210"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// invalid: sequence too short (the empty second buffer causes a state reset)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of2+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc2"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of3+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of3+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0\xa0"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1of4+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2of4+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3of4+empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\360\220\210"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// overlong sequence:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-1of2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-1of3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x81\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-2of3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xe0\x81"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-1of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x81\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-2of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf0\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x81\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overlong-3of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf0\x80\x81"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// out of range:
comment|// leading byte 0xF4 can produce codepoints above U+10FFFF, which aren't valid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange1-1of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x90\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange1-2of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf4\x90"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange1-3of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf4\x90\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange2-1of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x90\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange2-2of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf5\x90"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange2-3of4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf5\x90\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-1of5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x88\x80\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-2of5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf8\x88"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-3of5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf8\x88\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-4of5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf8\x88\x80\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-1of6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x84\x80\x80\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-2of6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfc\x84"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-3of6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfc\x84\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-4of6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfc\x84\x80\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"outofrange-5of6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfc\x84\x80\x80\x80"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8stateful
name|void
name|tst_QTextCodec
operator|::
name|utf8stateful
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|buffer1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|buffer2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|utf8codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"utf-8"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|utf8codec
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|ConverterState
name|state
decl_stmt|;
name|memset
argument_list|(
operator|&
name|state
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|state
argument_list|)
expr_stmt|;
name|QString
name|decoded1
init|=
name|utf8codec
operator|->
name|toUnicode
argument_list|(
name|buffer1
argument_list|,
name|buffer1
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isNull
argument_list|()
condition|)
block|{
comment|// the decoder may have found an early error (invalidChars> 0):
comment|// if it has, remainingChars == 0;
comment|// if it hasn't, then it must have a state
name|QVERIFY2
argument_list|(
operator|(
name|state
operator|.
name|remainingChars
operator|==
literal|0
operator|)
operator|!=
operator|(
name|state
operator|.
name|invalidChars
operator|==
literal|0
operator|)
argument_list|,
literal|"remainingChars = "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|state
operator|.
name|remainingChars
argument_list|)
operator|+
literal|"; invalidChars = "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|state
operator|.
name|invalidChars
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|state
operator|.
name|remainingChars
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|state
operator|.
name|invalidChars
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QString
name|decoded2
init|=
name|utf8codec
operator|->
name|toUnicode
argument_list|(
name|buffer2
argument_list|,
name|buffer2
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|state
operator|.
name|remainingChars
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|state
operator|.
name|invalidChars
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|decoded1
operator|+
name|decoded2
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|utfHeaders_data
name|void
name|tst_QTextCodec
operator|::
name|utfHeaders_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"codecName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"unicode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"toUnicode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 bom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xef\xbb\xbfhello"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 bom ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xef\xbb\xbfhello"
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 nobom ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-8"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\0h\0e\0l"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfeh\0e\0l\0"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0h\0e\0l"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom be ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\0h\0e\0l"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"h\0e\0l\0"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom le ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfeh\0e\0l\0"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-be bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16BE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\0h\0e\0l"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-be nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16BE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0h\0e\0l"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-be bom be ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16BE"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\0h\0e\0l"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-le bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16LE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfeh\0e\0l\0"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-le nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16LE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"h\0e\0l\0"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-le bom le ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-16LE"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfeh\0e\0l\0"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\xfe\xff\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|16
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\0\0h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|16
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom be ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\xfe\xff\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|16
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom le ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\0\0h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|16
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-be bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32BE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\xfe\xff\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|16
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-be nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32BE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-be bom be ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32BE"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\xfe\xff\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|16
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-le bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32LE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\0\0h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|16
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-le nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32LE"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-le bom le ignore header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"UTF-32LE"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextCodec
operator|::
name|IgnoreHeader
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\0\0h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|16
argument_list|)
operator|<<
operator|(
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfeff
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hel"
argument_list|)
operator|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utfHeaders
name|void
name|tst_QTextCodec
operator|::
name|utfHeaders
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|codec
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QTextCodec
operator|::
name|ConversionFlags
name|cFlags
init|=
name|QTextCodec
operator|::
name|ConversionFlags
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|QTextCodec
operator|::
name|ConverterState
name|state
argument_list|(
name|cFlags
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|toUnicode
argument_list|)
expr_stmt|;
name|QLatin1String
name|ignoreReverseTestOn
init|=
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|BigEndian
operator|)
condition|?
name|QLatin1String
argument_list|(
literal|" le"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|" be"
argument_list|)
decl_stmt|;
name|QString
name|rowName
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|toUnicode
condition|)
block|{
name|QString
name|result
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|encoded
operator|.
name|constData
argument_list|()
argument_list|,
name|encoded
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|length
argument_list|()
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rowName
operator|.
name|endsWith
argument_list|(
literal|"nobom"
argument_list|)
operator|&&
operator|!
name|rowName
operator|.
name|contains
argument_list|(
name|ignoreReverseTestOn
argument_list|)
condition|)
block|{
name|QTextCodec
operator|::
name|ConverterState
name|state2
argument_list|(
name|cFlags
argument_list|)
decl_stmt|;
name|QByteArray
name|reencoded
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|unicode
operator|.
name|unicode
argument_list|()
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reencoded
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QByteArray
name|result
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|unicode
operator|.
name|unicode
argument_list|()
argument_list|,
name|unicode
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|state
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|codecForHtml_data
name|void
name|tst_QTextCodec
operator|::
name|codecForHtml_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"html"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"defaultCodecMib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedMibEnum"
argument_list|)
expr_stmt|;
name|int
name|noDefault
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|fallback
init|=
literal|4
decl_stmt|;
comment|// latin 1
name|QByteArray
name|html
init|=
literal|"<html><head></head><body>blah</body></html>"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no charset, latin 1"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no charset, default UTF-8"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=ISO-8859-15\" /></head></html>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin 15, default UTF-8"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|111
expr_stmt|;
name|html
operator|=
literal|"<html><head><meta content=\"text/html; charset=ISO-8859-15\" http-equiv=\"content-type\" /></head></html>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin 15, default UTF-8 (#2)"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|111
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8, no default"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset=\"ISO_8859-1:1987\"><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin 1, no default"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|4
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><meta charset=\"utf-8\"><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8, no default (#2)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8/></head></html>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8, no quotes"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset='UTF-8'/></head></html>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8, single quotes"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset=utf-8><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8,> terminator"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset= utf-8><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8,> terminator with spaces"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset= utf/8><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTF-8,> teminator with early backslash)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
literal|106
expr_stmt|;
comment|// Test invalid charsets.
name|html
operator|=
literal|"<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=invalid-foo\" /></head></html>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset, no default"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset, default UTF-8"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><meta charset=\""
expr_stmt|;
name|html
operator|.
name|prepend
argument_list|(
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|' '
argument_list|,
literal|512
operator|-
name|html
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset (large header)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><meta charset=\"utf-8"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset (no closing double quote)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9,chrome=1\"><meta charset='utf-8"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset (no closing single quote)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset=utf-8 foo=bar><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid (space terminator)"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta charset=\" utf' 8 /><title>Test</title></head>"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid charset, early terminator (')"
argument_list|)
operator|<<
name|html
operator|<<
name|noDefault
operator|<<
name|fallback
expr_stmt|;
specifier|const
name|char
name|src
index|[]
init|=
block|{
name|char
argument_list|(
literal|0xff
argument_list|)
block|,
name|char
argument_list|(
literal|0xfe
argument_list|)
block|,
name|char
argument_list|(
literal|0x7a
argument_list|)
block|,
name|char
argument_list|(
literal|0x03
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|html
operator|=
name|src
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek text UTF-16LE"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|1014
expr_stmt|;
name|html
operator|=
literal|"<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"><span style=\"color: rgb(0, 0, 0); font-family: "
literal|"'Galatia SIL'; font-size: 27px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; "
literal|"line-height: normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: "
literal|"auto; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; display: inline !important; float: "
literal|"none;\">&#x37b</span>\000"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek text UTF-8"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|106
expr_stmt|;
name|html
operator|=
literal|"<!DOCTYPE html><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=unicode\">"
literal|"<head/><body><p>bla</p></body></html>"
expr_stmt|;
comment|// QTBUG-41998, ICU will return UTF-16.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"legacy unicode UTF-8"
argument_list|)
operator|<<
name|html
operator|<<
literal|106
operator|<<
literal|106
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForHtml
name|void
name|tst_QTextCodec
operator|::
name|codecForHtml
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|defaultCodecMib
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedMibEnum
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultCodecMib
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForHtml
argument_list|(
name|html
argument_list|,
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|defaultCodecMib
argument_list|)
argument_list|)
operator|->
name|mibEnum
argument_list|()
argument_list|,
name|expectedMibEnum
argument_list|)
expr_stmt|;
else|else
comment|// Test one parameter version when there is no default codec.
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForHtml
argument_list|(
name|html
argument_list|)
operator|->
name|mibEnum
argument_list|()
argument_list|,
name|expectedMibEnum
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForUtfText_data
name|void
name|tst_QTextCodec
operator|::
name|codecForUtfText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"detected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"mib"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 bom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xef\xbb\xbfhello"
argument_list|)
operator|<<
literal|true
operator|<<
literal|106
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\0h\0e\0l"
argument_list|,
literal|8
argument_list|)
operator|<<
literal|true
operator|<<
literal|1013
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfeh\0e\0l\0"
argument_list|,
literal|8
argument_list|)
operator|<<
literal|true
operator|<<
literal|1014
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0h\0e\0l"
argument_list|,
literal|6
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom be"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\xfe\xff\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|16
argument_list|)
operator|<<
literal|true
operator|<<
literal|1018
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 bom le"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\0\0h\0\0\0e\0\0\0l\0\0\0"
argument_list|,
literal|16
argument_list|)
operator|<<
literal|true
operator|<<
literal|1019
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32 nobom"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0\0\0h\0\0\0e\0\0\0l"
argument_list|,
literal|12
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|codecForUtfText
name|void
name|tst_QTextCodec
operator|::
name|codecForUtfText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|detected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|mib
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForUtfText
argument_list|(
name|encoded
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|detected
condition|)
name|QCOMPARE
argument_list|(
name|codec
operator|->
name|mibEnum
argument_list|()
argument_list|,
name|mib
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|codec
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_function
DECL|function|toLocal8Bit
name|void
name|tst_QTextCodec
operator|::
name|toLocal8Bit
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"No qprocess support"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"echo/echo"
argument_list|)
expr_stmt|;
name|QString
name|string
argument_list|(
name|QChar
argument_list|(
literal|0x410
argument_list|)
argument_list|)
decl_stmt|;
name|process
operator|.
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|string
operator|.
name|utf16
argument_list|()
argument_list|,
name|string
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|process
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|LoadAndConvert
class|class
name|LoadAndConvert
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|LoadAndConvert
name|LoadAndConvert
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|source
parameter_list|,
name|QByteArray
modifier|*
name|destination
parameter_list|)
member_init_list|:
name|codecName
argument_list|(
name|source
argument_list|)
member_init_list|,
name|target
argument_list|(
name|destination
argument_list|)
block|{}
DECL|member|codecName
name|QByteArray
name|codecName
decl_stmt|;
DECL|member|target
name|QByteArray
modifier|*
name|target
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING"
operator|<<
name|codecName
operator|<<
literal|"not found?"
expr_stmt|;
return|return;
block|}
name|QString
name|str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|codecName
argument_list|)
decl_stmt|;
name|QByteArray
name|b
init|=
name|c
operator|->
name|fromUnicode
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|c
operator|->
name|toUnicode
argument_list|(
name|b
argument_list|)
expr_stmt|;
operator|*
name|target
operator|=
name|codecName
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|LoadAndConvertMIB
class|class
name|LoadAndConvertMIB
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|LoadAndConvertMIB
name|LoadAndConvertMIB
parameter_list|(
name|int
name|mib
parameter_list|,
name|int
modifier|*
name|target
parameter_list|)
member_init_list|:
name|mib
argument_list|(
name|mib
argument_list|)
member_init_list|,
name|target
argument_list|(
name|target
argument_list|)
block|{}
DECL|member|mib
name|int
name|mib
decl_stmt|;
DECL|member|target
name|int
modifier|*
name|target
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
name|mib
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"WARNING"
operator|<<
name|mib
operator|<<
literal|"not found?"
expr_stmt|;
return|return;
block|}
name|QString
name|str
init|=
name|QString
operator|::
name|number
argument_list|(
name|mib
argument_list|)
decl_stmt|;
name|QByteArray
name|b
init|=
name|c
operator|->
name|fromUnicode
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|c
operator|->
name|toUnicode
argument_list|(
name|b
argument_list|)
expr_stmt|;
operator|*
name|target
operator|=
name|mib
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|threadSafety
name|void
name|tst_QTextCodec
operator|::
name|threadSafety
parameter_list|()
block|{
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|codecList
init|=
name|QTextCodec
operator|::
name|availableCodecs
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|mibList
init|=
name|QTextCodec
operator|::
name|availableMibs
argument_list|()
decl_stmt|;
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|setMaxThreadCount
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QByteArray
argument_list|>
name|res
decl_stmt|;
name|res
operator|.
name|resize
argument_list|(
name|codecList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codecList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|start
argument_list|(
operator|new
name|LoadAndConvert
argument_list|(
name|codecList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|res
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|int
argument_list|>
name|res2
decl_stmt|;
name|res2
operator|.
name|resize
argument_list|(
name|mibList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mibList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|start
argument_list|(
operator|new
name|LoadAndConvertMIB
argument_list|(
name|mibList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|res2
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for all threads to finish working
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|waitForDone
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|toList
argument_list|()
argument_list|,
name|codecList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res2
operator|.
name|toList
argument_list|()
argument_list|,
name|mibList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidNames
name|void
name|tst_QTextCodec
operator|::
name|invalidNames
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"-"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"\1a\2b\3a\4d\5c\6s\7a\xffr\xec_\x9c_"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"don't exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|huge
init|=
literal|"azertyuiop^$qsdfghjklm<wxcvbn,;:=1234567890ï¿½_"
decl_stmt|;
name|huge
operator|=
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
expr_stmt|;
name|huge
operator|=
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
expr_stmt|;
name|huge
operator|=
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
expr_stmt|;
name|huge
operator|=
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
operator|+
name|huge
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|huge
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkAliases_data
name|void
name|tst_QTextCodec
operator|::
name|checkAliases_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"codecName"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|codecList
init|=
name|QTextCodec
operator|::
name|availableCodecs
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|a
decl|,
name|codecList
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|a
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|a
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|checkAliases
name|void
name|tst_QTextCodec
operator|::
name|checkAliases
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|c
operator|->
name|name
argument_list|()
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|a
decl|,
name|c
operator|->
name|aliases
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|a
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|moreToFromUnicode_data
name|void
name|tst_QTextCodec
operator|::
name|moreToFromUnicode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"codecName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"testData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"russian"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\x00"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"arabic"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA4\xAC\xAD\xBB\xBF\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA6\xA7\xA8\xA9\xAB\xAC\xAD\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"turkish"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QByteArray
name|sms7bit_ba
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|0x7f
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|'\x1b'
condition|)
block|{
name|sms7bit_ba
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBF\xC0\xC1\xC2\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"russian 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"arabic 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA4\xAC\xAD\xBB\xBF\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA6\xA7\xA8\xA9\xAB\xAC\xAD\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|QByteArray iso8859_11_ba;     for (int x=0x20; x<=0x7f; ++x) {         iso8859_11_ba.append(x);     }     for (int x=0xa0; x<0xff; ++x) {         if ((x>=0xdb&& x<0xdf) || x>0xfb){             continue;         }         iso8859_11_ba.append(x);     }     QTest::newRow("latin-thai")<< QByteArray("ISO-8859-11")<< iso8859_11_ba;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-13"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"celtic"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ISO-8859-15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
comment|//    QTest::newRow("latin10")<< QByteArray("ISO-8859-16")
comment|//<< QByteArray("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF");
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp850"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP850"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp874"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP874"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x85\x91\x92\x93\x94\x95\x96\x97\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1250"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1250"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x84\x85\x86\x87\x89\x8A\x8B\x8C\x8D\x8E\x8F\x91\x92\x93\x94\x95\x96\x97\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1251"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1251"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1252"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1252"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8E\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1253"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1253"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x83\x84\x85\x86\x87\x89\x8B\x91\x92\x93\x94\x95\x96\x97\x99\x9B\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1254"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1254"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1255"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1255"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x83\x84\x85\x86\x87\x88\x89,x8B\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9B\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFD\xFE"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1256"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1256"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1257"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1257"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x84\x85\x86\x87\x89\x8B\x8D\x8E\x8F\x91\x92\x93\x94\x95\x96\x97\x99\x9B\x9D\x9E\xA0\xA2\xA3\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cp1258"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"CP1258"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8B\x8C\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9B\x9C\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
argument_list|)
expr_stmt|;
name|QByteArray
name|koi8_r_ba
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0x20
init|;
name|x
operator|<=
literal|0xff
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|x
operator|!=
literal|0x9A
operator|&&
name|x
operator|!=
literal|0xbf
condition|)
block|{
name|koi8_r_ba
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KOI8-R"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"KOI8-R"
argument_list|)
operator|<<
name|koi8_r_ba
expr_stmt|;
name|QByteArray
name|koi8_u_ba
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0x20
init|;
name|x
operator|<=
literal|0xff
condition|;
operator|++
name|x
control|)
block|{
name|koi8_u_ba
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"KOI8-U"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"KOI8-U"
argument_list|)
operator|<<
name|koi8_u_ba
expr_stmt|;
name|QByteArray
name|big5_ba
decl_stmt|;
for|for
control|(
name|unsigned
name|char
name|u
init|=
literal|0xa1
init|;
name|u
operator|<=
literal|0xf9
condition|;
name|u
operator|++
control|)
block|{
if|if
condition|(
name|u
operator|==
literal|0xc8
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|unsigned
name|char
name|v
init|=
literal|0x40
init|;
name|v
operator|<=
literal|0x7e
condition|;
name|v
operator|++
control|)
block|{
name|big5_ba
operator|.
name|append
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|big5_ba
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|char
name|v_up
decl_stmt|;
switch|switch
condition|(
name|u
condition|)
block|{
case|case
literal|0xa2
case|:
name|v_up
operator|=
literal|0xa1
expr_stmt|;
break|break;
case|case
literal|0xa3
case|:
name|v_up
operator|=
literal|0xbf
expr_stmt|;
break|break;
case|case
literal|0xc7
case|:
name|v_up
operator|=
literal|0xfc
expr_stmt|;
break|break;
case|case
literal|0xf9
case|:
name|v_up
operator|=
literal|0xd5
expr_stmt|;
break|break;
default|default:
name|v_up
operator|=
literal|0xfe
expr_stmt|;
block|}
for|for
control|(
name|unsigned
name|char
name|v
init|=
literal|0xa1
init|;
name|v
operator|<=
name|v_up
condition|;
name|v
operator|++
control|)
block|{
if|if
condition|(
name|u
operator|==
literal|0xa2
operator|&&
operator|(
name|v
operator|==
literal|0xcc
operator|||
name|v
operator|==
literal|0xce
operator|)
condition|)
block|{
continue|continue;
block|}
name|big5_ba
operator|.
name|append
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|big5_ba
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BIG5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"BIG5"
argument_list|)
operator|<<
name|big5_ba
expr_stmt|;
name|QByteArray
name|gb2312_ba
decl_stmt|;
for|for
control|(
name|unsigned
name|char
name|u
init|=
literal|0xa1
init|;
name|u
operator|<=
literal|0xf7
condition|;
name|u
operator|++
control|)
block|{
for|for
control|(
name|unsigned
name|char
name|v
init|=
literal|0xa1
init|;
name|v
operator|<=
literal|0xfe
condition|;
name|v
operator|++
control|)
block|{
name|gb2312_ba
operator|.
name|append
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|gb2312_ba
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GB2312"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"GB2312"
argument_list|)
operator|<<
name|gb2312_ba
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moreToFromUnicode
name|void
name|tst_QTextCodec
operator|::
name|moreToFromUnicode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|codecName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|testData
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
name|codecName
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QString
name|uStr
init|=
name|c
operator|->
name|toUnicode
argument_list|(
name|testData
argument_list|)
decl_stmt|;
name|QByteArray
name|cStr
init|=
name|c
operator|->
name|fromUnicode
argument_list|(
name|uStr
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|testData
argument_list|,
name|cStr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|shiftJis
name|void
name|tst_QTextCodec
operator|::
name|shiftJis
parameter_list|()
block|{
name|QByteArray
name|backslashTilde
argument_list|(
literal|"\\~"
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"shift_jis"
argument_list|)
decl_stmt|;
name|QString
name|string
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|backslashTilde
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|string
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|string
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'~'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|encoded
init|=
name|codec
operator|->
name|fromUnicode
argument_list|(
name|string
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|encoded
argument_list|,
name|backslashTilde
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|UserCodec
struct|struct
name|UserCodec
super|:
specifier|public
name|QTextCodec
block|{
comment|// implement pure virtuals
name|QByteArray
name|name
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
literal|"UserCodec"
return|;
block|}
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|aliases
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
literal|"usercodec"
operator|<<
literal|"user-codec"
return|;
block|}
name|int
name|mibEnum
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
literal|5000
return|;
block|}
specifier|virtual
name|QString
name|convertToUnicode
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|ConverterState
modifier|*
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QString
argument_list|()
return|;
block|}
specifier|virtual
name|QByteArray
name|convertFromUnicode
parameter_list|(
specifier|const
name|QChar
modifier|*
parameter_list|,
name|int
parameter_list|,
name|ConverterState
modifier|*
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QByteArray
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|userCodec
name|void
name|tst_QTextCodec
operator|::
name|userCodec
parameter_list|()
block|{
comment|// check that it isn't there
specifier|static
name|bool
name|executedOnce
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|executedOnce
condition|)
name|QSKIP
argument_list|(
literal|"Test already executed once"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|availableCodecs
argument_list|()
operator|.
name|contains
argument_list|(
literal|"UserCodec"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UserCodec"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
operator|new
name|UserCodec
decl_stmt|;
name|executedOnce
operator|=
literal|true
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|availableCodecs
init|=
name|QTextCodec
operator|::
name|availableCodecs
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|availableCodecs
operator|.
name|contains
argument_list|(
literal|"UserCodec"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|availableCodecs
operator|.
name|contains
argument_list|(
literal|"usercodec"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|availableCodecs
operator|.
name|contains
argument_list|(
literal|"user-codec"
argument_list|)
argument_list|)
expr_stmt|;
name|QTextCodec
modifier|*
name|pcodec
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UserCodec"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pcodec
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|pcodec
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"user-codec"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pcodec
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|pcodec
operator|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"User-Codec"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pcodec
argument_list|,
name|codec
argument_list|)
expr_stmt|;
name|pcodec
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pcodec
argument_list|,
name|codec
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|DontCrashAtExit
struct|struct
name|DontCrashAtExit
block|{
DECL|function|~DontCrashAtExit
name|~
name|DontCrashAtExit
parameter_list|()
block|{
name|QTextCodec
modifier|*
name|c
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"utf8"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
condition|)
name|c
operator|->
name|toUnicode
argument_list|(
literal|"azerty"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|variable|dontCrashAtExit
name|dontCrashAtExit
struct|;
end_struct
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTextCodec
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtextcodec.moc"
end_include
end_unit
