begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qsharedpointer.h>
end_include
begin_decl_stmt
DECL|variable|utf8bom
specifier|static
specifier|const
name|char
name|utf8bom
index|[]
init|=
literal|"\xEF\xBB\xBF"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_Utf8
class|class
name|tst_Utf8
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
comment|// test data:
DECL|member|codec
name|QTextCodec
modifier|*
name|codec
decl_stmt|;
DECL|member|from8BitPtr
name|QString
function_decl|(
modifier|*
name|from8BitPtr
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
DECL|member|to8Bit
name|QByteArray
function_decl|(
name|QString
operator|::
modifier|*
name|to8Bit
function_decl|)
parameter_list|()
specifier|const
function_decl|;
DECL|function|from8Bit
specifier|inline
name|QString
name|from8Bit
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
return|return
name|from8BitPtr
argument_list|(
name|ba
operator|.
name|constData
argument_list|()
argument_list|,
name|ba
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|roundTrip_data
parameter_list|()
function_decl|;
name|void
name|roundTrip
parameter_list|()
function_decl|;
name|void
name|charByChar_data
parameter_list|()
function_decl|;
name|void
name|charByChar
parameter_list|()
function_decl|;
name|void
name|invalidUtf8_data
parameter_list|()
function_decl|;
name|void
name|invalidUtf8
parameter_list|()
function_decl|;
name|void
name|nonCharacters_data
parameter_list|()
function_decl|;
name|void
name|nonCharacters
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_Utf8
operator|::
name|initTestCase
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useLocale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8codec"
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// is the locale UTF-8?
if|if
condition|(
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ReplacementCharacter
argument_list|)
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|==
literal|"\xEF\xBF\xBD"
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localecodec"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"locale is utf8"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_Utf8
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useLocale
argument_list|)
expr_stmt|;
if|if
condition|(
name|useLocale
condition|)
block|{
name|codec
operator|=
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
expr_stmt|;
name|from8BitPtr
operator|=
operator|&
name|QString
operator|::
name|fromLocal8Bit
expr_stmt|;
name|to8Bit
operator|=
operator|&
name|QString
operator|::
name|toLocal8Bit
expr_stmt|;
block|}
else|else
block|{
name|codec
operator|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
expr_stmt|;
name|from8BitPtr
operator|=
operator|&
name|QString
operator|::
name|fromUtf8
expr_stmt|;
name|to8Bit
operator|=
operator|&
name|QString
operator|::
name|toUtf8
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|roundTrip_data
name|void
name|tst_Utf8
operator|::
name|roundTrip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"utf16"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nul"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|Null
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|ascii
index|[]
init|=
literal|"This is a standard US-ASCII message"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|ascii
argument_list|)
operator|<<
name|ascii
expr_stmt|;
specifier|static
specifier|const
name|char
name|ascii2
index|[]
init|=
literal|"\1This\2is\3an\4US-ASCII\020 message interspersed with control chars"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|ascii2
argument_list|)
operator|<<
name|ascii2
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_1
index|[]
init|=
literal|"\302\240"
decl_stmt|;
comment|// NBSP
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_1
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|Nbsp
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_2
index|[]
init|=
literal|"\342\202\254"
decl_stmt|;
comment|// Euro symbol
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_2
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0x20AC
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// Can't test this because QString::fromUtf8 consumes it
block|static const char utf8_3[] = "\357\273\277";
comment|// byte order mark
block|QTest::newRow("utf8_3")<< QByteArray(utf8_3)<< QString(QChar(QChar::ByteOrderMark));
endif|#
directive|endif
specifier|static
specifier|const
name|char
name|utf8_4
index|[]
init|=
literal|"\357\277\275"
decl_stmt|;
comment|// replacement char
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_4
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
name|QChar
operator|::
name|ReplacementCharacter
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_5
index|[]
init|=
literal|"\360\220\210\203"
decl_stmt|;
comment|// U+010203
specifier|static
specifier|const
name|uint
name|utf32_5
index|[]
init|=
block|{
literal|0x010203
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_5
argument_list|)
operator|<<
name|QString
operator|::
name|fromUcs4
argument_list|(
name|utf32_5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_6
index|[]
init|=
literal|"\364\217\277\275"
decl_stmt|;
comment|// U+10FFFD
specifier|static
specifier|const
name|uint
name|utf32_6
index|[]
init|=
block|{
literal|0x10FFFD
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_6
argument_list|)
operator|<<
name|QString
operator|::
name|fromUcs4
argument_list|(
name|utf32_6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_7
index|[]
init|=
literal|"abc\302\240\303\241\303\251\307\275 \342\202\254def"
decl_stmt|;
specifier|static
specifier|const
name|ushort
name|utf16_7
index|[]
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|0x00A0
block|,
literal|0x00E1
block|,
literal|0x00E9
block|,
literal|0x01FD
block|,
literal|' '
block|,
literal|0x20AC
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|0
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_7
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|utf16_7
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|utf8_8
index|[]
init|=
literal|"abc\302\240\303\241\303\251\307\275 \364\217\277\275 \342\202\254def"
decl_stmt|;
specifier|static
specifier|const
name|uint
name|utf32_8
index|[]
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|0x00A0
block|,
literal|0x00E1
block|,
literal|0x00E9
block|,
literal|0x01FD
block|,
literal|' '
block|,
literal|0x10FFFD
block|,
literal|' '
block|,
literal|0x20AC
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|0
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8_8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8_8
argument_list|)
operator|<<
name|QString
operator|::
name|fromUcs4
argument_list|(
name|utf32_8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|roundTrip
name|void
name|tst_Utf8
operator|::
name|roundTrip
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
call|(
name|utf16
operator|.*
name|to8Bit
call|)
argument_list|()
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|from8Bit
argument_list|(
name|utf8
argument_list|)
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|from8Bit
argument_list|(
name|utf8
argument_list|)
operator|.*
name|to8Bit
operator|)
operator|(
operator|)
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|from8Bit
argument_list|(
call|(
name|utf16
operator|.*
name|to8Bit
call|)
argument_list|()
argument_list|)
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charByChar_data
name|void
name|tst_Utf8
operator|::
name|charByChar_data
parameter_list|()
block|{
name|roundTrip_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|charByChar
name|void
name|tst_Utf8
operator|::
name|charByChar
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
block|{
comment|// from utf16 to utf8 char by char:
name|QSharedPointer
argument_list|<
name|QTextEncoder
argument_list|>
name|encoder
init|=
name|QSharedPointer
argument_list|<
name|QTextEncoder
argument_list|>
argument_list|(
name|codec
operator|->
name|makeEncoder
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|encoded
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|utf16
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|encoded
operator|+=
name|encoder
operator|->
name|fromUnicode
argument_list|(
name|utf16
operator|.
name|constData
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|encoder
operator|->
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encoded
operator|.
name|startsWith
argument_list|(
name|utf8bom
argument_list|)
condition|)
name|encoded
operator|=
name|encoded
operator|.
name|mid
argument_list|(
name|int
argument_list|(
name|strlen
argument_list|(
name|utf8bom
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|encoded
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
block|}
block|{
comment|// from utf8 to utf16 char by char:
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
name|decoder
init|=
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
argument_list|(
name|codec
operator|->
name|makeDecoder
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|decoded
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|utf8
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|decoded
operator|+=
name|decoder
operator|->
name|toUnicode
argument_list|(
name|utf8
operator|.
name|constData
argument_list|()
operator|+
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|decoder
operator|->
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|decoded
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|invalidUtf8_data
name|void
name|tst_Utf8
operator|::
name|invalidUtf8_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
specifier|extern
name|void
name|loadInvalidUtf8Rows
argument_list|()
decl_stmt|;
name|loadInvalidUtf8Rows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidUtf8
name|void
name|tst_Utf8
operator|::
name|invalidUtf8
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useLocale
argument_list|)
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
name|decoder
init|=
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
argument_list|(
name|codec
operator|->
name|makeDecoder
argument_list|()
argument_list|)
decl_stmt|;
name|decoder
operator|->
name|toUnicode
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
comment|// Only enforce correctness on our UTF-8 decoder
comment|// The system's UTF-8 codec is sometimes buggy
comment|//  GNU libc's iconv is known to accept U+FFFF and U+FFFE encoded as UTF-8
comment|//  OS X's iconv is known to accept those, plus surrogates and codepoints above U+10FFFF
if|if
condition|(
operator|!
name|useLocale
condition|)
name|QVERIFY
argument_list|(
name|decoder
operator|->
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|decoder
operator|->
name|hasFailure
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"System codec does not report failure when it should. Should report bug upstream."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonCharacters_data
name|void
name|tst_Utf8
operator|::
name|nonCharacters_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"utf16"
argument_list|)
expr_stmt|;
comment|// Unicode has a couple of "non-characters" that one can use internally,
comment|// but are not allowed to be used for text interchange.
comment|//
comment|// Those are the last two entries each Unicode Plane (U+FFFE, U+FFFF,
comment|// U+1FFFE, U+1FFFF, etc.) as well as the entries between U+FDD0 and
comment|// U+FDEF (inclusive)
comment|// U+FDD0 through U+FDEF
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
operator|++
name|i
control|)
block|{
name|char
name|utf8
index|[]
init|=
block|{
name|char
argument_list|(
literal|0357
argument_list|)
block|,
name|char
argument_list|(
literal|0267
argument_list|)
block|,
name|char
argument_list|(
literal|0220
operator|+
name|i
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
name|QString
name|utf16
init|=
name|QChar
argument_list|(
literal|0xfdd0
operator|+
name|i
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
literal|0xfdd0
operator|+
name|i
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8
argument_list|)
operator|<<
name|utf16
expr_stmt|;
block|}
comment|// the last two in Planes 1 through 16
for|for
control|(
name|uint
name|plane
init|=
literal|1
init|;
name|plane
operator|<=
literal|16
condition|;
operator|++
name|plane
control|)
block|{
for|for
control|(
name|uint
name|lower
init|=
literal|0xfffe
init|;
name|lower
operator|<
literal|0x10000
condition|;
operator|++
name|lower
control|)
block|{
name|uint
name|ucs4
init|=
operator|(
name|plane
operator|<<
literal|16
operator|)
operator||
name|lower
decl_stmt|;
name|char
name|utf8
index|[]
init|=
block|{
name|char
argument_list|(
literal|0xf0
operator||
name|uchar
argument_list|(
name|ucs4
operator|>>
literal|18
argument_list|)
argument_list|)
block|,
name|char
argument_list|(
literal|0x80
operator||
operator|(
name|uchar
argument_list|(
name|ucs4
operator|>>
literal|12
argument_list|)
operator|&
literal|0x3f
operator|)
argument_list|)
block|,
name|char
argument_list|(
literal|0x80
operator||
operator|(
name|uchar
argument_list|(
name|ucs4
operator|>>
literal|6
argument_list|)
operator|&
literal|0x3f
operator|)
argument_list|)
block|,
name|char
argument_list|(
literal|0x80
operator||
operator|(
name|uchar
argument_list|(
name|ucs4
argument_list|)
operator|&
literal|0x3f
operator|)
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
name|ushort
name|utf16
index|[]
init|=
block|{
name|QChar
operator|::
name|highSurrogate
argument_list|(
name|ucs4
argument_list|)
block|,
name|QChar
operator|::
name|lowSurrogate
argument_list|(
name|ucs4
argument_list|)
block|,
literal|0
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|ucs4
argument_list|,
literal|16
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|utf8
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|utf16
argument_list|)
expr_stmt|;
block|}
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fffe"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xEF\xBF\xBE"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xfffe
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ffff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xEF\xBF\xBF"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xffff
argument_list|)
argument_list|)
expr_stmt|;
specifier|extern
name|void
name|loadNonCharactersRows
argument_list|()
decl_stmt|;
name|loadNonCharactersRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonCharacters
name|void
name|tst_Utf8
operator|::
name|nonCharacters
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|utf16
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useLocale
argument_list|)
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
name|decoder
init|=
name|QSharedPointer
argument_list|<
name|QTextDecoder
argument_list|>
argument_list|(
name|codec
operator|->
name|makeDecoder
argument_list|()
argument_list|)
decl_stmt|;
name|decoder
operator|->
name|toUnicode
argument_list|(
name|utf8
argument_list|)
expr_stmt|;
comment|// Only enforce correctness on our UTF-8 decoder
comment|// The system's UTF-8 codec is sometimes buggy
comment|//  GNU libc's iconv is known to accept U+FFFF and U+FFFE encoded as UTF-8
comment|//  OS X's iconv is known to accept those, plus surrogates and codepoints above U+10FFFF
if|if
condition|(
operator|!
name|useLocale
condition|)
name|QVERIFY
argument_list|(
name|decoder
operator|->
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|decoder
operator|->
name|hasFailure
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"System codec does not report failure when it should. Should report bug upstream."
argument_list|)
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QTextEncoder
argument_list|>
name|encoder
argument_list|(
name|codec
operator|->
name|makeEncoder
argument_list|()
argument_list|)
decl_stmt|;
name|encoder
operator|->
name|fromUnicode
argument_list|(
name|utf16
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useLocale
condition|)
name|QVERIFY
argument_list|(
name|encoder
operator|->
name|hasFailure
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|encoder
operator|->
name|hasFailure
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"System codec does not report failure when it should. Should report bug upstream."
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Utf8
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_utf8.moc"
end_include
end_unit
