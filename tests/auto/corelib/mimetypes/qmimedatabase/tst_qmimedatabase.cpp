begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qmimedatabase.h>
end_include
begin_include
include|#
directive|include
file|"qstandardpaths.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QFutureSynchronizer>
end_include
begin_include
include|#
directive|include
file|<QtConcurrent/QtConcurrentRun>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_decl_stmt
DECL|variable|yastFileName
specifier|static
specifier|const
name|char
name|yastFileName
index|[]
init|=
literal|"yast2-metapackage-handler-mimetypes.xml"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|qmlAgainFileName
specifier|static
specifier|const
name|char
name|qmlAgainFileName
index|[]
init|=
literal|"qml-again.xml"
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|RESOURCE_PREFIX
define|#
directive|define
name|RESOURCE_PREFIX
value|":/qt-project.org/qmime/"
end_define
begin_function
DECL|function|initializeLang
name|void
name|initializeLang
parameter_list|()
block|{
name|qputenv
argument_list|(
literal|"LC_ALL"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"LANG"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
literal|"tst_qmimedatabase"
argument_list|)
expr_stmt|;
comment|// temporary directory pattern
block|}
end_function
begin_function
DECL|function|testSuiteWarning
specifier|static
specifier|inline
name|QString
name|testSuiteWarning
parameter_list|()
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"\nCannot find the shared-mime-info test suite\nstarting from: "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
operator|<<
literal|"\n"
literal|"cd "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tests/auto/corelib/mimetypes/qmimedatabase"
argument_list|)
argument_list|)
operator|<<
literal|"\n"
literal|"wget http://cgit.freedesktop.org/xdg/shared-mime-info/snapshot/Release-1-0.zip\n"
literal|"unzip Release-1-0.zip\n"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|str
operator|<<
literal|"mkdir testfiles\nxcopy /s Release-1-0\\tests testfiles\n"
expr_stmt|;
else|#
directive|else
name|str
operator|<<
literal|"ln -s Release-1-0/tests testfiles\n"
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|copyResourceFile
specifier|static
name|bool
name|copyResourceFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|sourceFileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|targetFileName
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|QFile
name|sourceFile
argument_list|(
name|sourceFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|exists
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourceFileName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|copy
argument_list|(
name|targetFileName
argument_list|)
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QLatin1String
argument_list|(
literal|"Cannot copy "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourceFileName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" to "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|targetFileName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|sourceFile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// QFile::copy() sets the permissions of the source file which are read-only for
comment|// resource files. Set write permission to enable deletion of the temporary directory.
name|QFile
name|targetFile
argument_list|(
name|targetFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetFile
operator|.
name|setPermissions
argument_list|(
name|targetFile
operator|.
name|permissions
argument_list|()
operator||
name|QFileDevice
operator|::
name|WriteUser
argument_list|)
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QLatin1String
argument_list|(
literal|"Cannot set write permission on "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|targetFileName
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|+
name|targetFile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// Set LANG before QCoreApplication is created
end_comment
begin_macro
name|Q_CONSTRUCTOR_FUNCTION
argument_list|(
argument|initializeLang
argument_list|)
end_macro
begin_function
DECL|function|seedAndTemplate
specifier|static
name|QString
name|seedAndTemplate
parameter_list|()
block|{
name|qsrand
argument_list|(
name|QDateTime
operator|::
name|currentDateTimeUtc
argument_list|()
operator|.
name|toTime_t
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/tst_qmimedatabase-XXXXXX"
return|;
block|}
end_function
begin_constructor
DECL|function|tst_QMimeDatabase
name|tst_QMimeDatabase
operator|::
name|tst_QMimeDatabase
parameter_list|()
member_init_list|:
name|m_temporaryDir
argument_list|(
name|seedAndTemplate
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QMimeDatabase
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|m_temporaryDir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a "global" and a "local" XDG data dir, right here.
comment|// The local dir will be empty initially, while the global dir will contain a copy of freedesktop.org.xml
specifier|const
name|QDir
name|here
init|=
name|QDir
argument_list|(
name|m_temporaryDir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|m_globalXdgDir
operator|=
name|m_temporaryDir
operator|.
name|path
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/global"
argument_list|)
expr_stmt|;
name|m_localXdgDir
operator|=
name|m_temporaryDir
operator|.
name|path
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/local"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|globalPackageDir
init|=
name|m_globalXdgDir
operator|+
name|QStringLiteral
argument_list|(
literal|"/mime/packages"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|here
operator|.
name|mkpath
argument_list|(
name|globalPackageDir
argument_list|)
operator|&&
name|here
operator|.
name|mkpath
argument_list|(
name|m_localXdgDir
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_DIRS"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_globalXdgDir
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_HOME"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_localXdgDir
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"\nLocal XDG_DATA_HOME: "
operator|<<
name|m_localXdgDir
operator|<<
literal|"\nGlobal XDG_DATA_DIRS: "
operator|<<
name|m_globalXdgDir
expr_stmt|;
specifier|const
name|QString
name|freeDesktopXml
init|=
name|QStringLiteral
argument_list|(
literal|"freedesktop.org.xml"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|xmlFileName
init|=
name|QLatin1String
argument_list|(
name|RESOURCE_PREFIX
argument_list|)
operator|+
name|freeDesktopXml
decl_stmt|;
specifier|const
name|QString
name|xmlTargetFileName
init|=
name|globalPackageDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|freeDesktopXml
decl_stmt|;
name|QString
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|copyResourceFile
argument_list|(
name|xmlFileName
argument_list|,
name|xmlTargetFileName
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
name|m_testSuite
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testfiles"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_testSuite
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|testSuiteWarning
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot find '%1'"
argument_list|)
expr_stmt|;
name|m_yastMimeTypes
operator|=
name|QLatin1String
argument_list|(
name|RESOURCE_PREFIX
argument_list|)
operator|+
name|yastFileName
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|m_yastMimeTypes
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
operator|.
name|arg
argument_list|(
name|yastFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_qmlAgainFileName
operator|=
name|QLatin1String
argument_list|(
name|RESOURCE_PREFIX
argument_list|)
operator|+
name|qmlAgainFileName
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|m_qmlAgainFileName
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
operator|.
name|arg
argument_list|(
name|qmlAgainFileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypeForName
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForName
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|s0
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-zerosize"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s0
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s0
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-zerosize"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s0
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"empty document"
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeType
name|s0Again
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-zerosize"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s0Again
operator|.
name|name
argument_list|()
argument_list|,
name|s0
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QMimeType
name|s1
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
comment|//qDebug("Comment is %s", qPrintable(s1.comment()));
name|QMimeType
name|krita
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-krita"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|krita
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test<comment> parsing with application/rdf+xml which has the english comment after the other ones
name|QMimeType
name|rdf
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/rdf+xml"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rdf
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rdf
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"RDF file"
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeType
name|bzip2
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-bzip2"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|bzip2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bzip2
operator|.
name|comment
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Bzip archive"
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeType
name|defaultMime
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|defaultMime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|defaultMime
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QMimeType
name|doesNotExist
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foobar/x-doesnot-exist"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doesNotExist
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO move to findByFile
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|QString
name|exePath
init|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QLatin1String
argument_list|(
literal|"ls"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exePath
operator|.
name|isEmpty
argument_list|()
condition|)
name|qWarning
argument_list|()
operator|<<
literal|"ls not found"
expr_stmt|;
else|else
block|{
specifier|const
name|QString
name|executableType
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-executable"
argument_list|)
decl_stmt|;
comment|//QTest::newRow("executable")<< exePath<< executableType;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|exePath
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|executableType
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mimeTypeForFileName_data
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedMimeType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text"
argument_list|)
operator|<<
literal|"textfile.txt"
operator|<<
literal|"text/plain"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-insensitive search"
argument_list|)
operator|<<
literal|"textfile.TxT"
operator|<<
literal|"text/plain"
expr_stmt|;
comment|// Needs shared-mime-info> 0.91. Earlier versions wrote .Z to the mime.cache file...
comment|//QTest::newRow("case-insensitive match on a non-lowercase glob")<< "foo.z"<< "application/x-compress";
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-sensitive uppercase match"
argument_list|)
operator|<<
literal|"textfile.C"
operator|<<
literal|"text/x-c++src"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-sensitive lowercase match"
argument_list|)
operator|<<
literal|"textfile.c"
operator|<<
literal|"text/x-csrc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-sensitive long-extension match"
argument_list|)
operator|<<
literal|"foo.PS.gz"
operator|<<
literal|"application/x-gzpostscript"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-sensitive-only match"
argument_list|)
operator|<<
literal|"core"
operator|<<
literal|"application/x-core"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case-sensitive-only match"
argument_list|)
operator|<<
literal|"Core"
operator|<<
literal|"application/octet-stream"
expr_stmt|;
comment|// #198477
name|QTest
operator|::
name|newRow
argument_list|(
literal|"desktop file"
argument_list|)
operator|<<
literal|"foo.desktop"
operator|<<
literal|"application/x-desktop"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"old kdelnk file is x-desktop too"
argument_list|)
operator|<<
literal|"foo.kdelnk"
operator|<<
literal|"application/x-desktop"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double-extension file"
argument_list|)
operator|<<
literal|"foo.tar.bz2"
operator|<<
literal|"application/x-bzip-compressed-tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single-extension file"
argument_list|)
operator|<<
literal|"foo.bz2"
operator|<<
literal|"application/x-bzip"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".doc should assume msword"
argument_list|)
operator|<<
literal|"somefile.doc"
operator|<<
literal|"application/msword"
expr_stmt|;
comment|// #204139
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that uses [] syntax, 1"
argument_list|)
operator|<<
literal|"Makefile"
operator|<<
literal|"text/x-makefile"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that uses [] syntax, 2"
argument_list|)
operator|<<
literal|"makefile"
operator|<<
literal|"text/x-makefile"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that ends with *, no extension"
argument_list|)
operator|<<
literal|"README"
operator|<<
literal|"text/x-readme"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that ends with *, extension"
argument_list|)
operator|<<
literal|"README.foo"
operator|<<
literal|"text/x-readme"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that ends with *, also matches *.txt. Higher weight wins."
argument_list|)
operator|<<
literal|"README.txt"
operator|<<
literal|"text/plain"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that ends with *, also matches *.nfo. Higher weight wins."
argument_list|)
operator|<<
literal|"README.nfo"
operator|<<
literal|"text/x-nfo"
expr_stmt|;
comment|// fdo bug 15436, needs shared-mime-info>= 0.40 (and this tests the globs2-parsing code).
name|QTest
operator|::
name|newRow
argument_list|(
literal|"glob that ends with *, also matches *.pdf. *.pdf has higher weight"
argument_list|)
operator|<<
literal|"README.pdf"
operator|<<
literal|"application/pdf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"directory"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"inode/directory"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doesn't exist, no extension"
argument_list|)
operator|<<
literal|"IDontExist"
operator|<<
literal|"application/octet-stream"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doesn't exist but has known extension"
argument_list|)
operator|<<
literal|"IDontExist.txt"
operator|<<
literal|"text/plain"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"application/octet-stream"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgMimeTypeForFileNameFailed
specifier|static
specifier|inline
name|QByteArray
name|msgMimeTypeForFileNameFailed
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QMimeType
argument_list|>
modifier|&
name|actual
parameter_list|,
specifier|const
name|QString
modifier|&
name|expected
parameter_list|)
block|{
name|QByteArray
name|result
init|=
literal|"Actual ("
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QMimeType
modifier|&
name|m
decl|,
name|actual
control|)
block|{
name|result
operator|+=
name|m
operator|.
name|name
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|result
operator|+=
literal|' '
expr_stmt|;
block|}
name|result
operator|+=
literal|") , expected: "
expr_stmt|;
name|result
operator|+=
name|expected
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|mimeTypeForFileName
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedMimeType
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|mime
init|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|fileName
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeType
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QMimeType
argument_list|>
name|mimes
init|=
name|db
operator|.
name|mimeTypesForFileName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedMimeType
operator|==
literal|"application/octet-stream"
condition|)
block|{
name|QVERIFY
argument_list|(
name|mimes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
operator|!
name|mimes
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|msgMimeTypeForFileNameFailed
argument_list|(
name|mimes
argument_list|,
name|expectedMimeType
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|mimes
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|,
name|msgMimeTypeForFileNameFailed
argument_list|(
name|mimes
argument_list|,
name|expectedMimeType
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mimes
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeType
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mimeTypesForFileName_data
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypesForFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedMimeTypes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt, 1 hit"
argument_list|)
operator|<<
literal|"foo.txt"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/plain"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txtfoobar, 0 hit"
argument_list|)
operator|<<
literal|"foo.foobar"
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"m, 2 hits"
argument_list|)
operator|<<
literal|"foo.m"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/x-matlab"
operator|<<
literal|"text/x-objcsrc"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sub, 3 hits"
argument_list|)
operator|<<
literal|"foo.sub"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/x-microdvd"
operator|<<
literal|"text/x-mpsub"
operator|<<
literal|"text/x-subviewer"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypesForFileName
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypesForFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedMimeTypes
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QList
argument_list|<
name|QMimeType
argument_list|>
name|mimes
init|=
name|db
operator|.
name|mimeTypesForFileName
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QStringList
name|mimeNames
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QMimeType
modifier|&
name|mime
decl|,
name|mimes
control|)
name|mimeNames
operator|.
name|append
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mimeNames
argument_list|,
name|expectedMimeTypes
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inheritance
name|void
name|tst_QMimeDatabase
operator|::
name|inheritance
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
comment|// All file-like mimetypes inherit from octet-stream
specifier|const
name|QMimeType
name|wordperfect
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/vnd.wordperfect"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|wordperfect
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|wordperfect
operator|.
name|parentMimeTypes
argument_list|()
operator|.
name|join
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wordperfect
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"image/svg+xml-compressed"
argument_list|)
argument_list|)
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-gzip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that msword derives from ole-storage
specifier|const
name|QMimeType
name|msword
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/msword"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|msword
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QMimeType
name|olestorage
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-ole-storage"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|olestorage
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msword
operator|.
name|inherits
argument_list|(
name|olestorage
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msword
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QMimeType
name|directory
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"inode/directory"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|directory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|directory
operator|.
name|parentMimeTypes
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|directory
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that text/x-patch knows that it inherits from text/plain (it says so explicitly)
specifier|const
name|QMimeType
name|plain
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QMimeType
name|derived
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-patch"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|derived
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|derived
operator|.
name|parentMimeTypes
argument_list|()
operator|.
name|join
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|,
name|plain
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|derived
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|derived
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that application/x-shellscript inherits from application/x-executable
comment|// (Otherwise KRun cannot start shellscripts...)
comment|// This is a test for multiple inheritance...
specifier|const
name|QMimeType
name|shellscript
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/x-shellscript"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|shellscript
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|shellscript
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|shellscript
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-executable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|shellParents
init|=
name|shellscript
operator|.
name|parentMimeTypes
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|shellParents
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|shellParents
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-executable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|shellParents
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// only the above two
specifier|const
name|QStringList
name|allShellAncestors
init|=
name|shellscript
operator|.
name|allAncestors
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|allShellAncestors
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allShellAncestors
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/x-executable"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allShellAncestors
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Must be least-specific last, i.e. breadth first.
name|QCOMPARE
argument_list|(
name|allShellAncestors
operator|.
name|last
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|allSvgAncestors
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"image/svg+xml"
argument_list|)
argument_list|)
operator|.
name|allAncestors
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allSvgAncestors
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"application/xml"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that text/x-mrml knows that it inherits from text/plain (implicitly)
specifier|const
name|QMimeType
name|mrml
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-mrml"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mrml
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mrml
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mrml
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that msword-template inherits msword
specifier|const
name|QMimeType
name|mswordTemplate
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/msword-template"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mswordTemplate
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mswordTemplate
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/msword"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|aliases
name|void
name|tst_QMimeDatabase
operator|::
name|aliases
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
specifier|const
name|QMimeType
name|canonical
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/xml"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|canonical
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QMimeType
name|resolvedAlias
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resolvedAlias
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resolvedAlias
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/xml"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resolvedAlias
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"application/xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|canonical
operator|.
name|inherits
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test for kde bug 197346: does nspluginscan see that audio/mp3 already exists?
name|bool
name|mustWriteMimeType
init|=
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"audio/mp3"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mustWriteMimeType
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listAliases_data
name|void
name|tst_QMimeDatabase
operator|::
name|listAliases_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"inputMime"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedAliases"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"csv"
argument_list|)
operator|<<
literal|"text/csv"
operator|<<
literal|"text/x-csv,text/x-comma-separated-values"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xml"
argument_list|)
operator|<<
literal|"application/xml"
operator|<<
literal|"text/xml"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xml2"
argument_list|)
operator|<<
literal|"text/xml"
comment|/* gets resolved to application/xml */
operator|<<
literal|"text/xml"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no_mime"
argument_list|)
operator|<<
literal|"message/news"
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listAliases
name|void
name|tst_QMimeDatabase
operator|::
name|listAliases
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|inputMime
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedAliases
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QStringList
name|expectedAliasesList
init|=
name|expectedAliases
operator|.
name|split
argument_list|(
literal|','
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|expectedAliasesList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QMimeType
name|mime
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|inputMime
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|aliasList
init|=
name|mime
operator|.
name|aliases
argument_list|()
decl_stmt|;
name|aliasList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|aliasList
argument_list|,
name|expectedAliasesList
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|icons
name|void
name|tst_QMimeDatabase
operator|::
name|icons
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|directory
init|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|directory
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"inode/directory"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|directory
operator|.
name|iconName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"inode-directory"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|directory
operator|.
name|genericIconName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"inode-x-generic"
argument_list|)
argument_list|)
expr_stmt|;
name|QMimeType
name|pub
init|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo.epub"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pub
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/epub+zip"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pub
operator|.
name|iconName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application-epub+zip"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pub
operator|.
name|genericIconName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"x-office-document"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// In here we do the tests that need some content in a temporary file.
end_comment
begin_comment
comment|// This could also be added to shared-mime-info's testsuite...
end_comment
begin_function
DECL|function|mimeTypeForFileWithContent
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileWithContent
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|mime
decl_stmt|;
comment|// Test a real PDF file.
comment|// If we find x-matlab because it starts with '%' then we are not ordering by priority.
name|QTemporaryFile
name|tempFile
decl_stmt|;
name|QVERIFY
argument_list|(
name|tempFile
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|tempFileName
init|=
name|tempFile
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|tempFile
operator|.
name|write
argument_list|(
literal|"%PDF-"
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|tempFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/pdf"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForData
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
comment|// QIODevice ctor
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/pdf"
argument_list|)
argument_list|)
expr_stmt|;
comment|// by name only, we cannot find the mimetype
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|tempFileName
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test the case where the extension doesn't match the contents: extension wins
block|{
name|QTemporaryFile
name|txtTempFile
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/tst_QMimeDatabase_XXXXXX.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|txtTempFile
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|txtTempFile
operator|.
name|write
argument_list|(
literal|"%PDF-"
argument_list|)
expr_stmt|;
name|QString
name|txtTempFileName
init|=
name|txtTempFile
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|txtTempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|txtTempFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
comment|// fast mode finds the same
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|txtTempFileName
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now the case where extension differs from contents, but contents has>80 magic rule
comment|// XDG spec says: contents wins. But we can't sniff all files...
block|{
name|QTemporaryFile
name|txtTempFile
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/tst_QMimeDatabase_XXXXXX.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|txtTempFile
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|txtTempFile
operator|.
name|write
argument_list|(
literal|"<smil"
argument_list|)
expr_stmt|;
name|QString
name|txtTempFileName
init|=
name|txtTempFile
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|txtTempFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|txtTempFileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|txtTempFileName
argument_list|,
name|QMimeDatabase
operator|::
name|MatchContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/smil"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test what happens with an incorrect path
name|mime
operator|=
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"file:///etc/passwd"
comment|/* incorrect code, use a path instead */
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// findByData when the device cannot be opened (e.g. a directory)
name|QFile
name|dir
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|mime
operator|=
name|db
operator|.
name|mimeTypeForData
argument_list|(
operator|&
name|dir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypeForUrl
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForUrl
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|mimeTypeForUrl
argument_list|(
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"http://foo/bar.png"
argument_list|)
argument_list|)
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
comment|// HTTP can't know before downloading
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForUrl
argument_list|(
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"ftp://foo/bar.png"
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"image/png"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForUrl
argument_list|(
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"ftp://foo/bar"
argument_list|)
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unknown extension
block|}
end_function
begin_function
DECL|function|mimeTypeForData_data
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedMimeTypeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tnef data, needs smi>= 0.20"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x78\x9f\x3e\x22"
argument_list|)
operator|<<
literal|"application/vnd.ms-tnef"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF magic"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%PDF-"
argument_list|)
operator|<<
literal|"application/pdf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PHP, High-priority rule"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"<?php"
argument_list|)
operator|<<
literal|"application/x-php"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff\\t"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"diff\t"
argument_list|)
operator|<<
literal|"text/x-patch"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\001abc?}"
argument_list|)
operator|<<
literal|"application/octet-stream"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypeForData
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForData
argument_list|(
name|data
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForData
argument_list|(
operator|&
name|buffer
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// initial state was restored
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForData
argument_list|(
operator|&
name|buffer
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypeForFileAndContent_data
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileAndContent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedMimeTypeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text, no extension"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"textfile"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello world"
argument_list|)
operator|<<
literal|"text/plain"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plain text, unknown extension"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"textfile.foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello world"
argument_list|)
operator|<<
literal|"text/plain"
expr_stmt|;
comment|// Needs kde/mimetypes.xml
comment|//QTest::newRow("plain text, doc extension")<< QString::fromLatin1("textfile.doc")<< QByteArray("Hello world")<< "text/plain";
comment|// If you get powerpoint instead, then you're hit by https://bugs.freedesktop.org/show_bug.cgi?id=435,
comment|// upgrade to shared-mime-info>= 0.22
specifier|const
name|QByteArray
name|oleData
argument_list|(
literal|"\320\317\021\340\241\261\032\341"
argument_list|)
decl_stmt|;
comment|// same as \xD0\xCF\x11\xE0 \xA1\xB1\x1A\xE1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"msword file, unknown extension"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"mswordfile"
argument_list|)
operator|<<
name|oleData
operator|<<
literal|"application/x-ole-storage"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"excel file, found by extension"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"excelfile.xls"
argument_list|)
operator|<<
name|oleData
operator|<<
literal|"application/vnd.ms-excel"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text.xls, found by extension, user is in control"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text.xls"
argument_list|)
operator|<<
name|oleData
operator|<<
literal|"application/vnd.ms-excel"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mimeTypeForFileAndContent
name|void
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileAndContent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFileNameAndData
argument_list|(
name|name
argument_list|,
name|data
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFileNameAndData
argument_list|(
name|name
argument_list|,
operator|&
name|buffer
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// initial state was restored
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFileNameAndData
argument_list|(
name|name
argument_list|,
operator|&
name|buffer
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|expectedMimeTypeName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allMimeTypes
name|void
name|tst_QMimeDatabase
operator|::
name|allMimeTypes
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QMimeType
argument_list|>
name|lst
init|=
name|db
operator|.
name|allMimeTypes
argument_list|()
decl_stmt|;
comment|// does NOT include aliases
name|QVERIFY
argument_list|(
operator|!
name|lst
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hardcoding this is the only way to check both providers find the same number of mimetypes.
name|QCOMPARE
argument_list|(
name|lst
operator|.
name|count
argument_list|()
argument_list|,
literal|661
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QMimeType
modifier|&
name|mime
decl|,
name|lst
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|mime
operator|.
name|name
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|name
operator|.
name|count
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QMimeType
name|lookedupMime
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|lookedupMime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookedupMime
operator|.
name|name
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// if this fails, you have an alias defined as a real mimetype too!
block|}
block|}
end_function
begin_function
DECL|function|suffixes_data
name|void
name|tst_QMimeDatabase
operator|::
name|suffixes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mimeType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"patterns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"preferredSuffix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with a single pattern"
argument_list|)
operator|<<
literal|"application/pdf"
operator|<<
literal|"*.pdf"
operator|<<
literal|"pdf"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with multiple patterns"
argument_list|)
operator|<<
literal|"application/x-kpresenter"
operator|<<
literal|"*.kpr;*.kpt"
operator|<<
literal|"kpr"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jpeg"
argument_list|)
operator|<<
literal|"image/jpeg"
operator|<<
literal|"*.jpe;*.jpg;*.jpeg"
operator|<<
literal|"jpeg"
expr_stmt|;
comment|//if (KMimeType::sharedMimeInfoVersion()> KDE_MAKE_VERSION(0, 60, 0)) {
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with many patterns"
argument_list|)
operator|<<
literal|"application/vnd.wordperfect"
operator|<<
literal|"*.wp;*.wp4;*.wp5;*.wp6;*.wpd;*.wpp"
operator|<<
literal|"wp"
expr_stmt|;
comment|//}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oasis text mimetype"
argument_list|)
operator|<<
literal|"application/vnd.oasis.opendocument.text"
operator|<<
literal|"*.odt"
operator|<<
literal|"odt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oasis presentation mimetype"
argument_list|)
operator|<<
literal|"application/vnd.oasis.opendocument.presentation"
operator|<<
literal|"*.odp"
operator|<<
literal|"odp"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with multiple patterns"
argument_list|)
operator|<<
literal|"text/plain"
operator|<<
literal|"*.asc;*.txt;*,v"
operator|<<
literal|"txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with uncommon pattern"
argument_list|)
operator|<<
literal|"text/x-readme"
operator|<<
literal|"README*"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mimetype with no patterns"
argument_list|)
operator|<<
literal|"application/x-ole-storage"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suffixes
name|void
name|tst_QMimeDatabase
operator|::
name|suffixes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|patterns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|preferredSuffix
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QMimeType
name|mime
init|=
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mime
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sort both lists; order is unreliable since shared-mime-info uses hashes internally.
name|QStringList
name|expectedPatterns
init|=
name|patterns
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
decl_stmt|;
name|expectedPatterns
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|mimePatterns
init|=
name|mime
operator|.
name|globPatterns
argument_list|()
decl_stmt|;
name|mimePatterns
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mimePatterns
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|,
name|expectedPatterns
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mime
operator|.
name|preferredSuffix
argument_list|()
argument_list|,
name|preferredSuffix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|knownSuffix
name|void
name|tst_QMimeDatabase
operator|::
name|knownSuffix
parameter_list|()
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|suffixForFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo.tar"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|suffixForFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo.bz2"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bz2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|suffixForFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo.bar.bz2"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bz2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|suffixForFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo.tar.bz2"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tar.bz2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findByFileName_data
name|void
name|tst_QMimeDatabase
operator|::
name|findByFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mimeTypeName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xFail"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_testSuite
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"shared-mime-info test suite not available."
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|m_testSuite
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fileName
init|=
name|prefix
operator|+
name|QLatin1String
argument_list|(
literal|"list"
argument_list|)
decl_stmt|;
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot open %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|,
name|f
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|line
argument_list|(
literal|1024
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|f
operator|.
name|readLine
argument_list|(
name|line
operator|.
name|data
argument_list|()
argument_list|,
literal|1023
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|<=
literal|2
operator|||
name|line
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
continue|continue;
name|QString
name|string
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|line
operator|.
name|constData
argument_list|()
argument_list|,
name|len
operator|-
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|QStringList
name|list
init|=
name|string
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|QString
name|filePath
init|=
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QString
name|mimeTypeType
init|=
name|list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QString
name|xFail
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
name|xFail
operator|=
name|list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|filePath
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
name|prefix
operator|+
name|filePath
argument_list|)
operator|<<
name|mimeTypeType
operator|<<
name|xFail
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findByFileName
name|void
name|tst_QMimeDatabase
operator|::
name|findByFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xFail
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|database
decl_stmt|;
comment|//qDebug()<< Q_FUNC_INFO<< filePath;
specifier|const
name|QMimeType
name|resultMimeType
argument_list|(
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|filePath
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultMimeType
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|//qDebug()<< Q_FUNC_INFO<< "MIME type"<< resultMimeType.name()<< "has generic icon name"<< resultMimeType.genericIconName()<< "and icon name"<< resultMimeType.iconName();
comment|// Loading icons depend on the icon theme, we can't enable this test
if|#
directive|if
literal|0
block|QCOMPARE(resultMimeType.genericIconName(), QIcon::fromTheme(resultMimeType.genericIconName()).name());         QVERIFY2(!QIcon::fromTheme(resultMimeType.genericIconName()).isNull(), qPrintable(resultMimeType.genericIconName()));         QVERIFY2(QIcon::hasThemeIcon(resultMimeType.genericIconName()), qPrintable(resultMimeType.genericIconName()));          QCOMPARE(resultMimeType.iconName(), QIcon::fromTheme(resultMimeType.iconName()).name());         QVERIFY2(!QIcon::fromTheme(resultMimeType.iconName()).isNull(), qPrintable(resultMimeType.iconName()));         QVERIFY2(QIcon::hasThemeIcon(resultMimeType.iconName()), qPrintable(resultMimeType.iconName()));
endif|#
directive|endif
block|}
specifier|const
name|QString
name|resultMimeTypeName
init|=
name|resultMimeType
operator|.
name|name
argument_list|()
decl_stmt|;
comment|//qDebug()<< Q_FUNC_INFO<< "mimeTypeForFile() returned"<< resultMimeTypeName;
specifier|const
name|bool
name|failed
init|=
name|resultMimeTypeName
operator|!=
name|mimeTypeName
decl_stmt|;
specifier|const
name|bool
name|shouldFail
init|=
operator|(
name|xFail
operator|.
name|length
argument_list|()
operator|>=
literal|1
operator|&&
name|xFail
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|shouldFail
operator|!=
name|failed
condition|)
block|{
comment|// Results are ambiguous when multiple MIME types have the same glob
comment|// -> accept the current result if the found MIME type actually
comment|// matches the file's extension.
comment|// TODO: a better file format in testfiles/list!
specifier|const
name|QMimeType
name|foundMimeType
init|=
name|database
operator|.
name|mimeTypeForName
argument_list|(
name|resultMimeTypeName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|resultMimeType
operator|==
name|foundMimeType
argument_list|,
name|qPrintable
argument_list|(
name|resultMimeType
operator|.
name|name
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" vs. "
argument_list|)
operator|+
name|foundMimeType
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundMimeType
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|extension
init|=
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
operator|.
name|suffix
argument_list|()
decl_stmt|;
comment|//qDebug()<< Q_FUNC_INFO<< "globPatterns:"<< foundMimeType.globPatterns()<< "- extension:"<< QString() + "*." + extension;
if|if
condition|(
name|foundMimeType
operator|.
name|globPatterns
argument_list|()
operator|.
name|contains
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"*."
argument_list|)
operator|+
name|extension
argument_list|)
condition|)
return|return;
block|}
block|}
if|if
condition|(
name|shouldFail
condition|)
block|{
comment|// Expected to fail
name|QVERIFY2
argument_list|(
name|resultMimeTypeName
operator|!=
name|mimeTypeName
argument_list|,
name|qPrintable
argument_list|(
name|resultMimeTypeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|resultMimeTypeName
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
block|}
comment|// Test QFileInfo overload
specifier|const
name|QMimeType
name|mimeForFileInfo
init|=
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mimeForFileInfo
operator|.
name|name
argument_list|()
argument_list|,
name|resultMimeTypeName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findByData_data
name|void
name|tst_QMimeDatabase
operator|::
name|findByData_data
parameter_list|()
block|{
name|findByFileName_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findByData
name|void
name|tst_QMimeDatabase
operator|::
name|findByData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xFail
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|database
decl_stmt|;
name|QFile
name|f
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|f
operator|.
name|read
argument_list|(
literal|16384
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|resultMimeTypeName
init|=
name|database
operator|.
name|mimeTypeForData
argument_list|(
name|data
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
if|if
condition|(
name|xFail
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
name|xFail
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
condition|)
block|{
comment|// Expected to fail
name|QVERIFY2
argument_list|(
name|resultMimeTypeName
operator|!=
name|mimeTypeName
argument_list|,
name|qPrintable
argument_list|(
name|resultMimeTypeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|resultMimeTypeName
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|info
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QString
name|mimeForInfo
init|=
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|info
argument_list|,
name|QMimeDatabase
operator|::
name|MatchContent
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mimeForInfo
argument_list|,
name|resultMimeTypeName
argument_list|)
expr_stmt|;
name|QString
name|mimeForFile
init|=
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|filePath
argument_list|,
name|QMimeDatabase
operator|::
name|MatchContent
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mimeForFile
argument_list|,
name|resultMimeTypeName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findByFile_data
name|void
name|tst_QMimeDatabase
operator|::
name|findByFile_data
parameter_list|()
block|{
name|findByFileName_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Note: this test fails on "testcompress.z" when using a shared-mime-info older than 1.0.
end_comment
begin_comment
comment|// This because of commit 0f9a506069c in shared-mime-info, which fixed the writing of
end_comment
begin_comment
comment|// case-insensitive patterns into mime.cache.
end_comment
begin_function
DECL|function|findByFile
name|void
name|tst_QMimeDatabase
operator|::
name|findByFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xFail
argument_list|)
expr_stmt|;
name|QMimeDatabase
name|database
decl_stmt|;
specifier|const
name|QString
name|resultMimeTypeName
init|=
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|filePath
argument_list|)
operator|.
name|name
argument_list|()
decl_stmt|;
comment|//qDebug()<< Q_FUNC_INFO<< filePath<< "->"<< resultMimeTypeName;
if|if
condition|(
name|xFail
operator|.
name|length
argument_list|()
operator|>=
literal|3
operator|&&
name|xFail
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'x'
argument_list|)
condition|)
block|{
comment|// Expected to fail
name|QVERIFY2
argument_list|(
name|resultMimeTypeName
operator|!=
name|mimeTypeName
argument_list|,
name|qPrintable
argument_list|(
name|resultMimeTypeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|resultMimeTypeName
argument_list|,
name|mimeTypeName
argument_list|)
expr_stmt|;
block|}
comment|// Test QFileInfo overload
specifier|const
name|QMimeType
name|mimeForFileInfo
init|=
name|database
operator|.
name|mimeTypeForFile
argument_list|(
name|QFileInfo
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mimeForFileInfo
operator|.
name|name
argument_list|()
argument_list|,
name|resultMimeTypeName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromThreads
name|void
name|tst_QMimeDatabase
operator|::
name|fromThreads
parameter_list|()
block|{
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|setMaxThreadCount
argument_list|(
literal|20
argument_list|)
expr_stmt|;
comment|// Note that data-based tests cannot be used here (QTest::fetchData asserts).
name|QFutureSynchronizer
argument_list|<
name|void
argument_list|>
name|sync
decl_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|mimeTypeForName
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|aliases
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|allMimeTypes
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|icons
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|inheritance
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|knownSuffix
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|mimeTypeForFileWithContent
argument_list|)
argument_list|)
expr_stmt|;
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|this
argument_list|,
operator|&
name|tst_QMimeDatabase
operator|::
name|allMimeTypes
argument_list|)
argument_list|)
expr_stmt|;
comment|// a second time
comment|// sync dtor blocks waiting for finished
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_function
DECL|function|runUpdateMimeDatabase
specifier|static
name|bool
name|runUpdateMimeDatabase
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
comment|// TODO make it a QMimeDatabase method?
block|{
specifier|const
name|QString
name|umdCommand
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"update-mime-database"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|umd
init|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|umdCommand
argument_list|)
decl_stmt|;
if|if
condition|(
name|umd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s does not exist."
argument_list|,
name|qPrintable
argument_list|(
name|umdCommand
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
expr_stmt|;
comment|// silence output
name|proc
operator|.
name|start
argument_list|(
name|umd
argument_list|,
name|QStringList
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proc
operator|.
name|waitForStarted
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot start %s: %s"
argument_list|,
name|qPrintable
argument_list|(
name|umd
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|proc
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|proc
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
comment|//qDebug()<< "runUpdateMimeDatabase"<< path;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|waitAndRunUpdateMimeDatabase
specifier|static
name|bool
name|waitAndRunUpdateMimeDatabase
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QFileInfo
name|mimeCacheInfo
argument_list|(
name|path
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/mime.cache"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeCacheInfo
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Wait until the beginning of the next second
while|while
condition|(
name|mimeCacheInfo
operator|.
name|lastModified
argument_list|()
operator|.
name|secsTo
argument_list|(
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|runUpdateMimeDatabase
argument_list|(
name|path
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_PROCESS
end_comment
begin_function
DECL|function|checkHasMimeType
specifier|static
name|void
name|checkHasMimeType
parameter_list|(
specifier|const
name|QString
modifier|&
name|mimeType
parameter_list|)
block|{
name|QMimeDatabase
name|db
decl_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|mimeType
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QMimeType
modifier|&
name|mt
decl|,
name|db
operator|.
name|allMimeTypes
argument_list|()
control|)
block|{
if|if
condition|(
name|mt
operator|.
name|name
argument_list|()
operator|==
name|mimeType
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_CORE_EXPORT
name|int
name|qmime_secondsBetweenChecks
decl_stmt|;
end_decl_stmt
begin_comment
comment|// see qmimeprovider.cpp
end_comment
begin_function
name|QT_END_NAMESPACE
DECL|function|installNewGlobalMimeType
name|void
name|tst_QMimeDatabase
operator|::
name|installNewGlobalMimeType
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
name|qmime_secondsBetweenChecks
operator|=
literal|0
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|mimeDir
init|=
name|m_globalXdgDir
operator|+
name|QLatin1String
argument_list|(
literal|"/mime"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|destDir
init|=
name|mimeDir
operator|+
name|QLatin1String
argument_list|(
literal|"/packages/"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|destFile
init|=
name|destDir
operator|+
name|QLatin1String
argument_list|(
name|yastFileName
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destQmlFile
init|=
name|destDir
operator|+
name|QLatin1String
argument_list|(
name|qmlAgainFileName
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destQmlFile
argument_list|)
expr_stmt|;
comment|//qDebug()<< destFile;
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|destDir
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|m_globalXdgDir
argument_list|)
operator|.
name|mkpath
argument_list|(
name|destDir
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|copyResourceFile
argument_list|(
name|m_yastMimeTypes
argument_list|,
name|destFile
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|copyResourceFile
argument_list|(
name|m_qmlAgainFileName
argument_list|,
name|destQmlFile
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitAndRunUpdateMimeDatabase
argument_list|(
name|mimeDir
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"shared-mime-info not found, skipping mime.cache test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.ymu"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-suse-ymu"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|checkHasMimeType
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
expr_stmt|;
comment|// Test that a double-definition of a mimetype doesn't lead to sniffing ("conflicting globs").
specifier|const
name|QString
name|qmlTestFile
init|=
name|QLatin1String
argument_list|(
name|RESOURCE_PREFIX
literal|"test.qml"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|qmlTestFile
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot find '%1' starting from '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"test.qml"
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|qmlTestFile
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-qml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test removing it again
name|QFile
operator|::
name|remove
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destQmlFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitAndRunUpdateMimeDatabase
argument_list|(
name|mimeDir
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"shared-mime-info not found, skipping mime.cache test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.ymu"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// !QT_NO_PROCESS
block|}
end_function
begin_function
DECL|function|installNewLocalMimeType
name|void
name|tst_QMimeDatabase
operator|::
name|installNewLocalMimeType
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
name|qmime_secondsBetweenChecks
operator|=
literal|0
expr_stmt|;
name|QMimeDatabase
name|db
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|mimeDir
init|=
name|m_localXdgDir
operator|+
name|QLatin1String
argument_list|(
literal|"/mime"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|destDir
init|=
name|mimeDir
operator|+
name|QLatin1String
argument_list|(
literal|"/packages/"
argument_list|)
decl_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destFile
init|=
name|destDir
operator|+
name|QLatin1String
argument_list|(
name|yastFileName
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|destQmlFile
init|=
name|destDir
operator|+
name|QLatin1String
argument_list|(
name|qmlAgainFileName
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destQmlFile
argument_list|)
expr_stmt|;
name|QString
name|errorMessage
decl_stmt|;
name|QVERIFY2
argument_list|(
name|copyResourceFile
argument_list|(
name|m_yastMimeTypes
argument_list|,
name|destFile
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|copyResourceFile
argument_list|(
name|m_qmlAgainFileName
argument_list|,
name|destQmlFile
argument_list|,
operator|&
name|errorMessage
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runUpdateMimeDatabase
argument_list|(
name|mimeDir
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|skipWarning
init|=
name|QStringLiteral
argument_list|(
literal|"shared-mime-info not found, skipping mime.cache test ("
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|mimeDir
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
decl_stmt|;
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|skipWarning
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.ymu"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-suse-ymu"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|checkHasMimeType
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
expr_stmt|;
comment|// Test that a double-definition of a mimetype doesn't lead to sniffing ("conflicting globs").
specifier|const
name|QString
name|qmlTestFile
init|=
name|QLatin1String
argument_list|(
name|RESOURCE_PREFIX
literal|"test.qml"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|qmlTestFile
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot find '%1' starting from '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
literal|"test.qml"
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|qmlTestFile
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"text/x-qml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now test removing the local mimetypes again (note, this leaves a mostly-empty mime.cache file)
name|QFile
operator|::
name|remove
argument_list|(
name|destFile
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|destQmlFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|waitAndRunUpdateMimeDatabase
argument_list|(
name|mimeDir
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"shared-mime-info not found, skipping mime.cache test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.ymu"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// And now the user goes wild and uses rm -rf
name|QFile
operator|::
name|remove
argument_list|(
name|mimeDir
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/mime.cache"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|mimeTypeForFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo.ymu"
argument_list|)
argument_list|,
name|QMimeDatabase
operator|::
name|MatchExtension
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"application/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|mimeTypeForName
argument_list|(
name|QLatin1String
argument_list|(
literal|"text/x-suse-ymp"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_GUILESS_MAIN
argument_list|(
argument|tst_QMimeDatabase
argument_list|)
end_macro
end_unit
