begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Intel Corporation. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QUrlQuery>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_typedef
DECL|typedef|QueryItems
typedef|typedef
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|QueryItems
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QueryItems
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QUrl::ComponentFormattingOptions
argument_list|)
end_macro
begin_class
DECL|class|tst_QUrlQuery
class|class
name|tst_QUrlQuery
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QUrlQuery
name|tst_QUrlQuery
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QueryItems
argument_list|>
argument_list|()
expr_stmt|;
block|}
private|private
name|Q_SLOTS
private|:
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|addRemove
parameter_list|()
function_decl|;
name|void
name|multiAddRemove
parameter_list|()
function_decl|;
name|void
name|multiplyAddSamePair
parameter_list|()
function_decl|;
name|void
name|setQueryItems_data
parameter_list|()
function_decl|;
name|void
name|setQueryItems
parameter_list|()
function_decl|;
name|void
name|basicParsing_data
parameter_list|()
function_decl|;
name|void
name|basicParsing
parameter_list|()
function_decl|;
name|void
name|reconstructQuery_data
parameter_list|()
function_decl|;
name|void
name|reconstructQuery
parameter_list|()
function_decl|;
name|void
name|encodedSetQueryItems_data
parameter_list|()
function_decl|;
name|void
name|encodedSetQueryItems
parameter_list|()
function_decl|;
name|void
name|encodedParsing_data
parameter_list|()
function_decl|;
name|void
name|encodedParsing
parameter_list|()
function_decl|;
name|void
name|differentDelimiters
parameter_list|()
function_decl|;
comment|// old tests from tst_qurl.cpp
comment|// add new tests above
name|void
name|old_queryItems
parameter_list|()
function_decl|;
name|void
name|old_hasQueryItem_data
parameter_list|()
function_decl|;
name|void
name|old_hasQueryItem
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|prettyElement
specifier|static
name|QString
name|prettyElement
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|isNull
argument_list|()
condition|)
name|result
operator|+=
literal|"null -> "
expr_stmt|;
else|else
name|result
operator|+=
literal|'"'
operator|%
name|key
operator|%
literal|"\" -> "
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
name|result
operator|+=
literal|"null"
expr_stmt|;
else|else
name|result
operator|+=
literal|'"'
operator|%
name|value
operator|%
literal|'"'
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|prettyPair
specifier|static
name|QString
name|prettyPair
parameter_list|(
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
operator|::
name|const_iterator
name|it
parameter_list|)
block|{
return|return
name|prettyElement
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|prettyList
specifier|static
name|QByteArray
name|prettyList
parameter_list|(
specifier|const
name|T
modifier|&
name|items
parameter_list|)
block|{
name|QString
name|result
init|=
literal|"("
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
typename|typename
name|T
operator|::
name|const_iterator
name|it
init|=
name|items
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|items
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|result
operator|+=
literal|", "
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|result
operator|+=
name|prettyPair
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
name|result
operator|+=
literal|")"
expr_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|compare
specifier|static
name|bool
name|compare
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
modifier|&
name|actual
parameter_list|,
specifier|const
name|QueryItems
modifier|&
name|expected
parameter_list|,
specifier|const
name|char
modifier|*
name|actualStr
parameter_list|,
specifier|const
name|char
modifier|*
name|expectedStr
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
return|return
name|QTest
operator|::
name|compare_helper
argument_list|(
name|actual
operator|==
name|expected
argument_list|,
literal|"Compared values are not the same"
argument_list|,
name|qstrdup
argument_list|(
name|prettyList
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|,
name|qstrdup
argument_list|(
name|prettyList
argument_list|(
name|expected
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|actualStr
argument_list|,
name|expectedStr
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|COMPARE_ITEMS
define|#
directive|define
name|COMPARE_ITEMS
parameter_list|(
name|actual
parameter_list|,
name|expected
parameter_list|)
define|\
value|do { \         if (!compare(actual, expected, #actual, #expected, __FILE__, __LINE__)) \             return; \     } while (0)
end_define
begin_function
DECL|function|operator +
specifier|inline
name|QueryItems
name|operator
name|+
parameter_list|(
name|QueryItems
name|items
parameter_list|,
specifier|const
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|pair
parameter_list|)
block|{
comment|// items is already a copy
name|items
operator|.
name|append
argument_list|(
name|pair
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_function
DECL|function|operator +
specifier|inline
name|QueryItems
name|operator
name|+
parameter_list|(
specifier|const
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|pair
parameter_list|,
name|QueryItems
name|items
parameter_list|)
block|{
comment|// items is already a copy
name|items
operator|.
name|prepend
argument_list|(
name|pair
argument_list|)
expr_stmt|;
return|return
name|items
return|;
block|}
end_function
begin_function
DECL|function|qItem
specifier|inline
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|qItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|first
parameter_list|,
specifier|const
name|QString
modifier|&
name|second
parameter_list|)
block|{
return|return
name|qMakePair
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qItem
specifier|inline
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|qItem
parameter_list|(
specifier|const
name|char
modifier|*
name|first
parameter_list|,
specifier|const
name|QString
modifier|&
name|second
parameter_list|)
block|{
return|return
name|qMakePair
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|first
argument_list|)
argument_list|,
name|second
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qItem
specifier|inline
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|qItem
parameter_list|(
specifier|const
name|char
modifier|*
name|first
parameter_list|,
specifier|const
name|char
modifier|*
name|second
parameter_list|)
block|{
return|return
name|qMakePair
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|first
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|second
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qItem
specifier|inline
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|qItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|first
parameter_list|,
specifier|const
name|char
modifier|*
name|second
parameter_list|)
block|{
return|return
name|qMakePair
argument_list|(
name|first
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|second
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|emptyQuery
specifier|static
name|QUrlQuery
name|emptyQuery
parameter_list|()
block|{
return|return
name|QUrlQuery
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|constructing
name|void
name|tst_QUrlQuery
operator|::
name|constructing
parameter_list|()
block|{
name|QUrlQuery
name|empty
decl_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|.
name|queryPairDelimiter
argument_list|()
argument_list|,
name|QUrlQuery
operator|::
name|defaultQueryPairDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|.
name|queryValueDelimiter
argument_list|()
argument_list|,
name|QUrlQuery
operator|::
name|defaultQueryValueDelimiter
argument_list|()
argument_list|)
expr_stmt|;
comment|// undefined whether it is detached, but don't crash
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isDetached
argument_list|()
operator|||
operator|!
name|empty
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|empty
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QUrlQuery
name|copy
argument_list|(
name|empty
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|copy
operator|!=
name|empty
operator|)
argument_list|)
expr_stmt|;
name|copy
operator|=
name|empty
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|empty
argument_list|)
expr_stmt|;
name|copy
operator|=
name|QUrlQuery
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|empty
argument_list|)
expr_stmt|;
block|}
block|{
name|QUrlQuery
name|copy
argument_list|(
name|emptyQuery
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|empty
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|hasQueryItem
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|queryItemValue
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|allQueryItemValues
argument_list|(
literal|""
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|empty
operator|.
name|hasQueryItem
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|queryItemValue
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|allQueryItemValues
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|empty
operator|.
name|queryItems
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QUrlQuery
name|other
decl_stmt|;
name|other
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|other
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|other
operator|!=
name|empty
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|other
operator|==
name|empty
operator|)
argument_list|)
expr_stmt|;
name|QUrlQuery
name|copy
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|other
argument_list|)
expr_stmt|;
name|copy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|!=
name|other
argument_list|)
expr_stmt|;
name|copy
operator|=
name|other
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|==
name|other
argument_list|)
expr_stmt|;
name|copy
operator|=
name|QUrlQuery
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|empty
operator|.
name|setQueryDelimiters
argument_list|(
literal|'('
argument_list|,
literal|')'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|.
name|queryValueDelimiter
argument_list|()
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|empty
operator|.
name|queryPairDelimiter
argument_list|()
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|query
decl_stmt|;
name|query
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"login"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"Ã¥ge nissemannsen"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"ole&du"
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"anne+jÃ¸rgen=sant"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"prosent"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%"
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setQueryItems
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|copy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addRemove
name|void
name|tst_QUrlQuery
operator|::
name|addRemove
parameter_list|()
block|{
name|QUrlQuery
name|query
decl_stmt|;
block|{
comment|// one item
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|allItems
init|=
name|query
operator|.
name|queryItems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|first
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QUrlQuery
name|original
init|=
name|query
decl_stmt|;
block|{
comment|// two items
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"c"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"d"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|allItems
init|=
name|query
operator|.
name|queryItems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allItems
operator|.
name|contains
argument_list|(
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allItems
operator|.
name|contains
argument_list|(
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|!=
name|original
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|query
operator|==
name|original
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove an item that isn't there
name|QUrlQuery
name|copy
init|=
name|query
decl_stmt|;
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove an item
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|allItems
init|=
name|query
operator|.
name|queryItems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|first
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|==
name|original
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|query
operator|!=
name|original
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// add an item with en empty value
name|QString
name|emptyButNotNull
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|emptyButNotNull
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|emptyButNotNull
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"e"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|emptyButNotNull
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"e"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|emptyButNotNull
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|allItems
init|=
name|query
operator|.
name|queryItems
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allItems
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allItems
operator|.
name|contains
argument_list|(
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|allItems
operator|.
name|contains
argument_list|(
name|qItem
argument_list|(
literal|"e"
argument_list|,
name|emptyButNotNull
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|!=
name|original
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|query
operator|==
name|original
operator|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove the items
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multiAddRemove
name|void
name|tst_QUrlQuery
operator|::
name|multiAddRemove
parameter_list|()
block|{
name|QUrlQuery
name|query
decl_stmt|;
block|{
comment|// one item, two values
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// returns the first one
name|QVERIFY
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
operator|==
literal|"b"
argument_list|)
expr_stmt|;
comment|// order is the order we set them in
name|QVERIFY
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
operator|==
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
block|}
block|{
comment|// add another item, two values
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"A"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
operator|==
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
operator|==
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"A"
argument_list|)
operator|==
literal|"B"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"A"
argument_list|)
operator|==
name|QStringList
argument_list|()
operator|<<
literal|"B"
operator|<<
literal|"C"
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove one of the original items
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// it must have removed the first one
name|QVERIFY
argument_list|(
name|query
operator|.
name|queryItemValue
argument_list|(
literal|"a"
argument_list|)
operator|==
literal|"c"
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove the items we added later
name|query
operator|.
name|removeAllQueryItems
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// add one element to the current, then remove them
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeAllQueryItems
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|query
operator|.
name|hasQueryItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multiplyAddSamePair
name|void
name|tst_QUrlQuery
operator|::
name|multiplyAddSamePair
parameter_list|()
block|{
name|QUrlQuery
name|query
decl_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
name|query
operator|.
name|removeQueryItem
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|allQueryItemValues
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"a"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setQueryItems_data
name|void
name|tst_QUrlQuery
operator|::
name|setQueryItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QueryItems
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QString
name|emptyButNotNull
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QueryItems
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-novalue"
argument_list|)
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-emptyvalue"
argument_list|)
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|emptyButNotNull
argument_list|)
operator|)
expr_stmt|;
name|QueryItems
name|list
decl_stmt|;
name|list
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-value"
argument_list|)
operator|<<
name|list
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-multi"
argument_list|)
operator|<<
operator|(
name|list
operator|+
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-duplicated"
argument_list|)
operator|<<
operator|(
name|list
operator|+
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
name|list
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|list
expr_stmt|;
name|list
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"e"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-multi"
argument_list|)
operator|<<
name|list
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setQueryItems
name|void
name|tst_QUrlQuery
operator|::
name|setQueryItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QueryItems
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QUrlQuery
name|query
decl_stmt|;
name|QueryItems
operator|::
name|const_iterator
name|it
init|=
name|items
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|items
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|query
operator|.
name|addQueryItem
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|query
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|.
name|setQueryItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicParsing_data
name|void
name|tst_QUrlQuery
operator|::
name|basicParsing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"queryString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QueryItems
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QString
name|emptyButNotNull
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QueryItems
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
name|QueryItems
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-novalue"
argument_list|)
operator|<<
literal|"a"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-emptyvalue"
argument_list|)
operator|<<
literal|"a="
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|emptyButNotNull
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-value"
argument_list|)
operator|<<
literal|"a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
comment|// some longer keys
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-novalue"
argument_list|)
operator|<<
literal|"thisisalongkey"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-emptyvalue"
argument_list|)
operator|<<
literal|"thisisalongkey="
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
name|emptyButNotNull
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-value"
argument_list|)
operator|<<
literal|"thisisalongkey=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
comment|// longer values
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longvalue-value"
argument_list|)
operator|<<
literal|"a=thisisalongreasonablyvalue"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"thisisalongreasonablyvalue"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longboth-value"
argument_list|)
operator|<<
literal|"thisisalongkey=thisisalongreasonablyvalue"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
literal|"thisisalongreasonablyvalue"
argument_list|)
operator|)
expr_stmt|;
comment|// two or more entries
name|QueryItems
name|baselist
decl_stmt|;
name|baselist
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-cd"
argument_list|)
operator|<<
literal|"a=b&c=d"
operator|<<
name|baselist
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-cd-ab"
argument_list|)
operator|<<
literal|"c=d&a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
comment|// the same entry multiply defined
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-a-a"
argument_list|)
operator|<<
literal|"a&a"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-a"
argument_list|)
operator|<<
literal|"a=b&a"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-ab"
argument_list|)
operator|<<
literal|"a=b&a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-ac"
argument_list|)
operator|<<
literal|"a=b&a=c"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|)
expr_stmt|;
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|novalue
init|=
name|qItem
argument_list|(
literal|"somekey"
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QueryItems
name|list2
init|=
name|baselist
operator|+
name|novalue
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-novalue-ab-cd"
argument_list|)
operator|<<
literal|"somekey&a=b&c=d"
operator|<<
operator|(
name|novalue
operator|+
name|baselist
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-novalue-cd"
argument_list|)
operator|<<
literal|"a=b&somekey&c=d"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|novalue
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-cd-novalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey"
operator|<<
name|list2
expr_stmt|;
name|list2
operator|<<
name|qItem
argument_list|(
literal|"otherkeynovalue"
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4-ab-cd-novalue-novalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey&otherkeynovalue"
operator|<<
name|list2
expr_stmt|;
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|emptyvalue
init|=
name|qItem
argument_list|(
literal|"somekey"
argument_list|,
name|emptyButNotNull
argument_list|)
decl_stmt|;
name|list2
operator|=
name|baselist
operator|+
name|emptyvalue
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-emptyvalue-ab-cd"
argument_list|)
operator|<<
literal|"somekey=&a=b&c=d"
operator|<<
operator|(
name|emptyvalue
operator|+
name|baselist
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-emptyvalue-cd"
argument_list|)
operator|<<
literal|"a=b&somekey=&c=d"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|emptyvalue
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-cd-emptyvalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey="
operator|<<
name|list2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicParsing
name|void
name|tst_QUrlQuery
operator|::
name|basicParsing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QueryItems
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QUrlQuery
name|query
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|items
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|()
argument_list|,
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reconstructQuery_data
name|void
name|tst_QUrlQuery
operator|::
name|reconstructQuery_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"queryString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QueryItems
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QString
name|emptyButNotNull
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QueryItems
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
name|QueryItems
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-novalue"
argument_list|)
operator|<<
literal|"a"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-emptyvalue"
argument_list|)
operator|<<
literal|"a="
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|emptyButNotNull
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-value"
argument_list|)
operator|<<
literal|"a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
comment|// some longer keys
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-novalue"
argument_list|)
operator|<<
literal|"thisisalongkey"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-emptyvalue"
argument_list|)
operator|<<
literal|"thisisalongkey="
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
name|emptyButNotNull
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longkey-value"
argument_list|)
operator|<<
literal|"thisisalongkey=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
comment|// longer values
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longvalue-value"
argument_list|)
operator|<<
literal|"a=thisisalongreasonablyvalue"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"thisisalongreasonablyvalue"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1-longboth-value"
argument_list|)
operator|<<
literal|"thisisalongkey=thisisalongreasonablyvalue"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"thisisalongkey"
argument_list|,
literal|"thisisalongreasonablyvalue"
argument_list|)
operator|)
expr_stmt|;
comment|// two or more entries
name|QueryItems
name|baselist
decl_stmt|;
name|baselist
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-cd"
argument_list|)
operator|<<
literal|"a=b&c=d"
operator|<<
name|baselist
expr_stmt|;
comment|// the same entry multiply defined
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-a-a"
argument_list|)
operator|<<
literal|"a&a"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-ab"
argument_list|)
operator|<<
literal|"a=b&a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-ac"
argument_list|)
operator|<<
literal|"a=b&a=c"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ac-ab"
argument_list|)
operator|<<
literal|"a=c&a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-ab-cd"
argument_list|)
operator|<<
literal|"a=b&c=d"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2-cd-ab"
argument_list|)
operator|<<
literal|"c=d&a=b"
operator|<<
operator|(
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
operator|)
expr_stmt|;
name|QueryItems
name|list2
init|=
name|baselist
operator|+
name|qItem
argument_list|(
literal|"somekey"
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-cd-novalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey"
operator|<<
name|list2
expr_stmt|;
name|list2
operator|<<
name|qItem
argument_list|(
literal|"otherkeynovalue"
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4-ab-cd-novalue-novalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey&otherkeynovalue"
operator|<<
name|list2
expr_stmt|;
name|list2
operator|=
name|baselist
operator|+
name|qItem
argument_list|(
literal|"somekey"
argument_list|,
name|emptyButNotNull
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3-ab-cd-emptyvalue"
argument_list|)
operator|<<
literal|"a=b&c=d&somekey="
operator|<<
name|list2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reconstructQuery
name|void
name|tst_QUrlQuery
operator|::
name|reconstructQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QueryItems
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QUrlQuery
name|query
decl_stmt|;
comment|// add the items
for|for
control|(
name|QueryItems
operator|::
name|ConstIterator
name|it
init|=
name|items
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|items
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|query
operator|.
name|addQueryItem
argument_list|(
name|it
operator|->
name|first
argument_list|,
name|it
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|()
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodedSetQueryItems_data
name|void
name|tst_QUrlQuery
operator|::
name|encodedSetQueryItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"queryString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|>
argument_list|(
literal|"encoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedQuery"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
typedef|typedef
name|QUrl
operator|::
name|ComponentFormattingOptions
name|F
typedef|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nul"
argument_list|)
operator|<<
literal|"f%00=bar%00"
operator|<<
literal|"f%00"
operator|<<
literal|"bar%00"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"f%00=bar%00"
operator|<<
literal|"f%00"
operator|<<
literal|"bar%00"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-decodable-1"
argument_list|)
operator|<<
literal|"foo%01%7f=b%1ar"
operator|<<
literal|"foo%01%7f"
operator|<<
literal|"b%1ar"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"foo%01%7F=b%1Ar"
operator|<<
literal|"foo%01%7F"
operator|<<
literal|"b%1Ar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-decodable-2"
argument_list|)
operator|<<
literal|"foo\x01\x7f=b\x1ar"
operator|<<
literal|"foo\x01\x7f"
operator|<<
literal|"b\x1Ar"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"foo%01%7F=b%1Ar"
operator|<<
literal|"foo%01%7F"
operator|<<
literal|"b%1Ar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space"
argument_list|)
operator|<<
literal|"%20=%20"
operator|<<
literal|"%20"
operator|<<
literal|"%20"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|" = "
operator|<<
literal|" "
operator|<<
literal|" "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-space"
argument_list|)
operator|<<
literal|" = "
operator|<<
literal|" "
operator|<<
literal|" "
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%20=%20"
operator|<<
literal|"%20"
operator|<<
literal|"%20"
expr_stmt|;
comment|// tri-state
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decode-non-delimiters"
argument_list|)
operator|<<
literal|"%3C%5C%3E=%7B%7C%7D%5E%60"
operator|<<
literal|"%3C%5C%3E"
operator|<<
literal|"%7B%7C%7D%5E%60"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|DecodeReserved
argument_list|)
operator|<<
literal|"<\\>={|}^`"
operator|<<
literal|"<\\>"
operator|<<
literal|"{|}^`"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-non-delimiters"
argument_list|)
operator|<<
literal|"<\\>={|}^`"
operator|<<
literal|"<\\>"
operator|<<
literal|"{|}^`"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|EncodeReserved
argument_list|)
operator|<<
literal|"%3C%5C%3E=%7B%7C%7D%5E%60"
operator|<<
literal|"%3C%5C%3E"
operator|<<
literal|"%7B%7C%7D%5E%60"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pretty-non-delimiters"
argument_list|)
operator|<<
literal|"<\\>={|}^`"
operator|<<
literal|"<\\>"
operator|<<
literal|"{|}^`"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%3C%5C%3E=%7B%7C%7D%5E%60"
operator|<<
literal|"<\\>"
operator|<<
literal|"{|}^`"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equals"
argument_list|)
operator|<<
literal|"%3D=%3D"
operator|<<
literal|"%3D"
operator|<<
literal|"%3D"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%3D=%3D"
operator|<<
literal|"="
operator|<<
literal|"="
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equals-2"
argument_list|)
operator|<<
literal|"%3D=="
operator|<<
literal|"="
operator|<<
literal|"="
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%3D=%3D"
operator|<<
literal|"="
operator|<<
literal|"="
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ampersand"
argument_list|)
operator|<<
literal|"%26=%26"
operator|<<
literal|"%26"
operator|<<
literal|"%26"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%26=%26"
operator|<<
literal|"&"
operator|<<
literal|"&"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hash"
argument_list|)
operator|<<
literal|"#=#"
operator|<<
literal|"%23"
operator|<<
literal|"%23"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"#=#"
operator|<<
literal|"#"
operator|<<
literal|"#"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decode-hash"
argument_list|)
operator|<<
literal|"%23=%23"
operator|<<
literal|"%23"
operator|<<
literal|"%23"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"#=#"
operator|<<
literal|"#"
operator|<<
literal|"#"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"percent"
argument_list|)
operator|<<
literal|"%25=%25"
operator|<<
literal|"%25"
operator|<<
literal|"%25"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%25=%25"
operator|<<
literal|"%25"
operator|<<
literal|"%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad-percent-1"
argument_list|)
operator|<<
literal|"%=%"
operator|<<
literal|"%"
operator|<<
literal|"%"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%25=%25"
operator|<<
literal|"%25"
operator|<<
literal|"%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad-percent-2"
argument_list|)
operator|<<
literal|"%2=%2"
operator|<<
literal|"%2"
operator|<<
literal|"%2"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%252=%252"
operator|<<
literal|"%252"
operator|<<
literal|"%252"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plus"
argument_list|)
operator|<<
literal|"+=+"
operator|<<
literal|"+"
operator|<<
literal|"+"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"+=+"
operator|<<
literal|"+"
operator|<<
literal|"+"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2b"
argument_list|)
operator|<<
literal|"%2b=%2b"
operator|<<
literal|"%2b"
operator|<<
literal|"%2b"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%2B=%2B"
operator|<<
literal|"%2B"
operator|<<
literal|"%2B"
expr_stmt|;
comment|// plus signs must not be touched
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-plus"
argument_list|)
operator|<<
literal|"+=+"
operator|<<
literal|"+"
operator|<<
literal|"+"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"+=+"
operator|<<
literal|"+"
operator|<<
literal|"+"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decode-2b"
argument_list|)
operator|<<
literal|"%2b=%2b"
operator|<<
literal|"%2b"
operator|<<
literal|"%2b"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%2B=%2B"
operator|<<
literal|"%2B"
operator|<<
literal|"%2B"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode"
argument_list|)
operator|<<
literal|"q=R%C3%a9sum%c3%A9"
operator|<<
literal|"q"
operator|<<
literal|"R%C3%a9sum%c3%A9"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"q=R\xc3\xa9sum\xc3\xa9"
argument_list|)
operator|<<
literal|"q"
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"R\xc3\xa9sum\xc3\xa9"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-unicode"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"q=R\xc3\xa9sum\xc3\xa9"
argument_list|)
operator|<<
literal|"q"
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"R\xc3\xa9sum\xc3\xa9"
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"q=R%C3%A9sum%C3%A9"
operator|<<
literal|"q"
operator|<<
literal|"R%C3%A9sum%C3%A9"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodedSetQueryItems
name|void
name|tst_QUrlQuery
operator|::
name|encodedSetQueryItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|QUrlQuery
name|query
decl_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
name|expectedKey
argument_list|,
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodedParsing_data
name|void
name|tst_QUrlQuery
operator|::
name|encodedParsing_data
parameter_list|()
block|{
name|encodedSetQueryItems_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodedParsing
name|void
name|tst_QUrlQuery
operator|::
name|encodedParsing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|queryString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
name|QUrlQuery
name|query
argument_list|(
name|queryString
argument_list|)
decl_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|QueryItems
argument_list|()
operator|<<
name|qItem
argument_list|(
name|expectedKey
argument_list|,
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|(
name|encoding
argument_list|)
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|differentDelimiters
name|void
name|tst_QUrlQuery
operator|::
name|differentDelimiters
parameter_list|()
block|{
name|QUrlQuery
name|query
decl_stmt|;
name|query
operator|.
name|setQueryDelimiters
argument_list|(
literal|'('
argument_list|,
literal|')'
argument_list|)
expr_stmt|;
block|{
comment|// parse:
name|query
operator|.
name|setQuery
argument_list|(
literal|"foo(bar)hello(world)"
argument_list|)
expr_stmt|;
name|QueryItems
name|expected
decl_stmt|;
name|expected
operator|<<
name|qItem
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|<<
name|qItem
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|COMPARE_ITEMS
argument_list|(
name|query
operator|.
name|queryItems
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|{
comment|// reconstruct:
comment|// note the final ')' is missing because there are no further items
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo(bar)hello(world"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// set items containing the new delimiters and the old ones
name|query
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
operator|.
name|addQueryItem
argument_list|(
literal|"z(=)"
argument_list|,
literal|"y(&)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"z%28=%29(y%28&%29"
argument_list|)
argument_list|)
expr_stmt|;
name|QUrlQuery
name|copy
init|=
name|query
decl_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|query
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"z%28=%29(y%28&%29"
argument_list|)
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setQueryDelimiters
argument_list|(
name|QUrlQuery
operator|::
name|defaultQueryValueDelimiter
argument_list|()
argument_list|,
name|QUrlQuery
operator|::
name|defaultQueryPairDelimiter
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|query
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"z(%3D)=y(%26)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|old_queryItems
name|void
name|tst_QUrlQuery
operator|::
name|old_queryItems
parameter_list|()
block|{
comment|// test imported from old tst_qurl.cpp
name|QUrlQuery
name|url
decl_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|newItems
decl_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a b"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"5"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"&"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"foo+bar"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"hello+world"
argument_list|)
argument_list|)
expr_stmt|;
name|newItems
operator|+=
name|qMakePair
argument_list|(
name|QString
argument_list|(
literal|"tex"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a + b = c"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|.
name|setQueryItems
argument_list|(
name|newItems
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|url
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
argument_list|>
name|setItems
init|=
name|url
operator|.
name|queryItems
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|newItems
operator|==
name|setItems
argument_list|)
expr_stmt|;
name|url
operator|.
name|addQueryItem
argument_list|(
literal|"1"
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// undefined behaviour in the new QUrlQuery
block|QVERIFY(url.hasQueryItem("1"));     QCOMPARE(url.queryItemValue("1").toLatin1().constData(), "a");      url.addQueryItem("1", "zz");      QStringList expected;     expected += "a";     expected += "z";     expected += "zz";     QCOMPARE(url.allQueryItemValues("1"), expected);      url.removeQueryItem("1");     QCOMPARE(url.allQueryItemValues("1").size(), 2);     QCOMPARE(url.queryItemValue("1").toLatin1().constData(), "z");
endif|#
directive|endif
name|url
operator|.
name|removeAllQueryItems
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|url
operator|.
name|hasQueryItem
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"4"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"a b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"5"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"&"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"tex"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"a + b = c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"foo bar"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"hello world"
argument_list|)
expr_stmt|;
comment|//url.setUrl("http://www.google.com/search?q=a+b");
name|url
operator|.
name|setQuery
argument_list|(
literal|"q=a+b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a+b"
argument_list|)
argument_list|)
expr_stmt|;
comment|//url.setUrl("http://www.google.com/search?q=a=b"); // invalid, but should be tolerated
name|url
operator|.
name|setQuery
argument_list|(
literal|"q=a=b"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|url
operator|.
name|queryItemValue
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a=b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|old_hasQueryItem_data
name|void
name|tst_QUrlQuery
operator|::
name|old_hasQueryItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"trueFalse"
argument_list|)
expr_stmt|;
comment|// the old tests started with "http://www.foo.bar"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no query items"
argument_list|)
operator|<<
literal|""
operator|<<
literal|"baz"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"query item: hello"
argument_list|)
operator|<<
literal|"hello=world"
operator|<<
literal|"hello"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no query item: world"
argument_list|)
operator|<<
literal|"hello=world"
operator|<<
literal|"world"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"query item: qt"
argument_list|)
operator|<<
literal|"hello=world&qt=rocks"
operator|<<
literal|"qt"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|old_hasQueryItem
name|void
name|tst_QUrlQuery
operator|::
name|old_hasQueryItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|trueFalse
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QUrlQuery
argument_list|(
name|url
argument_list|)
operator|.
name|hasQueryItem
argument_list|(
name|item
argument_list|)
argument_list|,
name|trueFalse
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// this test doesn't make sense anymore
end_comment
begin_comment
unit|void tst_QUrl::removeAllEncodedQueryItems_data() {     QTest::addColumn<QUrl>("url");     QTest::addColumn<QByteArray>("key");     QTest::addColumn<QUrl>("result");      QTest::newRow("test1")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b&ccc=c")<< QByteArray("bbb")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&ccc=c");     QTest::newRow("test2")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b&ccc=c")<< QByteArray("aaa")<< QUrl::fromEncoded("http://qt-project.org/foo?bbb=b&ccc=c");
comment|//    QTest::newRow("test3")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b&ccc=c")<< QByteArray("ccc")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b");
end_comment
begin_endif
unit|QTest::newRow("test4")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b&ccc=c")<< QByteArray("b%62b")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&bbb=b&ccc=c");     QTest::newRow("test5")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&b%62b=b&ccc=c")<< QByteArray("b%62b")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&ccc=c");     QTest::newRow("test6")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&b%62b=b&ccc=c")<< QByteArray("bbb")<< QUrl::fromEncoded("http://qt-project.org/foo?aaa=a&b%62b=b&ccc=c"); }  void tst_QUrl::removeAllEncodedQueryItems() {     QFETCH(QUrl, url);     QFETCH(QByteArray, key);     QFETCH(QUrl, result);     url.removeAllEncodedQueryItems(key);     QCOMPARE(url, result); }
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QUrlQuery
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qurlquery.moc"
end_include
end_unit
