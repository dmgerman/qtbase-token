begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qstandardpaths.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qstandardpaths.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qsysinfo.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
end_if
begin_define
DECL|macro|Q_XDG_PLATFORM
define|#
directive|define
name|Q_XDG_PLATFORM
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|MaxStandardLocation
specifier|static
specifier|const
name|int
name|MaxStandardLocation
init|=
name|QStandardPaths
operator|::
name|GenericConfigLocation
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_qstandardpaths
class|class
name|tst_qstandardpaths
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|dump
parameter_list|()
function_decl|;
name|void
name|testDefaultLocations
parameter_list|()
function_decl|;
name|void
name|testCustomLocations
parameter_list|()
function_decl|;
name|void
name|enableTestMode
parameter_list|()
function_decl|;
name|void
name|testLocateAll
parameter_list|()
function_decl|;
name|void
name|testDataLocation
parameter_list|()
function_decl|;
name|void
name|testFindExecutable_data
parameter_list|()
function_decl|;
name|void
name|testFindExecutable
parameter_list|()
function_decl|;
name|void
name|testFindExecutableLinkToDirectory
parameter_list|()
function_decl|;
name|void
name|testRuntimeDirectory
parameter_list|()
function_decl|;
name|void
name|testCustomRuntimeDirectory
parameter_list|()
function_decl|;
name|void
name|testAllWritableLocations_data
parameter_list|()
function_decl|;
name|void
name|testAllWritableLocations
parameter_list|()
function_decl|;
name|void
name|testCleanPath
parameter_list|()
function_decl|;
name|void
name|testXdgPathCleanup
parameter_list|()
function_decl|;
private|private:
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
DECL|function|setCustomLocations
name|void
name|setCustomLocations
parameter_list|()
block|{
name|m_localConfigDir
operator|=
name|m_localConfigTempDir
operator|.
name|path
argument_list|()
expr_stmt|;
name|m_globalConfigDir
operator|=
name|m_globalConfigTempDir
operator|.
name|path
argument_list|()
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_CONFIG_HOME"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_localConfigDir
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_CONFIG_DIRS"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_globalConfigDir
argument_list|)
argument_list|)
expr_stmt|;
name|m_localAppDir
operator|=
name|m_localAppTempDir
operator|.
name|path
argument_list|()
expr_stmt|;
name|m_globalAppDir
operator|=
name|m_globalAppTempDir
operator|.
name|path
argument_list|()
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_HOME"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_localAppDir
argument_list|)
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_DIRS"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_globalAppDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|setDefaultLocations
name|void
name|setDefaultLocations
parameter_list|()
block|{
name|qputenv
argument_list|(
literal|"XDG_CONFIG_HOME"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_CONFIG_DIRS"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_HOME"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_DIRS"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Config dirs
DECL|member|m_localConfigDir
name|QString
name|m_localConfigDir
decl_stmt|;
DECL|member|m_localConfigTempDir
name|QTemporaryDir
name|m_localConfigTempDir
decl_stmt|;
DECL|member|m_globalConfigDir
name|QString
name|m_globalConfigDir
decl_stmt|;
DECL|member|m_globalConfigTempDir
name|QTemporaryDir
name|m_globalConfigTempDir
decl_stmt|;
comment|// App dirs
DECL|member|m_localAppDir
name|QString
name|m_localAppDir
decl_stmt|;
DECL|member|m_localAppTempDir
name|QTemporaryDir
name|m_localAppTempDir
decl_stmt|;
DECL|member|m_globalAppDir
name|QString
name|m_globalAppDir
decl_stmt|;
DECL|member|m_globalAppTempDir
name|QTemporaryDir
name|m_globalAppTempDir
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|enumNames
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|enumNames
index|[
name|MaxStandardLocation
operator|+
literal|1
operator|-
name|int
argument_list|(
name|QStandardPaths
operator|::
name|DesktopLocation
argument_list|)
index|]
init|=
block|{
literal|"DesktopLocation"
block|,
literal|"DocumentsLocation"
block|,
literal|"FontsLocation"
block|,
literal|"ApplicationsLocation"
block|,
literal|"MusicLocation"
block|,
literal|"MoviesLocation"
block|,
literal|"PicturesLocation"
block|,
literal|"TempLocation"
block|,
literal|"HomeLocation"
block|,
literal|"DataLocation"
block|,
literal|"CacheLocation"
block|,
literal|"GenericDataLocation"
block|,
literal|"RuntimeLocation"
block|,
literal|"ConfigLocation"
block|,
literal|"DownloadLocation"
block|,
literal|"GenericCacheLocation"
block|,
literal|"GenericConfigLocation"
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|dump
name|void
name|tst_qstandardpaths
operator|::
name|dump
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setDefaultLocations
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// This is not a test. It merely dumps the output.
for|for
control|(
name|int
name|i
init|=
name|QStandardPaths
operator|::
name|DesktopLocation
init|;
name|i
operator|<=
name|MaxStandardLocation
condition|;
operator|++
name|i
control|)
block|{
name|QStandardPaths
operator|::
name|StandardLocation
name|s
init|=
name|QStandardPaths
operator|::
name|StandardLocation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|enumNames
index|[
name|i
index|]
operator|<<
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|s
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testDefaultLocations
name|void
name|tst_qstandardpaths
operator|::
name|testDefaultLocations
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setDefaultLocations
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|expectedConfHome
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/.config"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
argument_list|,
name|expectedConfHome
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
argument_list|,
name|expectedConfHome
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|confDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|confDirs
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|confDirs
operator|.
name|contains
argument_list|(
name|expectedConfHome
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
argument_list|,
name|confDirs
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|genericDataDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|genericDataDirs
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|expectedDataHome
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/.local/share"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|genericDataDirs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expectedDataHome
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|genericDataDirs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/usr/local/share"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|genericDataDirs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/usr/share"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|createTestFile
specifier|static
name|void
name|createTestFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCustomLocations
name|void
name|tst_qstandardpaths
operator|::
name|testCustomLocations
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setCustomLocations
argument_list|()
expr_stmt|;
comment|// test writableLocation()
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
argument_list|,
name|m_localConfigDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
argument_list|,
name|m_localConfigDir
argument_list|)
expr_stmt|;
comment|// test locate()
specifier|const
name|QString
name|thisFileName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"aFile"
argument_list|)
decl_stmt|;
name|createTestFile
argument_list|(
name|m_localConfigDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|thisFileName
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|thisFile
init|=
name|QStandardPaths
operator|::
name|locate
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|,
name|thisFileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thisFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thisFile
operator|.
name|endsWith
argument_list|(
name|thisFileName
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|subdir
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"subdir"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|subdirPath
init|=
name|m_localConfigDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|subdir
decl_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
name|subdirPath
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|dir
init|=
name|QStandardPaths
operator|::
name|locate
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|,
name|subdir
argument_list|,
name|QStandardPaths
operator|::
name|LocateDirectory
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
argument_list|,
name|subdirPath
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|thisDirAsFile
init|=
name|QStandardPaths
operator|::
name|locate
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|,
name|subdir
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|thisDirAsFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not a file
specifier|const
name|QStringList
name|dirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dirs
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|m_localConfigDir
operator|<<
name|m_globalConfigDir
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|enableTestMode
name|void
name|tst_qstandardpaths
operator|::
name|enableTestMode
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|QStandardPaths
operator|::
name|isTestModeEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QStandardPaths
operator|::
name|setTestModeEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStandardPaths
operator|::
name|isTestModeEnabled
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setCustomLocations
argument_list|()
expr_stmt|;
comment|// for the global config dir
specifier|const
name|QString
name|qttestDir
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/.qttest"
argument_list|)
decl_stmt|;
comment|// ConfigLocation
specifier|const
name|QString
name|configDir
init|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/config"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
argument_list|,
name|configDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
argument_list|,
name|configDir
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|confDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|confDirs
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|configDir
operator|<<
name|m_globalConfigDir
argument_list|)
expr_stmt|;
comment|// GenericDataLocation
specifier|const
name|QString
name|dataDir
init|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/share"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|)
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|gdDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|gdDirs
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|dataDir
operator|<<
name|m_globalAppDir
argument_list|)
expr_stmt|;
comment|// GenericCacheLocation
specifier|const
name|QString
name|cacheDir
init|=
name|qttestDir
operator|+
name|QLatin1String
argument_list|(
literal|"/cache"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericCacheLocation
argument_list|)
argument_list|,
name|cacheDir
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|cacheDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|GenericCacheLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cacheDirs
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|cacheDir
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// On all platforms, we want to ensure that the writableLocation is different in test mode and real mode.
comment|// Check this for locations where test programs typically write. Not desktop, download, music etc...
typedef|typedef
name|QHash
argument_list|<
name|QStandardPaths
operator|::
name|StandardLocation
argument_list|,
name|QString
argument_list|>
name|LocationHash
typedef|;
name|LocationHash
name|testLocations
decl_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|)
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|)
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|CacheLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|CacheLocation
argument_list|)
argument_list|)
expr_stmt|;
name|testLocations
operator|.
name|insert
argument_list|(
name|QStandardPaths
operator|::
name|GenericCacheLocation
argument_list|,
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericCacheLocation
argument_list|)
argument_list|)
expr_stmt|;
comment|// On Windows, what should "Program Files" become, in test mode?
comment|//testLocations.insert(QStandardPaths::ApplicationsLocation, QStandardPaths::writableLocation(QStandardPaths::ApplicationsLocation));
name|QStandardPaths
operator|::
name|setTestModeEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|LocationHash
operator|::
name|const_iterator
name|it
init|=
name|testLocations
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|testLocations
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|QVERIFY2
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|!=
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that this is also true with no env vars set
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setDefaultLocations
argument_list|()
expr_stmt|;
for|for
control|(
name|LocationHash
operator|::
name|const_iterator
name|it
init|=
name|testLocations
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|testLocations
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|QVERIFY2
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|!=
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testLocateAll
name|void
name|tst_qstandardpaths
operator|::
name|testLocateAll
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setCustomLocations
argument_list|()
expr_stmt|;
specifier|const
name|QStringList
name|appsDirs
init|=
name|QStandardPaths
operator|::
name|locateAll
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|,
literal|"applications"
argument_list|,
name|QStandardPaths
operator|::
name|LocateDirectory
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|appsDirs
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// they don't exist yet
specifier|const
name|QStringList
name|expectedAppsDirs
init|=
name|QStringList
argument_list|()
operator|<<
name|m_localAppDir
operator|+
name|QLatin1String
argument_list|(
literal|"/applications"
argument_list|)
operator|<<
name|m_globalAppDir
operator|+
name|QLatin1String
argument_list|(
literal|"/applications"
argument_list|)
decl_stmt|;
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
name|expectedAppsDirs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
name|expectedAppsDirs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|appsDirs2
init|=
name|QStandardPaths
operator|::
name|locateAll
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|,
literal|"applications"
argument_list|,
name|QStandardPaths
operator|::
name|LocateDirectory
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|appsDirs2
argument_list|,
name|expectedAppsDirs
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|appsDirs3
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|ApplicationsLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|appsDirs3
argument_list|,
name|expectedAppsDirs
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|thisFileName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"aFile"
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|expectedFiles
init|=
name|QStringList
argument_list|()
operator|<<
name|m_localConfigDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|thisFileName
operator|<<
name|m_globalConfigDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|thisFileName
decl_stmt|;
name|createTestFile
argument_list|(
name|expectedFiles
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|createTestFile
argument_list|(
name|expectedFiles
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|allFiles
init|=
name|QStandardPaths
operator|::
name|locateAll
argument_list|(
name|QStandardPaths
operator|::
name|ConfigLocation
argument_list|,
name|thisFileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|allFiles
argument_list|,
name|expectedFiles
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testDataLocation
name|void
name|tst_qstandardpaths
operator|::
name|testDataLocation
parameter_list|()
block|{
comment|// On all platforms, DataLocation should be GenericDataLocation / organization name / app name
comment|// This allows one app to access the data of another app.
comment|// Blackberry OS, Android and WinRT are an exception to this case, owing to the fact that
comment|// applications are sandboxed.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
specifier|const
name|QString
name|base
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericDataLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
argument_list|,
name|base
operator|+
literal|"/tst_qstandardpaths"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setOrganizationName
argument_list|(
literal|"Qt"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
argument_list|,
name|base
operator|+
literal|"/Qt/tst_qstandardpaths"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setApplicationName
argument_list|(
literal|"QtTest"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
argument_list|,
name|base
operator|+
literal|"/Qt/QtTest"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setDefaultLocations
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|expectedAppDataDir
init|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/.local/share/Qt/QtTest"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
argument_list|,
name|expectedAppDataDir
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|appDataDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|DataLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|appDataDirs
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appDataDirs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|expectedAppDataDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appDataDirs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/usr/local/share/Qt/QtTest"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|appDataDirs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/usr/share/Qt/QtTest"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_comment
comment|// Find "sh" on Unix.
end_comment
begin_comment
comment|// It may exist twice, in /bin/sh and /usr/bin/sh, in that case use the PATH order.
end_comment
begin_function
DECL|function|findSh
specifier|static
specifier|inline
name|QFileInfo
name|findSh
parameter_list|()
block|{
name|QLatin1String
name|sh
argument_list|(
literal|"/sh"
argument_list|)
decl_stmt|;
name|QByteArray
name|pEnv
init|=
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1Char
name|pathSep
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|rawPaths
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pEnv
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
name|pathSep
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|rawPaths
control|)
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|path
operator|+
name|sh
argument_list|)
condition|)
return|return
name|path
operator|+
name|sh
return|;
block|}
return|return
name|QFileInfo
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testFindExecutable_data
name|void
name|tst_qstandardpaths
operator|::
name|testFindExecutable_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"directory"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"needle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINRT
specifier|const
name|QFileInfo
name|cmdFi
init|=
name|QFileInfo
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"COMSPEC"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|cmdPath
init|=
name|cmdFi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|cmdFi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win-cmd"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"cmd.eXe"
argument_list|)
operator|<<
name|cmdPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win-full-path"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|cmdPath
operator|<<
name|cmdPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win-relative-path"
argument_list|)
operator|<<
name|cmdFi
operator|.
name|absolutePath
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"./cmd.exe"
argument_list|)
operator|<<
name|cmdPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win-cmd-nosuffix"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"cmd"
argument_list|)
operator|<<
name|cmdPath
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|WV_WINDOWS8
condition|)
block|{
comment|// The logo executable on Windows 8 is perfectly suited for testing that the
comment|// suffix mechanism is not thrown off by dots in the name.
specifier|const
name|QString
name|logo
init|=
name|QLatin1String
argument_list|(
literal|"microsoft.windows.softwarelogo.showdesktop"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|logoPath
init|=
name|cmdFi
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|logo
operator|+
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win8-logo"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
operator|(
name|logo
operator|+
name|QLatin1String
argument_list|(
literal|".exe"
argument_list|)
operator|)
operator|<<
name|logoPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"win8-logo-nosuffix"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|logo
operator|<<
name|logoPath
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Q_OS_WINRT
else|#
directive|else
specifier|const
name|QFileInfo
name|shFi
init|=
name|findSh
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|shFi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|shPath
init|=
name|shFi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unix-sh"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"sh"
argument_list|)
operator|<<
name|shPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unix-sh-fullpath"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|shPath
operator|<<
name|shPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unix-sh-relativepath"
argument_list|)
operator|<<
name|QString
argument_list|(
name|shFi
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"./sh"
argument_list|)
operator|<<
name|shPath
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idontexist"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"idontexist"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFindExecutable
name|void
name|tst_qstandardpaths
operator|::
name|testFindExecutable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|needle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|changeDirectory
init|=
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|currentDirectory
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|changeDirectory
condition|)
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|directory
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|result
init|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|needle
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeDirectory
condition|)
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|currentDirectory
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
specifier|const
name|Qt
operator|::
name|CaseSensitivity
name|sensitivity
init|=
name|Qt
operator|::
name|CaseInsensitive
decl_stmt|;
else|#
directive|else
specifier|const
name|Qt
operator|::
name|CaseSensitivity
name|sensitivity
init|=
name|Qt
operator|::
name|CaseSensitive
decl_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
operator|!
name|result
operator|.
name|compare
argument_list|(
name|expected
argument_list|,
name|sensitivity
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Actual: '%1', Expected: '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFindExecutableLinkToDirectory
name|void
name|tst_qstandardpaths
operator|::
name|testFindExecutableLinkToDirectory
parameter_list|()
block|{
comment|// link to directory
specifier|const
name|QString
name|target
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"link.lnk"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QFile
name|appFile
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|appFile
operator|.
name|link
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|target
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRuntimeDirectory
name|void
name|tst_qstandardpaths
operator|::
name|testRuntimeDirectory
parameter_list|()
block|{
specifier|const
name|QString
name|runtimeDir
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|RuntimeLocation
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|runtimeDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that it can automatically fix permissions
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|QFile
name|file
argument_list|(
name|runtimeDir
argument_list|)
decl_stmt|;
specifier|const
name|QFile
operator|::
name|Permissions
name|wantedPerms
init|=
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ExeUser
decl_stmt|;
specifier|const
name|QFile
operator|::
name|Permissions
name|additionalPerms
init|=
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOwner
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|permissions
argument_list|()
argument_list|,
name|wantedPerms
operator||
name|additionalPerms
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|wantedPerms
operator||
name|QFile
operator|::
name|ExeGroup
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|runtimeDirAgain
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|RuntimeLocation
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|runtimeDirAgain
argument_list|,
name|runtimeDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFile
argument_list|(
name|runtimeDirAgain
argument_list|)
operator|.
name|permissions
argument_list|()
argument_list|,
name|wantedPerms
operator||
name|additionalPerms
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testCustomRuntimeDirectory
name|void
name|tst_qstandardpaths
operator|::
name|testCustomRuntimeDirectory
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|qputenv
argument_list|(
literal|"XDG_RUNTIME_DIR"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
literal|"/tmp"
argument_list|)
argument_list|)
expr_stmt|;
comment|// It's very unlikely that /tmp is 0600 or that we can chmod it
comment|// The call below outputs
comment|//   "QStandardPaths: wrong ownership on runtime directory /tmp, 0 instead of $UID"
comment|// but we can't reliably expect that it's owned by uid 0, I think.
specifier|const
name|uid_t
name|uid
init|=
name|geteuid
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QStandardPaths: wrong ownership on runtime directory /tmp, 0 instead of %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|uid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|runtimeDir
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|RuntimeLocation
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|runtimeDir
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|runtimeDir
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QStandardPaths::StandardLocation
argument_list|)
end_macro
begin_function
DECL|function|testAllWritableLocations_data
name|void
name|tst_qstandardpaths
operator|::
name|testAllWritableLocations_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStandardPaths
operator|::
name|StandardLocation
argument_list|>
argument_list|(
literal|"location"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DesktopLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|DesktopLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DocumentsLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|DocumentsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FontsLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|FontsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ApplicationsLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|ApplicationsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MusicLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|MusicLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MoviesLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|MoviesLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PicturesLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|PicturesLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TempLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|TempLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HomeLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|HomeLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DataLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|DataLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DownloadLocation"
argument_list|)
operator|<<
name|QStandardPaths
operator|::
name|DownloadLocation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testAllWritableLocations
name|void
name|tst_qstandardpaths
operator|::
name|testAllWritableLocations
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStandardPaths
operator|::
name|StandardLocation
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|QStandardPaths
operator|::
name|displayName
argument_list|(
name|location
argument_list|)
expr_stmt|;
comment|// Currently all desktop locations return their writable location
comment|// with "Unix-style" paths (i.e. they use a slash, not backslash).
name|QString
name|loc
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
comment|// workaround for unlikely case of locations that return '/'
name|QCOMPARE
argument_list|(
name|loc
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|loc
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|loc
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCleanPath
name|void
name|tst_qstandardpaths
operator|::
name|testCleanPath
parameter_list|()
block|{
specifier|const
name|QRegExp
name|filter
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|filter
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|QStandardPaths
operator|::
name|GenericCacheLocation
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QStringList
name|paths
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|StandardLocation
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|paths
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Backslash found in %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|paths
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testXdgPathCleanup
name|void
name|tst_qstandardpaths
operator|::
name|testXdgPathCleanup
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_XDG_PLATFORM
name|setCustomLocations
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|uncleanGlobalAppDir
init|=
literal|"/./"
operator|+
name|QFile
operator|::
name|encodeName
argument_list|(
name|m_globalAppDir
argument_list|)
decl_stmt|;
name|qputenv
argument_list|(
literal|"XDG_DATA_DIRS"
argument_list|,
name|QFile
operator|::
name|encodeName
argument_list|(
name|uncleanGlobalAppDir
argument_list|)
operator|+
literal|"::relative/path"
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|appsDirs
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|ApplicationsLocation
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|appsDirs
operator|.
name|contains
argument_list|(
literal|"/applications"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|appsDirs
operator|.
name|contains
argument_list|(
name|uncleanGlobalAppDir
operator|+
literal|"/applications"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|appsDirs
operator|.
name|contains
argument_list|(
literal|"relative/path/applications"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qstandardpaths
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstandardpaths.moc"
end_include
end_unit
