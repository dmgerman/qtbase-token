begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QTemporaryDir>
end_include
begin_include
include|#
directive|include
file|<QFileSystemWatcher>
end_include
begin_comment
comment|/* All tests need to run in temporary directories not used  * by the application to avoid non-deterministic failures on Windows  * due to locked directories and left-overs from previous tests. */
end_comment
begin_class
DECL|class|tst_QFileSystemWatcher
class|class
name|tst_QFileSystemWatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFileSystemWatcher
parameter_list|()
constructor_decl|;
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
private|private
name|slots
private|:
name|void
name|basicTest_data
parameter_list|()
function_decl|;
name|void
name|basicTest
parameter_list|()
function_decl|;
DECL|function|watchDirectory_data
name|void
name|watchDirectory_data
parameter_list|()
block|{
name|basicTest_data
argument_list|()
expr_stmt|;
block|}
name|void
name|watchDirectory
parameter_list|()
function_decl|;
name|void
name|addPath
parameter_list|()
function_decl|;
name|void
name|removePath
parameter_list|()
function_decl|;
name|void
name|addPaths
parameter_list|()
function_decl|;
name|void
name|removePaths
parameter_list|()
function_decl|;
DECL|function|watchFileAndItsDirectory_data
name|void
name|watchFileAndItsDirectory_data
parameter_list|()
block|{
name|basicTest_data
argument_list|()
expr_stmt|;
block|}
name|void
name|watchFileAndItsDirectory
parameter_list|()
function_decl|;
name|void
name|nonExistingFile
parameter_list|()
function_decl|;
name|void
name|removeFileAndUnWatch
parameter_list|()
function_decl|;
name|void
name|destroyAfterQCoreApplication
parameter_list|()
function_decl|;
name|void
name|QTBUG2331
parameter_list|()
function_decl|;
DECL|function|QTBUG2331_data
name|void
name|QTBUG2331_data
parameter_list|()
block|{
name|basicTest_data
argument_list|()
expr_stmt|;
block|}
name|void
name|signalsEmittedAfterFileMoved
parameter_list|()
function_decl|;
private|private:
DECL|member|m_tempDirPattern
name|QString
name|m_tempDirPattern
decl_stmt|;
endif|#
directive|endif
comment|// QT_NO_FILESYSTEMWATCHER
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QFileSystemWatcher
name|tst_QFileSystemWatcher
operator|::
name|tst_QFileSystemWatcher
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
name|m_tempDirPattern
operator|=
name|QDir
operator|::
name|tempPath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_tempDirPattern
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|m_tempDirPattern
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|m_tempDirPattern
operator|+=
name|QStringLiteral
argument_list|(
literal|"tst_qfilesystemwatcherXXXXXX"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_FILESYSTEMWATCHER
block|}
end_constructor
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FILESYSTEMWATCHER
end_ifndef
begin_function
DECL|function|basicTest_data
name|void
name|tst_QFileSystemWatcher
operator|::
name|basicTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"backend"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testFileName"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|testFile
init|=
name|QStringLiteral
argument_list|(
literal|"testfile.txt"
argument_list|)
decl_stmt|;
comment|// QTBUG-31341: Test the UNICODE capabilities; ensure no QString::toLower()
comment|// is in the code path since that will lower case for example
comment|// LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE with context, whereas the Windows file
comment|// system will not.
specifier|const
name|QString
name|specialCharacterFile
init|=
name|QString
argument_list|(
name|QChar
argument_list|(
name|ushort
argument_list|(
literal|0x130
argument_list|)
argument_list|)
argument_list|)
comment|// LATIN_CAPITAL_LETTER_I_WITH_DOT_ABOVE
operator|+
name|QChar
argument_list|(
name|ushort
argument_list|(
literal|0x00DC
argument_list|)
argument_list|)
comment|// LATIN_CAPITAL_LETTER_U_WITH_DIAERESIS
operator|+
name|QStringLiteral
argument_list|(
literal|".txt"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native backend-testfile"
argument_list|)
operator|<<
literal|"native"
operator|<<
name|testFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"poller backend-testfile"
argument_list|)
operator|<<
literal|"poller"
operator|<<
name|testFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native backend-specialchars"
argument_list|)
operator|<<
literal|"native"
operator|<<
name|specialCharacterFile
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicTest
name|void
name|tst_QFileSystemWatcher
operator|::
name|basicTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testFileName
argument_list|)
expr_stmt|;
comment|// create test file
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|testFile
argument_list|(
name|temporaryDirectory
operator|.
name|path
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|testFileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set some file permissions
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
comment|// create watcher, forcing it to use a specific backend
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|fileChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify the file, should get a signal from the watcher
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. I've heard rumors that FAT32 has a 2 second resolution. So, we have to
comment|// wait a bit before we can modify the file (hrmph)...
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// WinCE is always a little bit slower. Give it a little bit more time
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// waiting max 5 seconds for notification for file modification to trigger
name|QTRY_COMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove the watch and modify the file, should not get a signal from the watcher
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello universe!"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// waiting max 5 seconds for notification for file modification to trigger
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// readd the file watch with a relative path
specifier|const
name|QString
name|relativeTestFileName
init|=
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|relativeFilePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|relativeTestFileName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|relativeTestFileName
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello multiverse!"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|relativeTestFileName
argument_list|)
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// readd the file watch
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// change the permissions, should get a signal from the watcher
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
expr_stmt|;
comment|// IN_ATTRIB doesn't work on QNX, so skip this test
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
comment|// waiting max 5 seconds for notification for file permission modification to trigger
name|QTRY_COMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove the watch and modify file permissions, should not get a signal from the watcher
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOther
argument_list|)
expr_stmt|;
comment|// waiting max 5 seconds for notification for file modification to trigger
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// readd the file watch
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the file, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
comment|// waiting max 5 seconds for notification for file removal to trigger
comment|//> 0&&< 3 because some platforms may emit two changes
comment|// XXX: which platforms? (QTBUG-23370)
name|QTRY_VERIFY
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
operator|&&
name|changedSpy
operator|.
name|count
argument_list|()
operator|<
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// recreate the file, we should not get any notification
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// waiting max 5 seconds for notification for file recreation to trigger
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watchDirectory
name|void
name|tst_QFileSystemWatcher
operator|::
name|watchDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|temporaryDir
argument_list|(
name|temporaryDirectory
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|testDirName
init|=
name|QStringLiteral
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDir
operator|.
name|mkdir
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|testDir
init|=
name|temporaryDir
decl_stmt|;
name|QVERIFY
argument_list|(
name|testDir
operator|.
name|cd
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|testFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|directoryChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. From what I know, FAT32 has a 2 second resolution. So we have to
comment|// wait before modifying the directory...
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QFile
name|testFile
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
name|QString
name|fileName
decl_stmt|;
comment|// remove the watch, should not get notification of a new file
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// waiting max 5 seconds for notification for file recreationg to trigger
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the file again, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// remove the directory, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|temporaryDir
operator|.
name|rmdir
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
comment|// waiting max 5 seconds for notification for directory removal to trigger
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QEXPECT_FAIL
argument_list|(
literal|"poller"
argument_list|,
literal|"Directory does not get updated on file removal(See #137910)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_COMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush pending signals (like the one from the rmdir above)
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// recreate the file, we should not get any notification
if|if
condition|(
operator|!
name|temporaryDir
operator|.
name|mkdir
argument_list|(
name|testDirName
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Failed to recreate directory '%1' under '%2', skipping final test."
argument_list|)
operator|.
name|arg
argument_list|(
name|testDirName
argument_list|,
name|temporaryDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// waiting max 5 seconds for notification for dir recreation to trigger
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDir
operator|.
name|rmdir
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPath
name|void
name|tst_QFileSystemWatcher
operator|::
name|addPath
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QString
name|home
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|home
argument_list|)
expr_stmt|;
comment|// second watch on an already-watched path should fail
name|QVERIFY
argument_list|(
operator|!
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// With empty string
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::addPath: path is empty"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePath
name|void
name|tst_QFileSystemWatcher
operator|::
name|removePath
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QString
name|home
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watcher
operator|.
name|removePath
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// With empty string
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::removePath: path is empty"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|removePath
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPaths
name|void
name|tst_QFileSystemWatcher
operator|::
name|addPaths
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
name|paths
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// With empty list
name|paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::addPaths: list is empty"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePaths
name|void
name|tst_QFileSystemWatcher
operator|::
name|removePaths
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
name|paths
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|removePaths
argument_list|(
name|paths
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//With empty list
name|paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::removePaths: list is empty"
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgFileOperationFailed
specifier|static
name|QByteArray
name|msgFileOperationFailed
parameter_list|(
specifier|const
name|char
modifier|*
name|what
parameter_list|,
specifier|const
name|QFile
modifier|&
name|f
parameter_list|)
block|{
return|return
name|what
operator|+
name|QByteArrayLiteral
argument_list|(
literal|" failed on \""
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|f
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|+
name|QByteArrayLiteral
argument_list|(
literal|"\": "
argument_list|)
operator|+
name|f
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|watchFileAndItsDirectory
name|void
name|tst_QFileSystemWatcher
operator|::
name|watchFileAndItsDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|temporaryDir
argument_list|(
name|temporaryDirectory
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|testDirName
init|=
name|QStringLiteral
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDir
operator|.
name|mkdir
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|testDir
init|=
name|temporaryDir
decl_stmt|;
name|QVERIFY
argument_list|(
name|testDir
operator|.
name|cd
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|testFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile.txt"
argument_list|)
decl_stmt|;
name|QString
name|secondFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile2.txt"
argument_list|)
decl_stmt|;
name|QFile
name|testFile
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"open"
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|write
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"write"
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|fileChangedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|fileChanged
argument_list|)
decl_stmt|;
name|QSignalSpy
name|dirChangedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|directoryChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dirChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. From what I know, FAT32 has a 2 second resolution. So we have to
comment|// wait before modifying the directory...
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"open"
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|write
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"hello again"
argument_list|)
argument_list|)
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"write"
argument_list|,
name|testFile
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// wait again for the file's atime to be updated
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTRY_VERIFY
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//according to Qt 4 documentation:
comment|//void QFileSystemWatcher::directoryChanged ( const QString& path )   [signal]
comment|//This signal is emitted when the directory at a specified path, is modified
comment|//(e.g., when a file is added, -->modified<-- or deleted) or removed from disk.
comment|//Note that if there are several changes during a short period of time, some
comment|//of the changes might not emit this signal. However, the last change in the
comment|//sequence of changes will always generate this signal.
name|QVERIFY
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
operator|<
literal|2
argument_list|)
expr_stmt|;
name|fileChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFile
name|secondFile
argument_list|(
name|secondFileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|secondFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"open"
argument_list|,
name|secondFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|secondFile
operator|.
name|write
argument_list|(
name|QByteArrayLiteral
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|,
name|msgFileOperationFailed
argument_list|(
literal|"write"
argument_list|,
name|secondFile
argument_list|)
argument_list|)
expr_stmt|;
name|secondFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|int
name|fileChangedSpyCount
init|=
name|fileChangedSpy
operator|.
name|count
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN64
if|if
condition|(
name|fileChangedSpyCount
operator|!=
literal|0
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"See QTBUG-30943"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|fileChangedSpyCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QEXPECT_FAIL
argument_list|(
literal|"poller"
argument_list|,
literal|"Directory does not get updated on file removal(See #137910)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// removing a deleted file should fail
name|QVERIFY
argument_list|(
operator|!
name|watcher
operator|.
name|removePath
argument_list|(
name|testFileName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|secondFileName
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDir
operator|.
name|rmdir
argument_list|(
name|testDirName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonExistingFile
name|void
name|tst_QFileSystemWatcher
operator|::
name|nonExistingFile
parameter_list|()
block|{
comment|// Don't crash...
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watcher
operator|.
name|addPath
argument_list|(
literal|"file_that_does_not_exist.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that the paths returned in error aren't messed with
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|addPaths
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"../..//./does-not-exist"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"../..//./does-not-exist"
argument_list|)
expr_stmt|;
comment|// empty path is not actually a failure
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|addPaths
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
comment|// empty path is not actually a failure
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|removePaths
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFileAndUnWatch
name|void
name|tst_QFileSystemWatcher
operator|::
name|removeFileAndUnWatch
parameter_list|()
block|{
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|filename
init|=
name|temporaryDirectory
operator|.
name|path
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/foo.txt"
argument_list|)
decl_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
block|{
name|QFile
name|testFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot open %1 for writing: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|filename
argument_list|,
name|testFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
comment|/* There are potential race conditions here; the watcher thread might remove the file from its list      * before the call to watcher.removePath(), which then fails. When that happens, the auto-signal      * notification to remove the file from the watcher's main list will not be delivered before the next      * event loop such that the call to watcher.addPath() fails since the file is still in the main list. */
if|if
condition|(
operator|!
name|watcher
operator|.
name|removePath
argument_list|(
name|filename
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Skipping remaining test due to race condition."
argument_list|)
expr_stmt|;
block|{
name|QFile
name|testFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Cannot open %1 for writing: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|filename
argument_list|,
name|testFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SomeSingleton
class|class
name|SomeSingleton
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|function|SomeSingleton
name|SomeSingleton
parameter_list|()
member_init_list|:
name|mFsWatcher
argument_list|(
operator|new
name|QFileSystemWatcher
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|mFsWatcher
operator|->
name|addPath
argument_list|(
name|QLatin1String
argument_list|(
literal|"/usr/lib"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|bla
name|void
name|bla
parameter_list|()
specifier|const
block|{}
DECL|member|mFsWatcher
name|QFileSystemWatcher
modifier|*
name|mFsWatcher
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SomeSingleton
argument_list|,
argument|someSingleton
argument_list|)
end_macro
begin_comment
comment|// This is a regression test for QTBUG-15255, where a deadlock occurred if a
end_comment
begin_comment
comment|// QFileSystemWatcher was destroyed after the QCoreApplication instance had
end_comment
begin_comment
comment|// been destroyed.  There are no explicit verification steps in this test --
end_comment
begin_comment
comment|// it is sufficient that the test terminates.
end_comment
begin_function
DECL|function|destroyAfterQCoreApplication
name|void
name|tst_QFileSystemWatcher
operator|::
name|destroyAfterQCoreApplication
parameter_list|()
block|{
name|someSingleton
argument_list|()
operator|->
name|bla
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// regression test for QTBUG2331.
end_comment
begin_comment
comment|// essentially, on windows, directories were not unwatched after being deleted
end_comment
begin_comment
comment|// from the disk, causing all sorts of interesting problems.
end_comment
begin_function
DECL|function|QTBUG2331
name|void
name|tst_QFileSystemWatcher
operator|::
name|QTBUG2331
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|temporaryDirectory
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// watch signal
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|directoryChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove directory, we should get one change signal, and we should no longer
comment|// be watching the directory.
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalReceiver
class|class
name|SignalReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalReceiver
name|SignalReceiver
parameter_list|(
specifier|const
name|QDir
modifier|&
name|moveSrcDir
parameter_list|,
specifier|const
name|QString
modifier|&
name|moveDestination
parameter_list|,
name|QFileSystemWatcher
modifier|*
name|watcher
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|added
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|moveSrcDir
argument_list|(
name|moveSrcDir
argument_list|)
member_init_list|,
name|moveDestination
argument_list|(
name|QDir
argument_list|(
name|moveDestination
argument_list|)
argument_list|)
member_init_list|,
name|watcher
argument_list|(
name|watcher
argument_list|)
block|{}
public|public
name|slots
public|:
DECL|function|fileChanged
name|void
name|fileChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QFileInfo
name|finfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|finfo
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|moveSrcDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|added
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fi
decl|,
name|moveDestination
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
control|)
name|watcher
operator|->
name|addPath
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
block|}
block|}
private|private:
DECL|member|added
name|bool
name|added
decl_stmt|;
DECL|member|moveSrcDir
name|QDir
name|moveSrcDir
decl_stmt|;
DECL|member|moveDestination
name|QDir
name|moveDestination
decl_stmt|;
DECL|member|watcher
name|QFileSystemWatcher
modifier|*
name|watcher
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// regression test for QTBUG-33211.
end_comment
begin_comment
comment|// using inotify backend if a file is moved and then added to the watcher
end_comment
begin_comment
comment|// before all the fileChanged signals are emitted the remaining signals are
end_comment
begin_comment
comment|// emitted with the destination path instead of the starting path
end_comment
begin_function
DECL|function|signalsEmittedAfterFileMoved
name|void
name|tst_QFileSystemWatcher
operator|::
name|signalsEmittedAfterFileMoved
parameter_list|()
block|{
name|QTemporaryDir
name|temporaryDirectory
argument_list|(
name|m_tempDirPattern
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|temporaryDirectory
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|testDir
argument_list|(
name|temporaryDirectory
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testDir
operator|.
name|mkdir
argument_list|(
literal|"movehere"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|movePath
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"movehere"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|QFile
name|f
argument_list|(
name|testDir
operator|.
name|filePath
argument_list|(
name|QString
argument_list|(
literal|"test%1.txt"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"i am "
argument_list|)
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|movePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// add files to watcher
name|QFileInfoList
name|files
init|=
name|testDir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|finfo
decl|,
name|files
control|)
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|addPath
argument_list|(
name|finfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// create the signal receiver
name|SignalReceiver
name|signalReceiver
argument_list|(
name|testDir
argument_list|,
name|movePath
argument_list|,
operator|&
name|watcher
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|fileChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|signalReceiver
argument_list|,
name|SLOT
argument_list|(
name|fileChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// watch signals
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
operator|&
name|QFileSystemWatcher
operator|::
name|fileChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// move files to second directory
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|finfo
decl|,
name|files
control|)
name|QVERIFY
argument_list|(
name|testDir
operator|.
name|rename
argument_list|(
name|finfo
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"movehere/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|finfo
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_FILESYSTEMWATCHER
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFileSystemWatcher
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfilesystemwatcher.moc"
end_include
end_unit
