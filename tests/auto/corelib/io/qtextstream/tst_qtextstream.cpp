begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<locale.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QTextCodec>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_decl_stmt
DECL|variable|TestFileName
specifier|static
specifier|const
name|char
modifier|*
name|TestFileName
init|=
literal|"testfile"
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qlonglong
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qulonglong
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<int>
argument_list|)
end_macro
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_struct
DECL|struct|QMetaTypeId
template|template
parameter_list|<>
struct|struct
name|QMetaTypeId
argument_list|<
name|QIODevice
operator|::
name|OpenModeFlag
argument_list|>
DECL|enumerator|Defined
DECL|function|qt_metatype_id
block|{
enum|enum
block|{
name|Defined
init|=
literal|1
block|}
enum|;
specifier|static
specifier|inline
name|int
name|qt_metatype_id
parameter_list|()
block|{
return|return
name|QMetaType
operator|::
name|Int
return|;
block|}
block|}
struct|;
end_struct
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QTextStream
class|class
name|tst_QTextStream
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|construction
parameter_list|()
function_decl|;
comment|// lines
name|void
name|readLineFromDevice_data
parameter_list|()
function_decl|;
name|void
name|readLineFromDevice
parameter_list|()
function_decl|;
name|void
name|readLineFromString_data
parameter_list|()
function_decl|;
name|void
name|readLineFromString
parameter_list|()
function_decl|;
name|void
name|readLineFromTextDevice_data
parameter_list|()
function_decl|;
name|void
name|readLineFromTextDevice
parameter_list|()
function_decl|;
name|void
name|readLineUntilNull
parameter_list|()
function_decl|;
name|void
name|readLineMaxlen_data
parameter_list|()
function_decl|;
name|void
name|readLineMaxlen
parameter_list|()
function_decl|;
name|void
name|readLinesFromBufferCRCR
parameter_list|()
function_decl|;
comment|// all
name|void
name|readAllFromDevice_data
parameter_list|()
function_decl|;
name|void
name|readAllFromDevice
parameter_list|()
function_decl|;
name|void
name|readAllFromString_data
parameter_list|()
function_decl|;
name|void
name|readAllFromString
parameter_list|()
function_decl|;
name|void
name|readLineFromStringThenChangeString
parameter_list|()
function_decl|;
comment|// device tests
name|void
name|setDevice
parameter_list|()
function_decl|;
comment|// char operators
name|void
name|QChar_operators_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|QChar_operators_FromDevice
parameter_list|()
function_decl|;
name|void
name|char_operators_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|char_operators_FromDevice
parameter_list|()
function_decl|;
comment|// natural number read operator
name|void
name|signedShort_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|signedShort_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|unsignedShort_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|unsignedShort_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|signedInt_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|signedInt_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|unsignedInt_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|unsignedInt_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|qlonglong_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|qlonglong_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|qulonglong_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|qulonglong_read_operator_FromDevice
parameter_list|()
function_decl|;
comment|// natural number write operator
name|void
name|signedShort_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|signedShort_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|unsignedShort_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|unsignedShort_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|signedInt_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|signedInt_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|unsignedInt_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|unsignedInt_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|qlonglong_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|qlonglong_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|qulonglong_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|qulonglong_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|int_read_with_locale_data
parameter_list|()
function_decl|;
name|void
name|int_read_with_locale
parameter_list|()
function_decl|;
name|void
name|int_write_with_locale_data
parameter_list|()
function_decl|;
name|void
name|int_write_with_locale
parameter_list|()
function_decl|;
comment|// real number read operator
name|void
name|float_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|float_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|double_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|double_read_operator_FromDevice
parameter_list|()
function_decl|;
comment|// real number write operator
name|void
name|float_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|float_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|double_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|double_write_operator_ToDevice
parameter_list|()
function_decl|;
name|void
name|double_write_with_flags_data
parameter_list|()
function_decl|;
name|void
name|double_write_with_flags
parameter_list|()
function_decl|;
name|void
name|double_write_with_precision_data
parameter_list|()
function_decl|;
name|void
name|double_write_with_precision
parameter_list|()
function_decl|;
comment|// text read operators
name|void
name|charPtr_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|charPtr_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|stringRef_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|stringRef_read_operator_FromDevice
parameter_list|()
function_decl|;
name|void
name|byteArray_read_operator_FromDevice_data
parameter_list|()
function_decl|;
name|void
name|byteArray_read_operator_FromDevice
parameter_list|()
function_decl|;
comment|// text write operators
name|void
name|string_write_operator_ToDevice_data
parameter_list|()
function_decl|;
name|void
name|string_write_operator_ToDevice
parameter_list|()
function_decl|;
comment|// other
name|void
name|skipWhiteSpace_data
parameter_list|()
function_decl|;
name|void
name|skipWhiteSpace
parameter_list|()
function_decl|;
name|void
name|lineCount_data
parameter_list|()
function_decl|;
name|void
name|lineCount
parameter_list|()
function_decl|;
name|void
name|performance
parameter_list|()
function_decl|;
name|void
name|hexTest_data
parameter_list|()
function_decl|;
name|void
name|hexTest
parameter_list|()
function_decl|;
name|void
name|binTest_data
parameter_list|()
function_decl|;
name|void
name|binTest
parameter_list|()
function_decl|;
name|void
name|octTest_data
parameter_list|()
function_decl|;
name|void
name|octTest
parameter_list|()
function_decl|;
name|void
name|zeroTermination
parameter_list|()
function_decl|;
name|void
name|ws_manipulator
parameter_list|()
function_decl|;
name|void
name|stillOpenWhenAtEnd
parameter_list|()
function_decl|;
name|void
name|readNewlines_data
parameter_list|()
function_decl|;
name|void
name|readNewlines
parameter_list|()
function_decl|;
name|void
name|seek
parameter_list|()
function_decl|;
name|void
name|pos
parameter_list|()
function_decl|;
name|void
name|pos2
parameter_list|()
function_decl|;
name|void
name|pos3LargeFile
parameter_list|()
function_decl|;
name|void
name|readStdin
parameter_list|()
function_decl|;
name|void
name|readAllFromStdin
parameter_list|()
function_decl|;
name|void
name|readLineFromStdin
parameter_list|()
function_decl|;
name|void
name|read
parameter_list|()
function_decl|;
name|void
name|qbool
parameter_list|()
function_decl|;
name|void
name|forcePoint
parameter_list|()
function_decl|;
name|void
name|forceSign
parameter_list|()
function_decl|;
name|void
name|read0d0d0a
parameter_list|()
function_decl|;
name|void
name|numeralCase_data
parameter_list|()
function_decl|;
name|void
name|numeralCase
parameter_list|()
function_decl|;
name|void
name|nanInf
parameter_list|()
function_decl|;
name|void
name|utf8IncompleteAtBufferBoundary_data
parameter_list|()
function_decl|;
name|void
name|utf8IncompleteAtBufferBoundary
parameter_list|()
function_decl|;
name|void
name|writeSeekWriteNoBOM
parameter_list|()
function_decl|;
comment|// status
name|void
name|status_real_read_data
parameter_list|()
function_decl|;
name|void
name|status_real_read
parameter_list|()
function_decl|;
name|void
name|status_integer_read
parameter_list|()
function_decl|;
name|void
name|status_word_read
parameter_list|()
function_decl|;
name|void
name|status_write_error
parameter_list|()
function_decl|;
comment|// use case tests
name|void
name|useCase1
parameter_list|()
function_decl|;
name|void
name|useCase2
parameter_list|()
function_decl|;
comment|// manipulators
name|void
name|manipulators_data
parameter_list|()
function_decl|;
name|void
name|manipulators
parameter_list|()
function_decl|;
comment|// UTF-16 BOM (Byte Order Mark)
name|void
name|generateBOM
parameter_list|()
function_decl|;
name|void
name|readBomSeekBackReadBomAgain
parameter_list|()
function_decl|;
comment|// task-specific tests
name|void
name|task180679_alignAccountingStyle
parameter_list|()
function_decl|;
name|void
name|task178772_setCodec
parameter_list|()
function_decl|;
private|private:
name|void
name|generateLineData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateAllData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateOperatorCharData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateNaturalNumbersData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateRealNumbersData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateStringData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
function_decl|;
name|void
name|generateRealNumbersDataWrite
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QTextStream
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTextStream
operator|::
name|getSetCheck
parameter_list|()
block|{
comment|// Initialize codecs
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QTextStream
name|obj1
decl_stmt|;
comment|// QTextCodec * QTextStream::codec()
comment|// void QTextStream::setCodec(QTextCodec *)
name|QTextCodec
modifier|*
name|var1
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"en"
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setCodec
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|codec
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCodec
argument_list|(
operator|(
name|QTextCodec
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QTextCodec
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|codec
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextStream::autoDetectUnicode()
comment|// void QTextStream::setAutoDetectUnicode(bool)
name|obj1
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|autoDetectUnicode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|autoDetectUnicode
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QTextStream::generateByteOrderMark()
comment|// void QTextStream::setGenerateByteOrderMark(bool)
name|obj1
operator|.
name|setGenerateByteOrderMark
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|generateByteOrderMark
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGenerateByteOrderMark
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|generateByteOrderMark
argument_list|()
argument_list|)
expr_stmt|;
comment|// QIODevice * QTextStream::device()
comment|// void QTextStream::setDevice(QIODevice *)
name|QFile
modifier|*
name|var4
init|=
operator|new
name|QFile
decl_stmt|;
name|obj1
operator|.
name|setDevice
argument_list|(
name|var4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QIODevice
operator|*
argument_list|>
argument_list|(
name|var4
argument_list|)
argument_list|,
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDevice
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var4
expr_stmt|;
comment|// Status QTextStream::status()
comment|// void QTextStream::setStatus(Status)
name|obj1
operator|.
name|setStatus
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|Ok
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|Ok
argument_list|)
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStatus
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|ReadPastEnd
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|ReadPastEnd
argument_list|)
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|obj1
operator|.
name|setStatus
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|ReadCorruptData
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|Status
argument_list|(
name|QTextStream
operator|::
name|ReadCorruptData
argument_list|)
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
comment|// FieldAlignment QTextStream::fieldAlignment()
comment|// void QTextStream::setFieldAlignment(FieldAlignment)
name|obj1
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignLeft
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignLeft
argument_list|)
argument_list|,
name|obj1
operator|.
name|fieldAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignRight
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignRight
argument_list|)
argument_list|,
name|obj1
operator|.
name|fieldAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignCenter
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignCenter
argument_list|)
argument_list|,
name|obj1
operator|.
name|fieldAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|FieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
argument_list|,
name|obj1
operator|.
name|fieldAlignment
argument_list|()
argument_list|)
expr_stmt|;
comment|// QChar QTextStream::padChar()
comment|// void QTextStream::setPadChar(QChar)
name|QChar
name|var7
init|=
literal|'Q'
decl_stmt|;
name|obj1
operator|.
name|setPadChar
argument_list|(
name|var7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var7
argument_list|,
name|obj1
operator|.
name|padChar
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPadChar
argument_list|(
name|QChar
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QChar
argument_list|()
argument_list|,
name|obj1
operator|.
name|padChar
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextStream::fieldWidth()
comment|// void QTextStream::setFieldWidth(int)
name|obj1
operator|.
name|setFieldWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|fieldWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFieldWidth
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|fieldWidth
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFieldWidth
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|fieldWidth
argument_list|()
argument_list|)
expr_stmt|;
comment|// NumberFlags QTextStream::numberFlags()
comment|// void QTextStream::setNumberFlags(NumberFlags)
name|obj1
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ShowBase
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ShowBase
argument_list|)
argument_list|,
name|obj1
operator|.
name|numberFlags
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ForcePoint
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ForcePoint
argument_list|)
argument_list|,
name|obj1
operator|.
name|numberFlags
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ForceSign
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|ForceSign
argument_list|)
argument_list|,
name|obj1
operator|.
name|numberFlags
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|UppercaseBase
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|UppercaseBase
argument_list|)
argument_list|,
name|obj1
operator|.
name|numberFlags
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|UppercaseDigits
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|QTextStream
operator|::
name|UppercaseDigits
argument_list|)
argument_list|,
name|obj1
operator|.
name|numberFlags
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextStream::integerBase()
comment|// void QTextStream::setIntegerBase(int)
name|obj1
operator|.
name|setIntegerBase
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|integerBase
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setIntegerBase
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|integerBase
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setIntegerBase
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|integerBase
argument_list|()
argument_list|)
expr_stmt|;
comment|// RealNumberNotation QTextStream::realNumberNotation()
comment|// void QTextStream::setRealNumberNotation(RealNumberNotation)
name|obj1
operator|.
name|setRealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|SmartNotation
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|SmartNotation
argument_list|)
argument_list|,
name|obj1
operator|.
name|realNumberNotation
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|FixedNotation
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|FixedNotation
argument_list|)
argument_list|,
name|obj1
operator|.
name|realNumberNotation
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|ScientificNotation
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|ScientificNotation
argument_list|)
argument_list|,
name|obj1
operator|.
name|realNumberNotation
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QTextStream::realNumberPrecision()
comment|// void QTextStream::setRealNumberPrecision(int)
name|obj1
operator|.
name|setRealNumberPrecision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|realNumberPrecision
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRealNumberPrecision
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|6
argument_list|,
name|obj1
operator|.
name|realNumberPrecision
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting a negative precision reverts it to the default value (6).
name|obj1
operator|.
name|setRealNumberPrecision
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|realNumberPrecision
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTextStream
operator|::
name|cleanup
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|construction
name|void
name|tst_QTextStream
operator|::
name|construction
parameter_list|()
block|{
name|QTextStream
name|stream
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|codec
argument_list|()
argument_list|,
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|device
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QIODevice
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|string
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QString
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTextStream: No device"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTextStream: No device"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateLineData
name|void
name|tst_QTextStream
operator|::
name|generateLineData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"lines"
argument_list|)
expr_stmt|;
comment|// latin-1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyer"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneline/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneline/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneline/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines/lf/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\ndole\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines/crlf/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r\ndole\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines/lf/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\ndole\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines/lf/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\ndole"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines/crlf/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r\ndole"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"threelines/lf/lf/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\ndole\ndoffen\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|<<
literal|"doffen"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"threelines/crlf/crlf/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r\ndole\r\ndoffen\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|<<
literal|"doffen"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"threelines/crlf/crlf/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r\ndole\r\ndoffen"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|<<
literal|"dole"
operator|<<
literal|"doffen"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
comment|// utf-8
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xef\xbb\xbf"
literal|"\x66\x67\x65\x0a"
literal|"\x66\x67\x65\x0a"
argument_list|,
literal|11
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"fge"
operator|<<
literal|"fge"
operator|)
expr_stmt|;
comment|// utf-16
comment|// one line
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|10
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|10
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
comment|// two lines
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|18
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|18
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
comment|// three lines
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/threelines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|26
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/threelines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|26
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
comment|// utf-32
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-BE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\xfe\xff"
literal|"\x00\x00\x00\xe5\x00\x00\x00\x67\x00\x00\x00\x65\x00\x00\x00\x0a"
literal|"\x00\x00\x00\xe5\x00\x00\x00\x67\x00\x00\x00\x65\x00\x00\x00\x0a"
argument_list|,
literal|36
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf32-LE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\x00\x00"
literal|"\xe5\x00\x00\x00\x67\x00\x00\x00\x65\x00\x00\x00\x0a\x00\x00\x00"
literal|"\xe5\x00\x00\x00\x67\x00\x00\x00\x65\x00\x00\x00\x0a\x00\x00\x00"
argument_list|,
literal|36
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
block|}
comment|// partials
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cr"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneline/cr"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole\r"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"ole"
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|for_QString
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/cr"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00\xe5\x00\x67\x00\x65\x00\x0d"
argument_list|,
literal|10
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"\345ge"
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromDevice_data
name|void
name|tst_QTextStream
operator|::
name|readLineFromDevice_data
parameter_list|()
block|{
name|generateLineData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromDevice
name|void
name|tst_QTextStream
operator|::
name|readLineFromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|TestFileName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|TestFileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
name|list
operator|<<
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineMaxlen_data
name|void
name|tst_QTextStream
operator|::
name|readLineMaxlen_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"lines"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hey"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hey\\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Hey\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Hey"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HelloWorld"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"HelloWorld"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"World"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Helo\\nWorlds"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Helo\nWorlds"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Helo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"World"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AAAAA etc."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|16385
argument_list|,
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"AAAAA"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"AAAAA"
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multibyte string"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\341\233\222\341\233\226\341\232\251\341\232\271\341\232\242\341\233\232\341\232\240\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\341\233\222\341\233\226\341\232\251\341\232\271\341\232\242"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\341\233\232\341\232\240"
argument_list|)
operator|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineMaxlen
name|void
name|tst_QTextStream
operator|::
name|readLineMaxlen
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|lines
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|useDevice
init|=
operator|(
name|i
operator|==
literal|1
operator|)
decl_stmt|;
name|QTextStream
name|stream
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDevice
condition|)
block|{
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|input
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setDevice
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"utf-8"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|.
name|setString
argument_list|(
operator|&
name|input
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
name|stream
operator|.
name|readLine
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|list
operator|<<
name|stream
operator|.
name|readLine
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLinesFromBufferCRCR
name|void
name|tst_QTextStream
operator|::
name|readLinesFromBufferCRCR
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|data
argument_list|(
literal|"0123456789\r\r\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
operator|++
name|i
control|)
name|buffer
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readLine
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0123456789"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromString_data
name|void
name|tst_QTextStream
operator|::
name|readLineFromString_data
parameter_list|()
block|{
name|generateLineData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromString
name|void
name|tst_QTextStream
operator|::
name|readLineFromString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|lines
argument_list|)
expr_stmt|;
name|QString
name|dataString
init|=
name|data
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|dataString
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
name|list
operator|<<
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromStringThenChangeString
name|void
name|tst_QTextStream
operator|::
name|readLineFromStringThenChangeString
parameter_list|()
block|{
name|QString
name|first
init|=
literal|"First string"
decl_stmt|;
name|QString
name|second
init|=
literal|"Second string"
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|first
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QString
name|result
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|first
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setString
argument_list|(
operator|&
name|second
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|result
operator|=
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|second
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setDevice
name|void
name|tst_QTextStream
operator|::
name|setDevice
parameter_list|()
block|{
comment|// Check that the read buffer is reset after setting a new device
name|QByteArray
name|data1
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|QByteArray
name|data2
argument_list|(
literal|"How are you"
argument_list|)
decl_stmt|;
name|QBuffer
name|bufferOld
argument_list|(
operator|&
name|data1
argument_list|)
decl_stmt|;
name|bufferOld
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QBuffer
name|bufferNew
argument_list|(
operator|&
name|data2
argument_list|)
decl_stmt|;
name|bufferNew
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QString
name|text
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|bufferOld
argument_list|)
decl_stmt|;
name|stream
operator|>>
name|text
expr_stmt|;
name|QCOMPARE
argument_list|(
name|text
argument_list|,
name|QString
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setDevice
argument_list|(
operator|&
name|bufferNew
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|text
expr_stmt|;
name|QCOMPARE
argument_list|(
name|text
argument_list|,
name|QString
argument_list|(
literal|"How"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromTextDevice_data
name|void
name|tst_QTextStream
operator|::
name|readLineFromTextDevice_data
parameter_list|()
block|{
name|generateLineData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromTextDevice
name|void
name|tst_QTextStream
operator|::
name|readLineFromTextDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|lines
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
block|{
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|4
condition|)
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|stream
operator|.
name|pos
argument_list|()
expr_stmt|;
comment|//<- triggers side effects
name|QString
name|line
decl_stmt|;
if|if
condition|(
name|i
operator|&
literal|1
condition|)
block|{
name|QChar
name|c
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|stream
operator|>>
name|c
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|status
argument_list|()
operator|==
name|QTextStream
operator|::
name|Ok
condition|)
block|{
if|if
condition|(
name|c
operator|!=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
operator|&&
name|c
operator|!=
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
condition|)
name|line
operator|+=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|==
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
condition|)
break|break;
block|}
block|}
block|}
else|else
block|{
name|line
operator|=
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|&
literal|3
operator|)
operator|==
literal|3
operator|&&
operator|!
name|QString
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
literal|"utf16"
argument_list|)
condition|)
name|stream
operator|.
name|seek
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|<<
name|line
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateAllData
name|void
name|tst_QTextStream
operator|::
name|generateAllData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
comment|// latin-1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1-a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1-a\\r"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\r"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a\r"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1-a\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\r\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a\r\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1-a\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a\n"
argument_list|)
expr_stmt|;
comment|// utf-16
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
comment|// one line
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/nothing"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0d\x00\x0a"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\r\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0d\x00\x0a\x00"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\r\n"
argument_list|)
expr_stmt|;
comment|// two lines
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|18
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n\345ge\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|18
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n\345ge\n"
argument_list|)
expr_stmt|;
comment|// three lines
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE/threelines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
literal|"\x00\xe5\x00\x67\x00\x65\x00\x0a"
argument_list|,
literal|26
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n\345ge\n\345ge\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE/threelines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
literal|"\xe5\x00\x67\x00\x65\x00\x0a\x00"
argument_list|,
literal|26
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\345ge\n\345ge\n\345ge\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineUntilNull
name|void
name|tst_QTextStream
operator|::
name|readLineUntilNull
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15066
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|line
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|line
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|stream
operator|.
name|readLine
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|readLine
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllFromDevice_data
name|void
name|tst_QTextStream
operator|::
name|readAllFromDevice_data
parameter_list|()
block|{
name|generateAllData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllFromDevice
name|void
name|tst_QTextStream
operator|::
name|readAllFromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllFromString_data
name|void
name|tst_QTextStream
operator|::
name|readAllFromString_data
parameter_list|()
block|{
name|generateAllData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllFromString
name|void
name|tst_QTextStream
operator|::
name|readAllFromString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|input
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|skipWhiteSpace_data
name|void
name|tst_QTextStream
operator|::
name|skipWhiteSpace_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
comment|// latin1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" one"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" one"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\none"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\none"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n one"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n one"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" \\r\\n one"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" \r\n one"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
comment|// utf-16
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE ( one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00 \x00o\x00n\x00e"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (\\none)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00\n\x00o\x00n\x00e"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (\\n one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00\n\x00 \x00o\x00n\x00e"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE ( \\r\\n one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00 \x00\r\x00\n\x00 \x00o\x00n\x00e"
argument_list|,
literal|20
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE ( one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe \x00o\x00n\x00e\x00"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (\\none)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\n\x00o\x00n\x00e\x00"
argument_list|,
literal|10
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (\\n one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\n\x00 \x00o\x00n\x00e\x00"
argument_list|,
literal|12
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE ( \\r\\n one)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe \x00\r\x00\n\x00 \x00o\x00n\x00e\x00"
argument_list|,
literal|20
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|skipWhiteSpace
name|void
name|tst_QTextStream
operator|::
name|skipWhiteSpace
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|QChar
name|tmp
decl_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|input
decl_stmt|;
name|QTextStream
name|stream2
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|stream2
operator|.
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|stream2
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|lineCount_data
name|void
name|tst_QTextStream
operator|::
name|lineCount_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"lineCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneline"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\n"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\nb\n"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oneemptyline"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twoemptylines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n\n"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buffersize-1 line"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|16382
argument_list|,
literal|'\n'
argument_list|)
operator|<<
literal|16382
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buffersize line"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|16383
argument_list|,
literal|'\n'
argument_list|)
operator|<<
literal|16383
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buffersize+1 line"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|16384
argument_list|,
literal|'\n'
argument_list|)
operator|<<
literal|16384
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buffersize+2 line"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|16385
argument_list|,
literal|'\n'
argument_list|)
operator|<<
literal|16385
expr_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc3261"
argument_list|)
operator|<<
name|file
operator|.
name|readAll
argument_list|()
operator|<<
literal|15067
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|lineCount
name|void
name|tst_QTextStream
operator|::
name|lineCount
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
name|QFile
name|out
argument_list|(
literal|"out.txt"
argument_list|)
decl_stmt|;
name|out
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|lineReader
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|lines
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|lineReader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|lineReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|line
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
operator|++
name|lines
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lines
argument_list|,
name|lineCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|performance
name|void
name|tst_QTextStream
operator|::
name|performance
parameter_list|()
block|{
comment|// Phase #1 - test speed of reading a huge text file with QFile.
name|QTime
name|stopWatch
decl_stmt|;
name|int
name|elapsed1
init|=
literal|0
decl_stmt|;
name|int
name|elapsed2
init|=
literal|0
decl_stmt|;
name|stopWatch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|int
name|nlines1
init|=
literal|0
decl_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
operator|++
name|nlines1
expr_stmt|;
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|elapsed1
operator|+=
name|stopWatch
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|int
name|nlines2
init|=
literal|0
decl_stmt|;
name|QFile
name|file2
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file2
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
operator|++
name|nlines2
expr_stmt|;
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|elapsed2
operator|+=
name|stopWatch
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nlines1
argument_list|,
name|nlines2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"QFile used %.2f seconds to read the file"
argument_list|,
name|elapsed1
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"QTextStream used %.2f seconds to read the file"
argument_list|,
name|elapsed2
operator|/
literal|1000.0
argument_list|)
expr_stmt|;
if|if
condition|(
name|elapsed2
operator|>
name|elapsed1
condition|)
block|{
name|qDebug
argument_list|(
literal|"QFile is %.2fx faster than QTextStream"
argument_list|,
name|double
argument_list|(
name|elapsed2
argument_list|)
operator|/
name|double
argument_list|(
name|elapsed1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"QTextStream is %.2fx faster than QFile"
argument_list|,
name|double
argument_list|(
name|elapsed1
argument_list|)
operator|/
name|double
argument_list|(
name|elapsed2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|hexTest_data
name|void
name|tst_QTextStream
operator|::
name|hexTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|6
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x6"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x7"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|9
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x9"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xa
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xa"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"b"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xb
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xb"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xc
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"d"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xd
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xd"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"e"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xe
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xe"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"f"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-0x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xffffffff"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xffffffff
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xffffffff"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xfffffffffffffffe"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xfffffffffffffffe
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-0x2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xffffffffffffffff"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0xffffffffffffffff
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-0x1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x7fffffffffffffff"
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
literal|0x7fffffffffffffff
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x7fffffffffffffff"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|hexTest
name|void
name|tst_QTextStream
operator|::
name|hexTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|qlonglong
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|array
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|showbase
operator|<<
name|hex
operator|<<
name|number
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|binTest_data
name|void
name|tst_QTextStream
operator|::
name|binTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"0b0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
operator|<<
name|QByteArray
argument_list|(
literal|"0b1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"0b10"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
operator|<<
name|QByteArray
argument_list|(
literal|"0b101"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
name|QByteArray
argument_list|(
literal|"-0b1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11111111"
argument_list|)
operator|<<
literal|0xff
operator|<<
name|QByteArray
argument_list|(
literal|"0b11111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1111111111111111"
argument_list|)
operator|<<
literal|0xffff
operator|<<
name|QByteArray
argument_list|(
literal|"0b1111111111111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1111111011111110"
argument_list|)
operator|<<
literal|0xfefe
operator|<<
name|QByteArray
argument_list|(
literal|"0b1111111011111110"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|binTest
name|void
name|tst_QTextStream
operator|::
name|binTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|array
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|showbase
operator|<<
name|bin
operator|<<
name|number
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|octTest_data
name|void
name|tst_QTextStream
operator|::
name|octTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|octTest
name|void
name|tst_QTextStream
operator|::
name|octTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|array
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|showbase
operator|<<
name|oct
operator|<<
name|number
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|zeroTermination
name|void
name|tst_QTextStream
operator|::
name|zeroTermination
parameter_list|()
block|{
name|QTextStream
name|stream
decl_stmt|;
name|char
name|c
init|=
literal|'@'
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTextStream: No device"
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|c
operator|=
literal|'@'
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTextStream: No device"
argument_list|)
expr_stmt|;
name|stream
operator|>>
operator|&
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|ws_manipulator
name|void
name|tst_QTextStream
operator|::
name|ws_manipulator
parameter_list|()
block|{
block|{
name|QString
name|string
init|=
literal|"a b c d"
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|string
argument_list|)
decl_stmt|;
name|char
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|stream
operator|>>
name|a
operator|>>
name|b
operator|>>
name|c
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|string
init|=
literal|"a b c d"
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|string
argument_list|)
decl_stmt|;
name|char
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|;
name|stream
operator|>>
name|a
operator|>>
name|ws
operator|>>
name|b
operator|>>
name|ws
operator|>>
name|c
operator|>>
name|ws
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|'d'
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|stillOpenWhenAtEnd
name|void
name|tst_QTextStream
operator|::
name|stillOpenWhenAtEnd
parameter_list|()
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"tst_qtextstream.cpp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|readLine
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{}
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Qt/CE: Cannot test network on emulator"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream2
argument_list|(
operator|&
name|socket
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream2
operator|.
name|readLine
argument_list|()
operator|.
name|isNull
argument_list|()
condition|)
block|{}
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readNewlines_data
name|void
name|tst_QTextStream
operator|::
name|readNewlines_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\r\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r\\n\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\n\r\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n\n"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readNewlines
name|void
name|tst_QTextStream
operator|::
name|readNewlines
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
operator||
name|QBuffer
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|seek
name|void
name|tst_QTextStream
operator|::
name|seek
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|tmp
decl_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Network"
argument_list|)
argument_list|)
expr_stmt|;
comment|// QTextStream::seek(0) should both clear its internal read/write buffers
comment|// and seek the device.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|stream
operator|.
name|seek
argument_list|(
literal|12
operator|+
name|i
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"Network"
argument_list|)
operator|.
name|mid
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|stream
operator|.
name|seek
argument_list|(
literal|16
operator|-
name|i
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"Network"
argument_list|)
operator|.
name|mid
argument_list|(
literal|4
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|seek
argument_list|(
literal|139181
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"information"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|388683
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"telephone"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also test this with a string
name|QString
name|words
init|=
name|QLatin1String
argument_list|(
literal|"thisisa"
argument_list|)
decl_stmt|;
name|QTextStream
name|stream2
argument_list|(
operator|&
name|words
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|stream2
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"thisisa"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|stream2
operator|.
name|seek
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|stream2
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"thisisa"
argument_list|)
operator|.
name|mid
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|stream2
operator|.
name|seek
argument_list|(
literal|4
operator|-
name|i
argument_list|)
expr_stmt|;
name|stream2
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
argument_list|(
literal|"thisisa"
argument_list|)
operator|.
name|mid
argument_list|(
literal|4
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|pos
name|void
name|tst_QTextStream
operator|::
name|pos
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
decl_stmt|;
block|{
comment|// Strings
name|QString
name|str
argument_list|(
literal|"this is a test"
argument_list|)
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|str
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|str
operator|.
name|size
argument_list|()
init|;
name|j
operator|>=
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QChar
name|ch
decl_stmt|;
name|stream
operator|>>
name|ch
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ch
argument_list|,
name|QChar
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|strtmp
decl_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"this"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|ch
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ch
argument_list|,
name|QChar
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Latin1 device
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3261.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|file
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|7
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|file
operator|.
name|size
argument_list|()
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|-=
literal|7
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QString
name|strtmp
decl_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"Network"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|2598
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2598
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2607
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"locations"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Shift-JIS device
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"shift-jis.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"Shift-JIS"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|codec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|file
operator|.
name|size
argument_list|()
condition|;
name|i
operator|+=
literal|7
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|file
operator|.
name|size
argument_list|()
init|;
name|j
operator|>=
literal|0
condition|;
name|j
operator|-=
literal|7
control|)
block|{
name|QVERIFY
argument_list|(
name|stream
operator|.
name|seek
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|seek
argument_list|(
literal|2089
argument_list|)
expr_stmt|;
name|QString
name|strtmp
decl_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"AUnicode"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2097
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|43325
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"Shift-JIS"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\343\201\247\346\233\270\343\201\213\343\202\214\343\201\237"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|43345
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|strtmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|strtmp
argument_list|,
name|QString
argument_list|(
literal|"POD"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|43349
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|pos2
name|void
name|tst_QTextStream
operator|::
name|pos2
parameter_list|()
block|{
name|QByteArray
name|data
argument_list|(
literal|"abcdef\r\nghijkl\r\n"
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|QChar
name|ch
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|ch
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ch
argument_list|,
name|QChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"bcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"ghijkl"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
comment|// Seek back and try again
name|stream
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"bcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"ghijkl"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|pos3LargeFile
name|void
name|tst_QTextStream
operator|::
name|pos3LargeFile
parameter_list|()
block|{
block|{
name|QFile
name|file
argument_list|(
name|TestFileName
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// NOTE: The unusual spacing is to ensure non-1-character whitespace.
name|QString
name|lineString
init|=
literal|" 0  1  2\t3  4\t \t5  6  7  8   9 \n"
decl_stmt|;
comment|// Approximate 50kb text file
specifier|const
name|int
name|NbLines
init|=
operator|(
literal|50
operator|*
literal|1024
operator|)
operator|/
name|lineString
operator|.
name|length
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|line
init|=
literal|0
init|;
name|line
operator|<
name|NbLines
condition|;
operator|++
name|line
control|)
name|out
operator|<<
name|lineString
expr_stmt|;
comment|// File is automatically flushed and closed on destruction.
block|}
name|QFile
name|file
argument_list|(
name|TestFileName
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
specifier|const
name|int
name|testValues
index|[]
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
decl_stmt|;
name|int
name|value
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|in
operator|.
name|pos
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|in
operator|>>
name|value
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|status
argument_list|()
operator|!=
name|QTextStream
operator|::
name|Ok
condition|)
block|{
comment|// End case, i == 0&& eof reached.
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|value
argument_list|,
name|testValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readStdin
name|void
name|tst_QTextStream
operator|::
name|readStdin
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/CE has no stdin/out support for processes"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QProcess
name|stdinProcess
decl_stmt|;
name|stdinProcess
operator|.
name|start
argument_list|(
literal|"stdinProcess/stdinProcess"
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|stdinProcess
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"1"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"2"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"3"
operator|<<
name|endl
expr_stmt|;
name|stdinProcess
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|stdinProcess
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|;
name|stream
operator|>>
name|a
operator|>>
name|b
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllFromStdin
name|void
name|tst_QTextStream
operator|::
name|readAllFromStdin
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/CE has no stdin/out support for processes"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QProcess
name|stdinProcess
decl_stmt|;
name|stdinProcess
operator|.
name|start
argument_list|(
literal|"readAllStdinProcess/readAllStdinProcess"
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|stdinProcess
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"ISO-8859-1"
argument_list|)
expr_stmt|;
name|stream
operator|<<
literal|"hello world"
operator|<<
name|flush
expr_stmt|;
name|stdinProcess
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|stdinProcess
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QChar
name|quoteChar
argument_list|(
literal|'"'
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1hello world%2 \n"
argument_list|)
operator|.
name|arg
argument_list|(
name|quoteChar
argument_list|)
operator|.
name|arg
argument_list|(
name|quoteChar
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineFromStdin
name|void
name|tst_QTextStream
operator|::
name|readLineFromStdin
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"Qt/CE has no stdin/out support for processes"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QProcess
name|stdinProcess
decl_stmt|;
name|stdinProcess
operator|.
name|start
argument_list|(
literal|"readLineStdinProcess/readLineStdinProcess"
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|write
argument_list|(
literal|"abc\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stdinProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stdinProcess
operator|.
name|readAll
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|write
argument_list|(
literal|"def\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stdinProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stdinProcess
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|stdinProcess
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|stdinProcess
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|read
name|void
name|tst_QTextStream
operator|::
name|read
parameter_list|()
block|{
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"4.15 abc ole"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"4.15"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|" abc"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|".15 "
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|".15 "
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"15 a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### add tests for reading \r\n etc..
block|}
block|{
comment|// File larger than QTEXTSTREAM_BUFFERSIZE
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16384
operator|/
literal|8
condition|;
operator|++
name|i
control|)
name|file
operator|.
name|write
argument_list|(
literal|"01234567"
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0123456701"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|read
argument_list|(
literal|10
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2345670123"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|16385
operator|-
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|qbool
name|void
name|tst_QTextStream
operator|::
name|qbool
parameter_list|()
block|{
name|QString
name|s
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|s
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|s
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"hei"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|forcePoint
name|void
name|tst_QTextStream
operator|::
name|forcePoint
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|fixed
operator|<<
name|forcepoint
operator|<<
literal|1.0
operator|<<
literal|" "
operator|<<
literal|1
operator|<<
literal|" "
operator|<<
literal|0
operator|<<
literal|" "
operator|<<
operator|-
literal|1.0
operator|<<
literal|" "
operator|<<
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"1.000000 1 0 -1.000000 -1"
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|scientific
operator|<<
name|forcepoint
operator|<<
literal|1.0
operator|<<
literal|" "
operator|<<
literal|1
operator|<<
literal|" "
operator|<<
literal|0
operator|<<
literal|" "
operator|<<
operator|-
literal|1.0
operator|<<
literal|" "
operator|<<
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"1.000000e+00 1 0 -1.000000e+00 -1"
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setRealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|SmartNotation
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|forcepoint
operator|<<
literal|1.0
operator|<<
literal|" "
operator|<<
literal|1
operator|<<
literal|" "
operator|<<
literal|0
operator|<<
literal|" "
operator|<<
operator|-
literal|1.0
operator|<<
literal|" "
operator|<<
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"1.00000 1 0 -1.00000 -1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|forceSign
name|void
name|tst_QTextStream
operator|::
name|forceSign
parameter_list|()
block|{
name|QString
name|str
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|forcesign
operator|<<
literal|1.2
operator|<<
literal|" "
operator|<<
operator|-
literal|1.2
operator|<<
literal|" "
operator|<<
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"+1.2 -1.2 +0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|read0d0d0a
name|void
name|tst_QTextStream
operator|::
name|read0d0d0a
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"task113817.txt"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
name|stream
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_expr_stmt
DECL|variable|QTextStreamFunction
name|Q_DECLARE_METATYPE
argument_list|(
name|QTextStreamFunction
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|noop
name|QTextStream
modifier|&
name|noop
parameter_list|(
name|QTextStream
modifier|&
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|numeralCase_data
name|void
name|tst_QTextStream
operator|::
name|numeralCase_data
parameter_list|()
block|{
name|QTextStreamFunction
name|noop_
init|=
name|noop
decl_stmt|;
name|QTextStreamFunction
name|bin_
init|=
name|bin
decl_stmt|;
name|QTextStreamFunction
name|oct_
init|=
name|oct
decl_stmt|;
name|QTextStreamFunction
name|hex_
init|=
name|hex
decl_stmt|;
name|QTextStreamFunction
name|base
init|=
name|showbase
decl_stmt|;
name|QTextStreamFunction
name|ucb
init|=
name|uppercasebase
decl_stmt|;
name|QTextStreamFunction
name|lcb
init|=
name|lowercasebase
decl_stmt|;
name|QTextStreamFunction
name|ucd
init|=
name|uppercasedigits
decl_stmt|;
name|QTextStreamFunction
name|lcd
init|=
name|lowercasedigits
decl_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextStreamFunction
argument_list|>
argument_list|(
literal|"func1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextStreamFunction
argument_list|>
argument_list|(
literal|"func2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextStreamFunction
argument_list|>
argument_list|(
literal|"func3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QTextStreamFunction
argument_list|>
argument_list|(
literal|"func4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dec 1"
argument_list|)
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"31"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dec 2"
argument_list|)
operator|<<
name|noop_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"31"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 1"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 2"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|lcd
operator|<<
literal|31
operator|<<
literal|"1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 3"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|ucb
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 4"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 5"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|lcb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 6"
argument_list|)
operator|<<
name|hex_
operator|<<
name|noop_
operator|<<
name|ucb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 7"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"0x1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 8"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|lcb
operator|<<
name|lcd
operator|<<
literal|31
operator|<<
literal|"0x1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 9"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|ucb
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"0X1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 10"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|ucb
operator|<<
name|lcd
operator|<<
literal|31
operator|<<
literal|"0X1f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 11"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0x1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 12"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|lcb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0x1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hex 13"
argument_list|)
operator|<<
name|hex_
operator|<<
name|base
operator|<<
name|ucb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0X1F"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 1"
argument_list|)
operator|<<
name|bin_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 2"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"0b11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 3"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|lcb
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"0b11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 4"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|ucb
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"0B11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 5"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0b11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 6"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|lcb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0b11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bin 7"
argument_list|)
operator|<<
name|bin_
operator|<<
name|base
operator|<<
name|ucb
operator|<<
name|ucd
operator|<<
literal|31
operator|<<
literal|"0B11111"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oct 1"
argument_list|)
operator|<<
name|oct_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"37"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"oct 2"
argument_list|)
operator|<<
name|oct_
operator|<<
name|base
operator|<<
name|noop_
operator|<<
name|noop_
operator|<<
literal|31
operator|<<
literal|"037"
expr_stmt|;
block|}
end_function
begin_comment
comment|// From Task 125496
end_comment
begin_function
DECL|function|numeralCase
name|void
name|tst_QTextStream
operator|::
name|numeralCase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QTextStreamFunction
argument_list|,
name|func1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTextStreamFunction
argument_list|,
name|func2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTextStreamFunction
argument_list|,
name|func3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QTextStreamFunction
argument_list|,
name|func4
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|func1
operator|<<
name|func2
operator|<<
name|func3
operator|<<
name|func4
operator|<<
name|value
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|nanInf
name|void
name|tst_QTextStream
operator|::
name|nanInf
parameter_list|()
block|{
comment|// Cannot use test data in this function, as comparing nans and infs isn't
comment|// well defined.
name|QString
name|str
argument_list|(
literal|"nan NAN nAn +nan +NAN +nAn -nan -NAN -nAn"
literal|" inf INF iNf +inf +INF +iNf -inf -INF -iNf"
argument_list|)
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|double
name|tmpD
init|=
literal|0
decl_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpD
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpD
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpD
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|float
name|tmpF
init|=
literal|0
decl_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsNaN
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|>
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|<
literal|0
argument_list|)
expr_stmt|;
name|tmpD
operator|=
literal|0
expr_stmt|;
name|stream
operator|>>
name|tmpF
expr_stmt|;
name|QVERIFY
argument_list|(
name|qIsInf
argument_list|(
name|tmpF
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpF
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QString
name|s
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|s
argument_list|)
decl_stmt|;
name|out
operator|<<
name|qInf
argument_list|()
operator|<<
literal|" "
operator|<<
operator|-
name|qInf
argument_list|()
operator|<<
literal|" "
operator|<<
name|qQNaN
argument_list|()
operator|<<
name|uppercasedigits
operator|<<
literal|" "
operator|<<
name|qInf
argument_list|()
operator|<<
literal|" "
operator|<<
operator|-
name|qInf
argument_list|()
operator|<<
literal|" "
operator|<<
name|qQNaN
argument_list|()
operator|<<
name|flush
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"inf -inf nan INF -INF NAN"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|utf8IncompleteAtBufferBoundary_data
name|void
name|tst_QTextStream
operator|::
name|utf8IncompleteAtBufferBoundary_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useLocale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8"
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// is this locale UTF-8?
if|if
condition|(
name|QString
argument_list|(
name|QChar
operator|::
name|ReplacementCharacter
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|==
literal|"\xef\xbf\xbd"
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"locale"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|utf8IncompleteAtBufferBoundary
name|void
name|tst_QTextStream
operator|::
name|utf8IncompleteAtBufferBoundary
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|TestFileName
argument_list|)
expr_stmt|;
name|QFile
name|data
argument_list|(
name|TestFileName
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|utf8Codec
init|=
name|QTextCodec
operator|::
name|codecForMib
argument_list|(
literal|106
argument_list|)
decl_stmt|;
name|QString
name|lineContents
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\342\200\223"
comment|// U+2013 EN DASH
literal|"\342\200\223"
literal|"\342\200\223"
literal|"\342\200\223"
literal|"\342\200\223"
literal|"\342\200\223"
argument_list|)
decl_stmt|;
name|data
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
expr_stmt|;
block|{
name|QTextStream
name|out
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|out
operator|.
name|setCodec
argument_list|(
name|utf8Codec
argument_list|)
expr_stmt|;
name|out
operator|.
name|setFieldWidth
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|<<
name|i
operator|<<
name|lineContents
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
name|data
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useLocale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useLocale
condition|)
name|in
operator|.
name|setCodec
argument_list|(
name|utf8Codec
argument_list|)
expr_stmt|;
comment|// QUtf8Codec
else|else
name|in
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForLocale
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|QString
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
operator|++
name|i
expr_stmt|;
name|QVERIFY2
argument_list|(
name|line
operator|.
name|endsWith
argument_list|(
name|lineContents
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Line %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|line
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|)
do|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_comment
comment|// Make sure we don't write a BOM after seek()ing
end_comment
begin_function
DECL|function|writeSeekWriteNoBOM
name|void
name|tst_QTextStream
operator|::
name|writeSeekWriteNoBOM
parameter_list|()
block|{
comment|//First with the default codec (normally either latin-1 or UTF-8)
name|QBuffer
name|out
decl_stmt|;
name|out
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
name|QString
name|sizeStr
init|=
name|QLatin1String
argument_list|(
literal|"Size="
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|number
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|10
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|sizeStr
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"Version="
operator|<<
name|QString
operator|::
name|number
argument_list|(
literal|14
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"blah blah blah"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"Size=0000000000\nVersion=14\nblah blah blah\n"
argument_list|)
expr_stmt|;
comment|// Now overwrite the size header item
name|number
operator|=
literal|42
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sizeStr
operator|=
name|QLatin1String
argument_list|(
literal|"Size="
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|number
argument_list|)
operator|.
name|rightJustified
argument_list|(
literal|10
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|sizeStr
operator|<<
name|endl
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Check buffer is still OK
name|QCOMPARE
argument_list|(
name|out
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"Size=0000000042\nVersion=14\nblah blah blah\n"
argument_list|)
expr_stmt|;
comment|//Then UTF-16
name|QBuffer
name|out16
decl_stmt|;
name|out16
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream16
argument_list|(
operator|&
name|out16
argument_list|)
decl_stmt|;
name|stream16
operator|.
name|setCodec
argument_list|(
literal|"UTF-16"
argument_list|)
expr_stmt|;
name|stream16
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
name|QLatin1String
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
name|stream16
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// save that output
name|QByteArray
name|first
init|=
name|out16
operator|.
name|buffer
argument_list|()
decl_stmt|;
name|stream16
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream16
operator|<<
literal|"one"
expr_stmt|;
name|stream16
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out16
operator|.
name|buffer
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateOperatorCharData
name|void
name|tst_QTextStream
operator|::
name|generateOperatorCharData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QChar
argument_list|>
argument_list|(
literal|"qchar_output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|char
argument_list|>
argument_list|(
literal|"char_output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"write_output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
operator|<<
literal|'\0'
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|'a'
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\na"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\na"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\n'
argument_list|)
operator|<<
literal|'\n'
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
operator|<<
literal|'\0'
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\xff"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\xff'
argument_list|)
operator|<<
literal|'\xff'
operator|<<
name|QByteArray
argument_list|(
literal|"\xff"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\xfe"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe"
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\xfe'
argument_list|)
operator|<<
literal|'\xfe'
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
operator|<<
literal|'\0'
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (a)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe\x61\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|'a'
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'\0'
argument_list|)
operator|<<
literal|'\0'
operator|<<
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (a)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff\x00\x61"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'a'
argument_list|)
operator|<<
literal|'a'
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|QChar_operators_FromDevice_data
name|void
name|tst_QTextStream
operator|::
name|QChar_operators_FromDevice_data
parameter_list|()
block|{
name|generateOperatorCharData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|QChar_operators_FromDevice
name|void
name|tst_QTextStream
operator|::
name|QChar_operators_FromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QChar
argument_list|,
name|qchar_output
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|write_output
argument_list|)
expr_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|QChar
name|tmp
decl_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|qchar_output
argument_list|)
expr_stmt|;
name|QBuffer
name|writeBuf
decl_stmt|;
name|writeBuf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|writeStream
argument_list|(
operator|&
name|writeBuf
argument_list|)
decl_stmt|;
name|writeStream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|writeStream
operator|<<
name|qchar_output
expr_stmt|;
name|writeStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeBuf
operator|.
name|buffer
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|write_output
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeBuf
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|write_output
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|char_operators_FromDevice_data
name|void
name|tst_QTextStream
operator|::
name|char_operators_FromDevice_data
parameter_list|()
block|{
name|generateOperatorCharData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|char_operators_FromDevice
name|void
name|tst_QTextStream
operator|::
name|char_operators_FromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|char
argument_list|,
name|char_output
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|write_output
argument_list|)
expr_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|tmp
decl_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|char_output
argument_list|)
expr_stmt|;
name|QBuffer
name|writeBuf
decl_stmt|;
name|writeBuf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|writeStream
argument_list|(
operator|&
name|writeBuf
argument_list|)
decl_stmt|;
name|writeStream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|writeStream
operator|<<
name|char_output
expr_stmt|;
name|writeStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeBuf
operator|.
name|buffer
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|write_output
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writeBuf
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|write_output
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateNaturalNumbersData
name|void
name|tst_QTextStream
operator|::
name|generateNaturalNumbersData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" "
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"12"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-12"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|12
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-0"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" 1"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" \\r\\n\\r\\n123"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" \r\n\r\n123"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|123
argument_list|)
expr_stmt|;
comment|// bit boundary tests
name|QTest
operator|::
name|newRow
argument_list|(
literal|"127"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"127"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|127
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"128"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"129"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"129"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-127"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-127"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|127
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-128"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-128"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-129"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-129"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|32767
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|32768
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|32769
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-32767"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-32767"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|32767
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-32768"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-32768"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|32768
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-32769"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-32769"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|32769
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|65537
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|65536
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|65535
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-65537"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-65537"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|65537
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-65536"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-65536"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|65536
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-65535"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-65535"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|65535
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483646"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483646"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|2147483646
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|2147483647
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483648
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-2147483646"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-2147483646"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|2147483646
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-2147483647"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-2147483647"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
operator|-
literal|2147483647
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-2147483648"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|2147483648
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967296
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967297
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967298"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967298"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967298
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-4294967296"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|4294967296
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-4294967297"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|4294967297
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-4294967298"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-4294967298"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|4294967298
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775807"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775807"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775808"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775808"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775808
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775809"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775809"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775809
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18446744073709551615"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"18446744073709551615"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18446744073709551616"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"18446744073709551616"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18446744073709551617"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"18446744073709551617"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// 18446744073709551617 bytes should be enough for anyone.... ;-)
comment|// hex tests
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x0"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0x1"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xf"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xdeadbeef"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xdeadbeef"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0XDEADBEEF"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0XDEADBEEF"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xdeadbeefZzzzz"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0xdeadbeefZzzzz"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  0xdeadbeefZzzzz"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"  0xdeadbeefZzzzz"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
comment|// oct tests
name|QTest
operator|::
name|newRow
argument_list|(
literal|"00"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"00"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0141"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0141"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01419999"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"01419999"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|97
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  01419999"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"  01419999"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|97
argument_list|)
expr_stmt|;
comment|// bin tests
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0b0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0b0"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0b1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0b1"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0b10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0b10"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0B10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0B10"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0b101010"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0b101010"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0b1010102345"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0b1010102345"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  0b1010102345"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"  0b1010102345"
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|42
argument_list|)
expr_stmt|;
comment|// utf-16 tests
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
name|qulonglong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (0xdeadbeef)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
literal|"\x00\x30\x00\x78\x00\x64\x00\x65\x00\x61\x00\x64\x00\x62\x00\x65\x00\x65\x00\x66"
argument_list|,
literal|22
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
argument_list|,
literal|2
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (0xdeadbeef)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
literal|"\x30\x00\x78\x00\x64\x00\x65\x00\x61\x00\x64\x00\x62\x00\x65\x00\x65\x00\x66\x00"
argument_list|,
literal|22
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|3735928559
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_define
DECL|macro|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
define|#
directive|define
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
parameter_list|(
name|texttype
parameter_list|,
name|type
parameter_list|)
define|\
value|void tst_QTextStream:: texttype##_read_operator_FromDevice_data() \     { generateNaturalNumbersData(false); } \     void tst_QTextStream:: texttype##_read_operator_FromDevice() \     { \         QFETCH(QByteArray, input); \         QFETCH(qulonglong, output); \         type sh; \         QTextStream stream(&input); \         stream>> sh; \         QCOMPARE(sh, (type)output); \     }
end_define
begin_macro
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
argument|signedShort
argument_list|,
argument|signed short
argument_list|)
end_macro
begin_macro
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
argument|unsignedShort
argument_list|,
argument|unsigned short
argument_list|)
end_macro
begin_macro
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
argument|signedInt
argument_list|,
argument|signed int
argument_list|)
end_macro
begin_macro
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
argument|unsignedInt
argument_list|,
argument|unsigned int
argument_list|)
end_macro
begin_macro
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
argument|qlonglong
argument_list|,
argument|qlonglong
argument_list|)
end_macro
begin_expr_stmt
name|IMPLEMENT_STREAM_RIGHT_INT_OPERATOR_TEST
argument_list|(
name|qulonglong
argument_list|,
name|qulonglong
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateRealNumbersData
name|void
name|tst_QTextStream
operator|::
name|generateRealNumbersData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1.0"
argument_list|)
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" 1"
argument_list|)
operator|<<
literal|1.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" \\r\\n1.2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" \r\n1.2"
argument_list|)
operator|<<
literal|1.2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3.14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"3.14"
argument_list|)
operator|<<
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-3.14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-3.14"
argument_list|)
operator|<<
operator|-
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" -3.14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" -3.14"
argument_list|)
operator|<<
operator|-
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"314e-02"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"314e-02"
argument_list|)
operator|<<
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"314E-02"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"314E-02"
argument_list|)
operator|<<
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"314e+02"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"314e+02"
argument_list|)
operator|<<
literal|31400.
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"314E+02"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"314E+02"
argument_list|)
operator|<<
literal|31400.
expr_stmt|;
comment|// ### add numbers with exponents
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
argument_list|,
literal|2
argument_list|)
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
literal|0.0
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_define
DECL|macro|IMPLEMENT_STREAM_RIGHT_REAL_OPERATOR_TEST
define|#
directive|define
name|IMPLEMENT_STREAM_RIGHT_REAL_OPERATOR_TEST
parameter_list|(
name|texttype
parameter_list|,
name|type
parameter_list|)
define|\
value|void tst_QTextStream:: texttype##_read_operator_FromDevice_data() \     { generateRealNumbersData(false); } \     void tst_QTextStream:: texttype##_read_operator_FromDevice() \     { \         QFETCH(QByteArray, input); \         QFETCH(double, output); \         type sh; \         QTextStream stream(&input); \         stream>> sh; \         QCOMPARE(sh, (type)output); \     }
end_define
begin_macro
name|IMPLEMENT_STREAM_RIGHT_REAL_OPERATOR_TEST
argument_list|(
argument|float
argument_list|,
argument|float
argument_list|)
end_macro
begin_expr_stmt
name|IMPLEMENT_STREAM_RIGHT_REAL_OPERATOR_TEST
argument_list|(
name|double
argument_list|,
name|double
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateStringData
name|void
name|tst_QTextStream
operator|::
name|generateStringData
parameter_list|(
name|bool
name|for_QString
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"array_output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"string_output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" a b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" a b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a1 b1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a1 b1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|" a1 b1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" a1 b1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n\\n\\nole i dole\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n\n\nole i dole\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ole"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ole"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|for_QString
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xfe"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-BE (corrupt)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xff"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (empty)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf16-LE (corrupt)"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xfe"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"\xfe"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|charPtr_read_operator_FromDevice_data
name|void
name|tst_QTextStream
operator|::
name|charPtr_read_operator_FromDevice_data
parameter_list|()
block|{
name|generateStringData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|charPtr_read_operator_FromDevice
name|void
name|tst_QTextStream
operator|::
name|charPtr_read_operator_FromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array_output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|1024
index|]
decl_stmt|;
name|stream
operator|>>
name|buf
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|buf
argument_list|,
name|array_output
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|stringRef_read_operator_FromDevice_data
name|void
name|tst_QTextStream
operator|::
name|stringRef_read_operator_FromDevice_data
parameter_list|()
block|{
name|generateStringData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|stringRef_read_operator_FromDevice
name|void
name|tst_QTextStream
operator|::
name|stringRef_read_operator_FromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|string_output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|tmp
decl_stmt|;
name|stream
operator|>>
name|tmp
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|string_output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|byteArray_read_operator_FromDevice_data
name|void
name|tst_QTextStream
operator|::
name|byteArray_read_operator_FromDevice_data
parameter_list|()
block|{
name|generateStringData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|byteArray_read_operator_FromDevice
name|void
name|tst_QTextStream
operator|::
name|byteArray_read_operator_FromDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|array_output
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|stream
operator|>>
name|array
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
argument_list|,
name|array_output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_define
DECL|macro|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
define|#
directive|define
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
parameter_list|(
name|texttype
parameter_list|,
name|type
parameter_list|)
define|\
value|void tst_QTextStream:: texttype##_write_operator_ToDevice() \     { \         QFETCH(qulonglong, number); \         QFETCH(QByteArray, data); \         \         QBuffer buffer; \         buffer.open(QBuffer::WriteOnly); \         QTextStream stream(&buffer); \         stream<< (type)number; \         stream.flush(); \         \         QCOMPARE(buffer.data().constData(), data.constData()); \     }
end_define
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|signedShort_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|signedShort_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
argument|signedShort
argument_list|,
argument|signed short
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|unsignedShort_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|unsignedShort_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
argument|unsignedShort
argument_list|,
argument|unsigned short
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|signedInt_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|signedInt_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65536"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65537"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483647
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483647"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483648
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-2147483648"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483649"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483649
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-2147483647"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967295"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967295
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967296
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967297
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
argument|signedInt
argument_list|,
argument|signed int
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|unsignedInt_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|unsignedInt_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967295"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65536"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65537"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483647
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483647"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483648
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483648"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483649"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483649
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483649"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967295"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967295
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967295"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967296
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967297
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
argument|unsignedInt
argument_list|,
argument|unsigned int
argument_list|)
end_macro
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|qlonglong_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|qlonglong_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65536"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65537"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483647
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483647"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483648
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483648"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483649"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483649
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483649"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967295"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967295
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967295"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967296
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967296"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967297
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967297"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775807"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775807"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775808"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775808
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-9223372036854775808"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775809"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775809
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-9223372036854775807"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18446744073709551615"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
name|qlonglong
argument_list|,
name|qlonglong
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|qulonglong_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|qulonglong_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"18446744073709551615"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32767"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32767
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32767"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32768"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32768
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32768"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32769"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|32769
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"32769"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65535"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65535
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65536"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65536
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65536"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"65537"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|65537
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"65537"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483647"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483647
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483647"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483648"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483648
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483648"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2147483649"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|2147483649
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"2147483649"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967295"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967295
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967295"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967296
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967296"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967297"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4294967297
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"4294967297"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775807"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775807"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775808"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775808
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775808"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9223372036854775809"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|9223372036854775809
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"9223372036854775809"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18446744073709551615"
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"18446744073709551615"
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|IMPLEMENT_STREAM_LEFT_INT_OPERATOR_TEST
argument_list|(
name|qulonglong
argument_list|,
name|qulonglong
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|generateRealNumbersDataWrite
name|void
name|tst_QTextStream
operator|::
name|generateRealNumbersDataWrite
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0.0
operator|<<
name|QByteArray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3.14"
argument_list|)
operator|<<
literal|3.14
operator|<<
name|QByteArray
argument_list|(
literal|"3.14"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-3.14"
argument_list|)
operator|<<
operator|-
literal|3.14
operator|<<
name|QByteArray
argument_list|(
literal|"-3.14"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2e+10"
argument_list|)
operator|<<
literal|1.2e+10
operator|<<
name|QByteArray
argument_list|(
literal|"1.2e+10"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1.2e+10"
argument_list|)
operator|<<
operator|-
literal|1.2e+10
operator|<<
name|QByteArray
argument_list|(
literal|"-1.2e+10"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_define
DECL|macro|IMPLEMENT_STREAM_LEFT_REAL_OPERATOR_TEST
define|#
directive|define
name|IMPLEMENT_STREAM_LEFT_REAL_OPERATOR_TEST
parameter_list|(
name|texttype
parameter_list|,
name|type
parameter_list|)
define|\
value|void tst_QTextStream:: texttype##_write_operator_ToDevice_data() \     { generateRealNumbersDataWrite(); } \     void tst_QTextStream:: texttype##_write_operator_ToDevice() \     { \         QFETCH(double, number); \         QFETCH(QByteArray, data); \         \         QBuffer buffer; \         buffer.open(QBuffer::WriteOnly); \         QTextStream stream(&buffer); \         float f = (float)number; \         stream<< f; \         stream.flush(); \         QCOMPARE(buffer.data().constData(), data.constData()); \     }
end_define
begin_macro
name|IMPLEMENT_STREAM_LEFT_REAL_OPERATOR_TEST
argument_list|(
argument|float
argument_list|,
argument|float
argument_list|)
end_macro
begin_expr_stmt
name|IMPLEMENT_STREAM_LEFT_REAL_OPERATOR_TEST
argument_list|(
name|double
argument_list|,
name|float
argument_list|)
expr_stmt|;
end_expr_stmt
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|string_write_operator_ToDevice_data
name|void
name|tst_QTextStream
operator|::
name|string_write_operator_ToDevice_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bytedata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringdata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QString
argument_list|(
literal|1
argument_list|,
literal|'\0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a cow jumped over the moon"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a cow jumped over the moon"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a cow jumped over the moon"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a cow jumped over the moon"
argument_list|)
expr_stmt|;
comment|// ### get the utf16-be test on its legs.
comment|/*     QTest::newRow("utf16-BE (a cow jumped over the moon)")<< QByteArray("\xff\xfe\x00\x61\x00\x20\x00\x63\x00\x6f\x00\x77\x00\x20\x00\x6a\x00\x75\x00\x6d\x00\x70\x00\x65\x00\x64\x00\x20\x00\x6f\x00\x76\x00\x65\x00\x72\x00\x20\x00\x74\x00\x68\x00\x65\x00\x20\x00\x6d\x00\x6f\x00\x6f\x00\x6e\x00\x0a", 56)<< QString("a cow jumped over the moon")<< QByteArray("a cow jumped over the moon");     */
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|string_write_operator_ToDevice
name|void
name|tst_QTextStream
operator|::
name|string_write_operator_ToDevice
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|bytedata
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stringdata
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|{
comment|// char*
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|bytedata
operator|.
name|constData
argument_list|()
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|result
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// QByteArray
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|bytedata
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|result
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// QString
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|stringdata
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|buffer
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|result
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|useCase1
name|void
name|tst_QTextStream
operator|::
name|useCase1
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
literal|4.15
operator|<<
literal|" "
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|" "
operator|<<
name|QString
argument_list|(
literal|"ole"
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"4.15 abc ole"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
name|double
name|d
decl_stmt|;
name|QByteArray
name|a
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|d
expr_stmt|;
name|stream
operator|>>
name|a
expr_stmt|;
name|stream
operator|>>
name|s
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|4.15
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"ole"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|useCase2
name|void
name|tst_QTextStream
operator|::
name|useCase2
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream
operator|<<
literal|4.15
operator|<<
literal|" "
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|" "
operator|<<
name|QString
argument_list|(
literal|"ole"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"4.15 abc ole"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|d
decl_stmt|;
name|QByteArray
name|a
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|QTextStream
name|stream2
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream2
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream2
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stream2
operator|>>
name|d
expr_stmt|;
name|stream2
operator|>>
name|a
expr_stmt|;
name|stream2
operator|>>
name|s
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|4.15
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
argument_list|,
name|QString
argument_list|(
literal|"ole"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|manipulators_data
name|void
name|tst_QTextStream
operator|::
name|manipulators_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"realNumber"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"intNumber"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"textData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no flags"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|5.0
operator|<<
literal|5
operator|<<
name|QString
argument_list|(
literal|"five"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"55five"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rightadjust"
argument_list|)
operator|<<
literal|0
operator|<<
literal|10
operator|<<
literal|5.0
operator|<<
literal|5
operator|<<
name|QString
argument_list|(
literal|"five"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"         5         5      five"
argument_list|)
expr_stmt|;
comment|// ### FIX
comment|//    QTest::newRow("leftadjust")<< int(QTextStream::left)<< 10<< 5.0<< 5<< QString("five")<< QByteArray("5         5         five      ");
comment|//    QTest::newRow("showpos")<< int(QTextStream::showpos)<< 10<< 5.0<< 5<< QString("five")<< QByteArray("        +5        +5      five");
comment|//    QTest::newRow("showpos2")<< int(QTextStream::showpos)<< 5<< 3.14<< -5<< QString("five")<< QByteArray("+3.14   -5 five");
comment|//    QTest::newRow("hex")<< int(QTextStream::hex | QTextStream::showbase)<< 5<< 3.14<< -5<< QString("five")<< QByteArray(" 3.14 -0x5 five");
comment|//    QTest::newRow("hex uppercase")<< int(QTextStream::hex | QTextStream::uppercase | QTextStream::showbase)<< 5<< 3.14<< -5<< QString("five")<< QByteArray(" 3.14 -0X5 five");
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|manipulators
name|void
name|tst_QTextStream
operator|::
name|manipulators
parameter_list|()
block|{
comment|//    QFETCH(int, flags);
name|QFETCH
argument_list|(
name|int
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|realNumber
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|intNumber
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|textData
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"ISO-8859-1"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setAutoDetectUnicode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//    stream.setFlags(flags);
name|stream
operator|.
name|setFieldWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|realNumber
expr_stmt|;
name|stream
operator|<<
name|intNumber
expr_stmt|;
name|stream
operator|<<
name|textData
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|data
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|result
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateBOM
name|void
name|tst_QTextStream
operator|::
name|generateBOM
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"bom.txt"
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
literal|"bom.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-16LE"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
literal|"Hello"
operator|<<
name|endl
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"\x48\x00\x65\00\x6c\00\x6c\00\x6f\x00\x0a\x00"
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QFile
operator|::
name|remove
argument_list|(
literal|"bom.txt"
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
literal|"bom.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"UTF-16LE"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|bom
operator|<<
literal|"Hello"
operator|<<
name|endl
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"\xff\xfe\x48\x00\x65\00\x6c\00\x6c\00\x6f\x00\x0a\x00"
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readBomSeekBackReadBomAgain
name|void
name|tst_QTextStream
operator|::
name|readBomSeekBackReadBomAgain
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"utf8bom"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"utf8bom"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"\xef\xbb\xbf"
literal|"Andreas"
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QString
name|Andreas
decl_stmt|;
name|stream
operator|>>
name|Andreas
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Andreas
argument_list|,
name|QString
argument_list|(
literal|"Andreas"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|Andreas
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Andreas
argument_list|,
name|QString
argument_list|(
literal|"Andreas"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|status_real_read_data
name|void
name|tst_QTextStream
operator|::
name|status_real_read_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"expected_f"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected_w"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|(
literal|"results"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.23 abc   "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1.23 abc   "
argument_list|)
operator|<<
literal|1.23
operator|<<
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|Ok
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ReadCorruptData
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|Ok
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|Ok
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ReadPastEnd
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_real_read
name|void
name|tst_QTextStream
operator|::
name|status_real_read
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|expected_f
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected_w
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|QTextStream
name|s
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|double
name|f
init|=
literal|0.0
decl_stmt|;
name|QString
name|w
decl_stmt|;
name|s
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|results
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
name|expected_f
argument_list|)
expr_stmt|;
name|s
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|results
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|results
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|>>
name|w
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|results
operator|.
name|at
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
argument_list|,
name|expected_w
argument_list|)
expr_stmt|;
name|s
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|results
operator|.
name|at
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_integer_read
name|void
name|tst_QTextStream
operator|::
name|status_integer_read
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QString
name|text
init|=
name|QLatin1String
argument_list|(
literal|"123 abc   "
argument_list|)
decl_stmt|;
name|QTextStream
name|s
argument_list|(
operator|&
name|text
argument_list|)
decl_stmt|;
else|#
directive|else
name|QTextStream
name|s
argument_list|(
literal|"123 abc   "
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|int
name|i
decl_stmt|;
name|QString
name|w
decl_stmt|;
name|s
operator|>>
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|s
operator|>>
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
name|s
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|s
operator|>>
name|w
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|w
argument_list|,
name|QString
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|>>
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_word_read
name|void
name|tst_QTextStream
operator|::
name|status_word_read
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QString
name|text
init|=
name|QLatin1String
argument_list|(
literal|"abc "
argument_list|)
decl_stmt|;
name|QTextStream
name|s
argument_list|(
operator|&
name|text
argument_list|)
decl_stmt|;
else|#
directive|else
name|QTextStream
name|s
argument_list|(
literal|"abc "
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QString
name|w
decl_stmt|;
name|s
operator|>>
name|w
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|s
operator|>>
name|w
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FakeBuffer
class|class
name|FakeBuffer
super|:
specifier|public
name|QBuffer
block|{
protected|protected:
DECL|function|writeData
name|qint64
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|,
name|qint64
name|i
parameter_list|)
block|{
return|return
name|m_lock
condition|?
literal|0
else|:
name|QBuffer
operator|::
name|writeData
argument_list|(
name|c
argument_list|,
name|i
argument_list|)
return|;
block|}
public|public:
DECL|function|FakeBuffer
name|FakeBuffer
parameter_list|(
name|bool
name|locked
init|=
literal|false
parameter_list|)
member_init_list|:
name|m_lock
argument_list|(
name|locked
argument_list|)
block|{}
DECL|function|setLocked
name|void
name|setLocked
parameter_list|(
name|bool
name|locked
parameter_list|)
block|{
name|m_lock
operator|=
name|locked
expr_stmt|;
block|}
private|private:
DECL|member|m_lock
name|bool
name|m_lock
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|status_write_error
name|void
name|tst_QTextStream
operator|::
name|status_write_error
parameter_list|()
block|{
name|FakeBuffer
name|fb
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fb
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|fs
argument_list|(
operator|&
name|fb
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setCodec
argument_list|(
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"latin1"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* first write some initial content */
name|fs
operator|<<
literal|"hello"
expr_stmt|;
name|fs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* then test that writing can cause an error */
name|fb
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|<<
literal|"error"
expr_stmt|;
name|fs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|WriteFailed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
comment|/* finally test that writing after an error doesn't change the stream any more */
name|fb
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|<<
literal|"can't do that"
expr_stmt|;
name|fs
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|status
argument_list|()
argument_list|,
name|QTextStream
operator|::
name|WriteFailed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fb
operator|.
name|data
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task180679_alignAccountingStyle
name|void
name|tst_QTextStream
operator|::
name|task180679_alignAccountingStyle
parameter_list|()
block|{
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|out
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
expr_stmt|;
name|out
operator|.
name|setFieldWidth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|setPadChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|out
operator|<<
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QLatin1String
argument_list|(
literal|"-001"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|out
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
expr_stmt|;
name|out
operator|.
name|setFieldWidth
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|out
operator|.
name|setPadChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|out
operator|<<
literal|"-1"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QLatin1String
argument_list|(
literal|"00-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|out
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
expr_stmt|;
name|out
operator|.
name|setFieldWidth
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|out
operator|.
name|setPadChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|out
operator|<<
operator|-
literal|1.2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QLatin1String
argument_list|(
literal|"-001.2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|out
operator|.
name|setFieldAlignment
argument_list|(
name|QTextStream
operator|::
name|AlignAccountingStyle
argument_list|)
expr_stmt|;
name|out
operator|.
name|setFieldWidth
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|out
operator|.
name|setPadChar
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|out
operator|<<
literal|"-1.2"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|QLatin1String
argument_list|(
literal|"00-1.2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|task178772_setCodec
name|void
name|tst_QTextStream
operator|::
name|task178772_setCodec
parameter_list|()
block|{
name|QByteArray
name|ba
argument_list|(
literal|"\xe5 v\xe6r\n\xc3\xa5 v\xc3\xa6r\n"
argument_list|)
decl_stmt|;
name|QString
name|res
init|=
name|QLatin1String
argument_list|(
literal|"\xe5 v\xe6r"
argument_list|)
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"ISO 8859-1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readLine
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|readLine
argument_list|()
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_write_with_flags_data
name|void
name|tst_QTextStream
operator|::
name|double_write_with_flags_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"number"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"numberFlags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"realNumberNotation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-ForceSign"
argument_list|)
operator|<<
operator|-
literal|1.23
operator|<<
name|QString
argument_list|(
literal|"-1.23"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ForceSign
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+ForceSign"
argument_list|)
operator|<<
literal|1.23
operator|<<
name|QString
argument_list|(
literal|"+1.23"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ForceSign
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"inf"
argument_list|)
operator|<<
name|qInf
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"inf"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-inf"
argument_list|)
operator|<<
operator|-
name|qInf
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"-inf"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"inf uppercase"
argument_list|)
operator|<<
name|qInf
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"INF"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|UppercaseDigits
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-inf uppercase"
argument_list|)
operator|<<
operator|-
name|qInf
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"-INF"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|UppercaseDigits
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nan"
argument_list|)
operator|<<
name|qQNaN
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"nan"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nan"
argument_list|)
operator|<<
name|qQNaN
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"NAN"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|UppercaseDigits
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scientific"
argument_list|)
operator|<<
literal|1.234567e+02
operator|<<
name|QString
argument_list|(
literal|"1.234567e+02"
argument_list|)
operator|<<
literal|0
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ScientificNotation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scientific2"
argument_list|)
operator|<<
literal|1.234567e+02
operator|<<
name|QString
argument_list|(
literal|"1.234567e+02"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|UppercaseBase
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ScientificNotation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scientific uppercase"
argument_list|)
operator|<<
literal|1.234567e+02
operator|<<
name|QString
argument_list|(
literal|"1.234567E+02"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|UppercaseDigits
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ScientificNotation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_write_with_flags
name|void
name|tst_QTextStream
operator|::
name|double_write_with_flags
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|double
argument_list|,
name|number
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|numberFlags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|realNumberNotation
argument_list|)
expr_stmt|;
name|QString
name|buf
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
if|if
condition|(
name|numberFlags
condition|)
name|stream
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlag
argument_list|(
name|numberFlags
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|realNumberNotation
condition|)
name|stream
operator|.
name|setRealNumberNotation
argument_list|(
name|QTextStream
operator|::
name|RealNumberNotation
argument_list|(
name|realNumberNotation
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|number
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_write_with_precision_data
name|void
name|tst_QTextStream
operator|::
name|double_write_with_precision_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"precision"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTextStream::setRealNumberPrecision: Invalid precision (-1)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.14159"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|3
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.14"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.1416"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|6
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.14159"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
literal|7
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.14159"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|3.14159
operator|<<
name|QString
argument_list|(
literal|"3.14159"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|double_write_with_precision
name|void
name|tst_QTextStream
operator|::
name|double_write_with_precision
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|precision
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QString
name|buf
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|buf
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setRealNumberPrecision
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|value
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|int_read_with_locale_data
name|void
name|tst_QTextStream
operator|::
name|int_read_with_locale_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-123"
argument_list|)
operator|<<
operator|-
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C +123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"+123"
argument_list|)
operator|<<
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12345"
argument_list|)
operator|<<
literal|12345
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12,345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12,345"
argument_list|)
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12.345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12.345"
argument_list|)
operator|<<
literal|12
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"-123"
argument_list|)
operator|<<
operator|-
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE +123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"+123"
argument_list|)
operator|<<
literal|123
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12345"
argument_list|)
operator|<<
literal|12345
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12.345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"12.345"
argument_list|)
operator|<<
literal|12345
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE .12345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".12345"
argument_list|)
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|int_read_with_locale
name|void
name|tst_QTextStream
operator|::
name|int_read_with_locale
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|input
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|int
name|result
decl_stmt|;
name|stream
operator|>>
name|result
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|int_write_with_locale_data
name|void
name|tst_QTextStream
operator|::
name|int_write_with_locale_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"locale"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"numberFlags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C -123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|123
operator|<<
name|QString
argument_list|(
literal|"-123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C +123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ForceSign
operator|<<
literal|123
operator|<<
name|QString
argument_list|(
literal|"+123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C 12345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"C"
argument_list|)
operator|<<
literal|0
operator|<<
literal|12345
operator|<<
name|QString
argument_list|(
literal|"12345"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE -123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|123
operator|<<
name|QString
argument_list|(
literal|"-123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE +123"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QTextStream
operator|::
name|ForceSign
operator|<<
literal|123
operator|<<
name|QString
argument_list|(
literal|"+123"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"de_DE 12345"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"de_DE"
argument_list|)
operator|<<
literal|0
operator|<<
literal|12345
operator|<<
name|QString
argument_list|(
literal|"12.345"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|int_write_with_locale
name|void
name|tst_QTextStream
operator|::
name|int_write_with_locale
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|locale
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|numberFlags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberFlags
condition|)
name|stream
operator|.
name|setNumberFlags
argument_list|(
name|QTextStream
operator|::
name|NumberFlags
argument_list|(
name|numberFlags
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|input
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ------------------------------------------------------------------------------
end_comment
begin_comment
comment|// like QTEST_APPLESS_MAIN, but initialising the locale on Unix
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|qt_locale_initialized
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|::
name|setlocale
argument_list|(
name|LC_ALL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|qt_locale_initialized
operator|=
literal|true
expr_stmt|;
endif|#
directive|endif
name|tst_QTextStream
name|tc
decl_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|tc
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qtextstream.moc"
end_include
end_unit
