begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSettings>
end_include
begin_include
include|#
directive|include
file|<private/qsettings_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtGlobal>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaType>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QtGui/QKeySequence>
end_include
begin_include
include|#
directive|include
file|<cctype>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_comment
comment|// need for unlink on mingw
end_comment
begin_include
include|#
directive|include
file|<io.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSettings::Format
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QSETTINGS_P_H_VERSION
end_ifndef
begin_define
DECL|macro|QSETTINGS_P_H_VERSION
define|#
directive|define
name|QSETTINGS_P_H_VERSION
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QSettings
argument_list|)
end_macro
begin_function
DECL|function|canWriteNativeSystemSettings
specifier|static
specifier|inline
name|bool
name|canWriteNativeSystemSettings
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|HKEY
name|key
decl_stmt|;
specifier|const
name|LONG
name|result
init|=
name|RegOpenKeyEx
argument_list|(
name|HKEY_LOCAL_MACHINE
argument_list|,
literal|L"Software"
argument_list|,
literal|0
argument_list|,
name|KEY_WRITE
argument_list|,
operator|&
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
name|ERROR_SUCCESS
condition|)
name|RegCloseKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
else|else
name|qErrnoWarning
argument_list|(
name|result
argument_list|,
literal|"RegOpenKeyEx failed"
argument_list|)
expr_stmt|;
return|return
name|result
operator|==
name|ERROR_SUCCESS
return|;
else|#
directive|else
comment|// Q_OS_WIN&& !Q_OS_WINRT
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
DECL|variable|insufficientPermissionSkipMessage
specifier|static
specifier|const
name|char
name|insufficientPermissionSkipMessage
index|[]
init|=
literal|"Insufficient permissions for this test."
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QSettings
class|class
name|tst_QSettings
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QSettings
name|tst_QSettings
parameter_list|()
member_init_list|:
name|m_canWriteNativeSystemSettings
argument_list|(
name|canWriteNativeSystemSettings
argument_list|()
argument_list|)
block|{}
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|ctor_data
parameter_list|()
function_decl|;
name|void
name|ctor
parameter_list|()
function_decl|;
name|void
name|beginGroup
parameter_list|()
function_decl|;
name|void
name|setValue
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|sync
parameter_list|()
function_decl|;
name|void
name|setFallbacksEnabled
parameter_list|()
function_decl|;
name|void
name|setFallbacksEnabled_data
parameter_list|()
function_decl|;
name|void
name|fromFile_data
parameter_list|()
function_decl|;
name|void
name|fromFile
parameter_list|()
function_decl|;
name|void
name|testArrays_data
parameter_list|()
function_decl|;
name|void
name|testArrays
parameter_list|()
function_decl|;
name|void
name|testCaseSensitivity_data
parameter_list|()
function_decl|;
name|void
name|testCaseSensitivity
parameter_list|()
function_decl|;
name|void
name|testErrorHandling_data
parameter_list|()
function_decl|;
name|void
name|testErrorHandling
parameter_list|()
function_decl|;
name|void
name|testChildKeysAndGroups_data
parameter_list|()
function_decl|;
name|void
name|testChildKeysAndGroups
parameter_list|()
function_decl|;
name|void
name|testUpdateRequestEvent
parameter_list|()
function_decl|;
name|void
name|testThreadSafety
parameter_list|()
function_decl|;
name|void
name|testEmptyData
parameter_list|()
function_decl|;
name|void
name|testResourceFiles
parameter_list|()
function_decl|;
name|void
name|testRegistryShortRootNames
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|void
name|fileName
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|isWritable_data
parameter_list|()
function_decl|;
name|void
name|isWritable
parameter_list|()
function_decl|;
name|void
name|registerFormat
parameter_list|()
function_decl|;
name|void
name|setPath
parameter_list|()
function_decl|;
name|void
name|setDefaultFormat
parameter_list|()
function_decl|;
name|void
name|dontCreateNeedlessPaths
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_QSETTINGS_ALWAYS_CASE_SENSITIVE_AND_FORGET_ORIGINAL_KEY_ORDER
argument_list|)
name|void
name|dontReorderIniKeysNeedlessly
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|void
name|consistentRegistryStorage
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|allKeys_data
parameter_list|()
function_decl|;
name|void
name|allKeys
parameter_list|()
function_decl|;
name|void
name|childGroups_data
parameter_list|()
function_decl|;
name|void
name|childGroups
parameter_list|()
function_decl|;
name|void
name|childKeys_data
parameter_list|()
function_decl|;
name|void
name|childKeys
parameter_list|()
function_decl|;
name|void
name|setIniCodec
parameter_list|()
function_decl|;
name|void
name|testIniParsing_data
parameter_list|()
function_decl|;
name|void
name|testIniParsing
parameter_list|()
function_decl|;
name|void
name|testEscapes
parameter_list|()
function_decl|;
name|void
name|testNormalizedKey_data
parameter_list|()
function_decl|;
name|void
name|testNormalizedKey
parameter_list|()
function_decl|;
name|void
name|testVariantTypes_data
parameter_list|()
function_decl|;
name|void
name|testVariantTypes
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|rainersSyncBugOnMac_data
parameter_list|()
function_decl|;
name|void
name|rainersSyncBugOnMac
parameter_list|()
function_decl|;
name|void
name|recursionBug
parameter_list|()
function_decl|;
name|void
name|testByteArray_data
parameter_list|()
function_decl|;
name|void
name|testByteArray
parameter_list|()
function_decl|;
private|private:
DECL|member|m_canWriteNativeSystemSettings
specifier|const
name|bool
name|m_canWriteNativeSystemSettings
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QSettings
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QSettings
name|obj1
decl_stmt|;
comment|// bool QSettings::fallbacksEnabled()
comment|// void QSettings::setFallbacksEnabled(bool)
name|obj1
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFallbacksEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|removePath
specifier|static
name|void
name|removePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|_path
parameter_list|)
block|{
name|QString
name|path
init|=
name|_path
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
return|return;
name|QStringList
name|entries
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QString
name|name
decl|,
name|entries
control|)
block|{
name|QString
name|absolute
init|=
name|path
operator|+
name|name
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|absolute
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
name|removePath
argument_list|(
name|absolute
operator|+
literal|"\\"
argument_list|)
expr_stmt|;
else|else
name|QFile
operator|::
name|remove
argument_list|(
name|absolute
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
index|[
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|==
literal|'\\'
condition|)
name|path
operator|=
name|path
operator|.
name|left
argument_list|(
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|path
operator|.
name|mid
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'\\'
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|settingsPath
specifier|static
name|QString
name|settingsPath
parameter_list|(
specifier|const
name|char
modifier|*
name|path
init|=
literal|""
parameter_list|)
block|{
comment|// Temporary path for files that are specified explicitly in the constructor.
name|QString
name|tempPath
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|tempPath
operator|.
name|truncate
argument_list|(
name|tempPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|tempPath
operator|+
literal|"/tst_QSettings/"
operator|+
name|QLatin1String
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|readCustom1File
specifier|static
name|bool
name|readCustom1File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QDataStream
name|in
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|quint32
name|magic
decl_stmt|;
name|in
operator|>>
name|magic
expr_stmt|;
name|in
operator|>>
name|map
expr_stmt|;
return|return
operator|(
name|magic
operator|==
literal|0x01010101
operator|&&
name|in
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
operator|)
return|;
block|}
end_function
begin_function
DECL|function|writeCustom1File
specifier|static
name|bool
name|writeCustom1File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
specifier|const
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|out
operator|<<
name|quint32
argument_list|(
literal|0x01010101
argument_list|)
expr_stmt|;
name|out
operator|<<
name|map
expr_stmt|;
return|return
name|out
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
return|;
block|}
end_function
begin_function
DECL|function|readCustom2File
specifier|static
name|bool
name|readCustom2File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QDataStream
name|in
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|quint64
name|magic
decl_stmt|;
name|in
operator|>>
name|magic
expr_stmt|;
name|in
operator|>>
name|map
expr_stmt|;
return|return
operator|(
name|magic
operator|==
name|Q_UINT64_C
argument_list|(
literal|0x0202020202020202
argument_list|)
operator|&&
name|in
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
operator|)
return|;
block|}
end_function
begin_function
DECL|function|writeCustom2File
specifier|static
name|bool
name|writeCustom2File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
specifier|const
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|out
operator|<<
name|Q_UINT64_C
argument_list|(
literal|0x0202020202020202
argument_list|)
expr_stmt|;
name|out
operator|<<
name|map
expr_stmt|;
return|return
name|out
operator|.
name|status
argument_list|()
operator|==
name|QDataStream
operator|::
name|Ok
return|;
block|}
end_function
begin_function
DECL|function|readCustom3File
specifier|static
name|bool
name|readCustom3File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QTextStream
name|in
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
name|QString
name|tag
decl_stmt|;
name|in
operator|>>
name|tag
expr_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"OK"
condition|)
block|{
name|map
operator|.
name|insert
argument_list|(
literal|"retval"
argument_list|,
literal|"OK"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|writeCustom3File
specifier|static
name|bool
name|writeCustom3File
parameter_list|(
name|QIODevice
modifier|&
name|device
parameter_list|,
specifier|const
name|QSettings
operator|::
name|SettingsMap
modifier|&
name|map
parameter_list|)
block|{
name|QTextStream
name|out
argument_list|(
operator|&
name|device
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|value
argument_list|(
literal|"retval"
argument_list|)
operator|!=
literal|"OK"
condition|)
return|return
literal|false
return|;
name|out
operator|<<
literal|"OK"
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|populateWithFormats
specifier|static
name|void
name|populateWithFormats
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSettings
operator|::
name|Format
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NativeFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ini"
argument_list|)
operator|<<
name|QSettings
operator|::
name|IniFormat
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom1"
argument_list|)
operator|<<
name|QSettings
operator|::
name|CustomFormat1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom2"
argument_list|)
operator|<<
name|QSettings
operator|::
name|CustomFormat2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QSettings
operator|::
name|initTestCase
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_canWriteNativeSystemSettings
condition|)
name|qWarning
argument_list|(
literal|"The test is not running with administrative rights. Some tests will be skipped."
argument_list|)
expr_stmt|;
name|QSettings
operator|::
name|Format
name|custom1
init|=
name|QSettings
operator|::
name|registerFormat
argument_list|(
literal|"custom1"
argument_list|,
name|readCustom1File
argument_list|,
name|writeCustom1File
argument_list|)
decl_stmt|;
name|QSettings
operator|::
name|Format
name|custom2
init|=
name|QSettings
operator|::
name|registerFormat
argument_list|(
literal|"custom2"
argument_list|,
name|readCustom2File
argument_list|,
name|writeCustom2File
ifndef|#
directive|ifndef
name|QT_QSETTINGS_ALWAYS_CASE_SENSITIVE_AND_FORGET_ORIGINAL_KEY_ORDER
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
endif|#
directive|endif
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|custom1
operator|==
name|QSettings
operator|::
name|CustomFormat1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|custom2
operator|==
name|QSettings
operator|::
name|CustomFormat2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSettings
operator|::
name|init
parameter_list|()
block|{
name|QSettings
operator|::
name|setSystemIniPath
argument_list|(
name|settingsPath
argument_list|(
literal|"__system__"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
operator|::
name|setUserIniPath
argument_list|(
name|settingsPath
argument_list|(
literal|"__user__"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\software.org"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\other.software.org"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\foo"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\bar"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\bat"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER\\Software\\baz"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\software.org"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\other.software.org"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\foo"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\bar"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\bat"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE\\Software\\baz"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|QDir
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|removePath
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_NT_based
condition|)
name|system
argument_list|(
name|QString
argument_list|(
literal|"rmdir /Q /S %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|system
argument_list|(
name|QString
argument_list|(
literal|"deltree /Y %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
name|QSettings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"other.software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"other.software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"other.software.org"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"other.software.org"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|system
argument_list|(
name|QString
argument_list|(
literal|"chmod -R u+rw %1 2> /dev/null"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|system
argument_list|(
name|QString
argument_list|(
literal|"rm -fr %1 2> /dev/null"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFile
operator|::
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSettings
operator|::
name|cleanup
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Test the constructors and the assignment operator. */
end_comment
begin_function
DECL|function|ctor_data
name|void
name|tst_QSettings
operator|::
name|ctor_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ctor
name|void
name|tst_QSettings
operator|::
name|ctor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_canWriteNativeSystemSettings
operator|&&
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
name|QSKIP
argument_list|(
name|insufficientPermissionSkipMessage
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QSettings
name|settings3
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings4
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QSettings
name|settings5
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings6
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QSettings
name|settings7
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings8
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
comment|// test QSettings::format() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings4
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
comment|// test QSettings::scope() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|SystemScope
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings4
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|SystemScope
argument_list|)
expr_stmt|;
comment|// test QSettings::organizationName() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|organizationName
argument_list|()
operator|==
literal|"software.org"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|organizationName
argument_list|()
operator|==
literal|"software.org"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|organizationName
argument_list|()
operator|==
literal|"software.org"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings4
operator|.
name|organizationName
argument_list|()
operator|==
literal|"software.org"
argument_list|)
expr_stmt|;
comment|// test QSettings::applicationName() while we're at it
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|applicationName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"KillerAPP"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|applicationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|applicationName
argument_list|()
operator|==
literal|"KillerAPP"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings4
operator|.
name|applicationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
comment|/*             Go forwards.         */
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*             Test the copies.         */
name|QCOMPARE
argument_list|(
name|settings5
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings6
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings7
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings8
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*             Go backwards.         */
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"bilboh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bilboh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"catha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bilboh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"catha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"quirko"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bilboh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"catha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quirko"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
comment|/*             No fallback mechanism and a single scope on Blackberry OS         */
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings3
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/*             Test the copies again.         */
name|QCOMPARE
argument_list|(
name|settings5
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings6
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings7
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings8
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*             "General" is a problem key for .ini files.         */
name|settings1
operator|.
name|setValue
argument_list|(
literal|"General"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"%General"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"General/alpha"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"%General/alpha"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/General"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/%General"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"General/General"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"General/%General"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"%General/General"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"%General/%General"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
block|{
comment|/*             Test that the data was stored on disk after all instances             of QSettings are destroyed.         */
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QSettings
name|settings3
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings4
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bilboh"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"catha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"quirko"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/*             Test problem keys.         */
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"%General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"General/alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"%General/alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/%General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"General/General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"General/%General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"%General/General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"%General/%General"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|/*             Test that the organization and product parameters are             case-insensitive on case-insensitive file systems.         */
name|QSettings
name|settings5
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"SoftWare.ORG"
argument_list|,
literal|"killerApp"
argument_list|)
decl_stmt|;
name|bool
name|caseSensitive
init|=
literal|true
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
comment|// more details in QMacSettingsPrivate::QMacSettingsPrivate(), organization was comify()-ed
name|caseSensitive
operator|=
name|settings5
operator|.
name|fileName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"SoftWare.ORG"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|caseSensitive
operator|=
name|pathconf
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|_PC_CASE_SENSITIVE
argument_list|)
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
name|caseSensitive
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|caseSensitive
condition|)
name|QVERIFY
argument_list|(
operator|!
name|settings5
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|settings5
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings1
argument_list|(
name|settingsPath
argument_list|(
literal|"custom/custom.conf"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"alpha/beta"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QSettings
name|settings2
argument_list|(
name|settingsPath
argument_list|(
literal|"custom/custom.conf"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// test QSettings::scope() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
comment|// test QSettings::organizationName() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|organizationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// test QSettings::applicationName() while we're at it
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|organizationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QSettings
name|settings3
argument_list|(
name|settingsPath
argument_list|(
literal|"custom/custom2.conf"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings3
operator|.
name|beginGroup
argument_list|(
literal|"doodley/beta"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings1
argument_list|(
name|settingsPath
argument_list|(
literal|"custom/custom.conf"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
block|{
comment|// QSettings's default constructor is native by default
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setOrganizationName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setApplicationName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QSettings
name|settings
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"native"
argument_list|,
literal|"Default settings on Mac are valid, despite organization domain, name, and app name being null"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setOrganizationName
argument_list|(
literal|"software.org"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setApplicationName
argument_list|(
literal|"KillerAPP"
argument_list|)
expr_stmt|;
name|QSettings
name|settings2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QSettings
name|settings3
argument_list|(
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|fileName
argument_list|()
argument_list|,
name|settings3
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setOrganizationName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|setApplicationName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QEXPECT_FAIL
argument_list|(
literal|"native"
argument_list|,
literal|"Default settings on Mac are valid, despite organization domain, name, and app name being null"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|QSettings
name|settings2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// test QSettings::format() while we're at it
name|QVERIFY
argument_list|(
name|settings
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|format
argument_list|()
operator|==
name|format
argument_list|)
expr_stmt|;
comment|// test QSettings::scope() while we're at it
name|QVERIFY
argument_list|(
name|settings
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|scope
argument_list|()
operator|==
name|QSettings
operator|::
name|UserScope
argument_list|)
expr_stmt|;
comment|// test QSettings::organizationName() while we're at it
name|QVERIFY
argument_list|(
name|settings
operator|.
name|organizationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|organizationName
argument_list|()
operator|==
literal|"software.org"
argument_list|)
expr_stmt|;
comment|// test QSettings::applicationName() while we're at it
name|QVERIFY
argument_list|(
name|settings
operator|.
name|applicationName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|applicationName
argument_list|()
operator|==
literal|"KillerAPP"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testByteArray_data
name|void
name|tst_QSettings
operator|::
name|testByteArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QByteArray
name|bytes
argument_list|(
literal|"Hello world!"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin1"
argument_list|)
operator|<<
name|bytes
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
name|QTest
operator|::
name|newRow
argument_list|(
literal|"compressed"
argument_list|)
operator|<<
name|qCompress
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with \\0"
argument_list|)
operator|<<
name|bytes
operator|+
literal|'\0'
operator|+
name|bytes
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testByteArray
name|void
name|tst_QSettings
operator|::
name|testByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// write
block|{
name|QSettings
name|settings
argument_list|(
literal|"QtProject"
argument_list|,
literal|"tst_qsettings"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"byteArray"
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
comment|// read
block|{
name|QSettings
name|settings
argument_list|(
literal|"QtProject"
argument_list|,
literal|"tst_qsettings"
argument_list|)
decl_stmt|;
name|QByteArray
name|ret
init|=
name|settings
operator|.
name|value
argument_list|(
literal|"byteArray"
argument_list|,
name|data
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testErrorHandling_data
name|void
name|tst_QSettings
operator|::
name|testErrorHandling_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"filePerms"
argument_list|)
expr_stmt|;
comment|// -1 means file should not exist
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"dirPerms"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusAfterCtor"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"shouldBeEmpty"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusAfterGet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusAfterSetAndSync"
argument_list|)
expr_stmt|;
comment|//                         file    dir     afterCtor                      empty     afterGet                      afterSetAndSync
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0600 0700"
argument_list|)
operator|<<
literal|0600
operator|<<
literal|0700
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|false
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0400 0700"
argument_list|)
operator|<<
literal|0400
operator|<<
literal|0700
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|false
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0200 0700"
argument_list|)
operator|<<
literal|0200
operator|<<
literal|0700
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  -1 0700"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0700
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  -1 0000"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0000
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  -1 0100"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0100
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0600 0100"
argument_list|)
operator|<<
literal|0600
operator|<<
literal|0100
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|false
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  -1 0300"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0300
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0600 0300"
argument_list|)
operator|<<
literal|0600
operator|<<
literal|0300
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|false
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"  -1 0500"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0500
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|true
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|AccessError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0600 0500"
argument_list|)
operator|<<
literal|0600
operator|<<
literal|0500
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
literal|false
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
operator|<<
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testErrorHandling
name|void
name|tst_QSettings
operator|::
name|testErrorHandling
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QSKIP
argument_list|(
literal|"Windows doesn't support most file modes, including read-only directories, so this test is moot."
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
comment|// VxWorks does not have users/groups
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
endif|#
directive|endif
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't work, since file perms do not bother him"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|int
argument_list|,
name|filePerms
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|dirPerms
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusAfterCtor
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|shouldBeEmpty
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusAfterGet
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusAfterSetAndSync
argument_list|)
expr_stmt|;
name|system
argument_list|(
name|QString
argument_list|(
literal|"chmod 700 %1 2>/dev/null"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|system
argument_list|(
name|QString
argument_list|(
literal|"chmod -R u+rwx %1 2>/dev/null"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|system
argument_list|(
name|QString
argument_list|(
literal|"rm -fr %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
comment|// prepare a file with some settings
if|if
condition|(
name|filePerms
operator|!=
operator|-
literal|1
condition|)
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.ini"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"alpha/beta"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|system
argument_list|(
name|QString
argument_list|(
literal|"mkdir -p %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filePerms
operator|!=
operator|-
literal|1
condition|)
block|{
name|system
argument_list|(
name|QString
argument_list|(
literal|"chmod %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|filePerms
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.ini"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|system
argument_list|(
name|QString
argument_list|(
literal|"chmod %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|dirPerms
argument_list|,
literal|8
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
comment|// the test
block|{
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.ini"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|statusAfterCtor
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldBeEmpty
condition|)
block|{
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|statusAfterGet
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|statusAfterGet
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|statusAfterSetAndSync
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// !Q_OS_WIN
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSettings::Status
argument_list|)
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testIniParsing_data
name|void
name|tst_QSettings
operator|::
name|testIniParsing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"inicontent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"expect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSettings
operator|::
name|Status
argument_list|>
argument_list|(
literal|"status"
argument_list|)
expr_stmt|;
comment|// Test "forgiving" parsing of entries not terminated with newline or unterminated strings
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\n"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|12
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\r2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|12
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n\r2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|12
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\r\n2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|12
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"good6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v  \t = \t 1\\\r\n2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|12
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QSettings
operator|::
name|FormatError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=str"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=\"str\""
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=\"str"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=\\"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|""
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"u=s\nv=\"str"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=\"str\nw=ok"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str\nw=ok"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v="
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|""
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=\"str\njnk"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"str\njnk"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm10"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm11"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\r"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm12"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n\r"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm13"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\r\n"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n\nx=2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\r\rx=2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm16"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=1\\\n\n\nx=2"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm17"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"; foo\nv=1"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm18"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"; foo\n\nv=1"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm19"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\nv=1;foo"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm20"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=x "
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonterm21"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"v=x ;"
argument_list|)
operator|<<
literal|"v"
operator|<<
name|QVariant
argument_list|(
literal|"x"
argument_list|)
operator|<<
name|QSettings
operator|::
name|NoError
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testIniParsing
name|void
name|tst_QSettings
operator|::
name|testIniParsing
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QSettings
operator|::
name|Status
argument_list|>
argument_list|(
literal|"QSettings::Status"
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|dir
operator|.
name|path
argument_list|()
operator|+
literal|"/someDir/someSettings.ini"
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|inicontent
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|expect
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Status
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|inicontent
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.ini"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
condition|)
block|{
comment|// else no point proceeding
name|QVariant
name|v
init|=
name|settings
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|canConvert
argument_list|(
name|expect
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check some types so as to give prettier error messages
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|String
condition|)
block|{
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|,
name|expect
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
block|{
name|QCOMPARE
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
name|expect
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|v
argument_list|,
name|expect
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*     Tests beginGroup(), endGroup(), and group(). */
end_comment
begin_function
DECL|function|beginGroup
name|void
name|tst_QSettings
operator|::
name|beginGroup
parameter_list|()
block|{
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
comment|/*       Let's start with some back and forthing.     */
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"///gamma//"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/geometry///"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"/geometry///"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|/*       OK, now start for real.     */
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QSettings
name|settings3
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings3
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/beta///"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|beginGroup
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"geometry"
argument_list|,
literal|8888
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8888
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/gamma/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8888
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
comment|// endGroup() should do nothing if group() is empty
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::endGroup: No matching beginGroup()"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/gamma/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8888
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|66
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/gamma/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8888
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"delta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"////"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"////omega///epsilon zeta eta  theta/ / /"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta/omega/epsilon zeta eta  theta/ / "
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests setValue() and getXxx(). */
end_comment
begin_function
DECL|function|setValue
name|void
name|tst_QSettings
operator|::
name|setValue
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|0x7fffffff
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|0x7fffffff
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
operator|(
name|int
operator|)
literal|0x7fffffff
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|0x80000000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|0x80000000
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|,
literal|123
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|12345
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|12345
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"no such key"
argument_list|,
literal|1234
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|1234
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"no such key"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
operator|(
name|int
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QString
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QString
argument_list|(
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|,
literal|true
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// The following block should not compile.
comment|/*     settings.setValue("key 2", "true");     QCOMPARE(settings.value("key 2").toBool(), true);     settings.setValue("key 2", "false");     QCOMPARE(settings.value("key 2", true).toBool(), false);     settings.setValue("key 2", "");     QCOMPARE(settings.value("key 2", true).toBool(), true);     settings.setValue("key 2", "");     QCOMPARE(settings.value("key 2", false).toBool(), false);     settings.setValue("key 2", "0.000e-00"); // cannot convert double to a bool     QCOMPARE(settings.value("key 2", true).toBool(), true);     settings.setValue("key 2", "0.000e-00");     QCOMPARE(settings.value("key 2", false).toBool(), false); */
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QStringList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|"a"
operator|<<
literal|""
operator|<<
literal|"bc"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|""
operator|<<
literal|"a"
operator|<<
literal|""
operator|<<
literal|"bc"
operator|<<
literal|""
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QVariant
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|outerList
decl_stmt|;
name|outerList
operator|<<
literal|1
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|innerList
init|=
name|outerList
decl_stmt|;
name|outerList
operator|.
name|append
argument_list|(
name|QVariant
argument_list|(
name|innerList
argument_list|)
argument_list|)
expr_stmt|;
name|outerList
operator|.
name|append
argument_list|(
name|QVariant
argument_list|(
name|innerList
argument_list|)
argument_list|)
expr_stmt|;
name|outerList
operator|<<
literal|2
operator|<<
name|QString
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|innerList
operator|=
name|outerList
expr_stmt|;
name|outerList
operator|.
name|append
argument_list|(
name|QVariant
argument_list|(
name|innerList
argument_list|)
argument_list|)
expr_stmt|;
comment|// outerList: [1, "b", [1, "b"], [1, "b"], 2, "c", [1, "b", [1, "b"], [1, "b"], 2, "c"]]
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
name|outerList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|outerList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|map
decl_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"1"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"2"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"3"
argument_list|,
name|outerList
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"5"
argument_list|,
literal|"cinco"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|"10"
argument_list|,
literal|"zehn"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 4"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 4"
argument_list|)
operator|.
name|toMap
argument_list|()
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testVariantTypes_data
name|void
name|tst_QSettings
operator|::
name|testVariantTypes_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testVariantTypes
name|void
name|tst_QSettings
operator|::
name|testVariantTypes
parameter_list|()
block|{
DECL|macro|testVal
define|#
directive|define
name|testVal
parameter_list|(
name|key
parameter_list|,
name|val
parameter_list|,
name|tp
parameter_list|,
name|rtype
parameter_list|)
define|\
value|{ \         QSettings settings1(format, QSettings::UserScope, "software.org", "KillerAPP"); \         settings1.setValue(key, QVariant::fromValue(val)); \     } \     QConfFile::clearCache(); \     { \         QSettings settings2(format, QSettings::UserScope, "software.org", "KillerAPP"); \         QVariant v = settings2.value(key); \         QVERIFY(qvariant_cast<tp>(v) == val); \         QVERIFY(v.type() == QVariant::rtype); \     }
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|TestVariantMap
typedef|;
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|TestVariantMap
name|m2
decl_stmt|;
name|m2
operator|.
name|insert
argument_list|(
literal|"ene"
argument_list|,
literal|"due"
argument_list|)
expr_stmt|;
name|m2
operator|.
name|insert
argument_list|(
literal|"rike"
argument_list|,
literal|"fake"
argument_list|)
expr_stmt|;
name|m2
operator|.
name|insert
argument_list|(
literal|"borba"
argument_list|,
literal|"dorba"
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key2"
argument_list|,
name|m2
argument_list|,
name|TestVariantMap
argument_list|,
name|Map
argument_list|)
expr_stmt|;
name|QStringList
name|l2
decl_stmt|;
name|l2
operator|<<
literal|"ene"
operator|<<
literal|"due"
operator|<<
literal|"@Point(1 2)"
operator|<<
literal|"@fake"
expr_stmt|;
name|testVal
argument_list|(
literal|"key3"
argument_list|,
name|l2
argument_list|,
name|QStringList
argument_list|,
name|StringList
argument_list|)
expr_stmt|;
name|l2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|l2
operator|<<
literal|"ene"
operator|<<
literal|"due"
operator|<<
literal|"rike"
operator|<<
literal|"fake"
expr_stmt|;
name|testVal
argument_list|(
literal|"key3"
argument_list|,
name|l2
argument_list|,
name|QStringList
argument_list|,
name|StringList
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|l3
decl_stmt|;
name|QDate
name|date
init|=
name|QDate
operator|::
name|currentDate
argument_list|()
decl_stmt|;
name|QTime
name|time
init|=
name|QTime
operator|::
name|currentTime
argument_list|()
decl_stmt|;
name|l3
operator|<<
name|QString
argument_list|(
literal|"ene"
argument_list|)
operator|<<
literal|10
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|4
argument_list|,
literal|56
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|date
operator|<<
name|time
expr_stmt|;
name|testVal
argument_list|(
literal|"key3"
argument_list|,
name|l3
argument_list|,
name|QVariantList
argument_list|,
name|List
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key4"
argument_list|,
name|QString
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|QString
argument_list|,
name|String
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key5"
argument_list|,
name|QColor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QColor
argument_list|,
name|Color
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key6"
argument_list|,
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QRect
argument_list|,
name|Rect
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key7"
argument_list|,
name|QSize
argument_list|(
literal|4
argument_list|,
literal|56
argument_list|)
argument_list|,
name|QSize
argument_list|,
name|Size
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key8"
argument_list|,
name|QPoint
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QPoint
argument_list|,
name|Point
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key10"
argument_list|,
name|date
argument_list|,
name|QDate
argument_list|,
name|Date
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key11"
argument_list|,
name|time
argument_list|,
name|QTime
argument_list|,
name|Time
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key12"
argument_list|,
name|QByteArray
argument_list|(
literal|"foo bar"
argument_list|)
argument_list|,
name|QByteArray
argument_list|,
name|ByteArray
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"key99"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key99"
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key99"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"key99"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key99"
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key99"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"key99"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key99"
argument_list|)
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key99"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"key99"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key99"
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|remove
argument_list|(
literal|"key99"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"key99"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key99"
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|QVariant
argument_list|>
name|l4
decl_stmt|;
name|l4
operator|<<
name|QVariant
argument_list|(
name|m2
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|l2
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|l3
argument_list|)
expr_stmt|;
name|testVal
argument_list|(
literal|"key13"
argument_list|,
name|l4
argument_list|,
name|QVariantList
argument_list|,
name|List
argument_list|)
expr_stmt|;
comment|// We store key sequences as strings instead of binary variant blob, for improved
comment|// readability in the resulting format.
if|if
condition|(
name|format
operator|>=
name|QSettings
operator|::
name|InvalidFormat
condition|)
block|{
name|testVal
argument_list|(
literal|"keysequence"
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_F1
argument_list|)
argument_list|,
name|QKeySequence
argument_list|,
name|KeySequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testVal
argument_list|(
literal|"keysequence"
argument_list|,
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_F1
argument_list|)
argument_list|,
name|QString
argument_list|,
name|String
argument_list|)
expr_stmt|;
block|}
DECL|macro|testVal
undef|#
directive|undef
name|testVal
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|remove
name|void
name|tst_QSettings
operator|::
name|remove
parameter_list|()
block|{
name|QSettings
name|settings0
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|int
name|initialNumKeys
init|=
name|settings0
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|,
literal|"123"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|,
literal|"456"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"456"
argument_list|)
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"bubloo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bubloo"
argument_list|)
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"key 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bubloo"
argument_list|)
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|,
literal|"789"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"789"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*       Make sure that removing a key removes all the subkeys.     */
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|999
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
literal|777
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|111
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|222
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|333
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|444
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|444
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|6
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|beginGroup
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|1
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|beginGroup
argument_list|(
literal|"alpha/beta"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|1
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings0
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
argument_list|)
expr_stmt|;
comment|/*       Do it again, but this time let's use setGroup().     */
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|beginGroup
argument_list|(
literal|"foo/bar/baz/doesn't"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|beginGroup
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|999
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|999
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|remove
argument_list|(
literal|"alpha/beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
literal|777
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|777
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|111
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|222
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|222
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|333
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|444
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|444
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings0
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings0
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|888
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|888
argument_list|)
expr_stmt|;
comment|/*       OK, now let's check what happens if settings are spread across       multiple files (user vs. global, product-specific vs.       company-wide).     */
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QSettings
argument_list|>
name|settings3
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QSettings
argument_list|>
name|settings4
decl_stmt|;
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|settings3
operator|.
name|reset
argument_list|(
operator|new
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|reset
argument_list|(
operator|new
name|QSettings
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
argument_list|)
expr_stmt|;
name|settings3
operator|->
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
name|settings4
operator|->
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"doodah"
argument_list|)
expr_stmt|;
block|}
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"whoa"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"gurgle"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gurgle"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|QCOMPARE
argument_list|(
name|settings3
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|QCOMPARE
argument_list|(
name|settings3
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|settings2
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings3
operator|->
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|->
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"doodah"
argument_list|)
argument_list|)
expr_stmt|;
name|settings4
operator|->
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings2
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings3
operator|->
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings4
operator|->
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|settings1
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"whoa"
argument_list|)
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|remove
argument_list|(
literal|"key 1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings2
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/*       Get ready for the next part of the test.     */
name|settings1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|settings2
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|settings3
operator|->
name|clear
argument_list|()
expr_stmt|;
name|settings4
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|settings2
operator|.
name|sync
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_canWriteNativeSystemSettings
condition|)
block|{
name|settings3
operator|->
name|sync
argument_list|()
expr_stmt|;
name|settings4
operator|->
name|sync
argument_list|()
expr_stmt|;
block|}
comment|/*       Check that recursive removes work correctly when some of the       keys are loaded from the file and others have been modified in       memory (corresponds to originalKeys vs. addedKeys in the       QSettingsFile code).     */
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests contains() and keys(). */
end_comment
begin_function
DECL|function|contains
name|void
name|tst_QSettings
operator|::
name|contains
parameter_list|()
block|{
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|int
name|initialNumKeys
init|=
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// 0 on all platforms but Mac OS X.
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter/ /"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"///alpha///beta///"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"///alpha///beta//geometry//"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/height/foo/bar/doesn't/exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"alpha/gamma/splitter/ "
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"////alpha/gamma/splitter// ////"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"/////beta///"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"/////beta//geometry//"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry/y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry/width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry/height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"beta/geometry/height/foo/bar/doesn't/exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"gamma/splitter"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"gamma/splitter/ "
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"////gamma/splitter// ////"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"beta/geometry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"width"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"height"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"height/foo/bar/doesn't/exist"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|keys
init|=
name|settings1
operator|.
name|allKeys
argument_list|()
decl_stmt|;
name|QStringList
name|expectedResult
init|=
name|QStringList
argument_list|()
operator|<<
literal|"x"
operator|<<
literal|"y"
operator|<<
literal|"width"
operator|<<
literal|"height"
decl_stmt|;
name|keys
operator|.
name|sort
argument_list|()
expr_stmt|;
name|expectedResult
operator|.
name|sort
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
name|QCOMPARE
argument_list|(
name|keys
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
operator|==
literal|"alpha"
argument_list|)
expr_stmt|;
name|keys
operator|=
name|settings1
operator|.
name|allKeys
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|expectedResult
operator|.
name|size
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|settings1
operator|.
name|allKeys
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|,
name|initialNumKeys
operator|+
literal|7
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sync
name|void
name|tst_QSettings
operator|::
name|sync
parameter_list|()
block|{
comment|/*         What we're trying to test here is the case where two         instances of the same application access the same preference         files. We want to make sure that the results are 'merged',         rather than having the last application overwrite settings         set by the first application (like in Qt 3).          This is only applicable to the INI format. The Windows         registry and Mac's CFPreferences API should take care of this         by themselves.     */
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// and it all goes into the file
name|QSettings
name|settings2
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"other.software.org"
argument_list|)
decl_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|sync
argument_list|()
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"moo/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|remove
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
expr_stmt|;
comment|// should do nothing
comment|// Now "some other app" will change other.software.org.ini
name|QString
name|userConfDir
init|=
name|settingsPath
argument_list|(
literal|"__user__"
argument_list|)
operator|+
name|QDir
operator|::
name|separator
argument_list|()
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|unlink
argument_list|(
operator|(
name|userConfDir
operator|+
literal|"other.software.org.ini"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|rename
argument_list|(
operator|(
name|userConfDir
operator|+
literal|"software.org.ini"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|(
name|userConfDir
operator|+
literal|"other.software.org.ini"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFile
operator|::
name|remove
argument_list|(
name|userConfDir
operator|+
literal|"other.software.org.ini"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|rename
argument_list|(
name|userConfDir
operator|+
literal|"software.org.ini"
argument_list|,
name|userConfDir
operator|+
literal|"other.software.org.ini"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|settings2
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// And voila, we should be merged
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings2
operator|.
name|contains
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|)
argument_list|)
expr_stmt|;
comment|//<----- removed by settings2
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|//<---- set by settings2
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"moo/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
comment|// Now, software.org.ini no longer exists, this is same as another app
comment|// clearing all settings.
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now "some other app" will change software.org.ini
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|rename
argument_list|(
operator|(
name|userConfDir
operator|+
literal|"other.software.org.ini"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|(
name|userConfDir
operator|+
literal|"software.org.ini"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/x"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/y"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/width"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/beta/geometry/height"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"moo/gamma/splitter"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|11
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFallbacksEnabled_data
name|void
name|tst_QSettings
operator|::
name|setFallbacksEnabled_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFallbacksEnabled
name|void
name|tst_QSettings
operator|::
name|setFallbacksEnabled
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_canWriteNativeSystemSettings
operator|&&
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
name|QSKIP
argument_list|(
name|insufficientPermissionSkipMessage
argument_list|)
expr_stmt|;
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QSettings
name|settings3
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings4
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|"delta"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 3"
argument_list|,
literal|"delta"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key 4"
argument_list|,
literal|"alpha"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 4"
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 4"
argument_list|,
literal|"delta"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"key 5"
argument_list|,
literal|"beta"
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setValue
argument_list|(
literal|"key 5"
argument_list|,
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
literal|"key 5"
argument_list|,
literal|"delta"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings4
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|settings3
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings2
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings3
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings4
operator|.
name|fallbacksEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|/*         Make sure that the QSettings objects can still access their         main associated file when fallbacks are turned off.     */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings4
operator|.
name|contains
argument_list|(
literal|"key 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings2
operator|.
name|contains
argument_list|(
literal|"key 3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 4"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 4"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 4"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings3
operator|.
name|contains
argument_list|(
literal|"key 4"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 5"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 5"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 5"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 5"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 5"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"key 5"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 2"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"beta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings3
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
literal|"key 3"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"delta"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testChildKeysAndGroups_data
name|void
name|tst_QSettings
operator|::
name|testChildKeysAndGroups_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testChildKeysAndGroups
name|void
name|tst_QSettings
operator|::
name|testChildKeysAndGroups
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry"
argument_list|,
operator|-
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/y"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/width"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/beta/geometry/height"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha/gamma/splitter"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"geometry"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"geometry"
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/geometry"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"height"
operator|<<
literal|"width"
operator|<<
literal|"x"
operator|<<
literal|"y"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/width"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|{
name|QSettings
name|settings2
argument_list|(
literal|"other.software.org"
argument_list|)
decl_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/foo/test1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/foo/test2"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/foo/test3"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/foo/test4"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/foo/test5"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/bar/test1"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/bar/test2"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/bar/test3"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/bar/test4"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"viewbar/bar/test5"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|beginGroup
argument_list|(
literal|"viewbar"
argument_list|)
expr_stmt|;
name|QStringList
name|l
init|=
name|settings2
operator|.
name|childGroups
argument_list|()
decl_stmt|;
name|settings2
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|l
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"bar"
operator|<<
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testUpdateRequestEvent
name|void
name|tst_QSettings
operator|::
name|testUpdateRequestEvent
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|settings1
argument_list|(
literal|"foo"
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|remove
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"key2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|NumIterations
specifier|const
name|int
name|NumIterations
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|NumThreads
specifier|const
name|int
name|NumThreads
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|numThreadSafetyFailures
name|int
name|numThreadSafetyFailures
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SettingsThread
class|class
name|SettingsThread
super|:
specifier|public
name|QThread
block|{
public|public:
name|void
name|run
parameter_list|()
function_decl|;
DECL|function|start
name|void
name|start
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|param
operator|=
name|n
expr_stmt|;
name|QThread
operator|::
name|start
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|param
name|int
name|param
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|run
name|void
name|SettingsThread
operator|::
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumIterations
condition|;
operator|++
name|i
control|)
block|{
name|QSettings
name|settings
argument_list|(
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|(
name|param
operator|*
name|NumIterations
operator|)
operator|+
name|i
argument_list|)
argument_list|,
name|param
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|status
argument_list|()
operator|!=
name|QSettings
operator|::
name|NoError
condition|)
block|{
name|QWARN
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Unexpected QSettings status %1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
name|settings
operator|.
name|status
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|numThreadSafetyFailures
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testThreadSafety
name|void
name|tst_QSettings
operator|::
name|testThreadSafety
parameter_list|()
block|{
name|SettingsThread
name|threads
index|[
name|NumThreads
index|]
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|numThreadSafetyFailures
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NumThreads
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NumThreads
condition|;
operator|++
name|i
control|)
name|threads
index|[
name|i
index|]
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NumThreads
condition|;
operator|++
name|i
control|)
block|{
name|int
name|param
init|=
name|i
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|NumIterations
condition|;
operator|++
name|j
control|)
block|{
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|(
name|param
operator|*
name|NumIterations
operator|)
operator|+
name|j
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|param
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|numThreadSafetyFailures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testNormalizedKey_data
name|void
name|tst_QSettings
operator|::
name|testNormalizedKey_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"inKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"outKey"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty1"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty2"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty3"
argument_list|)
operator|<<
literal|"//"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty4"
argument_list|)
operator|<<
literal|"///"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a1"
argument_list|)
operator|<<
literal|"a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a2"
argument_list|)
operator|<<
literal|"/a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a3"
argument_list|)
operator|<<
literal|"a/"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a4"
argument_list|)
operator|<<
literal|"//a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a5"
argument_list|)
operator|<<
literal|"a//"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a6"
argument_list|)
operator|<<
literal|"///a"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a7"
argument_list|)
operator|<<
literal|"a///"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a8"
argument_list|)
operator|<<
literal|"///a/"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a9"
argument_list|)
operator|<<
literal|"/a///"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab1"
argument_list|)
operator|<<
literal|"aaa/bbb"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab2"
argument_list|)
operator|<<
literal|"/aaa/bbb"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab3"
argument_list|)
operator|<<
literal|"aaa/bbb/"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab4"
argument_list|)
operator|<<
literal|"/aaa/bbb/"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab5"
argument_list|)
operator|<<
literal|"aaa///bbb"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab6"
argument_list|)
operator|<<
literal|"aaa///bbb/"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab7"
argument_list|)
operator|<<
literal|"/aaa///bbb/"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ab8"
argument_list|)
operator|<<
literal|"////aaa///bbb////"
operator|<<
literal|"aaa/bbb"
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testNormalizedKey
name|void
name|tst_QSettings
operator|::
name|testNormalizedKey
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|inKey
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|outKey
argument_list|)
expr_stmt|;
name|inKey
operator|.
name|detach
argument_list|()
expr_stmt|;
name|QString
name|result
init|=
name|QSettingsPrivate
operator|::
name|normalizedKey
argument_list|(
name|inKey
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|outKey
argument_list|)
expr_stmt|;
comment|/*         If the key is already normalized, we verify that outKey is         just a shallow copy of the input string. This is an important         optimization that shouldn't be removed accidentally.     */
if|if
condition|(
name|inKey
operator|==
name|outKey
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|result
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|result
operator|.
name|isDetached
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testEmptyData
name|void
name|tst_QSettings
operator|::
name|testEmptyData
parameter_list|()
block|{
name|QString
name|filename
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/empty.ini"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|nullString
decl_stmt|;
name|QString
name|emptyString
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QStringList
name|emptyList
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
name|QStringList
name|list2
decl_stmt|;
name|QVariantList
name|emptyVList
decl_stmt|;
name|QVariantList
name|vList
decl_stmt|,
name|vList2
decl_stmt|,
name|vList3
decl_stmt|;
name|list
operator|<<
name|emptyString
operator|<<
name|nullString
expr_stmt|;
name|list2
operator|<<
name|emptyString
expr_stmt|;
name|vList
operator|<<
name|emptyString
expr_stmt|;
name|vList2
operator|<<
name|emptyString
operator|<<
name|nullString
expr_stmt|;
name|vList3
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|filename
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"nullString"
argument_list|,
name|nullString
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyString"
argument_list|,
name|emptyString
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyList"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"list"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"list2"
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyVList"
argument_list|,
name|emptyVList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList"
argument_list|,
name|vList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList2"
argument_list|,
name|vList2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList3"
argument_list|,
name|vList3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings
argument_list|(
name|filename
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"nullString"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nullString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyString"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|emptyString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyList"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"list"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"list2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyVList"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|emptyVList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList2"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList3"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings
argument_list|(
literal|"QtProject"
argument_list|,
literal|"tst_qsettings"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"nullString"
argument_list|,
name|nullString
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyString"
argument_list|,
name|emptyString
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyList"
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"list"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"list2"
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"emptyVList"
argument_list|,
name|emptyVList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList"
argument_list|,
name|vList
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList2"
argument_list|,
name|vList2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"vList3"
argument_list|,
name|vList3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings
argument_list|(
literal|"QtProject"
argument_list|,
literal|"tst_qsettings"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"nullString"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nullString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyString"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|emptyString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyList"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|emptyList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"list"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"list2"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|list2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"emptyVList"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|emptyVList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList2"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"vList3"
argument_list|)
operator|.
name|toList
argument_list|()
argument_list|,
name|vList3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testResourceFiles
name|void
name|tst_QSettings
operator|::
name|testResourceFiles
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
literal|":/resourcefile.ini"
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"Field 1/Bottom"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|89
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/Bottom"
argument_list|,
literal|90
argument_list|)
expr_stmt|;
comment|// the next two lines check the statu quo; another behavior would be possible
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"Field 1/Bottom"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"Field 1/Bottom"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|90
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRegistryShortRootNames
name|void
name|tst_QSettings
operator|::
name|testRegistryShortRootNames
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QSKIP
argument_list|(
literal|"This test is specific to the Windows registry only."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|QSettings
argument_list|(
literal|"HKEY_CURRENT_USER"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
operator|==
name|QSettings
argument_list|(
literal|"HKCU"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSettings
argument_list|(
literal|"HKEY_LOCAL_MACHINE"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
operator|==
name|QSettings
argument_list|(
literal|"HKLM"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSettings
argument_list|(
literal|"HKEY_CLASSES_ROOT"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
operator|==
name|QSettings
argument_list|(
literal|"HKCR"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSettings
argument_list|(
literal|"HKEY_USERS"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
operator|==
name|QSettings
argument_list|(
literal|"HKU"
argument_list|,
name|QSettings
operator|::
name|NativeFormat
argument_list|)
operator|.
name|childGroups
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fromFile_data
name|void
name|tst_QSettings
operator|::
name|fromFile_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromFile
name|void
name|tst_QSettings
operator|::
name|fromFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
literal|"foo"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
name|path
operator|=
literal|"\\HKEY_CURRENT_USER\\Software\\foo"
expr_stmt|;
endif|#
directive|endif
name|QStringList
name|strList
init|=
name|QStringList
argument_list|()
operator|<<
literal|"hope"
operator|<<
literal|"destiny"
operator|<<
literal|"chastity"
decl_stmt|;
block|{
name|QSettings
name|settings1
argument_list|(
name|path
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"beta"
argument_list|,
name|strList
argument_list|)
expr_stmt|;
name|QSettings
name|settings2
argument_list|(
name|path
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"gamma/foo.bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"beta"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|strList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"beta"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|strList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"gamma/foo.bar"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"gamma/foo.bar"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings1
argument_list|(
name|path
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"alpha"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"beta"
argument_list|)
operator|.
name|toStringList
argument_list|()
argument_list|,
name|strList
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"gamma/foo.bar"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|setIniCodec
name|void
name|tst_QSettings
operator|::
name|setIniCodec
parameter_list|()
block|{
name|QByteArray
name|expeContents4
decl_stmt|,
name|expeContents5
decl_stmt|;
name|QByteArray
name|actualContents4
decl_stmt|,
name|actualContents5
decl_stmt|;
block|{
name|QFile
name|inFile
argument_list|(
literal|":/resourcefile4.ini"
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|expeContents4
operator|=
name|inFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|QFile
name|inFile
argument_list|(
literal|":/resourcefile5.ini"
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|expeContents5
operator|=
name|inFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|QSettings
name|settings4
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings4
operator|.
name|setIniCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"Fa\xe7"
literal|"ade/QU\xc9"
literal|"BEC"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Fa\xe7"
literal|"ade/QU\xc9"
literal|"BEC"
argument_list|)
argument_list|)
expr_stmt|;
name|settings4
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QSettings
name|settings5
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"other.software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings5
operator|.
name|setIniCodec
argument_list|(
literal|"ISO 8859-1"
argument_list|)
expr_stmt|;
name|settings5
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"Fa\xe7"
literal|"ade/QU\xc9"
literal|"BEC"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Fa\xe7"
literal|"ade/QU\xc9"
literal|"BEC"
argument_list|)
argument_list|)
expr_stmt|;
name|settings5
operator|.
name|sync
argument_list|()
expr_stmt|;
block|{
name|QFile
name|inFile
argument_list|(
name|settings4
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|actualContents4
operator|=
name|inFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|QFile
name|inFile
argument_list|(
name|settings5
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|actualContents5
operator|=
name|inFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QTBUG-25446"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|actualContents4
argument_list|,
name|expeContents4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualContents5
argument_list|,
name|expeContents5
argument_list|)
expr_stmt|;
name|QSettings
name|settings4
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings4
operator|.
name|setIniCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QSettings
name|settings5
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"other.software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings5
operator|.
name|setIniCodec
argument_list|(
literal|"Latin-1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings5
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|allKeys
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|settings5
operator|.
name|allKeys
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings4
operator|.
name|value
argument_list|(
name|settings4
operator|.
name|allKeys
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|settings5
operator|.
name|value
argument_list|(
name|settings5
operator|.
name|allKeys
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|containsSubList
specifier|static
name|bool
name|containsSubList
parameter_list|(
name|QStringList
name|mom
parameter_list|,
name|QStringList
name|son
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|son
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|mom
operator|.
name|contains
argument_list|(
name|son
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|testArrays_data
name|void
name|tst_QSettings
operator|::
name|testArrays_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests beginReadArray(), beginWriteArray(), endArray(), and     setArrayIndex(). */
end_comment
begin_function
DECL|function|testArrays
name|void
name|tst_QSettings
operator|::
name|testArrays
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|beginWriteArray
argument_list|(
literal|"foo/bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"bip"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"ene"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"due"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"rike"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"ene"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"due"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"rike"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"ene"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"due"
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"rike"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|QStringList
name|expectedList
decl_stmt|;
name|expectedList
operator|<<
literal|"foo/bar/bip"
operator|<<
literal|"foo/bar/size"
operator|<<
literal|"foo/bar/1/ene"
operator|<<
literal|"foo/bar/1/due"
operator|<<
literal|"foo/bar/1/rike"
operator|<<
literal|"foo/bar/2/ene"
operator|<<
literal|"foo/bar/2/due"
operator|<<
literal|"foo/bar/2/rike"
operator|<<
literal|"foo/bar/3/ene"
operator|<<
literal|"foo/bar/3/due"
operator|<<
literal|"foo/bar/3/rike"
expr_stmt|;
name|expectedList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|actualList
init|=
name|settings1
operator|.
name|allKeys
argument_list|()
decl_stmt|;
name|actualList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|containsSubList
argument_list|(
name|actualList
argument_list|,
name|expectedList
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/bip"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|settings1
operator|.
name|beginReadArray
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"bip"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
comment|/*         Check that we get the arrays right when we load them again     */
block|{
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QStringList
name|expectedList
decl_stmt|;
name|expectedList
operator|<<
literal|"foo/bar/bip"
operator|<<
literal|"foo/bar/size"
operator|<<
literal|"foo/bar/1/ene"
operator|<<
literal|"foo/bar/1/due"
operator|<<
literal|"foo/bar/1/rike"
operator|<<
literal|"foo/bar/2/ene"
operator|<<
literal|"foo/bar/2/due"
operator|<<
literal|"foo/bar/2/rike"
operator|<<
literal|"foo/bar/3/ene"
operator|<<
literal|"foo/bar/3/due"
operator|<<
literal|"foo/bar/3/rike"
expr_stmt|;
name|expectedList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|actualList
init|=
name|settings1
operator|.
name|allKeys
argument_list|()
decl_stmt|;
name|actualList
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|containsSubList
argument_list|(
name|actualList
argument_list|,
name|expectedList
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/bip"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/1/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/2/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"/foo/bar/3/rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|settings1
operator|.
name|beginReadArray
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"bip"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"ene"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"due"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"rike"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|allKeys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
block|}
comment|/*         This code generates lots of warnings, but that's on purpose.         Basically, we check that endGroup() can be used instead of         endArray() and vice versa. This is not documented, but this         is the behavior that we have chosen.     */
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::setArrayIndex: Missing beginArray()"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::setArrayIndex: Missing beginArray()"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::setArrayIndex: Missing beginArray()"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::setArrayIndex: Missing beginArray()"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::setArrayIndex: Missing beginArray()"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::endArray: Expected endGroup() instead"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::endGroup: Expected endArray() instead"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::endArray: Expected endGroup() instead"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSettings::endGroup: No matching beginGroup()"
argument_list|)
expr_stmt|;
name|QSettings
name|settings1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"/beta"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginWriteArray
argument_list|(
literal|"DO"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"size"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginGroup
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|beginWriteArray
argument_list|(
literal|"RE"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings1
operator|.
name|contains
argument_list|(
literal|"size"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1/RE"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1/RE/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1/RE/2"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2/1"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/2"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setArrayIndex
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta/DO/3"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha/beta"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|group
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*         Now, let's make sure that things work well if an array         is spread across multiple files.     */
name|int
name|i
decl_stmt|;
name|settings1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QSettings
name|settings2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|QStringList
name|threeStrings
decl_stmt|;
name|threeStrings
operator|<<
literal|"Uno"
operator|<<
literal|"Dos"
operator|<<
literal|"Tres"
expr_stmt|;
name|QStringList
name|fiveStrings
decl_stmt|;
name|fiveStrings
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
operator|<<
literal|"delta"
operator|<<
literal|"epsilon"
expr_stmt|;
name|settings1
operator|.
name|beginWriteArray
argument_list|(
literal|"strings"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|threeStrings
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|settings1
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"fileName"
argument_list|,
name|threeStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|settings2
operator|.
name|beginWriteArray
argument_list|(
literal|"strings"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|fiveStrings
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|settings2
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|settings2
operator|.
name|setValue
argument_list|(
literal|"fileName"
argument_list|,
name|fiveStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings2
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|int
name|size1
init|=
name|settings1
operator|.
name|beginReadArray
argument_list|(
literal|"strings"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"size"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size1
condition|;
operator|++
name|i
control|)
block|{
name|settings1
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|settings1
operator|.
name|value
argument_list|(
literal|"fileName"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|threeStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|int
name|size2
init|=
name|settings2
operator|.
name|beginReadArray
argument_list|(
literal|"strings"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|size2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|value
argument_list|(
literal|"size"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size2
condition|;
operator|++
name|i
control|)
block|{
name|settings2
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|settings2
operator|.
name|value
argument_list|(
literal|"fileName"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|fiveStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings2
operator|.
name|endArray
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|size1
operator|=
name|settings1
operator|.
name|beginReadArray
argument_list|(
literal|"strings"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|size1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// accessing entries beyond the end of settings1 goes to settings2
for|for
control|(
name|i
operator|=
name|size1
init|;
name|i
operator|<
name|size2
condition|;
operator|++
name|i
control|)
block|{
name|settings1
operator|.
name|setArrayIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|settings1
operator|.
name|value
argument_list|(
literal|"fileName"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|fiveStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|settings1
operator|.
name|endArray
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|iniEscapedKey
specifier|static
name|QByteArray
name|iniEscapedKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|QSettingsPrivate
operator|::
name|iniEscapedKey
argument_list|(
name|str
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iniUnescapedKey
specifier|static
name|QString
name|iniUnescapedKey
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QSettingsPrivate
operator|::
name|iniUnescapedKey
argument_list|(
name|ba
argument_list|,
literal|0
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iniEscapedStringList
specifier|static
name|QByteArray
name|iniEscapedStringList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|strList
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|QSettingsPrivate
operator|::
name|iniEscapedStringList
argument_list|(
name|strList
argument_list|,
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iniUnescapedStringList
specifier|static
name|QStringList
name|iniUnescapedStringList
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
name|QStringList
name|result
decl_stmt|;
name|QString
name|str
decl_stmt|;
if|#
directive|if
name|QSETTINGS_P_H_VERSION
operator|>=
literal|2
name|bool
name|isStringList
init|=
name|QSettingsPrivate
operator|::
name|iniUnescapedStringList
argument_list|(
name|ba
argument_list|,
literal|0
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|str
argument_list|,
name|result
if|#
directive|if
name|QSETTINGS_P_H_VERSION
operator|>=
literal|3
argument_list|,
literal|0
endif|#
directive|endif
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isStringList
condition|)
name|result
operator|=
name|QStringList
argument_list|(
name|str
argument_list|)
expr_stmt|;
else|#
directive|else
name|QStringList
modifier|*
name|strList
init|=
name|QSettingsPrivate
operator|::
name|iniUnescapedStringList
argument_list|(
name|ba
argument_list|,
literal|0
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|strList
condition|)
block|{
name|result
operator|=
operator|*
name|strList
expr_stmt|;
operator|delete
name|strList
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QStringList
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|escapeWeirdChars
name|QString
name|escapeWeirdChars
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|bool
name|escapeNextDigit
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QChar
name|c
init|=
name|s
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|unicode
argument_list|()
operator|<
literal|' '
operator|||
name|c
operator|.
name|unicode
argument_list|()
operator|>
literal|'~'
operator|||
operator|(
name|escapeNextDigit
operator|&&
name|c
operator|.
name|unicode
argument_list|()
operator|>=
literal|'0'
operator|&&
name|c
operator|.
name|unicode
argument_list|()
operator|<=
literal|'f'
operator|)
condition|)
block|{
name|result
operator|+=
name|QString
argument_list|(
literal|"\\x%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|c
operator|.
name|unicode
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|escapeNextDigit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|c
expr_stmt|;
name|escapeNextDigit
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|testEscapes
name|void
name|tst_QSettings
operator|::
name|testEscapes
parameter_list|()
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
DECL|macro|testEscapedKey
define|#
directive|define
name|testEscapedKey
parameter_list|(
name|plainKey
parameter_list|,
name|escKey
parameter_list|)
define|\
value|QCOMPARE(iniEscapedKey(plainKey), QByteArray(escKey)); \     QCOMPARE(iniUnescapedKey(escKey), QString(plainKey));
DECL|macro|testUnescapedKey
define|#
directive|define
name|testUnescapedKey
parameter_list|(
name|escKey
parameter_list|,
name|plainKey
parameter_list|,
name|reescKey
parameter_list|)
define|\
value|QCOMPARE(iniUnescapedKey(escKey), QString(plainKey)); \     QCOMPARE(iniEscapedKey(plainKey), QByteArray(reescKey)); \     QCOMPARE(iniUnescapedKey(reescKey), QString(plainKey));
DECL|macro|testEscapedStringList
define|#
directive|define
name|testEscapedStringList
parameter_list|(
name|plainStrList
parameter_list|,
name|escStrList
parameter_list|)
define|\
value|{ \         QStringList plainList(plainStrList); \         QByteArray escList(escStrList); \         QCOMPARE(iniEscapedStringList(plainList), escList); \         QCOMPARE(iniUnescapedStringList(escList), plainList); \     } \   #define testUnescapedStringList(escStrList, plainStrList, reescStrList) \     { \         QStringList plainList(plainStrList); \         QByteArray escList(escStrList); \         QByteArray reescList(reescStrList); \         QCOMPARE(iniUnescapedStringList(escList), plainList); \         QCOMPARE(iniEscapedStringList(plainList), reescList); \         QCOMPARE(iniUnescapedStringList(reescList), plainList); \     } \   #define testVariant(val, escStr, func) \     { \         QVariant v(val); \         QString s = QSettingsPrivate::variantToString(v); \         QCOMPARE(s, escStr); \         QCOMPARE(QVariant(QSettingsPrivate::stringToVariant(escStr)), v); \         QVERIFY((val) == v.func());                                     \     }
DECL|macro|testBadEscape
define|#
directive|define
name|testBadEscape
parameter_list|(
name|escStr
parameter_list|,
name|vStr
parameter_list|)
define|\
value|{ \         QVariant v = QSettingsPrivate::stringToVariant(QString(escStr)); \         QCOMPARE(v.toString(), QString(vStr)); \     }
name|testEscapedKey
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEscapedKey
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
name|testEscapedKey
argument_list|(
literal|" 0123 abcd "
argument_list|,
literal|"%200123%20abcd%20"
argument_list|)
expr_stmt|;
name|testEscapedKey
argument_list|(
literal|"~!@#$%^&*()_+.-/\\="
argument_list|,
literal|"%7E%21%40%23%24%25%5E%26%2A%28%29_%2B.-\\%5C%3D"
argument_list|)
expr_stmt|;
name|testEscapedKey
argument_list|(
name|QString
argument_list|()
operator|+
name|QChar
argument_list|(
literal|0xabcd
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x1234
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x0081
argument_list|)
argument_list|,
literal|"%UABCD%U1234%81"
argument_list|)
expr_stmt|;
name|testEscapedKey
argument_list|(
name|QString
argument_list|()
operator|+
name|QChar
argument_list|(
literal|0xFE
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xFF
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x100
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x101
argument_list|)
argument_list|,
literal|"%FE%FF%U0100%U0101"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"%20"
argument_list|,
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"/alpha/beta"
argument_list|,
literal|"/alpha/beta"
argument_list|,
literal|"\\alpha\\beta"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"\\alpha\\beta"
argument_list|,
literal|"/alpha/beta"
argument_list|,
literal|"\\alpha\\beta"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"%5Calpha%5Cbeta"
argument_list|,
literal|"\\alpha\\beta"
argument_list|,
literal|"%5Calpha%5Cbeta"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"%"
argument_list|,
literal|"%"
argument_list|,
literal|"%25"
argument_list|)
expr_stmt|;
name|testUnescapedKey
argument_list|(
literal|"%f%!%%%%1x%x1%U%Uz%U123%U1234%1234%"
argument_list|,
name|QString
argument_list|(
literal|"%f%!%%%%1x%x1%U%Uz%U123"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x1234
argument_list|)
operator|+
literal|"\x12"
operator|+
literal|"34%"
argument_list|,
literal|"%25f%25%21%25%25%25%251x%25x1%25U%25Uz%25U123%U1234%1234%25"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|" "
argument_list|,
literal|"\" \""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|";"
argument_list|,
literal|"\";\""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|","
argument_list|,
literal|"\",\""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|"="
argument_list|,
literal|"\"=\""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|"abc-def"
argument_list|,
literal|"abc-def"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|,
literal|"\\0\\x30"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|"~!@#$%^&*()_+.-/\\="
argument_list|,
literal|"\"~!@#$%^&*()_+.-/\\\\=\""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
literal|"~!@#$%^&*()_+.-/\\"
argument_list|,
literal|"~!@#$%^&*()_+.-/\\\\"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
name|QString
argument_list|(
literal|"\x7F"
argument_list|)
operator|+
literal|"12aFz"
argument_list|,
literal|"\\x7f\\x31\\x32\\x61\\x46z"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
name|QString
argument_list|(
literal|"   \t\n\\n"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x123
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x4567
argument_list|)
argument_list|,
literal|"\"   \\t\\n\\\\n\\x123\\x4567\""
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
name|QString
argument_list|(
literal|"\a\b\f\n\r\t\v'\"?\001\002\x03\x04"
argument_list|)
argument_list|,
literal|"\\a\\b\\f\\n\\r\\t\\v'\\\"?\\x1\\x2\\x3\\x4"
argument_list|)
expr_stmt|;
name|testEscapedStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|","
operator|<<
literal|";"
operator|<<
literal|"a"
operator|<<
literal|"ab,  \tc, d "
argument_list|,
literal|"\",\", \";\", a, \"ab,  \\tc, d \""
argument_list|)
expr_stmt|;
comment|/*       Test .ini syntax that cannot be generated by QSettings (but can be entered by users).     */
name|testUnescapedStringList
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"\"\""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"\"abcdef\""
argument_list|,
literal|"abcdef"
argument_list|,
literal|"abcdef"
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"\"\\?\\'\\\"\""
argument_list|,
literal|"?'\""
argument_list|,
literal|"?'\\\""
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"\\0\\00\\000\\0000000\\1\\111\\11111\\x\\x0\\xABCDEFGH\\x0123456\\"
argument_list|,
name|QString
argument_list|()
operator|+
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QChar
argument_list|(
literal|1
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0111
argument_list|)
operator|+
name|QChar
argument_list|(
literal|011111
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xCDEF
argument_list|)
operator|+
literal|"GH"
operator|+
name|QChar
argument_list|(
literal|0x3456
argument_list|)
argument_list|,
literal|"\\0\\0\\0\\0\\x1I\\x1249\\0\\xcdefGH\\x3456"
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
name|QByteArray
argument_list|(
literal|"\\c\\d\\e\\f\\g\\$\\*\\\0"
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|"\f"
argument_list|,
literal|"\\f"
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"\"a\",  \t\"bc \", \"  d\" , \"ef  \" ,,g,   hi  i,,, ,"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"bc "
operator|<<
literal|"  d"
operator|<<
literal|"ef  "
operator|<<
literal|""
operator|<<
literal|"g"
operator|<<
literal|"hi  i"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
argument_list|,
literal|"a, \"bc \", \"  d\", \"ef  \", , g, hi  i, , , , "
argument_list|)
expr_stmt|;
name|testUnescapedStringList
argument_list|(
literal|"a ,  b   ,   c   d   , efg   "
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c   d"
operator|<<
literal|"efg"
argument_list|,
literal|"a, b, c   d, efg"
argument_list|)
expr_stmt|;
comment|// streaming qvariant into a string
name|testVariant
argument_list|(
name|QString
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QString
argument_list|(
literal|"Hello, World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Hello, World!"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QString
argument_list|(
literal|"@Hello World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@@Hello World!"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QString
argument_list|(
literal|"@@Hello World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@@@Hello World!"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QByteArray
argument_list|(
literal|"Hello World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@ByteArray(Hello World!)"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QByteArray
argument_list|(
literal|"@Hello World!"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@ByteArray(@Hello World!)"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QVariant
argument_list|(
literal|100
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"100"
argument_list|)
argument_list|,
name|toString
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"ene"
operator|<<
literal|"due"
operator|<<
literal|"rike"
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"@Variant(\x0\x0\x0\xb\x0\x0\x0\x3\x0\x0\x0\x6\x0\x65\x0n\x0\x65\x0\x0\x0\x6\x0\x64\x0u\x0\x65\x0\x0\x0\x8\x0r\x0i\x0k\x0\x65)"
argument_list|,
literal|50
argument_list|)
argument_list|,
name|toStringList
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@Rect(1 2 3 4)"
argument_list|)
argument_list|,
name|toRect
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QSize
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@Size(5 6)"
argument_list|)
argument_list|,
name|toSize
argument_list|)
expr_stmt|;
name|testVariant
argument_list|(
name|QPoint
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@Point(7 8)"
argument_list|)
argument_list|,
name|toPoint
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@"
argument_list|,
literal|"@"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@@"
argument_list|,
literal|"@"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@@@"
argument_list|,
literal|"@@"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|" "
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@Rect"
argument_list|,
literal|"@Rect"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@Rect("
argument_list|,
literal|"@Rect("
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@Rect()"
argument_list|,
literal|"@Rect()"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@Rect)"
argument_list|,
literal|"@Rect)"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@Rect(1 2 3)"
argument_list|,
literal|"@Rect(1 2 3)"
argument_list|)
expr_stmt|;
name|testBadEscape
argument_list|(
literal|"@@Rect(1 2 3)"
argument_list|,
literal|"@Rect(1 2 3)"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testCaseSensitivity_data
name|void
name|tst_QSettings
operator|::
name|testCaseSensitivity_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCaseSensitivity
name|void
name|tst_QSettings
operator|::
name|testCaseSensitivity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|2
condition|;
operator|++
name|pass
control|)
block|{
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"caseSensitivity"
argument_list|)
expr_stmt|;
name|bool
name|cs
init|=
literal|true
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_QSETTINGS_ALWAYS_CASE_SENSITIVE_AND_FORGET_ORIGINAL_KEY_ORDER
switch|switch
condition|(
name|format
condition|)
block|{
case|case
name|QSettings
operator|::
name|NativeFormat
case|:
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|cs
operator|=
literal|true
expr_stmt|;
else|#
directive|else
name|cs
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QSettings
operator|::
name|IniFormat
case|:
name|cs
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|QSettings
operator|::
name|CustomFormat1
case|:
name|cs
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|QSettings
operator|::
name|CustomFormat2
case|:
name|cs
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|pass
operator|==
literal|0
condition|)
block|{
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"KEY 1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"key 2"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"KEY 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"KEY 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/*            QVERIFY(settings.allKeys().contains("/KEY 1"));             QVERIFY(settings.allKeys().contains("/key 2")); */
if|if
condition|(
name|cs
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"kEy 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"kEy 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"kEy 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|settings
operator|.
name|remove
argument_list|(
literal|"KeY 1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cs
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"KeY 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|contains
argument_list|(
literal|"KEY 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"key 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"KEY 1"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"KeY 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"key 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|contains
argument_list|(
literal|"KEY 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|setValue
argument_list|(
literal|"KEY 1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_comment
comment|// Please write a fileName() test for the other platforms
end_comment
begin_function
DECL|function|fileName
name|void
name|tst_QSettings
operator|::
name|fileName
parameter_list|()
block|{
name|QSettings
name|s1
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"Apple"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QSettings
name|s2
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"Apple"
argument_list|)
decl_stmt|;
name|QSettings
name|s3
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"Apple"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QSettings
name|s4
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"Apple"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|fileName
argument_list|()
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|fileName
argument_list|()
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
literal|"/Library/Preferences/com.apple.plist"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s5
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"Apple.com"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s5
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s6
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.com"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s6
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s7
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.Com"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s7
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s8
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.fr"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s8
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/fr.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s9
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.co.jp"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s9
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/jp.co.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s10
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.org"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s10
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/org.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s11
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.net"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s11
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/net.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s12
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.museum"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s12
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/museum.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s13
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.FR"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s13
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/fr.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s14
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.mUseum"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s14
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/museum.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s15
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.zz"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s15
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/zz.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s15_prime
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.foo"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s15_prime
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple-foo.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s16
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple.f"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s16
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple-f.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s17
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"apple."
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s17
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.apple.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s18
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"Foo, Inc."
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s18
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.foo-inc.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s19
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"Foo, Inc.com"
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s19
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.foo, inc.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s20
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"   "
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xbd
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"Foo//:/Barxxx  Baz!()#@.com"
argument_list|)
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s20
operator|.
name|fileName
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/Library/Preferences/com.   "
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xbd
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"foo  : barxxx  baz!()#@.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
name|QSettings
name|s21
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"   "
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0xbd
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"Foo//:/Bar,,,  Baz!()#"
argument_list|)
argument_list|,
literal|"Console"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s21
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"/Library/Preferences/com.foo-bar-baz.Console.plist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|isWritable_data
name|void
name|tst_QSettings
operator|::
name|isWritable_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isWritable
name|void
name|tst_QSettings
operator|::
name|isWritable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|s1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|s1
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|s1
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// that should create the file
block|}
block|{
name|QSettings
name|s1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|s1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|s1
operator|.
name|setValue
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|s1
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// that should create the file, *if* we have the permissions
block|}
block|{
name|QSettings
name|s1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|s2
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"Something Different"
argument_list|)
decl_stmt|;
name|QSettings
name|s3
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"foo.org"
argument_list|,
literal|"Something Different"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|contains
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MACX
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|macVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|MV_10_9
condition|)
block|{
name|QVERIFY
argument_list|(
name|s1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|s2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s3
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|s2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s3
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|QSysInfo
operator|::
name|macVersion
argument_list|()
operator|>=
name|QSysInfo
operator|::
name|MV_10_7
operator|&&
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|s1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s3
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QVERIFY
argument_list|(
name|s1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s3
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|s1
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s2
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s3
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|childGroups_data
name|void
name|tst_QSettings
operator|::
name|childGroups_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|childGroups
name|void
name|tst_QSettings
operator|::
name|childGroups
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
specifier|const
name|QSettings
operator|::
name|Scope
name|scope
init|=
name|m_canWriteNativeSystemSettings
condition|?
name|QSettings
operator|::
name|SystemScope
else|:
name|QSettings
operator|::
name|UserScope
decl_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/a"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/b"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/c"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"beta"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/d"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/d/e"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/f/g"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"omicron/h/i/j/x"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"omicron/h/i/k/y"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"zeta/z"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|3
condition|;
operator|++
name|pass
control|)
block|{
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|pass
operator|==
literal|1
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma/d"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pass
operator|==
literal|2
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"f"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"/omicron///h/i///"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"j"
operator|<<
literal|"k"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"////"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"gamma"
operator|<<
literal|"omicron"
operator|<<
literal|"zeta"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childGroups
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"gamma"
operator|<<
literal|"omicron"
operator|<<
literal|"zeta"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|childKeys_data
name|void
name|tst_QSettings
operator|::
name|childKeys_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|childKeys
name|void
name|tst_QSettings
operator|::
name|childKeys
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
specifier|const
name|QSettings
operator|::
name|Scope
name|scope
init|=
name|m_canWriteNativeSystemSettings
condition|?
name|QSettings
operator|::
name|SystemScope
else|:
name|QSettings
operator|::
name|UserScope
decl_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/a"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/b"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"alpha/c"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"beta"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/d"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/d/e"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"gamma/f/g"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"omicron/h/i/j/x"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"omicron/h/i/k/y"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"zeta/z"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|3
condition|;
operator|++
name|pass
control|)
block|{
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|pass
operator|==
literal|1
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma/d"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pass
operator|==
literal|2
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"d"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"e"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"/omicron///h/i///"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"////"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|childKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|allKeys_data
name|void
name|tst_QSettings
operator|::
name|allKeys_data
parameter_list|()
block|{
name|populateWithFormats
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|allKeys
name|void
name|tst_QSettings
operator|::
name|allKeys
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QStringList
name|allKeys
decl_stmt|;
name|allKeys
operator|<<
literal|"alpha"
operator|<<
literal|"alpha/a"
operator|<<
literal|"alpha/b"
operator|<<
literal|"alpha/c"
operator|<<
literal|"beta"
operator|<<
literal|"gamma"
operator|<<
literal|"gamma/d"
operator|<<
literal|"gamma/d/e"
operator|<<
literal|"gamma/f/g"
operator|<<
literal|"omicron/h/i/j/x"
operator|<<
literal|"omicron/h/i/k/y"
operator|<<
literal|"zeta/z"
expr_stmt|;
specifier|const
name|QSettings
operator|::
name|Scope
name|scope
init|=
name|m_canWriteNativeSystemSettings
condition|?
name|QSettings
operator|::
name|SystemScope
else|:
name|QSettings
operator|::
name|UserScope
decl_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|settings
operator|.
name|setValue
argument_list|(
name|allKeys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|pass
init|=
literal|0
init|;
name|pass
operator|<
literal|3
condition|;
operator|++
name|pass
control|)
block|{
name|QConfFile
operator|::
name|clearCache
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|format
argument_list|,
name|scope
argument_list|,
literal|"software.org"
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setFallbacksEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|pass
operator|==
literal|1
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma/d"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pass
operator|==
literal|2
condition|)
block|{
name|settings
operator|.
name|value
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
block|}
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"gamma"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"d/e"
operator|<<
literal|"f/g"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"e"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"alpha"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"/omicron///h/i///"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"j/x"
operator|<<
literal|"k/y"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
literal|"////"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|allKeys
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|allKeys
argument_list|()
argument_list|,
name|allKeys
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|registerFormat
name|void
name|tst_QSettings
operator|::
name|registerFormat
parameter_list|()
block|{
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|QSettings
operator|::
name|CustomFormat1
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QString
name|fileName
init|=
name|settings1
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|fileName
operator|.
name|chop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// "ini";
name|fileName
operator|.
name|append
argument_list|(
literal|"custom1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings2
operator|.
name|fileName
argument_list|()
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
comment|// OK, let's see if it can read a generated file of a custom type
comment|// Beware: readCustom3File() and writeCustom3File() have unintuitive behavior
comment|// so we can test error handling
name|QSettings
operator|::
name|Format
name|custom3
init|=
name|QSettings
operator|::
name|registerFormat
argument_list|(
literal|"custom3"
argument_list|,
name|readCustom3File
argument_list|,
name|writeCustom3File
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|custom3
operator|==
name|QSettings
operator|::
name|CustomFormat3
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|settingsPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
literal|"someDir"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|dir
operator|.
name|path
argument_list|()
operator|+
literal|"/someDir/someSettings.custom3"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.custom3"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|CustomFormat3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"retval"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"OK"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
literal|"NotOK"
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.custom3"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|CustomFormat3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|FormatError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"retval"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.custom3"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|CustomFormat3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"zzz"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"retval"
argument_list|,
literal|"NotOK"
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|value
argument_list|(
literal|"retval"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"NotOK"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"someDir/someSettings.custom3"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|CustomFormat4
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|settings
operator|.
name|status
argument_list|()
argument_list|,
name|QSettings
operator|::
name|AccessError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setPath
name|void
name|tst_QSettings
operator|::
name|setPath
parameter_list|()
block|{
DECL|macro|TEST_PATH
define|#
directive|define
name|TEST_PATH
parameter_list|(
name|doSet
parameter_list|,
name|ext
parameter_list|,
name|format
parameter_list|,
name|scope
parameter_list|,
name|path
parameter_list|)
define|\
value|{ \     if (doSet) \         QSettings::setPath(QSettings::format, QSettings::scope, settingsPath(path)); \     QSettings settings1(QSettings::format, QSettings::scope, "software.org", "KillerAPP"); \     QCOMPARE(QDir(settings1.fileName()), QDir(settingsPath(path) + QDir::separator() + "software.org" \                                   + QDir::separator() + "KillerAPP." + ext)); \     }
comment|/*         The first pass checks that setPath() works; the second         path checks that it has no bad side effects.     */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"conf"
argument_list|,
argument|NativeFormat
argument_list|,
argument|UserScope
argument_list|,
literal|"alpha"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"conf"
argument_list|,
argument|NativeFormat
argument_list|,
argument|SystemScope
argument_list|,
literal|"beta"
argument_list|)
endif|#
directive|endif
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"ini"
argument_list|,
argument|IniFormat
argument_list|,
argument|UserScope
argument_list|,
literal|"gamma"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"ini"
argument_list|,
argument|IniFormat
argument_list|,
argument|SystemScope
argument_list|,
literal|"omicron"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom1"
argument_list|,
argument|CustomFormat1
argument_list|,
argument|UserScope
argument_list|,
literal|"epsilon"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom1"
argument_list|,
argument|CustomFormat1
argument_list|,
argument|SystemScope
argument_list|,
literal|"zeta"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom2"
argument_list|,
argument|CustomFormat2
argument_list|,
argument|UserScope
argument_list|,
literal|"eta"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom2"
argument_list|,
argument|CustomFormat2
argument_list|,
argument|SystemScope
argument_list|,
literal|"iota"
argument_list|)
else|#
directive|else
comment|// Q_OS_BLACKBERRY: no system scope
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"conf"
argument_list|,
argument|NativeFormat
argument_list|,
argument|UserScope
argument_list|,
literal|"alpha"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"ini"
argument_list|,
argument|IniFormat
argument_list|,
argument|UserScope
argument_list|,
literal|"gamma"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom1"
argument_list|,
argument|CustomFormat1
argument_list|,
argument|UserScope
argument_list|,
literal|"epsilon"
argument_list|)
name|TEST_PATH
argument_list|(
argument|i ==
literal|0
argument_list|,
literal|"custom2"
argument_list|,
argument|CustomFormat2
argument_list|,
argument|UserScope
argument_list|,
literal|"eta"
argument_list|)
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|setDefaultFormat
name|void
name|tst_QSettings
operator|::
name|setDefaultFormat
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QSettings
operator|::
name|defaultFormat
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QSettings
operator|::
name|setDefaultFormat
argument_list|(
name|QSettings
operator|::
name|CustomFormat1
argument_list|)
expr_stmt|;
name|QSettings
name|settings1
argument_list|(
literal|"org"
argument_list|,
literal|"app"
argument_list|)
decl_stmt|;
name|QSettings
name|settings2
argument_list|(
name|QSettings
operator|::
name|SystemScope
argument_list|,
literal|"org"
argument_list|,
literal|"app"
argument_list|)
decl_stmt|;
name|QSettings
name|settings3
decl_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|CustomFormat1
argument_list|)
expr_stmt|;
name|QSettings
operator|::
name|setDefaultFormat
argument_list|(
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSettings
operator|::
name|defaultFormat
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings1
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings2
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings3
operator|.
name|format
argument_list|()
operator|==
name|QSettings
operator|::
name|CustomFormat1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dontCreateNeedlessPaths
name|void
name|tst_QSettings
operator|::
name|dontCreateNeedlessPaths
parameter_list|()
block|{
name|QString
name|path
decl_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|IniFormat
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"Hello"
argument_list|,
literal|"Test"
argument_list|)
decl_stmt|;
name|QVariant
name|val
init|=
name|settings
operator|.
name|value
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|path
operator|=
name|settings
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
name|QFileInfo
name|fileInfo
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fileInfo
operator|.
name|dir
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_QSETTINGS_ALWAYS_CASE_SENSITIVE_AND_FORGET_ORIGINAL_KEY_ORDER
argument_list|)
end_if
begin_comment
comment|// This Qt build does not preserve ordering, as a code size optimization.
end_comment
begin_function
DECL|function|dontReorderIniKeysNeedlessly
name|void
name|tst_QSettings
operator|::
name|dontReorderIniKeysNeedlessly
parameter_list|()
block|{
comment|/*         This is a very strong test. It asserts that modifying         resourcefile2.ini will lead to the exact contents of         resourcefile3.ini. Right now it's run only on Unix         systems, but that should be enough since the INI         code (unlike this test) is platform-agnostic.          Things that are tested:              * keys are written in the same order that they were               read in              * new keys are put at the end of their respective               sections     */
name|QFile
name|inFile
argument_list|(
literal|":/resourcefile2.ini"
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|contentsBefore
init|=
name|inFile
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QByteArray
name|expectedContentsAfter
decl_stmt|;
block|{
name|QFile
name|inFile
argument_list|(
literal|":/resourcefile3.ini"
argument_list|)
decl_stmt|;
name|inFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|expectedContentsAfter
operator|=
name|inFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QString
name|outFileName
decl_stmt|;
name|QString
name|outFileName2
decl_stmt|;
name|QTemporaryFile
name|outFile
decl_stmt|;
name|outFile
operator|.
name|open
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|write
argument_list|(
name|contentsBefore
argument_list|)
expr_stmt|;
name|outFileName
operator|=
name|outFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|outFileName
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|status
argument_list|()
operator|==
name|QSettings
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|settings
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/Bottom"
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/x"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/y"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/width"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"Field 1/height"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|settings
operator|.
name|sync
argument_list|()
expr_stmt|;
name|QFile
name|outFile2
argument_list|(
name|outFileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|outFile2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|outFile2
operator|.
name|readAll
argument_list|()
argument_list|,
name|expectedContentsAfter
argument_list|)
expr_stmt|;
name|outFile2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|rainersSyncBugOnMac_data
name|void
name|tst_QSettings
operator|::
name|rainersSyncBugOnMac_data
parameter_list|()
block|{
name|ctor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rainersSyncBugOnMac
name|void
name|tst_QSettings
operator|::
name|rainersSyncBugOnMac
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QSettings
operator|::
name|Format
argument_list|,
name|format
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
if|if
condition|(
name|format
operator|==
name|QSettings
operator|::
name|NativeFormat
condition|)
name|QSKIP
argument_list|(
literal|"OSX does not support direct reads from and writes to .plist files, due to caching and background syncing. See QTBUG-34899."
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|fileName
decl_stmt|;
block|{
name|QSettings
name|s1
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|value
argument_list|(
literal|"key1"
argument_list|,
literal|5
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|s1
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
block|{
name|QSettings
name|s2
argument_list|(
name|fileName
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|s2
operator|.
name|setValue
argument_list|(
literal|"key1"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
block|}
block|{
name|QSettings
name|s3
argument_list|(
name|format
argument_list|,
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|value
argument_list|(
literal|"key1"
argument_list|,
literal|30
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|recursionBug
name|void
name|tst_QSettings
operator|::
name|recursionBug
parameter_list|()
block|{
name|QPixmap
name|pix
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
literal|"blue"
argument_list|)
expr_stmt|;
block|{
name|QSettings
name|settings
argument_list|(
name|settingsPath
argument_list|(
literal|"starrunner.ini"
argument_list|)
argument_list|,
name|QSettings
operator|::
name|IniFormat
argument_list|)
decl_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
literal|"General/Pixmap"
argument_list|,
name|pix
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|readKeyType
specifier|static
name|DWORD
name|readKeyType
parameter_list|(
name|HKEY
name|handle
parameter_list|,
specifier|const
name|QString
modifier|&
name|rSubKey
parameter_list|)
block|{
name|DWORD
name|dataType
decl_stmt|;
name|DWORD
name|dataSize
decl_stmt|;
name|LONG
name|res
init|=
name|RegQueryValueEx
argument_list|(
name|handle
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|rSubKey
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|&
name|dataType
argument_list|,
literal|0
argument_list|,
operator|&
name|dataSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|ERROR_SUCCESS
condition|)
return|return
name|dataType
return|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|// This is a regression test for QTBUG-13249, where QSettings was storing
end_comment
begin_comment
comment|// signed integers as numeric values and unsigned integers as strings.
end_comment
begin_function
DECL|function|consistentRegistryStorage
name|void
name|tst_QSettings
operator|::
name|consistentRegistryStorage
parameter_list|()
block|{
name|QSettings
name|settings1
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
literal|"software.org"
argument_list|,
literal|"KillerAPP"
argument_list|)
decl_stmt|;
name|qint32
name|x
init|=
literal|1024
decl_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"qint32_value"
argument_list|,
operator|(
name|qint32
operator|)
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"qint32_value"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|(
name|qint32
operator|)
literal|1024
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"quint32_value"
argument_list|,
operator|(
name|quint32
operator|)
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"quint32_value"
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
operator|(
name|quint32
operator|)
literal|1024
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"qint64_value"
argument_list|,
operator|(
name|qint64
operator|)
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"qint64_value"
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|1024
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|setValue
argument_list|(
literal|"quint64_value"
argument_list|,
operator|(
name|quint64
operator|)
name|x
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|settings1
operator|.
name|value
argument_list|(
literal|"quint64_value"
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
operator|(
name|quint64
operator|)
literal|1024
argument_list|)
expr_stmt|;
name|settings1
operator|.
name|sync
argument_list|()
expr_stmt|;
name|HKEY
name|handle
decl_stmt|;
name|LONG
name|res
decl_stmt|;
name|QString
name|keyName
init|=
literal|"Software\\software.org\\KillerAPP"
decl_stmt|;
name|res
operator|=
name|RegOpenKeyEx
argument_list|(
name|HKEY_CURRENT_USER
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|keyName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
name|KEY_READ
argument_list|,
operator|&
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
name|ERROR_SUCCESS
condition|)
block|{
name|DWORD
name|dataType
decl_stmt|;
name|dataType
operator|=
name|readKeyType
argument_list|(
name|handle
argument_list|,
name|QString
argument_list|(
literal|"qint32_value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataType
operator|!=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|REG_DWORD
argument_list|,
operator|(
name|int
operator|)
name|dataType
argument_list|)
expr_stmt|;
block|}
name|dataType
operator|=
name|readKeyType
argument_list|(
name|handle
argument_list|,
name|QString
argument_list|(
literal|"quint32_value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataType
operator|!=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|REG_DWORD
argument_list|,
operator|(
name|int
operator|)
name|dataType
argument_list|)
expr_stmt|;
block|}
name|dataType
operator|=
name|readKeyType
argument_list|(
name|handle
argument_list|,
name|QString
argument_list|(
literal|"qint64_value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataType
operator|!=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|REG_QWORD
argument_list|,
operator|(
name|int
operator|)
name|dataType
argument_list|)
expr_stmt|;
block|}
name|dataType
operator|=
name|readKeyType
argument_list|(
name|handle
argument_list|,
name|QString
argument_list|(
literal|"quint64_value"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataType
operator|!=
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|REG_QWORD
argument_list|,
operator|(
name|int
operator|)
name|dataType
argument_list|)
expr_stmt|;
block|}
name|RegCloseKey
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSettings
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsettings.moc"
end_include
end_unit
