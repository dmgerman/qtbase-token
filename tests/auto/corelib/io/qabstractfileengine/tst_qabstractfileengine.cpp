begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the FOO module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/private/qabstractfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qfsfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutex>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMutexLocker>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDirIterator>
end_include
begin_include
include|#
directive|include
file|<QtTest/QTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|"../../../../shared/filesystem.h"
end_include
begin_class
DECL|class|tst_QAbstractFileEngine
class|class
name|tst_QAbstractFileEngine
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|customHandler
parameter_list|()
function_decl|;
name|void
name|fileIO_data
parameter_list|()
function_decl|;
name|void
name|fileIO
parameter_list|()
function_decl|;
name|void
name|mounting_data
parameter_list|()
function_decl|;
name|void
name|mounting
parameter_list|()
function_decl|;
private|private:
DECL|member|filesForRemoval
name|QStringList
name|filesForRemoval
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ReferenceFileEngine
class|class
name|ReferenceFileEngine
super|:
specifier|public
name|QAbstractFileEngine
block|{
public|public:
DECL|function|ReferenceFileEngine
name|ReferenceFileEngine
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
member_init_list|:
name|fileName_
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|fileName
argument_list|)
argument_list|)
member_init_list|,
name|position_
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|openForRead_
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|openForWrite_
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|function|open
name|bool
name|open
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
name|openMode
parameter_list|)
block|{
if|if
condition|(
name|openForRead_
operator|||
name|openForWrite_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file is already open for %s"
argument_list|,
name|Q_FUNC_INFO
argument_list|,
operator|(
name|openForRead_
condition|?
literal|"reading"
else|:
literal|"writing"
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|openFile_
operator|=
name|resolveFile
argument_list|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|openFile_
condition|)
return|return
literal|false
return|;
name|position_
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|openForRead_
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
block|{
name|openForWrite_
operator|=
literal|true
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|openFile_
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|Truncate
operator|||
operator|!
operator|(
name|openForRead_
operator|||
name|openMode
operator|&
name|QIODevice
operator|::
name|Append
operator|)
condition|)
name|openFile_
operator|->
name|content
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|Append
condition|)
name|position_
operator|=
name|openFile_
operator|->
name|content
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|close
name|bool
name|close
parameter_list|()
block|{
name|openFile_
operator|.
name|clear
argument_list|()
expr_stmt|;
name|openForRead_
operator|=
literal|false
expr_stmt|;
name|openForWrite_
operator|=
literal|false
expr_stmt|;
name|position_
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|size
name|qint64
name|size
parameter_list|()
specifier|const
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
return|return
literal|0
return|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
return|return
name|file
operator|->
name|content
operator|.
name|size
argument_list|()
return|;
block|}
DECL|function|pos
name|qint64
name|pos
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|openForRead_
operator|&&
operator|!
name|openForWrite_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file is not open"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|position_
return|;
block|}
DECL|function|seek
name|bool
name|seek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
if|if
condition|(
operator|!
name|openForRead_
operator|&&
operator|!
name|openForWrite_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file is not open"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|position_
operator|=
name|pos
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|flush
name|bool
name|flush
parameter_list|()
block|{
if|if
condition|(
operator|!
name|openForRead_
operator|&&
operator|!
name|openForWrite_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file is not open"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|remove
name|bool
name|remove
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|fileSystem
operator|.
name|remove
argument_list|(
name|fileName_
argument_list|)
decl_stmt|;
return|return
operator|(
name|count
operator|==
literal|1
operator|)
return|;
block|}
DECL|function|copy
name|bool
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|contains
argument_list|(
name|fileName_
argument_list|)
operator|||
name|fileSystem
operator|.
name|contains
argument_list|(
name|newName
argument_list|)
condition|)
return|return
literal|false
return|;
name|fileSystem
operator|.
name|insert
argument_list|(
name|newName
argument_list|,
name|fileSystem
operator|.
name|value
argument_list|(
name|fileName_
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|rename
name|bool
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
name|newName
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|contains
argument_list|(
name|fileName_
argument_list|)
operator|||
name|fileSystem
operator|.
name|contains
argument_list|(
name|newName
argument_list|)
condition|)
return|return
literal|false
return|;
name|fileSystem
operator|.
name|insert
argument_list|(
name|newName
argument_list|,
name|fileSystem
operator|.
name|take
argument_list|(
name|fileName_
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//  bool link(const QString&newName)
comment|//  {
comment|//      Q_UNUSED(newName)
comment|//      return false;
comment|//  }
comment|//  bool mkdir(const QString&dirName, bool createParentDirectories) const
comment|//  {
comment|//      Q_UNUSED(dirName)
comment|//      Q_UNUSED(createParentDirectories)
comment|//      return false;
comment|//  }
comment|//  bool rmdir(const QString&dirName, bool recurseParentDirectories) const
comment|//  {
comment|//      Q_UNUSED(dirName)
comment|//      Q_UNUSED(recurseParentDirectories)
comment|//      return false;
comment|//  }
DECL|function|setSize
name|bool
name|setSize
parameter_list|(
name|qint64
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<
literal|0
condition|)
return|return
literal|false
return|;
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
return|return
literal|false
return|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|file
operator|->
name|content
operator|.
name|resize
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|openForRead_
operator|||
name|openForWrite_
condition|)
if|if
condition|(
name|position_
operator|>
name|size
condition|)
name|position_
operator|=
name|size
expr_stmt|;
return|return
operator|(
name|file
operator|->
name|content
operator|.
name|size
argument_list|()
operator|==
name|size
operator|)
return|;
block|}
DECL|function|fileFlags
name|FileFlags
name|fileFlags
parameter_list|(
name|FileFlags
name|type
parameter_list|)
specifier|const
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
return|return
operator|(
name|file
operator|->
name|fileFlags
operator|&
name|type
operator|)
return|;
block|}
return|return
name|FileFlags
argument_list|()
return|;
block|}
comment|//  bool setPermissions(uint perms)
comment|//  {
comment|//      Q_UNUSED(perms)
comment|//      return false;
comment|//  }
DECL|function|fileName
name|QString
name|fileName
parameter_list|(
name|FileName
name|file
parameter_list|)
specifier|const
block|{
switch|switch
condition|(
name|file
condition|)
block|{
case|case
name|DefaultName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"DefaultName"
argument_list|)
return|;
case|case
name|BaseName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"BaseName"
argument_list|)
return|;
case|case
name|PathName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"PathName"
argument_list|)
return|;
case|case
name|AbsoluteName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"AbsoluteName"
argument_list|)
return|;
case|case
name|AbsolutePathName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"AbsolutePathName"
argument_list|)
return|;
case|case
name|LinkName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"LinkName"
argument_list|)
return|;
case|case
name|CanonicalName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"CanonicalName"
argument_list|)
return|;
case|case
name|CanonicalPathName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"CanonicalPathName"
argument_list|)
return|;
case|case
name|BundleName
case|:
return|return
name|QLatin1String
argument_list|(
literal|"BundleName"
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|ownerId
name|uint
name|ownerId
parameter_list|(
name|FileOwner
name|owner
parameter_list|)
specifier|const
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
switch|switch
condition|(
name|owner
condition|)
block|{
case|case
name|OwnerUser
case|:
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
return|return
name|file
operator|->
name|userId
return|;
block|}
case|case
name|OwnerGroup
case|:
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
return|return
name|file
operator|->
name|groupId
return|;
block|}
block|}
block|}
return|return
operator|-
literal|2
return|;
block|}
DECL|function|owner
name|QString
name|owner
parameter_list|(
name|FileOwner
name|owner
parameter_list|)
specifier|const
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|uint
name|ownerId
decl_stmt|;
switch|switch
condition|(
name|owner
condition|)
block|{
case|case
name|OwnerUser
case|:
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|ownerId
operator|=
name|file
operator|->
name|userId
expr_stmt|;
block|}
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
return|return
name|fileSystemUsers
operator|.
name|value
argument_list|(
name|ownerId
argument_list|)
return|;
block|}
case|case
name|OwnerGroup
case|:
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|ownerId
operator|=
name|file
operator|->
name|groupId
expr_stmt|;
block|}
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
return|return
name|fileSystemGroups
operator|.
name|value
argument_list|(
name|ownerId
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|fileTime
name|QDateTime
name|fileTime
parameter_list|(
name|FileTime
name|time
parameter_list|)
specifier|const
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|file
init|=
name|resolveFile
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
condition|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|file
operator|->
name|mutex
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|time
condition|)
block|{
case|case
name|CreationTime
case|:
return|return
name|file
operator|->
name|creation
return|;
case|case
name|ModificationTime
case|:
return|return
name|file
operator|->
name|modification
return|;
case|case
name|AccessTime
case|:
return|return
name|file
operator|->
name|access
return|;
block|}
block|}
return|return
name|QDateTime
argument_list|()
return|;
block|}
DECL|function|setFileName
name|void
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|openForRead_
operator|||
name|openForWrite_
condition|)
name|qWarning
argument_list|(
literal|"%s: Can't set file name while file is open"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
else|else
name|fileName_
operator|=
name|file
expr_stmt|;
block|}
comment|//  typedef QAbstractFileEngineIterator Iterator;
comment|//  Iterator *beginEntryList(QDir::Filters filters, const QStringList&filterNames)
comment|//  {
comment|//      Q_UNUSED(filters)
comment|//      Q_UNUSED(filterNames)
comment|//      return 0;
comment|//  }
comment|//  Iterator *endEntryList()
comment|//  {
comment|//      return 0;
comment|//  }
DECL|function|read
name|qint64
name|read
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxLen
parameter_list|)
block|{
if|if
condition|(
operator|!
name|openForRead_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file must be open for reading"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|openFile_
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file must not be null"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|openFile_
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|qint64
name|readSize
init|=
name|qMin
argument_list|(
name|openFile_
operator|->
name|content
operator|.
name|size
argument_list|()
operator|-
name|position_
argument_list|,
name|maxLen
argument_list|)
decl_stmt|;
if|if
condition|(
name|readSize
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|openFile_
operator|->
name|content
operator|.
name|constData
argument_list|()
operator|+
name|position_
argument_list|,
name|readSize
argument_list|)
expr_stmt|;
name|position_
operator|+=
name|readSize
expr_stmt|;
return|return
name|readSize
return|;
block|}
DECL|function|write
name|qint64
name|write
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|length
parameter_list|)
block|{
if|if
condition|(
operator|!
name|openForWrite_
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file must be open for writing"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|openFile_
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"%s: file must not be null"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|openFile_
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|openFile_
operator|->
name|content
operator|.
name|size
argument_list|()
operator|==
name|position_
condition|)
name|openFile_
operator|->
name|content
operator|.
name|append
argument_list|(
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|position_
operator|+
name|length
operator|>
name|openFile_
operator|->
name|content
operator|.
name|size
argument_list|()
condition|)
name|openFile_
operator|->
name|content
operator|.
name|resize
argument_list|(
name|position_
operator|+
name|length
argument_list|)
expr_stmt|;
name|openFile_
operator|->
name|content
operator|.
name|replace
argument_list|(
name|position_
argument_list|,
name|length
argument_list|,
name|data
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|qint64
name|writeSize
init|=
name|qMin
argument_list|(
name|length
argument_list|,
name|openFile_
operator|->
name|content
operator|.
name|size
argument_list|()
operator|-
name|position_
argument_list|)
decl_stmt|;
name|position_
operator|+=
name|writeSize
expr_stmt|;
return|return
name|writeSize
return|;
block|}
protected|protected:
comment|// void setError(QFile::FileError error, const QString&str);
DECL|struct|File
struct|struct
name|File
block|{
DECL|function|File
name|File
parameter_list|()
member_init_list|:
name|userId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|groupId
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|fileFlags
argument_list|(
name|ReadOwnerPerm
operator||
name|WriteOwnerPerm
operator||
name|ExeOwnerPerm
operator||
name|ReadUserPerm
operator||
name|WriteUserPerm
operator||
name|ExeUserPerm
operator||
name|ReadGroupPerm
operator||
name|WriteGroupPerm
operator||
name|ExeGroupPerm
operator||
name|ReadOtherPerm
operator||
name|WriteOtherPerm
operator||
name|ExeOtherPerm
operator||
name|FileType
operator||
name|ExistsFlag
argument_list|)
block|{         }
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|userId
DECL|member|groupId
name|uint
name|userId
decl_stmt|,
name|groupId
decl_stmt|;
DECL|member|fileFlags
name|QAbstractFileEngine
operator|::
name|FileFlags
name|fileFlags
decl_stmt|;
DECL|member|creation
DECL|member|modification
DECL|member|access
name|QDateTime
name|creation
decl_stmt|,
name|modification
decl_stmt|,
name|access
decl_stmt|;
DECL|member|content
name|QByteArray
name|content
decl_stmt|;
block|}
struct|;
DECL|function|resolveFile
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|resolveFile
parameter_list|(
name|bool
name|create
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|openForRead_
operator|||
name|openForWrite_
condition|)
block|{
if|if
condition|(
operator|!
name|openFile_
condition|)
name|qWarning
argument_list|(
literal|"%s: file should not be null"
argument_list|,
name|Q_FUNC_INFO
argument_list|)
expr_stmt|;
return|return
name|openFile_
return|;
block|}
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|fileSystemMutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|QSharedPointer
argument_list|<
name|File
argument_list|>
modifier|&
name|p
init|=
name|fileSystem
index|[
name|fileName_
index|]
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isNull
argument_list|()
condition|)
name|p
operator|=
name|QSharedPointer
argument_list|<
name|File
argument_list|>
argument_list|(
operator|new
name|File
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
return|return
name|fileSystem
operator|.
name|value
argument_list|(
name|fileName_
argument_list|)
return|;
block|}
DECL|member|fileSystemMutex
specifier|static
name|QMutex
name|fileSystemMutex
decl_stmt|;
DECL|member|fileSystemUsers
DECL|member|fileSystemGroups
specifier|static
name|QHash
argument_list|<
name|uint
argument_list|,
name|QString
argument_list|>
name|fileSystemUsers
decl_stmt|,
name|fileSystemGroups
decl_stmt|;
DECL|member|fileSystem
specifier|static
name|QHash
argument_list|<
name|QString
argument_list|,
name|QSharedPointer
argument_list|<
name|File
argument_list|>
argument_list|>
name|fileSystem
decl_stmt|;
private|private:
DECL|member|fileName_
name|QString
name|fileName_
decl_stmt|;
DECL|member|position_
name|qint64
name|position_
decl_stmt|;
DECL|member|openForRead_
name|bool
name|openForRead_
decl_stmt|;
DECL|member|openForWrite_
name|bool
name|openForWrite_
decl_stmt|;
DECL|member|openFile_
specifier|mutable
name|QSharedPointer
argument_list|<
name|File
argument_list|>
name|openFile_
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MountingFileEngine
class|class
name|MountingFileEngine
super|:
specifier|public
name|QFSFileEngine
block|{
public|public:
DECL|class|Iterator
class|class
name|Iterator
super|:
specifier|public
name|QAbstractFileEngineIterator
block|{
public|public:
DECL|function|Iterator
name|Iterator
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
member_init_list|:
name|QAbstractFileEngineIterator
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|)
block|{
name|names
operator|.
name|append
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|names
operator|.
name|append
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|index
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|function|currentFileName
name|QString
name|currentFileName
parameter_list|()
specifier|const
block|{
return|return
name|names
operator|.
name|at
argument_list|(
name|index
argument_list|)
return|;
block|}
DECL|function|hasNext
name|bool
name|hasNext
parameter_list|()
specifier|const
block|{
return|return
name|index
operator|<
name|names
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
DECL|function|next
name|QString
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
operator|++
name|index
expr_stmt|;
return|return
name|currentFilePath
argument_list|()
return|;
block|}
DECL|member|names
name|QStringList
name|names
decl_stmt|;
DECL|member|index
name|int
name|index
decl_stmt|;
block|}
class|;
DECL|function|MountingFileEngine
name|MountingFileEngine
parameter_list|(
name|QString
name|fileName
parameter_list|)
member_init_list|:
name|QFSFileEngine
argument_list|(
name|fileName
argument_list|)
block|{     }
DECL|function|beginEntryList
name|Iterator
modifier|*
name|beginEntryList
parameter_list|(
name|QDir
operator|::
name|Filters
name|filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|filterNames
parameter_list|)
block|{
return|return
operator|new
name|Iterator
argument_list|(
name|filters
argument_list|,
name|filterNames
argument_list|)
return|;
block|}
DECL|function|fileFlags
name|FileFlags
name|fileFlags
parameter_list|(
name|FileFlags
name|type
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fileName
argument_list|(
name|DefaultName
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|FileFlags
name|ret
init|=
name|QFSFileEngine
operator|::
name|fileFlags
argument_list|(
name|type
argument_list|)
decl_stmt|;
comment|//make this file in file system appear to be a directory
name|ret
operator|&=
operator|~
name|FileType
expr_stmt|;
name|ret
operator||=
name|DirectoryType
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
comment|//file inside the archive
return|return
name|ExistsFlag
operator||
name|FileType
return|;
block|}
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|member|fileSystemMutex
name|QMutex
name|ReferenceFileEngine
operator|::
name|fileSystemMutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|fileSystemUsers
DECL|member|fileSystemGroups
name|QHash
argument_list|<
name|uint
argument_list|,
name|QString
argument_list|>
name|ReferenceFileEngine
operator|::
name|fileSystemUsers
decl_stmt|,
name|ReferenceFileEngine
operator|::
name|fileSystemGroups
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|fileSystem
name|QHash
argument_list|<
name|QString
argument_list|,
name|QSharedPointer
argument_list|<
name|ReferenceFileEngine
operator|::
name|File
argument_list|>
argument_list|>
name|ReferenceFileEngine
operator|::
name|fileSystem
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|FileEngineHandler
class|class
name|FileEngineHandler
super|:
name|QAbstractFileEngineHandler
block|{
DECL|function|create
name|QAbstractFileEngine
modifier|*
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
operator|||
name|fileName
operator|.
name|contains
argument_list|(
literal|".tar/"
argument_list|)
condition|)
return|return
operator|new
name|MountingFileEngine
argument_list|(
name|fileName
argument_list|)
return|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"QFSFileEngine:"
argument_list|)
condition|)
return|return
operator|new
name|QFSFileEngine
argument_list|(
name|fileName
operator|.
name|mid
argument_list|(
literal|14
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"reference-file-engine:"
argument_list|)
condition|)
return|return
operator|new
name|ReferenceFileEngine
argument_list|(
name|fileName
operator|.
name|mid
argument_list|(
literal|22
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"resource:"
argument_list|)
condition|)
return|return
name|QAbstractFileEngine
operator|::
name|create
argument_list|(
name|QLatin1String
argument_list|(
literal|":/tst_qabstractfileengine/resources/"
argument_list|)
operator|+
name|fileName
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
argument_list|)
return|;
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QAbstractFileEngine
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|bool
name|failed
init|=
literal|false
decl_stmt|;
name|FileEngineHandler
name|handler
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|QString file
argument_list|,
argument|filesForRemoval
argument_list|)
if|if
condition|(
operator|!
name|QFile
operator|::
name|remove
argument_list|(
name|file
argument_list|)
operator|||
name|QFile
operator|::
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Couldn't remove file:"
operator|<<
name|file
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|failed
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customHandler
name|void
name|tst_QAbstractFileEngine
operator|::
name|customHandler
parameter_list|()
block|{
name|QScopedPointer
argument_list|<
name|QAbstractFileEngine
argument_list|>
name|file
decl_stmt|;
block|{
name|file
operator|.
name|reset
argument_list|(
name|QAbstractFileEngine
operator|::
name|create
argument_list|(
literal|"resource:file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|{
name|FileEngineHandler
name|handler
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|"resource:file.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"resource:file.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fileIO_data
name|void
name|tst_QAbstractFileEngine
operator|::
name|fileIO_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"readContent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"writeContent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"fileExists"
argument_list|)
expr_stmt|;
name|QString
name|resourceTxtFile
argument_list|(
literal|":/tst_qabstractfileengine/resources/file.txt"
argument_list|)
decl_stmt|;
name|QByteArray
name|readContent
argument_list|(
literal|"This is a simple text file.\n"
argument_list|)
decl_stmt|;
name|QByteArray
name|writeContent
argument_list|(
literal|"This contains two lines of text.\n"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
name|resourceTxtFile
operator|<<
name|readContent
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native"
argument_list|)
operator|<<
literal|"native-file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Forced QFSFileEngine"
argument_list|)
operator|<<
literal|"QFSFileEngine:QFSFileEngine-file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Custom FE"
argument_list|)
operator|<<
literal|"reference-file-engine:file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Forced QFSFileEngine (native)"
argument_list|)
operator|<<
literal|"QFSFileEngine:native-file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native (Forced QFSFileEngine)"
argument_list|)
operator|<<
literal|"QFSFileEngine-file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Custom FE (2)"
argument_list|)
operator|<<
literal|"reference-file-engine:file.txt"
operator|<<
name|readContent
operator|<<
name|writeContent
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileIO
name|void
name|tst_QAbstractFileEngine
operator|::
name|fileIO
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|writeContent
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|fileExists
argument_list|)
expr_stmt|;
name|FileEngineHandler
name|handler
decl_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
name|fileExists
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileExists
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|filesForRemoval
operator|.
name|append
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|readContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|readContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// File content is: readContent
comment|//
name|qint64
name|fileSize
init|=
name|readContent
operator|.
name|size
argument_list|()
decl_stmt|;
block|{
comment|// Reading
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|/* For an exact match, this test requires the repository to          * be checked out with UNIX-style line endings on Windows.          * Try to succeed also for the common case of checking out with autocrlf          * by reading the file as text and checking if the size matches          * the original size + the '\r' characters added by autocrlf. */
name|QFile
operator|::
name|OpenMode
name|openMode
init|=
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|openMode
operator||=
name|QIODevice
operator|::
name|Text
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|openMode
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
specifier|const
name|qint64
name|convertedSize
init|=
name|fileSize
operator|+
name|readContent
operator|.
name|count
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|size
argument_list|()
operator|==
name|convertedSize
condition|)
name|fileSize
operator|=
name|convertedSize
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writeContent
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
block|{
comment|// Writing / appending
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|writeContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fileSize
operator|+=
name|writeContent
operator|.
name|size
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// File content is: readContent + writeContent
comment|//
block|{
comment|// Reading and Writing
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|readContent
operator|+
name|writeContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|readContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|readContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|writeContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|writeContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|readContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// File content is: writeContent + readContent
comment|//
block|{
comment|// Writing
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|writeContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|resize
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|resize
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// File content is: writeContent +<undefined>
comment|// File size is   : (readContent + writeContent).size()
comment|//
block|{
comment|// Writing / extending
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|fileSize
operator|=
literal|1024
operator|+
name|writeContent
operator|.
name|size
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|writeContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|1028
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1028
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|fileSize
operator|=
literal|1028
operator|+
name|writeContent
operator|.
name|size
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|writeContent
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|writeContent
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// File content is: writeContent +<undefined> + writeContent
comment|// File size is   : 1024 + writeContent.size()
comment|//
block|{
comment|// Writing / truncating
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fileSize
operator|=
name|readContent
operator|.
name|size
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|readContent
argument_list|)
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// File content is: readContent
comment|//
block|}
end_function
begin_function
DECL|function|mounting_data
name|void
name|tst_QAbstractFileEngine
operator|::
name|mounting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native"
argument_list|)
operator|<<
literal|"test.tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Forced QFSFileEngine"
argument_list|)
operator|<<
literal|"QFSFileEngine:test.tar"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mounting
name|void
name|tst_QAbstractFileEngine
operator|::
name|mounting
parameter_list|()
block|{
name|FileSystem
name|fs
decl_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"test.tar"
argument_list|)
argument_list|)
expr_stmt|;
name|FileEngineHandler
name|handler
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|absName
init|=
name|fs
operator|.
name|absoluteFilePath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
name|absName
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|absName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
argument_list|,
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"bar"
operator|<<
literal|"foo"
operator|)
argument_list|)
expr_stmt|;
name|QDir
name|dir2
argument_list|(
name|fs
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|info
decl|,
name|dir2
operator|.
name|entryInfoList
argument_list|()
control|)
block|{
if|if
condition|(
name|info
operator|.
name|fileName
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"test.tar"
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|found
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QAbstractFileEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qabstractfileengine.moc"
end_include
end_unit
