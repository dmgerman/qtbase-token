begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2012 Intel Corporation. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"private/qtldurl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qurl_p.h"
end_include
begin_comment
comment|// For testsuites
end_comment
begin_define
DECL|macro|IDNA_ACE_PREFIX
define|#
directive|define
name|IDNA_ACE_PREFIX
value|"xn--"
end_define
begin_define
DECL|macro|IDNA_SUCCESS
define|#
directive|define
name|IDNA_SUCCESS
value|1
end_define
begin_define
DECL|macro|STRINGPREP_NO_UNASSIGNED
define|#
directive|define
name|STRINGPREP_NO_UNASSIGNED
value|1
end_define
begin_define
DECL|macro|STRINGPREP_CONTAINS_UNASSIGNED
define|#
directive|define
name|STRINGPREP_CONTAINS_UNASSIGNED
value|2
end_define
begin_define
DECL|macro|STRINGPREP_CONTAINS_PROHIBITED
define|#
directive|define
name|STRINGPREP_CONTAINS_PROHIBITED
value|3
end_define
begin_define
DECL|macro|STRINGPREP_BIDI_BOTH_L_AND_RAL
define|#
directive|define
name|STRINGPREP_BIDI_BOTH_L_AND_RAL
value|4
end_define
begin_define
DECL|macro|STRINGPREP_BIDI_LEADTRAIL_NOT_RAL
define|#
directive|define
name|STRINGPREP_BIDI_LEADTRAIL_NOT_RAL
value|5
end_define
begin_struct
DECL|struct|ushortarray
struct|struct
name|ushortarray
block|{
DECL|function|ushortarray
name|ushortarray
parameter_list|(
name|unsigned
name|short
modifier|*
name|array
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|array
condition|)
name|memcpy
argument_list|(
name|points
argument_list|,
name|array
argument_list|,
sizeof|sizeof
argument_list|(
name|points
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|points
name|unsigned
name|short
name|points
index|[
literal|100
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|ushortarray
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QUrl::FormattingOptions
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QUrl::ComponentFormattingOptions
argument_list|)
end_macro
begin_class
DECL|class|tst_QUrlInternal
class|class
name|tst_QUrlInternal
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
comment|// IDNA internals
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|idna_testsuite_data
parameter_list|()
function_decl|;
name|void
name|idna_testsuite
parameter_list|()
function_decl|;
name|void
name|nameprep_testsuite_data
parameter_list|()
function_decl|;
name|void
name|nameprep_testsuite
parameter_list|()
function_decl|;
name|void
name|nameprep_highcodes_data
parameter_list|()
function_decl|;
name|void
name|nameprep_highcodes
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|ace_testsuite_data
parameter_list|()
function_decl|;
name|void
name|ace_testsuite
parameter_list|()
function_decl|;
name|void
name|std3violations_data
parameter_list|()
function_decl|;
name|void
name|std3violations
parameter_list|()
function_decl|;
name|void
name|std3deviations_data
parameter_list|()
function_decl|;
name|void
name|std3deviations
parameter_list|()
function_decl|;
comment|// percent-encoding internals
name|void
name|correctEncodedMistakes_data
parameter_list|()
function_decl|;
name|void
name|correctEncodedMistakes
parameter_list|()
function_decl|;
name|void
name|encodingRecode_data
parameter_list|()
function_decl|;
name|void
name|encodingRecode
parameter_list|()
function_decl|;
name|void
name|encodingRecodeInvalidUtf8_data
parameter_list|()
function_decl|;
name|void
name|encodingRecodeInvalidUtf8
parameter_list|()
function_decl|;
name|void
name|recodeByteArray_data
parameter_list|()
function_decl|;
name|void
name|recodeByteArray
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_include
include|#
directive|include
file|"tst_qurlinternal.moc"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|idna_testsuite_data
name|void
name|tst_QUrlInternal
operator|::
name|idna_testsuite_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"numchars"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushortarray
argument_list|>
argument_list|(
literal|"unicode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"punycode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"allowunassigned"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"usestd3asciirules"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"toasciirc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"tounicoderc"
argument_list|)
expr_stmt|;
name|unsigned
name|short
name|d1
index|[]
init|=
block|{
literal|0x0644
block|,
literal|0x064A
block|,
literal|0x0647
block|,
literal|0x0645
block|,
literal|0x0627
block|,
literal|0x0628
block|,
literal|0x062A
block|,
literal|0x0643
block|,
literal|0x0644
block|,
literal|0x0645
block|,
literal|0x0648
block|,
literal|0x0634
block|,
literal|0x0639
block|,
literal|0x0631
block|,
literal|0x0628
block|,
literal|0x064A
block|,
literal|0x061F
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Arabic (Egyptian)"
argument_list|)
operator|<<
literal|17
operator|<<
name|ushortarray
argument_list|(
name|d1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"egbpdaj6bu4bxfgehfvwxn"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d2
index|[]
init|=
block|{
literal|0x4ED6
block|,
literal|0x4EEC
block|,
literal|0x4E3A
block|,
literal|0x4EC0
block|,
literal|0x4E48
block|,
literal|0x4E0D
block|,
literal|0x8BF4
block|,
literal|0x4E2D
block|,
literal|0x6587
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Chinese (simplified)"
argument_list|)
operator|<<
literal|9
operator|<<
name|ushortarray
argument_list|(
name|d2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"ihqwcrb4cv8a8dqg056pqjye"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d3
index|[]
init|=
block|{
literal|0x4ED6
block|,
literal|0x5011
block|,
literal|0x7232
block|,
literal|0x4EC0
block|,
literal|0x9EBD
block|,
literal|0x4E0D
block|,
literal|0x8AAA
block|,
literal|0x4E2D
block|,
literal|0x6587
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Chinese (traditional)"
argument_list|)
operator|<<
literal|9
operator|<<
name|ushortarray
argument_list|(
name|d3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"ihqwctvzc91f659drss3x8bo0yb"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d4
index|[]
init|=
block|{
literal|0x0050
block|,
literal|0x0072
block|,
literal|0x006F
block|,
literal|0x010D
block|,
literal|0x0070
block|,
literal|0x0072
block|,
literal|0x006F
block|,
literal|0x0073
block|,
literal|0x0074
block|,
literal|0x011B
block|,
literal|0x006E
block|,
literal|0x0065
block|,
literal|0x006D
block|,
literal|0x006C
block|,
literal|0x0075
block|,
literal|0x0076
block|,
literal|0x00ED
block|,
literal|0x010D
block|,
literal|0x0065
block|,
literal|0x0073
block|,
literal|0x006B
block|,
literal|0x0079
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Czech"
argument_list|)
operator|<<
literal|22
operator|<<
name|ushortarray
argument_list|(
name|d4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"Proprostnemluvesky-uyb24dma41a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d5
index|[]
init|=
block|{
literal|0x05DC
block|,
literal|0x05DE
block|,
literal|0x05D4
block|,
literal|0x05D4
block|,
literal|0x05DD
block|,
literal|0x05E4
block|,
literal|0x05E9
block|,
literal|0x05D5
block|,
literal|0x05D8
block|,
literal|0x05DC
block|,
literal|0x05D0
block|,
literal|0x05DE
block|,
literal|0x05D3
block|,
literal|0x05D1
block|,
literal|0x05E8
block|,
literal|0x05D9
block|,
literal|0x05DD
block|,
literal|0x05E2
block|,
literal|0x05D1
block|,
literal|0x05E8
block|,
literal|0x05D9
block|,
literal|0x05EA
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hebrew"
argument_list|)
operator|<<
literal|22
operator|<<
name|ushortarray
argument_list|(
name|d5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"4dbcagdahymbxekheh6e0a7fei0b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d6
index|[]
init|=
block|{
literal|0x092F
block|,
literal|0x0939
block|,
literal|0x0932
block|,
literal|0x094B
block|,
literal|0x0917
block|,
literal|0x0939
block|,
literal|0x093F
block|,
literal|0x0928
block|,
literal|0x094D
block|,
literal|0x0926
block|,
literal|0x0940
block|,
literal|0x0915
block|,
literal|0x094D
block|,
literal|0x092F
block|,
literal|0x094B
block|,
literal|0x0902
block|,
literal|0x0928
block|,
literal|0x0939
block|,
literal|0x0940
block|,
literal|0x0902
block|,
literal|0x092C
block|,
literal|0x094B
block|,
literal|0x0932
block|,
literal|0x0938
block|,
literal|0x0915
block|,
literal|0x0924
block|,
literal|0x0947
block|,
literal|0x0939
block|,
literal|0x0948
block|,
literal|0x0902
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Hindi (Devanagari)"
argument_list|)
operator|<<
literal|30
operator|<<
name|ushortarray
argument_list|(
name|d6
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"i1baa7eci9glrd9b2ae1bj0hfcgg6iyaf8o0a1dig0cd"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d7
index|[]
init|=
block|{
literal|0x306A
block|,
literal|0x305C
block|,
literal|0x307F
block|,
literal|0x3093
block|,
literal|0x306A
block|,
literal|0x65E5
block|,
literal|0x672C
block|,
literal|0x8A9E
block|,
literal|0x3092
block|,
literal|0x8A71
block|,
literal|0x3057
block|,
literal|0x3066
block|,
literal|0x304F
block|,
literal|0x308C
block|,
literal|0x306A
block|,
literal|0x3044
block|,
literal|0x306E
block|,
literal|0x304B
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese (kanji and hiragana)"
argument_list|)
operator|<<
literal|18
operator|<<
name|ushortarray
argument_list|(
name|d7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"n8jok5ay5dzabd5bym9f0cm5685rrjetr6pdxa"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d8
index|[]
init|=
block|{
literal|0x043F
block|,
literal|0x043E
block|,
literal|0x0447
block|,
literal|0x0435
block|,
literal|0x043C
block|,
literal|0x0443
block|,
literal|0x0436
block|,
literal|0x0435
block|,
literal|0x043E
block|,
literal|0x043D
block|,
literal|0x0438
block|,
literal|0x043D
block|,
literal|0x0435
block|,
literal|0x0433
block|,
literal|0x043E
block|,
literal|0x0432
block|,
literal|0x043E
block|,
literal|0x0440
block|,
literal|0x044F
block|,
literal|0x0442
block|,
literal|0x043F
block|,
literal|0x043E
block|,
literal|0x0440
block|,
literal|0x0443
block|,
literal|0x0441
block|,
literal|0x0441
block|,
literal|0x043A
block|,
literal|0x0438
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Russian (Cyrillic)"
argument_list|)
operator|<<
literal|28
operator|<<
name|ushortarray
argument_list|(
name|d8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"b1abfaaepdrnnbgefbadotcwatmq2g4l"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d9
index|[]
init|=
block|{
literal|0x0050
block|,
literal|0x006F
block|,
literal|0x0072
block|,
literal|0x0071
block|,
literal|0x0075
block|,
literal|0x00E9
block|,
literal|0x006E
block|,
literal|0x006F
block|,
literal|0x0070
block|,
literal|0x0075
block|,
literal|0x0065
block|,
literal|0x0064
block|,
literal|0x0065
block|,
literal|0x006E
block|,
literal|0x0073
block|,
literal|0x0069
block|,
literal|0x006D
block|,
literal|0x0070
block|,
literal|0x006C
block|,
literal|0x0065
block|,
literal|0x006D
block|,
literal|0x0065
block|,
literal|0x006E
block|,
literal|0x0074
block|,
literal|0x0065
block|,
literal|0x0068
block|,
literal|0x0061
block|,
literal|0x0062
block|,
literal|0x006C
block|,
literal|0x0061
block|,
literal|0x0072
block|,
literal|0x0065
block|,
literal|0x006E
block|,
literal|0x0045
block|,
literal|0x0073
block|,
literal|0x0070
block|,
literal|0x0061
block|,
literal|0x00F1
block|,
literal|0x006F
block|,
literal|0x006C
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Spanish"
argument_list|)
operator|<<
literal|40
operator|<<
name|ushortarray
argument_list|(
name|d9
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"PorqunopuedensimplementehablarenEspaol-fmd56a"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d10
index|[]
init|=
block|{
literal|0x0054
block|,
literal|0x1EA1
block|,
literal|0x0069
block|,
literal|0x0073
block|,
literal|0x0061
block|,
literal|0x006F
block|,
literal|0x0068
block|,
literal|0x1ECD
block|,
literal|0x006B
block|,
literal|0x0068
block|,
literal|0x00F4
block|,
literal|0x006E
block|,
literal|0x0067
block|,
literal|0x0074
block|,
literal|0x0068
block|,
literal|0x1EC3
block|,
literal|0x0063
block|,
literal|0x0068
block|,
literal|0x1EC9
block|,
literal|0x006E
block|,
literal|0x00F3
block|,
literal|0x0069
block|,
literal|0x0074
block|,
literal|0x0069
block|,
literal|0x1EBF
block|,
literal|0x006E
block|,
literal|0x0067
block|,
literal|0x0056
block|,
literal|0x0069
block|,
literal|0x1EC7
block|,
literal|0x0074
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Vietnamese"
argument_list|)
operator|<<
literal|31
operator|<<
name|ushortarray
argument_list|(
name|d10
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"TisaohkhngthchnitingVit-kjcr8268qyxafd2f1b9g"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d11
index|[]
init|=
block|{
literal|0x0033
block|,
literal|0x5E74
block|,
literal|0x0042
block|,
literal|0x7D44
block|,
literal|0x91D1
block|,
literal|0x516B
block|,
literal|0x5148
block|,
literal|0x751F
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese"
argument_list|)
operator|<<
literal|8
operator|<<
name|ushortarray
argument_list|(
name|d11
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"3B-ww4c5e180e575a65lsy2b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
comment|// this test does NOT include nameprepping, so the capitals will remain
name|unsigned
name|short
name|d12
index|[]
init|=
block|{
literal|0x5B89
block|,
literal|0x5BA4
block|,
literal|0x5948
block|,
literal|0x7F8E
block|,
literal|0x6075
block|,
literal|0x002D
block|,
literal|0x0077
block|,
literal|0x0069
block|,
literal|0x0074
block|,
literal|0x0068
block|,
literal|0x002D
block|,
literal|0x0053
block|,
literal|0x0055
block|,
literal|0x0050
block|,
literal|0x0045
block|,
literal|0x0052
block|,
literal|0x002D
block|,
literal|0x004D
block|,
literal|0x004F
block|,
literal|0x004E
block|,
literal|0x004B
block|,
literal|0x0045
block|,
literal|0x0059
block|,
literal|0x0053
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese2"
argument_list|)
operator|<<
literal|24
operator|<<
name|ushortarray
argument_list|(
name|d12
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"-with-SUPER-MONKEYS-pc58ag80a8qai00g7n9n"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d13
index|[]
init|=
block|{
literal|0x0048
block|,
literal|0x0065
block|,
literal|0x006C
block|,
literal|0x006C
block|,
literal|0x006F
block|,
literal|0x002D
block|,
literal|0x0041
block|,
literal|0x006E
block|,
literal|0x006F
block|,
literal|0x0074
block|,
literal|0x0068
block|,
literal|0x0065
block|,
literal|0x0072
block|,
literal|0x002D
block|,
literal|0x0057
block|,
literal|0x0061
block|,
literal|0x0079
block|,
literal|0x002D
block|,
literal|0x305D
block|,
literal|0x308C
block|,
literal|0x305E
block|,
literal|0x308C
block|,
literal|0x306E
block|,
literal|0x5834
block|,
literal|0x6240
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese3"
argument_list|)
operator|<<
literal|25
operator|<<
name|ushortarray
argument_list|(
name|d13
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"Hello-Another-Way--fc4qua05auwb3674vfr0b"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d14
index|[]
init|=
block|{
literal|0x3072
block|,
literal|0x3068
block|,
literal|0x3064
block|,
literal|0x5C4B
block|,
literal|0x6839
block|,
literal|0x306E
block|,
literal|0x4E0B
block|,
literal|0x0032
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese4"
argument_list|)
operator|<<
literal|8
operator|<<
name|ushortarray
argument_list|(
name|d14
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"2-u9tlzr9756bt3uc0v"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d15
index|[]
init|=
block|{
literal|0x004D
block|,
literal|0x0061
block|,
literal|0x006A
block|,
literal|0x0069
block|,
literal|0x3067
block|,
literal|0x004B
block|,
literal|0x006F
block|,
literal|0x0069
block|,
literal|0x3059
block|,
literal|0x308B
block|,
literal|0x0035
block|,
literal|0x79D2
block|,
literal|0x524D
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese5"
argument_list|)
operator|<<
literal|13
operator|<<
name|ushortarray
argument_list|(
name|d15
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"MajiKoi5-783gue6qz075azm5e"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d16
index|[]
init|=
block|{
literal|0x30D1
block|,
literal|0x30D5
block|,
literal|0x30A3
block|,
literal|0x30FC
block|,
literal|0x0064
block|,
literal|0x0065
block|,
literal|0x30EB
block|,
literal|0x30F3
block|,
literal|0x30D0
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese6"
argument_list|)
operator|<<
literal|9
operator|<<
name|ushortarray
argument_list|(
name|d16
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"de-jg4avhby1noc0d"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d17
index|[]
init|=
block|{
literal|0x305D
block|,
literal|0x306E
block|,
literal|0x30B9
block|,
literal|0x30D4
block|,
literal|0x30FC
block|,
literal|0x30C9
block|,
literal|0x3067
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Japanese7"
argument_list|)
operator|<<
literal|7
operator|<<
name|ushortarray
argument_list|(
name|d17
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"d9juau41awczczp"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d18
index|[]
init|=
block|{
literal|0x03b5
block|,
literal|0x03bb
block|,
literal|0x03bb
block|,
literal|0x03b7
block|,
literal|0x03bd
block|,
literal|0x03b9
block|,
literal|0x03ba
block|,
literal|0x03ac
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Greek"
argument_list|)
operator|<<
literal|8
operator|<<
name|ushortarray
argument_list|(
name|d18
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"hxargifdar"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d19
index|[]
init|=
block|{
literal|0x0062
block|,
literal|0x006f
block|,
literal|0x006e
block|,
literal|0x0121
block|,
literal|0x0075
block|,
literal|0x0073
block|,
literal|0x0061
block|,
literal|0x0127
block|,
literal|0x0127
block|,
literal|0x0061
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Maltese (Malti)"
argument_list|)
operator|<<
literal|10
operator|<<
name|ushortarray
argument_list|(
name|d19
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"bonusaa-5bb1da"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
name|unsigned
name|short
name|d20
index|[]
init|=
block|{
literal|0x043f
block|,
literal|0x043e
block|,
literal|0x0447
block|,
literal|0x0435
block|,
literal|0x043c
block|,
literal|0x0443
block|,
literal|0x0436
block|,
literal|0x0435
block|,
literal|0x043e
block|,
literal|0x043d
block|,
literal|0x0438
block|,
literal|0x043d
block|,
literal|0x0435
block|,
literal|0x0433
block|,
literal|0x043e
block|,
literal|0x0432
block|,
literal|0x043e
block|,
literal|0x0440
block|,
literal|0x044f
block|,
literal|0x0442
block|,
literal|0x043f
block|,
literal|0x043e
block|,
literal|0x0440
block|,
literal|0x0443
block|,
literal|0x0441
block|,
literal|0x0441
block|,
literal|0x043a
block|,
literal|0x0438
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Russian (Cyrillic)"
argument_list|)
operator|<<
literal|28
operator|<<
name|ushortarray
argument_list|(
name|d20
argument_list|)
operator|<<
name|QByteArray
argument_list|(
name|IDNA_ACE_PREFIX
literal|"b1abfaaepdrnnbgefbadotcwatmq2g4l"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|IDNA_SUCCESS
operator|<<
name|IDNA_SUCCESS
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|idna_testsuite
name|void
name|tst_QUrlInternal
operator|::
name|idna_testsuite
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|numchars
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushortarray
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|punycode
argument_list|)
expr_stmt|;
name|QString
name|result
decl_stmt|;
name|qt_punycodeEncoder
argument_list|(
operator|(
name|QChar
operator|*
operator|)
name|unicode
operator|.
name|points
argument_list|,
name|numchars
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|punycode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qt_punycodeDecoder
argument_list|(
name|result
argument_list|)
argument_list|,
name|QString
operator|::
name|fromUtf16
argument_list|(
name|unicode
operator|.
name|points
argument_list|,
name|numchars
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|nameprep_testsuite_data
name|void
name|tst_QUrlInternal
operator|::
name|nameprep_testsuite_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"profile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rc"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Map to nothing"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\xC2\xAD\xCD\x8F\xE1\xA0\x86\xE1\xA0\x8B"
literal|"bar"
literal|"\xE2\x80\x8B\xE2\x81\xA0"
literal|"baz\xEF\xB8\x80\xEF\xB8\x88"
literal|"\xEF\xB8\x8F\xEF\xBB\xBF"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foobarbaz"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding ASCII U+0043 U+0041 U+0046 U+0045"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"CAFE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"cafe"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding 8bit U+00DF (german sharp s)"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC3\x9F"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ss"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding U+0130 (turkish capital I with dot)"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC4\xB0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"i\xcc\x87"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding multibyte U+0143 U+037A"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC5\x83\xCD\xBA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC5\x84 \xCE\xB9"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding U+2121 U+33C6 U+1D7BB"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\x84\xA1\xE3\x8F\x86\xF0\x9D\x9E\xBB"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"telc\xE2\x88\x95"
literal|"kg\xCF\x83"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Normalization of U+006a U+030c U+00A0 U+00AA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x6A\xCC\x8C\xC2\xA0\xC2\xAA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC7\xB0 a"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Case folding U+1FB7 and normalization"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBE\xB7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBE\xB6\xCE\xB9"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Self-reverting case folding U+01F0 and normalization"
argument_list|)
comment|//<< QString::fromUtf8("\xC7\xF0") ### typo in the original testsuite
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC7\xB0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC7\xB0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Self-reverting case folding U+0390 and normalization"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCE\x90"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCE\x90"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Self-reverting case folding U+03B0 and normalization"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCE\xB0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCE\xB0"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Self-reverting case folding U+1E96 and normalization"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBA\x96"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBA\x96"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Self-reverting case folding U+1F56 and normalization"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBD\x96"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xBD\x96"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ASCII space character U+0020"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x20"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x20"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII 8bit space character U+00A0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC2\xA0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x20"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII multibyte space character U+1680"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\x9A\x80"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII multibyte space character U+2000"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\x80\x80"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x20"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Zero Width Space U+200b"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\x80\x8b"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII multibyte space character U+3000"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE3\x80\x80"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x20"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ASCII control characters U+0010 U+007F"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x10\x7F"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\x10\x7F"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII 8bit control character U+0085"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC2\x85"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII multibyte control character U+180E"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE1\xA0\x8E"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Zero Width No-Break Space U+FEFF"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xEF\xBB\xBF"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-ASCII control character U+1D175"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF0\x9D\x85\xB5"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plane 0 private use character U+F123"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xEF\x84\xA3"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plane 15 private use character U+F1234"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF3\xB1\x88\xB4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Plane 16 private use character U+10F234"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF4\x8F\x88\xB4"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-character code point U+8FFFE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF2\x8F\xBF\xBE"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-character code point U+10FFFF"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF4\x8F\xBF\xBF"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Surrogate code U+DF42"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xED\xBD\x82"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Non-plain text character U+FFFD"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xEF\xBF\xBD"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ideographic description character U+2FF5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\xBF\xB5"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Display property character U+0341"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCD\x81"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCC\x81"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Left-to-right mark U+200E"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\x80\x8E"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCC\x81"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Deprecated U+202A"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xE2\x80\xAA"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCC\x81"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Language tagging character U+E0001"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF3\xA0\x80\x81"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xCC\x81"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Language tagging character U+E0042"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF3\xA0\x81\x82"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_CONTAINS_PROHIBITED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bidi: RandALCat character U+05BE and LCat characters"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\xD6\xBE"
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_BIDI_BOTH_L_AND_RAL
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bidi: RandALCat character U+FD50 and LCat characters"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\xEF\xB5\x90"
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_BIDI_BOTH_L_AND_RAL
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bidi: RandALCat character U+FB38 and LCat characters"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\xEF\xB9\xB6"
literal|"bar"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo \xd9\x8e"
literal|"bar"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bidi: RandALCat without trailing RandALCat U+0627 U+0031"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xD8\xA7\x31"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
name|STRINGPREP_BIDI_LEADTRAIL_NOT_RAL
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Bidi: RandALCat character U+0627 U+0031 U+0628"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xD8\xA7\x31\xD8\xA8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xD8\xA7\x31\xD8\xA8"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Unassigned code point U+E0002"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xF3\xA0\x80\x82"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
name|STRINGPREP_NO_UNASSIGNED
operator|<<
name|STRINGPREP_CONTAINS_UNASSIGNED
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Larger test (shrinking)"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"X\xC2\xAD\xC3\x9F\xC4\xB0\xE2\x84\xA1\x6a\xcc\x8c\xc2\xa0\xc2"
literal|"\xaa\xce\xb0\xe2\x80\x80"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"xssi\xcc\x87"
literal|"tel\xc7\xb0 a\xce\xb0 "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Nameprep"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Larger test (expanding)"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"X\xC3\x9F\xe3\x8c\x96\xC4\xB0\xE2\x84\xA1\xE2\x92\x9F\xE3\x8c\x80"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"xss\xe3\x82\xad\xe3\x83\xad\xe3\x83\xa1\xe3\x83\xbc\xe3\x83\x88"
literal|"\xe3\x83\xab"
literal|"i\xcc\x87"
literal|"tel\x28"
literal|"d\x29\xe3\x82\xa2\xe3\x83\x91"
literal|"\xe3\x83\xbc\xe3\x83\x88"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|nameprep_testsuite
name|void
name|tst_QUrlInternal
operator|::
name|nameprep_testsuite
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Left-to-right mark U+200E"
argument_list|,
literal|"Investigate further"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Deprecated U+202A"
argument_list|,
literal|"Investigate further"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"Language tagging character U+E0001"
argument_list|,
literal|"Investigate further"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|qt_nameprep
argument_list|(
operator|&
name|in
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|nameprep_highcodes_data
name|void
name|tst_QUrlInternal
operator|::
name|nameprep_highcodes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"profile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rc"
argument_list|)
expr_stmt|;
block|{
name|QChar
name|st
index|[]
init|=
block|{
literal|'-'
block|,
literal|0xd801
block|,
literal|0xdc1d
block|,
literal|'a'
block|}
decl_stmt|;
name|QChar
name|se
index|[]
init|=
block|{
literal|'-'
block|,
literal|0xd801
block|,
literal|0xdc45
block|,
literal|'a'
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highcodes (U+1041D)"
argument_list|)
operator|<<
name|QString
argument_list|(
name|st
argument_list|,
sizeof|sizeof
argument_list|(
name|st
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|st
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|se
argument_list|,
sizeof|sizeof
argument_list|(
name|se
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|se
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|QChar
name|st
index|[]
init|=
block|{
literal|0x011C
block|,
literal|0xd835
block|,
literal|0xdf6e
block|,
literal|0x0110
block|}
decl_stmt|;
name|QChar
name|se
index|[]
init|=
block|{
literal|0x011D
block|,
literal|0x03C9
block|,
literal|0x0111
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highcodes (U+1D76E)"
argument_list|)
operator|<<
name|QString
argument_list|(
name|st
argument_list|,
sizeof|sizeof
argument_list|(
name|st
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|st
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|se
argument_list|,
sizeof|sizeof
argument_list|(
name|se
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|se
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
block|{
name|QChar
name|st
index|[]
init|=
block|{
literal|'D'
block|,
literal|0xdb40
block|,
literal|0xdc20
block|,
literal|'o'
block|,
literal|0xd834
block|,
literal|0xdd7a
block|,
literal|'\''
block|,
literal|0x2060
block|,
literal|'h'
block|}
decl_stmt|;
name|QChar
name|se
index|[]
init|=
block|{
literal|'d'
block|,
literal|'o'
block|,
literal|'\''
block|,
literal|'h'
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highcodes (D, U+E0020, o, U+1D17A, ', U+2060, h)"
argument_list|)
operator|<<
name|QString
argument_list|(
name|st
argument_list|,
sizeof|sizeof
argument_list|(
name|st
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|st
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|(
name|se
argument_list|,
sizeof|sizeof
argument_list|(
name|se
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|se
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|nameprep_highcodes
name|void
name|tst_QUrlInternal
operator|::
name|nameprep_highcodes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|profile
argument_list|)
expr_stmt|;
name|qt_nameprep
argument_list|(
operator|&
name|in
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|ace_testsuite_data
name|void
name|tst_QUrlInternal
operator|::
name|ace_testsuite_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"toace"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fromace"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"unicode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii-lower"
argument_list|)
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii-mixed"
argument_list|)
operator|<<
literal|"FLuke"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ascii-upper"
argument_list|)
operator|<<
literal|"FLUKE"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
operator|<<
literal|"fluke"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"asciifolded"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"stra\337e"
argument_list|)
operator|<<
literal|"strasse"
operator|<<
literal|"."
operator|<<
literal|"strasse"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"asciifolded-dotcom"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"stra\337e.example.com"
argument_list|)
operator|<<
literal|"strasse.example.com"
operator|<<
literal|"."
operator|<<
literal|"strasse.example.com"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"greek-mu"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\265V"
argument_list|)
operator|<<
literal|"xn--v-lmb"
operator|<<
literal|"."
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\316\274v"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-ascii-lower"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
literal|"xn--alqualond-34a"
operator|<<
literal|"."
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-ascii-mixed"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Alqualond\353"
argument_list|)
operator|<<
literal|"xn--alqualond-34a"
operator|<<
literal|"."
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-ascii-upper"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ALQUALOND\313"
argument_list|)
operator|<<
literal|"xn--alqualond-34a"
operator|<<
literal|"."
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-lower"
argument_list|)
operator|<<
literal|"xn--alqualond-34a"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-mixed"
argument_list|)
operator|<<
literal|"Xn--alqualond-34a"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-mixed2"
argument_list|)
operator|<<
literal|"XN--alqualond-34a"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-mixed3"
argument_list|)
operator|<<
literal|"xn--ALQUALOND-34a"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-mixed4"
argument_list|)
operator|<<
literal|"xn--alqualond-34A"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-upper"
argument_list|)
operator|<<
literal|"XN--ALQUALOND-34A"
operator|<<
literal|"xn--alqualond-34a"
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"separator-3002"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"example\343\200\202com"
argument_list|)
operator|<<
literal|"example.com"
operator|<<
literal|"."
operator|<<
literal|"example.com"
expr_stmt|;
name|QString
name|egyptianIDN
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\331\210\330\262\330\247\330\261\330\251\055\330\247\331\204\330"
literal|"\243\330\252\330\265\330\247\331\204\330\247\330\252.\331\205"
literal|"\330\265\330\261"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"egyptian-tld-ace"
argument_list|)
operator|<<
literal|"xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c"
operator|<<
literal|"xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c"
operator|<<
literal|"."
operator|<<
name|egyptianIDN
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"egyptian-tld-unicode"
argument_list|)
operator|<<
name|egyptianIDN
operator|<<
literal|"xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c"
operator|<<
literal|"."
operator|<<
name|egyptianIDN
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"egyptian-tld-mix1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\331\210\330\262\330\247\330\261\330\251\055\330\247\331\204\330"
literal|"\243\330\252\330\265\330\247\331\204\330\247\330\252.xn--wgbh1c"
argument_list|)
operator|<<
literal|"xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c"
operator|<<
literal|"."
operator|<<
name|egyptianIDN
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"egyptian-tld-mix2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"xn----rmckbbajlc6dj7bxne2c.\331\205\330\265\330\261"
argument_list|)
operator|<<
literal|"xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c"
operator|<<
literal|"."
operator|<<
name|egyptianIDN
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ace_testsuite
name|void
name|tst_QUrlInternal
operator|::
name|ace_testsuite
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|canonsuffix
index|[]
init|=
literal|".troll.no"
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|toace
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fromace
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|unicode
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|suffix
init|=
name|canonsuffix
decl_stmt|;
if|if
condition|(
name|toace
operator|.
name|contains
argument_list|(
literal|'.'
argument_list|)
condition|)
name|suffix
operator|=
literal|0
expr_stmt|;
name|QString
name|domain
init|=
name|in
operator|+
name|suffix
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|toace
operator|+
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromace
operator|!=
literal|"."
condition|)
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|domain
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|fromace
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|unicode
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|domain
operator|=
name|in
operator|+
operator|(
name|suffix
condition|?
literal|".troll.No"
else|:
literal|""
operator|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|toace
operator|+
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromace
operator|!=
literal|"."
condition|)
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|domain
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|fromace
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|unicode
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|domain
operator|=
name|in
operator|+
operator|(
name|suffix
condition|?
literal|".troll.NO"
else|:
literal|""
operator|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|toace
operator|+
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromace
operator|!=
literal|"."
condition|)
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|domain
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|fromace
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QUrl
operator|::
name|fromAce
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|domain
argument_list|)
argument_list|)
argument_list|,
name|unicode
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|std3violations_data
name|void
name|tst_QUrlInternal
operator|::
name|std3violations_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"validUrl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"too-long"
argument_list|)
operator|<<
literal|"this-domain-is-far-too-long-for-its-own-good-and-should-have-been-limited-to-63-chars"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dash-begin"
argument_list|)
operator|<<
literal|"-x-foo"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dash-end"
argument_list|)
operator|<<
literal|"x-foo-"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dash-begin-end"
argument_list|)
operator|<<
literal|"-foo-"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control"
argument_list|)
operator|<<
literal|"\033foo"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bang"
argument_list|)
operator|<<
literal|"foo!"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"plus"
argument_list|)
operator|<<
literal|"foo+bar"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dot"
argument_list|)
operator|<<
literal|"foo.bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"startingdot"
argument_list|)
operator|<<
literal|".bar"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"startingdot2"
argument_list|)
operator|<<
literal|".example.com"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash"
argument_list|)
operator|<<
literal|"foo/bar"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"colon"
argument_list|)
operator|<<
literal|"foo:80"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"question"
argument_list|)
operator|<<
literal|"foo?bar"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"at"
argument_list|)
operator|<<
literal|"foo@bar"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"backslash"
argument_list|)
operator|<<
literal|"foo\\bar"
operator|<<
literal|false
expr_stmt|;
comment|// these characters are transformed by NFKC to non-LDH characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dot-like"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\342\200\244bar"
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// U+2024 ONE DOT LEADER
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash-like"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"foo\357\274\217bar"
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// U+FF0F FULLWIDTH SOLIDUS
comment|// The following should be invalid but isn't
comment|// the DIVISON SLASH doesn't case-fold to a slash
comment|// is this a problem with RFC 3490?
comment|//QTest::newRow("slash-like2")<< QString::fromUtf8("foo\342\210\225bar")<< false; // U+2215 DIVISION SLASH
block|}
end_function
begin_function
DECL|function|std3violations
name|void
name|tst_QUrlInternal
operator|::
name|std3violations
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|source
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
block|{
name|QString
name|prepped
init|=
name|source
decl_stmt|;
name|qt_nameprep
argument_list|(
operator|&
name|prepped
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qt_check_std3rules
argument_list|(
name|prepped
operator|.
name|constData
argument_list|()
argument_list|,
name|prepped
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|source
operator|.
name|contains
argument_list|(
literal|'.'
argument_list|)
condition|)
return|return;
comment|// this test ends here
name|QUrl
name|url
decl_stmt|;
name|url
operator|.
name|setHost
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|url
operator|.
name|host
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|validUrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|validUrl
condition|)
return|return;
comment|// test ends here for these cases
name|url
operator|=
name|QUrl
argument_list|(
literal|"http://"
operator|+
name|source
operator|+
literal|"/some/path"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|url
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|std3deviations_data
name|void
name|tst_QUrlInternal
operator|::
name|std3deviations_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending-dot"
argument_list|)
operator|<<
literal|"example.com."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending-dot3002"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"example.com"
argument_list|)
operator|+
name|QChar
argument_list|(
literal|0x3002
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"underline"
argument_list|)
operator|<<
literal|"foo_bar"
expr_stmt|;
comment|//QTBUG-7434
block|}
end_function
begin_function
DECL|function|std3deviations
name|void
name|tst_QUrlInternal
operator|::
name|std3deviations
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QUrl
operator|::
name|toAce
argument_list|(
name|source
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QUrl
name|url
decl_stmt|;
name|url
operator|.
name|setHost
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|url
operator|.
name|host
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|correctEncodedMistakes_data
name|void
name|tst_QUrlInternal
operator|::
name|correctEncodedMistakes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
comment|// these contain one invalid percent
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"%25"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"3%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"3%25"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%!"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%!"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25!"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%!!"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%!!"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25!!"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%az"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%az"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25az"
argument_list|)
expr_stmt|;
comment|// two invalid percents
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%%"
argument_list|)
operator|<<
literal|"13%%"
operator|<<
literal|"13%25%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%a%a"
argument_list|)
operator|<<
literal|"13%a%a"
operator|<<
literal|"13%25a%25a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%az%az"
argument_list|)
operator|<<
literal|"13%az%az"
operator|<<
literal|"13%25az%25az"
expr_stmt|;
comment|// these are correct (idempotent)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%25%25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25%25"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"13%25%25"
argument_list|)
expr_stmt|;
comment|// these contain one invalid and one valid
comment|// the code assumes they are all invalid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%13..%"
argument_list|)
operator|<<
literal|"13%13..%"
operator|<<
literal|"13%2513..%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13%..%13"
argument_list|)
operator|<<
literal|"13%..%13"
operator|<<
literal|"13%25..%2513"
expr_stmt|;
comment|// three percents, one invalid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%01%02%3"
argument_list|)
operator|<<
literal|"%01%02%3"
operator|<<
literal|"%2501%2502%253"
expr_stmt|;
comment|// now mix bad percents with Unicode decoding
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%C2%"
argument_list|)
operator|<<
literal|"%C2%"
operator|<<
literal|"%25C2%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%C2%A"
argument_list|)
operator|<<
literal|"%C2%A"
operator|<<
literal|"%25C2%25A"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%C2%Az"
argument_list|)
operator|<<
literal|"%C2%Az"
operator|<<
literal|"%25C2%25Az"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%E2%A0%"
argument_list|)
operator|<<
literal|"%E2%A0%"
operator|<<
literal|"%25E2%25A0%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%E2%A0%A"
argument_list|)
operator|<<
literal|"%E2%A0%A"
operator|<<
literal|"%25E2%25A0%25A"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%E2%A0%Az"
argument_list|)
operator|<<
literal|"%E2%A0%Az"
operator|<<
literal|"%25E2%25A0%25Az"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%F2%A0%A0%"
argument_list|)
operator|<<
literal|"%F2%A0%A0%"
operator|<<
literal|"%25F2%25A0%25A0%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%F2%A0%A0%A"
argument_list|)
operator|<<
literal|"%F2%A0%A0%A"
operator|<<
literal|"%25F2%25A0%25A0%25A"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"%F2%A0%A0%Az"
argument_list|)
operator|<<
literal|"%F2%A0%A0%Az"
operator|<<
literal|"%25F2%25A0%25A0%25Az"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|correctEncodedMistakes
name|void
name|tst_QUrlInternal
operator|::
name|correctEncodedMistakes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// prepend some data to be sure that it remains there
name|QString
name|output
init|=
name|QTest
operator|::
name|currentDataTag
argument_list|()
decl_stmt|;
name|expected
operator|.
name|prepend
argument_list|(
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_urlRecode
argument_list|(
name|output
argument_list|,
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|input
operator|.
name|constData
argument_list|()
operator|+
name|input
operator|.
name|length
argument_list|()
argument_list|,
literal|0
argument_list|)
condition|)
name|output
operator|+=
name|input
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addUtf8Data
specifier|static
name|void
name|addUtf8Data
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
name|QString
name|encoded
init|=
name|QByteArray
argument_list|(
name|data
argument_list|)
operator|.
name|toPercentEncoding
argument_list|()
decl_stmt|;
name|QString
name|decoded
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|data
argument_list|)
decl_stmt|;
comment|// this data contains invaild UTF-8 sequences, so FullyDecoded doesn't work (by design)
comment|// use PrettyDecoded instead
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"decode-"
argument_list|)
operator|+
name|name
argument_list|)
operator|<<
name|encoded
operator|<<
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|decoded
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"encode-"
argument_list|)
operator|+
name|name
argument_list|)
operator|<<
name|decoded
operator|<<
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
name|encoded
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodingRecode_data
name|void
name|tst_QUrlInternal
operator|::
name|encodingRecode_data
parameter_list|()
block|{
typedef|typedef
name|QUrl
operator|::
name|ComponentFormattingOptions
name|F
typedef|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|F
argument_list|>
argument_list|(
literal|"encodingMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
comment|// -- idempotent tests --
specifier|static
name|int
name|modes
index|[]
init|=
block|{
name|QUrl
operator|::
name|PrettyDecoded
block|,
name|QUrl
operator|::
name|EncodeSpaces
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeDelimiters
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeSpaces
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeUnicode
block|,
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
block|,
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeUnicode
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeDelimiters
block|,
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|EncodeDelimiters
operator||
name|QUrl
operator|::
name|DecodeReserved
block|,
name|QUrl
operator|::
name|EncodeReserved
block|,
name|QUrl
operator|::
name|DecodeReserved
block|}
decl_stmt|;
for|for
control|(
name|uint
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|modes
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|modes
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QByteArray
name|code
init|=
name|QByteArray
operator|::
name|number
argument_list|(
name|modes
index|[
name|i
index|]
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|F
name|mode
init|=
name|QUrl
operator|::
name|ComponentFormattingOption
argument_list|(
name|modes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-0x"
operator|+
name|code
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|mode
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|""
operator|<<
name|mode
operator|<<
literal|""
expr_stmt|;
comment|//    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
comment|// Unreserved characters are never encoded
name|QTest
operator|::
name|newRow
argument_list|(
literal|"alpha-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"abcABCZZzz"
operator|<<
name|mode
operator|<<
literal|"abcABCZZzz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"digits-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"01234567890"
operator|<<
name|mode
operator|<<
literal|"01234567890"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"otherunreserved-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"-._~"
operator|<<
name|mode
operator|<<
literal|"-._~"
expr_stmt|;
comment|// Control characters are always encoded
comment|// Use uppercase because the output is also uppercased
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-nul-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"%00"
operator|<<
name|mode
operator|<<
literal|"%00"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"%0D%0A%1F%1A%7F"
operator|<<
name|mode
operator|<<
literal|"%0D%0A%1F%1A%7F"
expr_stmt|;
comment|// The percent is always encoded
name|QTest
operator|::
name|newRow
argument_list|(
literal|"percent-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"25%2525"
operator|<<
name|mode
operator|<<
literal|"25%2525"
expr_stmt|;
comment|// mixed control and unreserved
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-unreserved-0x"
operator|+
name|code
argument_list|)
operator|<<
literal|"Foo%00Bar%0D%0Abksp%7F"
operator|<<
name|mode
operator|<<
literal|"Foo%00Bar%0D%0Abksp%7F"
expr_stmt|;
block|}
comment|// however, control characters and the percent *are* decoded in FullyDecoded mode
comment|// this is the only exception
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-nul-fullydecoded"
argument_list|)
operator|<<
literal|"%00"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyDecoded
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"\0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-fullydecoded"
argument_list|)
operator|<<
literal|"%0D%0A%1F%1A%7F"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyDecoded
argument_list|)
operator|<<
literal|"\r\n\x1f\x1a\x7f"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"percent-fullydecoded"
argument_list|)
operator|<<
literal|"25%2525"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyDecoded
argument_list|)
operator|<<
literal|"25%25"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"control-unreserved-fullydecoded"
argument_list|)
operator|<<
literal|"Foo%00Bar%0D%0Abksp%7F"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyDecoded
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"Foo\0Bar\r\nbksp\x7F"
argument_list|)
expr_stmt|;
comment|//    gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
comment|//    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
comment|//                  / "*" / "+" / "," / ";" / "="
comment|// in the default operation, delimiters don't get encoded or decoded
specifier|static
specifier|const
name|char
name|delimiters
index|[]
init|=
literal|":/?#[]@"
literal|"!$&'()*+,;="
decl_stmt|;
for|for
control|(
specifier|const
name|char
modifier|*
name|c
init|=
name|delimiters
init|;
operator|*
name|c
condition|;
operator|++
name|c
control|)
block|{
name|QByteArray
name|code
init|=
name|QByteArray
operator|::
name|number
argument_list|(
operator|*
name|c
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|QString
name|encoded
init|=
name|QString
argument_list|(
literal|"abc%"
argument_list|)
operator|+
name|code
operator|.
name|toUpper
argument_list|()
operator|+
literal|"def"
decl_stmt|;
name|QString
name|decoded
init|=
name|QString
argument_list|(
literal|"abc"
argument_list|)
operator|+
operator|*
name|c
operator|+
literal|"def"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delimiter-encoded-"
operator|+
name|code
argument_list|)
operator|<<
name|encoded
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
name|encoded
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delimiter-decoded-"
operator|+
name|code
argument_list|)
operator|<<
name|decoded
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
name|decoded
expr_stmt|;
block|}
comment|// encode control characters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-control"
argument_list|)
operator|<<
literal|"\1abc\2\033esc"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%01abc%02%1Besc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-nul"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abc\0def"
argument_list|,
literal|7
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"abc%00def"
expr_stmt|;
comment|// space
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-leave-decoded"
argument_list|)
operator|<<
literal|"Hello World "
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"Hello World "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-leave-encoded"
argument_list|)
operator|<<
literal|"Hello%20World%20"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"Hello%20World%20"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-encode"
argument_list|)
operator|<<
literal|"Hello World "
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"Hello%20World%20"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-decode"
argument_list|)
operator|<<
literal|"Hello%20World%20"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"Hello World "
expr_stmt|;
comment|// decode unreserved
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unreserved-decode"
argument_list|)
operator|<<
literal|"%66%6f%6f%42a%72"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"fooBar"
expr_stmt|;
comment|// mix encoding with decoding
name|QTest
operator|::
name|newRow
argument_list|(
literal|"encode-control-decode-space"
argument_list|)
operator|<<
literal|"\1\2%200"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|"%01%02 0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"decode-space-encode-control"
argument_list|)
operator|<<
literal|"%20\1\2"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
literal|" %01%02"
expr_stmt|;
comment|// decode and encode valid UTF-8 data
comment|// invalid is tested in encodingRecodeInvalidUtf8
name|addUtf8Data
argument_list|(
literal|"utf8-2char-1"
argument_list|,
literal|"\xC2\x80"
argument_list|)
expr_stmt|;
comment|// U+0080
name|addUtf8Data
argument_list|(
literal|"utf8-2char-2"
argument_list|,
literal|"\xDF\xBF"
argument_list|)
expr_stmt|;
comment|// U+07FF
name|addUtf8Data
argument_list|(
literal|"utf8-3char-1"
argument_list|,
literal|"\xE0\xA0\x80"
argument_list|)
expr_stmt|;
comment|// U+0800
name|addUtf8Data
argument_list|(
literal|"utf8-3char-2"
argument_list|,
literal|"\xED\x9F\xBF"
argument_list|)
expr_stmt|;
comment|// U+D7FF
name|addUtf8Data
argument_list|(
literal|"utf8-3char-3"
argument_list|,
literal|"\xEE\x80\x80"
argument_list|)
expr_stmt|;
comment|// U+E000
name|addUtf8Data
argument_list|(
literal|"utf8-3char-4"
argument_list|,
literal|"\xEF\xBF\xBD"
argument_list|)
expr_stmt|;
comment|// U+FFFD
name|addUtf8Data
argument_list|(
literal|"utf8-4char-1"
argument_list|,
literal|"\xF0\x90\x80\x80"
argument_list|)
expr_stmt|;
comment|// U+10000
name|addUtf8Data
argument_list|(
literal|"utf8-4char-2"
argument_list|,
literal|"\xF4\x8F\xBF\xBD"
argument_list|)
expr_stmt|;
comment|// U+10FFFD
comment|// longer UTF-8 sequences, mixed with unreserved
name|addUtf8Data
argument_list|(
literal|"utf8-string-1"
argument_list|,
literal|"R\xc3\xa9sum\xc3\xa9"
argument_list|)
expr_stmt|;
name|addUtf8Data
argument_list|(
literal|"utf8-string-2"
argument_list|,
literal|"\xDF\xBF\xE0\xA0\x80"
literal|"A"
argument_list|)
expr_stmt|;
name|addUtf8Data
argument_list|(
literal|"utf8-string-3"
argument_list|,
literal|"\xE0\xA0\x80\xDF\xBF..."
argument_list|)
expr_stmt|;
comment|// special cases: stuff we can encode, but not decode
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode-noncharacter"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xffff
argument_list|)
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%EF%BF%BF"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode-lo-surrogate"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xD800
argument_list|)
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%ED%A0%80"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unicode-hi-surrogate"
argument_list|)
operator|<<
name|QString
argument_list|(
name|QChar
argument_list|(
literal|0xDC00
argument_list|)
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%ED%B0%80"
expr_stmt|;
comment|// a couple of Unicode strings with leading spaces
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-unicode"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|" \xc2\xa0"
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%20%C2%A0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-space-unicode"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"  \xc2\xa0"
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%20%20%C2%A0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"space-space-space-unicode"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"   \xc2\xa0"
argument_list|)
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%20%20%20%C2%A0"
expr_stmt|;
comment|// hex case testing
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FF"
argument_list|)
operator|<<
literal|"%FF"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%FF"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Ff"
argument_list|)
operator|<<
literal|"%Ff"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%FF"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fF"
argument_list|)
operator|<<
literal|"%fF"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%FF"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ff"
argument_list|)
operator|<<
literal|"%ff"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|<<
literal|"%FF"
expr_stmt|;
comment|// decode UTF-8 mixed with non-UTF-8 and unreserved
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-1"
argument_list|)
operator|<<
literal|"%80%C2%80"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"%80\xC2\x80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-2"
argument_list|)
operator|<<
literal|"%C2%C2%80"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"%C2\xC2\x80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-3"
argument_list|)
operator|<<
literal|"%E0%C2%80"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"%E0\xC2\x80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-3"
argument_list|)
operator|<<
literal|"A%C2%80"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"A\xC2\x80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-3"
argument_list|)
operator|<<
literal|"%C2%80A"
operator|<<
name|F
argument_list|(
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"\xC2\x80"
literal|"A"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodingRecode
name|void
name|tst_QUrlInternal
operator|::
name|encodingRecode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
operator|::
name|ComponentFormattingOptions
argument_list|,
name|encodingMode
argument_list|)
expr_stmt|;
comment|// prepend some data to be sure that it remains there
name|QString
name|output
init|=
name|QTest
operator|::
name|currentDataTag
argument_list|()
decl_stmt|;
name|expected
operator|.
name|prepend
argument_list|(
name|output
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qt_urlRecode
argument_list|(
name|output
argument_list|,
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|input
operator|.
name|constData
argument_list|()
operator|+
name|input
operator|.
name|length
argument_list|()
argument_list|,
name|encodingMode
argument_list|)
condition|)
name|output
operator|+=
name|input
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodingRecodeInvalidUtf8_data
name|void
name|tst_QUrlInternal
operator|::
name|encodingRecodeInvalidUtf8_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"utf8"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"utf16"
argument_list|)
expr_stmt|;
specifier|extern
name|void
name|loadInvalidUtf8Rows
argument_list|()
decl_stmt|;
name|loadInvalidUtf8Rows
argument_list|()
expr_stmt|;
specifier|extern
name|void
name|loadNonCharactersRows
argument_list|()
decl_stmt|;
name|loadNonCharactersRows
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xE0.A2\x80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xE0\xA2.80"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"utf8-mix-6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xE0\xA2\x33"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|encodingRecodeInvalidUtf8
name|void
name|tst_QUrlInternal
operator|::
name|encodingRecodeInvalidUtf8
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|utf8
argument_list|)
expr_stmt|;
name|QString
name|input
init|=
name|utf8
operator|.
name|toPercentEncoding
argument_list|()
decl_stmt|;
comment|// prepend some data to be sure that it remains there
name|QString
name|output
init|=
name|QTest
operator|::
name|currentDataTag
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|qt_urlRecode
argument_list|(
name|output
argument_list|,
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|input
operator|.
name|constData
argument_list|()
operator|+
name|input
operator|.
name|length
argument_list|()
argument_list|,
name|QUrl
operator|::
name|PrettyDecoded
argument_list|)
condition|)
name|output
operator|+=
name|input
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|QTest
operator|::
name|currentDataTag
argument_list|()
operator|+
name|input
argument_list|)
expr_stmt|;
comment|// this is just control
name|output
operator|=
name|QTest
operator|::
name|currentDataTag
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|qt_urlRecode
argument_list|(
name|output
argument_list|,
name|input
operator|.
name|constData
argument_list|()
argument_list|,
name|input
operator|.
name|constData
argument_list|()
operator|+
name|input
operator|.
name|length
argument_list|()
argument_list|,
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
condition|)
name|output
operator|+=
name|input
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|QTest
operator|::
name|currentDataTag
argument_list|()
operator|+
name|input
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recodeByteArray_data
name|void
name|tst_QUrlInternal
operator|::
name|recodeByteArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
literal|"Hello"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid-utf8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc3\xa9"
argument_list|)
operator|<<
literal|"%C3%A9"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"percent-encoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"%C3%A9%00%C0%80"
argument_list|)
operator|<<
literal|"%C3%A9%00%C0%80"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-utf8-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc3\xc3"
argument_list|)
operator|<<
literal|"%C3%C3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-utf8-2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc0\x80"
argument_list|)
operator|<<
literal|"%C0%80"
expr_stmt|;
comment|// note: percent-encoding the control characters ("\0" -> "%00") would also
comment|// be correct, but it's unnecessary for this function
name|QTest
operator|::
name|newRow
argument_list|(
literal|"binary"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0\x1f"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\0\x1f"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
empty_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"binary+percent-encoded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\0%25"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\0%25"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recodeByteArray
name|void
name|tst_QUrlInternal
operator|::
name|recodeByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|qt_urlRecodeByteArray
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|output
operator|.
name|isNull
argument_list|()
argument_list|,
name|input
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|input
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QUrlInternal
argument_list|)
end_macro
end_unit
