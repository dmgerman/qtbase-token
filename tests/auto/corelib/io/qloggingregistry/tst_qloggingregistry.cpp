begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qloggingregistry_p.h>
end_include
begin_decl_stmt
name|QT_USE_NAMESPACE
DECL|enum|LoggingRuleState
name|enum
name|LoggingRuleState
argument_list|{
DECL|enumerator|Invalid
name|Invalid
argument_list|,
DECL|enumerator|Match
name|Match
argument_list|,
DECL|enumerator|NoMatch
name|NoMatch
argument_list|}
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|LoggingRuleState
name|Q_DECLARE_METATYPE
argument_list|(
name|LoggingRuleState
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|QtMsgType
name|Q_DECLARE_METATYPE
argument_list|(
name|QtMsgType
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|tst_QLoggingRegistry
class|class
name|tst_QLoggingRegistry
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
comment|// ensure a clean environment
name|QStandardPaths
operator|::
name|setTestModeEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qunsetenv
argument_list|(
literal|"QT_LOGGING_CONF"
argument_list|)
expr_stmt|;
name|qunsetenv
argument_list|(
literal|"QT_LOGGING_RULES"
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRule_parse_data
name|void
name|QLoggingRule_parse_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"category"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QtMsgType
argument_list|>
argument_list|(
literal|"msgType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|LoggingRuleState
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// _empty_ should match (only) _empty_
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_empty_-_empty_"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_empty_-default"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".debug-_empty_"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".warning-default"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
comment|// literal should match only literal
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-_empty_"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-qtx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qtx"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt.debug-qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt.critical-qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.critical"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
comment|// * should match everything
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_-qt.io.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_-qt.io.warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtWarningMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_-qt.io.critical"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtCriticalMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_-_empty_"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.debug-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.warning-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
comment|// qt.* should match everything starting with 'qt.'
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt._star_-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt._star_-qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt__star_-qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt._star_-qt.io.fs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io.fs"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt._star_.debug-qt.io.fs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io.fs"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt._star_.warning-qt.io.fs"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*.warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io.fs"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
comment|// *.io should match everything ending with .io
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_io-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io-io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_io-io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io-qt.ios"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.ios"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io-qt.io.x"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io.x"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io.debug-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.io.warning-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.io.warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
comment|// *qt* should match everything that contains 'qt'
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_qt_star_-qt.core.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*qt*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.core.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_qt_star_-default"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*qt*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_qt._star_.debug-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*qt.*.debug"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"_star_.qt._star_.warning-qt.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"*.qt.*.warning"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|NoMatch
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"**"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"**"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.core.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Match
expr_stmt|;
comment|// * outside of start/end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt.*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.*.io"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.core.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Invalid
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"***"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"***"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qt.core.io"
argument_list|)
operator|<<
name|QtDebugMsg
operator|<<
name|Invalid
expr_stmt|;
block|}
DECL|function|QLoggingRule_parse
name|void
name|QLoggingRule_parse
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|category
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QtMsgType
argument_list|,
name|msgType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|LoggingRuleState
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QLoggingRule
name|rule
argument_list|(
name|QStringRef
argument_list|(
operator|&
name|pattern
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LoggingRuleState
name|state
init|=
name|Invalid
decl_stmt|;
if|if
condition|(
name|rule
operator|.
name|flags
operator|!=
literal|0
condition|)
block|{
switch|switch
condition|(
name|rule
operator|.
name|pass
argument_list|(
name|category
argument_list|,
name|msgType
argument_list|)
condition|)
block|{
case|case
operator|-
literal|1
case|:
name|QFAIL
argument_list|(
literal|"Shoudn't happen, we set pattern to true"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0
case|:
name|state
operator|=
name|NoMatch
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|state
operator|=
name|Match
expr_stmt|;
break|break;
block|}
block|}
name|QCOMPARE
argument_list|(
name|state
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingSettingsParser_iniStyle
name|void
name|QLoggingSettingsParser_iniStyle
parameter_list|()
block|{
comment|//
comment|// Logging configuration can be described
comment|// in an .ini file. [Rules] is the
comment|// default category, and optional ...
comment|//
name|QLoggingSettingsParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\n"
literal|"default=false\n"
literal|"default=true"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\n"
literal|"default=false"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[OtherSection]\n"
literal|"default=false"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_environment
name|void
name|QLoggingRegistry_environment
parameter_list|()
block|{
comment|//
comment|// Check whether QT_LOGGING_CONF is picked up from environment
comment|//
name|qputenv
argument_list|(
literal|"QT_LOGGING_CONF"
argument_list|,
name|QFINDTESTDATA
argument_list|(
literal|"qtlogging.ini"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QLoggingRegistry
name|registry
decl_stmt|;
name|registry
operator|.
name|init
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|apiRules
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|configRules
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|envRules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|rules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check that QT_LOGGING_RULES take precedence
name|qputenv
argument_list|(
literal|"QT_LOGGING_RULES"
argument_list|,
literal|"Digia.*=true"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|init
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|envRules
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|envRules
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|enabled
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|rules
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_config
name|void
name|QLoggingRegistry_config
parameter_list|()
block|{
comment|//
comment|// Check whether QtProject/qtlogging.ini is loaded automatically
comment|//
comment|// first try to create a test file..
name|QString
name|path
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
operator|+
literal|"/QtProject"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|path
operator|+
literal|"/QtProject"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
literal|"qtlogging.ini"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"[Rules]\n"
expr_stmt|;
name|out
operator|<<
literal|"Digia.*=false\n"
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QLoggingRegistry
name|registry
decl_stmt|;
name|registry
operator|.
name|init
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|configRules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// remove file again
name|QVERIFY
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_rulePriorities
name|void
name|QLoggingRegistry_rulePriorities
parameter_list|()
block|{
comment|//
comment|// Rules can stem from 3 sources:
comment|//   via QLoggingCategory::setFilterRules (API)
comment|//   via qtlogging.ini file in settings (Config)
comment|//   via QT_LOGGING_CONF environment variable (Env)
comment|//
comment|// Rules set by environment should get higher precedence than qtlogging.conf,
comment|// than QLoggingCategory::setFilterRules
comment|//
name|QLoggingCategory
name|cat
argument_list|(
literal|"Digia.Berlin"
argument_list|)
decl_stmt|;
name|QLoggingRegistry
modifier|*
name|registry
init|=
name|QLoggingRegistry
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// empty all rules , check default
name|registry
operator|->
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|apiRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|configRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|envRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set Config rule
name|QLoggingSettingsParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\nDigia.*=false"
argument_list|)
expr_stmt|;
name|registry
operator|->
name|configRules
operator|=
name|parser
operator|.
name|rules
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set API rule, should overwrite API one
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
literal|"Digia.*=true"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set Env rule, should overwrite Config one
name|parser
operator|.
name|setContent
argument_list|(
literal|"Digia.*=false"
argument_list|)
expr_stmt|;
name|registry
operator|->
name|envRules
operator|=
name|parser
operator|.
name|rules
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_checkErrors
name|void
name|QLoggingRegistry_checkErrors
parameter_list|()
block|{
name|QLoggingSettingsParser
name|parser
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"Ignoring malformed logging rule: '***=false'"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"Ignoring malformed logging rule: '*=0'"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"Ignoring malformed logging rule: '*=TRUE'"
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\n"
literal|"***=false\n"
literal|"*=0\n"
literal|"*=TRUE\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLoggingRegistry
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qloggingregistry.moc"
end_include
end_unit
