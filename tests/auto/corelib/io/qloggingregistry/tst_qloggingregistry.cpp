begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qloggingregistry_p.h>
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_class
DECL|class|tst_QLoggingRegistry
class|class
name|tst_QLoggingRegistry
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
comment|// ensure a clean environment
name|QStandardPaths
operator|::
name|setTestModeEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qunsetenv
argument_list|(
literal|"QT_LOGGING_CONF"
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingSettingsParser_iniStyle
name|void
name|QLoggingSettingsParser_iniStyle
parameter_list|()
block|{
comment|//
comment|// Logging configuration can be described
comment|// in an .ini file. [Rules] is the
comment|// default category, and optional ...
comment|//
name|QLoggingSettingsParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\n"
literal|"default=false\n"
literal|"default=true"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\n"
literal|"default=false"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[OtherSection]\n"
literal|"default=false"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parser
operator|.
name|rules
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_environment
name|void
name|QLoggingRegistry_environment
parameter_list|()
block|{
comment|//
comment|// Check whether QT_LOGGING_CONF is picked up from environment
comment|//
name|qputenv
argument_list|(
literal|"QT_LOGGING_CONF"
argument_list|,
name|QFINDTESTDATA
argument_list|(
literal|"qtlogging.ini"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QLoggingRegistry
name|registry
decl_stmt|;
name|registry
operator|.
name|init
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|apiRules
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|configRules
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|envRules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|rules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_config
name|void
name|QLoggingRegistry_config
parameter_list|()
block|{
comment|//
comment|// Check whether QtProject/qtlogging.ini is loaded automatically
comment|//
comment|// first try to create a test file..
name|QString
name|path
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|GenericConfigLocation
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
operator|+
literal|"/QtProject"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|path
operator|+
literal|"/QtProject"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|dir
operator|.
name|absoluteFilePath
argument_list|(
literal|"qtlogging.ini"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"[Rules]\n"
expr_stmt|;
name|out
operator|<<
literal|"Digia.*=false\n"
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QLoggingRegistry
name|registry
decl_stmt|;
name|registry
operator|.
name|init
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|registry
operator|.
name|configRules
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// remove file again
name|QVERIFY
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingRegistry_rulePriorities
name|void
name|QLoggingRegistry_rulePriorities
parameter_list|()
block|{
comment|//
comment|// Rules can stem from 3 sources:
comment|//   via QLoggingCategory::setFilterRules (API)
comment|//   via qtlogging.ini file in settings (Config)
comment|//   via QT_LOGGING_CONF environment variable (Env)
comment|//
comment|// Rules set by environment should get higher precedence than qtlogging.conf,
comment|// than QLoggingCategory::setFilterRules
comment|//
name|QLoggingCategory
name|cat
argument_list|(
literal|"Digia.Berlin"
argument_list|)
decl_stmt|;
name|QLoggingRegistry
modifier|*
name|registry
init|=
name|QLoggingRegistry
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// empty all rules , check default
name|registry
operator|->
name|rules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|apiRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|configRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|envRules
operator|.
name|clear
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set Config rule
name|QLoggingSettingsParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setContent
argument_list|(
literal|"[Rules]\nDigia.*=false"
argument_list|)
expr_stmt|;
name|registry
operator|->
name|configRules
operator|=
name|parser
operator|.
name|rules
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set API rule, should overwrite API one
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
literal|"Digia.*=true"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// set Env rule, should overwrite Config one
name|parser
operator|.
name|setContent
argument_list|(
literal|"Digia.*=false"
argument_list|)
expr_stmt|;
name|registry
operator|->
name|envRules
operator|=
name|parser
operator|.
name|rules
argument_list|()
expr_stmt|;
name|registry
operator|->
name|updateRules
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isWarningEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLoggingRegistry
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qloggingregistry.moc"
end_include
end_unit
