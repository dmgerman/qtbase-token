begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 David Faure<faure@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_comment
comment|// for geteuid
end_comment
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Restore permissions so that the QTemporaryDir cleanup can happen
end_comment
begin_class
DECL|class|PermissionRestorer
class|class
name|PermissionRestorer
block|{
name|Q_DISABLE_COPY
parameter_list|(
name|PermissionRestorer
parameter_list|)
specifier|public
private|:
DECL|function|PermissionRestorer
specifier|explicit
name|PermissionRestorer
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
member_init_list|:
name|m_path
argument_list|(
name|path
argument_list|)
block|{}
DECL|function|~PermissionRestorer
name|~
name|PermissionRestorer
parameter_list|()
block|{
name|restore
argument_list|()
expr_stmt|;
block|}
DECL|function|restore
specifier|inline
name|void
name|restore
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|m_path
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOwner
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
private|private:
DECL|member|m_path
specifier|const
name|QString
name|m_path
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QSaveFile
class|class
name|tst_QSaveFile
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
private|private
name|slots
private|:
name|void
name|transactionalWrite
parameter_list|()
function_decl|;
name|void
name|textStreamManualFlush
parameter_list|()
function_decl|;
name|void
name|textStreamAutoFlush
parameter_list|()
function_decl|;
name|void
name|saveTwice
parameter_list|()
function_decl|;
name|void
name|transactionalWriteNoPermissionsOnDir_data
parameter_list|()
function_decl|;
name|void
name|transactionalWriteNoPermissionsOnDir
parameter_list|()
function_decl|;
name|void
name|transactionalWriteNoPermissionsOnFile
parameter_list|()
function_decl|;
name|void
name|transactionalWriteCanceled
parameter_list|()
function_decl|;
name|void
name|transactionalWriteErrorRenaming
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|msgCannotOpen
specifier|static
specifier|inline
name|QByteArray
name|msgCannotOpen
parameter_list|(
specifier|const
name|QFileDevice
modifier|&
name|f
parameter_list|)
block|{
name|QString
name|result
init|=
name|QStringLiteral
argument_list|(
literal|"Cannot open "
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|f
operator|.
name|fileName
argument_list|()
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|": "
argument_list|)
operator|+
name|f
operator|.
name|errorString
argument_list|()
decl_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|transactionalWrite
name|void
name|tst_QSaveFile
operator|::
name|transactionalWrite
parameter_list|()
block|{
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
name|QFile
name|reader
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveTwice
name|void
name|tst_QSaveFile
operator|::
name|saveTwice
parameter_list|()
block|{
comment|// Check that we can reuse a QSaveFile object
comment|// (and test the case of an existing target file)
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"World"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|reader
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|reader
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textStreamManualFlush
name|void
name|tst_QSaveFile
operator|::
name|textStreamManualFlush
parameter_list|()
block|{
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
literal|"Manual flush"
expr_stmt|;
name|ts
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|reader
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Manual flush"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textStreamAutoFlush
name|void
name|tst_QSaveFile
operator|::
name|textStreamAutoFlush
parameter_list|()
block|{
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
literal|"Auto-flush."
expr_stmt|;
comment|// no flush
name|QVERIFY
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// QIODevice::close will emit aboutToClose, which will flush the stream
name|QFile
name|reader
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Auto-flush."
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transactionalWriteNoPermissionsOnDir_data
name|void
name|tst_QSaveFile
operator|::
name|transactionalWriteNoPermissionsOnDir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"directWriteFallback"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"directWriteFallback"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transactionalWriteNoPermissionsOnDir
name|void
name|tst_QSaveFile
operator|::
name|transactionalWriteNoPermissionsOnDir
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|directWriteFallback
argument_list|)
expr_stmt|;
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|)
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ExeOwner
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionRestorer
name|permissionRestorer
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QSaveFile
name|firstTry
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|firstTry
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|firstTry
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFile
operator|::
name|OpenError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|firstTry
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make an existing writable file
name|permissionRestorer
operator|.
name|restore
argument_list|()
expr_stmt|;
name|QFile
name|f
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make the directory non-writable again
name|QVERIFY
argument_list|(
name|QFile
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|)
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ExeOwner
argument_list|)
argument_list|)
expr_stmt|;
comment|// And write to it again using QSaveFile; only works if directWriteFallback is enabled
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|file
operator|.
name|setDirectWriteFallback
argument_list|(
name|directWriteFallback
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|directWriteFallback
argument_list|()
argument_list|,
name|directWriteFallback
argument_list|)
expr_stmt|;
if|if
condition|(
name|directWriteFallback
condition|)
block|{
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|file
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"World"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|reader
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"World"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|file
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"W"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|cancelWriting
argument_list|()
expr_stmt|;
comment|// no effect, as per the documentation
name|QVERIFY
argument_list|(
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|reader
operator|.
name|readAll
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"W"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|file
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QFile
operator|::
name|OpenError
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|transactionalWriteNoPermissionsOnFile
name|void
name|tst_QSaveFile
operator|::
name|transactionalWriteNoPermissionsOnFile
parameter_list|()
block|{
comment|// Setup an existing but readonly file
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|PermissionRestorer
name|permissionRestorer
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try saving into it
block|{
name|QSaveFile
name|saveFile
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|saveFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// just like QFile
block|}
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transactionalWriteCanceled
name|void
name|tst_QSaveFile
operator|::
name|transactionalWriteCanceled
parameter_list|()
block|{
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|targetFile
argument_list|)
expr_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
literal|"This writing operation will soon be canceled.\n"
expr_stmt|;
name|ts
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// We change our mind, let's abort writing
name|file
operator|.
name|cancelWriting
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// temp file was discarded
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|targetFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transactionalWriteErrorRenaming
name|void
name|tst_QSaveFile
operator|::
name|transactionalWriteErrorRenaming
parameter_list|()
block|{
name|QTemporaryDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|targetFile
init|=
name|dir
operator|.
name|path
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/outfile"
argument_list|)
decl_stmt|;
name|QSaveFile
name|file
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|file
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
comment|// Make rename() fail for lack of permissions in the directory
name|QFile
name|dirAsFile
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
comment|// yay, I have to use QFile to change a dir's permissions...
name|QVERIFY
argument_list|(
name|dirAsFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no permissions
name|PermissionRestorer
name|permissionRestorer
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
else|#
directive|else
comment|// Windows: Make rename() fail for lack of permissions on an existing target file
name|QFile
name|existingTargetFile
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|existingTargetFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|msgCannotOpen
argument_list|(
name|existingTargetFile
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"Target"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|existingTargetFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|existingTargetFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
argument_list|)
expr_stmt|;
name|PermissionRestorer
name|permissionRestorer
argument_list|(
name|targetFile
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// The saving should fail.
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|targetFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// renaming failed
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|RenameError
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSaveFile
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsavefile.moc"
end_include
end_unit
