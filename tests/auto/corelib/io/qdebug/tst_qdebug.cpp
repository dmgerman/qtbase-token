begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QtDebug>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtConcurrentRun>
end_include
begin_include
include|#
directive|include
file|<QFutureSynchronizer>
end_include
begin_class
DECL|class|tst_QDebug
class|class
name|tst_QDebug
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|assignment
parameter_list|()
specifier|const
function_decl|;
name|void
name|warningWithoutDebug
parameter_list|()
specifier|const
function_decl|;
name|void
name|criticalWithoutDebug
parameter_list|()
specifier|const
function_decl|;
name|void
name|debugWithBool
parameter_list|()
specifier|const
function_decl|;
name|void
name|debugSpaceHandling
parameter_list|()
specifier|const
function_decl|;
name|void
name|debugNoQuotes
parameter_list|()
specifier|const
function_decl|;
name|void
name|verbosity
parameter_list|()
specifier|const
function_decl|;
name|void
name|stateSaver
parameter_list|()
specifier|const
function_decl|;
name|void
name|veryLongWarningMessage
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQChar
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQString
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQStringRef
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQLatin1String
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQByteArray
parameter_list|()
specifier|const
function_decl|;
name|void
name|qDebugQFlags
parameter_list|()
specifier|const
function_decl|;
name|void
name|textStreamModifiers
parameter_list|()
specifier|const
function_decl|;
name|void
name|resetFormat
parameter_list|()
specifier|const
function_decl|;
name|void
name|defaultMessagehandler
parameter_list|()
specifier|const
function_decl|;
name|void
name|threadSafety
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|assignment
name|void
name|tst_QDebug
operator|::
name|assignment
parameter_list|()
specifier|const
block|{
name|QDebug
name|debug1
argument_list|(
name|QtDebugMsg
argument_list|)
decl_stmt|;
name|QDebug
name|debug2
argument_list|(
name|QtWarningMsg
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"bar 1 2"
argument_list|)
expr_stmt|;
name|debug1
operator|<<
literal|"foo"
expr_stmt|;
name|debug2
operator|<<
literal|"bar"
expr_stmt|;
name|debug1
operator|=
name|debug2
expr_stmt|;
name|debug1
operator|<<
literal|"1"
expr_stmt|;
name|debug2
operator|<<
literal|"2"
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|s_msgType
specifier|static
name|QtMsgType
name|s_msgType
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_msg
specifier|static
name|QString
name|s_msg
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_file
specifier|static
name|QByteArray
name|s_file
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_line
specifier|static
name|int
name|s_line
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_function
specifier|static
name|QByteArray
name|s_function
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|myMessageHandler
specifier|static
name|void
name|myMessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|s_msg
operator|=
name|msg
expr_stmt|;
name|s_msgType
operator|=
name|type
expr_stmt|;
name|s_file
operator|=
name|context
operator|.
name|file
expr_stmt|;
name|s_line
operator|=
name|context
operator|.
name|line
expr_stmt|;
name|s_function
operator|=
name|context
operator|.
name|function
expr_stmt|;
block|}
end_function
begin_comment
comment|// Helper class to ensure that the testlib message handler gets
end_comment
begin_comment
comment|// restored at the end of each test function, even if the test
end_comment
begin_comment
comment|// fails or throws an exception.
end_comment
begin_class
DECL|class|MessageHandlerSetter
class|class
name|MessageHandlerSetter
block|{
public|public:
DECL|function|MessageHandlerSetter
name|MessageHandlerSetter
parameter_list|(
name|QtMessageHandler
name|newMessageHandler
parameter_list|)
member_init_list|:
name|oldMessageHandler
argument_list|(
name|qInstallMessageHandler
argument_list|(
name|newMessageHandler
argument_list|)
argument_list|)
block|{ }
DECL|function|~MessageHandlerSetter
name|~
name|MessageHandlerSetter
parameter_list|()
block|{
name|qInstallMessageHandler
argument_list|(
name|oldMessageHandler
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|oldMessageHandler
name|QtMessageHandler
name|oldMessageHandler
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*! \internal   The qWarning() stream should be usable even if QT_NO_DEBUG is defined.  */
end_comment
begin_function
DECL|function|warningWithoutDebug
name|void
name|tst_QDebug
operator|::
name|warningWithoutDebug
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qWarning
argument_list|()
operator|<<
literal|"A qWarning() message"
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtWarningMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A qWarning() message"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! \internal   The qCritical() stream should be usable even if QT_NO_DEBUG is defined.  */
end_comment
begin_function
DECL|function|criticalWithoutDebug
name|void
name|tst_QDebug
operator|::
name|criticalWithoutDebug
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qCritical
argument_list|()
operator|<<
literal|"A qCritical() message"
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtCriticalMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A qCritical() message"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|debugWithBool
name|void
name|tst_QDebug
operator|::
name|debugWithBool
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"false true"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyPoint
class|class
name|MyPoint
block|{
public|public:
DECL|function|MyPoint
name|MyPoint
parameter_list|(
name|int
name|val1
parameter_list|,
name|int
name|val2
parameter_list|)
member_init_list|:
name|v1
argument_list|(
name|val1
argument_list|)
member_init_list|,
name|v2
argument_list|(
name|val2
argument_list|)
block|{}
DECL|member|v1
name|int
name|v1
decl_stmt|;
DECL|member|v2
name|int
name|v2
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|s
parameter_list|,
specifier|const
name|MyPoint
modifier|&
name|point
parameter_list|)
block|{
specifier|const
name|QDebugStateSaver
name|saver
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|s
operator|.
name|nospace
argument_list|()
operator|<<
literal|"MyPoint("
operator|<<
name|point
operator|.
name|v1
operator|<<
literal|", "
operator|<<
name|point
operator|.
name|v2
operator|<<
literal|")"
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_class
DECL|class|MyLine
class|class
name|MyLine
block|{
public|public:
DECL|function|MyLine
name|MyLine
parameter_list|(
specifier|const
name|MyPoint
modifier|&
name|point1
parameter_list|,
specifier|const
name|MyPoint
modifier|&
name|point2
parameter_list|)
member_init_list|:
name|p1
argument_list|(
name|point1
argument_list|)
member_init_list|,
name|p2
argument_list|(
name|point2
argument_list|)
block|{}
DECL|member|p1
name|MyPoint
name|p1
decl_stmt|;
DECL|member|p2
name|MyPoint
name|p2
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|s
parameter_list|,
specifier|const
name|MyLine
modifier|&
name|line
parameter_list|)
block|{
specifier|const
name|QDebugStateSaver
name|saver
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|s
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|s
operator|<<
literal|"MyLine("
operator|<<
name|line
operator|.
name|p1
operator|<<
literal|", "
operator|<<
name|line
operator|.
name|p2
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|verbosity
argument_list|()
operator|>
literal|2
condition|)
name|s
operator|<<
literal|", Manhattan length="
operator|<<
operator|(
name|qAbs
argument_list|(
name|line
operator|.
name|p2
operator|.
name|v1
operator|-
name|line
operator|.
name|p1
operator|.
name|v1
argument_list|)
operator|+
name|qAbs
argument_list|(
name|line
operator|.
name|p2
operator|.
name|v2
operator|-
name|line
operator|.
name|p1
operator|.
name|v2
argument_list|)
operator|)
expr_stmt|;
name|s
operator|<<
literal|')'
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_function
DECL|function|debugSpaceHandling
name|void
name|tst_QDebug
operator|::
name|debugSpaceHandling
parameter_list|()
specifier|const
block|{
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|.
name|autoInsertSpaces
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|.
name|setAutoInsertSpaces
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|d
operator|.
name|autoInsertSpaces
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|<<
literal|"  "
expr_stmt|;
name|d
operator|.
name|setAutoInsertSpaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|.
name|autoInsertSpaces
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|<<
literal|"foo"
expr_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|"key="
operator|<<
literal|"value"
expr_stmt|;
name|d
operator|.
name|space
argument_list|()
expr_stmt|;
name|d
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|MyLine
name|line
argument_list|(
name|MyPoint
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|,
name|MyPoint
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|<<
name|line
expr_stmt|;
name|d
operator|<<
literal|"bar"
expr_stmt|;
comment|// With the old implementation of MyPoint doing dbg.nospace()<< ...; dbg.space() we ended up with
comment|// MyLine(MyPoint(10, 11) ,  MyPoint(12, 13) )
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"  foo key=value 1 2 MyLine(MyPoint(10, 11), MyPoint(12, 13)) bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qDebug
argument_list|()
operator|.
name|autoInsertSpaces
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QPoint
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
operator|<<
name|QRect
argument_list|(
literal|23
argument_list|,
literal|24
argument_list|,
literal|25
argument_list|,
literal|26
argument_list|)
operator|<<
name|QLine
argument_list|(
literal|27
argument_list|,
literal|28
argument_list|,
literal|29
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QPoint(21,22) QRect(23,24 25x26) QLine(QPoint(27,28),QPoint(29,30))"
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QPointF
argument_list|(
literal|21
argument_list|,
literal|22
argument_list|)
operator|<<
name|QRectF
argument_list|(
literal|23
argument_list|,
literal|24
argument_list|,
literal|25
argument_list|,
literal|26
argument_list|)
operator|<<
name|QLineF
argument_list|(
literal|27
argument_list|,
literal|28
argument_list|,
literal|29
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QPointF(21,22) QRectF(23,24 25x26) QLineF(QPointF(27,28),QPointF(29,30))"
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QMimeType
argument_list|()
operator|<<
name|QMimeDatabase
argument_list|()
operator|.
name|mimeTypeForName
argument_list|(
literal|"application/pdf"
argument_list|)
operator|<<
literal|"foo"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QMimeType(invalid) QMimeType(\"application/pdf\") foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|debugNoQuotes
name|void
name|tst_QDebug
operator|::
name|debugNoQuotes
parameter_list|()
specifier|const
block|{
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|d
operator|.
name|noquote
argument_list|()
expr_stmt|;
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|d
operator|.
name|quote
argument_list|()
expr_stmt|;
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"Hello\" Hello \"Hello\""
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
name|QChar
argument_list|(
literal|'H'
argument_list|)
expr_stmt|;
name|d
operator|<<
name|QLatin1String
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|d
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|d
operator|.
name|noquote
argument_list|()
expr_stmt|;
name|d
operator|<<
name|QChar
argument_list|(
literal|'H'
argument_list|)
expr_stmt|;
name|d
operator|<<
name|QLatin1String
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|d
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"'H' \"Hello\" \"Hello\" H Hello Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verbosity
name|void
name|tst_QDebug
operator|::
name|verbosity
parameter_list|()
specifier|const
block|{
name|MyLine
name|line
argument_list|(
name|MyPoint
argument_list|(
literal|10
argument_list|,
literal|11
argument_list|)
argument_list|,
name|MyPoint
argument_list|(
literal|12
argument_list|,
literal|13
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|output
decl_stmt|;
name|QDebug
name|d
argument_list|(
operator|&
name|output
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|d
operator|<<
name|line
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|int
name|oldVerbosity
init|=
name|d
operator|.
name|verbosity
argument_list|()
decl_stmt|;
name|d
operator|.
name|setVerbosity
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|.
name|verbosity
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|d
operator|.
name|setVerbosity
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|.
name|verbosity
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
specifier|const
name|int
name|newVerbosity
init|=
name|oldVerbosity
operator|+
literal|2
decl_stmt|;
name|d
operator|.
name|setVerbosity
argument_list|(
name|newVerbosity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|.
name|verbosity
argument_list|()
argument_list|,
name|newVerbosity
argument_list|)
expr_stmt|;
name|d
operator|<<
name|line
operator|<<
literal|'\n'
expr_stmt|;
name|d
operator|.
name|setVerbosity
argument_list|(
name|oldVerbosity
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|.
name|verbosity
argument_list|()
argument_list|,
name|oldVerbosity
argument_list|)
expr_stmt|;
name|d
operator|<<
name|line
expr_stmt|;
specifier|const
name|QStringList
name|lines
init|=
name|output
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|lines
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Verbose should be longer
name|QVERIFY2
argument_list|(
name|lines
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
operator|>
name|lines
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|lines
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Switching back to brief produces same output
name|QCOMPARE
argument_list|(
name|lines
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|lines
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stateSaver
name|void
name|tst_QDebug
operator|::
name|stateSaver
parameter_list|()
specifier|const
block|{
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
literal|42
expr_stmt|;
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|<<
literal|43
expr_stmt|;
block|}
name|d
operator|<<
literal|44
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"42 43 44"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|<<
name|hex
operator|<<
name|right
operator|<<
name|qSetFieldWidth
argument_list|(
literal|3
argument_list|)
operator|<<
name|qSetPadChar
argument_list|(
literal|'0'
argument_list|)
operator|<<
literal|42
expr_stmt|;
block|}
name|d
operator|<<
literal|42
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"02a 42"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello \"World\""
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|hex
operator|<<
literal|42
expr_stmt|;
block|{
name|QDebugStateSaver
name|saver
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|d
operator|.
name|resetFormat
argument_list|()
expr_stmt|;
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"World"
argument_list|)
operator|<<
literal|42
expr_stmt|;
block|}
name|d
operator|<<
name|QStringLiteral
argument_list|(
literal|"!"
argument_list|)
operator|<<
literal|42
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello2a\"World\" 42!2a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|veryLongWarningMessage
name|void
name|tst_QDebug
operator|::
name|veryLongWarningMessage
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
name|QString
name|test
decl_stmt|;
block|{
name|QString
name|part
argument_list|(
literal|"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
name|test
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"Test output:\n%s\nend"
argument_list|,
name|qPrintable
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|3
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtWarningMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Test output:\n"
argument_list|)
operator|+
name|test
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\nend"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qDebugQChar
name|void
name|tst_QDebug
operator|::
name|qDebugQChar
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
name|QChar
argument_list|(
literal|'f'
argument_list|)
operator|<<
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\xE4'
argument_list|)
argument_list|)
expr_stmt|;
comment|// f, Ã¤
name|d
operator|.
name|nospace
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QChar
argument_list|(
literal|'o'
argument_list|)
operator|<<
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\xC4'
argument_list|)
argument_list|)
expr_stmt|;
comment|// o, o, Ã
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|5
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"'f' '\\u00e4' oo\\u00c4"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qDebugQString
name|void
name|tst_QDebug
operator|::
name|qDebugQString
parameter_list|()
specifier|const
block|{
comment|/* Use a basic string. */
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
specifier|const
name|QString
name|in
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|inRef
argument_list|(
operator|&
name|in
argument_list|)
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
name|inRef
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"input\""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
comment|/* simpler tests from now on */
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
name|QString
name|string
init|=
literal|"Hello"
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"Hello\""
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|string
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|qSetFieldWidth
argument_list|(
literal|8
argument_list|)
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
literal|"   "
operator|+
name|string
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"Sm\xc3\xb8rg\xc3\xa5sbord "
comment|// Latin script
literal|"\xce\x91\xce\xb8\xce\xae\xce\xbd\xce\xb1 "
comment|// Greek script
literal|"\xd0\x9c\xd0\xbe\xd1\x81\xd0\xba\xd0\xb2\xd0\xb0"
expr_stmt|;
comment|// Cyrillic script
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|string
argument_list|)
expr_stmt|;
comment|// This string only contains printable characters
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
literal|'"'
operator|+
name|string
operator|+
literal|'"'
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"\n\t\\\""
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|string
argument_list|)
expr_stmt|;
comment|// This string only contains characters that must be escaped
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\n\\t\\\\\\\"\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unicode escapes, BMP
name|string
operator|=
literal|"\1"
comment|// U+0001: START OF HEADING (category Cc)
literal|"\x7f"
comment|// U+007F: DELETE (category Cc)
literal|"\xc2\xad"
comment|// U+00AD: SOFT HYPHEN (category Cf)
literal|"\xef\xbb\xbf"
expr_stmt|;
comment|// U+FEFF: ZERO WIDTH NO-BREAK SPACE / BOM (category Cf)
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\u0001\\u007F\\u00AD\\uFEFF\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unicode printable non-BMP
name|string
operator|=
literal|"\xf0\x90\x80\x80"
expr_stmt|;
comment|// U+10000: LINEAR B SYLLABLE B008 A (category Lo)
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
literal|'"'
operator|+
name|string
operator|+
literal|'"'
argument_list|)
expr_stmt|;
comment|// non-BMP and non-printable
name|string
operator|=
literal|"\xf3\xa0\x80\x81 "
comment|// U+E0001: LANGUAGE TAG (category Cf)
literal|"\xf4\x80\x80\x80"
expr_stmt|;
comment|// U+100000: Plane 16 Private Use (category Co)
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\U000E0001 \\U00100000\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// broken surrogate pairs
name|ushort
name|utf16
index|[]
init|=
block|{
literal|0xDC00
block|,
literal|0xD800
block|,
literal|'x'
block|,
literal|0xD800
block|,
literal|0
block|}
decl_stmt|;
name|string
operator|=
name|QString
operator|::
name|fromUtf16
argument_list|(
name|utf16
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\uDC00\\uD800x\\uD800\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qDebugQStringRef
name|void
name|tst_QDebug
operator|::
name|qDebugQStringRef
parameter_list|()
specifier|const
block|{
comment|/* Use a basic string. */
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
specifier|const
name|QString
name|in
argument_list|(
name|QLatin1String
argument_list|(
literal|"input"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStringRef
name|inRef
argument_list|(
operator|&
name|in
argument_list|)
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
name|inRef
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"input\""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
comment|/* Use a null QStringRef. */
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
specifier|const
name|QStringRef
name|inRef
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
name|inRef
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|qDebugQLatin1String
name|void
name|tst_QDebug
operator|::
name|qDebugQLatin1String
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"barbaz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|5
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"foo\" \"\" \"bar\" baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
comment|/* simpler tests from now on */
name|QLatin1String
name|string
argument_list|(
literal|"\"Hello\""
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\\"Hello\\\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|qSetFieldWidth
argument_list|(
literal|8
argument_list|)
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
literal|" "
operator|+
name|QString
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|string
operator|=
name|QLatin1String
argument_list|(
literal|"\nSm\xF8rg\xE5sbord\\"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
name|string
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|string
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\nSm\\u00F8rg\\u00E5sbord\\\\\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qDebugQByteArray
name|void
name|tst_QDebug
operator|::
name|qDebugQByteArray
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|<<
name|QByteArrayLiteral
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArrayLiteral
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"barbaz"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|QByteArrayLiteral
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|5
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"foo\" \"\" \"bar\" baz"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
comment|/* simpler tests from now on */
name|QByteArray
name|ba
init|=
literal|"\"Hello\""
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|ba
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\\"Hello\\\"\""
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|ba
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|qSetFieldWidth
argument_list|(
literal|8
argument_list|)
operator|<<
name|ba
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
literal|" "
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
argument_list|)
expr_stmt|;
name|ba
operator|=
literal|"\nSm\xC3\xB8rg\xC3\xA5sbord\\"
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|ba
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|ba
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|ba
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\nSm\\xC3\\xB8rg\\xC3\\xA5sbord\\\\\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure that it closes hex escape sequences correctly
name|qDebug
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"\377FFFF"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
argument_list|(
literal|"\"\\xFF\"\"FFFF\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_enum
DECL|enum|TestEnum
enum|enum
name|TestEnum
block|{
DECL|enumerator|Flag1
name|Flag1
init|=
literal|0x1
block|,
DECL|enumerator|Flag2
name|Flag2
init|=
literal|0x10
block|}
enum|;
end_enum
begin_macro
name|Q_DECLARE_FLAGS
argument_list|(
argument|TestFlags
argument_list|,
argument|TestEnum
argument_list|)
end_macro
begin_function
DECL|function|qDebugQFlags
name|void
name|tst_QDebug
operator|::
name|qDebugQFlags
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|QFlags
argument_list|<
name|TestEnum
argument_list|>
name|flags
argument_list|(
name|Flag1
operator||
name|Flag2
argument_list|)
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
name|flags
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QFlags(0x1|0x10)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textStreamModifiers
name|void
name|tst_QDebug
operator|::
name|textStreamModifiers
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|qDebug
argument_list|()
operator|<<
name|hex
operator|<<
name|short
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|int
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|unsigned
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|long
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|qint64
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|quint64
argument_list|(
literal|0xf
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|2
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"f f f f f f"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetFormat
name|void
name|tst_QDebug
operator|::
name|resetFormat
parameter_list|()
specifier|const
block|{
name|QString
name|file
decl_stmt|,
name|function
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|MessageHandlerSetter
name|mhs
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
block|{
name|QDebug
name|d
init|=
name|qDebug
argument_list|()
decl_stmt|;
name|d
operator|.
name|nospace
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|hex
operator|<<
name|int
argument_list|(
literal|0xf
argument_list|)
expr_stmt|;
name|d
operator|.
name|resetFormat
argument_list|()
operator|<<
name|int
argument_list|(
literal|0xf
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_MESSAGELOGCONTEXT
name|file
operator|=
name|__FILE__
expr_stmt|;
name|line
operator|=
name|__LINE__
operator|-
literal|5
expr_stmt|;
name|function
operator|=
name|Q_FUNC_INFO
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|s_msgType
argument_list|,
name|QtDebugMsg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_msg
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"f15 \"foo\""
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_file
argument_list|)
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s_line
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|s_function
argument_list|)
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultMessagehandler
name|void
name|tst_QDebug
operator|::
name|defaultMessagehandler
parameter_list|()
specifier|const
block|{
name|MessageHandlerSetter
name|mhs
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// set 0, should set default handler
name|QtMessageHandler
name|defaultMessageHandler1
init|=
name|qInstallMessageHandler
argument_list|(
operator|(
name|QtMessageHandler
operator|)
literal|0
argument_list|)
decl_stmt|;
comment|// set 0, should set and return default handler
name|QVERIFY
argument_list|(
name|defaultMessageHandler1
argument_list|)
expr_stmt|;
name|QtMessageHandler
name|defaultMessageHandler2
init|=
name|qInstallMessageHandler
argument_list|(
name|myMessageHandler
argument_list|)
decl_stmt|;
comment|// set myMessageHandler and return default handler
name|bool
name|same
init|=
operator|(
operator|*
name|defaultMessageHandler1
operator|==
operator|*
name|defaultMessageHandler2
operator|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|same
argument_list|)
expr_stmt|;
name|QtMessageHandler
name|messageHandler
init|=
name|qInstallMessageHandler
argument_list|(
operator|(
name|QtMessageHandler
operator|)
literal|0
argument_list|)
decl_stmt|;
comment|// set 0, should set default and return myMessageHandler
name|same
operator|=
operator|(
operator|*
name|messageHandler
operator|==
operator|*
name|myMessageHandler
operator|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|same
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|s_mutex
name|QMutex
name|s_mutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_messages
name|QStringList
name|s_messages
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|s_sema
name|QSemaphore
name|s_sema
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|threadSafeMessageHandler
specifier|static
name|void
name|threadSafeMessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|s_mutex
argument_list|)
decl_stmt|;
name|s_messages
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doDebug
specifier|static
name|void
name|doDebug
parameter_list|()
comment|// called in each thread
block|{
name|s_sema
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"doDebug"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|threadSafety
name|void
name|tst_QDebug
operator|::
name|threadSafety
parameter_list|()
specifier|const
block|{
name|MessageHandlerSetter
name|mhs
argument_list|(
name|threadSafeMessageHandler
argument_list|)
decl_stmt|;
specifier|const
name|int
name|numThreads
init|=
literal|10
decl_stmt|;
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|setMaxThreadCount
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|QFutureSynchronizer
argument_list|<
name|void
argument_list|>
name|sync
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|sync
operator|.
name|addFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
operator|&
name|doDebug
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s_sema
operator|.
name|release
argument_list|(
name|numThreads
argument_list|)
expr_stmt|;
name|sync
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|s_mutex
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s_messages
operator|.
name|count
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|s_messages
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"doDebug"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Should compile: instentiation of unrelated operator<< should not cause cause compilation
end_comment
begin_comment
comment|// error in QDebug operators (QTBUG-47375)
end_comment
begin_class
DECL|class|TestClassA
class|class
name|TestClassA
block|{
block|}
class|;
end_class
begin_class
DECL|class|TestClassB
class|class
name|TestClassB
block|{
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|operator <<
name|TestClassA
modifier|&
name|operator
name|<<
parameter_list|(
name|TestClassA
modifier|&
name|s
parameter_list|,
name|T
modifier|&
parameter_list|)
block|{
return|return
name|s
return|;
block|}
end_function
begin_empty_stmt
DECL|function|operator <<
empty_stmt|;
end_empty_stmt
begin_function_decl
template|template
parameter_list|<>
name|TestClassA
modifier|&
name|operator
name|<<<TestClassB>
parameter_list|(
name|TestClassA
modifier|&
name|s
parameter_list|,
name|TestClassB
modifier|&
name|l
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
DECL|variable|tst_QDebug
name|QTEST_MAIN
argument_list|(
name|tst_QDebug
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_qdebug.moc"
end_include
end_unit
