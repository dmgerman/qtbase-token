begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Intel Corporation. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qipaddress_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|__GLIBC__
end_ifdef
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<netinet/in.h>
end_include
begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QIpAddress
class|class
name|tst_QIpAddress
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|parseIp4_data
parameter_list|()
function_decl|;
name|void
name|parseIp4
parameter_list|()
function_decl|;
name|void
name|invalidParseIp4_data
parameter_list|()
function_decl|;
name|void
name|invalidParseIp4
parameter_list|()
function_decl|;
name|void
name|ip4ToString_data
parameter_list|()
function_decl|;
name|void
name|ip4ToString
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|parseIp4_data
name|void
name|tst_QIpAddress
operator|::
name|parseIp4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QIPAddressUtils
operator|::
name|IPv4Address
argument_list|>
argument_list|(
literal|"ip"
argument_list|)
expr_stmt|;
comment|// valid strings
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|<<
literal|"0.0.0.0"
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10.0.0.1"
argument_list|)
operator|<<
literal|"10.0.0.1"
operator|<<
literal|0x0a000001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|<<
literal|"127.0.0.1"
operator|<<
literal|0x7f000001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"172.16.0.1"
argument_list|)
operator|<<
literal|"172.16.0.1"
operator|<<
literal|0xac100001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"172.16.16.1"
argument_list|)
operator|<<
literal|"172.16.16.1"
operator|<<
literal|0xac101001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"172.16.16.16"
argument_list|)
operator|<<
literal|"172.16.16.16"
operator|<<
literal|0xac101010u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.0.1"
argument_list|)
operator|<<
literal|"192.168.0.1"
operator|<<
literal|0xc0a80001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.16.1"
argument_list|)
operator|<<
literal|"192.168.16.1"
operator|<<
literal|0xc0a81001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.16.16"
argument_list|)
operator|<<
literal|"192.168.16.16"
operator|<<
literal|0xc0a81010u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.192.1"
argument_list|)
operator|<<
literal|"192.168.192.1"
operator|<<
literal|0xc0a8c001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.192.16"
argument_list|)
operator|<<
literal|"192.168.192.16"
operator|<<
literal|0xc0a8c010u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"192.168.192.255"
argument_list|)
operator|<<
literal|"192.168.192.255"
operator|<<
literal|0xc0a8c0ffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"224.0.0.1"
argument_list|)
operator|<<
literal|"224.0.0.1"
operator|<<
literal|0xe0000001u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"239.255.255.255"
argument_list|)
operator|<<
literal|"239.255.255.255"
operator|<<
literal|0xefffffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"255.255.255.255"
argument_list|)
operator|<<
literal|"255.255.255.255"
operator|<<
name|uint
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// still valid but unusual
name|QTest
operator|::
name|newRow
argument_list|(
literal|"000.000.000.000"
argument_list|)
operator|<<
literal|"000.000.000.000"
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"000001.000002.000000003.000000000004"
argument_list|)
operator|<<
literal|"000001.000002.000000003.000000000004"
operator|<<
literal|0x01020304u
expr_stmt|;
comment|// octals:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"012.0250.0377.0377"
argument_list|)
operator|<<
literal|"012.0250.0377.0377"
operator|<<
literal|0x0aa8ffffu
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0000000000012.00000000000250.000000000000377.0000000000000000000000000000000000000377"
argument_list|)
operator|<<
literal|"0000000000012.00000000000250.000000000000377.0000000000000000000000000000000000000377"
operator|<<
literal|0x0aa8ffffu
expr_stmt|;
comment|// hex:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0xa.0xa.0x7f.0xff"
argument_list|)
operator|<<
literal|"0xa.0xa.0x7f.0xff"
operator|<<
literal|0x0a0a7fffu
expr_stmt|;
comment|// dots missing, less than 255:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3"
argument_list|)
operator|<<
literal|"1.2.3"
operator|<<
literal|0x01020003u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2"
argument_list|)
operator|<<
literal|"1.2"
operator|<<
literal|0x01000002u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"1"
operator|<<
literal|1u
expr_stmt|;
comment|// dots missing, more than 255, no overwrite
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.257"
argument_list|)
operator|<<
literal|"1.2.257"
operator|<<
literal|0x01020101u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.0x010101"
argument_list|)
operator|<<
literal|"1.0x010101"
operator|<<
literal|0x01010101u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2130706433"
argument_list|)
operator|<<
literal|"2130706433"
operator|<<
literal|0x7f000001u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseIp4
name|void
name|tst_QIpAddress
operator|::
name|parseIp4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QIPAddressUtils
operator|::
name|IPv4Address
argument_list|,
name|ip
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GLIBC__
block|{
name|in_addr
name|inet_result
decl_stmt|;
name|int
name|inet_ok
init|=
name|inet_aton
argument_list|(
name|data
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|&
name|inet_result
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|inet_ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ntohl
argument_list|(
name|inet_result
operator|.
name|s_addr
argument_list|)
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QIPAddressUtils
operator|::
name|IPv4Address
name|result
decl_stmt|;
name|bool
name|ok
init|=
name|QIPAddressUtils
operator|::
name|parseIp4
argument_list|(
name|result
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidParseIp4_data
name|void
name|tst_QIpAddress
operator|::
name|invalidParseIp4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
comment|// too many dots
name|QTest
operator|::
name|newRow
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|"."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".."
argument_list|)
operator|<<
literal|".."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"..."
argument_list|)
operator|<<
literal|"..."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"...."
argument_list|)
operator|<<
literal|"...."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1."
argument_list|)
operator|<<
literal|"1."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2."
argument_list|)
operator|<<
literal|"1.2."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3."
argument_list|)
operator|<<
literal|"1.2.3."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3.4."
argument_list|)
operator|<<
literal|"1.2.3.4."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3..4"
argument_list|)
operator|<<
literal|"1.2.3..4"
expr_stmt|;
comment|// octet more than 255
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2.2.2.257"
argument_list|)
operator|<<
literal|"2.2.2.257"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2.2.257.2"
argument_list|)
operator|<<
literal|"2.2.257.2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2.257.2.2"
argument_list|)
operator|<<
literal|"2.257.2.2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"257.2.2.2"
argument_list|)
operator|<<
literal|"257.2.2.2"
expr_stmt|;
comment|// number more than field available
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2.2.0x01010101"
argument_list|)
operator|<<
literal|"2.2.0x01010101"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2.0x01010101"
argument_list|)
operator|<<
literal|"2.0x01010101"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4294967296"
argument_list|)
operator|<<
literal|"4294967296"
expr_stmt|;
comment|// bad octals
name|QTest
operator|::
name|newRow
argument_list|(
literal|"09"
argument_list|)
operator|<<
literal|"09"
expr_stmt|;
comment|// bad hex
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x1g"
argument_list|)
operator|<<
literal|"0x1g"
expr_stmt|;
comment|// letters
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3a.4"
argument_list|)
operator|<<
literal|"1.2.3a.4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a.2.3.4"
argument_list|)
operator|<<
literal|"a.2.3.4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3.4a"
argument_list|)
operator|<<
literal|"1.2.3.4a"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidParseIp4
name|void
name|tst_QIpAddress
operator|::
name|invalidParseIp4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|data
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GLIBC__
block|{
name|in_addr
name|inet_result
decl_stmt|;
name|int
name|inet_ok
init|=
name|inet_aton
argument_list|(
name|data
operator|.
name|toLatin1
argument_list|()
argument_list|,
operator|&
name|inet_result
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|QEXPECT_FAIL
argument_list|(
literal|"4294967296"
argument_list|,
literal|"Mac's library does parse this one"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|inet_ok
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QIPAddressUtils
operator|::
name|IPv4Address
name|result
decl_stmt|;
name|bool
name|ok
init|=
name|QIPAddressUtils
operator|::
name|parseIp4
argument_list|(
name|result
argument_list|,
name|data
operator|.
name|constBegin
argument_list|()
argument_list|,
name|data
operator|.
name|constEnd
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ip4ToString_data
name|void
name|tst_QIpAddress
operator|::
name|ip4ToString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QIPAddressUtils
operator|::
name|IPv4Address
argument_list|>
argument_list|(
literal|"ip"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|<<
literal|0u
operator|<<
literal|"0.0.0.0"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3.4"
argument_list|)
operator|<<
literal|0x01020304u
operator|<<
literal|"1.2.3.4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"111.222.33.44"
argument_list|)
operator|<<
literal|0x6fde212cu
operator|<<
literal|"111.222.33.44"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"255.255.255.255"
argument_list|)
operator|<<
literal|0xffffffffu
operator|<<
literal|"255.255.255.255"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ip4ToString
name|void
name|tst_QIpAddress
operator|::
name|ip4ToString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QIPAddressUtils
operator|::
name|IPv4Address
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GLIBC__
name|in_addr
name|inet_ip
decl_stmt|;
name|inet_ip
operator|.
name|s_addr
operator|=
name|htonl
argument_list|(
name|ip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|inet_ntoa
argument_list|(
name|inet_ip
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|result
decl_stmt|;
name|QIPAddressUtils
operator|::
name|toString
argument_list|(
name|result
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QIpAddress
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qipaddress.moc"
end_include
end_unit
