begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<QMutexLocker>
end_include
begin_include
include|#
directive|include
file|<QLoggingCategory>
end_include
begin_macro
name|Q_LOGGING_CATEGORY
argument_list|(
argument|TST_LOG
argument_list|,
literal|"tst.log"
argument_list|)
end_macro
begin_macro
name|Q_LOGGING_CATEGORY
argument_list|(
argument|TST_LOG1
argument_list|,
literal|"tst.log1"
argument_list|)
end_macro
begin_macro
name|Q_LOGGING_CATEGORY
argument_list|(
argument|Digia_Oslo_Office_com
argument_list|,
literal|"Digia.Oslo.Office.com"
argument_list|)
end_macro
begin_macro
name|Q_LOGGING_CATEGORY
argument_list|(
argument|Digia_Oulu_Office_com
argument_list|,
literal|"Digia.Oulu.Office.com"
argument_list|)
end_macro
begin_macro
name|Q_LOGGING_CATEGORY
argument_list|(
argument|Digia_Berlin_Office_com
argument_list|,
literal|"Digia.Berlin.Office.com"
argument_list|)
end_macro
begin_decl_stmt
name|QT_USE_NAMESPACE
DECL|variable|oldMessageHandler
name|QtMessageHandler
name|oldMessageHandler
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|logMessage
name|QString
name|logMessage
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|multithreadtest
name|bool
name|multithreadtest
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|threadtest
name|QStringList
name|threadtest
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|threadmutex
name|QMutex
name|threadmutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|usedefaultformat
name|bool
name|usedefaultformat
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qMyMessageFormatString
name|QByteArray
name|qMyMessageFormatString
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|QByteArray
name|message
decl_stmt|;
if|if
condition|(
operator|!
name|usedefaultformat
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|context
operator|.
name|category
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QtDebugMsg
case|:
name|message
operator|.
name|append
argument_list|(
literal|".debug"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtWarningMsg
case|:
name|message
operator|.
name|append
argument_list|(
literal|".warning"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtCriticalMsg
case|:
name|message
operator|.
name|append
argument_list|(
literal|".critical"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QtFatalMsg
case|:
name|message
operator|.
name|append
argument_list|(
literal|".fatal"
argument_list|)
expr_stmt|;
break|break;
block|}
name|message
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|qPrintable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|append
argument_list|(
name|qPrintable
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|message
operator|.
name|simplified
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|myCustomMessageHandler
specifier|static
name|void
name|myCustomMessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|threadmutex
argument_list|)
decl_stmt|;
name|logMessage
operator|=
name|qMyMessageFormatString
argument_list|(
name|type
argument_list|,
name|context
argument_list|,
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|multithreadtest
condition|)
name|threadtest
operator|.
name|append
argument_list|(
name|logMessage
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Configuration
class|class
name|Configuration
block|{
public|public:
DECL|function|Configuration
name|Configuration
parameter_list|()
block|{     }
DECL|function|addKey
name|void
name|addKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|bool
name|val
parameter_list|)
block|{
comment|// Old key values gets updated
name|_values
operator|.
name|insert
argument_list|(
name|key
argument_list|,
operator|(
name|val
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|_configitemEntryOrder
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
name|_configitemEntryOrder
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|function|addKey
name|void
name|addKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
block|{
comment|// Old key values gets updated
name|_values
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|_configitemEntryOrder
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
name|_configitemEntryOrder
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|function|array
name|QByteArray
name|array
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
name|QTextStream
name|out
argument_list|(
operator|&
name|ret
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|_configitemEntryOrder
operator|.
name|count
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|out
operator|<<
name|_configitemEntryOrder
index|[
name|a
index|]
operator|<<
literal|" = "
operator|<<
name|_values
operator|.
name|value
argument_list|(
name|_configitemEntryOrder
index|[
name|a
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|ret
operator|.
name|toLatin1
argument_list|()
return|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|_values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|_configitemEntryOrder
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|_values
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|_values
decl_stmt|;
DECL|member|_configitemEntryOrder
name|QStringList
name|_configitemEntryOrder
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|configuration1
specifier|static
name|Configuration
name|configuration1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|configuration2
specifier|static
name|Configuration
name|configuration2
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|LogThread
class|class
name|LogThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|LogThread
name|LogThread
parameter_list|(
specifier|const
name|QString
modifier|&
name|logtext
parameter_list|,
name|Configuration
modifier|*
name|configuration
parameter_list|)
member_init_list|:
name|_logtext
argument_list|(
name|logtext
argument_list|)
member_init_list|,
name|_configuration
argument_list|(
name|configuration
argument_list|)
block|{}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|_configuration
operator|->
name|array
argument_list|()
decl_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Oslo "
operator|<<
name|_logtext
operator|<<
literal|" :true"
expr_stmt|;
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|arr
operator|=
name|_configuration
operator|->
name|array
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Oslo "
operator|<<
name|_logtext
operator|<<
literal|" :false"
expr_stmt|;
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|arr
operator|=
name|_configuration
operator|->
name|array
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Berlin "
operator|<<
name|_logtext
operator|<<
literal|" :true"
expr_stmt|;
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|arr
operator|=
name|_configuration
operator|->
name|array
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Berlin "
operator|<<
name|_logtext
operator|<<
literal|" :false"
expr_stmt|;
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|arr
operator|=
name|_configuration
operator|->
name|array
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Oulu "
operator|<<
name|_logtext
operator|<<
literal|" :true"
expr_stmt|;
name|_configuration
operator|->
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|arr
operator|=
name|_configuration
operator|->
name|array
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Oulu "
operator|<<
name|_logtext
operator|<<
literal|" :false"
expr_stmt|;
block|}
block|}
public|public:
DECL|member|_logtext
name|QString
name|_logtext
decl_stmt|;
DECL|member|_configuration
name|Configuration
modifier|*
name|_configuration
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|cleanLogLine
specifier|inline
name|QString
name|cleanLogLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|qstring
parameter_list|)
block|{
name|QString
name|buf
init|=
name|qstring
decl_stmt|;
name|buf
operator|.
name|remove
argument_list|(
literal|"../"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|remove
argument_list|(
literal|"qlog/"
argument_list|)
expr_stmt|;
name|QString
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|i
index|]
operator|>=
literal|'!'
operator|&&
name|buf
index|[
name|i
index|]
operator|<=
literal|'z'
condition|)
name|ret
operator|+=
name|buf
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|customCategoryFilterArgs
name|QStringList
name|customCategoryFilterArgs
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|customCategoryFilter
specifier|static
name|void
name|customCategoryFilter
parameter_list|(
name|QLoggingCategory
modifier|*
name|category
parameter_list|)
block|{
name|customCategoryFilterArgs
operator|<<
name|QLatin1String
argument_list|(
name|category
operator|->
name|categoryName
argument_list|()
argument_list|)
expr_stmt|;
comment|// invert debug
name|category
operator|->
name|setEnabled
argument_list|(
name|QtDebugMsg
argument_list|,
operator|!
name|category
operator|->
name|isEnabled
argument_list|(
name|QtDebugMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QLogging
class|class
name|tst_QLogging
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private:
DECL|member|_config
name|Configuration
modifier|*
name|_config
decl_stmt|;
DECL|member|logEntries
name|QStringList
name|logEntries
decl_stmt|;
private|private
name|slots
private|:
DECL|function|initTestCase
name|void
name|initTestCase
parameter_list|()
block|{
name|qputenv
argument_list|(
literal|"QT_MESSAGE_PATTERN"
argument_list|,
name|QByteArray
argument_list|(
literal|"%{category}: %{type},%{message}"
argument_list|)
argument_list|)
expr_stmt|;
name|oldMessageHandler
operator|=
name|qInstallMessageHandler
argument_list|(
name|myCustomMessageHandler
argument_list|)
expr_stmt|;
comment|// Create configuration
name|_config
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
DECL|function|QLoggingCategory_categoryName
name|void
name|QLoggingCategory_categoryName
parameter_list|()
block|{
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|categoryName
argument_list|()
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|defaultCategory
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|defaultCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|nullCategory
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|nullCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
comment|// we rely on the same pointer for any "default" category
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|categoryName
argument_list|()
argument_list|,
name|defaultCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|categoryName
argument_list|()
argument_list|,
name|nullCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|customCategory
argument_list|(
literal|"custom"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|customCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"custom"
argument_list|)
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|emptyCategory
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|emptyCategory
operator|.
name|categoryName
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure nothing has printed warnings
name|QVERIFY
argument_list|(
name|logMessage
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingCategory_isEnabled
name|void
name|QLoggingCategory_isEnabled
parameter_list|()
block|{
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isEnabled
argument_list|(
name|QtDebugMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isWarningEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isEnabled
argument_list|(
name|QtWarningMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isCriticalEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isEnabled
argument_list|(
name|QtCriticalMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|defaultCategory
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isDebugEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isEnabled
argument_list|(
name|QtDebugMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isWarningEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isEnabled
argument_list|(
name|QtWarningMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isCriticalEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|defaultCategory
operator|.
name|isEnabled
argument_list|(
name|QtCriticalMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|customCategory
argument_list|(
literal|"custom"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isDebugEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isEnabled
argument_list|(
name|QtDebugMsg
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isWarningEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isEnabled
argument_list|(
name|QtWarningMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isCriticalEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategory
operator|.
name|isEnabled
argument_list|(
name|QtCriticalMsg
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make sure nothing has printed warnings
name|QVERIFY
argument_list|(
name|logMessage
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingCategory_setEnabled
name|void
name|QLoggingCategory_setEnabled
parameter_list|()
block|{
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|setEnabled
argument_list|(
name|QtDebugMsg
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|setEnabled
argument_list|(
name|QtDebugMsg
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make sure nothing has printed warnings
name|QVERIFY
argument_list|(
name|logMessage
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|QLoggingCategory_installFilter
name|void
name|QLoggingCategory_installFilter
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|CategoryFilter
name|defaultFilter
init|=
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
name|customCategoryFilter
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|defaultFilter
argument_list|)
expr_stmt|;
name|customCategoryFilterArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|cat
argument_list|(
literal|"custom"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|customCategoryFilterArgs
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"custom"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cat
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|customCategoryFilterArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// install default filter
name|QLoggingCategory
operator|::
name|CategoryFilter
name|currentFilter
init|=
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
name|defaultFilter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|void
operator|*
operator|)
name|currentFilter
argument_list|,
operator|(
name|void
operator|*
operator|)
name|customCategoryFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategoryFilterArgs
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// install default filter
name|currentFilter
operator|=
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|void
operator|*
operator|)
name|defaultFilter
argument_list|,
operator|(
name|void
operator|*
operator|)
name|currentFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|customCategoryFilterArgs
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QLoggingCategory
operator|::
name|defaultCategory
argument_list|()
operator|->
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cat
operator|.
name|isDebugEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|qDebugMacros
name|void
name|qDebugMacros
parameter_list|()
block|{
name|QString
name|buf
decl_stmt|;
comment|// Check default debug
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: Check debug with no filter active"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
literal|"Check debug with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check default warning
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: Check warning with no filter active"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
literal|"Check warning with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check default critical
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: Check critical with no filter active"
argument_list|)
expr_stmt|;
name|qCritical
argument_list|(
literal|"%s"
argument_list|,
literal|"Check critical with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// install filter (inverts rules for qtdebug)
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
name|customCategoryFilter
argument_list|)
expr_stmt|;
comment|// Check default debug
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
literal|"Check debug with filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset to default filter
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check default debug
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: Check debug with no filter active"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
literal|"Check debug with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
DECL|function|qCDebugMacros
name|void
name|qCDebugMacros
parameter_list|()
block|{
name|QString
name|buf
decl_stmt|;
name|QLoggingCategory
name|defaultCategory
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Check default debug
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: Check debug with no filter active"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|defaultCategory
argument_list|)
operator|<<
literal|"Check debug with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|defaultCategory
argument_list|,
literal|"Check debug with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check default warning
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: Check warning with no filter active"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|defaultCategory
argument_list|)
operator|<<
literal|"Check warning with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|defaultCategory
argument_list|,
literal|"Check warning with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check default critical
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: Check critical with no filter active"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|defaultCategory
argument_list|)
operator|<<
literal|"Check critical with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|defaultCategory
argument_list|,
literal|"Check critical with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|customCategory
argument_list|(
literal|"custom"
argument_list|)
decl_stmt|;
comment|// Check custom debug
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|customCategory
argument_list|)
operator|<<
literal|"Check debug with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check custom warning
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"custom.warning: Check warning with no filter active"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|customCategory
argument_list|)
operator|<<
literal|"Check warning with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check custom critical
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"custom.critical: Check critical with no filter active"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|customCategory
argument_list|)
operator|<<
literal|"Check critical with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// install filter (inverts rules for qtdebug)
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
name|customCategoryFilter
argument_list|)
expr_stmt|;
comment|// Check custom debug
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"custom.debug: Check debug with filter active"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|customCategory
argument_list|)
operator|<<
literal|"Check debug with filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check different macro/category variants
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.debug: Check debug with no filter active"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check debug with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|,
literal|"Check debug with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.warning: Check warning with no filter active"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check warning with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|TST_LOG
argument_list|,
literal|"Check warning with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.critical: Check critical with no filter active"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check critical with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|TST_LOG
argument_list|,
literal|"Check critical with no filter active"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// reset to default filter
name|QLoggingCategory
operator|::
name|installFilter
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check custom debug
name|logMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qCDebug
argument_list|(
name|customCategory
argument_list|)
operator|<<
literal|"Check debug with no filter active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|checkLegacyMessageLogger
name|void
name|checkLegacyMessageLogger
parameter_list|()
block|{
name|usedefaultformat
operator|=
literal|true
expr_stmt|;
comment|// This should just not crash.
name|QMessageLogger
argument_list|(
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|Q_FUNC_INFO
argument_list|)
operator|.
name|debug
argument_list|()
operator|<<
literal|"checkLegacyMessageLogger1"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QStringLiteral
argument_list|(
literal|"checkLegacyMessageLogger1"
argument_list|)
argument_list|)
expr_stmt|;
name|QMessageLogger
argument_list|(
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|Q_FUNC_INFO
argument_list|)
operator|.
name|warning
argument_list|()
operator|<<
literal|"checkLegacyMessageLogger2"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QStringLiteral
argument_list|(
literal|"checkLegacyMessageLogger2"
argument_list|)
argument_list|)
expr_stmt|;
name|QMessageLogger
argument_list|(
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|Q_FUNC_INFO
argument_list|)
operator|.
name|critical
argument_list|()
operator|<<
literal|"checkLegacyMessageLogger3"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|QStringLiteral
argument_list|(
literal|"checkLegacyMessageLogger3"
argument_list|)
argument_list|)
expr_stmt|;
name|usedefaultformat
operator|=
literal|false
expr_stmt|;
block|}
comment|// Check the Debug, Warning and critical without having category active. should be active.
DECL|function|checkNoCategoryLogActive
name|void
name|checkNoCategoryLogActive
parameter_list|()
block|{
comment|// Check default debug
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"default.debug: Check default Debug with no log active"
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Check default Debug with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check default warning
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: Check default Warning with no log active"
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Check default Warning with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check default critical
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: Check default Critical with no log active"
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"Check default Critical with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check category debug
name|logMessage
operator|=
literal|"should not change"
expr_stmt|;
name|buf
operator|=
name|logMessage
expr_stmt|;
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check category Debug with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|logMessage
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|// Check default warning
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.warning: Check category Warning with no log active"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check category Warning with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check default critical
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.critical: Check category Critical with no log active"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check category Critical with no log active"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|writeCategoryLogs
name|void
name|writeCategoryLogs
parameter_list|()
block|{
name|usedefaultformat
operator|=
literal|false
expr_stmt|;
comment|// Activate TST_LOG category
name|logMessage
operator|=
literal|""
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"tst.log"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"tst.log.debug: Check for default messagePattern"
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"Check for default messagePattern"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Activate TST_LOG category with default enabled function info
name|_config
operator|->
name|addKey
argument_list|(
literal|"tst.log1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"1"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.debug: 1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write out all different types
name|qCDebug
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"DebugType"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.debug: DebugType"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"WarningType"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.warning: WarningType"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|TST_LOG
argument_list|)
operator|<<
literal|"CriticalType"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"tst.log.critical: CriticalType"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|checkLegacyLogs
name|void
name|checkLegacyLogs
parameter_list|()
block|{
name|logMessage
operator|=
literal|""
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug"
expr_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"default.debug: DefaultDebug"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// debug off by default, warning and critical are on
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: DefaultWarning"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: DefaultCritical"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable debug
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.debug"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug1"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: DefaultDebug1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning1"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: DefaultWarning1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical1"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: DefaultCritical1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable warning
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.warning"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: DefaultDebug2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: DefaultCritical2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable critical
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.critical"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.debug"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug3"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning3"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical3"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Enable default logs
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.critical"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.warning"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"default.debug"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure all are on
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug4"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug: DefaultDebug4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning4"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.warning: DefaultWarning4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical4"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.critical: DefaultCritical4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable default log
name|_config
operator|->
name|addKey
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure all are off
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"DefaultDebug5"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"DefaultWarning5"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCritical
argument_list|()
operator|<<
literal|"DefaultCritical5"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Reset
name|_config
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|checkFiltering
name|void
name|checkFiltering
parameter_list|()
block|{
comment|// Enable default logs
name|_config
operator|->
name|clear
argument_list|()
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oslo.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oulu.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Berlin.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"MessagePattern"
argument_list|,
name|QString
argument_list|(
literal|"%{category}: %{message}"
argument_list|)
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Digia.Oslo.Office.com 1"
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Digia.Oulu.Office.com 1"
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Digia.Berlin.Office.com 1"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oslo.Office.com"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oulu.Office.com"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Berlin.Office.com"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Digia.Oslo.Office.com 2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Digia.Oslo.Office.com 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Digia.Oulu.Office.com 2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Digia.Oulu.Office.com 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Digia.Berlin.Office.com 2"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Digia.Berlin.Office.com 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check right filter
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oslo.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Oulu.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.Berlin.Office.com"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"*Office.com*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Digia.Oslo.Office.com 3"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Digia.Oslo.Office.com 3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Digia.Oulu.Office.com 3"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Digia.Oulu.Office.com 3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Digia.Berlin.Office.com 3"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Digia.Berlin.Office.com 3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check left filter
name|_config
operator|->
name|addKey
argument_list|(
literal|"*Office.com*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"*Office.com.debug"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Debug: Digia.Oslo.Office.com 4"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Debug: Digia.Oslo.Office.com 4"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Warning: Digia.Oulu.Office.com 4"
expr_stmt|;
name|qCCritical
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Critical: Digia.Berlin.Office.com 4"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check right filter
name|_config
operator|->
name|addKey
argument_list|(
literal|"*Office.com.debug"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Debug: Digia.Oslo.Office.com 5"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Debug: Digia.Oslo.Office.com 5"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Warning: Digia.Oulu.Office.com 5"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.warning: Warning: Digia.Oulu.Office.com 5"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Critical: Digia.Berlin.Office.com 5"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.critical: Critical: Digia.Berlin.Office.com 5"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check mid filter
name|_config
operator|->
name|addKey
argument_list|(
literal|"Digia.*"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Debug: Digia.Oslo.Office.com 6"
expr_stmt|;
name|qCWarning
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Warning: Digia.Oulu.Office.com 6"
expr_stmt|;
name|qCCritical
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Critical: Digia.Berlin.Office.com 6"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"*.Office.*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|Digia_Oslo_Office_com
argument_list|)
operator|<<
literal|"Debug: Digia.Oslo.Office.com 7"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Debug: Digia.Oslo.Office.com 7"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|Digia_Oulu_Office_com
argument_list|)
operator|<<
literal|"Warning: Digia.Oulu.Office.com 7"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.warning: Warning: Digia.Oulu.Office.com 7"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|Digia_Berlin_Office_com
argument_list|)
operator|<<
literal|"Critical: Digia.Berlin.Office.com 7"
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.critical: Critical: Digia.Berlin.Office.com 7"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|checkLogWithCategoryObject
name|void
name|checkLogWithCategoryObject
parameter_list|()
block|{
name|_config
operator|->
name|clear
argument_list|()
expr_stmt|;
name|_config
operator|->
name|addKey
argument_list|(
literal|"LoggingCategoryObject"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QLoggingCategory
modifier|*
name|pcategorybject
init|=
literal|0
decl_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|_config
operator|->
name|array
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QLoggingCategory
name|mycategoryobject
argument_list|(
literal|"LoggingCategoryObject"
argument_list|)
decl_stmt|;
name|pcategorybject
operator|=
operator|&
name|mycategoryobject
expr_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.debug: My Category Object"
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.warning: My Category Object"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.critical: My Category Object"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|QLoggingCategory
name|mycategoryobject2
argument_list|(
literal|"LoggingCategoryObject"
argument_list|)
decl_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.debug: My Category Object"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.warning: My Category Object"
argument_list|)
expr_stmt|;
name|qCWarning
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"LoggingCategoryObject.critical: My Category Object"
argument_list|)
expr_stmt|;
name|qCCritical
argument_list|(
name|mycategoryobject
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Q_UNUSED
argument_list|(
name|pcategorybject
argument_list|)
expr_stmt|;
block|}
DECL|function|checkEmptyCategoryName
name|void
name|checkEmptyCategoryName
parameter_list|()
block|{
comment|// "" -> custom category
name|QLoggingCategory
name|mycategoryobject1
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|logMessage
operator|=
literal|"no change"
expr_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"no change"
argument_list|)
decl_stmt|;
name|qCDebug
argument_list|(
name|mycategoryobject1
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
comment|// 0 -> default category
name|QLoggingCategory
name|mycategoryobject2
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"default.debug:MyCategoryObject"
argument_list|)
expr_stmt|;
name|qCDebug
argument_list|(
name|mycategoryobject2
argument_list|)
operator|<<
literal|"My Category Object"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cleanLogLine
argument_list|(
name|logMessage
argument_list|)
argument_list|,
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|checkMultithreading
name|void
name|checkMultithreading
parameter_list|()
block|{
name|multithreadtest
operator|=
literal|true
expr_stmt|;
comment|// Init two configurations, one for each thread
name|configuration1
operator|.
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration2
operator|.
name|addKey
argument_list|(
literal|"Digia*"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|configuration1
operator|.
name|array
argument_list|()
decl_stmt|;
name|QLoggingCategory
operator|::
name|setFilterRules
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|LogThread
name|thgread1
argument_list|(
name|QString
argument_list|(
literal|"from Thread 1"
argument_list|)
argument_list|,
operator|&
name|configuration1
argument_list|)
decl_stmt|;
name|LogThread
name|thgread2
argument_list|(
name|QString
argument_list|(
literal|"from Thread 2"
argument_list|)
argument_list|,
operator|&
name|configuration2
argument_list|)
decl_stmt|;
comment|// Writing out stuff from 2 different threads into the same areas
name|thgread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|thgread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|thgread1
operator|.
name|wait
argument_list|()
expr_stmt|;
name|thgread2
operator|.
name|wait
argument_list|()
expr_stmt|;
comment|// Check if each log line is complete
name|QStringList
name|compareagainst
decl_stmt|;
name|QString
name|buf
init|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Oslo  \"from Thread 1\"  :true"
argument_list|)
decl_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Oulu  \"from Thread 1\"  :true"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Berlin  \"from Thread 1\"  :true"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Oslo  \"from Thread 1\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Oulu  \"from Thread 1\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Berlin  \"from Thread 1\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Oslo  \"from Thread 2\"  :true"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Oulu  \"from Thread 2\"  :true"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Berlin  \"from Thread 2\"  :true"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oslo.Office.com.debug: Oslo  \"from Thread 2\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Oulu.Office.com.debug: Oulu  \"from Thread 2\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|=
name|QStringLiteral
argument_list|(
literal|"Digia.Berlin.Office.com.debug: Berlin  \"from Thread 2\"  :false"
argument_list|)
expr_stmt|;
name|compareagainst
operator|.
name|append
argument_list|(
name|cleanLogLine
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadtest
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|compareagainst
operator|.
name|contains
argument_list|(
name|cleanLogLine
argument_list|(
name|threadtest
index|[
name|i
index|]
argument_list|)
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"%s\r\n"
argument_list|,
name|threadtest
index|[
name|i
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
literal|false
argument_list|,
literal|"Multithread log is not complete!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|_config
expr_stmt|;
name|qInstallMessageHandler
argument_list|(
name|oldMessageHandler
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLogging
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qloggingcategory.moc"
end_include
end_unit
