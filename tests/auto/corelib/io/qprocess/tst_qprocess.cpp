begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegExp>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaType>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QHostInfo>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_include
include|#
directive|include
file|<private/qprocess_p.h>
end_include
begin_comment
comment|// only so we get QPROCESS_USE_SPAWN
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
DECL|variable|ExitStatus
name|Q_DECLARE_METATYPE
argument_list|(
name|QProcess
operator|::
name|ExitStatus
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|variable|ProcessState
name|Q_DECLARE_METATYPE
argument_list|(
name|QProcess
operator|::
name|ProcessState
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|QPROCESS_VERIFY
define|#
directive|define
name|QPROCESS_VERIFY
parameter_list|(
name|Process
parameter_list|,
name|Fn
parameter_list|)
define|\
value|{ \ const bool ret = Process.Fn; \ if (ret == false) \     qWarning("QProcess error: %d: %s", Process.error(), qPrintable(Process.errorString())); \ QVERIFY(ret); \ }
end_define
begin_class
DECL|class|tst_QProcess
class|class
name|tst_QProcess
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|simpleStart
parameter_list|()
function_decl|;
name|void
name|startWithOpen
parameter_list|()
function_decl|;
name|void
name|startWithOldOpen
parameter_list|()
function_decl|;
name|void
name|execute
parameter_list|()
function_decl|;
name|void
name|startDetached
parameter_list|()
function_decl|;
name|void
name|crashTest
parameter_list|()
function_decl|;
name|void
name|crashTest2
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|void
name|echoTest_data
parameter_list|()
function_decl|;
name|void
name|echoTest
parameter_list|()
function_decl|;
name|void
name|echoTest2
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|void
name|echoTestGui
parameter_list|()
function_decl|;
name|void
name|testSetNamedPipeHandleState
parameter_list|()
function_decl|;
name|void
name|batFiles_data
parameter_list|()
function_decl|;
name|void
name|batFiles
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|loopBackTest
parameter_list|()
function_decl|;
name|void
name|readTimeoutAndThenCrash
parameter_list|()
function_decl|;
name|void
name|deadWhileReading
parameter_list|()
function_decl|;
name|void
name|restartProcessDeadlock
parameter_list|()
function_decl|;
name|void
name|closeWriteChannel
parameter_list|()
function_decl|;
name|void
name|closeReadChannel
parameter_list|()
function_decl|;
name|void
name|openModes
parameter_list|()
function_decl|;
name|void
name|emitReadyReadOnlyWhenNewDataArrives
parameter_list|()
function_decl|;
name|void
name|softExitInSlots_data
parameter_list|()
function_decl|;
name|void
name|softExitInSlots
parameter_list|()
function_decl|;
name|void
name|mergedChannels
parameter_list|()
function_decl|;
name|void
name|forwardedChannels_data
parameter_list|()
function_decl|;
name|void
name|forwardedChannels
parameter_list|()
function_decl|;
name|void
name|atEnd
parameter_list|()
function_decl|;
name|void
name|atEnd2
parameter_list|()
function_decl|;
name|void
name|waitForFinishedWithTimeout
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadInAReadyReadSlot
parameter_list|()
function_decl|;
name|void
name|waitForBytesWrittenInABytesWrittenSlot
parameter_list|()
function_decl|;
name|void
name|setEnvironment_data
parameter_list|()
function_decl|;
name|void
name|setEnvironment
parameter_list|()
function_decl|;
name|void
name|setProcessEnvironment_data
parameter_list|()
function_decl|;
name|void
name|setProcessEnvironment
parameter_list|()
function_decl|;
name|void
name|spaceInName
parameter_list|()
function_decl|;
name|void
name|setStandardInputFile
parameter_list|()
function_decl|;
name|void
name|setStandardOutputFile_data
parameter_list|()
function_decl|;
name|void
name|setStandardOutputFile
parameter_list|()
function_decl|;
name|void
name|setStandardOutputFile2
parameter_list|()
function_decl|;
name|void
name|setStandardOutputProcess_data
parameter_list|()
function_decl|;
name|void
name|setStandardOutputProcess
parameter_list|()
function_decl|;
name|void
name|removeFileWhileProcessIsRunning
parameter_list|()
function_decl|;
name|void
name|fileWriterProcess
parameter_list|()
function_decl|;
name|void
name|switchReadChannels
parameter_list|()
function_decl|;
name|void
name|discardUnwantedOutput
parameter_list|()
function_decl|;
name|void
name|setWorkingDirectory
parameter_list|()
function_decl|;
name|void
name|setNonExistentWorkingDirectory
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|// not Q_OS_WINCE
name|void
name|exitStatus_data
parameter_list|()
function_decl|;
name|void
name|exitStatus
parameter_list|()
function_decl|;
name|void
name|waitForFinished
parameter_list|()
function_decl|;
name|void
name|hardExit
parameter_list|()
function_decl|;
name|void
name|softExit
parameter_list|()
function_decl|;
name|void
name|processInAThread
parameter_list|()
function_decl|;
name|void
name|processesInMultipleThreads
parameter_list|()
function_decl|;
name|void
name|spaceArgsTest_data
parameter_list|()
function_decl|;
name|void
name|spaceArgsTest
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|void
name|nativeArguments
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|exitCodeTest
parameter_list|()
function_decl|;
name|void
name|systemEnvironment
parameter_list|()
function_decl|;
name|void
name|lockupsInStartDetached
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadForNonexistantProcess
parameter_list|()
function_decl|;
name|void
name|detachedWorkingDirectoryAndPid
parameter_list|()
function_decl|;
name|void
name|startFinishStartFinish
parameter_list|()
function_decl|;
name|void
name|invalidProgramString_data
parameter_list|()
function_decl|;
name|void
name|invalidProgramString
parameter_list|()
function_decl|;
name|void
name|onlyOneStartedSignal
parameter_list|()
function_decl|;
name|void
name|finishProcessBeforeReadingDone
parameter_list|()
function_decl|;
name|void
name|waitForStartedWithoutStart
parameter_list|()
function_decl|;
comment|// keep these at the end, since they use lots of processes and sometimes
comment|// caused obscure failures to occur in tests that followed them (esp. on the Mac)
name|void
name|failToStart
parameter_list|()
function_decl|;
name|void
name|failToStartWithWait
parameter_list|()
function_decl|;
name|void
name|failToStartWithEventLoop
parameter_list|()
function_decl|;
name|void
name|failToStartEmptyArgs_data
parameter_list|()
function_decl|;
name|void
name|failToStartEmptyArgs
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|readFromProcess
parameter_list|()
function_decl|;
name|void
name|exitLoopSlot
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|void
name|restartProcess
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadInAReadyReadSlotSlot
parameter_list|()
function_decl|;
name|void
name|waitForBytesWrittenInABytesWrittenSlotSlot
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|process
name|QProcess
modifier|*
name|process
decl_stmt|;
DECL|member|bytesAvailable
name|qint64
name|bytesAvailable
decl_stmt|;
endif|#
directive|endif
comment|//QT_NO_PROCESS
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QProcess
operator|::
name|initTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// chdir to our testdata path and execute helper apps relative to that.
name|QString
name|testdata_dir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"testProcessNormal"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|testdata_dir
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not chdir to "
operator|+
name|testdata_dir
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QProcess
operator|::
name|cleanupTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"This test requires QProcess support"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QProcess
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QProcess
name|obj1
decl_stmt|;
comment|// ProcessChannelMode QProcess::readChannelMode()
comment|// void QProcess::setReadChannelMode(ProcessChannelMode)
name|obj1
operator|.
name|setReadChannelMode
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
argument_list|,
name|obj1
operator|.
name|readChannelMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setReadChannelMode
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
argument_list|,
name|obj1
operator|.
name|readChannelMode
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setReadChannelMode
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
argument_list|,
name|obj1
operator|.
name|readChannelMode
argument_list|()
argument_list|)
expr_stmt|;
comment|// ProcessChannel QProcess::readChannel()
comment|// void QProcess::setReadChannel(ProcessChannel)
name|obj1
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|ProcessChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|ProcessChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
argument_list|,
name|obj1
operator|.
name|readChannel
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|ProcessChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|ProcessChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
argument_list|,
name|obj1
operator|.
name|readChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|constructing
name|void
name|tst_QProcess
operator|::
name|constructing
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readChannel
argument_list|()
argument_list|,
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|workingDirectory
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|environment
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|pid
argument_list|()
argument_list|,
name|Q_PID
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// QIODevice
name|QCOMPARE
argument_list|(
name|process
operator|.
name|openMode
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|pos
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|size
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|bytesToWrite
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|write
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QProcess
name|proc2
decl_stmt|;
block|}
end_function
begin_function
DECL|function|simpleStart
name|void
name|tst_QProcess
operator|::
name|simpleStart
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
literal|"QProcess::ProcessState"
argument_list|)
expr_stmt|;
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|stateChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readFromProcess
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/* valgrind dislike SUID binaries(those that have the `s'-flag set), which      * makes it fail to start the process. For this reason utilities like `ping' won't      * start, when the auto test is run through `valgrind'. */
name|process
operator|->
name|start
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|->
name|state
argument_list|()
operator|!=
name|QProcess
operator|::
name|Starting
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Starting
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|startWithOpen
name|void
name|tst_QProcess
operator|::
name|startWithOpen
parameter_list|()
block|{
name|QProcess
name|p
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QProcess::start: program not set"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProgram
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|program
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setArguments
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"arg1"
operator|<<
literal|"arg2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|arguments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|openMode
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|startWithOldOpen
name|void
name|tst_QProcess
operator|::
name|startWithOldOpen
parameter_list|()
block|{
comment|// similar to the above, but we start with start() actually
comment|// while open() is overridden to call QIODevice::open().
comment|// This tests the BC requirement that "it works with the old implementation"
class|class
name|OverriddenOpen
super|:
specifier|public
name|QProcess
block|{
public|public:
specifier|virtual
name|bool
name|open
parameter_list|(
name|OpenMode
name|mode
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
return|return
name|QIODevice
operator|::
name|open
argument_list|(
name|mode
argument_list|)
return|;
block|}
block|}
class|;
name|OverriddenOpen
name|p
decl_stmt|;
name|p
operator|.
name|start
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|execute
name|void
name|tst_QProcess
operator|::
name|execute
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|execute
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"arg1"
operator|<<
literal|"arg2"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|execute
argument_list|(
literal|"nonexistingexe"
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|startDetached
name|void
name|tst_QProcess
operator|::
name|startDetached
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|startDetached
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"arg1"
operator|<<
literal|"arg2"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QPROCESS_USE_SPAWN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QProcess
operator|::
name|startDetached
argument_list|(
literal|"nonexistingexe"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readFromProcess
name|void
name|tst_QProcess
operator|::
name|readFromProcess
parameter_list|()
block|{
name|int
name|lines
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|process
operator|->
name|canReadLine
argument_list|()
condition|)
block|{
operator|++
name|lines
expr_stmt|;
name|QByteArray
name|line
init|=
name|process
operator|->
name|readLine
argument_list|()
decl_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|crashTest
name|void
name|tst_QProcess
operator|::
name|crashTest
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
literal|"QProcess::ProcessState"
argument_list|)
expr_stmt|;
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|QSignalSpy
name|stateSpy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|stateChanged
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stateSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessCrash/testProcessCrash"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy3
argument_list|(
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy3
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ProcessError
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Crashed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ProcessError
operator|*
argument_list|>
argument_list|(
name|spy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Crashed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy3
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ExitStatus
operator|*
argument_list|>
argument_list|(
name|spy3
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|CrashExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|CrashExit
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stateSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Starting
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|crashTest2
name|void
name|tst_QProcess
operator|::
name|crashTest2
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessCrash/testProcessCrash"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|errorOccurred
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Failed to detect crash : operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ProcessError
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Crashed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ExitStatus
operator|*
argument_list|>
argument_list|(
name|spy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|CrashExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|CrashExit
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|//Reading and writing to a process is not supported on Qt/CE
end_comment
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|echoTest_data
name|void
name|tst_QProcess
operator|::
name|echoTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"H"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"He"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hell"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100 bytes"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|100
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1000 bytes"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1000
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10000 bytes"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|10000
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|echoTest
name|void
name|tst_QProcess
operator|::
name|echoTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
do|do
block|{
name|QVERIFY
argument_list|(
name|process
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|60000
operator|&&
name|process
operator|->
name|bytesAvailable
argument_list|()
operator|<
name|input
operator|.
name|size
argument_list|()
condition|)
do|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|60000
condition|)
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
name|QByteArray
name|message
init|=
name|process
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|message
operator|.
name|size
argument_list|()
argument_list|,
name|input
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|char
modifier|*
name|c1
init|=
name|message
operator|.
name|data
argument_list|()
decl_stmt|;
name|char
modifier|*
name|c2
init|=
name|input
operator|.
name|data
argument_list|()
decl_stmt|;
while|while
condition|(
operator|*
name|c1
operator|&&
operator|*
name|c2
condition|)
block|{
if|if
condition|(
operator|*
name|c1
operator|!=
operator|*
name|c2
condition|)
name|QCOMPARE
argument_list|(
operator|*
name|c1
argument_list|,
operator|*
name|c2
argument_list|)
expr_stmt|;
operator|++
name|c1
expr_stmt|;
operator|++
name|c2
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|*
name|c1
argument_list|,
operator|*
name|c2
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|exitLoopSlot
name|void
name|tst_QProcess
operator|::
name|exitLoopSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|echoTest2
name|void
name|tst_QProcess
operator|::
name|echoTest2
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|->
name|waitForReadyRead
argument_list|(
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Timedout
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy1
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|readyReadStandardOutput
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|readyReadStandardError
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
name|process
operator|->
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|qint64
name|baso
init|=
name|process
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
name|process
operator|->
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|qint64
name|base
init|=
name|process
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
if|if
condition|(
name|baso
operator|==
literal|5
operator|&&
name|base
operator|==
literal|5
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|readAllStandardOutput
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|echoTestGui
name|void
name|tst_QProcess
operator|::
name|echoTestGui
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEchoGui/testProcessEchoGui"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|50000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSetNamedPipeHandleState
name|void
name|tst_QProcess
operator|::
name|testSetNamedPipeHandleState
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setProcessChannelMode
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testSetNamedPipeHandleState/testSetNamedPipeHandleState"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE&& Q_OS_WIN
end_comment
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_comment
comment|// Batch files are not supported on Windows CE
end_comment
begin_function
DECL|function|batFiles_data
name|void
name|tst_QProcess
operator|::
name|batFiles_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"batFile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"testBatFiles/simple.bat"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with space"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"testBatFiles/with space.bat"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|batFiles
name|void
name|tst_QProcess
operator|::
name|batFiles
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|batFile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
name|batFile
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|bytesAvailable
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
operator|.
name|startsWith
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_OS_WINCE&& Q_OS_WIN
end_comment
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|exitStatus_data
name|void
name|tst_QProcess
operator|::
name|exitStatus_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"processList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|>
argument_list|(
literal|"exitStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"testProcessNormal/testProcessNormal"
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|()
operator|<<
name|QProcess
operator|::
name|NormalExit
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"crash"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"testProcessCrash/testProcessCrash"
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|()
operator|<<
name|QProcess
operator|::
name|CrashExit
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal-crash"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"testProcessNormal/testProcessNormal"
operator|<<
literal|"testProcessCrash/testProcessCrash"
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|()
operator|<<
name|QProcess
operator|::
name|NormalExit
operator|<<
name|QProcess
operator|::
name|CrashExit
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"crash-normal"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"testProcessCrash/testProcessCrash"
operator|<<
literal|"testProcessNormal/testProcessNormal"
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|()
operator|<<
name|QProcess
operator|::
name|CrashExit
operator|<<
name|QProcess
operator|::
name|NormalExit
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exitStatus
name|void
name|tst_QProcess
operator|::
name|exitStatus
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|processList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|,
name|exitStatus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|exitStatus
operator|.
name|count
argument_list|()
argument_list|,
name|processList
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|processList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|process
operator|->
name|start
argument_list|(
name|processList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|exitStatus
argument_list|()
argument_list|,
name|exitStatus
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|process
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|loopBackTest
name|void
name|tst_QProcess
operator|::
name|loopBackTest
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|process
operator|->
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
do|do
block|{
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|process
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|5
condition|)
do|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|readTimeoutAndThenCrash
name|void
name|tst_QProcess
operator|::
name|readTimeoutAndThenCrash
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|->
name|state
argument_list|()
operator|!=
name|QProcess
operator|::
name|Starting
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Running
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Timedout
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|->
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ProcessError
operator|*
argument_list|>
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Crashed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|QProcess
operator|::
name|ProcessError
operator|*
argument_list|>
argument_list|(
name|spy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Crashed
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|waitForFinished
name|void
name|tst_QProcess
operator|::
name|waitForFinished
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessOutput/testProcessOutput"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Reading and writing to a process is not supported on Qt/CE"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|output
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|output
operator|.
name|count
argument_list|(
literal|"\n"
argument_list|)
argument_list|,
literal|10
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"blurdybloop"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QPROCESS_USE_SPAWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|deadWhileReading
name|void
name|tst_QProcess
operator|::
name|deadWhileReading
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessDeadWhileReading/testProcessDeadWhileReading"
argument_list|)
expr_stmt|;
name|QString
name|output
decl_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
condition|)
name|output
operator|+=
name|process
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|output
operator|.
name|count
argument_list|(
literal|"\n"
argument_list|)
argument_list|,
literal|10
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|process
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|restartProcessDeadlock
name|void
name|tst_QProcess
operator|::
name|restartProcessDeadlock
parameter_list|()
block|{
comment|// The purpose of this test is to detect whether restarting a
comment|// process in the finished() connected slot causes a deadlock
comment|// because of the way QProcessManager uses its locks.
name|QProcess
name|proc
decl_stmt|;
name|process
operator|=
operator|&
name|proc
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|restartProcess
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|disconnect
argument_list|(
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|restartProcess
name|void
name|tst_QProcess
operator|::
name|restartProcess
parameter_list|()
block|{
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|closeWriteChannel
name|void
name|tst_QProcess
operator|::
name|closeWriteChannel
parameter_list|()
block|{
name|QProcess
name|more
decl_stmt|;
name|more
operator|.
name|start
argument_list|(
literal|"testProcessEOF/testProcessEOF"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|more
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|more
operator|.
name|waitForReadyRead
argument_list|(
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|more
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Timedout
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|more
operator|.
name|write
argument_list|(
literal|"Data to read"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|more
operator|.
name|waitForReadyRead
argument_list|(
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|more
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|Timedout
argument_list|)
expr_stmt|;
name|more
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|more
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|more
operator|.
name|readAll
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Data to read"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|more
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|Running
condition|)
name|more
operator|.
name|write
argument_list|(
literal|"q"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|more
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE"
end_comment
begin_function
DECL|function|closeReadChannel
name|void
name|tst_QProcess
operator|::
name|closeReadChannel
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QProcess
operator|::
name|ProcessChannel
name|channel1
init|=
name|QProcess
operator|::
name|StandardOutput
decl_stmt|;
name|QProcess
operator|::
name|ProcessChannel
name|channel2
init|=
name|QProcess
operator|::
name|StandardError
decl_stmt|;
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeReadChannel
argument_list|(
name|i
operator|&
literal|1
condition|?
name|channel2
else|:
name|channel1
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setReadChannel
argument_list|(
name|i
operator|&
literal|1
condition|?
name|channel2
else|:
name|channel1
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|"Data"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setReadChannel
argument_list|(
name|i
operator|&
literal|1
condition|?
name|channel1
else|:
name|channel2
argument_list|)
expr_stmt|;
while|while
condition|(
name|proc
operator|.
name|bytesAvailable
argument_list|()
operator|<
literal|4
operator|&&
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
condition|)
block|{ }
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Data"
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|openModes
name|void
name|tst_QProcess
operator|::
name|openModes
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|openMode
argument_list|()
operator|==
name|QProcess
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"testProcessEcho3/testProcessEcho3"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|openMode
argument_list|()
operator|==
name|QProcess
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|"Data"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|openMode
argument_list|()
operator|==
name|QProcess
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
while|while
condition|(
name|proc
operator|.
name|bytesAvailable
argument_list|()
operator|<
literal|4
operator|&&
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
condition|)
block|{ }
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"Data"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|openMode
argument_list|()
operator|==
name|QProcess
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|openMode
argument_list|()
operator|==
name|QProcess
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|emitReadyReadOnlyWhenNewDataArrives
name|void
name|tst_QProcess
operator|::
name|emitReadyReadOnlyWhenNewDataArrives
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
name|connect
argument_list|(
operator|&
name|proc
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|proc
argument_list|,
operator|&
name|QProcess
operator|::
name|readyRead
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|proc
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|hardExit
name|void
name|tst_QProcess
operator|::
name|hardExit
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|proc
operator|.
name|start
argument_list|(
literal|"testSoftExit/testSoftExit"
argument_list|)
expr_stmt|;
else|#
directive|else
name|proc
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|proc
operator|.
name|kill
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|proc
operator|.
name|state
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|NotRunning
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|proc
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|Crashed
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|softExit
name|void
name|tst_QProcess
operator|::
name|softExit
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|processId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"testSoftExit/testSoftExit"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|proc
operator|.
name|processId
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|proc
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|proc
operator|.
name|state
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|NotRunning
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|proc
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|UnknownError
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_class
DECL|class|SoftExitProcess
class|class
name|SoftExitProcess
super|:
specifier|public
name|QProcess
block|{
name|Q_OBJECT
public|public:
DECL|member|waitedForFinished
name|bool
name|waitedForFinished
decl_stmt|;
DECL|function|SoftExitProcess
name|SoftExitProcess
parameter_list|(
name|int
name|n
parameter_list|)
member_init_list|:
name|waitedForFinished
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|n
argument_list|(
name|n
argument_list|)
member_init_list|,
name|killing
argument_list|(
literal|false
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|0
case|:
name|setReadChannelMode
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|terminateSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyReadStandardOutput
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|terminateSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyReadStandardError
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|terminateSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|terminateSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
default|default:
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QProcess
operator|::
name|ProcessState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|terminateSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|function|writeAfterStart
name|void
name|writeAfterStart
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|dataToWrite
operator|=
name|QByteArray
argument_list|(
name|buf
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
DECL|function|start
name|void
name|start
parameter_list|(
specifier|const
name|QString
modifier|&
name|program
parameter_list|)
block|{
name|QProcess
operator|::
name|start
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|writePendingData
argument_list|()
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|terminateSlot
name|void
name|terminateSlot
parameter_list|()
block|{
name|writePendingData
argument_list|()
expr_stmt|;
comment|// In cases 3 and 4 we haven't written the data yet.
if|if
condition|(
name|killing
operator|||
operator|(
name|n
operator|==
literal|4
operator|&&
name|state
argument_list|()
operator|!=
name|Running
operator|)
condition|)
block|{
comment|// Don't try to kill the process before it is running - that can
comment|// be hazardous, as the actual child process might not be running
comment|// yet. Also, don't kill it "recursively".
return|return;
block|}
name|killing
operator|=
literal|true
expr_stmt|;
name|readAll
argument_list|()
expr_stmt|;
name|terminate
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|waitedForFinished
operator|=
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
operator|)
operator|==
literal|false
condition|)
block|{
name|kill
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
argument_list|()
operator|!=
name|NotRunning
condition|)
name|waitedForFinished
operator|=
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|(
name|int
parameter_list|,
name|QProcess
operator|::
name|ExitStatus
parameter_list|)
block|{
name|waitedForFinished
operator|=
literal|true
expr_stmt|;
block|}
private|private:
DECL|function|writePendingData
name|void
name|writePendingData
parameter_list|()
block|{
if|if
condition|(
operator|!
name|dataToWrite
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|write
argument_list|(
name|dataToWrite
argument_list|)
expr_stmt|;
name|dataToWrite
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
private|private:
DECL|member|n
name|int
name|n
decl_stmt|;
DECL|member|killing
name|bool
name|killing
decl_stmt|;
DECL|member|dataToWrite
name|QByteArray
name|dataToWrite
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|softExitInSlots_data
name|void
name|tst_QProcess
operator|::
name|softExitInSlots_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"appName"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_WIDGETS
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gui app"
argument_list|)
operator|<<
literal|"testGuiProcess/testGuiProcess"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"console app"
argument_list|)
operator|<<
literal|"testProcessEcho2/testProcessEcho2"
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|softExitInSlots
name|void
name|tst_QProcess
operator|::
name|softExitInSlots
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|appName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|SoftExitProcess
name|proc
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|proc
operator|.
name|writeAfterStart
argument_list|(
literal|"OLEBOLE"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// include the \0
name|proc
operator|.
name|start
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|QTRY_VERIFY_WITH_TIMEOUT
argument_list|(
name|proc
operator|.
name|waitedForFinished
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|mergedChannels
name|void
name|tst_QProcess
operator|::
name|mergedChannels
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setReadChannelMode
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readChannelMode
argument_list|()
argument_list|,
name|QProcess
operator|::
name|MergedChannels
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|process
operator|.
name|write
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesAvailable
argument_list|()
operator|<
literal|6
condition|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"aabbcc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|forwardedChannels_data
name|void
name|tst_QProcess
operator|::
name|forwardedChannels_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"inmode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"outdata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"errdata"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"separate"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ManagedInputChannel
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forwarded"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ForwardedChannels
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ManagedInputChannel
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"forwarded"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"forwarded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stdout"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ForwardedOutputChannel
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ManagedInputChannel
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"forwarded"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stderr"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ForwardedErrorChannel
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ManagedInputChannel
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"forwarded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fwdinput"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ForwardedErrorChannel
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|ForwardedInputChannel
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|forwardedChannels
name|void
name|tst_QProcess
operator|::
name|forwardedChannels
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|inmode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|outdata
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|errdata
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testForwarding/testForwarding"
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|mode
argument_list|)
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|inmode
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|write
argument_list|(
literal|"input"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|err
decl_stmt|;
switch|switch
condition|(
name|process
operator|.
name|exitCode
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|err
operator|=
literal|"ok"
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|err
operator|=
literal|"processChannelMode is wrong"
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|err
operator|=
literal|"inputChannelMode is wrong"
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|err
operator|=
literal|"failed to start"
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|err
operator|=
literal|"failed to write"
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|err
operator|=
literal|"did not finish"
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|err
operator|=
literal|"unexpected stdout"
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|err
operator|=
literal|"unexpected stderr"
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|err
operator|=
literal|"parameter error"
expr_stmt|;
break|break;
default|default:
name|err
operator|=
literal|"unknown exit code"
expr_stmt|;
break|break;
block|}
name|QVERIFY2
argument_list|(
operator|!
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|,
name|outdata
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|errdata
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|atEnd
name|void
name|tst_QProcess
operator|::
name|atEnd
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|"abcdefgh\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesAvailable
argument_list|()
operator|<
literal|8
condition|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|process
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|tmp
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abcdefgh"
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|TestThread
class|class
name|TestThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|code
specifier|inline
name|int
name|code
parameter_list|()
block|{
return|return
name|exitCode
return|;
block|}
protected|protected:
DECL|function|run
specifier|inline
name|void
name|run
parameter_list|()
block|{
name|exitCode
operator|=
literal|90210
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|connect
argument_list|(
operator|&
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|catchExitCode
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|write
argument_list|(
literal|"abc\0"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|exitCode
operator|=
name|exec
argument_list|()
expr_stmt|;
block|}
protected|protected
name|slots
protected|:
DECL|function|catchExitCode
specifier|inline
name|void
name|catchExitCode
parameter_list|(
name|int
name|exitCode
parameter_list|)
block|{
name|this
operator|->
name|exitCode
operator|=
name|exitCode
expr_stmt|;
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|exitCode
name|int
name|exitCode
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|processInAThread
name|void
name|tst_QProcess
operator|::
name|processInAThread
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|TestThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|code
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|processesInMultipleThreads
name|void
name|tst_QProcess
operator|::
name|processesInMultipleThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
comment|// run from 1 to 10 threads, but run at least some tests
comment|// with more threads than the ideal
name|int
name|threadCount
init|=
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|7
condition|)
name|threadCount
operator|=
name|qMax
argument_list|(
name|threadCount
argument_list|,
name|QThread
operator|::
name|idealThreadCount
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|TestThread
modifier|*
argument_list|>
name|threads
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|threadCount
condition|;
operator|++
name|j
control|)
name|threads
index|[
name|j
index|]
operator|=
operator|new
name|TestThread
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|threadCount
condition|;
operator|++
name|j
control|)
name|threads
index|[
name|j
index|]
operator|->
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|threadCount
condition|;
operator|++
name|j
control|)
block|{
name|QVERIFY
argument_list|(
name|threads
index|[
name|j
index|]
operator|->
name|wait
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|threadCount
condition|;
operator|++
name|j
control|)
block|{
name|QCOMPARE
argument_list|(
name|threads
index|[
name|j
index|]
operator|->
name|code
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|threads
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|waitForFinishedWithTimeout
name|void
name|tst_QProcess
operator|::
name|waitForFinishedWithTimeout
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|->
name|waitForFinished
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|waitForReadyReadInAReadyReadSlot
name|void
name|tst_QProcess
operator|::
name|waitForReadyReadInAReadyReadSlot
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|waitForReadyReadInAReadyReadSlotSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|readyRead
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|process
operator|->
name|disconnect
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|bytesAvailable
argument_list|()
operator|>
name|bytesAvailable
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|waitForReadyReadInAReadyReadSlotSlot
name|void
name|tst_QProcess
operator|::
name|waitForReadyReadInAReadyReadSlotSlot
parameter_list|()
block|{
name|bytesAvailable
operator|=
name|process
operator|->
name|bytesAvailable
argument_list|()
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|"bar"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|waitForBytesWrittenInABytesWrittenSlot
name|void
name|tst_QProcess
operator|::
name|waitForBytesWrittenInABytesWrittenSlot
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|waitForBytesWrittenInABytesWrittenSlotSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|bytesWritten
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|process
operator|->
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|process
operator|->
name|disconnect
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|waitForBytesWrittenInABytesWrittenSlotSlot
name|void
name|tst_QProcess
operator|::
name|waitForBytesWrittenInABytesWrittenSlotSlot
parameter_list|()
block|{
name|process
operator|->
name|write
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|spaceArgsTest_data
name|void
name|tst_QProcess
operator|::
name|spaceArgsTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringArgs"
argument_list|)
expr_stmt|;
comment|// arg1 | arg2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"arg1 arg2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arg1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arg2"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arg1 arg2"
argument_list|)
expr_stmt|;
comment|// "arg1" | ar "g2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\"\"\"arg1\"\"\"\" \"ar \"\"\"g2\""
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"arg1\""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar \"g2"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\"arg1\"\"\"\" \"ar \"\"\"g2\""
argument_list|)
expr_stmt|;
comment|// ar g1 | a rg 2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"ar g1\" \"a rg 2\""
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar g1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a rg 2"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"ar g1\" \"a rg 2\""
argument_list|)
expr_stmt|;
comment|// -lar g1 | -l"ar g2"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"-lar g1\" \"-l\"\"\"ar g2\"\"\"\""
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-lar g1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-l\"ar g2\""
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"-lar g1\" \"-l\"\"\"ar g2\"\"\"\""
argument_list|)
expr_stmt|;
comment|// ar"g1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar\"\"\"\"g1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\"g1"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\"\"\"\"g1"
argument_list|)
expr_stmt|;
comment|// ar/g1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar\\g1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\\g1"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\\g1"
argument_list|)
expr_stmt|;
comment|// ar\g"1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ar\\g\"\"\"\"1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\\g\"1"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ar\\g\"\"\"\"1"
argument_list|)
expr_stmt|;
comment|// arg\"1
name|QTest
operator|::
name|newRow
argument_list|(
literal|"arg\\\"\"\"1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arg\\\"1"
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"arg\\\"\"\"1"
argument_list|)
expr_stmt|;
comment|// """"
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\"\"\"\"\"\"\"\"\"\"\""
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\""
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\"\"\"\"\"\"\"\"\""
argument_list|)
expr_stmt|;
comment|// """" | "" ""
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\" \"\"\"\"\"\"\""
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\" \"\""
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\"\"\"\"\"\"\"\"\" \"\"\"\"\"\"\" \"\"\"\"\"\"\""
argument_list|)
expr_stmt|;
comment|// ""  ""
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\"\"\"\"\"\" \"\" \"\"\"\"\"\"\" (bogus double quotes)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"  \"\""
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"\"\"\"\"\" \"\" \"\"\"\"\"\"\""
argument_list|)
expr_stmt|;
comment|// ""  ""
name|QTest
operator|::
name|newRow
argument_list|(
literal|" \"\"\"\"\"\"\" \"\" \"\"\"\"\"\"\"   (bogus double quotes)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\"\"  \"\""
argument_list|)
operator|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" \"\"\"\"\"\"\" \"\" \"\"\"\"\"\"\"   "
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startFailMessage
specifier|static
name|QByteArray
name|startFailMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|program
parameter_list|,
specifier|const
name|QProcess
modifier|&
name|process
parameter_list|)
block|{
name|QByteArray
name|result
init|=
literal|"Process '"
decl_stmt|;
name|result
operator|+=
name|program
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|result
operator|+=
literal|"' failed to start: "
expr_stmt|;
name|result
operator|+=
name|process
operator|.
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|spaceArgsTest
name|void
name|tst_QProcess
operator|::
name|spaceArgsTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stringArgs
argument_list|)
expr_stmt|;
name|QStringList
name|programs
decl_stmt|;
name|programs
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testProcessSpacesArgs/nospace"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testProcessSpacesArgs/one space"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testProcessSpacesArgs/two space s"
argument_list|)
expr_stmt|;
name|process
operator|=
operator|new
name|QProcess
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|programs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|program
init|=
name|programs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|process
operator|->
name|start
argument_list|(
name|program
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|int
name|timeOutMS
init|=
literal|10000
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|timeOutMS
init|=
literal|5000
decl_stmt|;
endif|#
directive|endif
name|QByteArray
name|errorMessage
decl_stmt|;
name|bool
name|started
init|=
name|process
operator|->
name|waitForStarted
argument_list|(
name|timeOutMS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
name|errorMessage
operator|=
name|startFailMessage
argument_list|(
name|program
argument_list|,
operator|*
name|process
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|started
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
name|timeOutMS
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QStringList
name|actual
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|process
operator|->
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"|"
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
operator|!
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not interested in the program name, it might be different.
name|actual
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|args
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|program
operator|.
name|contains
argument_list|(
literal|" "
argument_list|)
condition|)
name|program
operator|=
literal|"\""
operator|+
name|program
operator|+
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|stringArgs
operator|.
name|isEmpty
argument_list|()
condition|)
name|program
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|" "
argument_list|)
operator|+
name|stringArgs
expr_stmt|;
name|errorMessage
operator|.
name|clear
argument_list|()
expr_stmt|;
name|process
operator|->
name|start
argument_list|(
name|program
argument_list|)
expr_stmt|;
name|started
operator|=
name|process
operator|->
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
name|errorMessage
operator|=
name|startFailMessage
argument_list|(
name|program
argument_list|,
operator|*
name|process
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|started
argument_list|,
name|errorMessage
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|actual
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|process
operator|->
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"|"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
operator|!
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not interested in the program name, it might be different.
name|actual
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|args
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|nativeArguments
name|void
name|tst_QProcess
operator|::
name|nativeArguments
parameter_list|()
block|{
name|QProcess
name|proc
decl_stmt|;
comment|// This doesn't actually need special quoting, so it is pointless to use
comment|// native arguments here, but that's not the point of this test.
name|proc
operator|.
name|setNativeArguments
argument_list|(
literal|"hello kitty, \"*\"!"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testProcessSpacesArgs/nospace"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// WinCE test outputs to a file, so check that
name|FILE
modifier|*
name|file
init|=
name|fopen
argument_list|(
literal|"\\temp\\qprocess_args_test.txt"
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|fgets
argument_list|(
name|buf
argument_list|,
literal|256
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QStringList
name|actual
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|buf
argument_list|)
operator|.
name|split
argument_list|(
literal|"|"
argument_list|)
decl_stmt|;
else|#
directive|else
name|QStringList
name|actual
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|"|"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|actual
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// not interested in the program name, it might be different.
name|actual
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|QStringList
name|expected
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|expected
operator|<<
literal|"hello"
operator|<<
literal|"kitty,"
operator|<<
literal|"\"*\"!"
expr_stmt|;
comment|// Weird, weird ...
else|#
directive|else
name|expected
operator|<<
literal|"hello"
operator|<<
literal|"kitty,"
operator|<<
literal|"*!"
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|exitCodeTest
name|void
name|tst_QProcess
operator|::
name|exitCodeTest
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|255
condition|;
operator|++
name|i
control|)
block|{
ifdef|#
directive|ifdef
name|QPROCESS_USE_SPAWN
comment|// POSIX reserves exit code 127 when using posix_spawn
if|if
condition|(
name|i
operator|==
literal|127
condition|)
continue|continue;
endif|#
directive|endif
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testExitCodes/testExitCodes "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|UnknownError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|failToStart
name|void
name|tst_QProcess
operator|::
name|failToStart
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QPROCESS_USE_SPAWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QSKIP
argument_list|(
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
literal|"QProcess::ProcessState"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QSignalSpy
name|stateSpy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|stateChanged
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stateSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// OS X and HP-UX have a really low default process limit (~100), so spawning
comment|// to many processes here will cause test failures later on.
if|#
directive|if
name|defined
name|Q_OS_HPUX
specifier|const
name|int
name|attempts
init|=
literal|15
decl_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_MAC
specifier|const
name|int
name|attempts
init|=
literal|15
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|attempts
init|=
literal|50
decl_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|8
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
name|j
operator|*
name|attempts
operator|+
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
name|j
operator|*
name|attempts
operator|+
name|i
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"/blurp"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|j
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
case|case
literal|3
case|:
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
case|case
literal|5
case|:
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
case|case
literal|7
case|:
default|default:
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
name|j
operator|*
name|attempts
operator|+
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
name|j
operator|*
name|attempts
operator|+
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|it
init|=
name|j
operator|*
name|attempts
operator|+
name|i
operator|+
literal|1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|stateSpy
operator|.
name|count
argument_list|()
argument_list|,
name|it
operator|*
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
name|it
operator|*
literal|2
operator|-
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|Starting
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QProcess
operator|::
name|ProcessState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
name|it
operator|*
literal|2
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|failToStartWithWait
name|void
name|tst_QProcess
operator|::
name|failToStartWithWait
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QPROCESS_USE_SPAWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QSKIP
argument_list|(
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|process
operator|.
name|start
argument_list|(
literal|"/blurp"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-v"
operator|<<
literal|"-debug"
argument_list|)
expr_stmt|;
name|process
operator|.
name|waitForStarted
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|failToStartWithEventLoop
name|void
name|tst_QProcess
operator|::
name|failToStartWithEventLoop
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QPROCESS_USE_SPAWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QSKIP
argument_list|(
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// The error signal may be emitted before start() returns
name|connect
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|,
operator|&
name|loop
argument_list|,
operator|&
name|QEventLoop
operator|::
name|quit
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
operator|++
name|i
control|)
block|{
name|process
operator|.
name|start
argument_list|(
literal|"/blurp"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-v"
operator|<<
literal|"-debug"
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|failToStartEmptyArgs_data
name|void
name|tst_QProcess
operator|::
name|failToStartEmptyArgs_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startOverload"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start(QString, QStringList, OpenMode)"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start(QString, OpenMode)"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"start(OpenMode)"
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|failToStartEmptyArgs
name|void
name|tst_QProcess
operator|::
name|failToStartEmptyArgs
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startOverload
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|startOverload
condition|)
block|{
case|case
literal|0
case|:
name|process
operator|.
name|start
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|process
operator|.
name|start
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|process
operator|.
name|start
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QFAIL
argument_list|(
literal|"Unhandled QProcess::start overload."
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|removeFileWhileProcessIsRunning
name|void
name|tst_QProcess
operator|::
name|removeFileWhileProcessIsRunning
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"removeFile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// OS doesn't support environment variables
end_comment
begin_function
DECL|function|setEnvironment_data
name|void
name|tst_QProcess
operator|::
name|setEnvironment_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"setting-empty"
argument_list|)
operator|<<
literal|"tst_QProcess"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"setting"
argument_list|)
operator|<<
literal|"tst_QProcess"
operator|<<
literal|"value"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unsetting"
argument_list|)
operator|<<
literal|"PROMPT"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overriding"
argument_list|)
operator|<<
literal|"PROMPT"
operator|<<
literal|"value"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unsetting"
argument_list|)
operator|<<
literal|"PATH"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"overriding"
argument_list|)
operator|<<
literal|"PATH"
operator|<<
literal|"value"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setEnvironment
name|void
name|tst_QProcess
operator|::
name|setEnvironment
parameter_list|()
block|{
comment|// make sure our environment variables are correct
name|QVERIFY
argument_list|(
name|qgetenv
argument_list|(
literal|"tst_QProcess"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QVERIFY
argument_list|(
operator|!
name|qgetenv
argument_list|(
literal|"PROMPT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QString
name|executable
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testProcessEnvironment/testProcessEnvironment"
decl_stmt|;
block|{
name|QProcess
name|process
decl_stmt|;
name|QStringList
name|environment
init|=
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|pos
decl_stmt|;
name|QRegExp
name|rx
argument_list|(
name|name
operator|+
literal|"=.*"
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|rx
operator|.
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
endif|#
directive|endif
while|while
condition|(
operator|(
name|pos
operator|=
name|environment
operator|.
name|indexOf
argument_list|(
name|rx
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
name|environment
operator|.
name|removeAt
argument_list|(
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|environment
operator|.
name|append
argument_list|(
name|name
operator|+
literal|'='
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|process
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|executable
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
argument_list|,
name|value
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// re-do the test but set the environment twice, to make sure
comment|// that the latter addition overrides
comment|// this test doesn't make sense in unsetting
if|if
condition|(
operator|!
name|value
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QProcess
name|process
decl_stmt|;
name|QStringList
name|environment
init|=
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
name|environment
operator|.
name|prepend
argument_list|(
name|name
operator|+
literal|"=This is not the right value"
argument_list|)
expr_stmt|;
name|environment
operator|.
name|append
argument_list|(
name|name
operator|+
literal|'='
operator|+
name|value
argument_list|)
expr_stmt|;
name|process
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|executable
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
argument_list|,
name|value
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// OS doesn't support environment variables
end_comment
begin_function
DECL|function|setProcessEnvironment_data
name|void
name|tst_QProcess
operator|::
name|setProcessEnvironment_data
parameter_list|()
block|{
name|setEnvironment_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setProcessEnvironment
name|void
name|tst_QProcess
operator|::
name|setProcessEnvironment
parameter_list|()
block|{
comment|// make sure our environment variables are correct
name|QVERIFY
argument_list|(
name|qgetenv
argument_list|(
literal|"tst_QProcess"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QVERIFY
argument_list|(
operator|!
name|qgetenv
argument_list|(
literal|"PROMPT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QString
name|executable
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testProcessEnvironment/testProcessEnvironment"
decl_stmt|;
block|{
name|QProcess
name|process
decl_stmt|;
name|QProcessEnvironment
name|environment
init|=
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
name|environment
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|environment
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|process
operator|.
name|setProcessEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|executable
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isNull
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
argument_list|,
name|value
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|systemEnvironment
name|void
name|tst_QProcess
operator|::
name|systemEnvironment
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// there is no concept of system variables on Windows CE as there is no console
name|QVERIFY
argument_list|(
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
operator|!
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|contains
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QProcess
operator|::
name|systemEnvironment
argument_list|()
operator|.
name|filter
argument_list|(
name|QRegExp
argument_list|(
literal|"^PATH="
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|spaceInName
name|void
name|tst_QProcess
operator|::
name|spaceInName
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"test Space In Name/testSpaceInName"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|lockupsInStartDetached
name|void
name|tst_QProcess
operator|::
name|lockupsInStartDetached
parameter_list|()
block|{
comment|// Check that QProcess doesn't cause a lock up at this program's
comment|// exit if a thread was started and we tried to run a program that
comment|// doesn't exist. Before Qt 4.2, this used to lock up on Unix due
comment|// to calling ::exit instead of ::_exit if execve failed.
name|QObject
modifier|*
name|dummy
init|=
operator|new
name|QObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|QString
argument_list|(
literal|"something.invalid"
argument_list|)
argument_list|,
name|dummy
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QProcess
operator|::
name|execute
argument_list|(
literal|"yjhbrty"
argument_list|)
expr_stmt|;
name|QProcess
operator|::
name|startDetached
argument_list|(
literal|"yjhbrty"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|atEnd2
name|void
name|tst_QProcess
operator|::
name|atEnd2
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|"Foo\nBar\nBaz\nBodukon\nHadukan\nTorwukan\nend\n"
argument_list|)
expr_stmt|;
name|process
operator|.
name|putChar
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|lines
decl_stmt|;
while|while
condition|(
operator|!
name|process
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|lines
operator|<<
name|process
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|lines
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForReadyReadForNonexistantProcess
name|void
name|tst_QProcess
operator|::
name|waitForReadyReadForNonexistantProcess
parameter_list|()
block|{
comment|// Start a program that doesn't exist, process events and then try to waitForReadyRead
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy1
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// used to crash
name|process
operator|.
name|start
argument_list|(
literal|"doesntexist"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QPROCESS_USE_SPAWN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_QNX
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy1
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|setStandardInputFile
name|void
name|tst_QProcess
operator|::
name|setStandardInputFile
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|data
index|[]
init|=
literal|"A bunch\1of\2data\3\4\5\6\7..."
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|,
sizeof|sizeof
name|data
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|process
operator|.
name|setStandardInputFile
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|process
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|all
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|data
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// testProcessEcho drops the ending \0
name|QVERIFY
argument_list|(
name|all
operator|==
name|data
argument_list|)
expr_stmt|;
name|QProcess
name|process2
decl_stmt|;
name|process2
operator|.
name|setStandardInputFile
argument_list|(
name|QProcess
operator|::
name|nullDevice
argument_list|()
argument_list|)
expr_stmt|;
name|process2
operator|.
name|start
argument_list|(
literal|"testProcessEcho/testProcessEcho"
argument_list|)
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|process2
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|all
operator|=
name|process2
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|setStandardOutputFile_data
name|void
name|tst_QProcess
operator|::
name|setStandardOutputFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"channelToTest"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"_channelMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"append"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stdout-truncate"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stdout-append"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stderr-truncate"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stderr-append"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"merged-truncate"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"merged-append"
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
operator|<<
name|int
argument_list|(
name|QProcess
operator|::
name|MergedChannels
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|setStandardOutputFile2
name|void
name|tst_QProcess
operator|::
name|setStandardOutputFile2
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|testdata
index|[]
init|=
literal|"Test data."
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setStandardOutputFile
argument_list|(
name|QProcess
operator|::
name|nullDevice
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|testdata
argument_list|,
sizeof|sizeof
name|testdata
argument_list|)
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|process
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFileInfo
argument_list|(
name|QProcess
operator|::
name|nullDevice
argument_list|()
argument_list|)
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setStandardOutputFile
name|void
name|tst_QProcess
operator|::
name|setStandardOutputFile
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|data
index|[]
init|=
literal|"Original data. "
decl_stmt|;
specifier|static
specifier|const
name|char
name|testdata
index|[]
init|=
literal|"Test data."
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|channelToTest
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|_channelMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|append
argument_list|)
expr_stmt|;
name|QProcess
operator|::
name|ProcessChannelMode
name|channelMode
init|=
name|QProcess
operator|::
name|ProcessChannelMode
argument_list|(
name|_channelMode
argument_list|)
decl_stmt|;
name|QIODevice
operator|::
name|OpenMode
name|mode
init|=
name|append
condition|?
name|QIODevice
operator|::
name|Append
else|:
name|QIODevice
operator|::
name|Truncate
decl_stmt|;
comment|// create the destination file with data
name|QFile
name|file
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|data
argument_list|,
sizeof|sizeof
name|data
operator|-
literal|1
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// run the process
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setReadChannelMode
argument_list|(
name|channelMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|channelToTest
operator|==
name|QProcess
operator|::
name|StandardOutput
condition|)
name|process
operator|.
name|setStandardOutputFile
argument_list|(
literal|"data"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
else|else
name|process
operator|.
name|setStandardErrorFile
argument_list|(
literal|"data"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|testdata
argument_list|,
sizeof|sizeof
name|testdata
argument_list|)
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|process
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// open the file again and verify the data
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|all
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|expectedsize
init|=
sizeof|sizeof
name|testdata
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QIODevice
operator|::
name|Append
condition|)
block|{
name|QVERIFY
argument_list|(
name|all
operator|.
name|startsWith
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|expectedsize
operator|+=
sizeof|sizeof
name|data
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|channelMode
operator|==
name|QProcess
operator|::
name|MergedChannels
condition|)
block|{
name|expectedsize
operator|+=
sizeof|sizeof
name|testdata
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|all
operator|.
name|endsWith
argument_list|(
name|testdata
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|all
operator|.
name|size
argument_list|()
argument_list|,
name|expectedsize
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|setStandardOutputProcess_data
name|void
name|tst_QProcess
operator|::
name|setStandardOutputProcess_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"merged"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"separate"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"merged"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStandardOutputProcess
name|void
name|tst_QProcess
operator|::
name|setStandardOutputProcess
parameter_list|()
block|{
name|QProcess
name|source
decl_stmt|;
name|QProcess
name|sink
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|merged
argument_list|)
expr_stmt|;
name|source
operator|.
name|setReadChannelMode
argument_list|(
name|merged
condition|?
name|QProcess
operator|::
name|MergedChannels
else|:
name|QProcess
operator|::
name|SeparateChannels
argument_list|)
expr_stmt|;
name|source
operator|.
name|setStandardOutputProcess
argument_list|(
operator|&
name|sink
argument_list|)
expr_stmt|;
name|source
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|sink
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|QByteArray
name|data
argument_list|(
literal|"Hello, World"
argument_list|)
decl_stmt|;
name|source
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|source
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|source
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QPROCESS_VERIFY
argument_list|(
name|sink
argument_list|,
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|all
init|=
name|sink
operator|.
name|readAll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|merged
condition|)
name|QCOMPARE
argument_list|(
name|all
argument_list|,
name|data
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|all
argument_list|,
name|QByteArray
argument_list|(
literal|"HHeelllloo,,  WWoorrlldd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|fileWriterProcess
name|void
name|tst_QProcess
operator|::
name|fileWriterProcess
parameter_list|()
block|{
name|QString
name|stdinStr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
operator|++
name|i
control|)
name|stdinStr
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 -- testing testing 1 2 3\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
do|do
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"fileWriterProcess.txt"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"fileWriterProcess/fileWriterProcess"
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|stdinStr
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesToWrite
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|3500
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFile
argument_list|(
literal|"fileWriterProcess.txt"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|stdinStr
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|3000
condition|)
do|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|detachedWorkingDirectoryAndPid
name|void
name|tst_QProcess
operator|::
name|detachedWorkingDirectoryAndPid
parameter_list|()
block|{
name|qint64
name|pid
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFile
name|infoFile
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/detachedinfo.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|infoFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QString
name|workingDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testDetached"
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|workingDir
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|infoFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QProcess
operator|::
name|startDetached
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/testDetached/testDetached"
argument_list|)
argument_list|,
name|args
argument_list|,
name|workingDir
argument_list|,
operator|&
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|infoFile
argument_list|)
decl_stmt|;
name|fi
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//The guard counter ensures the test does not hang if the sub process fails.
comment|//Instead, the test will fail when trying to open& verify the sub process output file.
for|for
control|(
name|int
name|guard
init|=
literal|0
init|;
name|guard
operator|<
literal|100
operator|&&
name|fi
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|;
name|guard
operator|++
control|)
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|infoFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|actualWorkingDir
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|infoFile
operator|.
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
name|actualWorkingDir
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// strip off newline
name|QByteArray
name|processIdString
init|=
name|infoFile
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|processIdString
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|infoFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|infoFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|bool
name|ok
init|=
literal|false
decl_stmt|;
name|qint64
name|actualPid
init|=
name|processIdString
operator|.
name|toLongLong
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualWorkingDir
argument_list|,
name|workingDir
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actualPid
argument_list|,
name|pid
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|switchReadChannels
name|void
name|tst_QProcess
operator|::
name|switchReadChannels
parameter_list|()
block|{
specifier|const
name|char
name|data
index|[]
init|=
literal|"ABCD"
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|read
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
operator|&
name|data
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|read
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
operator|&
name|data
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|process
operator|.
name|ungetChar
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|process
operator|.
name|ungetChar
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|read
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|read
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Reading and writing to a process is not supported on Qt/CE
end_comment
begin_function
DECL|function|discardUnwantedOutput
name|void
name|tst_QProcess
operator|::
name|discardUnwantedOutput
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|setProgram
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
literal|"Hello, World"
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Q_OS_WIN - setWorkingDirectory will chdir before starting the process on unices
end_comment
begin_comment
comment|// Windows CE does not support working directory logic
end_comment
begin_function
DECL|function|setWorkingDirectory
name|void
name|tst_QProcess
operator|::
name|setWorkingDirectory
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|process
operator|->
name|setWorkingDirectory
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// use absolute path because on Windows, the executable is relative to the parent's CWD
comment|// while on Unix with fork it's relative to the child's (with posix_spawn, it could be either).
name|process
operator|->
name|start
argument_list|(
name|QFileInfo
argument_list|(
literal|"testSetWorkingDirectory/testSetWorkingDirectory"
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|->
name|waitForFinished
argument_list|()
argument_list|,
name|process
operator|->
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|workingDir
init|=
name|process
operator|->
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
argument_list|(
literal|"test"
argument_list|)
operator|.
name|canonicalPath
argument_list|()
argument_list|,
name|QDir
argument_list|(
name|workingDir
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|canonicalPath
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setNonExistentWorkingDirectory
name|void
name|tst_QProcess
operator|::
name|setNonExistentWorkingDirectory
parameter_list|()
block|{
name|process
operator|=
operator|new
name|QProcess
expr_stmt|;
name|process
operator|->
name|setWorkingDirectory
argument_list|(
literal|"this/directory/should/not/exist/for/sure"
argument_list|)
expr_stmt|;
comment|// use absolute path because on Windows, the executable is relative to the parent's CWD
comment|// while on Unix with fork it's relative to the child's (with posix_spawn, it could be either).
name|process
operator|->
name|start
argument_list|(
name|QFileInfo
argument_list|(
literal|"testSetWorkingDirectory/testSetWorkingDirectory"
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|->
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QPROCESS_USE_SPAWN
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QProcess cannot detect failure to start when using posix_spawn()"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|process
operator|->
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QProcess
operator|::
name|FailedToStart
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|process
expr_stmt|;
name|process
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|startFinishStartFinish
name|void
name|tst_QProcess
operator|::
name|startFinishStartFinish
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|process
operator|.
name|state
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NotRunning
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessOutput/testProcessOutput"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|process
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0 -this is a number"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|process
operator|.
name|state
argument_list|()
operator|!=
name|QProcess
operator|::
name|NotRunning
condition|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|invalidProgramString_data
name|void
name|tst_QProcess
operator|::
name|invalidProgramString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"programString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null string"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"only blank string"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidProgramString
name|void
name|tst_QProcess
operator|::
name|invalidProgramString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|programString
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ProcessError
argument_list|>
argument_list|(
literal|"QProcess::ProcessError"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|errorOccurred
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|QProcess
operator|::
name|ProcessError
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|error
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
name|programString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|error
argument_list|()
argument_list|,
name|QProcess
operator|::
name|FailedToStart
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QProcess
operator|::
name|startDetached
argument_list|(
name|programString
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_function
DECL|function|onlyOneStartedSignal
name|void
name|tst_QProcess
operator|::
name|onlyOneStartedSignal
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QProcess
operator|::
name|ExitStatus
argument_list|>
argument_list|(
literal|"QProcess::ExitStatus"
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|QSignalSpy
name|spyStarted
argument_list|(
operator|&
name|process
argument_list|,
operator|&
name|QProcess
operator|::
name|started
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyFinished
argument_list|(
operator|&
name|process
argument_list|,
expr|static_cast
operator|<
name|void
argument_list|(
name|QProcess
operator|::
modifier|*
argument_list|)
argument_list|(
name|int
argument_list|,
name|QProcess
operator|::
name|ExitStatus
argument_list|)
operator|>
operator|(
operator|&
name|QProcess
operator|::
name|finished
operator|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spyStarted
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spyFinished
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyStarted
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFinished
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spyStarted
operator|.
name|clear
argument_list|()
expr_stmt|;
name|spyFinished
operator|.
name|clear
argument_list|()
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessNormal/testProcessNormal"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyStarted
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyFinished
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//-----------------------------------------------------------------------------
end_comment
begin_class
DECL|class|BlockOnReadStdOut
class|class
name|BlockOnReadStdOut
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|BlockOnReadStdOut
name|BlockOnReadStdOut
parameter_list|(
name|QProcess
modifier|*
name|process
parameter_list|)
block|{
name|connect
argument_list|(
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|readyReadStandardOutput
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|block
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|block
name|void
name|block
parameter_list|()
block|{
name|QThread
operator|::
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|finishProcessBeforeReadingDone
name|void
name|tst_QProcess
operator|::
name|finishProcessBeforeReadingDone
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|BlockOnReadStdOut
name|blocker
argument_list|(
operator|&
name|process
argument_list|)
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|process
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessOutput/testProcessOutput"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QStringList
name|lines
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
name|QStringLiteral
argument_list|(
literal|"[\r\n]"
argument_list|)
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lines
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lines
operator|.
name|last
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"10239 -this is a number"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForStartedWithoutStart
name|void
name|tst_QProcess
operator|::
name|waitForStartedWithoutStart
parameter_list|()
block|{
name|QProcess
name|process
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//QT_NO_PROCESS
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QProcess
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qprocess.moc"
end_include
end_unit
