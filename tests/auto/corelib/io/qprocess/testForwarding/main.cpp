begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|argc
operator|<
literal|3
condition|)
return|return
literal|13
return|;
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
name|QProcess
name|process
decl_stmt|;
name|QProcess
operator|::
name|ProcessChannelMode
name|mode
init|=
operator|(
name|QProcess
operator|::
name|ProcessChannelMode
operator|)
name|atoi
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|process
operator|.
name|setProcessChannelMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|.
name|processChannelMode
argument_list|()
operator|!=
name|mode
condition|)
return|return
literal|1
return|;
name|QProcess
operator|::
name|InputChannelMode
name|inmode
init|=
operator|(
name|QProcess
operator|::
name|InputChannelMode
operator|)
name|atoi
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|process
operator|.
name|setInputChannelMode
argument_list|(
name|inmode
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|.
name|inputChannelMode
argument_list|()
operator|!=
name|inmode
condition|)
return|return
literal|11
return|;
name|process
operator|.
name|start
argument_list|(
literal|"testProcessEcho2/testProcessEcho2"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|waitForStarted
argument_list|(
literal|5000
argument_list|)
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|inmode
operator|==
name|QProcess
operator|::
name|ManagedInputChannel
operator|&&
name|process
operator|.
name|write
argument_list|(
literal|"forwarded"
argument_list|)
operator|!=
literal|9
condition|)
return|return
literal|3
return|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
condition|)
return|return
literal|4
return|;
if|if
condition|(
operator|(
name|mode
operator|==
name|QProcess
operator|::
name|ForwardedOutputChannel
operator|||
name|mode
operator|==
name|QProcess
operator|::
name|ForwardedChannels
operator|)
operator|&&
operator|!
name|process
operator|.
name|readAllStandardOutput
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|5
return|;
if|if
condition|(
operator|(
name|mode
operator|==
name|QProcess
operator|::
name|ForwardedErrorChannel
operator|||
name|mode
operator|==
name|QProcess
operator|::
name|ForwardedChannels
operator|)
operator|&&
operator|!
name|process
operator|.
name|readAllStandardError
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|6
return|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
end_unit
