begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
end_if
begin_include
include|#
directive|include
file|<QtCore/private/qfsfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_define
DECL|macro|_WIN32_WINNT
define|#
directive|define
name|_WIN32_WINNT
value|0x500
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../../../shared/filesystem.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
end_if
begin_define
DECL|macro|Q_NO_SYMLINKS
define|#
directive|define
name|Q_NO_SYMLINKS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QDir
class|class
name|tst_QDir
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|setPath_data
parameter_list|()
function_decl|;
name|void
name|setPath
parameter_list|()
function_decl|;
name|void
name|entryList_data
parameter_list|()
function_decl|;
name|void
name|entryList
parameter_list|()
function_decl|;
name|void
name|entryListSimple_data
parameter_list|()
function_decl|;
name|void
name|entryListSimple
parameter_list|()
function_decl|;
name|void
name|entryListWithSymLinks
parameter_list|()
function_decl|;
name|void
name|mkdir_data
parameter_list|()
function_decl|;
name|void
name|mkdir
parameter_list|()
function_decl|;
name|void
name|makedirReturnCode
parameter_list|()
function_decl|;
name|void
name|rmdir_data
parameter_list|()
function_decl|;
name|void
name|rmdir
parameter_list|()
function_decl|;
name|void
name|removeRecursively_data
parameter_list|()
function_decl|;
name|void
name|removeRecursively
parameter_list|()
function_decl|;
name|void
name|removeRecursivelyFailure
parameter_list|()
function_decl|;
name|void
name|removeRecursivelySymlink
parameter_list|()
function_decl|;
name|void
name|exists_data
parameter_list|()
function_decl|;
name|void
name|exists
parameter_list|()
function_decl|;
name|void
name|isRelativePath_data
parameter_list|()
function_decl|;
name|void
name|isRelativePath
parameter_list|()
function_decl|;
name|void
name|canonicalPath_data
parameter_list|()
function_decl|;
name|void
name|canonicalPath
parameter_list|()
function_decl|;
name|void
name|current_data
parameter_list|()
function_decl|;
name|void
name|current
parameter_list|()
function_decl|;
name|void
name|cd_data
parameter_list|()
function_decl|;
name|void
name|cd
parameter_list|()
function_decl|;
name|void
name|setNameFilters_data
parameter_list|()
function_decl|;
name|void
name|setNameFilters
parameter_list|()
function_decl|;
name|void
name|cleanPath_data
parameter_list|()
function_decl|;
name|void
name|cleanPath
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|QDir_default
parameter_list|()
function_decl|;
name|void
name|filePath_data
parameter_list|()
function_decl|;
name|void
name|filePath
parameter_list|()
function_decl|;
name|void
name|absoluteFilePath_data
parameter_list|()
function_decl|;
name|void
name|absoluteFilePath
parameter_list|()
function_decl|;
name|void
name|absolutePath_data
parameter_list|()
function_decl|;
name|void
name|absolutePath
parameter_list|()
function_decl|;
name|void
name|relativeFilePath_data
parameter_list|()
function_decl|;
name|void
name|relativeFilePath
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|rename
parameter_list|()
function_decl|;
name|void
name|exists2_data
parameter_list|()
function_decl|;
name|void
name|exists2
parameter_list|()
function_decl|;
name|void
name|dirName_data
parameter_list|()
function_decl|;
name|void
name|dirName
parameter_list|()
function_decl|;
name|void
name|operator_eq
parameter_list|()
function_decl|;
name|void
name|dotAndDotDot
parameter_list|()
function_decl|;
name|void
name|homePath
parameter_list|()
function_decl|;
name|void
name|tempPath
parameter_list|()
function_decl|;
name|void
name|rootPath
parameter_list|()
function_decl|;
name|void
name|nativeSeparators
parameter_list|()
function_decl|;
name|void
name|searchPaths
parameter_list|()
function_decl|;
name|void
name|searchPaths_data
parameter_list|()
function_decl|;
name|void
name|entryListWithSearchPaths
parameter_list|()
function_decl|;
name|void
name|longFileName_data
parameter_list|()
function_decl|;
name|void
name|longFileName
parameter_list|()
function_decl|;
name|void
name|updateFileLists
parameter_list|()
function_decl|;
name|void
name|detachingOperations
parameter_list|()
function_decl|;
name|void
name|testCaching
parameter_list|()
function_decl|;
name|void
name|isRoot_data
parameter_list|()
function_decl|;
name|void
name|isRoot
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
name|void
name|match_data
parameter_list|()
function_decl|;
name|void
name|match
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|drives
parameter_list|()
function_decl|;
name|void
name|arrayOperator
parameter_list|()
function_decl|;
name|void
name|equalityOperator_data
parameter_list|()
function_decl|;
name|void
name|equalityOperator
parameter_list|()
function_decl|;
name|void
name|isRelative_data
parameter_list|()
function_decl|;
name|void
name|isRelative
parameter_list|()
function_decl|;
name|void
name|isReadable
parameter_list|()
function_decl|;
name|void
name|cdBelowRoot
parameter_list|()
function_decl|;
private|private:
DECL|member|m_dataPath
name|QString
name|m_dataPath
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QDir
operator|::
name|init
parameter_list|()
block|{
comment|// Directory under which testdata can be found.
name|m_dataPath
operator|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"testData"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|m_dataPath
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"test data not found"
argument_list|)
expr_stmt|;
comment|// Some tests want to use "." as relative path to data.
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|m_dataPath
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not chdir to "
operator|+
name|m_dataPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDir
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QDir
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmpdir"
argument_list|)
operator|.
name|removeRecursively
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QDir
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QDir
name|obj1
decl_stmt|;
comment|// Filters QDir::filter()
comment|// void QDir::setFilter(Filters)
name|obj1
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
argument_list|,
name|obj1
operator|.
name|filter
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Files
argument_list|)
argument_list|,
name|obj1
operator|.
name|filter
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
argument_list|,
name|obj1
operator|.
name|filter
argument_list|()
argument_list|)
expr_stmt|;
comment|// SortFlags QDir::sorting()
comment|// void QDir::setSorting(SortFlags)
name|obj1
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
argument_list|,
name|obj1
operator|.
name|sorting
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|IgnoreCase
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|IgnoreCase
argument_list|)
argument_list|,
name|obj1
operator|.
name|sorting
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|SortFlags
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
argument_list|,
name|obj1
operator|.
name|sorting
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|construction
name|void
name|tst_QDir
operator|::
name|construction
parameter_list|()
block|{
name|QFileInfo
name|myFileInfo
argument_list|(
literal|"/machine/share/dir1/file1"
argument_list|)
decl_stmt|;
name|QDir
name|myDir
argument_list|(
name|myFileInfo
operator|.
name|absoluteDir
argument_list|()
argument_list|)
decl_stmt|;
comment|// this asserted
name|QCOMPARE
argument_list|(
name|myFileInfo
operator|.
name|absoluteDir
argument_list|()
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|myDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPath_data
name|void
name|tst_QDir
operator|::
name|setPath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c:/"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setPath
name|void
name|tst_QDir
operator|::
name|setPath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir2
argument_list|)
expr_stmt|;
name|QDir
name|shared
decl_stmt|;
name|QDir
name|qDir1
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|QStringList
name|entries1
init|=
name|qDir1
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|shared
operator|.
name|setPath
argument_list|(
name|dir1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|shared
operator|.
name|entryList
argument_list|()
argument_list|,
name|entries1
argument_list|)
expr_stmt|;
name|QDir
name|qDir2
argument_list|(
name|dir2
argument_list|)
decl_stmt|;
name|QStringList
name|entries2
init|=
name|qDir2
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|shared
operator|.
name|setPath
argument_list|(
name|dir2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|shared
operator|.
name|entryList
argument_list|()
argument_list|,
name|entries2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir_data
name|void
name|tst_QDir
operator|::
name|mkdir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"recurse"
argument_list|)
expr_stmt|;
name|QStringList
name|dirs
decl_stmt|;
name|dirs
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/one/two/three"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/two"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/two/three"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|dirs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|dirs
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|dirs
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|// Ensure that none of these directories already exist
name|QDir
name|dir
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|dir
operator|.
name|rmpath
argument_list|(
name|dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mkdir
name|void
name|tst_QDir
operator|::
name|mkdir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|recurse
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkpath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkdir
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure it really exists (ie that mkdir returns the right value)
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|makedirReturnCode
name|void
name|tst_QDir
operator|::
name|makedirReturnCode
parameter_list|()
block|{
name|QString
name|dirName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"makedirReturnCode"
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
comment|// cleanup a previous run.
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
comment|// calling mkdir on an existing dir will fail.
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkpath
argument_list|(
name|dirName
argument_list|)
argument_list|)
expr_stmt|;
comment|// calling mkpath on an existing dir will pass
block|}
end_function
begin_function
DECL|function|rmdir_data
name|void
name|tst_QDir
operator|::
name|rmdir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"recurse"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/one/two/three"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/two/three"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/testdir/two"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rmdir
name|void
name|tst_QDir
operator|::
name|rmdir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|recurse
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
if|if
condition|(
name|recurse
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rmpath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rmdir
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure it really doesn't exist (ie that rmdir returns the right value)
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRecursively_data
name|void
name|tst_QDir
operator|::
name|removeRecursively_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
comment|// Create dirs and files
specifier|const
name|QString
name|tmpdir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmpdir/"
decl_stmt|;
name|QStringList
name|dirs
decl_stmt|;
name|dirs
operator|<<
name|tmpdir
operator|+
literal|"empty"
operator|<<
name|tmpdir
operator|+
literal|"one"
operator|<<
name|tmpdir
operator|+
literal|"two/three"
operator|<<
literal|"relative"
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|dir
operator|.
name|mkpath
argument_list|(
name|dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|files
decl_stmt|;
name|files
operator|<<
name|tmpdir
operator|+
literal|"one/file"
expr_stmt|;
name|files
operator|<<
name|tmpdir
operator|+
literal|"two/three/file"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|tmpdir
operator|+
literal|"empty"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one"
argument_list|)
operator|<<
name|tmpdir
operator|+
literal|"one"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
name|tmpdir
operator|+
literal|"two"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"does not exist"
argument_list|)
operator|<<
name|tmpdir
operator|+
literal|"doesnotexist"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relative"
argument_list|)
operator|<<
literal|"relative"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRecursively
name|void
name|tst_QDir
operator|::
name|removeRecursively
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure it really doesn't exist (ie that remove worked)
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRecursivelyFailure
name|void
name|tst_QDir
operator|::
name|removeRecursivelyFailure
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QString
name|tmpdir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmpdir/"
decl_stmt|;
specifier|const
name|QString
name|path
init|=
name|tmpdir
operator|+
literal|"undeletable"
decl_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Need a file in there, otherwise rmdir works even w/o permissions
name|QFile
name|file
argument_list|(
name|path
operator|+
literal|"/file"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QFile
name|dirAsFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// yay, I have to use QFile to change a dir's permissions...
name|QVERIFY
argument_list|(
name|dirAsFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no permissions
else|#
directive|else
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
comment|// didn't work
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// still exists
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QVERIFY
argument_list|(
name|dirAsFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOwner
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|dir
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRecursivelySymlink
name|void
name|tst_QDir
operator|::
name|removeRecursivelySymlink
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
specifier|const
name|QString
name|tmpdir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmpdir/"
decl_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|tmpdir
argument_list|)
expr_stmt|;
name|QDir
name|currentDir
decl_stmt|;
name|currentDir
operator|.
name|mkdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
name|QFile
argument_list|(
literal|"testfile"
argument_list|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|link
init|=
name|tmpdir
operator|+
literal|"linkToDir.lnk"
decl_stmt|;
specifier|const
name|QString
name|linkToFile
init|=
name|tmpdir
operator|+
literal|"linkToFile.lnk"
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"../myDir"
argument_list|,
name|link
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"../testfile"
argument_list|,
name|linkToFile
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDir
name|dir
argument_list|(
name|tmpdir
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"myDir"
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// it didn't follow the symlink, good.
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"testfile"
argument_list|)
argument_list|)
expr_stmt|;
name|currentDir
operator|.
name|rmdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|exists_data
name|void
name|tst_QDir
operator|::
name|exists_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0.1"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/I/Do_not_expect_this_path_to_exist/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/tst_qdir/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/I/Do_not_expect_this_resource_to_exist/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources"
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources/"
operator|)
operator|<<
literal|true
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 1"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 2"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 3"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 4"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 5"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 6"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 7"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/adirthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 8"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/asharethatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 9"
argument_list|)
operator|<<
literal|"//ahostthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"This drive should exist"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|true
expr_stmt|;
comment|// find a non-existing drive and check if it does not exist
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFileInfoList
name|drives
init|=
name|QFSFileEngine
operator|::
name|drives
argument_list|()
decl_stmt|;
name|QStringList
name|driveLetters
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drives
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|driveLetters
operator|+=
name|drives
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
name|char
name|drive
init|=
literal|'Z'
decl_stmt|;
name|QString
name|driv
decl_stmt|;
do|do
block|{
name|driv
operator|=
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"%1:/"
argument_list|)
operator|.
name|arg
argument_list|(
name|drive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|driveLetters
operator|.
name|contains
argument_list|(
name|driv
argument_list|)
condition|)
break|break;
operator|--
name|drive
expr_stmt|;
block|}
do|while
condition|(
name|drive
operator|>=
literal|'A'
condition|)
do|;
if|if
condition|(
name|drive
operator|>=
literal|'A'
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"This drive should not exist"
argument_list|)
operator|<<
name|driv
operator|<<
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|exists
name|void
name|tst_QDir
operator|::
name|exists
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRelativePath_data
name|void
name|tst_QDir
operator|::
name|isRelativePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"relative"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"../somedir"
operator|<<
literal|true
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"C:/sOmedir"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"somedir"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/somedir"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource0"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/prefix/foo.bar"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRelativePath
name|void
name|tst_QDir
operator|::
name|isRelativePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|relative
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|relative
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QDir_default
name|void
name|tst_QDir
operator|::
name|QDir_default
parameter_list|()
block|{
comment|//default constructor QDir();
name|QDir
name|dir
decl_stmt|;
comment|// according to documentation should be currentDirPath
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QDir
operator|::
name|compare
parameter_list|()
block|{
comment|// operator==
comment|// Not using QCOMPARE to test result of QDir::operator==
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|makeAbsolute
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|==
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|==
name|QDir
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"../"
argument_list|)
operator|==
name|QDir
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/.."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterLinks
specifier|static
name|QStringList
name|filterLinks
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
return|return
name|list
return|;
else|#
directive|else
name|QStringList
name|result
decl_stmt|;
foreach|foreach
control|(
name|QString
name|str
decl|,
name|list
control|)
block|{
if|if
condition|(
operator|!
name|str
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|".lnk"
argument_list|)
argument_list|)
condition|)
name|result
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|entryList_data
name|void
name|tst_QDir
operator|::
name|entryList_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|// relative from current path or abs
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"nameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"filterspec"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortspec"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces1"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*. bar"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"foo. bar"
argument_list|)
expr_stmt|;
comment|// notice how spaces5 works
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces2"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*.bar"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"foo.bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces3"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"foo.*"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo. bar,foo.bar"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"files1"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/testdir/dir"
operator|)
operator|<<
name|QString
argument_list|(
literal|"*r.cpp *.pro"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qdir.pro,qrc_qdir.cpp,tst_qdir.cpp"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"testdir1"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/testdir"
operator|)
operator|<<
name|QStringList
argument_list|()
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|AllDirs
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".,..,dir,spaces"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resources1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/tst_qdir/resources/entryList"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*.data"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"file1.data,file2.data,file3.data"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resources2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/tst_qdir/resources/entryList"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*.data"
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
call|(
name|int
call|)
argument_list|(
name|QDir
operator|::
name|NoSort
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"file1.data,file2.data,file3.data"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nofilter"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Files"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"file,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Dirs"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,linktodirectory.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Dirs | QDir::NoDotAndDotDot"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"directory,linktodirectory.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllDirs"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllDirs
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,linktodirectory.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllDirs | QDir::Dirs"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,linktodirectory.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllDirs | QDir::Files"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries | QDir::NoSymLinks"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries | QDir::NoSymLinks | QDir::NoDotAndDotDot"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoSymLinks
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"directory,file,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Files | QDir::NoSymLinks"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"file,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Dirs | QDir::NoSymLinks"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Drives | QDir::Files | QDir::NoDotAndDotDot"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Drives
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"file,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::System"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|System
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QStringList
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Hidden"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::System | QDir::Hidden"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|System
operator||
name|QDir
operator|::
name|Hidden
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QStringList
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllDirs | QDir::NoSymLinks"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries | QDir::Hidden | QDir::System"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|System
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,brokenlink.lnk,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries | QDir::Readable"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|Readable
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::AllEntries | QDir::Writable"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|Writable
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,linktodirectory.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Files | QDir::Readable"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Readable
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"file,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Dirs | QDir::Readable"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Readable
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,linktodirectory.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Namefilters b*"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"d*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"directory"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Namefilters f*"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"f*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"file"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Namefilters link*"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"link*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"linktodirectory.lnk,linktofile.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Namefilters *to*"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*to*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"directory,linktodirectory.lnk,linktofile.lnk"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Name"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|".,..,directory,file,linktodirectory.lnk,linktofile.lnk,writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Name | QDir::Reversed"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|Reversed
argument_list|)
operator|<<
name|filterLinks
argument_list|(
name|QString
argument_list|(
literal|"writable,linktofile.lnk,linktodirectory.lnk,file,directory,..,."
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Type"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Type
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".,..,a,b,c,d,e,f,a.a,b.a,c.a,d.a,e.a,f.a,a.b,b.b,c.b,d.b,e.b,f.b,a.c,b.c,c.c,d.c,e.c,f.c"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Type | QDir::Reversed"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Type
operator||
name|QDir
operator|::
name|Reversed
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"f.c,e.c,d.c,c.c,b.c,a.c,f.b,e.b,d.b,c.b,b.b,a.b,f.a,e.a,d.a,c.a,b.a,a.a,f,e,d,c,b,a,..,."
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Type | QDir::DirsLast"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Type
operator||
name|QDir
operator|::
name|DirsLast
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a,b,c,a.a,b.a,c.a,a.b,b.b,c.b,a.c,b.c,c.c,.,..,d,e,f,d.a,e.a,f.a,d.b,e.b,f.b,d.c,e.c,f.c"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Type | QDir::DirsFirst"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Type
operator||
name|QDir
operator|::
name|DirsFirst
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".,..,d,e,f,d.a,e.a,f.a,d.b,e.b,f.b,d.c,e.c,f.c,a,b,c,a.a,b.a,c.a,a.b,b.b,c.b,a.c,b.c,c.c"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Size"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Size
operator||
name|QDir
operator|::
name|DirsFirst
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d,d.a,d.b,d.c,e,e.a,e.b,e.c,f,f.a,f.b,f.c,c.a,c.b,c.c,b.a,b.c,b.b,a.c,a.b,a.a,a,b,c"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Sorting QDir::Size | QDir::Reversed"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/types/"
operator|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Size
operator||
name|QDir
operator|::
name|Reversed
operator||
name|QDir
operator|::
name|DirsLast
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c,b,a,a.a,a.b,a.c,b.b,b.c,b.a,c.c,c.b,c.a,f.c,f.b,f.a,f,e.c,e.b,e.a,e,d.c,d.b,d.a,d"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|entryList
name|void
name|tst_QDir
operator|::
name|entryList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|filterspec
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortspec
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|entrylistPath
init|=
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
decl_stmt|;
name|QFile
argument_list|(
name|entrylistPath
operator|+
literal|"writable"
argument_list|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QFile
argument_list|(
name|entrylistPath
operator|+
literal|"file"
argument_list|)
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ReadUser
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktofile"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktodirectory"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktofile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktodirectory.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"brokenlink"
argument_list|)
expr_stmt|;
comment|// WinCE does not have . and .. in the directory listing
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|expected
operator|.
name|removeAll
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|expected
operator|.
name|removeAll
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// ### Sadly, this is a platform difference right now.
comment|// Note we are using capital L in entryList on one side here, to test case-insensitivity
name|QFile
operator|::
name|link
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/entryList/"
operator|)
operator|+
literal|"file"
argument_list|,
name|entrylistPath
operator|+
literal|"linktofile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|link
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/entryList/"
operator|)
operator|+
literal|"directory"
argument_list|,
name|entrylistPath
operator|+
literal|"linktodirectory.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|link
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/entryList/"
operator|)
operator|+
literal|"nothing"
argument_list|,
name|entrylistPath
operator|+
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFile
operator|::
name|link
argument_list|(
literal|"file"
argument_list|,
name|entrylistPath
operator|+
literal|"linktofile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|link
argument_list|(
literal|"directory"
argument_list|,
name|entrylistPath
operator|+
literal|"linktodirectory.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|link
argument_list|(
literal|"nothing"
argument_list|,
name|entrylistPath
operator|+
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|//Q_NO_SYMLINKS
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|actual
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|nameFilters
argument_list|,
operator|(
name|QDir
operator|::
name|Filters
operator|)
name|filterspec
argument_list|,
operator|(
name|QDir
operator|::
name|SortFlags
operator|)
name|sortspec
argument_list|)
decl_stmt|;
name|int
name|max
init|=
name|qMin
argument_list|(
name|actual
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|doContentCheck
init|=
literal|true
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"QDir::AllEntries | QDir::Writable"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// for root, everything is writeable
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|doContentCheck
operator|=
literal|false
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|doContentCheck
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|actual
index|[
name|i
index|]
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"writable"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktofile"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktodirectory"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktofile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"linktodirectory.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|entrylistPath
operator|+
literal|"brokenlink"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|entryListSimple_data
name|void
name|tst_QDir
operator|::
name|entryListSimple_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"countMin"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"do_not_expect_this_path_to_exist/"
operator|<<
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources"
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources/"
operator|)
operator|<<
literal|0
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources"
operator|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/resources/"
operator|)
operator|<<
literal|2
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 1"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 2"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 3"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 4"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 5"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 6"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp/"
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 7"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/adirthatshouldnotexist"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 8"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/asharethatshouldnotexist"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 9"
argument_list|)
operator|<<
literal|"//ahostthatshouldnotexist"
operator|<<
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|entryListSimple
name|void
name|tst_QDir
operator|::
name|entryListSimple
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|countMin
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QStringList
name|actual
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actual
operator|.
name|count
argument_list|()
operator|>=
name|countMin
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|entryListWithSymLinks
name|void
name|tst_QDir
operator|::
name|entryListWithSymLinks
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLinkToFile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile.cpp"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
name|QFile
argument_list|(
literal|"testfile.cpp"
argument_list|)
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"myDir"
argument_list|,
literal|"myLinkToDir.lnk"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"testfile.cpp"
argument_list|,
literal|"myLinkToFile.lnk"
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QStringList
name|entryList
init|=
name|QDir
argument_list|()
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myDir"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToFile.lnk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QStringList
name|entryList
init|=
name|QDir
argument_list|()
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myDir"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToFile.lnk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QStringList
name|entryList
init|=
name|QDir
argument_list|()
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"myDir"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|entryList
operator|.
name|contains
argument_list|(
literal|"myLinkToFile.lnk"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLinkToFile.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"testfile.cpp"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|canonicalPath_data
name|void
name|tst_QDir
operator|::
name|canonicalPath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"canonicalPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relative"
argument_list|)
operator|<<
literal|"."
operator|<<
name|m_dataPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeSubDir"
argument_list|)
operator|<<
literal|"./testData/../testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testData/../testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"\\testData\\..\\testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexistant"
argument_list|)
operator|<<
literal|"testd"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rootPath"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// On Mac OS X 10.5 and earlier, canonicalPath depends on cleanPath which
comment|// is itself very broken and fundamentally wrong on "/./" which, this would
comment|// exercise
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_6
condition|)
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rootPath + ./"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"./"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rootPath + ../.. "
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"../.."
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive:\\"
argument_list|)
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive:\\.\\"
argument_list|)
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"./"
argument_list|)
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive:\\..\\.."
argument_list|)
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"../.."
argument_list|)
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive:"
argument_list|)
operator|<<
name|QDir
argument_list|()
operator|.
name|canonicalPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|<<
name|QDir
argument_list|()
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/tst_qdir/resources/entryList"
operator|<<
literal|":/tst_qdir/resources/entryList"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canonicalPath
name|void
name|tst_QDir
operator|::
name|canonicalPath
parameter_list|()
block|{
name|QDir
name|dataDir
argument_list|(
name|m_dataPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|.
name|absolutePath
argument_list|()
operator|!=
name|dataDir
operator|.
name|canonicalPath
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test does not work if this directory path consists of symlinks."
argument_list|)
expr_stmt|;
name|QString
name|oldpwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|dataDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|canonicalPath
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|canonicalPath
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|canonicalPath
argument_list|()
argument_list|,
name|canonicalPath
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldpwd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|current_data
name|void
name|tst_QDir
operator|::
name|current_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"currentDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"startup"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|m_dataPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relPath"
argument_list|)
operator|<<
literal|"testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absPath"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"\\testData"
operator|<<
name|m_dataPath
operator|+
literal|"/testData"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexistant"
argument_list|)
operator|<<
literal|"testd"
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"parent"
argument_list|)
operator|<<
literal|".."
operator|<<
name|m_dataPath
operator|.
name|left
argument_list|(
name|m_dataPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|current
name|void
name|tst_QDir
operator|::
name|current
parameter_list|()
block|{
name|QString
name|oldDir
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|m_dataPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|currentDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|b
init|=
name|QDir
operator|::
name|setCurrent
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// If path is non existent, then setCurrent should be false (currentDir is empty in testData)
name|QVERIFY
argument_list|(
name|b
operator|==
operator|!
name|currentDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|currentDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
name|newCurrent
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldDir
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QCOMPARE
argument_list|(
name|newCurrent
operator|.
name|absolutePath
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|currentDir
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|newCurrent
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|currentDir
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldDir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cd_data
name|void
name|tst_QDir
operator|::
name|cd_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"startDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cdDir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"successExpected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"newDir"
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|m_dataPath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cdUp"
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|".."
operator|<<
literal|true
operator|<<
name|m_dataPath
operator|.
name|left
argument_list|(
name|index
operator|==
literal|0
condition|?
literal|1
else|:
name|index
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noChange"
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"."
operator|<<
literal|true
operator|<<
name|m_dataPath
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// on windows QDir::root() is usually c:/ but cd "/" will not force it to be root
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absolute"
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"/"
operator|<<
literal|true
operator|<<
literal|"/"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absolute"
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"/"
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|root
argument_list|()
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non existant"
argument_list|)
operator|<<
literal|"."
operator|<<
literal|"../anonexistingdir"
operator|<<
literal|false
operator|<<
name|m_dataPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"self"
argument_list|)
operator|<<
literal|"."
operator|<<
operator|(
name|QString
argument_list|(
literal|"../"
argument_list|)
operator|+
name|QFileInfo
argument_list|(
name|m_dataPath
argument_list|)
operator|.
name|fileName
argument_list|()
operator|)
operator|<<
literal|true
operator|<<
name|m_dataPath
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file"
argument_list|)
operator|<<
literal|"."
operator|<<
literal|"qdir.pro"
operator|<<
literal|false
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cd
name|void
name|tst_QDir
operator|::
name|cd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|startDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cdDir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|successExpected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
name|QDir
name|d
init|=
name|startDir
decl_stmt|;
name|bool
name|notUsed
init|=
name|d
operator|.
name|exists
argument_list|()
decl_stmt|;
comment|// make sure we cache this before so we can see if 'cd' fails to flush this
name|Q_UNUSED
argument_list|(
name|notUsed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
operator|.
name|cd
argument_list|(
name|cdDir
argument_list|)
argument_list|,
name|successExpected
argument_list|)
expr_stmt|;
if|if
condition|(
name|successExpected
condition|)
name|QCOMPARE
argument_list|(
name|d
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|newDir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNameFilters_data
name|void
name|tst_QDir
operator|::
name|setNameFilters_data
parameter_list|()
block|{
comment|// Effectively copied from entryList2() test
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|// relative from current path or abs
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"nameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces1"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|<<
name|QStringList
argument_list|(
literal|"*. bar"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"foo. bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces2"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|<<
name|QStringList
argument_list|(
literal|"*.bar"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"foo.bar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spaces3"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testdir/spaces"
operator|<<
name|QStringList
argument_list|(
literal|"foo.*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo. bar,foo.bar"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"files1"
argument_list|)
operator|<<
name|m_dataPath
operator|+
literal|"/testdir/dir"
operator|<<
name|QString
argument_list|(
literal|"*r.cpp *.pro"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qdir.pro,qrc_qdir.cpp,tst_qdir.cpp"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resources1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/tst_qdir/resources/entryList"
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*.data"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"file1.data,file2.data,file3.data"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNameFilters
name|void
name|tst_QDir
operator|::
name|setNameFilters
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
name|QStringList
name|actual
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|int
name|max
init|=
name|qMin
argument_list|(
name|actual
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|actual
index|[
name|i
index|]
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
operator|.
name|count
argument_list|()
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|cleanPath_data
name|tst_QDir
operator|::
name|cleanPath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"/Users/sam/troll/qt4.0//.."
operator|<<
literal|"/Users/sam/troll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"/Users/sam////troll/qt4.0//.."
operator|<<
literal|"/Users/sam/troll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QDir
operator|::
name|cleanPath
argument_list|(
literal|"../."
argument_list|)
operator|<<
literal|".."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|QDir
operator|::
name|cleanPath
argument_list|(
literal|"../.."
argument_list|)
operator|<<
literal|"../.."
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|"d:\\a\\bc\\def\\.."
operator|<<
literal|"d:/a/bc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
literal|"d:\\a\\bc\\def\\../../.."
operator|<<
literal|"d:/"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|"d:\\a\\bc\\def\\.."
operator|<<
literal|"d:\\a\\bc\\def\\.."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
literal|"d:\\a\\bc\\def\\../../.."
operator|<<
literal|"d:\\a\\bc\\def\\../../.."
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
literal|".//file1.txt"
operator|<<
literal|"file1.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
literal|"/foo/bar/..//file1.txt"
operator|<<
literal|"/foo/file1.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
literal|"//"
operator|<<
literal|"/"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|#
directive|if
name|defined
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
literal|"c:\\"
operator|<<
literal|"c:/"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
literal|"/:/"
operator|<<
literal|"/:"
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource0"
argument_list|)
operator|<<
literal|":/prefix/foo.bar"
operator|<<
literal|":/prefix/foo.bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|"://prefix/..//prefix/foo.bar"
operator|<<
literal|":/prefix/foo.bar"
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|cleanPath
name|tst_QDir
operator|::
name|cleanPath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QString
name|cleaned
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cleaned
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absoluteFilePath_data
name|void
name|tst_QDir
operator|::
name|absoluteFilePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"/etc"
operator|<<
literal|"/passwd"
operator|<<
literal|"/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"/etc"
operator|<<
literal|"passwd"
operator|<<
literal|"/etc/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"passwd"
operator|<<
literal|"/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"relative"
operator|<<
literal|"path"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/relative/path"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|"foo.bar"
operator|<<
literal|":/prefix/foo.bar"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absoluteFilePath
name|void
name|tst_QDir
operator|::
name|absoluteFilePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedFilePath
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QString
name|absFilePath
init|=
name|dir
operator|.
name|absoluteFilePath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|absFilePath
argument_list|,
name|expectedFilePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePath_data
name|void
name|tst_QDir
operator|::
name|absolutePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"/machine/share/dir1"
operator|<<
literal|"/machine/share/dir1"
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"\\machine\\share\\dir1"
operator|<<
literal|"/machine/share/dir1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"//machine/share/dir1"
operator|<<
literal|"//machine/share/dir1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"\\\\machine\\share\\dir1"
operator|<<
literal|"//machine/share/dir1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|"c:/machine/share/dir1"
operator|<<
literal|"c:/machine/share/dir1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|"c:\\machine\\share\\dir1"
operator|<<
literal|"c:/machine/share/dir1"
expr_stmt|;
endif|#
directive|endif
comment|//test dirty paths are cleaned (QTBUG-19995)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/home/qt/."
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"home/qt/."
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"home/qt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/system/data/../config"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"system/data/../config"
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"system/config"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"//home//qt/"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"/home//qt/"
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"home/qt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"foo/../bar"
argument_list|)
operator|<<
literal|"foo/../bar"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/prefix/foo.bar"
operator|<<
literal|":/prefix/foo.bar"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePath
name|void
name|tst_QDir
operator|::
name|absolutePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedPath
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|expectedPath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|relativeFilePath_data
name|void
name|tst_QDir
operator|::
name|relativeFilePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dir"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"/foo/bar"
operator|<<
literal|"ding.txt"
operator|<<
literal|"ding.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"/foo/bar"
operator|<<
literal|"ding/dong.txt"
operator|<<
literal|"ding/dong.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"/foo/bar"
operator|<<
literal|"../ding/dong.txt"
operator|<<
literal|"../ding/dong.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"/foo/bar"
operator|<<
literal|"/foo/bar/ding.txt"
operator|<<
literal|"ding.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|"/foo/bar/"
operator|<<
literal|"/foo/bar/ding/dong.txt"
operator|<<
literal|"ding/dong.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|"/foo/bar/"
operator|<<
literal|"/ding/dong.txt"
operator|<<
literal|"../../ding/dong.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/ding/dong.txt"
operator|<<
literal|"ding/dong.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/ding/"
operator|<<
literal|"ding"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/ding//"
operator|<<
literal|"ding"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/ding/../dong"
operator|<<
literal|"dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"/ding/../../../../dong"
operator|<<
literal|"../../../dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"11"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"12"
argument_list|)
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"ding"
operator|<<
literal|"ding"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"13"
argument_list|)
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"C:/ding/dong"
operator|<<
literal|"../../ding/dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"14"
argument_list|)
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"/ding/dong"
operator|<<
literal|"../../ding/dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"15"
argument_list|)
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"D:/ding/dong"
operator|<<
literal|"D:/ding/dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"C:/ding/dong"
operator|<<
literal|"ding/dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"17"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"C:/ding/dong"
operator|<<
literal|"ding/dong"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"18"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"C:"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"19"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"C:"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"C:/"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"21"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"C:/"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"22"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"C:file.txt"
operator|<<
literal|"file.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"23"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"C:file.txt"
operator|<<
literal|"file.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"24"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"C:/file.txt"
operator|<<
literal|"file.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"C:/file.txt"
operator|<<
literal|"file.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"26"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"D:"
operator|<<
literal|"D:"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"27"
argument_list|)
operator|<<
literal|"C:"
operator|<<
literal|"D:/"
operator|<<
literal|"D:/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"28"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"D:"
operator|<<
literal|"D:"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"29"
argument_list|)
operator|<<
literal|"C:/"
operator|<<
literal|"D:/"
operator|<<
literal|"D:/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30"
argument_list|)
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"//anotherHost/foo/bar"
operator|<<
literal|"//anotherHost/foo/bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31"
argument_list|)
operator|<<
literal|"//anotherHost/foo"
operator|<<
literal|"//anotherHost/foo/bar"
operator|<<
literal|"bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"32"
argument_list|)
operator|<<
literal|"//anotherHost/foo"
operator|<<
literal|"bar"
operator|<<
literal|"bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"33"
argument_list|)
operator|<<
literal|"//anotherHost/foo"
operator|<<
literal|"C:/foo/bar"
operator|<<
literal|"C:/foo/bar"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource0"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|"foo.bar"
operator|<<
literal|"foo.bar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|":/prefix/foo.bar"
operator|<<
literal|"foo.bar"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|relativeFilePath
name|void
name|tst_QDir
operator|::
name|relativeFilePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|relativeFilePath
argument_list|(
name|path
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filePath_data
name|void
name|tst_QDir
operator|::
name|filePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"/etc"
operator|<<
literal|"/passwd"
operator|<<
literal|"/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"/etc"
operator|<<
literal|"passwd"
operator|<<
literal|"/etc/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|"passwd"
operator|<<
literal|"/passwd"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"relative"
operator|<<
literal|"path"
operator|<<
literal|"relative/path"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|"foo.bar"
operator|<<
literal|":/prefix/foo.bar"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filePath
name|void
name|tst_QDir
operator|::
name|filePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedFilePath
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QString
name|absFilePath
init|=
name|dir
operator|.
name|filePath
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|absFilePath
argument_list|,
name|expectedFilePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QDir
operator|::
name|remove
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
literal|"remove-test"
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|remove
argument_list|(
literal|"remove-test"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|remove
argument_list|(
literal|"/remove-test"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDir::remove: Empty or null file name"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|remove
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rename
name|void
name|tst_QDir
operator|::
name|rename
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
literal|"rename-test"
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test"
argument_list|,
literal|"rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test-renamed"
argument_list|,
literal|"rename-test"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test"
argument_list|,
literal|"/etc/rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// on windows this is possible - maybe make the test a bit better
ifdef|#
directive|ifdef
name|Q_OS_UNIX
comment|// not valid if run as root so skip if needed
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|!=
literal|0
condition|)
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test"
argument_list|,
literal|"/rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test"
argument_list|,
literal|"/rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDir::rename: Empty or null file name(s)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|"rename-test"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDir::rename: Empty or null file name(s)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|""
argument_list|,
literal|"rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|rename
argument_list|(
literal|"some-file-that-does-not-exist"
argument_list|,
literal|"rename-test-renamed"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|remove
argument_list|(
literal|"rename-test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exists2_data
name|void
name|tst_QDir
operator|::
name|exists2_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"exists"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"."
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|""
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"testData"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|"/testData"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|"tst_qdir.cpp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|"/resources.cpp"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource0"
argument_list|)
operator|<<
literal|":/prefix/foo.bar"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qdir/resources/entryList/file1.data"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exists2
name|void
name|tst_QDir
operator|::
name|exists2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|QString
name|oldpwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDir::exists: Empty or null file name"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
if|if
condition|(
name|exists
condition|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldpwd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirName_data
name|void
name|tst_QDir
operator|::
name|dirName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash0"
argument_list|)
operator|<<
literal|"c:/winnt/system32"
operator|<<
literal|"system32"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash1"
argument_list|)
operator|<<
literal|"/winnt/system32"
operator|<<
literal|"system32"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slash2"
argument_list|)
operator|<<
literal|"c:/winnt/system32/kernel32.dll"
operator|<<
literal|"kernel32.dll"
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bslash0"
argument_list|)
operator|<<
literal|"c:\\winnt\\system32"
operator|<<
literal|"system32"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bslash1"
argument_list|)
operator|<<
literal|"\\winnt\\system32"
operator|<<
literal|"system32"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bslash2"
argument_list|)
operator|<<
literal|"c:\\winnt\\system32\\kernel32.dll"
operator|<<
literal|"kernel32.dll"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|"prefix"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirName
name|void
name|tst_QDir
operator|::
name|dirName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|dirName
argument_list|()
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_eq
name|void
name|tst_QDir
operator|::
name|operator_eq
parameter_list|()
block|{
name|QDir
name|dir1
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|dir1
operator|=
name|dir1
expr_stmt|;
name|dir1
operator|.
name|setPath
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dotAndDotDot
name|void
name|tst_QDir
operator|::
name|dotAndDotDot
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"WinCE does not have . nor .."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QDir
name|dir
argument_list|(
name|QString
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/testdir/"
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
name|entryList
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|entryList
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dir"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"spaces"
argument_list|)
argument_list|)
expr_stmt|;
name|entryList
operator|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|entryList
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"dir"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"spaces"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|homePath
name|void
name|tst_QDir
operator|::
name|homePath
parameter_list|()
block|{
name|QDir
name|homeDir
init|=
name|QDir
operator|::
name|home
argument_list|()
decl_stmt|;
name|QString
name|strHome
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
comment|// docs say that homePath() is an absolute path
name|QCOMPARE
argument_list|(
name|strHome
argument_list|,
name|homeDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|strHome
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|strHome
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
comment|// root dir = "/"
name|QVERIFY
argument_list|(
operator|!
name|strHome
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|strHome
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
comment|// root dir = "c:/"; "//" is not really valid...
name|QVERIFY
argument_list|(
operator|!
name|strHome
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QStringList
name|entries
init|=
name|homeDir
operator|.
name|entryList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
literal|"/"
operator|+
name|entries
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tempPath
name|void
name|tst_QDir
operator|::
name|tempPath
parameter_list|()
block|{
name|QDir
name|dir
init|=
name|QDir
operator|::
name|temp
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|QDir
operator|::
name|tempPath
argument_list|()
decl_stmt|;
comment|// docs say that tempPath() is an absolute path
name|QCOMPARE
argument_list|(
name|path
argument_list|,
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
comment|// root dir = "/"
name|QVERIFY
argument_list|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
comment|// root dir = "c:/"; "//" is not really valid...
name|QVERIFY
argument_list|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|rootPath
name|void
name|tst_QDir
operator|::
name|rootPath
parameter_list|()
block|{
name|QDir
name|dir
init|=
name|QDir
operator|::
name|root
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|QDir
operator|::
name|rootPath
argument_list|()
decl_stmt|;
comment|// docs say that tempPath() is an absolute path
name|QCOMPARE
argument_list|(
name|path
argument_list|,
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QCOMPARE
argument_list|(
name|path
argument_list|,
name|QString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nativeSeparators
name|void
name|tst_QDir
operator|::
name|nativeSeparators
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"\\"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|searchPaths_data
name|void
name|tst_QDir
operator|::
name|searchPaths_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"searchPathPrefixes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"searchPaths"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedAbsolutePath"
argument_list|)
expr_stmt|;
name|QString
name|searchDir
init|=
operator|(
name|m_dataPath
operator|+
literal|"/searchdir"
operator|)
decl_stmt|;
name|QString
name|srcdir
init|=
name|QFileInfo
argument_list|(
name|searchDir
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
comment|// sanity
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nopath"
argument_list|)
operator|<<
literal|"picker.png"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptysearchpath"
argument_list|)
operator|<<
literal|"subdir1/picker.png"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"searchpathwithoutprefix"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir1/picker.png"
operator|)
operator|<<
name|QString
argument_list|(
literal|"searchpath"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"searchdir"
argument_list|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir1/picker.png"
operator|)
expr_stmt|;
comment|// new
name|QTest
operator|::
name|newRow
argument_list|(
literal|"novalidsearchpath"
argument_list|)
operator|<<
literal|"searchpath:subdir1/picker.png"
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidsearchpath"
argument_list|)
operator|<<
literal|"searchpath:subdir1/picker.png"
operator|<<
name|QString
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"onlyvalidsearchpath"
argument_list|)
operator|<<
literal|"searchpath:subdir1/picker.png"
operator|<<
name|QString
argument_list|(
literal|"searchpath"
argument_list|)
operator|<<
name|QString
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/searchdir"
operator|)
argument_list|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir1/picker.png"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"validandinvalidsearchpath"
argument_list|)
operator|<<
literal|"searchpath:subdir1/picker.png"
operator|<<
name|QString
argument_list|(
literal|"invalid;searchpath"
argument_list|)
operator|<<
operator|(
literal|"invalid;"
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir"
operator|)
operator|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir1/picker.png"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"precedence1"
argument_list|)
operator|<<
literal|"searchpath:picker.png"
operator|<<
name|QString
argument_list|(
literal|"invalid;searchpath"
argument_list|)
operator|<<
operator|(
literal|"invalid;"
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir1"
operator|)
operator|+
literal|","
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir2"
operator|)
operator|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir1/picker.png"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"precedence2"
argument_list|)
operator|<<
literal|"searchpath:picker.png"
operator|<<
name|QString
argument_list|(
literal|"invalid;searchpath"
argument_list|)
operator|<<
operator|(
literal|"invalid;"
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir2"
operator|)
operator|+
literal|","
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir1"
operator|)
operator|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir2/picker.png"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"precedence3"
argument_list|)
operator|<<
literal|"searchpath2:picker.png"
operator|<<
name|QString
argument_list|(
literal|"searchpath1;searchpath2"
argument_list|)
operator|<<
operator|(
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir1"
operator|)
operator|+
literal|";"
operator|+
operator|(
name|m_dataPath
operator|+
literal|"/searchdir/subdir2"
operator|)
operator|)
operator|<<
operator|(
name|searchDir
operator|+
literal|"/subdir2/picker.png"
operator|)
expr_stmt|;
comment|// re
block|}
end_function
begin_function
DECL|function|searchPaths
name|void
name|tst_QDir
operator|::
name|searchPaths
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|searchPathPrefixes
argument_list|)
expr_stmt|;
name|QStringList
name|searchPathPrefixList
init|=
name|searchPathPrefixes
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|searchPaths
argument_list|)
expr_stmt|;
name|QStringList
name|searchPathsList
init|=
name|searchPaths
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedAbsolutePath
argument_list|)
expr_stmt|;
name|bool
name|exists
init|=
operator|!
name|expectedAbsolutePath
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDir
operator|::
name|setSearchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|searchPathsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|searchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|searchPathsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QFile
argument_list|(
name|filename
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|,
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|expectedAbsolutePath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDir
operator|::
name|setSearchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|searchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
foreach|foreach
control|(
name|QString
name|path
decl|,
name|searchPathsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|QDir
operator|::
name|addSearchPath
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|searchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|searchPathsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QFile
argument_list|(
name|filename
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|,
name|exists
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|,
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
condition|)
block|{
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|expectedAbsolutePath
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QDir
operator|::
name|setSearchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|searchPathPrefixList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|searchPaths
argument_list|(
name|searchPathPrefixList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|entryListWithSearchPaths
name|void
name|tst_QDir
operator|::
name|entryListWithSearchPaths
parameter_list|()
block|{
name|QDir
name|realDir
argument_list|(
literal|":/tst_qdir/resources/entryList"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|realDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|realDir
operator|.
name|entryList
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|realDir
operator|.
name|entryList
argument_list|()
operator|.
name|contains
argument_list|(
literal|"file3.data"
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|setSearchPaths
argument_list|(
literal|"searchpath"
argument_list|,
name|QStringList
argument_list|(
literal|":/tst_qdir/resources"
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
literal|"searchpath:entryList/"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|":/tst_qdir/resources/entryList"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|entryList
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|entryList
operator|.
name|contains
argument_list|(
literal|"file3.data"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|longFileName_data
name|void
name|tst_QDir
operator|::
name|longFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"length"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128"
argument_list|)
operator|<<
literal|128
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"256"
argument_list|)
operator|<<
literal|256
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"512"
argument_list|)
operator|<<
literal|512
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1024"
argument_list|)
operator|<<
literal|1024
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2048"
argument_list|)
operator|<<
literal|2048
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4096"
argument_list|)
operator|<<
literal|4096
expr_stmt|;
block|}
end_function
begin_function
DECL|function|longFileName
name|void
name|tst_QDir
operator|::
name|longFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|QString
name|fileName
argument_list|(
name|length
argument_list|,
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|)
decl_stmt|;
name|fileName
operator|+=
name|QLatin1String
argument_list|(
literal|".txt"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Cannot create long file names"
argument_list|)
expr_stmt|;
name|QFile
name|file2
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|entryList
argument_list|()
operator|.
name|contains
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateFileLists
name|void
name|tst_QDir
operator|::
name|updateFileLists
parameter_list|()
block|{
comment|//  Test setup
name|FileSystem
name|fs
decl_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
literal|"update-file-lists"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/file1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/file2.doc"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
literal|"update-file-lists/sub-dir1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir1/file3.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir1/file4.doc"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir1/file5.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createDirectory
argument_list|(
literal|"update-file-lists/sub-dir2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir2/file6.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir2/file7.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir2/file8.doc"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/sub-dir2/file9.doc"
argument_list|)
argument_list|)
expr_stmt|;
comment|//  Actual test
name|QDir
name|dir
argument_list|(
literal|"update-file-lists"
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|//no . and .. on these OS.
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dir
operator|.
name|setFilter
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setPath
argument_list|(
literal|"update-file-lists/sub-dir1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|QStringList
argument_list|(
literal|"*.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setPath
argument_list|(
literal|"update-file-lists"
argument_list|)
expr_stmt|;
name|dir
operator|=
name|QDir
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|,
literal|"*.txt"
argument_list|,
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|DirsLast
argument_list|,
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"file1.txt"
operator|<<
literal|"sub-dir1"
operator|<<
literal|"sub-dir2"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setSorting
argument_list|(
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|DirsFirst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"sub-dir1"
operator|<<
literal|"sub-dir2"
operator|<<
literal|"file1.txt"
argument_list|)
expr_stmt|;
block|{
name|QVERIFY
argument_list|(
name|fs
operator|.
name|createFile
argument_list|(
literal|"update-file-lists/extra-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QDir
name|dir2
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"sub-dir1"
operator|<<
literal|"sub-dir2"
operator|<<
literal|"file1.txt"
argument_list|)
expr_stmt|;
name|dir2
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|entryList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"sub-dir1"
operator|<<
literal|"sub-dir2"
operator|<<
literal|"extra-file.txt"
operator|<<
literal|"file1.txt"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|count
argument_list|()
argument_list|,
name|uint
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|entryList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"sub-dir1"
operator|<<
literal|"sub-dir2"
operator|<<
literal|"file1.txt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachingOperations
name|void
name|tst_QDir
operator|::
name|detachingOperations
parameter_list|()
block|{
name|QString
specifier|const
name|defaultPath
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|QStringList
specifier|const
name|defaultNameFilters
init|=
name|QStringList
argument_list|(
literal|"*"
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|SortFlags
specifier|const
name|defaultSorting
init|=
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|IgnoreCase
decl_stmt|;
name|QDir
operator|::
name|Filters
specifier|const
name|defaultFilter
init|=
name|QDir
operator|::
name|AllEntries
decl_stmt|;
name|QString
specifier|const
name|path1
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
name|QString
specifier|const
name|path2
argument_list|(
literal|"./foo"
argument_list|)
decl_stmt|;
name|QStringList
specifier|const
name|nameFilters
init|=
name|QStringList
argument_list|(
name|QString
argument_list|(
literal|"*.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|SortFlags
specifier|const
name|sorting
init|=
name|QDir
operator|::
name|Name
operator||
name|QDir
operator|::
name|DirsLast
operator||
name|QDir
operator|::
name|Reversed
decl_stmt|;
name|QDir
operator|::
name|Filters
specifier|const
name|filter
init|=
name|QDir
operator|::
name|Writable
decl_stmt|;
name|QDir
name|dir1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|defaultPath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|defaultFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|defaultNameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|defaultSorting
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|setPath
argument_list|(
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|defaultFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|defaultNameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|defaultSorting
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|defaultNameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|defaultSorting
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|setNameFilters
argument_list|(
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|defaultSorting
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|setSorting
argument_list|(
name|sorting
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
name|dir1
operator|.
name|setPath
argument_list|(
name|path2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
block|{
name|QDir
name|dir2
argument_list|(
name|dir1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|path
argument_list|()
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
block|}
block|{
name|QDir
name|dir2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|path
argument_list|()
argument_list|,
name|defaultPath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|filter
argument_list|()
argument_list|,
name|defaultFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|defaultNameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|sorting
argument_list|()
argument_list|,
name|defaultSorting
argument_list|)
expr_stmt|;
name|dir2
operator|=
name|dir1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|path
argument_list|()
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
name|dir2
operator|=
name|path1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|path
argument_list|()
argument_list|,
name|path1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir2
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
block|}
name|dir1
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|path2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
name|QString
specifier|const
name|currentPath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir1
operator|.
name|cd
argument_list|(
name|currentPath
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|path
argument_list|()
argument_list|,
name|currentPath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir1
operator|.
name|cdUp
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|filter
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|nameFilters
argument_list|()
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir1
operator|.
name|sorting
argument_list|()
argument_list|,
name|sorting
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCaching
name|void
name|tst_QDir
operator|::
name|testCaching
parameter_list|()
block|{
name|QString
name|dirName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"testCaching"
argument_list|)
decl_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
comment|// cleanup a previous run.
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|dirName
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// dir exists
name|QVERIFY
argument_list|(
name|dir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// QDir doesn't cache the 'exist' between calls.
block|}
end_function
begin_function
DECL|function|isRoot_data
name|void
name|tst_QDir
operator|::
name|isRoot_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isRoot"
argument_list|)
expr_stmt|;
name|QString
name|test
init|=
name|QDir
operator|::
name|rootPath
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"rootPath "
operator|+
name|test
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|test
operator|<<
literal|true
expr_stmt|;
name|test
operator|=
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"./"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"./ appended "
operator|+
name|test
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|test
operator|<<
literal|false
expr_stmt|;
name|test
operator|=
name|QDir
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"./"
argument_list|)
argument_list|)
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// On Mac OS X 10.5 and earlier, canonicalPath depends on cleanPath which
comment|// is itself very broken and fundamentally wrong on "/./", which this would
comment|// exercise
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_6
condition|)
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"canonicalPath "
operator|+
name|test
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|test
operator|<<
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|test
operator|=
name|QDir
operator|::
name|rootPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"drive relative "
operator|+
name|test
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|test
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resources root"
argument_list|)
operator|<<
literal|":/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resources nonroot"
argument_list|)
operator|<<
literal|":/entrylist"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRoot
name|void
name|tst_QDir
operator|::
name|isRoot
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isRoot
argument_list|)
expr_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|isRoot
argument_list|()
argument_list|,
name|isRoot
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_REGEXP
end_ifndef
begin_function
DECL|function|match_data
name|void
name|tst_QDir
operator|::
name|match_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"match"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single, matching"
argument_list|)
operator|<<
literal|"*.cpp"
operator|<<
literal|"tst_qdir.cpp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single, not matching"
argument_list|)
operator|<<
literal|"*.cpp"
operator|<<
literal|"tst_qdir.h"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi, matching"
argument_list|)
operator|<<
literal|"*.cpp;*.h"
operator|<<
literal|"tst_qdir.cpp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi, matching2"
argument_list|)
operator|<<
literal|"*.cpp;*.h"
operator|<<
literal|"tst_qdir.h"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi, not matching"
argument_list|)
operator|<<
literal|"*.cpp;*.h"
operator|<<
literal|"readme.txt"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|match
name|void
name|tst_QDir
operator|::
name|match
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|match
argument_list|(
name|filter
argument_list|,
name|filename
argument_list|)
argument_list|,
name|match
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|match
argument_list|(
name|filter
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|,
name|filename
argument_list|)
argument_list|,
name|match
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|drives
name|void
name|tst_QDir
operator|::
name|drives
parameter_list|()
block|{
name|QFileInfoList
name|list
argument_list|(
name|QDir
operator|::
name|drives
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
comment|//system
name|QLatin1Char
name|systemdrive
argument_list|(
literal|'c'
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QVERIFY
argument_list|(
name|list
operator|.
name|count
argument_list|()
operator|<=
literal|26
argument_list|)
expr_stmt|;
name|bool
name|foundsystem
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|fi
decl|,
name|list
control|)
block|{
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//"x:/"
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QChar
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|absolutePath
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
operator|==
name|systemdrive
condition|)
name|foundsystem
operator|=
literal|true
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|foundsystem
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|list
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//root
name|QCOMPARE
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|arrayOperator
name|void
name|tst_QDir
operator|::
name|arrayOperator
parameter_list|()
block|{
name|QDir
name|dir1
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
argument_list|)
decl_stmt|;
name|QDir
name|dir2
argument_list|(
operator|(
name|m_dataPath
operator|+
literal|"/entrylist/"
operator|)
argument_list|)
decl_stmt|;
name|QStringList
name|entries
argument_list|(
name|dir1
operator|.
name|entryList
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|dir2
operator|.
name|count
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|entries
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
operator|--
name|i
expr_stmt|;
for|for
control|(
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|dir2
index|[
name|i
index|]
argument_list|,
name|entries
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|equalityOperator_data
name|void
name|tst_QDir
operator|::
name|equalityOperator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"leftPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"leftNameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"leftSort"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"leftFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rightPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rightNameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rightSort"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"rightFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"same"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativepaths"
argument_list|)
operator|<<
literal|"entrylist/"
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|"./entrylist"
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-20495"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/entrylist/.."
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|"."
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|//need a path in the root directory that is unlikely to be a symbolic link.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QString
name|pathinroot
argument_list|(
literal|"c:/windows/.."
argument_list|)
decl_stmt|;
else|#
directive|else
name|QString
name|pathinroot
argument_list|(
literal|"/sbin/.."
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-20495-root"
argument_list|)
operator|<<
name|pathinroot
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slashdot"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"."
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slashdotslash"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|+
literal|"./"
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexistantpaths"
argument_list|)
operator|<<
literal|"dir-that-dont-exist"
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|"another-dir-that-dont-exist"
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-filters"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Dirs
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-sort"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Time
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-namefilters"
argument_list|)
operator|<<
operator|(
name|m_dataPath
operator|+
literal|"/."
operator|)
operator|<<
literal|"*.cpp"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|m_dataPath
operator|<<
literal|"*.jpg"
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Name
argument_list|)
operator|<<
name|int
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equalityOperator
name|void
name|tst_QDir
operator|::
name|equalityOperator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|leftPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|leftNameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|leftSort
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|leftFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rightPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rightNameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rightSort
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|rightFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QDir
name|dir1
argument_list|(
name|leftPath
argument_list|,
name|leftNameFilters
argument_list|,
name|QDir
operator|::
name|SortFlags
argument_list|(
name|leftSort
argument_list|)
argument_list|,
name|QDir
operator|::
name|Filters
argument_list|(
name|leftFilters
argument_list|)
argument_list|)
decl_stmt|;
name|QDir
name|dir2
argument_list|(
name|rightPath
argument_list|,
name|rightNameFilters
argument_list|,
name|QDir
operator|::
name|SortFlags
argument_list|(
name|rightSort
argument_list|)
argument_list|,
name|QDir
operator|::
name|Filters
argument_list|(
name|rightFilters
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|dir1
operator|==
name|dir2
operator|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|dir2
operator|==
name|dir1
operator|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|dir1
operator|!=
name|dir2
operator|)
argument_list|,
operator|!
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|dir2
operator|!=
name|dir1
operator|)
argument_list|,
operator|!
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRelative_data
name|void
name|tst_QDir
operator|::
name|isRelative_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"relative"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|"./"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|".."
argument_list|)
operator|<<
literal|"../"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"content"
argument_list|)
operator|<<
literal|"entrylist/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"current"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"homepath"
argument_list|)
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"temppath"
argument_list|)
operator|<<
name|QDir
operator|::
name|tempPath
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rootpath"
argument_list|)
operator|<<
name|QDir
operator|::
name|rootPath
argument_list|()
operator|<<
literal|false
expr_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|root
decl|,
name|QDir
operator|::
name|drives
argument_list|()
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|root
operator|.
name|absolutePath
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|root
operator|.
name|absolutePath
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource"
argument_list|)
operator|<<
literal|":/prefix"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRelative
name|void
name|tst_QDir
operator|::
name|isRelative
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|relative
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
argument_list|(
name|path
argument_list|)
operator|.
name|isRelative
argument_list|()
argument_list|,
name|relative
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadable
name|void
name|tst_QDir
operator|::
name|isReadable
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDir
name|dir
decl_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QVERIFY
argument_list|(
name|dir
operator|.
name|mkdir
argument_list|(
literal|"nonreadabledir"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|0
operator|==
operator|::
name|chmod
argument_list|(
literal|"nonreadabledir"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QDir
argument_list|(
literal|"nonreadabledir"
argument_list|)
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|0
operator|==
operator|::
name|chmod
argument_list|(
literal|"nonreadabledir"
argument_list|,
name|S_IRUSR
operator||
name|S_IWUSR
operator||
name|S_IXUSR
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|rmdir
argument_list|(
literal|"nonreadabledir"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cdBelowRoot
name|void
name|tst_QDir
operator|::
name|cdBelowRoot
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
DECL|macro|ROOT
define|#
directive|define
name|ROOT
value|QString("/")
DECL|macro|DIR
define|#
directive|define
name|DIR
value|QString("/tmp")
DECL|macro|CD_INTO
define|#
directive|define
name|CD_INTO
value|"tmp"
else|#
directive|else
define|#
directive|define
name|ROOT
value|QString::fromLocal8Bit(qgetenv("SystemDrive"))+"/"
define|#
directive|define
name|DIR
value|QString::fromLocal8Bit(qgetenv("SystemRoot")).replace('\\', '/')
define|#
directive|define
name|CD_INTO
value|QString::fromLocal8Bit(qgetenv("SystemRoot")).mid(3)
endif|#
directive|endif
name|QDir
name|root
argument_list|(
name|ROOT
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|root
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|.
name|path
argument_list|()
argument_list|,
name|ROOT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|root
operator|.
name|cd
argument_list|(
name|CD_INTO
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|root
operator|.
name|path
argument_list|()
argument_list|,
name|DIR
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDir
name|dir
argument_list|(
name|DIR
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|cd
argument_list|(
literal|"../.."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|,
name|DIR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dir
operator|.
name|cd
argument_list|(
literal|"../abs/../.."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|,
name|DIR
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dir
operator|.
name|cd
argument_list|(
literal|".."
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dir
operator|.
name|path
argument_list|()
argument_list|,
name|ROOT
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDir
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdir.moc"
end_include
end_unit
