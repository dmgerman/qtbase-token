begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<private/qwinoverlappedionotifier_p.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_class
DECL|class|tst_QWinOverlappedIoNotifier
class|class
name|tst_QWinOverlappedIoNotifier
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|readFile_data
parameter_list|()
function_decl|;
name|void
name|readFile
parameter_list|()
function_decl|;
name|void
name|waitForNotified_data
parameter_list|()
function_decl|;
name|void
name|waitForNotified
parameter_list|()
function_decl|;
name|void
name|brokenPipe
parameter_list|()
function_decl|;
private|private:
DECL|member|sourceFileInfo
name|QFileInfo
name|sourceFileInfo
decl_stmt|;
DECL|member|notifiedBytesRead
name|DWORD
name|notifiedBytesRead
decl_stmt|;
DECL|member|notifiedErrorCode
name|DWORD
name|notifiedErrorCode
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|NotifierSink
class|class
name|NotifierSink
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|NotifierSink
name|NotifierSink
parameter_list|(
name|QWinOverlappedIoNotifier
modifier|*
name|notifier
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|notifier
argument_list|)
member_init_list|,
name|notifications
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|notifiedBytesRead
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|notifiedErrorCode
argument_list|(
name|ERROR_SUCCESS
argument_list|)
block|{
name|connect
argument_list|(
name|notifier
argument_list|,
operator|&
name|QWinOverlappedIoNotifier
operator|::
name|notified
argument_list|,
name|this
argument_list|,
operator|&
name|NotifierSink
operator|::
name|notified
argument_list|)
expr_stmt|;
block|}
protected|protected
name|slots
protected|:
DECL|function|notified
name|void
name|notified
parameter_list|(
name|DWORD
name|bytesRead
parameter_list|,
name|DWORD
name|errorCode
parameter_list|)
block|{
name|notifications
operator|++
expr_stmt|;
name|notifiedBytesRead
operator|=
name|bytesRead
expr_stmt|;
name|notifiedErrorCode
operator|=
name|errorCode
expr_stmt|;
emit|emit
name|notificationReceived
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|notificationReceived
parameter_list|()
function_decl|;
public|public:
DECL|member|notifications
name|int
name|notifications
decl_stmt|;
DECL|member|notifiedBytesRead
name|DWORD
name|notifiedBytesRead
decl_stmt|;
DECL|member|notifiedErrorCode
name|DWORD
name|notifiedErrorCode
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|initTestCase
parameter_list|()
block|{
name|sourceFileInfo
operator|.
name|setFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qwinoverlappedionotifier.cpp"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|sourceFileInfo
operator|.
name|exists
argument_list|()
argument_list|,
literal|"File tst_qwinoverlappedionotifier.cpp not found."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFile_data
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|readFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"readBufferSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|DWORD
argument_list|>
argument_list|(
literal|"expectedBytesRead"
argument_list|)
expr_stmt|;
name|QString
name|sourceFileName
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourceFileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|sourceFileSize
init|=
name|sourceFileInfo
operator|.
name|size
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"read file, less than available"
argument_list|)
operator|<<
name|sourceFileName
operator|<<
name|sourceFileSize
operator|/
literal|2
operator|<<
name|DWORD
argument_list|(
name|sourceFileSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"read file, more than available"
argument_list|)
operator|<<
name|sourceFileName
operator|<<
name|sourceFileSize
operator|*
literal|2
operator|<<
name|DWORD
argument_list|(
name|sourceFileSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFile
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|readFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|DWORD
argument_list|,
name|expectedBytesRead
argument_list|)
expr_stmt|;
name|QWinOverlappedIoNotifier
name|notifier
decl_stmt|;
name|NotifierSink
name|sink
argument_list|(
operator|&
name|notifier
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|sink
argument_list|,
operator|&
name|NotifierSink
operator|::
name|notificationReceived
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|exitLoop
argument_list|)
expr_stmt|;
name|HANDLE
name|hFile
init|=
name|CreateFile
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|GENERIC_READ
argument_list|,
name|FILE_SHARE_READ
argument_list|,
name|NULL
argument_list|,
name|OPEN_EXISTING
argument_list|,
name|FILE_FLAG_OVERLAPPED
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|setHandle
argument_list|(
name|hFile
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OVERLAPPED
name|overlapped
init|=
block|{
literal|0
block|}
decl_stmt|;
name|QByteArray
name|buffer
argument_list|(
name|readBufferSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BOOL
name|readSuccess
init|=
name|ReadFile
argument_list|(
name|hFile
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|NULL
argument_list|,
operator|&
name|overlapped
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|readSuccess
operator|||
name|GetLastError
argument_list|()
operator|==
name|ERROR_IO_PENDING
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|hFile
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifications
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedBytesRead
argument_list|,
name|expectedBytesRead
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedErrorCode
argument_list|,
name|DWORD
argument_list|(
name|ERROR_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForNotified_data
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|waitForNotified_data
parameter_list|()
block|{
name|readFile_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForNotified
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|waitForNotified
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|readBufferSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|DWORD
argument_list|,
name|expectedBytesRead
argument_list|)
expr_stmt|;
name|QWinOverlappedIoNotifier
name|notifier
decl_stmt|;
name|NotifierSink
name|sink
argument_list|(
operator|&
name|notifier
argument_list|)
decl_stmt|;
name|HANDLE
name|hFile
init|=
name|CreateFile
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|fileName
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|GENERIC_READ
argument_list|,
name|FILE_SHARE_READ
argument_list|,
name|NULL
argument_list|,
name|OPEN_EXISTING
argument_list|,
name|FILE_FLAG_OVERLAPPED
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|notifier
operator|.
name|waitForNotified
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setHandle
argument_list|(
name|hFile
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|notifier
operator|.
name|waitForNotified
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OVERLAPPED
name|overlapped
init|=
block|{
literal|0
block|}
decl_stmt|;
name|QByteArray
name|buffer
argument_list|(
name|readBufferSize
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BOOL
name|readSuccess
init|=
name|ReadFile
argument_list|(
name|hFile
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|NULL
argument_list|,
operator|&
name|overlapped
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|readSuccess
operator|||
name|GetLastError
argument_list|()
operator|==
name|ERROR_IO_PENDING
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|notifier
operator|.
name|waitForNotified
argument_list|(
literal|3000
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|hFile
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifications
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedBytesRead
argument_list|,
name|expectedBytesRead
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedErrorCode
argument_list|,
name|DWORD
argument_list|(
name|ERROR_SUCCESS
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|notifier
operator|.
name|waitForNotified
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brokenPipe
name|void
name|tst_QWinOverlappedIoNotifier
operator|::
name|brokenPipe
parameter_list|()
block|{
name|QWinOverlappedIoNotifier
name|notifier
decl_stmt|;
name|NotifierSink
name|sink
argument_list|(
operator|&
name|notifier
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|sink
argument_list|,
operator|&
name|NotifierSink
operator|::
name|notificationReceived
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|exitLoop
argument_list|)
expr_stmt|;
name|wchar_t
name|pipeName
index|[]
init|=
literal|L"\\\\.\\pipe\\tst_QWinOverlappedIoNotifier_brokenPipe"
decl_stmt|;
name|HANDLE
name|hPipe
init|=
name|CreateNamedPipe
argument_list|(
name|pipeName
argument_list|,
name|PIPE_ACCESS_DUPLEX
argument_list|,
name|PIPE_TYPE_BYTE
operator||
name|PIPE_NOWAIT
operator||
name|PIPE_REJECT_REMOTE_CLIENTS
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|hPipe
operator|!=
name|INVALID_HANDLE_VALUE
argument_list|)
expr_stmt|;
name|HANDLE
name|hReadEnd
init|=
name|CreateFile
argument_list|(
name|pipeName
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|OPEN_EXISTING
argument_list|,
name|FILE_FLAG_OVERLAPPED
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|hReadEnd
operator|!=
name|INVALID_HANDLE_VALUE
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setHandle
argument_list|(
name|hReadEnd
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|OVERLAPPED
name|overlapped
init|=
block|{
literal|0
block|}
decl_stmt|;
name|QByteArray
name|buffer
argument_list|(
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BOOL
name|readSuccess
init|=
name|ReadFile
argument_list|(
name|hReadEnd
argument_list|,
name|buffer
operator|.
name|data
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|NULL
argument_list|,
operator|&
name|overlapped
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|readSuccess
operator|||
name|GetLastError
argument_list|()
operator|==
name|ERROR_IO_PENDING
argument_list|)
expr_stmt|;
comment|// close the write end of the pipe
name|CloseHandle
argument_list|(
name|hPipe
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|hReadEnd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifications
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedBytesRead
argument_list|,
name|DWORD
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sink
operator|.
name|notifiedErrorCode
argument_list|,
name|DWORD
argument_list|(
name|ERROR_BROKEN_PIPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWinOverlappedIoNotifier
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qwinoverlappedionotifier.moc"
end_include
end_unit
