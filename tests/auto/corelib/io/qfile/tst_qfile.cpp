begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QTemporaryDir>
end_include
begin_include
include|#
directive|include
file|<private/qabstractfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfsfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfilesystemengine_p.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_CORE_EXPORT
name|int
name|qt_ntfs_permission_lookup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
include|#
directive|include
file|<QHostInfo>
endif|#
directive|endif
include|#
directive|include
file|<QProcess>
ifdef|#
directive|ifdef
name|Q_OS_WIN
include|#
directive|include
file|<qt_windows.h>
else|#
directive|else
include|#
directive|include
file|<sys/types.h>
include|#
directive|include
file|<unistd.h>
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
include|#
directive|include
file|<sys/mount.h>
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
include|#
directive|include
file|<sys/vfs.h>
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
include|#
directive|include
file|<sys/param.h>
include|#
directive|include
file|<sys/mount.h>
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
include|#
directive|include
file|<sys/statfs.h>
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
include|#
directive|include
file|<qplatformdefs.h>
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
include|#
directive|include
file|<fcntl.h>
if|#
directive|if
name|defined
argument_list|(
name|_WRS_KERNEL
argument_list|)
undef|#
directive|undef
name|QT_OPEN
define|#
directive|define
name|QT_OPEN
parameter_list|(
name|path
parameter_list|,
name|oflag
parameter_list|)
value|::open(path, oflag, 0)
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_QNX
ifdef|#
directive|ifdef
name|open
DECL|macro|open
undef|#
directive|undef
name|open
endif|#
directive|endif
endif|#
directive|endif
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<errno.h>
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
include|#
directive|include
file|"../../../network-settings.h"
endif|#
directive|endif
ifndef|#
directive|ifndef
name|STDIN_FILENO
DECL|macro|STDIN_FILENO
define|#
directive|define
name|STDIN_FILENO
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|STDOUT_FILENO
DECL|macro|STDOUT_FILENO
define|#
directive|define
name|STDOUT_FILENO
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|STDERR_FILENO
DECL|macro|STDERR_FILENO
define|#
directive|define
name|STDERR_FILENO
value|2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_OPEN_BINARY
DECL|macro|QT_OPEN_BINARY
define|#
directive|define
name|QT_OPEN_BINARY
value|0
endif|#
directive|endif
name|Q_DECLARE_METATYPE
argument_list|(
name|QFile
operator|::
name|FileError
argument_list|)
DECL|class|tst_QFile
name|class
name|tst_QFile
range|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
specifier|public
operator|:
name|tst_QFile
argument_list|()
block|;
specifier|private
name|slots
operator|:
name|void
name|init
argument_list|()
block|;
name|void
name|cleanup
argument_list|()
block|;
name|void
name|initTestCase
argument_list|()
block|;
name|void
name|cleanupTestCase
argument_list|()
block|;
name|void
name|exists
argument_list|()
block|;
name|void
name|open_data
argument_list|()
block|;
name|void
name|open
argument_list|()
block|;
name|void
name|openUnbuffered
argument_list|()
block|;
name|void
name|size_data
argument_list|()
block|;
name|void
name|size
argument_list|()
block|;
name|void
name|sizeNoExist
argument_list|()
block|;
name|void
name|seek
argument_list|()
block|;
name|void
name|setSize
argument_list|()
block|;
name|void
name|setSizeSeek
argument_list|()
block|;
name|void
name|atEnd
argument_list|()
block|;
name|void
name|readLine
argument_list|()
block|;
name|void
name|readLine2
argument_list|()
block|;
name|void
name|readLineNullInLine
argument_list|()
block|;
name|void
name|readAll_data
argument_list|()
block|;
name|void
name|readAll
argument_list|()
block|;
name|void
name|readAllBuffer
argument_list|()
block|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|void
name|readAllStdin
argument_list|()
block|;
name|void
name|readLineStdin
argument_list|()
block|;
name|void
name|readLineStdin_lineByLine
argument_list|()
block|;
endif|#
directive|endif
name|void
name|text
argument_list|()
block|;
name|void
name|missingEndOfLine
argument_list|()
block|;
name|void
name|readBlock
argument_list|()
block|;
name|void
name|getch
argument_list|()
block|;
name|void
name|ungetChar
argument_list|()
block|;
name|void
name|createFile
argument_list|()
block|;
name|void
name|append
argument_list|()
block|;
name|void
name|permissions_data
argument_list|()
block|;
name|void
name|permissions
argument_list|()
block|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|void
name|permissionsNtfs_data
argument_list|()
block|;
name|void
name|permissionsNtfs
argument_list|()
block|;
endif|#
directive|endif
name|void
name|setPermissions
argument_list|()
block|;
name|void
name|copy
argument_list|()
block|;
name|void
name|copyAfterFail
argument_list|()
block|;
name|void
name|copyRemovesTemporaryFile
argument_list|()
specifier|const
block|;
name|void
name|copyShouldntOverwrite
argument_list|()
block|;
name|void
name|copyFallback
argument_list|()
block|;
name|void
name|link
argument_list|()
block|;
name|void
name|linkToDir
argument_list|()
block|;
name|void
name|absolutePathLinkToRelativePath
argument_list|()
block|;
name|void
name|readBrokenLink
argument_list|()
block|;
name|void
name|readTextFile_data
argument_list|()
block|;
name|void
name|readTextFile
argument_list|()
block|;
name|void
name|readTextFile2
argument_list|()
block|;
name|void
name|writeTextFile_data
argument_list|()
block|;
name|void
name|writeTextFile
argument_list|()
block|;
comment|/* void largeFileSupport(); */
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|largeUncFileSupport
argument_list|()
block|;
endif|#
directive|endif
name|void
name|flush
argument_list|()
block|;
name|void
name|bufferedRead
argument_list|()
block|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|void
name|isSequential
argument_list|()
block|;
endif|#
directive|endif
name|void
name|encodeName
argument_list|()
block|;
name|void
name|truncate
argument_list|()
block|;
name|void
name|seekToPos
argument_list|()
block|;
name|void
name|seekAfterEndOfFile
argument_list|()
block|;
name|void
name|FILEReadWrite
argument_list|()
block|;
name|void
name|i18nFileName_data
argument_list|()
block|;
name|void
name|i18nFileName
argument_list|()
block|;
name|void
name|longFileName_data
argument_list|()
block|;
name|void
name|longFileName
argument_list|()
block|;
name|void
name|fileEngineHandler
argument_list|()
block|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|useQFileInAFileHandler
argument_list|()
block|;
endif|#
directive|endif
name|void
name|getCharFF
argument_list|()
block|;
name|void
name|remove_and_exists
argument_list|()
block|;
name|void
name|removeOpenFile
argument_list|()
block|;
name|void
name|fullDisk
argument_list|()
block|;
name|void
name|writeLargeDataBlock_data
argument_list|()
block|;
name|void
name|writeLargeDataBlock
argument_list|()
block|;
name|void
name|readFromWriteOnlyFile
argument_list|()
block|;
name|void
name|writeToReadOnlyFile
argument_list|()
block|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_NETBSD
argument_list|)
name|void
name|virtualFile
argument_list|()
block|;
endif|#
directive|endif
name|void
name|textFile
argument_list|()
block|;
name|void
name|rename_data
argument_list|()
block|;
name|void
name|rename
argument_list|()
block|;
name|void
name|renameWithAtEndSpecialFile
argument_list|()
specifier|const
block|;
name|void
name|renameFallback
argument_list|()
block|;
name|void
name|renameMultiple
argument_list|()
block|;
name|void
name|appendAndRead
argument_list|()
block|;
name|void
name|miscWithUncPathAsCurrentDir
argument_list|()
block|;
name|void
name|standarderror
argument_list|()
block|;
name|void
name|handle
argument_list|()
block|;
name|void
name|nativeHandleLeaks
argument_list|()
block|;
name|void
name|readEof_data
argument_list|()
block|;
name|void
name|readEof
argument_list|()
block|;
name|void
name|map_data
argument_list|()
block|;
name|void
name|map
argument_list|()
block|;
name|void
name|mapResource_data
argument_list|()
block|;
name|void
name|mapResource
argument_list|()
block|;
name|void
name|mapOpenMode_data
argument_list|()
block|;
name|void
name|mapOpenMode
argument_list|()
block|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|void
name|openStandardStreamsFileDescriptors
argument_list|()
block|;
name|void
name|openStandardStreamsBufferedStreams
argument_list|()
block|;
endif|#
directive|endif
name|void
name|resize_data
argument_list|()
block|;
name|void
name|resize
argument_list|()
block|;
name|void
name|objectConstructors
argument_list|()
block|;
name|void
name|caseSensitivity
argument_list|()
block|;
name|void
name|autocloseHandle
argument_list|()
block|;
name|void
name|posAfterFailedStat
argument_list|()
block|;
name|void
name|openDirectory
argument_list|()
block|;
name|void
name|writeNothing
argument_list|()
block|;
name|void
name|invalidFile_data
argument_list|()
block|;
name|void
name|invalidFile
argument_list|()
block|;
specifier|private
operator|:
expr|enum
DECL|enum|FileType
name|FileType
block|{
DECL|enumerator|OpenQFile
name|OpenQFile
block|,
DECL|enumerator|OpenFd
name|OpenFd
block|,
DECL|enumerator|OpenStream
name|OpenStream
block|,
DECL|enumerator|NumberOfFileTypes
name|NumberOfFileTypes
block|}
block|;
DECL|function|openFd
name|bool
name|openFd
argument_list|(
argument|QFile&file
argument_list|,
argument|QIODevice::OpenMode mode
argument_list|,
argument|QFile::FileHandleFlags handleFlags
argument_list|)
block|{
name|int
name|fdMode
operator|=
name|QT_OPEN_LARGEFILE
operator||
name|QT_OPEN_BINARY
block|;
comment|// File will be truncated if in Write mode.
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
name|fdMode
operator||=
name|QT_OPEN_WRONLY
operator||
name|QT_OPEN_TRUNC
expr_stmt|;
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|fdMode
operator||=
name|QT_OPEN_RDONLY
expr_stmt|;
name|fd_
operator|=
name|QT_OPEN
argument_list|(
name|qPrintable
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|fdMode
argument_list|)
decl_stmt|;
end_decl_stmt
begin_return
return|return
operator|(
operator|-
literal|1
operator|!=
name|fd_
operator|)
operator|&&
name|file
operator|.
name|open
argument_list|(
name|fd_
argument_list|,
name|mode
argument_list|,
name|handleFlags
argument_list|)
return|;
end_return
begin_macro
unit|}      bool
DECL|function|openStream
name|openStream
argument_list|(
argument|QFile&file
argument_list|,
argument|QIODevice::OpenMode mode
argument_list|,
argument|QFile::FileHandleFlags handleFlags
argument_list|)
end_macro
begin_block
block|{
name|char
specifier|const
modifier|*
name|streamMode
init|=
literal|""
decl_stmt|;
comment|// File will be truncated if in Write mode.
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
name|streamMode
operator|=
literal|"wb+"
expr_stmt|;
elseif|else
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|ReadOnly
condition|)
name|streamMode
operator|=
literal|"rb"
expr_stmt|;
name|stream_
operator|=
name|QT_FOPEN
argument_list|(
name|qPrintable
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|streamMode
argument_list|)
expr_stmt|;
return|return
name|stream_
operator|&&
name|file
operator|.
name|open
argument_list|(
name|stream_
argument_list|,
name|mode
argument_list|,
name|handleFlags
argument_list|)
return|;
block|}
end_block
begin_function
DECL|function|openFile
name|bool
name|openFile
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|,
name|QIODevice
operator|::
name|OpenMode
name|mode
parameter_list|,
name|FileType
name|type
init|=
name|OpenQFile
parameter_list|,
name|QFile
operator|::
name|FileHandleFlags
name|handleFlags
init|=
name|QFile
operator|::
name|DontCloseHandle
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|WriteOnly
operator|&&
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Make sure the file exists
name|QFile
name|createFile
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|createFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
comment|// Note: openFd and openStream will truncate the file if write mode.
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|OpenQFile
case|:
return|return
name|file
operator|.
name|open
argument_list|(
name|mode
argument_list|)
return|;
case|case
name|OpenFd
case|:
return|return
name|openFd
argument_list|(
name|file
argument_list|,
name|mode
argument_list|,
name|handleFlags
argument_list|)
return|;
case|case
name|OpenStream
case|:
return|return
name|openStream
argument_list|(
name|file
argument_list|,
name|mode
argument_list|,
name|handleFlags
argument_list|)
return|;
case|case
name|NumberOfFileTypes
case|:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|closeFile
name|void
name|closeFile
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|)
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|!=
name|fd_
condition|)
name|QT_CLOSE
argument_list|(
name|fd_
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream_
condition|)
operator|::
name|fclose
argument_list|(
name|stream_
argument_list|)
expr_stmt|;
name|fd_
operator|=
operator|-
literal|1
expr_stmt|;
name|stream_
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|member|fd_
name|int
name|fd_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|stream_
name|FILE
modifier|*
name|stream_
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_temporaryDir
name|QTemporaryDir
name|m_temporaryDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_oldDir
specifier|const
name|QString
name|m_oldDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_stdinProcessDir
name|QString
name|m_stdinProcessDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_testSourceFile
name|QString
name|m_testSourceFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_testLogFile
name|QString
name|m_testLogFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_dosFile
name|QString
name|m_dosFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_forCopyingFile
name|QString
name|m_forCopyingFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_forRenamingFile
name|QString
name|m_forRenamingFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_twoDotsFile
name|QString
name|m_twoDotsFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_testFile
name|QString
name|m_testFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_resourcesDir
name|QString
name|m_resourcesDir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_noEndOfLineFile
name|QString
name|m_noEndOfLineFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_noEndOfLineFile
unit|};
DECL|variable|noReadFile
specifier|static
specifier|const
name|char
name|noReadFile
index|[]
init|=
literal|"noreadfile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|readOnlyFile
specifier|static
specifier|const
name|char
name|readOnlyFile
index|[]
init|=
literal|"readonlyfile"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|init
name|void
name|tst_QFile
operator|::
name|init
parameter_list|()
block|{
name|fd_
operator|=
operator|-
literal|1
expr_stmt|;
name|stream_
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFile
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
operator|-
literal|1
operator|!=
name|fd_
condition|)
name|QT_CLOSE
argument_list|(
name|fd_
argument_list|)
expr_stmt|;
name|fd_
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|stream_
condition|)
operator|::
name|fclose
argument_list|(
name|stream_
argument_list|)
expr_stmt|;
name|stream_
operator|=
literal|0
expr_stmt|;
comment|// Windows UNC tests set a different working directory which might not be restored on failures.
if|if
condition|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|!=
name|m_temporaryDir
operator|.
name|path
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|m_temporaryDir
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean out everything except the readonly-files.
specifier|const
name|QDir
name|dir
argument_list|(
name|m_temporaryDir
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|fi
decl|,
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
control|)
block|{
specifier|const
name|QString
name|fileName
init|=
name|fi
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|!=
name|QLatin1String
argument_list|(
name|noReadFile
argument_list|)
operator|&&
name|fileName
operator|!=
name|QLatin1String
argument_list|(
name|readOnlyFile
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|absoluteFilePath
init|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
operator|&&
operator|!
name|fi
operator|.
name|isSymLink
argument_list|()
condition|)
block|{
name|QDir
name|remainingDir
argument_list|(
name|absoluteFilePath
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|remainingDir
operator|.
name|removeRecursively
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|absoluteFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|absoluteFilePath
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|absoluteFilePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_constructor
DECL|function|tst_QFile
name|tst_QFile
operator|::
name|tst_QFile
parameter_list|()
member_init_list|:
name|m_oldDir
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QFile
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|m_temporaryDir
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|m_stdinProcessDir
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"stdinprocess"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_stdinProcessDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_testSourceFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfile.cpp"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_testSourceFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_testLogFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testlog.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_testLogFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_dosFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"dosfile.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_dosFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_forCopyingFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"forCopying.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_forCopyingFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_forRenamingFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"forRenaming.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_forRenamingFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_twoDotsFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"two.dots.file"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_twoDotsFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_testFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testfile.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_testFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_resourcesDir
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"resources"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_resourcesDir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_noEndOfLineFile
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"noendofline.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_noEndOfLineFile
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|m_temporaryDir
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a file and make it read-only
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|readOnlyFile
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// create another file and make it not readable
name|file
operator|.
name|setFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|noReadFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// Not supported on Windows.
name|QVERIFY2
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
literal|0
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QFile
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|readOnlyFile
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|noReadFile
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|m_oldDir
argument_list|)
argument_list|)
expr_stmt|;
comment|//release test directory for removal
block|}
end_function
begin_comment
comment|//------------------------------------------
end_comment
begin_comment
comment|// The 'testfile' is currently just a
end_comment
begin_comment
comment|// testfile. The path of this file, the
end_comment
begin_comment
comment|// attributes and the contents itself
end_comment
begin_comment
comment|// will be changed as far as we have a
end_comment
begin_comment
comment|// proper way to handle files in the
end_comment
begin_comment
comment|// testing environment.
end_comment
begin_comment
comment|//------------------------------------------
end_comment
begin_function
DECL|function|exists
name|void
name|tst_QFile
operator|::
name|exists
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"nobodyhassuchafile"
argument_list|)
decl_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|file2
argument_list|(
literal|"nobodyhassuchafile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QFile
name|unc
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/readme.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|unc
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|open_data
name|void
name|tst_QFile
operator|::
name|open_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|FileError
argument_list|>
argument_list|(
literal|"status"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exist_readOnly"
argument_list|)
operator|<<
name|m_testFile
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|true
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exist_writeOnly"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|readOnlyFile
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exist_append"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|readOnlyFile
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|Append
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonexist_readOnly"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"nonExist.txt"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyfile"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullfile"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-dots"
argument_list|)
operator|<<
name|m_twoDotsFile
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|true
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readonlyfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|readOnlyFile
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noreadfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|noReadFile
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
comment|//opening devices requires administrative privileges (and elevation).
name|HANDLE
name|hTest
init|=
name|CreateFile
argument_list|(
name|_T
argument_list|(
literal|"\\\\.\\PhysicalDrive0"
argument_list|)
argument_list|,
name|GENERIC_READ
argument_list|,
name|FILE_SHARE_READ
operator||
name|FILE_SHARE_WRITE
argument_list|,
name|NULL
argument_list|,
name|OPEN_EXISTING
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|hTest
operator|!=
name|INVALID_HANDLE_VALUE
condition|)
block|{
name|CloseHandle
argument_list|(
name|hTest
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"//./PhysicalDrive0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//./PhysicalDrive0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|true
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"//./PhysicalDrive0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//./PhysicalDrive0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|false
operator|<<
name|QFile
operator|::
name|OpenError
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uncFile"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/test.pri"
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
operator|<<
literal|true
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|open
name|void
name|tst_QFile
operator|::
name|open
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ok
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
comment|// root and Chuck Norris don't care for file permissions. Skip.
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"noreadfile"
argument_list|,
literal|"Windows does not currently support non-readable files."
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|filename
operator|.
name|isEmpty
argument_list|()
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFSFileEngine::open: No file name specified"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|OpenMode
argument_list|(
name|mode
argument_list|)
argument_list|)
argument_list|,
name|ok
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|f
operator|.
name|error
argument_list|()
argument_list|,
literal|"status"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openUnbuffered
name|void
name|tst_QFile
operator|::
name|openUnbuffered
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|d
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c2
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|d2
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|d2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|d2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size_data
name|void
name|tst_QFile
operator|::
name|size_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exist01"
argument_list|)
operator|<<
name|m_testFile
operator|<<
operator|(
name|qint64
operator|)
literal|245
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Only test UNC on Windows./
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QString
argument_list|(
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/test.pri"
argument_list|)
operator|<<
operator|(
name|qint64
operator|)
literal|34
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|size
name|void
name|tst_QFile
operator|::
name|size
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qint64
argument_list|,
name|size
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|filename
operator|=
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|{
name|QFile
name|f
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|f
decl_stmt|;
name|FILE
modifier|*
name|stream
init|=
name|QT_FOPEN
argument_list|(
name|filename
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|stream
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|fclose
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
comment|// Currently low level file I/O is not well supported on Windows CE, so
comment|// skip this part of the test.
ifndef|#
directive|ifndef
name|Q_OS_WINCE
block|{
name|QFile
name|f
decl_stmt|;
name|int
name|fd
init|=
name|QT_OPEN
argument_list|(
name|filename
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|QT_OPEN_RDONLY
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sizeNoExist
name|void
name|tst_QFile
operator|::
name|sizeNoExist
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"nonexist01"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seek
name|void
name|tst_QFile
operator|::
name|seek
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"newfile.txt"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSize
name|void
name|tst_QFile
operator|::
name|setSize
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
literal|"createme.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|Truncate
operator||
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|putChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|f
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|f
operator|.
name|resize
argument_list|(
literal|99
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|99
argument_list|)
expr_stmt|;
name|f
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
literal|'\0'
expr_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|resize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
expr_stmt|;
name|f
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
literal|'\0'
expr_stmt|;
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|resize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|resize
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSizeSeek
name|void
name|tst_QFile
operator|::
name|setSizeSeek
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
literal|"setsizeseek.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
literal|"ABCD"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|resize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|resize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|seek
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|resize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|atEnd
name|void
name|tst_QFile
operator|::
name|atEnd
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|f
operator|.
name|size
argument_list|()
decl_stmt|;
name|f
operator|.
name|seek
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|bool
name|end
init|=
name|f
operator|.
name|atEnd
argument_list|()
decl_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLine
name|void
name|tst_QFile
operator|::
name|readLine
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|char
name|p
index|[
literal|128
index|]
decl_stmt|;
name|int
name|foo
decl_stmt|;
while|while
condition|(
operator|(
name|foo
operator|=
name|f
operator|.
name|readLine
argument_list|(
name|p
argument_list|,
literal|128
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|5
condition|)
block|{
name|QCOMPARE
argument_list|(
name|p
index|[
literal|0
index|]
argument_list|,
literal|'T'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|3
index|]
argument_list|,
literal|'s'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|11
index|]
argument_list|,
literal|'i'
argument_list|)
expr_stmt|;
block|}
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLine2
name|void
name|tst_QFile
operator|::
name|readLine2
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|char
name|p
index|[
literal|128
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|readLine
argument_list|(
name|p
argument_list|,
literal|60
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|readLine
argument_list|(
name|p
argument_list|,
literal|60
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|p
argument_list|,
literal|'@'
argument_list|,
sizeof|sizeof
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|readLine
argument_list|(
name|p
argument_list|,
literal|60
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|57
index|]
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|58
index|]
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|59
index|]
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|60
index|]
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLineNullInLine
name|void
name|tst_QFile
operator|::
name|readLineNullInLine
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"nullinline.txt"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"nullinline.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"linewith\0null\nanotherline\0withnull\n\0\nnull\0"
argument_list|,
literal|42
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"linewith\0null\n"
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"anotherline\0withnull\n"
argument_list|,
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"\0\n"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"null\0"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAll_data
name|void
name|tst_QFile
operator|::
name|readAll_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"textMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TextMode unixfile"
argument_list|)
operator|<<
literal|true
operator|<<
name|m_testFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BinaryMode unixfile"
argument_list|)
operator|<<
literal|false
operator|<<
name|m_testFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TextMode dosfile"
argument_list|)
operator|<<
literal|true
operator|<<
name|m_dosFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BinaryMode dosfile"
argument_list|)
operator|<<
literal|false
operator|<<
name|m_dosFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TextMode bigfile"
argument_list|)
operator|<<
literal|true
operator|<<
name|m_testSourceFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BinaryMode  bigfile"
argument_list|)
operator|<<
literal|false
operator|<<
name|m_testSourceFile
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
argument_list|(
name|m_testSourceFile
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|64
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAll
name|void
name|tst_QFile
operator|::
name|readAll
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|textMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|textMode
condition|)
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|Text
operator||
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|a
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|pos
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|bytesAvailable
argument_list|()
operator|>
literal|7
argument_list|)
expr_stmt|;
name|QByteArray
name|b
init|=
name|file
operator|.
name|read
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|char
name|x
decl_stmt|;
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|x
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|file
operator|.
name|read
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAllBuffer
name|void
name|tst_QFile
operator|::
name|readAllBuffer
parameter_list|()
block|{
name|QString
name|fileName
init|=
name|QLatin1String
argument_list|(
literal|"readAllBuffer.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QFile
name|reader
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QByteArray
name|data1
argument_list|(
literal|"This is arguably a very simple text."
argument_list|)
decl_stmt|;
name|QByteArray
name|data2
argument_list|(
literal|"This is surely not as simple a test."
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reader
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|data1
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|data1
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|writer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|result
decl_stmt|;
name|result
operator|=
name|reader
operator|.
name|read
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|data2
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|data2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// new data, old version buffered in reader
name|QCOMPARE
argument_list|(
name|writer
operator|.
name|write
argument_list|(
name|data2
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|data2
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// new data, unbuffered in reader
name|result
operator|+=
name|reader
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|data1
operator|+
name|data2
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
end_if
begin_function
DECL|function|readAllStdin
name|void
name|tst_QFile
operator|::
name|readAllStdin
parameter_list|()
block|{
name|QByteArray
name|lotsOfData
argument_list|(
literal|1024
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
comment|// 10 megs
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_stdinProcessDir
operator|+
name|QStringLiteral
argument_list|(
literal|"/stdinprocess"
argument_list|)
argument_list|,
name|QStringList
argument_list|(
name|QStringLiteral
argument_list|(
literal|"all"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|lotsOfData
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesToWrite
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|process
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|lotsOfData
operator|.
name|size
argument_list|()
operator|*
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLineStdin
name|void
name|tst_QFile
operator|::
name|readLineStdin
parameter_list|()
block|{
name|QByteArray
name|lotsOfData
argument_list|(
literal|1024
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
comment|// 10 megs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lotsOfData
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|32
operator|)
operator|==
literal|31
condition|)
name|lotsOfData
index|[
name|i
index|]
operator|=
literal|'\n'
expr_stmt|;
else|else
name|lotsOfData
index|[
name|i
index|]
operator|=
name|char
argument_list|(
literal|'0'
operator|+
name|i
operator|%
literal|32
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_stdinProcessDir
operator|+
name|QStringLiteral
argument_list|(
literal|"/stdinprocess"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"line"
argument_list|)
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|Text
operator||
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|lotsOfData
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesToWrite
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|array
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
name|lotsOfData
operator|.
name|size
argument_list|()
operator|*
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|i
operator|%
literal|32
operator|)
operator|==
literal|31
condition|)
name|QCOMPARE
argument_list|(
name|char
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|char
argument_list|(
name|array
index|[
name|i
index|]
argument_list|)
argument_list|,
name|char
argument_list|(
literal|'0'
operator|+
name|i
operator|%
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readLineStdin_lineByLine
name|void
name|tst_QFile
operator|::
name|readLineStdin_lineByLine
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_stdinProcessDir
operator|+
name|QStringLiteral
argument_list|(
literal|"/stdinprocess"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"line"
argument_list|)
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|Text
operator||
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
block|{
name|QByteArray
name|line
init|=
literal|"line "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|j
argument_list|)
operator|+
literal|"\n"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|write
argument_list|(
name|line
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|line
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|process
operator|.
name|bytesAvailable
argument_list|()
operator|==
literal|0
condition|)
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|readAll
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|text
name|void
name|tst_QFile
operator|::
name|text
parameter_list|()
block|{
comment|// dosfile.txt is a binary CRLF file
name|QFile
name|file
argument_list|(
name|m_dosFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|Text
operator||
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"/dev/system/root     /                    reiserfs   acl,user_xattr        1 1\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"/dev/sda1            /boot                ext3       acl,user_xattr        1 2\n"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|ungetChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|file
operator|.
name|ungetChar
argument_list|(
literal|'2'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"2\n"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|missingEndOfLine
name|void
name|tst_QFile
operator|::
name|missingEndOfLine
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|m_noEndOfLineFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nlines
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
operator|++
name|nlines
expr_stmt|;
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|nlines
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBlock
name|void
name|tst_QFile
operator|::
name|readBlock
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
name|char
name|p
index|[
literal|256
index|]
decl_stmt|;
name|length
operator|=
name|f
operator|.
name|read
argument_list|(
name|p
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|length
argument_list|,
literal|245
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|59
index|]
argument_list|,
literal|'D'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|178
index|]
argument_list|,
literal|'T'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
index|[
literal|199
index|]
argument_list|,
literal|'l'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getch
name|void
name|tst_QFile
operator|::
name|getch
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|59
condition|)
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'D'
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|245
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ungetChar
name|void
name|tst_QFile
operator|::
name|ungetChar
parameter_list|()
block|{
name|QFile
name|f
argument_list|(
name|m_testFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|array
init|=
name|f
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"----------------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|f
operator|.
name|ungetChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|array
operator|=
name|f
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|f
operator|.
name|ungetChar
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|f
operator|.
name|ungetChar
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|f
operator|.
name|ungetChar
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|array
operator|=
name|f
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"--\n"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"genfile.txt"
argument_list|)
expr_stmt|;
name|QFile
name|out
argument_list|(
literal|"genfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|out
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"123"
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"123"
argument_list|)
expr_stmt|;
name|out
operator|.
name|ungetChar
argument_list|(
literal|'3'
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|out
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"124"
argument_list|)
expr_stmt|;
name|out
operator|.
name|ungetChar
argument_list|(
literal|'4'
argument_list|)
expr_stmt|;
name|out
operator|.
name|ungetChar
argument_list|(
literal|'2'
argument_list|)
expr_stmt|;
name|out
operator|.
name|ungetChar
argument_list|(
literal|'1'
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|3
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|read
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|1
index|]
argument_list|,
literal|'2'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
literal|2
index|]
argument_list|,
literal|'4'
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|driveLetters
name|QString
name|driveLetters
parameter_list|()
block|{
name|wchar_t
name|volumeName
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|wchar_t
name|path
index|[
name|MAX_PATH
index|]
decl_stmt|;
specifier|const
name|HANDLE
name|h
init|=
name|FindFirstVolumeW
argument_list|(
name|volumeName
argument_list|,
name|MAX_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|==
name|INVALID_HANDLE_VALUE
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|result
decl_stmt|;
do|do
block|{
if|if
condition|(
name|GetVolumePathNamesForVolumeNameW
argument_list|(
name|volumeName
argument_list|,
name|path
argument_list|,
name|MAX_PATH
argument_list|,
name|NULL
argument_list|)
condition|)
block|{
if|if
condition|(
name|path
index|[
literal|1
index|]
operator|==
literal|L'
expr|:'
condition|)
name|result
operator|.
name|append
argument_list|(
name|QChar
argument_list|(
name|path
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|FindNextVolumeW
argument_list|(
name|h
argument_list|,
name|volumeName
argument_list|,
name|MAX_PATH
argument_list|)
condition|)
do|;
name|FindVolumeClose
argument_list|(
name|h
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|invalidDriveLetter
specifier|static
specifier|inline
name|QChar
name|invalidDriveLetter
parameter_list|()
block|{
specifier|const
name|QString
name|drives
init|=
name|driveLetters
argument_list|()
operator|.
name|toLower
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|c
init|=
literal|'a'
init|;
name|c
operator|<=
literal|'z'
condition|;
operator|++
name|c
control|)
if|if
condition|(
operator|!
name|drives
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
return|return
name|QLatin1Char
argument_list|(
name|c
argument_list|)
return|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// All drive letters used?!
return|return
name|QChar
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_function
DECL|function|invalidFile_data
name|void
name|tst_QFile
operator|::
name|invalidFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"x11"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"qwe//"
argument_list|)
expr_stmt|;
else|#
directive|else
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"colon2"
argument_list|)
operator|<<
name|invalidDriveLetter
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":ail:invalid"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"colon3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":failinvalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forwardslash"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail/invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"asterisk"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail*invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"questionmark"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail?invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"quote"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail\"invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail<invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail>invalid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pipe"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fail|invalid"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|invalidFile
name|void
name|tst_QFile
operator|::
name|invalidFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createFile
name|void
name|tst_QFile
operator|::
name|createFile
parameter_list|()
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"createme.txt"
argument_list|)
condition|)
name|QFile
operator|::
name|remove
argument_list|(
literal|"createme.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"createme.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
literal|"createme.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"createme.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QFile
operator|::
name|append
parameter_list|()
block|{
specifier|const
name|QString
name|name
argument_list|(
literal|"appendme.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|name
argument_list|)
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|putChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|Append
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|pos
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|f
operator|.
name|putChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|permissions_data
name|void
name|tst_QFile
operator|::
name|permissions_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"perms"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|applicationFilePath
argument_list|()
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|ExeUser
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|m_testSourceFile
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|ReadUser
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readonly"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"readonlyfile"
argument_list|)
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|WriteUser
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|ReadUser
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|ReadUser
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|WriteUser
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource3"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|uint
argument_list|(
name|QFile
operator|::
name|ExeUser
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|permissions
name|void
name|tst_QFile
operator|::
name|permissions
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|create
argument_list|)
expr_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|QFile
name|fc
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fc
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fc
operator|.
name|write
argument_list|(
literal|"hello\n"
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QFile
name|f
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|memberResult
init|=
name|f
operator|.
name|permissions
argument_list|()
operator|&
name|perms
decl_stmt|;
name|QFile
operator|::
name|Permissions
name|staticResult
init|=
name|QFile
operator|::
name|permissions
argument_list|(
name|file
argument_list|)
operator|&
name|perms
decl_stmt|;
if|if
condition|(
name|create
condition|)
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|qt_ntfs_permission_lookup
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|"readonly"
argument_list|,
literal|"QTBUG-25630"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"readonly"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// in case accidentally run as root
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QCOMPARE
argument_list|(
operator|(
name|memberResult
operator|==
name|QFile
operator|::
name|Permissions
argument_list|(
name|perms
argument_list|)
operator|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|staticResult
operator|==
name|QFile
operator|::
name|Permissions
argument_list|(
name|perms
argument_list|)
operator|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_function
DECL|function|permissionsNtfs_data
name|void
name|tst_QFile
operator|::
name|permissionsNtfs_data
parameter_list|()
block|{
name|permissions_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|permissionsNtfs
name|void
name|tst_QFile
operator|::
name|permissionsNtfs
parameter_list|()
block|{
name|QScopedValueRollback
argument_list|<
name|int
argument_list|>
name|ntfsMode
argument_list|(
name|qt_ntfs_permission_lookup
argument_list|)
decl_stmt|;
name|qt_ntfs_permission_lookup
operator|++
expr_stmt|;
name|permissions
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setPermissions
name|void
name|tst_QFile
operator|::
name|setPermissions
parameter_list|()
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"createme.txt"
argument_list|)
condition|)
name|QFile
operator|::
name|remove
argument_list|(
literal|"createme.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"createme.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
literal|"createme.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|putChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|Permissions
name|perms
argument_list|(
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ReadUser
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|setPermissions
argument_list|(
name|perms
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|f
operator|.
name|permissions
argument_list|()
operator|&
name|perms
operator|)
operator|==
name|perms
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QFile
operator|::
name|copy
parameter_list|()
block|{
name|QFile
operator|::
name|setPermissions
argument_list|(
literal|"tst_qfile_copy.cpp"
argument_list|,
name|QFile
operator|::
name|WriteUser
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"tst_qfile_copy.cpp"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|m_testSourceFile
argument_list|,
literal|"tst_qfile_copy.cpp"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|in1
argument_list|(
name|m_testSourceFile
argument_list|)
decl_stmt|,
name|in2
argument_list|(
literal|"tst_qfile_copy.cpp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|in1
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|in2
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data1
init|=
name|in1
operator|.
name|readAll
argument_list|()
decl_stmt|,
name|data2
init|=
name|in2
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data1
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"main_copy.cpp"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|copy
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyAfterFail
name|void
name|tst_QFile
operator|::
name|copyAfterFail
parameter_list|()
block|{
name|QFile
name|file1
argument_list|(
literal|"file-to-be-copied.txt"
argument_list|)
decl_stmt|;
name|QFile
name|file2
argument_list|(
literal|"existing-file.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|file2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"copied-file-1.txt"
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"copied-file-2.txt"
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file1
operator|.
name|copy
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|CopyError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|copy
argument_list|(
literal|"copied-file-1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file1
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file1
operator|.
name|copy
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|CopyError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|copy
argument_list|(
literal|"copied-file-2.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file1
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file1
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"copied-file-1.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"copied-file-2.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyRemovesTemporaryFile
name|void
name|tst_QFile
operator|::
name|copyRemovesTemporaryFile
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|newName
argument_list|(
name|QLatin1String
argument_list|(
literal|"copyRemovesTemporaryFile"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|m_forCopyingFile
argument_list|,
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|QStringLiteral
argument_list|(
literal|"qt_temp.XXXXXX"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyShouldntOverwrite
name|void
name|tst_QFile
operator|::
name|copyShouldntOverwrite
parameter_list|()
block|{
comment|// Copy should not overwrite existing files.
name|QFile
operator|::
name|remove
argument_list|(
literal|"tst_qfile.cpy"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|m_testSourceFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|copy
argument_list|(
literal|"tst_qfile.cpy"
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
name|QFile
operator|::
name|setPermissions
argument_list|(
literal|"tst_qfile.cpy"
argument_list|,
name|QFile
operator|::
name|WriteOther
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|copy
argument_list|(
literal|"tst_qfile.cpy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyFallback
name|void
name|tst_QFile
operator|::
name|copyFallback
parameter_list|()
block|{
comment|// Using a resource file to trigger QFile::copy's fallback handling
name|QFile
name|file
argument_list|(
literal|":/copy-fallback.qrc"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
literal|"test precondition"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|,
literal|"test precondition"
argument_list|)
expr_stmt|;
comment|// Fallback copy of closed file.
name|QVERIFY
argument_list|(
name|file
operator|.
name|copy
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|// Need to reset permissions on Windows to be able to delete
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
literal|"file-copy-destination.txt"
argument_list|,
name|QFile
operator|::
name|WriteOther
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Need to reset permissions on Windows to be able to delete
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
literal|"file-copy-destination.txt"
argument_list|,
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Fallback copy of open file.
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|copy
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-copy-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|setPermissions
argument_list|(
literal|"file-copy-destination.txt"
argument_list|,
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<objbase.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINPHONE
end_ifndef
begin_include
include|#
directive|include
file|<shlobj.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|getWorkingDirectoryForLink
specifier|static
name|QString
name|getWorkingDirectoryForLink
parameter_list|(
specifier|const
name|QString
modifier|&
name|linkFileName
parameter_list|)
block|{
name|bool
name|neededCoInit
init|=
literal|false
decl_stmt|;
name|QString
name|ret
decl_stmt|;
name|IShellLink
modifier|*
name|psl
decl_stmt|;
name|HRESULT
name|hres
init|=
name|CoCreateInstance
argument_list|(
name|CLSID_ShellLink
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|IID_IShellLink
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|psl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hres
operator|==
name|CO_E_NOTINITIALIZED
condition|)
block|{
comment|// COM was not initialized
name|neededCoInit
operator|=
literal|true
expr_stmt|;
name|CoInitialize
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
name|hres
operator|=
name|CoCreateInstance
argument_list|(
name|CLSID_ShellLink
argument_list|,
name|NULL
argument_list|,
name|CLSCTX_INPROC_SERVER
argument_list|,
name|IID_IShellLink
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|psl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
comment|// Get pointer to the IPersistFile interface.
name|IPersistFile
modifier|*
name|ppf
decl_stmt|;
name|hres
operator|=
name|psl
operator|->
name|QueryInterface
argument_list|(
name|IID_IPersistFile
argument_list|,
operator|(
name|LPVOID
operator|*
operator|)
operator|&
name|ppf
argument_list|)
expr_stmt|;
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|hres
operator|=
name|ppf
operator|->
name|Load
argument_list|(
operator|(
name|LPOLESTR
operator|)
name|linkFileName
operator|.
name|utf16
argument_list|()
argument_list|,
name|STGM_READ
argument_list|)
expr_stmt|;
comment|//The original path of the link is retrieved. If the file/folder
comment|//was moved, the return value still have the old path.
if|if
condition|(
name|SUCCEEDED
argument_list|(
name|hres
argument_list|)
condition|)
block|{
name|wchar_t
name|szGotPath
index|[
name|MAX_PATH
index|]
decl_stmt|;
if|if
condition|(
name|psl
operator|->
name|GetWorkingDirectory
argument_list|(
name|szGotPath
argument_list|,
name|MAX_PATH
argument_list|)
operator|==
name|NOERROR
condition|)
name|ret
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|szGotPath
argument_list|)
expr_stmt|;
block|}
name|ppf
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
name|psl
operator|->
name|Release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|neededCoInit
condition|)
block|{
name|CoUninitialize
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|link
name|void
name|tst_QFile
operator|::
name|link
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLink.lnk"
argument_list|)
expr_stmt|;
name|QFileInfo
name|info1
argument_list|(
name|m_testSourceFile
argument_list|)
decl_stmt|;
name|QString
name|referenceTarget
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|info1
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
name|m_testSourceFile
argument_list|,
literal|"myLink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|info2
argument_list|(
literal|"myLink.lnk"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info2
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info2
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|referenceTarget
argument_list|)
expr_stmt|;
name|QFile
name|link
argument_list|(
literal|"myLink.lnk"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|link
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|link
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|referenceTarget
argument_list|)
expr_stmt|;
name|link
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFile
operator|::
name|symLinkTarget
argument_list|(
literal|"myLink.lnk"
argument_list|)
argument_list|,
name|referenceTarget
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|QString
name|wd
init|=
name|getWorkingDirectoryForLink
argument_list|(
name|info2
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|wd
argument_list|)
argument_list|,
name|QDir
operator|::
name|cleanPath
argument_list|(
name|info1
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|linkToDir
name|void
name|tst_QFile
operator|::
name|linkToDir
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
name|QFileInfo
name|info1
argument_list|(
literal|"myDir"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"myDir"
argument_list|,
literal|"myLinkToDir.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|info2
argument_list|(
literal|"myLinkToDir.lnk"
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
operator|(
name|defined
name|Q_OS_HPUX
operator|&&
name|defined
argument_list|(
name|__ia64
argument_list|)
operator|)
comment|// absurd HP-UX filesystem bug on gravlaks - checking if a symlink
comment|// resolves or not alters the file system to make the broken symlink
comment|// later fail...
name|QVERIFY
argument_list|(
name|info2
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|info2
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|info1
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|info2
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePathLinkToRelativePath
name|void
name|tst_QFile
operator|::
name|absolutePathLinkToRelativePath
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"myDir/test.txt"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"myDir/myLink.lnk"
argument_list|)
expr_stmt|;
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
literal|"myDir"
argument_list|)
expr_stmt|;
name|QFile
argument_list|(
literal|"myDir/test.txt"
argument_list|)
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"test.txt"
argument_list|,
literal|"myDir/myLink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"myDir/test.txt"
argument_list|,
literal|"myDir/myLink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Symlinking using relative paths is currently different on Windows and Unix"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|QFile
argument_list|(
name|QFileInfo
argument_list|(
literal|"myDir/myLink.lnk"
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
operator|.
name|symLinkTarget
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|QFileInfo
argument_list|(
literal|"myDir/test.txt"
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBrokenLink
name|void
name|tst_QFile
operator|::
name|readBrokenLink
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"myLink2.lnk"
argument_list|)
expr_stmt|;
name|QFileInfo
name|info1
argument_list|(
literal|"file12"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"file12"
argument_list|,
literal|"myLink2.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|info2
argument_list|(
literal|"myLink2.lnk"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info2
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info2
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|info1
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|info2
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|link
argument_list|(
literal|"ole/.."
argument_list|,
literal|"myLink2.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
literal|"myLink2.lnk"
argument_list|)
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readTextFile_data
name|void
name|tst_QFile
operator|::
name|readTextFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a\\rb"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\rb"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\r\nWorld\r\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\nWorld\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines no endline"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\r\nWorld"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\nWorld"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readTextFile
name|void
name|tst_QFile
operator|::
name|readTextFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QFile
name|winfile
argument_list|(
literal|"winfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|winfile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|winfile
operator|.
name|write
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|winfile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|winfile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|winfile
operator|.
name|readAll
argument_list|()
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|winfile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|winfile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|winfile
operator|.
name|readAll
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readTextFile2
name|void
name|tst_QFile
operator|::
name|readTextFile2
parameter_list|()
block|{
block|{
name|QFile
name|file
argument_list|(
name|m_testLogFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|read
argument_list|(
literal|4097
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|m_testLogFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|read
argument_list|(
literal|4097
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeTextFile_data
name|void
name|tst_QFile
operator|::
name|writeTextFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a\\rb"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"a\rb"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r\\n"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\\r"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\r"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines crlf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\r\nWorld\r\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines crlf no endline"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\r\nWorld"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines lf"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\nWorld\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twolines lf no endline"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello\nWorld"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mixed"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"this\nis\r\na\nmixed\r\nfile\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeTextFile
name|void
name|tst_QFile
operator|::
name|writeTextFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"textfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Truncate
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|out
init|=
name|in
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|out
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|"\r\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|in
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|largeUncFileSupport
name|void
name|tst_QFile
operator|::
name|largeUncFileSupport
parameter_list|()
block|{
name|qint64
name|size
init|=
name|Q_INT64_C
argument_list|(
literal|8589934592
argument_list|)
decl_stmt|;
name|qint64
name|dataOffset
init|=
name|Q_INT64_C
argument_list|(
literal|8589914592
argument_list|)
decl_stmt|;
name|QByteArray
name|knownData
argument_list|(
literal|"LargeFile content at offset 8589914592"
argument_list|)
decl_stmt|;
name|QString
name|largeFile
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testsharelargefile/file.bin"
argument_list|)
decl_stmt|;
block|{
comment|// 1) Native file handling.
name|QFile
name|file
argument_list|(
name|largeFile
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
name|dataOffset
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
name|knownData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|knownData
argument_list|)
expr_stmt|;
block|}
block|{
comment|// 2) stdlib file handling.
name|QFile
name|file
decl_stmt|;
name|FILE
modifier|*
name|fh
init|=
name|fopen
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|largeFile
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|fh
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
name|dataOffset
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
name|knownData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|knownData
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|fh
argument_list|)
expr_stmt|;
block|}
block|{
comment|// 3) stdio file handling.
name|QFile
name|file
decl_stmt|;
name|FILE
modifier|*
name|fh
init|=
name|fopen
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|largeFile
argument_list|)
operator|.
name|data
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|int
name|fd
init|=
name|int
argument_list|(
name|_fileno
argument_list|(
name|fh
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
name|dataOffset
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
name|knownData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|knownData
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|fh
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|flush
name|void
name|tst_QFile
operator|::
name|flush
parameter_list|()
block|{
name|QString
name|fileName
argument_list|(
literal|"stdfile.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"abc"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Append
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"def"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"stdfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bufferedRead
name|void
name|tst_QFile
operator|::
name|bufferedRead
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"stdfile.txt"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"stdfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"abcdef"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|FILE
modifier|*
name|stdFile
init|=
name|fopen
argument_list|(
operator|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
literal|"/stdfile.txt"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
else|#
directive|else
name|FILE
modifier|*
name|stdFile
init|=
name|fopen
argument_list|(
literal|"stdfile.txt"
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|stdFile
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|fread
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|stdFile
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|ftell
argument_list|(
name|stdFile
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|stdFile
argument_list|,
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qlonglong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qlonglong
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fclose
argument_list|(
name|stdFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_function
DECL|function|isSequential
name|void
name|tst_QFile
operator|::
name|isSequential
parameter_list|()
block|{
name|QFile
name|zero
argument_list|(
literal|"/dev/null"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|zero
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|zero
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|encodeName
name|void
name|tst_QFile
operator|::
name|encodeName
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|QFile
operator|::
name|encodeName
argument_list|(
name|QString
operator|::
name|null
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|truncate
name|void
name|tst_QFile
operator|::
name|truncate
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
literal|"truncate.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|200
argument_list|,
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
operator|(
name|i
condition|?
name|QFile
operator|::
name|WriteOnly
else|:
name|QFile
operator|::
name|ReadWrite
operator|)
operator||
name|QFile
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|100
argument_list|,
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|100
argument_list|,
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|seekToPos
name|void
name|tst_QFile
operator|::
name|seekToPos
parameter_list|()
block|{
block|{
name|QFile
name|file
argument_list|(
literal|"seekToPos.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"a\r\nb\r\nc\r\n"
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|QFile
name|file
argument_list|(
literal|"seekToPos.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seekAfterEndOfFile
name|void
name|tst_QFile
operator|::
name|seekAfterEndOfFile
parameter_list|()
block|{
name|QLatin1String
name|filename
argument_list|(
literal|"seekAfterEof.dat"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"ijkl"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"efgh"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"----"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|contents
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|left
argument_list|(
literal|12
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"abcdefghijkl"
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|//bytes 12-15 are uninitialised so we don't care what they read as.
name|QCOMPARE
argument_list|(
name|contents
operator|.
name|mid
argument_list|(
literal|16
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"----"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|FILEReadWrite
name|void
name|tst_QFile
operator|::
name|FILEReadWrite
parameter_list|()
block|{
comment|// Tests modifying a file. First creates it then reads in 4 bytes and then overwrites these
comment|// 4 bytes with new values. At the end check to see the file contains the new values.
name|QFile
operator|::
name|remove
argument_list|(
literal|"FILEReadWrite.txt"
argument_list|)
expr_stmt|;
comment|// create test file
block|{
name|QFile
name|f
argument_list|(
literal|"FILEReadWrite.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|f
argument_list|)
decl_stmt|;
name|qint8
name|c
init|=
literal|0
decl_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|1
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|2
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|3
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|4
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|5
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|6
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|7
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|8
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|9
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|10
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|c
operator|=
literal|11
expr_stmt|;
name|ds
operator|<<
name|c
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|FILE
modifier|*
name|fp
init|=
name|fopen
argument_list|(
name|qPrintable
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
literal|"\\FILEReadWrite.txt"
argument_list|)
argument_list|,
literal|"r+b"
argument_list|)
decl_stmt|;
else|#
directive|else
name|FILE
modifier|*
name|fp
init|=
name|fopen
argument_list|(
literal|"FILEReadWrite.txt"
argument_list|,
literal|"r+b"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|fp
argument_list|)
expr_stmt|;
name|QFile
name|file
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|fp
argument_list|,
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|sfile
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|qint8
name|var1
decl_stmt|,
name|var2
decl_stmt|,
name|var3
decl_stmt|,
name|var4
decl_stmt|;
while|while
condition|(
operator|!
name|sfile
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|qint64
name|base
init|=
name|file
operator|.
name|pos
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|0
argument_list|)
expr_stmt|;
name|sfile
operator|>>
name|var1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|1
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// flushing should not change the base
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sfile
operator|>>
name|var2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|2
argument_list|)
expr_stmt|;
name|sfile
operator|>>
name|var3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|3
argument_list|)
expr_stmt|;
name|sfile
operator|>>
name|var4
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|4
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
name|file
operator|.
name|pos
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
comment|// Move it back 4, for we are going to write new values based on old ones
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|0
argument_list|)
expr_stmt|;
name|sfile
operator|<<
name|qint8
argument_list|(
name|var1
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|1
argument_list|)
expr_stmt|;
name|sfile
operator|<<
name|qint8
argument_list|(
name|var2
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|2
argument_list|)
expr_stmt|;
name|sfile
operator|<<
name|qint8
argument_list|(
name|var3
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|3
argument_list|)
expr_stmt|;
name|sfile
operator|<<
name|qint8
argument_list|(
name|var4
operator|+
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|base
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|fclose
argument_list|(
name|fp
argument_list|)
expr_stmt|;
comment|// check modified file
block|{
name|QFile
name|f
argument_list|(
literal|"FILEReadWrite.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|ds
argument_list|(
operator|&
name|f
argument_list|)
decl_stmt|;
name|qint8
name|c
init|=
literal|0
decl_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|5
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|6
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|7
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|8
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|9
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|10
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|11
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|12
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|13
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|14
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|15
argument_list|)
expr_stmt|;
name|ds
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
operator|(
name|qint8
operator|)
literal|16
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/* #include<qglobal.h> #define BUFFSIZE 1 #define FILESIZE   0x10000000f void tst_QFile::largeFileSupport() { #ifdef Q_OS_SOLARIS     QSKIP("Solaris does not support statfs"); #else     qlonglong sizeNeeded = 2147483647;     sizeNeeded *= 2;     sizeNeeded += 1024;     qlonglong freespace = qlonglong(0); #ifdef Q_OS_WIN     _ULARGE_INTEGER free;     if (::GetDiskFreeSpaceEx((wchar_t*)QDir::currentPath().utf16(),&free, 0, 0))         freespace = free.QuadPart;     if (freespace != 0) { #elif defined(Q_OS_IRIX)     struct statfs info;     if (statfs(QDir::currentPath().local8Bit(),&info, sizeof(struct statfs), 0) == 0) {         freespace = qlonglong(info.f_bfree * info.f_bsize); #else     struct statfs info;     if (statfs(const_cast<char *>(QDir::currentPath().toLocal8Bit().constData()),&info) == 0) {         freespace = qlonglong(info.f_bavail * info.f_bsize); #endif         if (freespace> sizeNeeded) {             QFile bigFile("bigfile");             if (bigFile.open(QFile::ReadWrite)) {                 char c[BUFFSIZE] = {'a'};                 QVERIFY(bigFile.write(c, BUFFSIZE) == BUFFSIZE);                 qlonglong oldPos = bigFile.pos();                 QVERIFY(bigFile.resize(sizeNeeded));                 QCOMPARE(oldPos, bigFile.pos());                 QVERIFY(bigFile.seek(sizeNeeded - BUFFSIZE));                 QVERIFY(bigFile.write(c, BUFFSIZE) == BUFFSIZE);                  bigFile.close();                 if (bigFile.open(QFile::ReadOnly)) {                     QVERIFY(bigFile.read(c, BUFFSIZE) == BUFFSIZE);                     int i = 0;                     for (i=0; i<BUFFSIZE; i++)                         QCOMPARE(c[i], 'a');                     QVERIFY(bigFile.seek(sizeNeeded - BUFFSIZE));                     QVERIFY(bigFile.read(c, BUFFSIZE) == BUFFSIZE);                     for (i=0; i<BUFFSIZE; i++)                         QCOMPARE(c[i], 'a');                     bigFile.close();                     QVERIFY(bigFile.remove());                 } else {                     QVERIFY(bigFile.remove());                     QFAIL("Could not reopen file");                 }             } else {                 QFAIL("Could not open file");             }         } else {             QSKIP("Not enough space to run test");         }     } else {         QFAIL("Could not determin disk space");     } #endif } */
end_comment
begin_function
DECL|function|i18nFileName_data
name|void
name|tst_QFile
operator|::
name|i18nFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"01"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"xxxxxxx.txt"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|i18nFileName
name|void
name|tst_QFile
operator|::
name|i18nFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|fileName
operator|<<
name|endl
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|.
name|setCodec
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|QString
name|line
init|=
name|ts
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|longFileName_data
name|void
name|tst_QFile
operator|::
name|longFileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"16 chars"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileName.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"52 chars"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"148 chars"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"244 chars"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"244 chars to absolutepath"
argument_list|)
operator|<<
name|QFileInfo
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
comment|/* needs to be put on a windows 2000> test machine   QTest::newRow( "244 chars on UNC" )<<  QString::fromLatin1("//arsia/D/troll/tmp/longFileNamelongFileNamelongFileNamelongFileName"                                                      "longFileNamelongFileNamelongFileNamelongFileName"                                                      "longFileNamelongFileNamelongFileNamelongFileName"                                                      "longFileNamelongFileNamelongFileNamelongFileName"                                                      "longFileNamelongFileNamelongFileNamelongFileName.txt");*/
block|}
end_function
begin_function
DECL|function|longFileName
name|void
name|tst_QFile
operator|::
name|longFileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"244 chars"
argument_list|,
literal|"Full pathname must be less than 260 chars"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"244 chars to absolutepath"
argument_list|,
literal|"Full pathname must be less than 260 chars"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
name|fileName
operator|<<
name|endl
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|line
init|=
name|ts
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QString
name|newName
init|=
name|fileName
operator|+
name|QLatin1String
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|fileName
argument_list|,
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|newName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|line
init|=
name|ts
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|rename
argument_list|(
name|fileName
argument_list|,
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|newName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|line
init|=
name|ts
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_class
DECL|class|MyEngine
class|class
name|MyEngine
super|:
specifier|public
name|QAbstractFileEngine
block|{
public|public:
DECL|function|MyEngine
name|MyEngine
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|number
operator|=
name|n
expr_stmt|;
block|}
DECL|function|~MyEngine
specifier|virtual
name|~
name|MyEngine
parameter_list|()
block|{}
DECL|function|setFileName
name|void
name|setFileName
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{}
DECL|function|open
name|bool
name|open
parameter_list|(
name|QIODevice
operator|::
name|OpenMode
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|close
name|bool
name|close
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|flush
name|bool
name|flush
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|size
name|qint64
name|size
parameter_list|()
specifier|const
block|{
return|return
literal|123
operator|+
name|number
return|;
block|}
DECL|function|at
name|qint64
name|at
parameter_list|()
specifier|const
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|function|seek
name|bool
name|seek
parameter_list|(
name|qint64
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|isSequential
name|bool
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|read
name|qint64
name|read
parameter_list|(
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|function|write
name|qint64
name|write
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|qint64
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
DECL|function|remove
name|bool
name|remove
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|copy
name|bool
name|copy
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|rename
name|bool
name|rename
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|link
name|bool
name|link
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|mkdir
name|bool
name|mkdir
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|bool
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|rmdir
name|bool
name|rmdir
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|,
name|bool
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|setSize
name|bool
name|setSize
parameter_list|(
name|qint64
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|entryList
name|QStringList
name|entryList
parameter_list|(
name|QDir
operator|::
name|Filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QStringList
argument_list|()
return|;
block|}
DECL|function|caseSensitive
name|bool
name|caseSensitive
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|isRelativePath
name|bool
name|isRelativePath
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|fileFlags
name|FileFlags
name|fileFlags
parameter_list|(
name|FileFlags
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|chmod
name|bool
name|chmod
parameter_list|(
name|uint
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|fileName
name|QString
name|fileName
parameter_list|(
name|FileName
parameter_list|)
specifier|const
block|{
return|return
name|name
return|;
block|}
DECL|function|ownerId
name|uint
name|ownerId
parameter_list|(
name|FileOwner
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|owner
name|QString
name|owner
parameter_list|(
name|FileOwner
parameter_list|)
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|fileTime
name|QDateTime
name|fileTime
parameter_list|(
name|FileTime
parameter_list|)
specifier|const
block|{
return|return
name|QDateTime
argument_list|()
return|;
block|}
private|private:
DECL|member|number
name|int
name|number
decl_stmt|;
DECL|member|name
name|QString
name|name
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MyHandler
class|class
name|MyHandler
super|:
specifier|public
name|QAbstractFileEngineHandler
block|{
public|public:
DECL|function|create
specifier|inline
name|QAbstractFileEngine
modifier|*
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|MyEngine
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|MyHandler2
class|class
name|MyHandler2
super|:
specifier|public
name|QAbstractFileEngineHandler
block|{
public|public:
DECL|function|create
specifier|inline
name|QAbstractFileEngine
modifier|*
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|MyEngine
argument_list|(
literal|2
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fileEngineHandler
name|void
name|tst_QFile
operator|::
name|fileEngineHandler
parameter_list|()
block|{
comment|// A file that does not exist has a size of 0.
name|QFile
operator|::
name|remove
argument_list|(
literal|"ole.bull"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"ole.bull"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
comment|// Instantiating our handler will enable the new engine.
name|MyHandler
name|handler
decl_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
literal|"ole.bull"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|124
argument_list|)
argument_list|)
expr_stmt|;
comment|// A new, identical handler should take preference over the last one.
name|MyHandler2
name|handler2
decl_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
literal|"ole.bull"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|125
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_class
DECL|class|MyRecursiveHandler
class|class
name|MyRecursiveHandler
super|:
specifier|public
name|QAbstractFileEngineHandler
block|{
public|public:
DECL|function|create
specifier|inline
name|QAbstractFileEngine
modifier|*
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|":!"
argument_list|)
condition|)
block|{
name|QDir
name|dir
decl_stmt|;
name|QString
name|realFile
init|=
name|QFINDTESTDATA
argument_list|(
name|fileName
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|realFile
argument_list|)
condition|)
return|return
operator|new
name|QFSFileEngine
argument_list|(
name|realFile
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|useQFileInAFileHandler
name|void
name|tst_QFile
operator|::
name|useQFileInAFileHandler
parameter_list|()
block|{
comment|// This test should not dead-lock
name|MyRecursiveHandler
name|handler
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|":!tst_qfile.cpp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getCharFF
name|void
name|tst_QFile
operator|::
name|getCharFF
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"file.txt"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"\xff\xff\xff"
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remove_and_exists
name|void
name|tst_QFile
operator|::
name|remove_and_exists
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"tull_i_grunn.txt"
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
literal|"tull_i_grunn.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|opened
init|=
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|opened
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|QString
argument_list|(
literal|"testing that remove/exists work..."
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeOpenFile
name|void
name|tst_QFile
operator|::
name|removeOpenFile
parameter_list|()
block|{
block|{
comment|// remove an opened, write-only file
name|QFile
operator|::
name|remove
argument_list|(
literal|"remove_unclosed.txt"
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
literal|"remove_unclosed.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|opened
init|=
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|opened
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|QString
argument_list|(
literal|"testing that remove closes the file first..."
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|removed
init|=
name|f
operator|.
name|remove
argument_list|()
decl_stmt|;
comment|// remove should both close and remove the file
name|QVERIFY
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
comment|// remove an opened, read-only file
name|QFile
operator|::
name|remove
argument_list|(
literal|"remove_unclosed.txt"
argument_list|)
expr_stmt|;
comment|// first, write a file that we can remove
block|{
name|QFile
name|f
argument_list|(
literal|"remove_unclosed.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|opened
init|=
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|opened
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|QString
argument_list|(
literal|"testing that remove closes the file first..."
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QFile
name|f
argument_list|(
literal|"remove_unclosed.txt"
argument_list|)
decl_stmt|;
name|bool
name|opened
init|=
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|opened
argument_list|)
expr_stmt|;
name|f
operator|.
name|readAll
argument_list|()
expr_stmt|;
comment|// this used to only fail on FreeBSD (and Mac OS X)
name|QVERIFY
argument_list|(
name|f
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|removed
init|=
name|f
operator|.
name|remove
argument_list|()
decl_stmt|;
comment|// remove should both close and remove the file
name|QVERIFY
argument_list|(
name|removed
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fullDisk
name|void
name|tst_QFile
operator|::
name|fullDisk
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"/dev/full"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"/dev/full doesn't exist on this system"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"foobar"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|ResourceError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|ResourceError
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|0
decl_stmt|;
name|file
operator|.
name|write
argument_list|(
operator|&
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|ResourceError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|ResourceError
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|ResourceError
argument_list|)
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
comment|// Shouldn't inherit write buffer
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// try again without flush:
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"foobar"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|!=
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeLargeDataBlock_data
name|void
name|tst_QFile
operator|::
name|writeLargeDataBlock_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localfile-QFile"
argument_list|)
operator|<<
literal|"./largeblockfile.txt"
operator|<<
operator|(
name|int
operator|)
name|OpenQFile
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localfile-Fd"
argument_list|)
operator|<<
literal|"./largeblockfile.txt"
operator|<<
operator|(
name|int
operator|)
name|OpenFd
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localfile-Stream"
argument_list|)
operator|<<
literal|"./largeblockfile.txt"
operator|<<
operator|(
name|int
operator|)
name|OpenStream
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// Some semi-randomness to avoid collisions.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc file"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/TESTSHAREWRITABLE/largefile-%1-%2.txt"
argument_list|)
operator|.
name|arg
argument_list|(
name|QHostInfo
operator|::
name|localHostName
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
operator|.
name|msec
argument_list|()
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|OpenQFile
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getLargeDataBlock
specifier|static
name|QByteArray
name|getLargeDataBlock
parameter_list|()
block|{
specifier|static
name|QByteArray
name|array
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|int
name|resizeSize
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// WinCE does not have much space
else|#
directive|else
name|int
name|resizeSize
init|=
literal|64
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
endif|#
directive|endif
name|array
operator|.
name|resize
argument_list|(
name|resizeSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|array
index|[
name|i
index|]
operator|=
name|uchar
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
end_function
begin_function
DECL|function|writeLargeDataBlock
name|void
name|tst_QFile
operator|::
name|writeLargeDataBlock
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QByteArray
specifier|const
name|originalData
init|=
name|getLargeDataBlock
argument_list|()
decl_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|,
operator|(
name|FileType
operator|)
name|type
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Couldn't open file for writing: [%1]"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|fileWriteOriginalData
init|=
name|file
operator|.
name|write
argument_list|(
name|originalData
argument_list|)
decl_stmt|;
name|qint64
name|originalDataSize
init|=
operator|(
name|qint64
operator|)
name|originalData
operator|.
name|size
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|fileWriteOriginalData
operator|!=
name|originalDataSize
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Error writing a large data block to [%1]: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"unc file"
argument_list|,
literal|"QTBUG-26906 writing"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|fileWriteOriginalData
argument_list|,
name|originalDataSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|closeFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|readData
decl_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
operator|(
name|FileType
operator|)
name|type
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Couldn't open file for reading: [%1]"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|readData
operator|=
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|readData
operator|!=
name|originalData
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Error reading a large data block from [%1]: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"unc file"
argument_list|,
literal|"QTBUG-26906 reading"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|closeFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|readData
argument_list|,
name|originalData
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readFromWriteOnlyFile
name|void
name|tst_QFile
operator|::
name|readFromWriteOnlyFile
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"writeonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::read: WriteOnly device"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToReadOnlyFile
name|void
name|tst_QFile
operator|::
name|writeToReadOnlyFile
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
literal|"readonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|0
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::write: ReadOnly device"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_NETBSD
argument_list|)
end_if
begin_comment
comment|// This platform have 0-sized virtual files
end_comment
begin_function
DECL|function|virtualFile
name|void
name|tst_QFile
operator|::
name|virtualFile
parameter_list|()
block|{
comment|// test if QFile works with virtual files
name|QString
name|fname
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
name|fname
operator|=
literal|"/proc/self/maps"
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_AIX
argument_list|)
name|fname
operator|=
name|QString
argument_list|(
literal|"/proc/%1/map"
argument_list|)
operator|.
name|arg
argument_list|(
name|getpid
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// defined(Q_OS_FREEBSD) || defined(Q_OS_NETBSD)
name|fname
operator|=
literal|"/proc/curproc/map"
expr_stmt|;
endif|#
directive|endif
comment|// consistency check
name|QFileInfo
name|fi
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isFile
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|size
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// open the file
name|QFile
name|f
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|size
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// read data
name|QByteArray
name|data
init|=
name|f
operator|.
name|read
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
comment|// line-reading
name|data
operator|=
name|f
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// read all:
name|data
operator|=
name|f
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|pos
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// seeking
name|QVERIFY
argument_list|(
name|f
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|pos
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|textFile
name|void
name|tst_QFile
operator|::
name|textFile
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|FILE
modifier|*
name|fs
init|=
operator|::
name|fopen
argument_list|(
operator|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
operator|+
literal|"/writeabletextfile"
operator|)
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|"wt"
argument_list|)
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|FILE
modifier|*
name|fs
init|=
operator|::
name|fopen
argument_list|(
literal|"writeabletextfile"
argument_list|,
literal|"wt"
argument_list|)
decl_stmt|;
else|#
directive|else
name|FILE
modifier|*
name|fs
init|=
operator|::
name|fopen
argument_list|(
literal|"writeabletextfile"
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QFile
name|f
decl_stmt|;
name|QByteArray
name|part1
argument_list|(
literal|"This\nis\na\nfile\nwith\nnewlines\n"
argument_list|)
decl_stmt|;
name|QByteArray
name|part2
argument_list|(
literal|"Add\nsome\nmore\nnewlines\n"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|fs
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|part1
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|part2
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
operator|::
name|fclose
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"writeabletextfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QByteArray
name|expected
init|=
name|part1
operator|+
name|part2
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|expected
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\015\012"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|data
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|renameSourceFile
specifier|static
specifier|const
name|char
name|renameSourceFile
index|[]
init|=
literal|"renamefile"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|rename_data
name|void
name|tst_QFile
operator|::
name|rename_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"destination"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a -> b"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"b"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a -> ."
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> renamefile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> noreadfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|noReadFile
argument_list|)
operator|<<
literal|false
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> /etc/renamefile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"/etc/renamefile"
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> renamedfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"renamedfile"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> .."
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QString
argument_list|(
literal|".."
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"renamefile -> rEnAmEfIlE"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"rEnAmEfIlE"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rename
name|void
name|tst_QFile
operator|::
name|rename
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|content
init|=
name|QByteArrayLiteral
argument_list|(
literal|"testdatacontent"
argument_list|)
operator|+
name|QTime
operator|::
name|currentTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"renamefile -> /etc/renamefile"
argument_list|)
operator|==
literal|0
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
endif|#
directive|endif
name|QSKIP
argument_list|(
literal|"Running this test as root doesn't make sense"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
specifier|const
name|QString
name|sourceFileName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|renameSourceFile
argument_list|)
decl_stmt|;
name|QFile
name|sourceFile
argument_list|(
name|sourceFileName
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|sourceFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|sourceFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|sourceFile
operator|.
name|write
argument_list|(
name|content
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|sourceFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sourceFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
name|file
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|success
init|=
name|file
operator|.
name|rename
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|QVERIFY2
argument_list|(
name|success
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// This will report the source file still existing for a rename changing the case
comment|// on Windows, Mac.
if|if
condition|(
name|sourceFileName
operator|.
name|compare
argument_list|(
name|destination
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|QVERIFY
argument_list|(
operator|!
name|sourceFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|destinationFile
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|destinationFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|destinationFile
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|destinationFile
operator|.
name|readAll
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|destinationFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|RenameError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!  \since 4.5   Some special files have QFile::atEnd() returning true, even though there is  more data available. True for corner cases, as well as some mounts on OS X.   Here, we reproduce that condition by having a QFile sub-class with this  peculiar atEnd() behavior. */
end_comment
begin_function
DECL|function|renameWithAtEndSpecialFile
name|void
name|tst_QFile
operator|::
name|renameWithAtEndSpecialFile
parameter_list|()
specifier|const
block|{
class|class
name|PeculiarAtEnd
super|:
specifier|public
name|QFile
block|{
public|public:
specifier|virtual
name|bool
name|atEnd
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
block|}
class|;
specifier|const
name|QString
name|newName
argument_list|(
name|QLatin1String
argument_list|(
literal|"newName.txt"
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Cleanup, so we're a bit more robust. */
name|QFile
operator|::
name|remove
argument_list|(
name|newName
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|originalName
init|=
name|QStringLiteral
argument_list|(
literal|"forRenaming.txt"
argument_list|)
decl_stmt|;
comment|// Copy from source tree
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|originalName
argument_list|)
condition|)
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|copy
argument_list|(
name|m_forRenamingFile
argument_list|,
name|originalName
argument_list|)
argument_list|)
expr_stmt|;
name|PeculiarAtEnd
name|file
decl_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|originalName
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|rename
argument_list|(
name|newName
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renameFallback
name|void
name|tst_QFile
operator|::
name|renameFallback
parameter_list|()
block|{
comment|// Using a resource file both to trigger QFile::rename's fallback handling
comment|// and as a *read-only* source whose move should fail.
name|QFile
name|file
argument_list|(
literal|":/rename-fallback.qrc"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"file-rename-destination.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|rename
argument_list|(
literal|"file-rename-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-rename-destination.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|renameMultiple
name|void
name|tst_QFile
operator|::
name|renameMultiple
parameter_list|()
block|{
comment|// create the file if it doesn't exist
name|QFile
name|file
argument_list|(
literal|"file-to-be-renamed.txt"
argument_list|)
decl_stmt|;
name|QFile
name|file2
argument_list|(
literal|"existing-file.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
operator|&&
literal|"(test-precondition)"
argument_list|)
expr_stmt|;
comment|// any stale files from previous test failures?
name|QFile
operator|::
name|remove
argument_list|(
literal|"file-renamed-once.txt"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"file-renamed-twice.txt"
argument_list|)
expr_stmt|;
comment|// begin testing
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|rename
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|RenameError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"file-to-be-renamed.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|rename
argument_list|(
literal|"file-renamed-once.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"file-renamed-once.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|rename
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|RenameError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"file-renamed-once.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|rename
argument_list|(
literal|"file-renamed-twice.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"file-renamed-twice.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-to-be-renamed.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-renamed-once.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-renamed-twice.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
name|file2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"file-renamed-twice.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
literal|"existing-file.txt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendAndRead
name|void
name|tst_QFile
operator|::
name|appendAndRead
parameter_list|()
block|{
name|QFile
name|writeFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"appendfile.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|writeFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|readFile
argument_list|(
name|QLatin1String
argument_list|(
literal|"appendfile.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|readFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write to the end of the file, then read that character back, and so on.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
name|writeFile
operator|.
name|putChar
argument_list|(
name|char
argument_list|(
name|i
operator|%
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|readFile
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|char
argument_list|(
name|i
operator|%
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readFile
operator|.
name|pos
argument_list|()
argument_list|,
name|writeFile
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Write blocks and read them back
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|18
condition|;
operator|++
name|j
control|)
block|{
name|writeFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|1
operator|<<
name|j
argument_list|,
literal|'@'
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readFile
operator|.
name|read
argument_list|(
literal|1
operator|<<
name|j
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
operator|<<
name|j
argument_list|)
expr_stmt|;
block|}
name|readFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|miscWithUncPathAsCurrentDir
name|void
name|tst_QFile
operator|::
name|miscWithUncPathAsCurrentDir
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QString
name|current
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"test.pri"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|standarderror
name|void
name|tst_QFile
operator|::
name|standarderror
parameter_list|()
block|{
name|QFile
name|f
decl_stmt|;
name|bool
name|ok
init|=
name|f
operator|.
name|open
argument_list|(
name|stderr
argument_list|,
name|QFile
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handle
name|void
name|tst_QFile
operator|::
name|handle
parameter_list|()
block|{
name|int
name|fd
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QFile
name|file
argument_list|(
name|m_testSourceFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|=
name|int
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|>
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|,
name|fd
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
name|QT_READ
argument_list|(
name|int
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
comment|// test if the QFile and the handle remain in sync
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'*'
argument_list|)
expr_stmt|;
comment|// same, but read from QFile first now
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|fd
operator|=
name|int
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|>
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QCOMPARE
argument_list|(
name|QT_READ
argument_list|(
name|fd
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ssize_t
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|QT_READ
argument_list|(
name|fd
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'*'
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//test round trip of adopted stdio file handle
name|QFile
name|file2
decl_stmt|;
name|FILE
modifier|*
name|fp
init|=
name|fopen
argument_list|(
name|qPrintable
argument_list|(
name|m_testSourceFile
argument_list|)
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
name|file2
operator|.
name|open
argument_list|(
name|fp
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|file2
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|fileno
argument_list|(
name|fp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|file2
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|fileno
argument_list|(
name|fp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|fp
argument_list|)
expr_stmt|;
comment|//test round trip of adopted posix file handle
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QFile
name|file3
decl_stmt|;
name|fd
operator|=
name|QT_OPEN
argument_list|(
name|qPrintable
argument_list|(
name|m_testSourceFile
argument_list|)
argument_list|,
name|QT_OPEN_RDONLY
argument_list|)
expr_stmt|;
name|file3
operator|.
name|open
argument_list|(
name|fd
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|file3
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|,
name|fd
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nativeHandleLeaks
name|void
name|tst_QFile
operator|::
name|nativeHandleLeaks
parameter_list|()
block|{
name|int
name|fd1
decl_stmt|,
name|fd2
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HANDLE
name|handle1
decl_stmt|,
name|handle2
decl_stmt|;
endif|#
directive|endif
block|{
name|QFile
name|file
argument_list|(
literal|"qt_file.tmp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|fd1
operator|=
name|file
operator|.
name|handle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|-
literal|1
operator|!=
name|fd1
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|handle1
operator|=
operator|::
name|CreateFileA
argument_list|(
literal|"qt_file.tmp"
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|OPEN_ALWAYS
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
else|#
directive|else
name|handle1
operator|=
operator|::
name|CreateFile2
argument_list|(
literal|L"qt_file.tmp"
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
name|OPEN_ALWAYS
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|INVALID_HANDLE_VALUE
operator|!=
name|handle1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|CloseHandle
argument_list|(
name|handle1
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|{
name|QFile
name|file
argument_list|(
literal|"qt_file.tmp"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|fd2
operator|=
name|file
operator|.
name|handle
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|-
literal|1
operator|!=
name|fd2
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifndef|#
directive|ifndef
name|Q_OS_WINRT
name|handle2
operator|=
operator|::
name|CreateFileA
argument_list|(
literal|"qt_file.tmp"
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
name|OPEN_ALWAYS
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
else|#
directive|else
name|handle2
operator|=
operator|::
name|CreateFile2
argument_list|(
literal|L"qt_file.tmp"
argument_list|,
name|GENERIC_READ
argument_list|,
literal|0
argument_list|,
name|OPEN_ALWAYS
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|INVALID_HANDLE_VALUE
operator|!=
name|handle2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|CloseHandle
argument_list|(
name|handle2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|fd2
argument_list|,
name|fd1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QCOMPARE
argument_list|(
name|handle2
argument_list|,
name|handle1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readEof_data
name|void
name|tst_QFile
operator|::
name|readEof_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"imode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"buffered"
argument_list|)
operator|<<
name|m_testFile
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unbuffered"
argument_list|)
operator|<<
name|m_testFile
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sequential,buffered"
argument_list|)
operator|<<
literal|"/dev/null"
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sequential,unbuffered"
argument_list|)
operator|<<
literal|"/dev/null"
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readEof
name|void
name|tst_QFile
operator|::
name|readEof
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|imode
argument_list|)
expr_stmt|;
name|QIODevice
operator|::
name|OpenMode
name|mode
init|=
name|QIODevice
operator|::
name|OpenMode
argument_list|(
name|imode
argument_list|)
decl_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|isSequential
init|=
name|file
operator|.
name|isSequential
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSequential
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|char
name|buf
index|[
literal|10
index|]
decl_stmt|;
name|int
name|ret
init|=
name|file
operator|.
name|read
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again to ensure that we get the same result
name|ret
operator|=
name|file
operator|.
name|read
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|isSequential
init|=
name|file
operator|.
name|isSequential
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSequential
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|ret
init|=
name|file
operator|.
name|read
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|ret
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again to ensure that we get the same result
name|ret
operator|=
name|file
operator|.
name|read
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ret
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|isSequential
init|=
name|file
operator|.
name|isSequential
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSequential
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|char
name|buf
index|[
literal|10
index|]
decl_stmt|;
name|int
name|ret
init|=
name|file
operator|.
name|readLine
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again to ensure that we get the same result
name|ret
operator|=
name|file
operator|.
name|readLine
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ret
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|isSequential
init|=
name|file
operator|.
name|isSequential
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSequential
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|ret
init|=
name|file
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ret
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again to ensure that we get the same result
name|ret
operator|=
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ret
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|isSequential
init|=
name|file
operator|.
name|isSequential
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isSequential
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|seek
argument_list|(
literal|245
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again to ensure that we get the same result
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|posAfterFailedStat
name|void
name|tst_QFile
operator|::
name|posAfterFailedStat
parameter_list|()
block|{
comment|// Regression test for a bug introduced in 4.3.0; after a failed stat,
comment|// pos() could no longer be calculated correctly.
name|QFile
operator|::
name|remove
argument_list|(
literal|"tmp.txt"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"tmp.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|Append
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"qt430"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|FILESIZE
define|#
directive|define
name|FILESIZE
value|65536 * 3
end_define
begin_function
DECL|function|map_data
name|void
name|tst_QFile
operator|::
name|map_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"fileSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|FileError
argument_list|>
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|0
operator|<<
name|FILESIZE
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"small, but 0"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|30
operator|<<
name|FILESIZE
operator|-
literal|30
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a page"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|4096
operator|<<
name|FILESIZE
operator|-
literal|4096
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+page"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|5000
operator|<<
name|FILESIZE
operator|-
literal|5000
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"++page"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|65576
operator|<<
name|FILESIZE
operator|-
literal|65576
operator|<<
name|QFile
operator|::
name|NoError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad size"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
name|QFile
operator|::
name|ResourceError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad offset"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
name|QFile
operator|::
name|UnspecifiedError
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zerozero"
argument_list|)
operator|<<
name|FILESIZE
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QFile
operator|::
name|UnspecifiedError
expr_stmt|;
block|}
end_function
begin_function
DECL|function|map
name|void
name|tst_QFile
operator|::
name|map
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|FileError
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|'/'
operator|+
literal|"qfile_map_testfile"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|fileName
operator|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName
argument_list|,
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ReadUser
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// invalid, not open
name|uchar
modifier|*
name|memory
init|=
name|file
operator|.
name|map
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|memory
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|PermissionsError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|unmap
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|PermissionsError
argument_list|)
expr_stmt|;
comment|// make a file
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|resize
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|memory
operator|=
name|file
operator|.
name|map
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|QFile
operator|::
name|NoError
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|error
argument_list|()
operator|!=
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|memory
index|[
literal|0
index|]
operator|=
literal|'Q'
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// Verify changes were saved
name|memory
operator|=
name|file
operator|.
name|map
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory
index|[
literal|0
index|]
operator|==
literal|'Q'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// hpux won't let you map multiple times.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_USE_DEPRECATED_MAP_API
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// exotic test to make sure that multiple maps work
comment|// note: windows ce does not reference count mutliple maps
comment|// it's essentially just the same reference but it
comment|// cause a resource lock on the file which prevents it
comment|// from being removed    uchar *memory1 = file.map(0, file.size());
name|uchar
modifier|*
name|memory1
init|=
name|file
operator|.
name|map
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|memory2
init|=
name|file
operator|.
name|map
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|memory1
operator|=
name|file
operator|.
name|map
argument_list|(
literal|0
argument_list|,
name|file
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memory1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|!=
literal|0
condition|)
comment|// root always has permissions
endif|#
directive|endif
block|{
comment|// Change permissions on a file, just to confirm it would fail
name|QFile
operator|::
name|Permissions
name|originalPermissions
init|=
name|file
operator|.
name|permissions
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOther
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|memory
operator|=
name|file
operator|.
name|map
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|PermissionsError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|memory
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|setPermissions
argument_list|(
name|originalPermissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapResource_data
name|void
name|tst_QFile
operator|::
name|mapResource_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"offset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|FileError
argument_list|>
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QString
name|validFile
init|=
literal|":/tst_qfileinfo/resources/file1.ext1"
decl_stmt|;
name|QString
name|invalidFile
init|=
literal|":/tst_qfileinfo/resources/filefoo.ext1"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|file
init|=
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
name|validFile
else|:
name|invalidFile
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0, 0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QFile
operator|::
name|UnspecifiedError
operator|<<
name|file
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0, BIG"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4096
operator|<<
name|QFile
operator|::
name|UnspecifiedError
operator|<<
name|file
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1, 0"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
name|QFile
operator|::
name|UnspecifiedError
operator|<<
name|file
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0, -1"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
name|QFile
operator|::
name|UnspecifiedError
operator|<<
name|file
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0, 1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
name|QFile
operator|::
name|NoError
operator|<<
name|validFile
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapResource
name|void
name|tst_QFile
operator|::
name|mapResource
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|FileError
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|uchar
modifier|*
name|memory
init|=
name|file
operator|.
name|map
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|error
operator|==
name|QFile
operator|::
name|NoError
operator|)
condition|?
operator|(
name|memory
operator|!=
literal|0
operator|)
else|:
operator|(
name|memory
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|QFile
operator|::
name|NoError
condition|)
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|memory
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|offset
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|unmap
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapOpenMode_data
name|void
name|tst_QFile
operator|::
name|mapOpenMode_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"openMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ReadOnly"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
comment|//QTest::newRow("WriteOnly")<< int(QIODevice::WriteOnly); // this doesn't make sense
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ReadWrite"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ReadOnly,Unbuffered"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ReadWrite,Unbuffered"
argument_list|)
operator|<<
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapOpenMode
name|void
name|tst_QFile
operator|::
name|mapOpenMode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|openMode
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|qint64
name|fileSize
init|=
literal|4096
decl_stmt|;
name|QByteArray
name|pattern
argument_list|(
name|fileSize
argument_list|,
literal|'A'
argument_list|)
decl_stmt|;
name|QString
name|fileName
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|'/'
operator|+
literal|"qfile_map_testfile"
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|setPermissions
argument_list|(
name|fileName
argument_list|,
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ReadUser
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// make a file
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|write
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// open according to our mode
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|OpenMode
argument_list|(
name|openMode
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|uchar
modifier|*
name|memory
init|=
name|file
operator|.
name|map
argument_list|(
literal|0
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|memcmp
argument_list|(
name|memory
argument_list|,
name|pattern
argument_list|,
name|fileSize
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|openMode
operator|&
name|QIODevice
operator|::
name|WriteOnly
condition|)
block|{
comment|// try to write to the file
operator|*
name|memory
operator|=
literal|'a'
expr_stmt|;
name|file
operator|.
name|unmap
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|OpenMode
argument_list|(
name|openMode
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openDirectory
name|void
name|tst_QFile
operator|::
name|openDirectory
parameter_list|()
block|{
name|QFile
name|f1
argument_list|(
name|m_resourcesDir
argument_list|)
decl_stmt|;
comment|// it's a directory, it must exist
name|QVERIFY
argument_list|(
name|f1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// ...but not be openable
name|QVERIFY
argument_list|(
operator|!
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|f1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|)
argument_list|)
expr_stmt|;
name|f1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamExpectedSize
specifier|static
name|qint64
name|streamExpectedSize
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|QT_STATBUF
name|sb
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|fd
argument_list|,
operator|&
name|sb
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return
name|sb
operator|.
name|st_size
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|streamCurrentPosition
specifier|static
name|qint64
name|streamCurrentPosition
parameter_list|(
name|int
name|fd
parameter_list|)
block|{
name|QT_OFF_T
name|pos
init|=
name|QT_LSEEK
argument_list|(
name|fd
argument_list|,
literal|0
argument_list|,
name|SEEK_CUR
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
return|return
name|pos
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|streamCurrentPosition
specifier|static
name|qint64
name|streamCurrentPosition
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|)
block|{
name|QT_OFF_T
name|pos
init|=
name|QT_FTELL
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
return|return
name|pos
return|;
return|return
literal|0
return|;
block|}
end_function
begin_class
DECL|class|MessageHandler
class|class
name|MessageHandler
block|{
public|public:
DECL|function|MessageHandler
name|MessageHandler
parameter_list|(
name|QtMessageHandler
name|messageHandler
init|=
name|handler
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|oldMessageHandler
operator|=
name|qInstallMessageHandler
argument_list|(
name|messageHandler
argument_list|)
expr_stmt|;
block|}
DECL|function|~MessageHandler
name|~
name|MessageHandler
parameter_list|()
block|{
name|qInstallMessageHandler
argument_list|(
name|oldMessageHandler
argument_list|)
expr_stmt|;
block|}
DECL|function|testPassed
specifier|static
name|bool
name|testPassed
parameter_list|()
block|{
return|return
name|ok
return|;
block|}
protected|protected:
DECL|function|handler
specifier|static
name|void
name|handler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
name|context
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|==
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QIODevice::seek: Cannot call seek on a sequential device"
argument_list|)
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
comment|// Defer to old message handler.
if|if
condition|(
name|oldMessageHandler
condition|)
name|oldMessageHandler
argument_list|(
name|type
argument_list|,
name|context
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
DECL|member|oldMessageHandler
specifier|static
name|QtMessageHandler
name|oldMessageHandler
decl_stmt|;
DECL|member|ok
specifier|static
name|bool
name|ok
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|ok
name|bool
name|MessageHandler
operator|::
name|ok
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|oldMessageHandler
name|QtMessageHandler
name|MessageHandler
operator|::
name|oldMessageHandler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|//allthough Windows CE (not mobile!) has functions that allow redirecting
end_comment
begin_comment
comment|//the standard file descriptors to a file (see SetStdioPathW/GetStdioPathW)
end_comment
begin_comment
comment|//it does not have functions to simply open them like below .
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_function
DECL|function|openStandardStreamsFileDescriptors
name|void
name|tst_QFile
operator|::
name|openStandardStreamsFileDescriptors
parameter_list|()
block|{
comment|// Check that QIODevice::seek() isn't called when opening a sequential device (QFile).
name|MessageHandler
name|msgHandler
decl_stmt|;
block|{
name|QFile
name|in
decl_stmt|;
name|in
operator|.
name|open
argument_list|(
name|STDIN_FILENO
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|STDIN_FILENO
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|STDIN_FILENO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|out
decl_stmt|;
name|QVERIFY
argument_list|(
name|out
operator|.
name|open
argument_list|(
name|STDOUT_FILENO
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|STDOUT_FILENO
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|STDOUT_FILENO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|err
decl_stmt|;
name|err
operator|.
name|open
argument_list|(
name|STDERR_FILENO
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|err
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|STDERR_FILENO
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|err
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|STDERR_FILENO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|msgHandler
operator|.
name|testPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openStandardStreamsBufferedStreams
name|void
name|tst_QFile
operator|::
name|openStandardStreamsBufferedStreams
parameter_list|()
block|{
comment|// Check that QIODevice::seek() isn't called when opening a sequential device (QFile).
name|MessageHandler
name|msgHandler
decl_stmt|;
comment|// Using streams
block|{
name|QFile
name|in
decl_stmt|;
name|in
operator|.
name|open
argument_list|(
name|stdin
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|stdin
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|QT_FILENO
argument_list|(
name|stdin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|out
decl_stmt|;
name|out
operator|.
name|open
argument_list|(
name|stdout
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|stdout
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|QT_FILENO
argument_list|(
name|stdout
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|err
decl_stmt|;
name|err
operator|.
name|open
argument_list|(
name|stderr
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|err
operator|.
name|pos
argument_list|()
argument_list|,
name|streamCurrentPosition
argument_list|(
name|stderr
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|err
operator|.
name|size
argument_list|()
argument_list|,
name|streamExpectedSize
argument_list|(
name|QT_FILENO
argument_list|(
name|stderr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|msgHandler
operator|.
name|testPassed
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|writeNothing
name|void
name|tst_QFile
operator|::
name|writeNothing
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumberOfFileTypes
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
argument_list|(
literal|"file.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Unbuffered
argument_list|,
name|FileType
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|0
operator|==
name|file
operator|.
name|write
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|error
argument_list|()
argument_list|,
name|QFile
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|closeFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resize_data
name|void
name|tst_QFile
operator|::
name|resize_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"filetype"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"native"
argument_list|)
operator|<<
name|int
argument_list|(
name|OpenQFile
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fileno"
argument_list|)
operator|<<
name|int
argument_list|(
name|OpenFd
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stream"
argument_list|)
operator|<<
name|int
argument_list|(
name|OpenStream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resize
name|void
name|tst_QFile
operator|::
name|resize
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|filetype
argument_list|)
expr_stmt|;
name|QString
name|filename
argument_list|(
name|QLatin1String
argument_list|(
literal|"file.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|,
name|FileType
argument_list|(
name|filetype
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|resize
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|closeFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|resize
argument_list|(
name|filename
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectConstructors
name|void
name|tst_QFile
operator|::
name|objectConstructors
parameter_list|()
block|{
name|QObject
name|ob
decl_stmt|;
name|QFile
modifier|*
name|file1
init|=
operator|new
name|QFile
argument_list|(
name|m_testFile
argument_list|,
operator|&
name|ob
argument_list|)
decl_stmt|;
name|QFile
modifier|*
name|file2
init|=
operator|new
name|QFile
argument_list|(
operator|&
name|ob
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|->
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|file2
operator|->
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caseSensitivity
name|void
name|tst_QFile
operator|::
name|caseSensitivity
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
specifier|const
name|bool
name|caseSensitive
init|=
literal|false
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
specifier|const
name|bool
name|caseSensitive
init|=
name|pathconf
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|_PC_CASE_SENSITIVE
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|bool
name|caseSensitive
init|=
literal|true
decl_stmt|;
endif|#
directive|endif
name|QByteArray
name|testData
argument_list|(
literal|"a little test"
argument_list|)
decl_stmt|;
name|QString
name|filename
argument_list|(
literal|"File.txt"
argument_list|)
decl_stmt|;
block|{
name|QFile
name|f
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|write
argument_list|(
name|testData
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QStringList
name|alternates
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|alternates
operator|<<
literal|"file.txt"
operator|<<
literal|"File.TXT"
operator|<<
literal|"fIlE.TxT"
operator|<<
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|toUpper
argument_list|()
operator|<<
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QString
name|alt
decl|,
name|alternates
control|)
block|{
name|QFileInfo
name|fi2
argument_list|(
name|alt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi2
operator|.
name|exists
argument_list|()
argument_list|,
operator|!
name|caseSensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|size
argument_list|()
operator|==
name|fi2
operator|.
name|size
argument_list|()
argument_list|,
operator|!
name|caseSensitive
argument_list|)
expr_stmt|;
name|QFile
name|f2
argument_list|(
name|alt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|,
operator|!
name|caseSensitive
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|caseSensitive
condition|)
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|readAll
argument_list|()
argument_list|,
name|testData
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//MSVCRT asserts when any function is called with a closed file handle.
end_comment
begin_comment
comment|//This replaces the default crashing error handler with one that ignores the error (allowing EBADF to be returned)
end_comment
begin_class
DECL|class|AutoIgnoreInvalidParameter
class|class
name|AutoIgnoreInvalidParameter
block|{
public|public:
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
DECL|function|ignore_invalid_parameter
specifier|static
name|void
name|ignore_invalid_parameter
parameter_list|(
specifier|const
name|wchar_t
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|uintptr_t
parameter_list|)
block|{}
DECL|function|AutoIgnoreInvalidParameter
name|AutoIgnoreInvalidParameter
parameter_list|()
block|{
name|oldHandler
operator|=
name|_set_invalid_parameter_handler
argument_list|(
name|ignore_invalid_parameter
argument_list|)
expr_stmt|;
comment|//also disable the abort/retry/ignore popup
name|oldReportMode
operator|=
name|_CrtSetReportMode
argument_list|(
name|_CRT_ASSERT
argument_list|,
name|_CRTDBG_MODE_DEBUG
argument_list|)
expr_stmt|;
block|}
DECL|function|~AutoIgnoreInvalidParameter
name|~
name|AutoIgnoreInvalidParameter
parameter_list|()
block|{
comment|//restore previous settings
name|_set_invalid_parameter_handler
argument_list|(
name|oldHandler
argument_list|)
expr_stmt|;
name|_CrtSetReportMode
argument_list|(
name|_CRT_ASSERT
argument_list|,
name|oldReportMode
argument_list|)
expr_stmt|;
block|}
DECL|member|oldHandler
name|_invalid_parameter_handler
name|oldHandler
decl_stmt|;
DECL|member|oldReportMode
name|int
name|oldReportMode
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|autocloseHandle
name|void
name|tst_QFile
operator|::
name|autocloseHandle
parameter_list|()
block|{
block|{
name|QFile
name|file
argument_list|(
literal|"readonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
name|OpenFd
argument_list|,
name|QFile
operator|::
name|AutoCloseHandle
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fd
init|=
name|fd_
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
name|fd
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|fd_
operator|=
operator|-
literal|1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|AutoIgnoreInvalidParameter
name|a
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|//file is closed, read should fail
name|char
name|buf
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QT_READ
argument_list|(
name|fd
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errno
operator|=
name|EBADF
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"readonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
name|OpenFd
argument_list|,
name|QFile
operator|::
name|DontCloseHandle
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
name|fd_
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//file is not closed, read should succeed
name|char
name|buf
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QT_READ
argument_list|(
name|fd_
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QT_CLOSE
argument_list|(
name|fd_
argument_list|)
expr_stmt|;
name|fd_
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"readonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
name|OpenStream
argument_list|,
name|QFile
operator|::
name|AutoCloseHandle
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fd
init|=
name|QT_FILENO
argument_list|(
name|stream_
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
name|fd
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|stream_
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|AutoIgnoreInvalidParameter
name|a
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|//file is closed, read should fail
name|char
name|buf
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QT_READ
argument_list|(
name|fd
argument_list|,
operator|&
name|buf
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//not using fread because the FILE* was freed by fclose
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"readonlyfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|openFile
argument_list|(
name|file
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
name|OpenStream
argument_list|,
name|QFile
operator|::
name|DontCloseHandle
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
name|int
argument_list|(
name|QT_FILENO
argument_list|(
name|stream_
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//file is not closed, read should succeed
name|char
name|buf
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
operator|::
name|fread
argument_list|(
operator|&
name|buf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|stream_
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|::
name|fclose
argument_list|(
name|stream_
argument_list|)
expr_stmt|;
name|stream_
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFile
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfile.moc"
end_include
end_unit
