begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QBitArray
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|qint64
argument_list|)
end_macro
begin_class
DECL|class|tst_QDataStream
class|class
name|tst_QDataStream
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|void
name|stream_data
parameter_list|(
name|int
name|noOfElements
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|stream_bool_data
parameter_list|()
function_decl|;
name|void
name|stream_bool
parameter_list|()
function_decl|;
name|void
name|stream_QBool_data
parameter_list|()
function_decl|;
name|void
name|stream_QBool
parameter_list|()
function_decl|;
name|void
name|stream_QBool_in_4_0
parameter_list|()
function_decl|;
name|void
name|stream_QBitArray_data
parameter_list|()
function_decl|;
name|void
name|stream_QBitArray
parameter_list|()
function_decl|;
name|void
name|stream_QBrush_data
parameter_list|()
function_decl|;
name|void
name|stream_QBrush
parameter_list|()
function_decl|;
name|void
name|stream_QColor_data
parameter_list|()
function_decl|;
name|void
name|stream_QColor
parameter_list|()
function_decl|;
name|void
name|stream_QByteArray_data
parameter_list|()
function_decl|;
name|void
name|stream_QByteArray
parameter_list|()
function_decl|;
name|void
name|stream_QCursor_data
parameter_list|()
function_decl|;
name|void
name|stream_QCursor
parameter_list|()
function_decl|;
name|void
name|stream_QDate_data
parameter_list|()
function_decl|;
name|void
name|stream_QDate
parameter_list|()
function_decl|;
name|void
name|stream_QTime_data
parameter_list|()
function_decl|;
name|void
name|stream_QTime
parameter_list|()
function_decl|;
name|void
name|stream_QDateTime_data
parameter_list|()
function_decl|;
name|void
name|stream_QDateTime
parameter_list|()
function_decl|;
name|void
name|stream_QFont_data
parameter_list|()
function_decl|;
name|void
name|stream_QFont
parameter_list|()
function_decl|;
name|void
name|stream_QImage_data
parameter_list|()
function_decl|;
name|void
name|stream_QImage
parameter_list|()
function_decl|;
name|void
name|stream_QPen_data
parameter_list|()
function_decl|;
name|void
name|stream_QPen
parameter_list|()
function_decl|;
name|void
name|stream_QPixmap_data
parameter_list|()
function_decl|;
name|void
name|stream_QPixmap
parameter_list|()
function_decl|;
name|void
name|stream_QPoint_data
parameter_list|()
function_decl|;
name|void
name|stream_QPoint
parameter_list|()
function_decl|;
name|void
name|stream_QRect_data
parameter_list|()
function_decl|;
name|void
name|stream_QRect
parameter_list|()
function_decl|;
name|void
name|stream_QPolygon_data
parameter_list|()
function_decl|;
name|void
name|stream_QPolygon
parameter_list|()
function_decl|;
name|void
name|stream_QRegion_data
parameter_list|()
function_decl|;
name|void
name|stream_QRegion
parameter_list|()
function_decl|;
name|void
name|stream_QSize_data
parameter_list|()
function_decl|;
name|void
name|stream_QSize
parameter_list|()
function_decl|;
name|void
name|stream_QString_data
parameter_list|()
function_decl|;
name|void
name|stream_QString
parameter_list|()
function_decl|;
name|void
name|stream_QRegExp_data
parameter_list|()
function_decl|;
name|void
name|stream_QRegExp
parameter_list|()
function_decl|;
name|void
name|stream_Map_data
parameter_list|()
function_decl|;
name|void
name|stream_Map
parameter_list|()
function_decl|;
name|void
name|stream_Hash_data
parameter_list|()
function_decl|;
name|void
name|stream_Hash
parameter_list|()
function_decl|;
name|void
name|stream_qint64_data
parameter_list|()
function_decl|;
name|void
name|stream_qint64
parameter_list|()
function_decl|;
name|void
name|stream_QIcon_data
parameter_list|()
function_decl|;
name|void
name|stream_QIcon
parameter_list|()
function_decl|;
name|void
name|stream_QEasingCurve_data
parameter_list|()
function_decl|;
name|void
name|stream_QEasingCurve
parameter_list|()
function_decl|;
name|void
name|stream_atEnd_data
parameter_list|()
function_decl|;
name|void
name|stream_atEnd
parameter_list|()
function_decl|;
name|void
name|stream_writeError
parameter_list|()
function_decl|;
name|void
name|stream_QByteArray2
parameter_list|()
function_decl|;
name|void
name|setVersion_data
parameter_list|()
function_decl|;
name|void
name|setVersion
parameter_list|()
function_decl|;
name|void
name|skipRawData_data
parameter_list|()
function_decl|;
name|void
name|skipRawData
parameter_list|()
function_decl|;
name|void
name|status_qint8_data
parameter_list|()
function_decl|;
name|void
name|status_qint8
parameter_list|()
function_decl|;
name|void
name|status_qint16_data
parameter_list|()
function_decl|;
name|void
name|status_qint16
parameter_list|()
function_decl|;
name|void
name|status_qint32_data
parameter_list|()
function_decl|;
name|void
name|status_qint32
parameter_list|()
function_decl|;
name|void
name|status_qint64_data
parameter_list|()
function_decl|;
name|void
name|status_qint64
parameter_list|()
function_decl|;
name|void
name|status_float_data
parameter_list|()
function_decl|;
name|void
name|status_float
parameter_list|()
function_decl|;
name|void
name|status_double_data
parameter_list|()
function_decl|;
name|void
name|status_double
parameter_list|()
function_decl|;
name|void
name|status_charptr_QByteArray_data
parameter_list|()
function_decl|;
name|void
name|status_charptr_QByteArray
parameter_list|()
function_decl|;
name|void
name|status_QString_data
parameter_list|()
function_decl|;
name|void
name|status_QString
parameter_list|()
function_decl|;
name|void
name|status_QBitArray_data
parameter_list|()
function_decl|;
name|void
name|status_QBitArray
parameter_list|()
function_decl|;
name|void
name|status_QHash_QMap
parameter_list|()
function_decl|;
name|void
name|status_QLinkedList_QList_QVector
parameter_list|()
function_decl|;
name|void
name|streamToAndFromQByteArray
parameter_list|()
function_decl|;
name|void
name|streamRealDataTypes
parameter_list|()
function_decl|;
name|void
name|floatingPointPrecision
parameter_list|()
function_decl|;
name|void
name|compatibility_Qt3
parameter_list|()
function_decl|;
name|void
name|compatibility_Qt2
parameter_list|()
function_decl|;
private|private:
name|void
name|writebool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQBool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQBitArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQBrush
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQColor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQByteArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQCursor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQWaitCursor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQDate
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQDateTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQFont
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQImage
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQPen
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQPixmap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQPoint
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQRect
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQPolygon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQRegion
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQSize
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQString
parameter_list|(
name|QDataStream
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|writeQRegExp
parameter_list|(
name|QDataStream
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|writeMap
parameter_list|(
name|QDataStream
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|writeHash
parameter_list|(
name|QDataStream
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|writeqint64
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQIcon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|writeQEasingCurve
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readbool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQBool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQBitArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQBrush
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQColor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQByteArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQCursor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQDate
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQDateTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQFont
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQImage
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQPen
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQPixmap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQPoint
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQRect
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQPolygon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQRegion
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQSize
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQString
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQRegExp
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readMap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readHash
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readqint64
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQIcon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|readQEasingCurve
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|NColorRoles
specifier|static
name|int
name|NColorRoles
index|[]
init|=
block|{
name|QPalette
operator|::
name|NoRole
block|,
comment|// No Version
name|QPalette
operator|::
name|NoRole
block|,
comment|// Qt_1_0
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_2_0
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_2_1
name|QPalette
operator|::
name|LinkVisited
operator|+
literal|1
block|,
comment|// Qt_3_0
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_3_1
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_3_3
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_4_0, Qt_4_1
name|QPalette
operator|::
name|HighlightedText
operator|+
literal|1
block|,
comment|// Qt_4_2
name|QPalette
operator|::
name|AlternateBase
operator|+
literal|1
block|,
comment|// Qt_4_3
name|QPalette
operator|::
name|ToolTipText
operator|+
literal|1
block|,
comment|// Qt_4_4
name|QPalette
operator|::
name|ToolTipText
operator|+
literal|1
block|,
comment|// Qt_4_5
name|QPalette
operator|::
name|ToolTipText
operator|+
literal|1
block|,
comment|// Qt_4_6
literal|0
comment|// add the correct value for Qt_4_7 here later
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QDataStream
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QDataStream
name|obj1
decl_stmt|;
comment|// QIODevice * QDataStream::device()
comment|// void QDataStream::setDevice(QIODevice *)
name|QFile
modifier|*
name|var1
init|=
operator|new
name|QFile
decl_stmt|;
name|obj1
operator|.
name|setDevice
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
name|var1
argument_list|,
operator|(
name|QIODevice
operator|*
operator|)
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDevice
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QIODevice
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|QIODevice
operator|*
operator|)
name|obj1
operator|.
name|device
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// Status QDataStream::status()
comment|// void QDataStream::setStatus(Status)
name|obj1
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDataStream
operator|::
name|Ok
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|resetStatus
argument_list|()
expr_stmt|;
name|obj1
operator|.
name|setStatus
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|,
name|obj1
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDataStream
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|QLatin1String
argument_list|(
literal|"qdatastream.out"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dataIndex
specifier|static
name|int
name|dataIndex
parameter_list|(
specifier|const
name|QString
modifier|&
name|tag
parameter_list|)
block|{
name|int
name|pos
init|=
name|tag
operator|.
name|lastIndexOf
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|QString
name|count
init|=
name|tag
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|ret
operator|=
name|count
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
return|return
name|ret
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|devices
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|devices
index|[]
init|=
block|{
literal|"file"
block|,
literal|"bytearray"
block|,
literal|"buffer"
block|,
literal|0
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|/*     IMPORTANT.     In this testcase i follow a different approach than usual: I don't use the full power of     QtTestTable and QtTestData. This is done deliberately because QtTestData uses a QDataStream     itself to handle its data. So it would be a bit inapropriate to fully rely on QtTestData in this     testcase.     I do use QString in QtTestData because this is thouroughly tested in the selftest. */
end_comment
begin_function
DECL|function|stream_data
name|void
name|tst_QDataStream
operator|::
name|stream_data
parameter_list|(
name|int
name|noOfElements
parameter_list|)
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"device"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"byteOrder"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|devices
index|[
name|d
index|]
operator|!=
literal|0
condition|;
name|d
operator|++
control|)
block|{
name|QString
name|device
init|=
name|devices
index|[
name|d
index|]
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|2
condition|;
name|b
operator|++
control|)
block|{
name|QString
name|byte_order
init|=
name|b
operator|==
literal|0
condition|?
literal|"BigEndian"
else|:
literal|"LittleEndian"
decl_stmt|;
name|QString
name|tag
init|=
name|device
operator|+
literal|"_"
operator|+
name|byte_order
decl_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
name|noOfElements
condition|;
name|e
operator|++
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|tag
operator|+
name|QString
argument_list|(
literal|"_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|e
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|device
operator|<<
name|QString
argument_list|(
name|byte_order
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_decl_stmt
DECL|variable|open_xpm
specifier|static
specifier|const
name|char
modifier|*
name|open_xpm
index|[]
init|=
block|{
literal|"16 13 6 1"
block|,
literal|". c None"
block|,
literal|"b c #ffff00"
block|,
literal|"d c #000000"
block|,
literal|"* c #999999"
block|,
literal|"c c #cccccc"
block|,
literal|"a c #ffffff"
block|,
literal|"...*****........"
block|,
literal|"..*aaaaa*......."
block|,
literal|".*abcbcba******."
block|,
literal|".*acbcbcaaaaaa*d"
block|,
literal|".*abcbcbcbcbcb*d"
block|,
literal|"*************b*d"
block|,
literal|"*aaaaaaaaaa**c*d"
block|,
literal|"*abcbcbcbcbbd**d"
block|,
literal|".*abcbcbcbcbcd*d"
block|,
literal|".*acbcbcbcbcbd*d"
block|,
literal|"..*acbcbcbcbb*dd"
block|,
literal|"..*************d"
block|,
literal|"...ddddddddddddd"
block|}
decl_stmt|;
end_decl_stmt
begin_define
DECL|macro|STREAM_IMPL
define|#
directive|define
name|STREAM_IMPL
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|QFETCH(QString, device); \     if (device == "bytearray") { \         QByteArray ba; \         QDataStream sout(&ba, QIODevice::WriteOnly); \         write##TYPE(&sout); \         QDataStream sin(&ba, QIODevice::ReadOnly); \         read##TYPE(&sin); \     } else if (device == "file") { \         QString fileName = "qdatastream.out"; \         QFile fOut(fileName); \         QVERIFY(fOut.open(QIODevice::WriteOnly)); \         QDataStream sout(&fOut); \         write##TYPE(&sout); \         fOut.close(); \         QFile fIn(fileName); \         QVERIFY(fIn.open(QIODevice::ReadOnly)); \         QDataStream sin(&fIn); \         read##TYPE(&sin); \         fIn.close(); \     } else if (device == "buffer") { \         QByteArray ba(10000, '\0'); \         QBuffer bOut(&ba); \         bOut.open(QIODevice::WriteOnly); \         QDataStream sout(&bOut); \         write##TYPE(&sout); \         bOut.close(); \         QBuffer bIn(&ba); \         bIn.open(QIODevice::ReadOnly); \         QDataStream sin(&bIn); \         read##TYPE(&sin); \         bIn.close(); \     }
end_define
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|stringData
specifier|static
name|QString
name|stringData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QString
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|QString
argument_list|(
literal|""
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QString
argument_list|(
literal|"A"
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QString
argument_list|(
literal|"ABCDE FGHI"
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QString
argument_list|(
literal|"This is a long string"
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QString
argument_list|(
literal|"And again a string with a \nCRLF"
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QString
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRESTUVWXYZ 1234567890 ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/"
argument_list|)
return|;
block|}
return|return
name|QString
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QSTRING_DATA
define|#
directive|define
name|MAX_QSTRING_DATA
value|7
end_define
begin_function
DECL|function|stream_QString_data
name|void
name|tst_QDataStream
operator|::
name|stream_QString_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QSTRING_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QString
name|void
name|tst_QDataStream
operator|::
name|stream_QString
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQString
name|void
name|tst_QDataStream
operator|::
name|writeQString
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QString
name|test
argument_list|(
name|stringData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|(
literal|"Her er det noe tekst"
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|()
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|(
literal|"nonempty"
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQString
name|void
name|tst_QDataStream
operator|::
name|readQString
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QString
name|S
decl_stmt|;
name|QString
name|test
argument_list|(
name|stringData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|QString
argument_list|(
literal|"Her er det noe tekst"
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QVERIFY
argument_list|(
name|S
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QVERIFY
argument_list|(
name|S
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|QString
argument_list|(
literal|"nonempty"
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|QRegExpData
specifier|static
name|QRegExp
name|QRegExpData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QRegExp
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|QRegExp
argument_list|(
literal|""
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QRegExp
argument_list|(
literal|"A"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QRegExp
argument_list|(
literal|"ABCDE FGHI"
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QRegExp
argument_list|(
literal|"This is a long string"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QRegExp
argument_list|(
literal|"And again a string with a \nCRLF"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|RegExp
argument_list|)
return|;
case|case
literal|6
case|:
block|{
name|QRegExp
name|rx
argument_list|(
literal|"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRESTUVWXYZ 1234567890 ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/"
argument_list|)
decl_stmt|;
name|rx
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|rx
return|;
block|}
block|}
return|return
name|QRegExp
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QREGEXP_DATA
define|#
directive|define
name|MAX_QREGEXP_DATA
value|7
end_define
begin_function
DECL|function|stream_QRegExp_data
name|void
name|tst_QDataStream
operator|::
name|stream_QRegExp_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QREGEXP_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QRegExp
name|void
name|tst_QDataStream
operator|::
name|stream_QRegExp
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QRegExp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQRegExp
name|void
name|tst_QDataStream
operator|::
name|writeQRegExp
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRegExp
name|test
argument_list|(
name|QRegExpData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|(
literal|"Her er det noe tekst"
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QString
argument_list|(
literal|"nonempty"
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|QVariant
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQRegExp
name|void
name|tst_QDataStream
operator|::
name|readQRegExp
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRegExp
name|R
decl_stmt|;
name|QString
name|S
decl_stmt|;
name|QVariant
name|V
decl_stmt|;
name|QRegExp
name|test
argument_list|(
name|QRegExpData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|>>
name|R
expr_stmt|;
name|QCOMPARE
argument_list|(
name|R
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|QString
argument_list|(
literal|"Her er det noe tekst"
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|R
expr_stmt|;
name|QCOMPARE
argument_list|(
name|R
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|QString
argument_list|(
literal|"nonempty"
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|R
expr_stmt|;
name|QCOMPARE
argument_list|(
name|R
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|V
expr_stmt|;
name|QVERIFY
argument_list|(
name|V
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|RegExp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|V
operator|.
name|toRegExp
argument_list|()
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_typedef
DECL|typedef|Map
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|Map
typedef|;
end_typedef
begin_function
DECL|function|MapData
specifier|static
name|Map
name|MapData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Map
name|map
decl_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
default|default:
break|break;
case|case
literal|1
case|:
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"cccccc"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|2
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"cccccc"
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
end_function
begin_define
DECL|macro|MAX_MAP_DATA
define|#
directive|define
name|MAX_MAP_DATA
value|3
end_define
begin_function
DECL|function|stream_Map_data
name|void
name|tst_QDataStream
operator|::
name|stream_Map_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_MAP_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_Map
name|void
name|tst_QDataStream
operator|::
name|stream_Map
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|Map
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMap
name|void
name|tst_QDataStream
operator|::
name|writeMap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|Map
name|test
argument_list|(
name|MapData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readMap
name|void
name|tst_QDataStream
operator|::
name|readMap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|Map
name|S
decl_stmt|;
name|Map
name|test
argument_list|(
name|MapData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_typedef
DECL|typedef|Hash
typedef|typedef
name|QHash
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|Hash
typedef|;
end_typedef
begin_function
DECL|function|HashData
specifier|static
name|Hash
name|HashData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Hash
name|map
decl_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
default|default:
break|break;
case|case
literal|1
case|:
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"cccccc"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|map
operator|.
name|insert
argument_list|(
literal|1
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|2
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|2
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insertMulti
argument_list|(
literal|2
argument_list|,
literal|"three"
argument_list|)
expr_stmt|;
name|map
operator|.
name|insert
argument_list|(
literal|3
argument_list|,
literal|"cccccc"
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
end_function
begin_define
DECL|macro|MAX_HASH_DATA
define|#
directive|define
name|MAX_HASH_DATA
value|3
end_define
begin_function
DECL|function|stream_Hash_data
name|void
name|tst_QDataStream
operator|::
name|stream_Hash_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_HASH_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_Hash
name|void
name|tst_QDataStream
operator|::
name|stream_Hash
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|Hash
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeHash
name|void
name|tst_QDataStream
operator|::
name|writeHash
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|Hash
name|test
argument_list|(
name|HashData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readHash
name|void
name|tst_QDataStream
operator|::
name|readHash
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|Hash
name|S
decl_stmt|;
name|Hash
name|test
argument_list|(
name|HashData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|QEasingCurveData
specifier|static
name|QEasingCurve
name|QEasingCurveData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QEasingCurve
name|easing
decl_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
default|default:
break|break;
case|case
literal|1
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|Linear
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|OutCubic
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|InOutSine
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|InOutElastic
argument_list|)
expr_stmt|;
name|easing
operator|.
name|setPeriod
argument_list|(
literal|1.5
argument_list|)
expr_stmt|;
name|easing
operator|.
name|setAmplitude
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|OutInBack
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|OutCurve
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|easing
operator|.
name|setType
argument_list|(
name|QEasingCurve
operator|::
name|InOutBack
argument_list|)
expr_stmt|;
name|easing
operator|.
name|setOvershoot
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|easing
return|;
block|}
end_function
begin_define
DECL|macro|MAX_EASING_DATA
define|#
directive|define
name|MAX_EASING_DATA
value|8
end_define
begin_function
DECL|function|stream_QEasingCurve_data
name|void
name|tst_QDataStream
operator|::
name|stream_QEasingCurve_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_EASING_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QEasingCurve
name|void
name|tst_QDataStream
operator|::
name|stream_QEasingCurve
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QEasingCurve
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQEasingCurve
name|void
name|tst_QDataStream
operator|::
name|writeQEasingCurve
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QEasingCurve
name|test
argument_list|(
name|QEasingCurveData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQEasingCurve
name|void
name|tst_QDataStream
operator|::
name|readQEasingCurve
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QEasingCurve
name|S
decl_stmt|;
name|QEasingCurve
name|expected
argument_list|(
name|QEasingCurveData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|>>
name|S
expr_stmt|;
name|QCOMPARE
argument_list|(
name|S
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_comment
comment|// contains some quint64 testing as well
end_comment
begin_define
DECL|macro|MAX_qint64_DATA
define|#
directive|define
name|MAX_qint64_DATA
value|4
end_define
begin_function
DECL|function|qint64Data
specifier|static
name|qint64
name|qint64Data
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|qint64
argument_list|(
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|qint64
argument_list|(
literal|1
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|qint64
argument_list|(
literal|1
argument_list|)
operator|<<
literal|40
return|;
case|case
name|MAX_qint64_DATA
case|:
return|return
operator|-
operator|(
name|qint64
argument_list|(
literal|1
argument_list|)
operator|<<
literal|40
operator|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function
begin_function
DECL|function|stream_qint64_data
name|void
name|tst_QDataStream
operator|::
name|stream_qint64_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_qint64_DATA
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_qint64
name|void
name|tst_QDataStream
operator|::
name|stream_qint64
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|qint64
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeqint64
name|void
name|tst_QDataStream
operator|::
name|writeqint64
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|qint64
name|test
init|=
name|qint64Data
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|test
expr_stmt|;
operator|*
name|s
operator|<<
name|int
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
operator|(
name|quint64
operator|)
name|test
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readqint64
name|void
name|tst_QDataStream
operator|::
name|readqint64
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|qint64
name|test
init|=
name|qint64Data
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|qint64
name|i64
decl_stmt|;
name|quint64
name|ui64
decl_stmt|;
name|int
name|i
decl_stmt|;
operator|*
name|s
operator|>>
name|i64
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i64
argument_list|,
name|test
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|i
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
name|int
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|>>
name|ui64
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ui64
argument_list|,
operator|(
name|quint64
operator|)
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|boolData
specifier|static
name|bool
name|boolData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|true
return|;
case|case
literal|1
case|:
return|return
literal|false
return|;
case|case
literal|2
case|:
return|return
name|bool
argument_list|(
literal|2
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|bool
argument_list|(
operator|-
literal|1
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|bool
argument_list|(
literal|127
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|stream_bool_data
name|void
name|tst_QDataStream
operator|::
name|stream_bool_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_bool
name|void
name|tst_QDataStream
operator|::
name|stream_bool
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|bool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writebool
name|void
name|tst_QDataStream
operator|::
name|writebool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|d1
init|=
name|boolData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readbool
name|void
name|tst_QDataStream
operator|::
name|readbool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|bool
name|expected
init|=
name|boolData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|d1
decl_stmt|;
operator|*
name|s
operator|>>
name|d1
expr_stmt|;
name|QVERIFY
argument_list|(
name|d1
operator|==
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|QBoolData
specifier|static
name|QBool
name|QBoolData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QBool
argument_list|(
literal|true
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QBool
argument_list|(
literal|false
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QBool
argument_list|(
name|bool
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QBool
argument_list|(
name|bool
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QBool
argument_list|(
name|bool
argument_list|(
literal|127
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QBool
argument_list|(
literal|false
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stream_QBool_data
name|void
name|tst_QDataStream
operator|::
name|stream_QBool_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QBool
name|void
name|tst_QDataStream
operator|::
name|stream_QBool
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QBool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQBool
name|void
name|tst_QDataStream
operator|::
name|writeQBool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBool
name|d1
init|=
name|QBoolData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQBool
name|void
name|tst_QDataStream
operator|::
name|readQBool
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBool
name|expected
init|=
name|QBoolData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|d1
init|=
literal|true
decl_stmt|;
operator|*
name|s
operator|>>
name|d1
expr_stmt|;
name|QVERIFY
argument_list|(
name|d1
operator|==
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QBool_in_4_0
name|void
name|tst_QDataStream
operator|::
name|stream_QBool_in_4_0
parameter_list|()
block|{
name|QByteArray
name|byteArray
decl_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|byteArray
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QString
name|str
argument_list|(
literal|"ABC"
argument_list|)
decl_stmt|;
name|out
operator|<<
name|str
operator|.
name|contains
argument_list|(
literal|'A'
argument_list|)
operator|<<
name|str
operator|.
name|contains
argument_list|(
literal|'Z'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|byteArray
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|QBitArrayData
specifier|static
name|void
name|QBitArrayData
parameter_list|(
name|QBitArray
modifier|*
name|b
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|QString
name|filler
init|=
literal|""
decl_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
name|filler
operator|=
literal|""
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|filler
operator|=
literal|""
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|filler
operator|=
literal|"0"
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|filler
operator|=
literal|"1"
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|filler
operator|=
literal|"0000"
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|filler
operator|=
literal|"0001"
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|filler
operator|=
literal|"0010"
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|filler
operator|=
literal|"0100"
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|filler
operator|=
literal|"1000"
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|filler
operator|=
literal|"1111"
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|filler
operator|=
literal|"00000000"
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|filler
operator|=
literal|"00000001"
expr_stmt|;
break|break;
case|case
literal|12
case|:
name|filler
operator|=
literal|"11111111"
expr_stmt|;
break|break;
case|case
literal|13
case|:
name|filler
operator|=
literal|"000000001"
expr_stmt|;
break|break;
case|case
literal|14
case|:
name|filler
operator|=
literal|"000000000001"
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|filler
operator|=
literal|"0000000000000001"
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|filler
operator|=
literal|"0101010101010101010101010101010101010101010101010101010101010101"
expr_stmt|;
break|break;
case|case
literal|17
case|:
name|filler
operator|=
literal|"1010101010101010101010101010101010101010101010101010101010101010"
expr_stmt|;
break|break;
case|case
literal|18
case|:
name|filler
operator|=
literal|"1111111111111111111111111111111111111111111111111111111111111111"
expr_stmt|;
break|break;
block|}
name|b
operator|->
name|resize
argument_list|(
name|filler
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|->
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// reset all bits to zero
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filler
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|filler
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
name|b
operator|->
name|setBit
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stream_QBitArray_data
name|void
name|tst_QDataStream
operator|::
name|stream_QBitArray_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|19
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QBitArray
name|void
name|tst_QDataStream
operator|::
name|stream_QBitArray
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QBitArray
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQBitArray
name|void
name|tst_QDataStream
operator|::
name|writeQBitArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBitArray
name|d1
decl_stmt|;
name|QBitArrayData
argument_list|(
operator|&
name|d1
argument_list|,
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|s
operator|<<
name|d1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQBitArray
name|void
name|tst_QDataStream
operator|::
name|readQBitArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBitArray
name|expected
decl_stmt|;
name|QBitArrayData
argument_list|(
operator|&
name|expected
argument_list|,
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QBitArray
name|d1
decl_stmt|;
operator|*
name|s
operator|>>
name|d1
expr_stmt|;
name|QVERIFY
argument_list|(
name|d1
operator|==
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qBrushData
specifier|static
name|QBrush
name|qBrushData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|SolidPattern
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|Dense7Pattern
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
name|Qt
operator|::
name|NoBrush
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|green
argument_list|,
name|Qt
operator|::
name|SolidPattern
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|blue
argument_list|,
name|Qt
operator|::
name|Dense7Pattern
argument_list|)
return|;
case|case
literal|6
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QBrush
name|custom
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
name|pm
argument_list|)
decl_stmt|;
return|return
name|custom
return|;
block|}
case|case
literal|7
case|:
name|QLinearGradient
name|gradient
argument_list|(
name|QPoint
argument_list|(
literal|2.718
argument_list|,
literal|3.142
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|3.1337
argument_list|,
literal|42
argument_list|)
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setCoordinateMode
argument_list|(
name|QGradient
operator|::
name|ObjectBoundingMode
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setSpread
argument_list|(
name|QGradient
operator|::
name|ReflectSpread
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setInterpolationMode
argument_list|(
name|QGradient
operator|::
name|ComponentInterpolation
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0.2
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0.6
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0.8
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
return|return
name|QBrush
argument_list|(
name|gradient
argument_list|)
return|;
block|}
return|return
name|QBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stream_QBrush_data
name|void
name|tst_QDataStream
operator|::
name|stream_QBrush_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QBrush
name|void
name|tst_QDataStream
operator|::
name|stream_QBrush
parameter_list|()
block|{
if|if
condition|(
name|QString
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"6"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Custom brushes don't seem to be supported with QDataStream"
argument_list|)
expr_stmt|;
name|STREAM_IMPL
argument_list|(
name|QBrush
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQBrush
name|void
name|tst_QDataStream
operator|::
name|writeQBrush
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBrush
name|brush
init|=
name|qBrushData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|brush
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQBrush
name|void
name|tst_QDataStream
operator|::
name|readQBrush
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QBrush
name|d2
decl_stmt|;
operator|*
name|s
operator|>>
name|d2
expr_stmt|;
name|QBrush
name|brush
init|=
name|qBrushData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|d2
operator|==
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|QColorData
specifier|static
name|QColor
name|QColorData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stream_QColor_data
name|void
name|tst_QDataStream
operator|::
name|stream_QColor_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QColor
name|void
name|tst_QDataStream
operator|::
name|stream_QColor
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQColor
name|void
name|tst_QDataStream
operator|::
name|writeQColor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QColor
name|d3
argument_list|(
name|QColorData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQColor
name|void
name|tst_QDataStream
operator|::
name|readQColor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QColor
name|test
argument_list|(
name|QColorData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QColor
name|d3
decl_stmt|;
operator|*
name|s
operator|>>
name|d3
expr_stmt|;
name|QVERIFY
argument_list|(
name|d3
operator|==
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qByteArrayData
specifier|static
name|QByteArray
name|qByteArrayData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QByteArray
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|QByteArray
argument_list|(
literal|""
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QByteArray
argument_list|(
literal|"foo bar"
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QByteArray
argument_list|(
literal|"two\nlines"
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QByteArray
argument_list|(
literal|"ABCDEFG"
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QByteArray
argument_list|(
literal|"baec zxv 123"
argument_list|)
return|;
comment|// kept for nostalgic reasons
case|case
literal|7
case|:
return|return
name|QByteArray
argument_list|(
literal|"jbc;UBC;jd clhdbcahd vcbd vgdv dhvb laifv kadf jkhfbvljd khd lhvjh "
argument_list|)
return|;
block|}
return|return
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|stream_QByteArray_data
name|void
name|tst_QDataStream
operator|::
name|stream_QByteArray_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QByteArray
name|void
name|tst_QDataStream
operator|::
name|stream_QByteArray
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QByteArray
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQByteArray
name|void
name|tst_QDataStream
operator|::
name|writeQByteArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QByteArray
name|d4
argument_list|(
name|qByteArrayData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQByteArray
name|void
name|tst_QDataStream
operator|::
name|readQByteArray
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QByteArray
name|test
argument_list|(
name|qByteArrayData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QByteArray
name|d4
decl_stmt|;
operator|*
name|s
operator|>>
name|d4
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d4
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
end_ifndef
begin_function
DECL|function|qCursorData
specifier|static
name|QCursor
name|qCursorData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QCursor
argument_list|(
name|Qt
operator|::
name|ArrowCursor
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QCursor
argument_list|(
name|Qt
operator|::
name|WaitCursor
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QCursor
argument_list|(
name|Qt
operator|::
name|BitmapCursor
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QCursor
argument_list|(
name|Qt
operator|::
name|BlankCursor
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QCursor
argument_list|(
name|Qt
operator|::
name|BlankCursor
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QCursor
argument_list|(
name|QPixmap
argument_list|(
name|open_xpm
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|6
case|:
block|{
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
return|return
name|QCursor
argument_list|(
name|QBitmap
argument_list|(
name|pm
argument_list|)
argument_list|,
name|pm
operator|.
name|mask
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
return|;
block|}
case|case
literal|7
case|:
return|return
name|QCursor
argument_list|(
name|QPixmap
argument_list|(
name|open_xpm
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QCursor
argument_list|(
name|QPixmap
argument_list|(
name|open_xpm
argument_list|)
argument_list|,
literal|5
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
name|QCursor
argument_list|()
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|stream_QCursor_data
name|void
name|tst_QDataStream
operator|::
name|stream_QCursor_data
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|stream_data
argument_list|(
literal|9
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|stream_QCursor
name|void
name|tst_QDataStream
operator|::
name|stream_QCursor
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|STREAM_IMPL
argument_list|(
name|QCursor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|writeQCursor
name|void
name|tst_QDataStream
operator|::
name|writeQCursor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|d5
argument_list|(
name|qCursorData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d5
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readQCursor
name|void
name|tst_QDataStream
operator|::
name|readQCursor
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
name|QCursor
name|test
argument_list|(
name|qCursorData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCursor
name|d5
decl_stmt|;
operator|*
name|s
operator|>>
name|d5
expr_stmt|;
name|QVERIFY
argument_list|(
name|d5
operator|.
name|shape
argument_list|()
operator|==
name|test
operator|.
name|shape
argument_list|()
argument_list|)
expr_stmt|;
comment|//## lacks operator==
name|QVERIFY
argument_list|(
name|d5
operator|.
name|hotSpot
argument_list|()
operator|==
name|test
operator|.
name|hotSpot
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|d5
operator|.
name|bitmap
argument_list|()
operator|!=
literal|0
operator|&&
name|test
operator|.
name|bitmap
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
name|d5
operator|.
name|bitmap
argument_list|()
operator|==
literal|0
operator|&&
name|test
operator|.
name|bitmap
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d5
operator|.
name|bitmap
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QPixmap
name|actual
init|=
operator|*
operator|(
name|d5
operator|.
name|bitmap
argument_list|()
operator|)
decl_stmt|;
name|QPixmap
name|expected
init|=
operator|*
operator|(
name|test
operator|.
name|bitmap
argument_list|()
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|(
name|d5
operator|.
name|mask
argument_list|()
operator|!=
literal|0
operator|&&
name|test
operator|.
name|mask
argument_list|()
operator|!=
literal|0
operator|)
operator|||
operator|(
name|d5
operator|.
name|mask
argument_list|()
operator|==
literal|0
operator|&&
name|test
operator|.
name|mask
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d5
operator|.
name|mask
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QPixmap
name|actual
init|=
operator|*
operator|(
name|d5
operator|.
name|mask
argument_list|()
operator|)
decl_stmt|;
name|QPixmap
name|expected
init|=
operator|*
operator|(
name|test
operator|.
name|mask
argument_list|()
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qDateData
specifier|static
name|QDate
name|qDateData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QDate
argument_list|(
literal|1752
argument_list|,
literal|9
argument_list|,
literal|14
argument_list|)
return|;
comment|// the first valid date
case|case
literal|1
case|:
return|return
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QDate
argument_list|(
literal|1976
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QDate
argument_list|(
literal|1960
argument_list|,
literal|5
argument_list|,
literal|27
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
comment|// w2k effects?
case|case
literal|5
case|:
return|return
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QDate
argument_list|(
literal|2050
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
comment|// test some values far in the future too
case|case
literal|7
case|:
return|return
name|QDate
argument_list|(
literal|3001
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QDate
argument_list|(
literal|4002
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QDate
argument_list|(
literal|4003
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QDate
argument_list|(
literal|5004
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|QDate
argument_list|(
literal|5005
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
case|case
literal|12
case|:
return|return
name|QDate
argument_list|(
literal|6006
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|13
case|:
return|return
name|QDate
argument_list|(
literal|6007
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|QDate
argument_list|(
literal|7008
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|15
case|:
return|return
name|QDate
argument_list|(
literal|7009
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
return|;
block|}
return|return
name|QDate
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QDATE_DATA
define|#
directive|define
name|MAX_QDATE_DATA
value|16
end_define
begin_function
DECL|function|stream_QDate_data
name|void
name|tst_QDataStream
operator|::
name|stream_QDate_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QDATE_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QDate
name|void
name|tst_QDataStream
operator|::
name|stream_QDate
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QDate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQDate
name|void
name|tst_QDataStream
operator|::
name|writeQDate
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QDate
name|d6
argument_list|(
name|qDateData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQDate
name|void
name|tst_QDataStream
operator|::
name|readQDate
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QDate
name|test
argument_list|(
name|qDateData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QDate
name|d6
decl_stmt|;
operator|*
name|s
operator|>>
name|d6
expr_stmt|;
name|QVERIFY
argument_list|(
name|d6
operator|==
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qTimeData
specifier|static
name|QTime
name|qTimeData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|12
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|13
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|15
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|16
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|17
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|18
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|19
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|20
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|21
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|22
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|23
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|24
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|25
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|26
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|27
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|28
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|29
case|:
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|30
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|31
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|32
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|33
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|34
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|35
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|36
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|37
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|38
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|39
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|40
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|41
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|42
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|43
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|44
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|0
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|45
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|46
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|47
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|48
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|49
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|50
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|51
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|52
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|53
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|54
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|,
literal|999
argument_list|)
return|;
case|case
literal|55
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|56
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|57
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|99
argument_list|)
return|;
case|case
literal|58
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|100
argument_list|)
return|;
case|case
literal|59
case|:
return|return
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
return|;
block|}
return|return
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QTIME_DATA
define|#
directive|define
name|MAX_QTIME_DATA
value|60
end_define
begin_function
DECL|function|stream_QTime_data
name|void
name|tst_QDataStream
operator|::
name|stream_QTime_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QTIME_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QTime
name|void
name|tst_QDataStream
operator|::
name|stream_QTime
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQTime
name|void
name|tst_QDataStream
operator|::
name|writeQTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QTime
name|d7
init|=
name|qTimeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d7
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQTime
name|void
name|tst_QDataStream
operator|::
name|readQTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QTime
name|test
init|=
name|qTimeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTime
name|d7
decl_stmt|;
operator|*
name|s
operator|>>
name|d7
expr_stmt|;
name|QVERIFY
argument_list|(
name|d7
operator|==
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qDateTimeData
specifier|static
name|QDateTime
name|qDateTimeData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1999
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
return|;
case|case
literal|12
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|13
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|14
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
case|case
literal|15
case|:
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2000
argument_list|,
literal|12
argument_list|,
literal|31
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
return|;
block|}
return|return
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1900
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QDATETIME_DATA
define|#
directive|define
name|MAX_QDATETIME_DATA
value|16
end_define
begin_function
DECL|function|stream_QDateTime_data
name|void
name|tst_QDataStream
operator|::
name|stream_QDateTime_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QDATETIME_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QDateTime
name|void
name|tst_QDataStream
operator|::
name|stream_QDateTime
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QDateTime
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQDateTime
name|void
name|tst_QDataStream
operator|::
name|writeQDateTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QDateTime
name|dt
argument_list|(
name|qDateTimeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|dt
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQDateTime
name|void
name|tst_QDataStream
operator|::
name|readQDateTime
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QDateTime
name|test
argument_list|(
name|qDateTimeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QDateTime
name|d8
decl_stmt|;
operator|*
name|s
operator|>>
name|d8
expr_stmt|;
name|QVERIFY
argument_list|(
name|d8
operator|==
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qFontData
specifier|static
name|QFont
name|qFontData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|20
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|true
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|18
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|false
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|16
argument_list|,
name|QFont
operator|::
name|Light
argument_list|,
literal|true
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|14
argument_list|,
name|QFont
operator|::
name|Normal
argument_list|,
literal|false
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|12
argument_list|,
name|QFont
operator|::
name|DemiBold
argument_list|,
literal|true
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Black
argument_list|,
literal|false
argument_list|)
return|;
case|case
literal|6
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Normal
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|7
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|8
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Light
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|9
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|DemiBold
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|10
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Black
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|11
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Normal
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|12
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|14
argument_list|)
expr_stmt|;
name|f
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStrikeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFixedPitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
case|case
literal|13
case|:
block|{
name|QFont
name|f
argument_list|(
literal|"Helvetica"
argument_list|,
literal|10
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|f
operator|.
name|setStretch
argument_list|(
literal|200
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
return|return
name|QFont
argument_list|(
literal|"Courier"
argument_list|,
literal|18
argument_list|,
name|QFont
operator|::
name|Bold
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QFONT_DATA
define|#
directive|define
name|MAX_QFONT_DATA
value|14
end_define
begin_function
DECL|function|stream_QFont_data
name|void
name|tst_QDataStream
operator|::
name|stream_QFont_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QFONT_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QFont
name|void
name|tst_QDataStream
operator|::
name|stream_QFont
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QFont
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQFont
name|void
name|tst_QDataStream
operator|::
name|writeQFont
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QFont
name|d9
argument_list|(
name|qFontData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d9
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQFont
name|void
name|tst_QDataStream
operator|::
name|readQFont
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QFont
name|test
argument_list|(
name|qFontData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QFont
name|d9
decl_stmt|;
operator|*
name|s
operator|>>
name|d9
expr_stmt|;
comment|// maybe a bit overkill ...
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|family
argument_list|()
argument_list|,
name|test
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|pointSize
argument_list|()
argument_list|,
name|test
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|pixelSize
argument_list|()
argument_list|,
name|test
operator|.
name|pixelSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|weight
argument_list|()
argument_list|,
name|test
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|bold
argument_list|()
argument_list|,
name|test
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|italic
argument_list|()
argument_list|,
name|test
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|underline
argument_list|()
argument_list|,
name|test
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|overline
argument_list|()
argument_list|,
name|test
operator|.
name|overline
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|strikeOut
argument_list|()
argument_list|,
name|test
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|fixedPitch
argument_list|()
argument_list|,
name|test
operator|.
name|fixedPitch
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|styleHint
argument_list|()
argument_list|,
name|test
operator|.
name|styleHint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
operator|.
name|toString
argument_list|()
argument_list|,
name|test
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d9
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|stream_QImage_data
name|void
name|tst_QDataStream
operator|::
name|stream_QImage_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QImage
name|void
name|tst_QDataStream
operator|::
name|stream_QImage
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QImage
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQImage
name|void
name|tst_QDataStream
operator|::
name|writeQImage
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QImage
name|d12
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d12
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQImage
name|void
name|tst_QDataStream
operator|::
name|readQImage
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QImage
name|ref
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QImage
name|d12
decl_stmt|;
operator|*
name|s
operator|>>
name|d12
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|==
name|ref
argument_list|)
expr_stmt|;
comment|// do some extra neurotic tests
name|QVERIFY
argument_list|(
name|d12
operator|.
name|size
argument_list|()
operator|==
name|ref
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|isNull
argument_list|()
operator|==
name|ref
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|width
argument_list|()
operator|==
name|ref
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|height
argument_list|()
operator|==
name|ref
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|depth
argument_list|()
operator|==
name|ref
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|colorCount
argument_list|()
operator|==
name|ref
operator|.
name|colorCount
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d12
operator|.
name|hasAlphaChannel
argument_list|()
operator|==
name|ref
operator|.
name|hasAlphaChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qPenData
specifier|static
name|QPen
name|qPenData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|blue
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|NoPen
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|MiterJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|1
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|BevelJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|2
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|4
argument_list|,
name|Qt
operator|::
name|DashDotDotLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|RoundCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|RoundJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|3
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|blue
argument_list|,
literal|12
argument_list|,
name|Qt
operator|::
name|NoPen
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|FlatCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|RoundJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|4
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|99
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|SquareCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|MiterJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|5
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|255
argument_list|,
name|Qt
operator|::
name|DashDotLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|RoundCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|BevelJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|6
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|256
argument_list|,
name|Qt
operator|::
name|DashDotLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|RoundCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|BevelJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|7
case|:
block|{
name|QPen
name|p
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|0.25
argument_list|,
name|Qt
operator|::
name|DashDotLine
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCapStyle
argument_list|(
name|Qt
operator|::
name|RoundCap
argument_list|)
expr_stmt|;
name|p
operator|.
name|setJoinStyle
argument_list|(
name|Qt
operator|::
name|BevelJoin
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
return|return
name|QPen
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QPEN_DATA
define|#
directive|define
name|MAX_QPEN_DATA
value|8
end_define
begin_function
DECL|function|stream_QPen_data
name|void
name|tst_QDataStream
operator|::
name|stream_QPen_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QPEN_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QPen
name|void
name|tst_QDataStream
operator|::
name|stream_QPen
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQPen
name|void
name|tst_QDataStream
operator|::
name|writeQPen
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPen
name|d15
argument_list|(
name|qPenData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d15
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQPen
name|void
name|tst_QDataStream
operator|::
name|readQPen
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPen
name|origPen
argument_list|(
name|qPenData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPen
name|d15
decl_stmt|;
operator|*
name|s
operator|>>
name|d15
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d15
operator|.
name|style
argument_list|()
argument_list|,
name|origPen
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d15
operator|.
name|width
argument_list|()
argument_list|,
name|origPen
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d15
operator|.
name|color
argument_list|()
argument_list|,
name|origPen
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d15
operator|.
name|capStyle
argument_list|()
operator|==
name|origPen
operator|.
name|capStyle
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d15
operator|.
name|joinStyle
argument_list|()
operator|==
name|origPen
operator|.
name|joinStyle
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d15
operator|==
name|origPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_comment
comment|// pixmap testing is currently limited to one pixmap only.
end_comment
begin_comment
comment|//
end_comment
begin_function
DECL|function|stream_QPixmap_data
name|void
name|tst_QDataStream
operator|::
name|stream_QPixmap_data
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|stream_data
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|stream_QPixmap
name|void
name|tst_QDataStream
operator|::
name|stream_QPixmap
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Test depends on more memory than available on Qt/CE"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|STREAM_IMPL
argument_list|(
name|QPixmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QIcon_data
name|void
name|tst_QDataStream
operator|::
name|stream_QIcon_data
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|stream_data
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|stream_QIcon
name|void
name|tst_QDataStream
operator|::
name|stream_QIcon
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QSKIP
argument_list|(
literal|"Test depends on more memory than available on Qt/CE"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|STREAM_IMPL
argument_list|(
name|QIcon
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQPixmap
name|void
name|tst_QDataStream
operator|::
name|writeQPixmap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPixmap
name|d16
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQPixmap
name|void
name|tst_QDataStream
operator|::
name|readQPixmap
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QPixmap
name|d16
decl_stmt|;
operator|*
name|s
operator|>>
name|d16
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|d16
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d16
operator|.
name|width
argument_list|()
operator|==
name|pm
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d16
operator|.
name|height
argument_list|()
operator|==
name|pm
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d16
operator|.
name|size
argument_list|()
operator|==
name|pm
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d16
operator|.
name|rect
argument_list|()
operator|==
name|pm
operator|.
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d16
operator|.
name|depth
argument_list|()
operator|==
name|pm
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQIcon
name|void
name|tst_QDataStream
operator|::
name|writeQIcon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QIcon
name|d16
argument_list|(
name|pm
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQIcon
name|void
name|tst_QDataStream
operator|::
name|readQIcon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QIcon
name|icon
argument_list|(
name|pm
argument_list|)
decl_stmt|;
name|QIcon
name|d16
decl_stmt|;
operator|*
name|s
operator|>>
name|d16
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|d16
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|icon
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d16
operator|.
name|pixmap
argument_list|(
literal|100
argument_list|)
argument_list|,
name|pm
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qPointData
name|QPoint
name|qPointData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QPoint
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QPoint
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QPoint
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QPoint
argument_list|(
operator|-
literal|254
argument_list|,
operator|-
literal|254
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QPoint
argument_list|(
operator|-
literal|255
argument_list|,
operator|-
literal|255
argument_list|)
return|;
block|}
return|return
name|QPoint
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QPOINT_DATA
define|#
directive|define
name|MAX_QPOINT_DATA
value|11
end_define
begin_function
DECL|function|stream_QPoint_data
name|void
name|tst_QDataStream
operator|::
name|stream_QPoint_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QPOINT_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QPoint
name|void
name|tst_QDataStream
operator|::
name|stream_QPoint
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QPoint
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQPoint
name|void
name|tst_QDataStream
operator|::
name|writeQPoint
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPoint
name|d17
argument_list|(
name|qPointData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d17
expr_stmt|;
name|QPointF
name|d17f
init|=
name|d17
decl_stmt|;
operator|*
name|s
operator|<<
name|d17f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQPoint
name|void
name|tst_QDataStream
operator|::
name|readQPoint
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPoint
name|ref
argument_list|(
name|qPointData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPoint
name|d17
decl_stmt|;
operator|*
name|s
operator|>>
name|d17
expr_stmt|;
name|QVERIFY
argument_list|(
name|d17
operator|==
name|ref
argument_list|)
expr_stmt|;
name|QPointF
name|d17f
decl_stmt|;
operator|*
name|s
operator|>>
name|d17f
expr_stmt|;
name|QVERIFY
argument_list|(
name|d17f
operator|==
name|QPointF
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qRectData
specifier|static
name|QRect
name|qRectData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QRect
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
operator|-
literal|3
argument_list|,
operator|-
literal|4
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QRect
argument_list|(
literal|255
argument_list|,
operator|-
literal|5
argument_list|,
literal|256
argument_list|,
operator|-
literal|6
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QRect
argument_list|(
operator|-
literal|7
argument_list|,
literal|255
argument_list|,
operator|-
literal|8
argument_list|,
literal|256
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QRect
argument_list|(
literal|9
argument_list|,
operator|-
literal|255
argument_list|,
literal|10
argument_list|,
operator|-
literal|255
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QRect
argument_list|(
operator|-
literal|255
argument_list|,
literal|11
argument_list|,
operator|-
literal|255
argument_list|,
literal|12
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QRect
argument_list|(
literal|256
argument_list|,
literal|512
argument_list|,
literal|1024
argument_list|,
literal|2048
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QRect
argument_list|(
operator|-
literal|256
argument_list|,
operator|-
literal|512
argument_list|,
operator|-
literal|1024
argument_list|,
operator|-
literal|2048
argument_list|)
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QRECT_DATA
define|#
directive|define
name|MAX_QRECT_DATA
value|11
end_define
begin_function
DECL|function|stream_QRect_data
name|void
name|tst_QDataStream
operator|::
name|stream_QRect_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QRECT_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QRect
name|void
name|tst_QDataStream
operator|::
name|stream_QRect
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQRect
name|void
name|tst_QDataStream
operator|::
name|writeQRect
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRect
name|d18
argument_list|(
name|qRectData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d18
expr_stmt|;
name|QRectF
name|d18f
argument_list|(
name|d18
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d18f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQRect
name|void
name|tst_QDataStream
operator|::
name|readQRect
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRect
name|ref
argument_list|(
name|qRectData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QRect
name|d18
decl_stmt|;
operator|*
name|s
operator|>>
name|d18
expr_stmt|;
name|QVERIFY
argument_list|(
name|d18
operator|==
name|ref
argument_list|)
expr_stmt|;
name|QRectF
name|d18f
decl_stmt|;
operator|*
name|s
operator|>>
name|d18f
expr_stmt|;
name|QVERIFY
argument_list|(
name|d18f
operator|==
name|QRectF
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qPolygonData
specifier|static
name|QPolygon
name|qPolygonData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QPoint
name|p0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p1
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p2
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p3
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p4
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QPoint
name|p5
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|QPoint
name|p6
argument_list|(
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|QPoint
name|p7
argument_list|(
literal|0
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|QPoint
name|p8
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p9
argument_list|(
literal|256
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p10
argument_list|(
literal|1024
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|p11
argument_list|(
literal|345
argument_list|,
literal|678
argument_list|)
decl_stmt|;
name|QPoint
name|p12
argument_list|(
literal|23456
argument_list|,
literal|99999
argument_list|)
decl_stmt|;
name|QPoint
name|p13
argument_list|(
operator|-
literal|99998
argument_list|,
operator|-
literal|34567
argument_list|)
decl_stmt|;
name|QPoint
name|p14
argument_list|(
literal|45678
argument_list|,
operator|-
literal|99999
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QPolygon
argument_list|(
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p0
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|2
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p5
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|3
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p12
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|4
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|1
argument_list|,
name|p10
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|2
argument_list|,
name|p13
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|5
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|1
argument_list|,
name|p11
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|2
argument_list|,
name|p14
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
case|case
literal|6
case|:
block|{
name|QPolygon
name|p
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|0
argument_list|,
name|p0
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|1
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|2
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|3
argument_list|,
name|p3
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|4
argument_list|,
name|p4
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|5
argument_list|,
name|p5
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|6
argument_list|,
name|p6
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|7
argument_list|,
name|p7
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|8
argument_list|,
name|p8
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|9
argument_list|,
name|p9
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|10
argument_list|,
name|p10
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|11
argument_list|,
name|p11
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|12
argument_list|,
name|p12
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|13
argument_list|,
name|p13
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPoint
argument_list|(
literal|14
argument_list|,
name|p14
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QPOINTARRAY_DATA
define|#
directive|define
name|MAX_QPOINTARRAY_DATA
value|7
end_define
begin_function
DECL|function|stream_QPolygon_data
name|void
name|tst_QDataStream
operator|::
name|stream_QPolygon_data
parameter_list|()
block|{
name|stream_data
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QPolygon
name|void
name|tst_QDataStream
operator|::
name|stream_QPolygon
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QPolygon
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQPolygon
name|void
name|tst_QDataStream
operator|::
name|writeQPolygon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPolygon
name|d19
argument_list|(
name|qPolygonData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d19
expr_stmt|;
name|QPolygonF
name|d19f
argument_list|(
name|d19
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d19f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQPolygon
name|void
name|tst_QDataStream
operator|::
name|readQPolygon
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QPolygon
name|ref
argument_list|(
name|qPolygonData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPolygon
name|d19
decl_stmt|;
operator|*
name|s
operator|>>
name|d19
expr_stmt|;
name|QVERIFY
argument_list|(
name|d19
operator|==
name|ref
argument_list|)
expr_stmt|;
name|QPolygonF
name|d19f
decl_stmt|;
operator|*
name|s
operator|>>
name|d19f
expr_stmt|;
name|QVERIFY
argument_list|(
name|d19f
operator|==
name|QPolygonF
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qRegionData
specifier|static
name|QRegion
name|qRegionData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
return|;
case|case
literal|1
case|:
block|{
name|QRegion
name|r
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
name|QRegion
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
condition|)
name|qDebug
argument_list|(
literal|"Error creating a region"
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
literal|2
case|:
return|return
name|QRegion
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|1024
argument_list|,
literal|768
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QRegion
argument_list|(
operator|-
literal|100
argument_list|,
operator|-
literal|100
argument_list|,
literal|1024
argument_list|,
literal|1024
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QRegion
argument_list|(
literal|100
argument_list|,
operator|-
literal|100
argument_list|,
literal|2048
argument_list|,
literal|4096
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QRegion
argument_list|(
operator|-
literal|100
argument_list|,
literal|100
argument_list|,
literal|4096
argument_list|,
literal|2048
argument_list|,
name|QRegion
operator|::
name|Rectangle
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
comment|// all our Unix platforms use X regions.
case|case
literal|7
case|:
return|return
name|QRegion
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QRegion
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|1024
argument_list|,
literal|768
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QRegion
argument_list|(
operator|-
literal|100
argument_list|,
operator|-
literal|100
argument_list|,
literal|1024
argument_list|,
literal|1024
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QRegion
argument_list|(
literal|100
argument_list|,
operator|-
literal|100
argument_list|,
literal|2048
argument_list|,
literal|4096
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|QRegion
argument_list|(
operator|-
literal|100
argument_list|,
literal|100
argument_list|,
literal|4096
argument_list|,
literal|2048
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
comment|// simplest X11 case that fails:
case|case
literal|12
case|:
return|return
name|QRegion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
return|;
else|#
directive|else
case|case
literal|7
case|:
name|qWarning
argument_list|(
literal|"Skipping streaming of elliptical regions on embedded, Mac OS X, and X11;"
literal|" our pointarray stuff is not that great at approximating."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|QRegion
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QREGION_DATA
define|#
directive|define
name|MAX_QREGION_DATA
value|12
end_define
begin_function
DECL|function|stream_QRegion_data
name|void
name|tst_QDataStream
operator|::
name|stream_QRegion_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QREGION_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QRegion
name|void
name|tst_QDataStream
operator|::
name|stream_QRegion
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QRegion
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQRegion
name|void
name|tst_QDataStream
operator|::
name|writeQRegion
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRegion
name|r
argument_list|(
name|qRegionData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|r
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQRegion
name|void
name|tst_QDataStream
operator|::
name|readQRegion
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QRegion
name|ref
argument_list|(
name|qRegionData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QRegion
name|r
decl_stmt|;
operator|*
name|s
operator|>>
name|r
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|==
name|ref
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// ************************************
end_comment
begin_function
DECL|function|qSizeData
specifier|static
name|QSize
name|qSizeData
parameter_list|(
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|index
condition|)
block|{
case|case
literal|0
case|:
return|return
name|QSize
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|QSize
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|QSize
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|QSize
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|QSize
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|QSize
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|QSize
argument_list|(
operator|-
literal|254
argument_list|,
operator|-
literal|254
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|QSize
argument_list|(
operator|-
literal|255
argument_list|,
operator|-
literal|255
argument_list|)
return|;
block|}
return|return
name|QSize
argument_list|()
return|;
block|}
end_function
begin_define
DECL|macro|MAX_QSIZE_DATA
define|#
directive|define
name|MAX_QSIZE_DATA
value|11
end_define
begin_function
DECL|function|stream_QSize_data
name|void
name|tst_QDataStream
operator|::
name|stream_QSize_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QSIZE_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_QSize
name|void
name|tst_QDataStream
operator|::
name|stream_QSize
parameter_list|()
block|{
name|STREAM_IMPL
argument_list|(
name|QSize
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeQSize
name|void
name|tst_QDataStream
operator|::
name|writeQSize
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QSize
name|d21
argument_list|(
name|qSizeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d21
expr_stmt|;
name|QSizeF
name|d21f
argument_list|(
name|d21
argument_list|)
decl_stmt|;
operator|*
name|s
operator|<<
name|d21f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readQSize
name|void
name|tst_QDataStream
operator|::
name|readQSize
parameter_list|(
name|QDataStream
modifier|*
name|s
parameter_list|)
block|{
name|QSize
name|ref
argument_list|(
name|qSizeData
argument_list|(
name|dataIndex
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSize
name|d21
decl_stmt|;
operator|*
name|s
operator|>>
name|d21
expr_stmt|;
name|QVERIFY
argument_list|(
name|d21
operator|==
name|ref
argument_list|)
expr_stmt|;
name|QSizeF
name|d21f
decl_stmt|;
operator|*
name|s
operator|>>
name|d21f
expr_stmt|;
name|QVERIFY
argument_list|(
name|d21f
operator|==
name|QSizeF
argument_list|(
name|ref
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// *********************** atEnd ******************************
end_comment
begin_function
DECL|function|stream_atEnd_data
name|void
name|tst_QDataStream
operator|::
name|stream_atEnd_data
parameter_list|()
block|{
name|stream_data
argument_list|(
name|MAX_QSTRING_DATA
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stream_atEnd
name|void
name|tst_QDataStream
operator|::
name|stream_atEnd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|device
argument_list|)
expr_stmt|;
if|if
condition|(
name|device
operator|==
literal|"bytearray"
condition|)
block|{
name|QByteArray
name|ba
decl_stmt|;
name|QDataStream
name|sout
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|writeQString
argument_list|(
operator|&
name|sout
argument_list|)
expr_stmt|;
name|QDataStream
name|sin
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|readQString
argument_list|(
operator|&
name|sin
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sin
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|device
operator|==
literal|"file"
condition|)
block|{
name|QString
name|fileName
init|=
literal|"qdatastream.out"
decl_stmt|;
name|QFile
name|fOut
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fOut
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|sout
argument_list|(
operator|&
name|fOut
argument_list|)
decl_stmt|;
name|writeQString
argument_list|(
operator|&
name|sout
argument_list|)
expr_stmt|;
name|fOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFile
name|fIn
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fIn
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|sin
argument_list|(
operator|&
name|fIn
argument_list|)
decl_stmt|;
name|readQString
argument_list|(
operator|&
name|sin
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sin
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|fIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|device
operator|==
literal|"buffer"
condition|)
block|{
block|{
name|QByteArray
name|ba
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QBuffer
name|bOut
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|bOut
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|sout
argument_list|(
operator|&
name|bOut
argument_list|)
decl_stmt|;
name|writeQString
argument_list|(
operator|&
name|sout
argument_list|)
expr_stmt|;
name|bOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|QBuffer
name|bIn
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|bIn
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|sin
argument_list|(
operator|&
name|bIn
argument_list|)
decl_stmt|;
name|readQString
argument_list|(
operator|&
name|sin
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sin
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|bIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Do the same test again, but this time with an initial size for the bytearray.
block|{
name|QByteArray
name|ba
argument_list|(
literal|10000
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
name|QBuffer
name|bOut
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|bOut
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|QDataStream
name|sout
argument_list|(
operator|&
name|bOut
argument_list|)
decl_stmt|;
name|writeQString
argument_list|(
operator|&
name|sout
argument_list|)
expr_stmt|;
name|bOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|QBuffer
name|bIn
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|bIn
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|sin
argument_list|(
operator|&
name|bIn
argument_list|)
decl_stmt|;
name|readQString
argument_list|(
operator|&
name|sin
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sin
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|bIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|FakeBuffer
class|class
name|FakeBuffer
super|:
specifier|public
name|QBuffer
block|{
protected|protected:
DECL|function|writeData
name|qint64
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|c
parameter_list|,
name|qint64
name|i
parameter_list|)
block|{
return|return
name|m_lock
condition|?
literal|0
else|:
name|QBuffer
operator|::
name|writeData
argument_list|(
name|c
argument_list|,
name|i
argument_list|)
return|;
block|}
public|public:
DECL|function|FakeBuffer
name|FakeBuffer
parameter_list|(
name|bool
name|locked
init|=
literal|false
parameter_list|)
member_init_list|:
name|m_lock
argument_list|(
name|locked
argument_list|)
block|{}
DECL|function|setLocked
name|void
name|setLocked
parameter_list|(
name|bool
name|locked
parameter_list|)
block|{
name|m_lock
operator|=
name|locked
expr_stmt|;
block|}
private|private:
DECL|member|m_lock
name|bool
name|m_lock
decl_stmt|;
block|}
class|;
end_class
begin_define
DECL|macro|TEST_WRITE_ERROR
define|#
directive|define
name|TEST_WRITE_ERROR
parameter_list|(
name|op
parameter_list|)
define|\
value|{ \         FakeBuffer fb(false); \         QVERIFY(fb.open(QBuffer::ReadWrite)); \         QDataStream fs(&fb); \         fs.writeRawData("hello", 5); \
comment|/* first write some initial content */
value|\         QCOMPARE(fs.status(), QDataStream::Ok); \         QCOMPARE(fb.data(), QByteArray("hello")); \
comment|/* then test that writing can cause an error */
value|\         fb.setLocked(true); \         fs op; \         QCOMPARE(fs.status(), QDataStream::WriteFailed); \         QCOMPARE(fb.data(), QByteArray("hello")); \
comment|/* finally test that writing after an error doesn't change the stream any more */
value|\         fb.setLocked(false); \         fs op; \         QCOMPARE(fs.status(), QDataStream::WriteFailed); \         QCOMPARE(fb.data(), QByteArray("hello")); \     }
end_define
begin_function
DECL|function|stream_writeError
name|void
name|tst_QDataStream
operator|::
name|stream_writeError
parameter_list|()
block|{
name|TEST_WRITE_ERROR
argument_list|(
argument|<<
literal|true
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (qint8)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (quint8)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (qint16)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (quint16)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (qint32)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (quint32)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (qint64)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (quint64)
literal|1
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<<
literal|"hello"
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (float)
literal|1.0
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|<< (double)
literal|1.0
argument_list|)
name|TEST_WRITE_ERROR
argument_list|(
argument|.writeRawData(
literal|"test"
argument|,
literal|4
argument|)
argument_list|)
block|}
end_function
begin_function
DECL|function|stream_QByteArray2
name|void
name|tst_QDataStream
operator|::
name|stream_QByteArray2
parameter_list|()
block|{
name|QByteArray
name|ba
decl_stmt|;
block|{
name|QDataStream
name|s
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|s
operator|<<
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
expr_stmt|;
name|s
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|s
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
block|}
block|{
name|QDataStream
name|s
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QByteArray
name|res
decl_stmt|;
name|s
operator|>>
name|res
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
argument_list|,
name|QByteArray
argument_list|(
literal|"hallo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|>>
name|res
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
argument_list|,
name|QByteArray
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|res
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|>>
name|res
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setVersion_data
name|void
name|tst_QDataStream
operator|::
name|setVersion_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"vers"
argument_list|)
expr_stmt|;
name|QDataStream
name|latest
decl_stmt|;
for|for
control|(
name|int
name|vers
init|=
literal|1
init|;
name|vers
operator|<=
name|latest
operator|.
name|version
argument_list|()
condition|;
operator|++
name|vers
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"v_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|vers
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|vers
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setVersion
name|void
name|tst_QDataStream
operator|::
name|setVersion
parameter_list|()
block|{
name|QDataStream
name|latest
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|vers
argument_list|)
expr_stmt|;
comment|/*         Test QKeySequence.     */
name|QByteArray
name|ba1
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|ba1
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|vers
argument_list|)
expr_stmt|;
name|out
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
operator|<<
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
operator|<<
operator|(
name|quint32
operator|)
literal|0xDEADBEEF
expr_stmt|;
block|}
block|{
name|QKeySequence
name|keyseq1
decl_stmt|,
name|keyseq2
decl_stmt|;
name|quint32
name|deadbeef
decl_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|ba1
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|vers
argument_list|)
expr_stmt|;
name|in
operator|>>
name|keyseq1
operator|>>
name|keyseq2
operator|>>
name|deadbeef
expr_stmt|;
name|QVERIFY
argument_list|(
name|keyseq1
operator|==
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_A
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|vers
operator|>=
literal|5
condition|)
block|{
name|QVERIFY
argument_list|(
name|keyseq2
operator|==
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|,
name|Qt
operator|::
name|Key_C
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|keyseq2
operator|==
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|Key_B
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|deadbeef
operator|==
literal|0xDEADBEEF
argument_list|)
expr_stmt|;
block|}
comment|/*         Test QPalette.     */
comment|// revise the test if new color roles or color groups are added
name|QVERIFY
argument_list|(
name|QPalette
operator|::
name|NColorRoles
operator|==
name|QPalette
operator|::
name|ToolTipText
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QPalette
operator|::
name|NColorGroups
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QByteArray
name|ba2
decl_stmt|;
name|QPalette
name|pal1
decl_stmt|,
name|pal2
decl_stmt|;
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorGroups
condition|;
operator|++
name|grp
control|)
block|{
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorRoles
condition|;
operator|++
name|role
control|)
block|{
comment|// random stuff
name|pal1
operator|.
name|setColor
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|role
argument_list|,
name|QColor
argument_list|(
name|grp
operator|*
literal|13
argument_list|,
literal|255
operator|-
name|grp
argument_list|,
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|pal2
operator|.
name|setColor
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|role
argument_list|,
name|QColor
argument_list|(
name|role
operator|*
literal|11
argument_list|,
literal|254
operator|-
name|role
argument_list|,
name|grp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|ba2
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|vers
argument_list|)
expr_stmt|;
name|out
operator|<<
name|pal1
operator|<<
name|pal2
operator|<<
operator|(
name|quint32
operator|)
literal|0xCAFEBABE
expr_stmt|;
block|}
block|{
name|QPalette
name|inPal1
decl_stmt|,
name|inPal2
decl_stmt|;
name|quint32
name|cafebabe
decl_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|ba2
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|vers
argument_list|)
expr_stmt|;
name|in
operator|>>
name|inPal1
operator|>>
name|inPal2
expr_stmt|;
name|in
operator|>>
name|cafebabe
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cafebabe
argument_list|,
literal|0xCAFEBABE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|NColorRoles
index|[
name|latest
operator|.
name|version
argument_list|()
index|]
argument_list|,
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorRoles
argument_list|)
expr_stmt|;
comment|//if this fails you need to update the NColorRoles  array
if|if
condition|(
name|vers
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorGroups
condition|;
operator|++
name|grp
control|)
block|{
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Foreground
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Foreground
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Background
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Background
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Light
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Dark
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Mid
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Mid
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
operator|==
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Midlight
argument_list|)
operator|!=
name|inPal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
name|QPalette
operator|::
name|Midlight
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|NColorRoles
index|[
name|vers
index|]
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|)
block|{
name|QVERIFY
argument_list|(
name|pal1
operator|!=
name|inPal1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal2
operator|!=
name|inPal2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|grp
init|=
literal|0
init|;
name|grp
operator|<
operator|(
name|int
operator|)
name|QPalette
operator|::
name|NColorGroups
condition|;
operator|++
name|grp
control|)
block|{
for|for
control|(
name|int
name|i
init|=
name|NColorRoles
index|[
name|vers
index|]
init|;
name|i
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
operator|++
name|i
control|)
block|{
name|inPal1
operator|.
name|setColor
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|pal1
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|inPal2
operator|.
name|setColor
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|,
name|pal2
operator|.
name|color
argument_list|(
operator|(
name|QPalette
operator|::
name|ColorGroup
operator|)
name|grp
argument_list|,
operator|(
name|QPalette
operator|::
name|ColorRole
operator|)
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QVERIFY
argument_list|(
name|pal1
operator|==
name|inPal1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pal2
operator|==
name|inPal2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|SequentialBuffer
class|class
name|SequentialBuffer
super|:
specifier|public
name|QBuffer
block|{
public|public:
DECL|function|SequentialBuffer
name|SequentialBuffer
parameter_list|(
name|QByteArray
modifier|*
name|data
parameter_list|)
member_init_list|:
name|QBuffer
argument_list|(
name|data
argument_list|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|isSequential
name|bool
name|isSequential
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|seek
name|bool
name|seek
parameter_list|(
name|qint64
name|pos
parameter_list|)
block|{
name|offset
operator|=
name|pos
expr_stmt|;
return|return
name|QBuffer
operator|::
name|seek
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|function|pos
name|qint64
name|pos
parameter_list|()
specifier|const
block|{
return|return
name|qint64
argument_list|(
name|offset
argument_list|)
return|;
block|}
protected|protected:
DECL|function|readData
name|qint64
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxSize
parameter_list|)
block|{
name|qint64
name|ret
init|=
name|QBuffer
operator|::
name|readData
argument_list|(
name|data
argument_list|,
name|maxSize
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
private|private:
DECL|member|offset
name|int
name|offset
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|skipRawData_data
name|void
name|tst_QDataStream
operator|::
name|skipRawData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"deviceType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"read"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"skip"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"skipped"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|char
argument_list|>
argument_list|(
literal|"expect"
argument_list|)
expr_stmt|;
name|QByteArray
name|bigData
decl_stmt|;
name|bigData
operator|.
name|fill
argument_list|(
literal|'a'
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|bigData
index|[
literal|10001
index|]
operator|=
literal|'x'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sequential"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghij"
argument_list|)
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|'j'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"random-access"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abcdefghij"
argument_list|)
operator|<<
literal|3
operator|<<
literal|6
operator|<<
literal|6
operator|<<
literal|'j'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sequential"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|1
operator|<<
literal|10000
operator|<<
literal|10000
operator|<<
literal|'x'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"random-access"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|1
operator|<<
literal|10000
operator|<<
literal|10000
operator|<<
literal|'x'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sequential"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|1
operator|<<
literal|20000
operator|<<
literal|19999
operator|<<
literal|'\0'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"random-access"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|1
operator|<<
literal|20000
operator|<<
literal|19999
operator|<<
literal|'\0'
expr_stmt|;
block|}
end_function
begin_function
DECL|function|skipRawData
name|void
name|tst_QDataStream
operator|::
name|skipRawData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|deviceType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|skip
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|char
argument_list|,
name|expect
argument_list|)
expr_stmt|;
name|qint8
name|dummy
decl_stmt|;
name|QIODevice
modifier|*
name|dev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|deviceType
operator|==
literal|"sequential"
condition|)
block|{
name|dev
operator|=
operator|new
name|SequentialBuffer
argument_list|(
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deviceType
operator|==
literal|"random-access"
condition|)
block|{
name|dev
operator|=
operator|new
name|QBuffer
argument_list|(
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|in
argument_list|(
name|dev
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|read
condition|;
operator|++
name|i
control|)
name|in
operator|>>
name|dummy
expr_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|skipRawData
argument_list|(
name|skip
argument_list|)
argument_list|,
name|skipped
argument_list|)
expr_stmt|;
name|in
operator|>>
name|dummy
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|)
name|dummy
argument_list|,
name|expect
argument_list|)
expr_stmt|;
operator|delete
name|dev
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|TEST_qint
define|#
directive|define
name|TEST_qint
parameter_list|(
name|T
parameter_list|,
name|UT
parameter_list|)
define|\
value|void tst_QDataStream::status_##T() \     { \         QFETCH(QByteArray, bigEndianData); \         QFETCH(QByteArray, littleEndianData); \         QFETCH(int, expectedStatus); \         QFETCH(qint64, expectedValue); \     \         { \             QDataStream stream(&bigEndianData, QIODevice::ReadOnly); \             T i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE(i, (T) expectedValue); \         } \         { \             QDataStream stream(&bigEndianData, QIODevice::ReadOnly); \             UT i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE((T) i, (T) expectedValue); \         } \         { \             QDataStream stream(&littleEndianData, QIODevice::ReadOnly); \             stream.setByteOrder(QDataStream::LittleEndian); \             T i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE(i, (T) expectedValue); \         } \         { \             QDataStream stream(&littleEndianData, QIODevice::ReadOnly); \             stream.setByteOrder(QDataStream::LittleEndian); \             UT i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE((T) i, (T) expectedValue); \         } \     }
end_define
begin_define
DECL|macro|TEST_FLOAT
define|#
directive|define
name|TEST_FLOAT
parameter_list|(
name|T
parameter_list|)
define|\
value|void tst_QDataStream::status_##T() \     { \         QFETCH(QByteArray, bigEndianData); \         QFETCH(QByteArray, littleEndianData); \         QFETCH(int, expectedStatus); \         QFETCH(double, expectedValue); \         \         QDataStream::FloatingPointPrecision prec = sizeof(T) == sizeof(double) ? QDataStream::DoublePrecision : QDataStream::SinglePrecision; \     \         { \             QDataStream stream(&bigEndianData, QIODevice::ReadOnly); \             stream.setFloatingPointPrecision(prec); \             T i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE((float) i, (float) expectedValue); \         } \         { \             QDataStream stream(&littleEndianData, QIODevice::ReadOnly); \             stream.setByteOrder(QDataStream::LittleEndian); \             stream.setFloatingPointPrecision(prec); \             T i; \             stream>> i; \             QCOMPARE((int) stream.status(), expectedStatus); \             QCOMPARE((float) i, (float) expectedValue); \         } \     }
end_define
begin_function
DECL|function|status_qint8_data
name|void
name|tst_QDataStream
operator|::
name|status_qint8_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\xff'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\xff'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x01'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x01'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x25'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\x25'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_qint
argument_list|(
argument|qint8
argument_list|,
argument|quint8
argument_list|)
end_macro
begin_function
DECL|function|status_qint16_data
name|void
name|tst_QDataStream
operator|::
name|status_qint16_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|2
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|2
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x01"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x00"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x25"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x25j"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00j"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x1234"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x12\x34"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x34\x12"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0x1234
argument_list|)
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_qint
argument_list|(
argument|qint16
argument_list|,
argument|quint16
argument_list|)
end_macro
begin_function
DECL|function|status_qint32_data
name|void
name|tst_QDataStream
operator|::
name|status_qint32_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|4
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|4
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x25"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x25j"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00\x00\x00j"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x12345678"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x12\x34\x56\x78"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x78\x56\x34\x12"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0x12345678
argument_list|)
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_qint
argument_list|(
argument|qint32
argument_list|,
argument|quint32
argument_list|)
end_macro
begin_function
DECL|function|status_qint64_data
name|void
name|tst_QDataStream
operator|::
name|status_qint64_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|8
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|8
argument_list|,
literal|'\x0'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff\xff\xff\xff\xff"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff\xff\xff\xff\xff"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\x00\x01"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x01\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\x00\x25"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\x00\x25j"
argument_list|,
literal|9
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25\x00\x00\x00\x00\x00\x00\x00j"
argument_list|,
literal|9
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|qint64
argument_list|(
literal|37
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0x123456789ABCDEF0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x12\x34\x56\x78\x9a\xbc\xde\xf0"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xf0\xde\xbc\x9a\x78\x56\x34\x12"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|qint64
operator|)
name|Q_INT64_C
argument_list|(
literal|0x123456789ABCDEF0
argument_list|)
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11111"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11111"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111111"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111111"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111111"
argument_list|,
literal|7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111111"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|qint64
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_qint
argument_list|(
argument|qint64
argument_list|,
argument|quint64
argument_list|)
end_macro
begin_function
DECL|function|status_float_data
name|void
name|tst_QDataStream
operator|::
name|status_float_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|4
argument_list|,
literal|'\0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|4
argument_list|,
literal|'\0'
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xbf\x80\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x80\xbf"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x3f\x80\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x80\x3f"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x42\x14\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x14\x42"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|37
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x42\x14\x00\x00j"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x14\x42j"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|37
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3.14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x40\x48\xf5\xc3"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xc3\xf5\x48\x40"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|3.14
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_FLOAT
argument_list|(
argument|float
argument_list|)
end_macro
begin_function
DECL|function|status_double_data
name|void
name|tst_QDataStream
operator|::
name|status_double_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"bigEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"littleEndianData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xbf\xf0\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\xf0\xbf"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x3f\xf0\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x00\xf0\x3f"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x40\x42\x80\x00\x00\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x80\x42\x40"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|37
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"37j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x40\x42\x80\x00\x00\x00\x00\x00j"
argument_list|,
literal|9
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00\x00\x80\x42\x40j"
argument_list|,
literal|9
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|37
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3.14"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x40\x09\x1e\xb8\x60\x00\x00\x00"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x60\xb8\x1e\x09\x40"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|3.14
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1234.5678"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x40\x93\x4a\x45\x6d\x5c\xfa\xad"
argument_list|,
literal|8
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xad\xfa\x5c\x6d\x45\x4a\x93\x40"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
operator|(
name|double
operator|)
literal|1234.5678
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x25"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111"
argument_list|,
literal|4
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11111"
argument_list|,
literal|5
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11111"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111111"
argument_list|,
literal|6
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"111111"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"end 8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111111"
argument_list|,
literal|7
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1111111"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|double
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|TEST_FLOAT
argument_list|(
argument|double
argument_list|)
end_macro
begin_function
DECL|function|status_charptr_QByteArray_data
name|void
name|tst_QDataStream
operator|::
name|status_charptr_QByteArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QByteArray
name|oneMbMinus1
argument_list|(
literal|1024
operator|*
literal|1024
operator|-
literal|1
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oneMbMinus1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|oneMbMinus1
index|[
name|i
index|]
operator|=
literal|0x1
operator||
operator|(
literal|8
operator|*
operator|(
operator|(
name|uchar
operator|)
name|i
operator|/
literal|9
operator|)
operator|)
expr_stmt|;
name|QByteArray
name|threeMbMinus1
init|=
name|oneMbMinus1
operator|+
literal|'j'
operator|+
name|oneMbMinus1
operator|+
literal|'k'
operator|+
name|oneMbMinus1
decl_stmt|;
endif|#
directive|endif
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01j"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02jk"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|(
literal|"jk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x03jkl"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|(
literal|"jkl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04jklm"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|(
literal|"jklm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 4j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04jklmj"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QByteArray
argument_list|(
literal|"jklm"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x0f\xff\xff"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x10\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"jkl"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
operator|+
literal|"j"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x10\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"jkl"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
operator|+
literal|"jk"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x2f\xff\xff"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x30\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"jkl"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
operator|+
literal|"j"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x30\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"jkl"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
operator|+
literal|"jk"
expr_stmt|;
endif|#
directive|endif
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"truncdata 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxxx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"truncdata 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxxxyyyy"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02j"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x03jk"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04jkl"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x10\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x10\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x30\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x30\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size -1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size -2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xfe"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_charptr_QByteArray
name|void
name|tst_QDataStream
operator|::
name|status_charptr_QByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|char
modifier|*
name|buf
decl_stmt|;
name|stream
operator|>>
name|buf
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|qstrlen
argument_list|(
name|buf
argument_list|)
argument_list|,
name|expectedString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|buf
argument_list|)
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|)
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|char
modifier|*
name|buf
decl_stmt|;
name|uint
name|len
decl_stmt|;
name|stream
operator|.
name|readBytes
argument_list|(
name|buf
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
name|expectedString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|buf
argument_list|,
name|len
argument_list|)
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|)
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
operator|delete
index|[]
name|buf
expr_stmt|;
block|}
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QByteArray
name|buf
decl_stmt|;
name|stream
operator|>>
name|buf
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|startsWith
argument_list|(
literal|"\xff\xff\xff\xff"
argument_list|)
condition|)
block|{
comment|// QByteArray, unlike 'char *', supports the null/empty distinction
name|QVERIFY
argument_list|(
name|buf
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|,
name|expectedString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|)
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qstring2qbytearray
specifier|static
name|QByteArray
name|qstring2qbytearray
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|QByteArray
name|ba
argument_list|(
name|str
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// BigEndian
name|ba
index|[
literal|2
operator|*
name|i
index|]
operator|=
name|str
index|[
name|i
index|]
operator|.
name|row
argument_list|()
expr_stmt|;
name|ba
index|[
literal|2
operator|*
name|i
operator|+
literal|1
index|]
operator|=
name|str
index|[
name|i
index|]
operator|.
name|cell
argument_list|()
expr_stmt|;
block|}
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|status_QString_data
name|void
name|tst_QDataStream
operator|::
name|status_QString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QString
name|oneMbMinus1
decl_stmt|;
name|oneMbMinus1
operator|.
name|resize
argument_list|(
literal|1024
operator|*
literal|1024
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|oneMbMinus1
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|oneMbMinus1
index|[
name|i
index|]
operator|=
literal|0x1
operator||
operator|(
literal|8
operator|*
operator|(
operator|(
name|uchar
operator|)
name|i
operator|/
literal|9
operator|)
operator|)
expr_stmt|;
name|QString
name|threeMbMinus1
init|=
name|oneMbMinus1
operator|+
name|QChar
argument_list|(
literal|'j'
argument_list|)
operator|+
name|oneMbMinus1
operator|+
name|QChar
argument_list|(
literal|'k'
argument_list|)
operator|+
name|oneMbMinus1
decl_stmt|;
name|QByteArray
name|threeMbMinus1Data
init|=
name|qstring2qbytearray
argument_list|(
name|threeMbMinus1
argument_list|)
decl_stmt|;
name|QByteArray
name|oneMbMinus1Data
init|=
name|qstring2qbytearray
argument_list|(
name|oneMbMinus1
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02\x00j"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|(
literal|"j"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04\x00j\x00k"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|(
literal|"jk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x06\x00j\x00k\x00l"
argument_list|,
literal|10
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|(
literal|"jkl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x08\x00j\x00k\x00l\x00m"
argument_list|,
literal|12
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|(
literal|"jklm"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 4j"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x08\x00j\x00k\x00l\x00mjj"
argument_list|,
literal|14
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QString
argument_list|(
literal|"jklm"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x1f\xff\xfe"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"jj"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x20\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"\x00j\x00k\x00l"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
operator|+
literal|"j"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x20\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"\x00j\x00k\x00l"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|oneMbMinus1
operator|+
literal|"jk"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB-1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x5f\xff\xfe"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"jj"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x60\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"\x00j\x00k\x00l"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
operator|+
literal|"j"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x60\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"\x00j\x00k\x00l"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|threeMbMinus1
operator|+
literal|"jk"
expr_stmt|;
endif|#
directive|endif
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"x"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trunclen 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"truncdata 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxxx"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"truncdata 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"xxxxyyyy"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04jj"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x06jjkk"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x08jjkkll"
argument_list|,
literal|10
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x20\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1Data
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x20\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|+
name|oneMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3MB"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x60\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1Data
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3MB+1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x60\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|+
name|threeMbMinus1Data
operator|+
name|QByteArray
argument_list|(
literal|"j"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size -2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xfe"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size MAX"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x7f\xff\xff\xfe"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QString
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// corrupt data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"corrupt1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"yyyy"
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size -3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\xff\xff\xff\xfd"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_QString
name|void
name|tst_QDataStream
operator|::
name|status_QString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QString
name|str
decl_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|expectedString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|)
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bitarray
specifier|static
name|QBitArray
name|bitarray
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|QBitArray
name|array
argument_list|(
name|str
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|array
index|[
name|i
index|]
operator|=
operator|(
name|str
index|[
name|i
index|]
operator|!=
literal|'0'
operator|)
expr_stmt|;
return|return
name|array
return|;
block|}
end_function
begin_function
DECL|function|status_QBitArray_data
name|void
name|tst_QDataStream
operator|::
name|status_QBitArray_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QBitArray
argument_list|>
argument_list|(
literal|"expectedString"
argument_list|)
expr_stmt|;
comment|// ok
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 0"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x00"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x01"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02\x03"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x03\x07"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04\x0f"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"1111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x05\x1f"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"11111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x06\x3f"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 7a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x07\x7f"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"1111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 7b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x07\x7e"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"0111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 7c"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x07\x00"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"0000000"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 7d"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x07\x39"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"1001110"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x08\xff"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"11111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x09\xff\x01"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"111111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x0f\xff\x7f"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"111111111111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 16"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x10\xff\xff"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"1111111111111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 17"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x11\xff\xff\x01"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"11111111111111111"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 32"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x20\xff\xff\xff\xff"
argument_list|,
literal|8
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|Ok
operator|<<
name|bitarray
argument_list|(
literal|"11111111111111111111111111111111"
argument_list|)
expr_stmt|;
comment|// past end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 0a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00"
argument_list|,
literal|1
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 0a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00"
argument_list|,
literal|2
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 0a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00"
argument_list|,
literal|3
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x03"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"badsize 7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 8"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x08"
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 9"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x09\xff"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 15"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x0f\xff"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 16"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x10\xff"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 17"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x11\xff\xff"
argument_list|,
literal|6
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 32"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x20\xff\xff\xff"
argument_list|,
literal|7
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadPastEnd
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
comment|// corrupt data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1a"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x02"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1b"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x04"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1c"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x08"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1d"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x10"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1e"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x20"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1f"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x40"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 1g"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x80"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02\x04"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x03\x08"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x04\x10"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x05\x20"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 6"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x06\x40"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk 7"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x07\x80"
argument_list|,
literal|5
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QDataStream
operator|::
name|ReadCorruptData
operator|<<
name|QBitArray
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|status_QBitArray
name|void
name|tst_QDataStream
operator|::
name|status_QBitArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QBitArray
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|QBitArray
name|str
decl_stmt|;
name|stream
operator|>>
name|str
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|)
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
operator|.
name|size
argument_list|()
argument_list|,
name|expectedString
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|expectedString
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|MAP_TEST
define|#
directive|define
name|MAP_TEST
parameter_list|(
name|byteArray
parameter_list|,
name|expectedStatus
parameter_list|,
name|expectedHash
parameter_list|)
define|\
value|{ \         QByteArray ba = byteArray; \         QDataStream stream(&ba, QIODevice::ReadOnly); \         stream>> hash; \         QCOMPARE((int)stream.status(), (int)expectedStatus); \         QCOMPARE(hash.size(), expectedHash.size()); \         QCOMPARE(hash, expectedHash); \     } \     { \         QByteArray ba = byteArray; \         StringMap expectedMap; \         StringHash::const_iterator it = expectedHash.constBegin(); \         for (; it != expectedHash.constEnd(); ++it) \             expectedMap.insert(it.key(), it.value()); \         QDataStream stream(&ba, QIODevice::ReadOnly); \         stream>> map; \         QCOMPARE((int)stream.status(), (int)expectedStatus); \         QCOMPARE(map.size(), expectedMap.size()); \         QCOMPARE(map, expectedMap); \     }
end_define
begin_function
DECL|function|status_QHash_QMap
name|void
name|tst_QDataStream
operator|::
name|status_QHash_QMap
parameter_list|()
block|{
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|StringHash
typedef|;
typedef|typedef
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|StringMap
typedef|;
name|StringHash
name|hash
decl_stmt|;
name|StringMap
name|map
decl_stmt|;
name|StringHash
name|hash1
decl_stmt|;
name|hash1
operator|.
name|insert
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|StringHash
name|hash2
decl_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"J"
argument_list|,
literal|"K"
argument_list|)
expr_stmt|;
name|hash2
operator|.
name|insert
argument_list|(
literal|"L"
argument_list|,
literal|"MN"
argument_list|)
expr_stmt|;
comment|// ok
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
literal|12
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|,
name|hash1
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02\x00\x00\x00\x02\x00J\x00\x00\x00\x02\x00K"
literal|"\x00\x00\x00\x02\x00L\x00\x00\x00\x04\x00M\x00N"
argument_list|,
literal|30
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|,
name|hash2
argument_list|)
expr_stmt|;
comment|// past end
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|4
init|;
name|i
operator|<
literal|12
condition|;
operator|++
name|i
control|)
block|{
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00"
argument_list|,
name|i
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// corrupt data
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x01\x00\x00\x00\x01"
argument_list|,
literal|8
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
name|MAP_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x02\x00\x00\x00\x01\x00J\x00\x00\x00\x01\x00K"
literal|"\x00\x00\x00\x01\x00L\x00\x00\x00\x02\x00M\x00N"
argument_list|,
literal|30
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|ReadCorruptData
argument_list|,
name|StringHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|LIST_TEST
define|#
directive|define
name|LIST_TEST
parameter_list|(
name|byteArray
parameter_list|,
name|expectedStatus
parameter_list|,
name|expectedList
parameter_list|)
define|\
value|{ \         QByteArray ba = byteArray; \         QDataStream stream(&ba, QIODevice::ReadOnly); \         stream>> list; \         QCOMPARE((int)stream.status(), (int)expectedStatus); \         QCOMPARE(list.size(), expectedList.size()); \         QCOMPARE(list, expectedList); \     } \     { \         LinkedList expectedLinkedList; \         for (int i = 0; i< expectedList.count(); ++i) \             expectedLinkedList<< expectedList.at(i); \         QByteArray ba = byteArray; \         QDataStream stream(&ba, QIODevice::ReadOnly); \         stream>> linkedList; \         QCOMPARE((int)stream.status(), (int)expectedStatus); \         QCOMPARE(linkedList.size(), expectedLinkedList.size()); \         QCOMPARE(linkedList, expectedLinkedList); \     } \     { \         Vector expectedVector; \         for (int i = 0; i< expectedList.count(); ++i) \             expectedVector<< expectedList.at(i); \         QByteArray ba = byteArray; \         QDataStream stream(&ba, QIODevice::ReadOnly); \         stream>> vector; \         QCOMPARE((int)stream.status(), (int)expectedStatus); \         QCOMPARE(vector.size(), expectedVector.size()); \         QCOMPARE(vector, expectedVector); \     }
end_define
begin_function
DECL|function|status_QLinkedList_QList_QVector
name|void
name|tst_QDataStream
operator|::
name|status_QLinkedList_QList_QVector
parameter_list|()
block|{
typedef|typedef
name|QLinkedList
argument_list|<
name|QString
argument_list|>
name|LinkedList
typedef|;
typedef|typedef
name|QList
argument_list|<
name|QString
argument_list|>
name|List
typedef|;
typedef|typedef
name|QVector
argument_list|<
name|QString
argument_list|>
name|Vector
typedef|;
name|LinkedList
name|linkedList
decl_stmt|;
name|List
name|list
decl_stmt|;
name|Vector
name|vector
decl_stmt|;
name|LIST_TEST
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|ReadPastEnd
argument_list|,
name|List
argument_list|()
argument_list|)
expr_stmt|;
name|LIST_TEST
argument_list|(
name|QByteArray
argument_list|(
literal|"\x00\x00\x00\x00"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|,
name|List
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamToAndFromQByteArray
name|void
name|tst_QDataStream
operator|::
name|streamToAndFromQByteArray
parameter_list|()
block|{
name|QByteArray
name|data
decl_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QDataStream
name|out
argument_list|(
operator|&
name|data
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|quint32
name|x
init|=
literal|0xdeadbeef
decl_stmt|;
name|quint32
name|y
decl_stmt|;
name|in
operator|<<
name|x
expr_stmt|;
name|out
operator|>>
name|y
expr_stmt|;
name|QCOMPARE
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|streamRealDataTypes
name|void
name|tst_QDataStream
operator|::
name|streamRealDataTypes
parameter_list|()
block|{
comment|// Generate QPicture from pixmap.
name|QPixmap
name|pm
argument_list|(
name|open_xpm
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|pm
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPicture
name|picture
decl_stmt|;
name|picture
operator|.
name|setBoundingRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pm
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|picture
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pm
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
comment|// Generate path
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|path
operator|.
name|arcTo
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|path
operator|.
name|quadTo
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QColor
name|color
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|)
decl_stmt|;
name|color
operator|.
name|setAlphaF
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
name|QRadialGradient
name|radialGradient
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|QBrush
name|radialBrush
argument_list|(
name|radialGradient
argument_list|)
decl_stmt|;
name|QConicalGradient
name|conicalGradient
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|QBrush
name|conicalBrush
argument_list|(
name|conicalGradient
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QFile
name|file
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|file
operator|.
name|setFileName
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"datastream.q42"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|.
name|setFileName
argument_list|(
literal|"datastream.tmp"
argument_list|)
expr_stmt|;
comment|// Generate data
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_4_2
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|qreal
argument_list|(
literal|0
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|1.0
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|1.1
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|3.14
argument_list|)
operator|<<
name|qreal
argument_list|(
operator|-
literal|3.14
argument_list|)
operator|<<
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|QPointF
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|<<
name|QRectF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|<<
operator|(
name|QPolygonF
argument_list|()
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|)
expr_stmt|;
name|stream
operator|<<
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
operator|.
name|scale
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|path
expr_stmt|;
name|stream
operator|<<
name|picture
expr_stmt|;
name|stream
operator|<<
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|VariableLength
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|color
expr_stmt|;
name|stream
operator|<<
name|radialBrush
operator|<<
name|conicalBrush
expr_stmt|;
name|stream
operator|<<
name|QPen
argument_list|(
name|QBrush
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QPointF
name|point
decl_stmt|;
name|QRectF
name|rect
decl_stmt|;
name|QPolygonF
name|polygon
decl_stmt|;
name|QMatrix
name|matrix
decl_stmt|;
name|QPainterPath
name|p
decl_stmt|;
name|QPicture
name|pict
decl_stmt|;
name|QTextLength
name|textLength
decl_stmt|;
name|QColor
name|col
decl_stmt|;
name|QBrush
name|rGrad
decl_stmt|;
name|QBrush
name|cGrad
decl_stmt|;
name|QPen
name|pen
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_4_2
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// the reference stream for 4.2 contains doubles,
comment|// so we must read them out as doubles!
name|double
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|,
name|e
decl_stmt|,
name|f
decl_stmt|;
name|stream
operator|>>
name|a
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|b
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|1.1
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
literal|3.14
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|e
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
operator|-
literal|3.14
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qreal
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|d
decl_stmt|,
name|e
decl_stmt|,
name|f
decl_stmt|;
name|stream
operator|>>
name|a
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
argument_list|,
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|b
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
argument_list|,
name|qreal
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|c
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|qreal
argument_list|(
literal|1.1
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|d
argument_list|,
name|qreal
argument_list|(
literal|3.14
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|e
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
name|qreal
argument_list|(
operator|-
literal|3.14
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
argument_list|,
name|qreal
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stream
operator|>>
name|point
expr_stmt|;
name|QCOMPARE
argument_list|(
name|point
argument_list|,
name|QPointF
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|rect
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rect
argument_list|,
name|QRectF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|polygon
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QVector
argument_list|<
name|QPointF
argument_list|>
operator|&
operator|)
name|polygon
argument_list|,
operator|(
name|QPolygonF
argument_list|()
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|matrix
expr_stmt|;
name|QCOMPARE
argument_list|(
name|matrix
argument_list|,
name|QMatrix
argument_list|()
operator|.
name|rotate
argument_list|(
literal|90
argument_list|)
operator|.
name|scale
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|p
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|stream
operator|>>
name|pict
expr_stmt|;
name|QByteArray
name|pictA
decl_stmt|,
name|pictB
decl_stmt|;
name|QBuffer
name|bufA
decl_stmt|,
name|bufB
decl_stmt|;
name|QVERIFY
argument_list|(
name|bufA
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bufB
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|picture
operator|.
name|save
argument_list|(
operator|&
name|bufA
argument_list|)
expr_stmt|;
name|pict
operator|.
name|save
argument_list|(
operator|&
name|bufB
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pictA
argument_list|,
name|pictB
argument_list|)
expr_stmt|;
block|}
name|stream
operator|>>
name|textLength
expr_stmt|;
name|QCOMPARE
argument_list|(
name|textLength
argument_list|,
name|QTextLength
argument_list|(
name|QTextLength
operator|::
name|VariableLength
argument_list|,
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|col
expr_stmt|;
name|QCOMPARE
argument_list|(
name|col
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|rGrad
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rGrad
operator|.
name|style
argument_list|()
argument_list|,
name|radialBrush
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rGrad
operator|.
name|matrix
argument_list|()
argument_list|,
name|radialBrush
operator|.
name|matrix
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rGrad
operator|.
name|gradient
argument_list|()
operator|->
name|type
argument_list|()
argument_list|,
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rGrad
operator|.
name|gradient
argument_list|()
operator|->
name|stops
argument_list|()
argument_list|,
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|->
name|stops
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rGrad
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
argument_list|,
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|rGrad
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|center
argument_list|()
argument_list|,
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|rGrad
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|focalPoint
argument_list|()
argument_list|,
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|focalPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|rGrad
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|radius
argument_list|()
argument_list|,
operator|(
operator|(
name|QRadialGradient
operator|*
operator|)
name|radialBrush
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|radius
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|cGrad
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
operator|.
name|style
argument_list|()
argument_list|,
name|conicalBrush
operator|.
name|style
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
operator|.
name|matrix
argument_list|()
argument_list|,
name|conicalBrush
operator|.
name|matrix
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
operator|.
name|gradient
argument_list|()
operator|->
name|type
argument_list|()
argument_list|,
name|conicalBrush
operator|.
name|gradient
argument_list|()
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
operator|.
name|gradient
argument_list|()
operator|->
name|stops
argument_list|()
argument_list|,
name|conicalBrush
operator|.
name|gradient
argument_list|()
operator|->
name|stops
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
argument_list|,
name|conicalBrush
operator|.
name|gradient
argument_list|()
operator|->
name|spread
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
name|QConicalGradient
operator|*
operator|)
name|cGrad
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|center
argument_list|()
argument_list|,
operator|(
operator|(
name|QConicalGradient
operator|*
operator|)
name|conicalBrush
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
operator|(
name|QConicalGradient
operator|*
operator|)
name|cGrad
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|angle
argument_list|()
argument_list|,
operator|(
operator|(
name|QConicalGradient
operator|*
operator|)
name|conicalBrush
operator|.
name|gradient
argument_list|()
operator|)
operator|->
name|angle
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cGrad
argument_list|,
name|conicalBrush
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|pen
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pen
operator|.
name|widthF
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|1.5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stream
operator|.
name|status
argument_list|()
argument_list|,
name|QDataStream
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compatibility_Qt3
name|void
name|tst_QDataStream
operator|::
name|compatibility_Qt3
parameter_list|()
block|{
name|QByteArray
name|ba
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|QVariant
name|var
init|=
name|ba
decl_stmt|;
specifier|const
name|quint32
name|invalidColor
init|=
literal|0x49000000
decl_stmt|;
name|QByteArray
name|stream
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|stream
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_3_3
argument_list|)
expr_stmt|;
name|out
operator|<<
name|var
expr_stmt|;
name|out
operator|<<
name|QColor
argument_list|()
expr_stmt|;
name|out
operator|<<
name|QColor
argument_list|(
name|Qt
operator|::
name|darkYellow
argument_list|)
expr_stmt|;
name|out
operator|<<
name|QColor
argument_list|(
name|Qt
operator|::
name|darkCyan
argument_list|)
expr_stmt|;
name|out
operator|<<
name|invalidColor
expr_stmt|;
block|}
block|{
name|QDataStream
name|in
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_3_3
argument_list|)
expr_stmt|;
name|quint32
name|type
decl_stmt|;
name|in
operator|>>
name|type
expr_stmt|;
comment|//29 is the type of a QByteArray in Qt3
name|QCOMPARE
argument_list|(
name|type
argument_list|,
name|quint32
argument_list|(
literal|29
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|ba2
decl_stmt|;
name|in
operator|>>
name|ba2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba2
argument_list|,
name|ba
argument_list|)
expr_stmt|;
name|quint32
name|color
decl_stmt|;
name|in
operator|>>
name|color
expr_stmt|;
name|QCOMPARE
argument_list|(
name|color
argument_list|,
name|invalidColor
argument_list|)
expr_stmt|;
name|in
operator|>>
name|color
expr_stmt|;
name|QCOMPARE
argument_list|(
name|color
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|darkYellow
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QColor
name|col
decl_stmt|;
name|in
operator|>>
name|col
expr_stmt|;
name|QCOMPARE
argument_list|(
name|col
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|darkCyan
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|>>
name|col
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|col
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QLinearGradient
name|gradient
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|gradient
argument_list|)
decl_stmt|;
name|QPalette
name|palette
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QByteArray
name|stream
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|stream
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_3_3
argument_list|)
expr_stmt|;
name|out
operator|<<
name|palette
expr_stmt|;
name|out
operator|<<
name|brush
expr_stmt|;
block|}
name|QBrush
name|in_brush
decl_stmt|;
name|QPalette
name|in_palette
decl_stmt|;
block|{
name|QDataStream
name|in
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_3_3
argument_list|)
expr_stmt|;
name|in
operator|>>
name|in_palette
expr_stmt|;
name|in
operator|>>
name|in_brush
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|in_brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|in_palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|in_palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|==
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compatibility_Qt2
name|void
name|tst_QDataStream
operator|::
name|compatibility_Qt2
parameter_list|()
block|{
name|QLinearGradient
name|gradient
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|gradient
argument_list|)
decl_stmt|;
name|QPalette
name|palette
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|QByteArray
name|stream
decl_stmt|;
block|{
name|QDataStream
name|out
argument_list|(
operator|&
name|stream
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|out
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_2_1
argument_list|)
expr_stmt|;
name|out
operator|<<
name|palette
expr_stmt|;
name|out
operator|<<
name|brush
expr_stmt|;
block|}
name|QBrush
name|in_brush
decl_stmt|;
name|QPalette
name|in_palette
decl_stmt|;
block|{
name|QDataStream
name|in
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_2_1
argument_list|)
expr_stmt|;
name|in
operator|>>
name|in_palette
expr_stmt|;
name|in
operator|>>
name|in_brush
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|in_brush
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|in_palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Button
argument_list|)
operator|.
name|style
argument_list|()
operator|==
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|in_palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Light
argument_list|)
operator|==
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|floatingPointPrecision
name|void
name|tst_QDataStream
operator|::
name|floatingPointPrecision
parameter_list|()
block|{
name|QByteArray
name|ba
decl_stmt|;
block|{
name|QDataStream
name|stream
argument_list|(
operator|&
name|ba
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QDataStream
operator|::
name|DoublePrecision
argument_list|,
name|stream
operator|.
name|floatingPointPrecision
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|f
init|=
literal|123.0f
decl_stmt|;
name|stream
operator|<<
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|double
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|d
init|=
literal|234.0
decl_stmt|;
name|stream
operator|<<
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|double
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setFloatingPointPrecision
argument_list|(
name|QDataStream
operator|::
name|SinglePrecision
argument_list|)
expr_stmt|;
name|f
operator|=
literal|123.0f
expr_stmt|;
name|stream
operator|<<
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|double
argument_list|)
operator|*
literal|2
operator|+
sizeof|sizeof
argument_list|(
name|float
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
literal|234.0
expr_stmt|;
name|stream
operator|<<
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|double
argument_list|)
operator|*
literal|2
operator|+
sizeof|sizeof
argument_list|(
name|float
argument_list|)
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QDataStream
name|stream
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|float
name|f
init|=
literal|0.0f
decl_stmt|;
name|stream
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|123.0f
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|double
name|d
init|=
literal|0.0
decl_stmt|;
name|stream
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|234.0
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|f
operator|=
literal|0.0f
expr_stmt|;
name|stream
operator|.
name|setFloatingPointPrecision
argument_list|(
name|QDataStream
operator|::
name|SinglePrecision
argument_list|)
expr_stmt|;
name|stream
operator|>>
name|f
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|123.0f
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|d
operator|=
literal|0.0
expr_stmt|;
name|stream
operator|>>
name|d
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|234.0
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDataStream
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdatastream.moc"
end_include
end_unit
