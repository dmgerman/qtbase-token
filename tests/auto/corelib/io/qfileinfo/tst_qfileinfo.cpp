begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<pwd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_define
DECL|macro|_WIN32_WINNT
define|#
directive|define
name|_WIN32_WINNT
value|0x500
end_define
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<lm.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<private/qfileinfo_p.h>
end_include
begin_include
include|#
directive|include
file|"../../../../shared/filesystem.h"
end_include
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_AUTOTEST_EXPORT
name|bool
name|qIsLikelyToBeNfs
parameter_list|(
name|int
comment|/* handle */
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|tst_QFileInfo
class|class
name|tst_QFileInfo
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|copy
parameter_list|()
function_decl|;
name|void
name|isFile_data
parameter_list|()
function_decl|;
name|void
name|isFile
parameter_list|()
function_decl|;
name|void
name|isDir_data
parameter_list|()
function_decl|;
name|void
name|isDir
parameter_list|()
function_decl|;
name|void
name|isRoot_data
parameter_list|()
function_decl|;
name|void
name|isRoot
parameter_list|()
function_decl|;
name|void
name|exists_data
parameter_list|()
function_decl|;
name|void
name|exists
parameter_list|()
function_decl|;
name|void
name|absolutePath_data
parameter_list|()
function_decl|;
name|void
name|absolutePath
parameter_list|()
function_decl|;
name|void
name|absFilePath_data
parameter_list|()
function_decl|;
name|void
name|absFilePath
parameter_list|()
function_decl|;
name|void
name|canonicalPath
parameter_list|()
function_decl|;
name|void
name|canonicalFilePath
parameter_list|()
function_decl|;
name|void
name|fileName_data
parameter_list|()
function_decl|;
name|void
name|fileName
parameter_list|()
function_decl|;
name|void
name|bundleName_data
parameter_list|()
function_decl|;
name|void
name|bundleName
parameter_list|()
function_decl|;
name|void
name|dir_data
parameter_list|()
function_decl|;
name|void
name|dir
parameter_list|()
function_decl|;
name|void
name|suffix_data
parameter_list|()
function_decl|;
name|void
name|suffix
parameter_list|()
function_decl|;
name|void
name|completeSuffix_data
parameter_list|()
function_decl|;
name|void
name|completeSuffix
parameter_list|()
function_decl|;
name|void
name|baseName_data
parameter_list|()
function_decl|;
name|void
name|baseName
parameter_list|()
function_decl|;
name|void
name|completeBaseName_data
parameter_list|()
function_decl|;
name|void
name|completeBaseName
parameter_list|()
function_decl|;
name|void
name|permission_data
parameter_list|()
function_decl|;
name|void
name|permission
parameter_list|()
function_decl|;
name|void
name|size_data
parameter_list|()
function_decl|;
name|void
name|size
parameter_list|()
function_decl|;
name|void
name|systemFiles
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|consistent_data
parameter_list|()
function_decl|;
name|void
name|consistent
parameter_list|()
function_decl|;
name|void
name|fileTimes_data
parameter_list|()
function_decl|;
name|void
name|fileTimes
parameter_list|()
function_decl|;
name|void
name|fileTimes_oldFile
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
name|void
name|isSymLink_data
parameter_list|()
function_decl|;
name|void
name|isSymLink
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|isHidden_data
parameter_list|()
function_decl|;
name|void
name|isHidden
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|void
name|isHiddenFromFinder
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|isBundle_data
parameter_list|()
function_decl|;
name|void
name|isBundle
parameter_list|()
function_decl|;
name|void
name|isNativePath_data
parameter_list|()
function_decl|;
name|void
name|isNativePath
parameter_list|()
function_decl|;
name|void
name|refresh
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|ntfsJunctionPointsAndSymlinks_data
parameter_list|()
function_decl|;
name|void
name|ntfsJunctionPointsAndSymlinks
parameter_list|()
function_decl|;
name|void
name|brokenShortcut
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|isWritable
parameter_list|()
function_decl|;
name|void
name|isExecutable
parameter_list|()
function_decl|;
name|void
name|testDecomposedUnicodeNames_data
parameter_list|()
function_decl|;
name|void
name|testDecomposedUnicodeNames
parameter_list|()
function_decl|;
name|void
name|equalOperator
parameter_list|()
specifier|const
function_decl|;
name|void
name|equalOperatorWithDifferentSlashes
parameter_list|()
specifier|const
function_decl|;
name|void
name|notEqualOperator
parameter_list|()
specifier|const
function_decl|;
name|void
name|detachingOperations
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|owner
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|group
parameter_list|()
function_decl|;
name|void
name|invalidState
parameter_list|()
function_decl|;
name|void
name|nonExistingFileDates
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QFileInfo
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"file1"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"dummyfile"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"simplefile.txt"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"tempfile.txt"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"./.hidden-directory"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"link_to_tst_qfileinfo"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"./hidden-directory"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"abs_symlink"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"rel_symlink"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"junction_pwd"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"junction_root"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"mountpoint"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"abs_symlink.cpp"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"rel_symlink.cpp"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QFileInfo
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QFileInfo
name|obj1
decl_stmt|;
comment|// bool QFileInfo::caching()
comment|// void QFileInfo::setCaching(bool)
name|obj1
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getPrivate
specifier|static
name|QFileInfoPrivate
modifier|*
name|getPrivate
parameter_list|(
name|QFileInfo
modifier|&
name|info
parameter_list|)
block|{
return|return
operator|(
operator|*
cast|reinterpret_cast
argument_list|<
name|QFileInfoPrivate
operator|*
operator|*
argument_list|>
argument_list|(
operator|&
name|info
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QFileInfo
operator|::
name|copy
parameter_list|()
block|{
name|QTemporaryFile
modifier|*
name|t
decl_stmt|;
name|t
operator|=
operator|new
name|QTemporaryFile
expr_stmt|;
name|t
operator|->
name|open
argument_list|()
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|t
operator|->
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|//copy constructor
name|QFileInfo
name|info2
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|QFileInfoPrivate
modifier|*
name|privateInfo
init|=
name|getPrivate
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|QFileInfoPrivate
modifier|*
name|privateInfo2
init|=
name|getPrivate
argument_list|(
name|info2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|privateInfo
argument_list|,
name|privateInfo2
argument_list|)
expr_stmt|;
comment|//operator =
name|QFileInfo
name|info3
init|=
name|info
decl_stmt|;
name|QFileInfoPrivate
modifier|*
name|privateInfo3
init|=
name|getPrivate
argument_list|(
name|info3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|privateInfo
argument_list|,
name|privateInfo3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateInfo2
argument_list|,
name|privateInfo3
argument_list|)
expr_stmt|;
comment|//refreshing info3 will detach it
name|QFile
name|file
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"JAJAJAA"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_VISTA
operator|||
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_CE_based
condition|)
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// On Windows CE we need to close the file.
comment|// Otherwise the content will be cached and not
comment|// flushed to the storage, although we flushed it
comment|// manually!!! CE has interim cache, we cannot influence.
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|info3
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|privateInfo3
operator|=
name|getPrivate
argument_list|(
name|info3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|privateInfo
operator|!=
name|privateInfo3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|privateInfo2
operator|!=
name|privateInfo3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateInfo
argument_list|,
name|privateInfo2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFile_data
name|void
name|tst_QFileInfo
operator|::
name|isFile_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/afilethatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFile
name|void
name|tst_QFileInfo
operator|::
name|isFile
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isFile
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isDir_data
name|void
name|tst_QFileInfo
operator|::
name|isDir_data
parameter_list|()
block|{
comment|// create a broken symlink
name|QFile
operator|::
name|remove
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"dummyfile"
argument_list|)
expr_stmt|;
name|QFile
name|file3
argument_list|(
literal|"dummyfile"
argument_list|)
decl_stmt|;
name|file3
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|file3
operator|.
name|link
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
condition|)
block|{
name|file3
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QFileInfo
name|info3
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info3
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/afilethatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"broken link"
argument_list|)
operator|<<
literal|"brokenlink.lnk"
operator|<<
literal|false
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive 1"
argument_list|)
operator|<<
literal|"c:"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive 2"
argument_list|)
operator|<<
literal|"c:/"
operator|<<
literal|true
expr_stmt|;
comment|//QTest::newRow("drive 2")<< "t:s"<< false;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 1"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 2"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 3"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 4"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 5"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 6"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 7"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/adirthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isDir
name|void
name|tst_QFileInfo
operator|::
name|isDir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isDir
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRoot_data
name|void
name|tst_QFileInfo
operator|::
name|isRoot_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"*"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/*"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|":/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive 1"
argument_list|)
operator|<<
literal|"c:"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive 2"
argument_list|)
operator|<<
literal|"c:/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"drive 3"
argument_list|)
operator|<<
literal|"p:/"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 1"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 2"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 3"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 4"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 7"
argument_list|)
operator|<<
literal|"//ahostthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isRoot
name|void
name|tst_QFileInfo
operator|::
name|isRoot
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isRoot
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exists_data
name|void
name|tst_QFileInfo
operator|::
name|exists_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/I/do_not_expect_this_path_to_exist/"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
literal|":/I/do_not_expect_this_path_to_exist/"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
operator|(
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|+
literal|"*"
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
operator|(
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|+
literal|"*.foo"
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
operator|(
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|+
literal|"*.ext1"
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
operator|(
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|+
literal|"file?.ext1"
operator|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
literal|"."
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data11"
argument_list|)
operator|<<
literal|". "
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple dir with slash"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"resources/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 1"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 2"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 3"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 4"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 5"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 6"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp/"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 7"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/adirthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 8"
argument_list|)
operator|<<
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/asharethatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unc 9"
argument_list|)
operator|<<
literal|"//ahostthatshouldnotexist"
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|exists
name|void
name|tst_QFileInfo
operator|::
name|exists
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePath_data
name|void
name|tst_QFileInfo
operator|::
name|absolutePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
name|QString
name|drivePrefix
decl_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|drivePrefix
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QString
name|nonCurrentDrivePrefix
init|=
name|drivePrefix
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|.
name|compare
argument_list|(
literal|"X"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|?
name|QString
argument_list|(
literal|"Y:"
argument_list|)
else|:
name|QString
argument_list|(
literal|"X:"
argument_list|)
decl_stmt|;
comment|// Make sure drive-relative paths return correct absolute paths.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<current drive>:my.dll"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"my.dll"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|"my.dll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<not current drive>:my.dll"
argument_list|)
operator|<<
name|nonCurrentDrivePrefix
operator|+
literal|"my.dll"
operator|<<
name|nonCurrentDrivePrefix
operator|+
literal|"/"
operator|<<
literal|"my.dll"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|"/machine/share/dir1/"
operator|<<
name|drivePrefix
operator|+
literal|"/machine/share/dir1"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|"/machine/share/dir1"
operator|<<
name|drivePrefix
operator|+
literal|"/machine/share"
operator|<<
literal|"dir1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|"/usr/local/bin"
operator|<<
name|drivePrefix
operator|+
literal|"/usr/local"
operator|<<
literal|"bin"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|"/usr/local/bin/"
operator|<<
name|drivePrefix
operator|+
literal|"/usr/local/bin"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/test"
argument_list|)
operator|<<
literal|"/test"
operator|<<
name|drivePrefix
operator|+
literal|"/"
operator|<<
literal|"test"
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c:\\autoexec.bat"
argument_list|)
operator|<<
literal|"c:\\autoexec.bat"
operator|<<
literal|"C:/"
operator|<<
literal|"autoexec.bat"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"c:autoexec.bat"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|+
literal|"autoexec.bat"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|<<
literal|"autoexec.bat"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-19995.1"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library/StartupItems/../Frameworks"
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library"
operator|<<
literal|"Frameworks"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-19995.2"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library/StartupItems/../Frameworks/"
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library/Frameworks"
operator|<<
literal|""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absolutePath
name|void
name|tst_QFileInfo
operator|::
name|absolutePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|fileName
argument_list|()
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absFilePath_data
name|void
name|tst_QFileInfo
operator|::
name|absFilePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFile"
argument_list|)
operator|<<
literal|"tmp.txt"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmp.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFileInSubDir"
argument_list|)
operator|<<
literal|"temp/tmp.txt"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/"
operator|+
literal|"temp/tmp.txt"
expr_stmt|;
name|QString
name|drivePrefix
decl_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QString
name|curr
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|curr
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Make it a absolute path with no drive specifier: \depot\qt-4.2\tests\auto\qfileinfo
name|QTest
operator|::
name|newRow
argument_list|(
literal|"."
argument_list|)
operator|<<
name|curr
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePath"
argument_list|)
operator|<<
literal|"c:\\home\\andy\\tmp.txt"
operator|<<
literal|"C:/home/andy/tmp.txt"
expr_stmt|;
comment|// Make sure drive-relative paths return correct absolute paths.
name|drivePrefix
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QString
name|nonCurrentDrivePrefix
init|=
name|drivePrefix
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|.
name|compare
argument_list|(
literal|"X"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|?
name|QString
argument_list|(
literal|"Y:"
argument_list|)
else|:
name|QString
argument_list|(
literal|"X:"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePathWithoutSlash"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"tmp.txt"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmp.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<current drive>:my.dll"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"temp/my.dll"
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/temp/my.dll"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"<not current drive>:my.dll"
argument_list|)
operator|<<
name|nonCurrentDrivePrefix
operator|+
literal|"temp/my.dll"
operator|<<
name|nonCurrentDrivePrefix
operator|+
literal|"/temp/my.dll"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePath"
argument_list|)
operator|<<
literal|"/home/andy/tmp.txt"
operator|<<
literal|"/home/andy/tmp.txt"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTBUG-19995"
argument_list|)
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library/StartupItems/../Frameworks"
operator|<<
name|drivePrefix
operator|+
literal|"/System/Library/Frameworks"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|absFilePath
name|void
name|tst_QFileInfo
operator|::
name|absFilePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QVERIFY
argument_list|(
name|QString
operator|::
name|compare
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|expected
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|canonicalPath
name|void
name|tst_QFileInfo
operator|::
name|canonicalPath
parameter_list|()
block|{
name|QTemporaryFile
name|tempFile
decl_stmt|;
name|tempFile
operator|.
name|setAutoRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|open
argument_list|()
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|tempFile
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|canonicalPath
argument_list|()
argument_list|,
name|QFileInfo
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canonicalFilePath
name|void
name|tst_QFileInfo
operator|::
name|canonicalFilePath
parameter_list|()
block|{
specifier|const
name|QString
name|fileName
argument_list|(
literal|"tmp.canon"
argument_list|)
decl_stmt|;
name|QFile
name|tempFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tempFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|tempFile
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/"
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// This used to crash on Mac, verify that it doesn't anymore.
name|QFileInfo
name|info
argument_list|(
literal|"/tmp/../../../../../../../../../../../../../../../../../"
argument_list|)
decl_stmt|;
name|info
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
comment|// This used to crash on Mac
name|QFileInfo
name|dontCrash
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dontCrash
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// test symlinks
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|link
argument_list|(
literal|"link.lnk"
argument_list|)
condition|)
block|{
name|QFileInfo
name|info1
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QFileInfo
name|info2
argument_list|(
literal|"link.lnk"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info1
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|info2
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|{
specifier|const
name|QString
name|link
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"tst_qfileinfo"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|link
argument_list|(
name|link
argument_list|)
condition|)
block|{
name|QFile
name|tempfile
argument_list|(
literal|"tempfile.txt"
argument_list|)
decl_stmt|;
name|tempfile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|write
argument_list|(
literal|"This file is generated by the QFileInfo autotest."
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tempfile
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFileInfo
name|info1
argument_list|(
literal|"tempfile.txt"
argument_list|)
decl_stmt|;
name|QFileInfo
name|info2
argument_list|(
name|link
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"tempfile.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info1
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info2
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info1
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|info2
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QFileInfo
name|info3
argument_list|(
name|link
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"link.lnk"
argument_list|)
decl_stmt|;
name|QFileInfo
name|info4
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info3
operator|.
name|canonicalFilePath
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info4
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|info3
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|QString
name|link
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"tst_qfileinfo"
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"link_to_tst_qfileinfo"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|link
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"tst_qfileinfo"
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"tst_qfileinfo.cpp"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|link
argument_list|(
name|link
argument_list|)
condition|)
block|{
name|QFileInfo
name|info1
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
decl_stmt|;
name|QFileInfo
name|info2
argument_list|(
name|link
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info1
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|info2
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WIN
typedef|typedef
name|BOOL
function_decl|(
name|WINAPI
modifier|*
name|PtrCreateSymbolicLink
function_decl|)
parameter_list|(
name|LPTSTR
parameter_list|,
name|LPTSTR
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
name|PtrCreateSymbolicLink
name|ptrCreateSymbolicLink
init|=
operator|(
name|PtrCreateSymbolicLink
operator|)
name|QLibrary
operator|::
name|resolve
argument_list|(
name|QLatin1String
argument_list|(
literal|"kernel32"
argument_list|)
argument_list|,
literal|"CreateSymbolicLinkW"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ptrCreateSymbolicLink
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Symbolic links aren't supported by FS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// CreateSymbolicLink can return TRUE& still fail to create the link,
comment|// the error code in that case is ERROR_PRIVILEGE_NOT_HELD (1314)
name|SetLastError
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|BOOL
name|ret
init|=
name|ptrCreateSymbolicLink
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|QString
argument_list|(
literal|"res"
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|QString
argument_list|(
literal|"resources"
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DWORD
name|dwErr
init|=
name|GetLastError
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|QSKIP
argument_list|(
literal|"Symbolic links aren't supported by FS"
argument_list|)
expr_stmt|;
name|QString
name|currentPath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|bool
name|is_res_Current
init|=
name|QDir
operator|::
name|setCurrent
argument_list|(
literal|"res"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|is_res_Current
operator|&&
name|dwErr
operator|==
literal|1314
condition|)
name|QSKIP
argument_list|(
literal|"Not enough privilages to create Symbolic links"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|is_res_Current
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
literal|"file1"
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|currentPath
operator|+
literal|"/resources/file1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|currentPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fileName_data
name|void
name|tst_QFileInfo
operator|::
name|fileName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFile"
argument_list|)
operator|<<
literal|"tmp.txt"
operator|<<
literal|"tmp.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFileInSubDir"
argument_list|)
operator|<<
literal|"temp/tmp.txt"
operator|<<
literal|"tmp.txt"
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePath"
argument_list|)
operator|<<
literal|"c:\\home\\andy\\tmp.txt"
operator|<<
literal|"tmp.txt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithNoSlash"
argument_list|)
operator|<<
literal|"c:tmp.txt"
operator|<<
literal|"tmp.txt"
expr_stmt|;
else|#
directive|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePath"
argument_list|)
operator|<<
literal|"/home/andy/tmp.txt"
operator|<<
literal|"tmp.txt"
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|"file1.ext1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|"file1.ext1.ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending slash [small]"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no ending slash [small]"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending slash"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/somedir/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no ending slash"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/somedir"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"somedir"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileName
name|void
name|tst_QFileInfo
operator|::
name|fileName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|fileName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bundleName_data
name|void
name|tst_QFileInfo
operator|::
name|bundleName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"root"
argument_list|)
operator|<<
literal|"/"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"etc"
argument_list|)
operator|<<
literal|"/etc"
operator|<<
literal|""
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"safari"
argument_list|)
operator|<<
literal|"/Applications/Safari.app"
operator|<<
literal|"Safari"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|bundleName
name|void
name|tst_QFileInfo
operator|::
name|bundleName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|bundleName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dir_data
name|void
name|tst_QFileInfo
operator|::
name|dir_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"absPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFile"
argument_list|)
operator|<<
literal|"tmp.txt"
operator|<<
literal|false
operator|<<
literal|"."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFileAbsPath"
argument_list|)
operator|<<
literal|"tmp.txt"
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFileInSubDir"
argument_list|)
operator|<<
literal|"temp/tmp.txt"
operator|<<
literal|false
operator|<<
literal|"temp"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativeFileInSubDirAbsPath"
argument_list|)
operator|<<
literal|"temp/tmp.txt"
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/temp"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePath"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmp.txt"
operator|<<
literal|false
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absFilePathAbsPath"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/tmp.txt"
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|true
operator|<<
literal|":/tst_qfileinfo/resources"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithSlash"
argument_list|)
operator|<<
literal|"C:/file1.ext1.ext2"
operator|<<
literal|true
operator|<<
literal|"C:/"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithoutSlash"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|+
literal|"file1.ext1.ext2"
operator|<<
literal|false
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|dir
name|void
name|tst_QFileInfo
operator|::
name|dir
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|absPath
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|absoluteDir
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|path
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|dir
argument_list|()
operator|.
name|path
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|suffix_data
name|void
name|tst_QFileInfo
operator|::
name|suffix_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noextension0"
argument_list|)
operator|<<
literal|"file"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noextension1"
argument_list|)
operator|<<
literal|"/path/to/file"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"file.tar"
operator|<<
literal|"tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"file.tar.gz"
operator|<<
literal|"gz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/path/file/file.tar.gz"
operator|<<
literal|"gz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/path/file.tar"
operator|<<
literal|"tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|"ext1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden1"
argument_list|)
operator|<<
literal|".ext1"
operator|<<
literal|"ext1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden1"
argument_list|)
operator|<<
literal|".ext"
operator|<<
literal|"ext"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden1"
argument_list|)
operator|<<
literal|".ex"
operator|<<
literal|"ex"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden1"
argument_list|)
operator|<<
literal|".e"
operator|<<
literal|"e"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden2"
argument_list|)
operator|<<
literal|".ext1.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden2"
argument_list|)
operator|<<
literal|".ext.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden2"
argument_list|)
operator|<<
literal|".ex.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden2"
argument_list|)
operator|<<
literal|".e.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hidden2"
argument_list|)
operator|<<
literal|"..ext2"
operator|<<
literal|"ext2"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithSlash"
argument_list|)
operator|<<
literal|"c:/file1.ext1.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithoutSlash"
argument_list|)
operator|<<
literal|"c:file1.ext1.ext2"
operator|<<
literal|"ext2"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|suffix
name|void
name|tst_QFileInfo
operator|::
name|suffix
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|suffix
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completeSuffix_data
name|void
name|tst_QFileInfo
operator|::
name|completeSuffix_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noextension0"
argument_list|)
operator|<<
literal|"file"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"noextension1"
argument_list|)
operator|<<
literal|"/path/to/file"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"file.tar"
operator|<<
literal|"tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"file.tar.gz"
operator|<<
literal|"tar.gz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/path/file/file.tar.gz"
operator|<<
literal|"tar.gz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/path/file.tar"
operator|<<
literal|"tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|"ext1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|"ext1.ext2"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithSlash"
argument_list|)
operator|<<
literal|"c:/file1.ext1.ext2"
operator|<<
literal|"ext1.ext2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithoutSlash"
argument_list|)
operator|<<
literal|"c:file1.ext1.ext2"
operator|<<
literal|"ext1.ext2"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|completeSuffix
name|void
name|tst_QFileInfo
operator|::
name|completeSuffix
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|completeSuffix
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|baseName_data
name|void
name|tst_QFileInfo
operator|::
name|baseName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"file.tar"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"file.tar.gz"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/path/file/file.tar.gz"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/path/file.tar"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|"/path/file"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|"file1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|"file1"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithSlash"
argument_list|)
operator|<<
literal|"c:/file1.ext1.ext2"
operator|<<
literal|"file1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithoutSlash"
argument_list|)
operator|<<
literal|"c:file1.ext1.ext2"
operator|<<
literal|"file1"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|baseName
name|void
name|tst_QFileInfo
operator|::
name|baseName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|baseName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|completeBaseName_data
name|void
name|tst_QFileInfo
operator|::
name|completeBaseName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|"file.tar"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|"file.tar.gz"
operator|<<
literal|"file.tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|"/path/file/file.tar.gz"
operator|<<
literal|"file.tar"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
literal|"/path/file.tar"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
literal|"/path/file"
operator|<<
literal|"file"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|"file1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|"file1.ext1"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithSlash"
argument_list|)
operator|<<
literal|"c:/file1.ext1.ext2"
operator|<<
literal|"file1.ext1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"driveWithoutSlash"
argument_list|)
operator|<<
literal|"c:file1.ext1.ext2"
operator|<<
literal|"file1.ext1"
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|completeBaseName
name|void
name|tst_QFileInfo
operator|::
name|completeBaseName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|completeBaseName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|permission_data
name|void
name|tst_QFileInfo
operator|::
name|permission_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"perms"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|applicationFilePath
argument_list|()
operator|<<
name|int
argument_list|(
name|QFile
operator|::
name|ExeUser
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
name|int
argument_list|(
name|QFile
operator|::
name|ReadUser
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|int
argument_list|(
name|QFile
operator|::
name|ReadUser
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|int
argument_list|(
name|QFile
operator|::
name|WriteUser
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource3"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
name|int
argument_list|(
name|QFile
operator|::
name|ExeUser
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|permission
name|void
name|tst_QFileInfo
operator|::
name|permission
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|permission
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|(
name|perms
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size_data
name|void
name|tst_QFileInfo
operator|::
name|size_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource1"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1"
operator|<<
literal|0
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"file1"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"JAJAJAA"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"created-file"
argument_list|)
operator|<<
literal|"file1"
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"resource2"
argument_list|)
operator|<<
literal|":/tst_qfileinfo/resources/file1.ext1.ext2"
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|size
name|void
name|tst_QFileInfo
operator|::
name|size
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|fi
operator|.
name|permissions
argument_list|()
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|fi
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
literal|"size"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemFiles
name|void
name|tst_QFileInfo
operator|::
name|systemFiles
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"This is a Windows only test"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFileInfo
name|fi
argument_list|(
literal|"c:\\pagefile.sys"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|lastModified
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_QFileInfo
operator|::
name|compare_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"same"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
comment|// Since 10.6 we use realpath() in qfsfileengine, and it properly handles
comment|// file system case sensitivity. However here in the autotest we don't
comment|// check if the file system is case sensitive, so to make it pass in the
comment|// default OS X installation we assume we are running on a case insensitive
comment|// file system if on 10.6 and on a case sensitive file system if on 10.5
name|bool
name|caseSensitiveOnMac
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|MacintoshVersion
operator|>=
name|QSysInfo
operator|::
name|MV_10_6
condition|)
name|caseSensitiveOnMac
operator|=
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"casesense1"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"info"
argument_list|,
literal|"Info"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|<<
literal|true
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
operator|<<
operator|!
name|caseSensitiveOnMac
expr_stmt|;
else|#
directive|else
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_QFileInfo
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file2
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|same
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi1
argument_list|(
name|file1
argument_list|)
decl_stmt|,
name|fi2
argument_list|(
name|file2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi1
operator|==
name|fi2
argument_list|,
name|same
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|consistent_data
name|void
name|tst_QFileInfo
operator|::
name|consistent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"slashes"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"\\a\\a\\a\\a"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/a/a/a"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ending slash"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/somedir/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/somedir/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no ending slash"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/somedir"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/a/somedir"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|consistent
name|void
name|tst_QFileInfo
operator|::
name|consistent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|filePath
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|dir
argument_list|()
operator|.
name|path
argument_list|()
operator|+
literal|"/"
operator|+
name|fi
operator|.
name|fileName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileTimes_data
name|void
name|tst_QFileInfo
operator|::
name|fileTimes_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"simplefile.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longfile"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"longfile absolutepath"
argument_list|)
operator|<<
name|QFileInfo
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName"
literal|"longFileNamelongFileNamelongFileNamelongFileName.txt"
argument_list|)
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileTimes
name|void
name|tst_QFileInfo
operator|::
name|fileTimes
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|int
name|sleepTime
init|=
literal|3000
decl_stmt|;
else|#
directive|else
name|int
name|sleepTime
init|=
literal|2000
decl_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"longfile"
argument_list|,
literal|"No long filenames on WinCE"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"longfile absolutepath"
argument_list|,
literal|"No long filenames on WinCE"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|qIsLikelyToBeNfs
argument_list|(
name|file
operator|.
name|handle
argument_list|()
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This Test doesn't work on NFS"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
name|fileName
operator|<<
name|endl
expr_stmt|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|QDateTime
name|beforeWrite
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|{
name|QFileInfo
name|fileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|created
argument_list|()
operator|<
name|beforeWrite
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadWrite
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|ts
operator|<<
name|fileName
operator|<<
name|endl
expr_stmt|;
block|}
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|QDateTime
name|beforeRead
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|{
name|QFileInfo
name|fileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|// On unix created() returns the same as lastModified().
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|created
argument_list|()
operator|<
name|beforeWrite
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|lastModified
argument_list|()
operator|>
name|beforeWrite
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|line
init|=
name|ts
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|line
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|fileInfo
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|created
argument_list|()
operator|<
name|beforeWrite
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//In Vista the last-access timestamp is not updated when the file is accessed/touched (by default).
comment|//To enable this the HKLM\SYSTEM\CurrentControlSet\Control\FileSystem\NtfsDisableLastAccessUpdate
comment|//is set to 0, in the test machine.
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|HKEY
name|key
decl_stmt|;
if|if
condition|(
name|ERROR_SUCCESS
operator|==
name|RegOpenKeyEx
argument_list|(
name|HKEY_LOCAL_MACHINE
argument_list|,
literal|L"SYSTEM\\CurrentControlSet\\Control\\FileSystem"
argument_list|,
literal|0
argument_list|,
name|KEY_READ
argument_list|,
operator|&
name|key
argument_list|)
condition|)
block|{
name|DWORD
name|disabledAccessTimes
init|=
literal|0
decl_stmt|;
name|DWORD
name|size
init|=
sizeof|sizeof
argument_list|(
name|DWORD
argument_list|)
decl_stmt|;
name|LONG
name|error
init|=
name|RegQueryValueEx
argument_list|(
name|key
argument_list|,
literal|L"NtfsDisableLastAccessUpdate"
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
operator|(
name|LPBYTE
operator|)
operator|&
name|disabledAccessTimes
argument_list|,
operator|&
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|ERROR_SUCCESS
operator|==
name|error
operator|&&
name|disabledAccessTimes
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"File access times are disabled in windows registry (this is the default setting)"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|RegCloseKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"simple"
argument_list|,
literal|"WinCE only stores date of access data, not the time"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QEXPECT_FAIL
argument_list|(
literal|"simple"
argument_list|,
literal|"Blackberry OS uses the noatime filesystem option"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"longfile"
argument_list|,
literal|"Blackberry OS uses the noatime filesystem option"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"longfile absolutepath"
argument_list|,
literal|"Blackberry OS uses the noatime filesystem option"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|lastRead
argument_list|()
operator|>
name|beforeRead
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|lastModified
argument_list|()
operator|>
name|beforeWrite
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileInfo
operator|.
name|lastModified
argument_list|()
operator|<
name|beforeRead
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileTimes_oldFile
name|void
name|tst_QFileInfo
operator|::
name|fileTimes_oldFile
parameter_list|()
block|{
comment|// This is not supported on WinCE
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// All files are opened in share mode (both read and write).
name|DWORD
name|shareMode
init|=
name|FILE_SHARE_READ
operator||
name|FILE_SHARE_WRITE
decl_stmt|;
comment|// All files on Windows can be read; there's no such thing as an
comment|// unreadable file. Add GENERIC_WRITE if WriteOnly is passed.
name|int
name|accessRights
init|=
name|GENERIC_READ
operator||
name|GENERIC_WRITE
decl_stmt|;
name|SECURITY_ATTRIBUTES
name|securityAtts
init|=
block|{
sizeof|sizeof
argument_list|(
name|SECURITY_ATTRIBUTES
argument_list|)
block|,
name|NULL
block|,
name|TRUE
block|}
decl_stmt|;
comment|// Regular file mode. In Unbuffered mode, pass the no-buffering flag.
name|DWORD
name|flagsAndAtts
init|=
name|FILE_ATTRIBUTE_NORMAL
decl_stmt|;
comment|// WriteOnly can create files, ReadOnly cannot.
name|DWORD
name|creationDisp
init|=
name|OPEN_ALWAYS
decl_stmt|;
comment|// Create the file handle.
name|HANDLE
name|fileHandle
init|=
name|CreateFile
argument_list|(
literal|L"oldfile.txt"
argument_list|,
name|accessRights
argument_list|,
name|shareMode
argument_list|,
operator|&
name|securityAtts
argument_list|,
name|creationDisp
argument_list|,
name|flagsAndAtts
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
comment|// Set file times back to 1601.
name|SYSTEMTIME
name|stime
decl_stmt|;
name|stime
operator|.
name|wYear
operator|=
literal|1601
expr_stmt|;
name|stime
operator|.
name|wMonth
operator|=
literal|1
expr_stmt|;
name|stime
operator|.
name|wDayOfWeek
operator|=
literal|1
expr_stmt|;
name|stime
operator|.
name|wDay
operator|=
literal|1
expr_stmt|;
name|stime
operator|.
name|wHour
operator|=
literal|1
expr_stmt|;
name|stime
operator|.
name|wMinute
operator|=
literal|0
expr_stmt|;
name|stime
operator|.
name|wSecond
operator|=
literal|0
expr_stmt|;
name|stime
operator|.
name|wMilliseconds
operator|=
literal|0
expr_stmt|;
name|FILETIME
name|ctime
decl_stmt|;
name|QVERIFY
argument_list|(
name|SystemTimeToFileTime
argument_list|(
operator|&
name|stime
argument_list|,
operator|&
name|ctime
argument_list|)
argument_list|)
expr_stmt|;
name|FILETIME
name|atime
init|=
name|ctime
decl_stmt|;
name|FILETIME
name|mtime
init|=
name|atime
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileHandle
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SetFileTime
argument_list|(
name|fileHandle
argument_list|,
operator|&
name|ctime
argument_list|,
operator|&
name|atime
argument_list|,
operator|&
name|mtime
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|fileHandle
argument_list|)
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
literal|"oldfile.txt"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|lastModified
argument_list|()
argument_list|,
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1601
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
operator|.
name|toLocalTime
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
end_ifndef
begin_function
DECL|function|isSymLink_data
name|void
name|tst_QFileInfo
operator|::
name|isSymLink_data
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"dummyfile"
argument_list|)
expr_stmt|;
name|QFile
name|file1
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|link
argument_list|(
literal|"link.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file2
argument_list|(
literal|"dummyfile"
argument_list|)
decl_stmt|;
name|file2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|link
argument_list|(
literal|"brokenlink.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|file2
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isSymLink"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"linkTarget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existent file"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
operator|<<
literal|false
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"link"
argument_list|)
operator|<<
literal|"link.lnk"
operator|<<
literal|true
operator|<<
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"broken link"
argument_list|)
operator|<<
literal|"brokenlink.lnk"
operator|<<
literal|true
operator|<<
name|QFileInfo
argument_list|(
literal|"dummyfile"
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSymLink
name|void
name|tst_QFileInfo
operator|::
name|isSymLink
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isSymLink
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isSymLink
argument_list|()
argument_list|,
name|isSymLink
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|isHidden_data
name|void
name|tst_QFileInfo
operator|::
name|isHidden_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isHidden"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|info
decl|,
name|QDir
operator|::
name|drives
argument_list|()
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
literal|"drive."
operator|+
name|info
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|info
operator|.
name|path
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"./hidden-directory"
argument_list|)
operator|.
name|exists
argument_list|()
operator|||
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"./hidden-directory"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|SetFileAttributesW
argument_list|(
cast|reinterpret_cast
argument_list|<
name|LPCWSTR
argument_list|>
argument_list|(
name|QString
argument_list|(
literal|"./hidden-directory"
argument_list|)
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
name|FILE_ATTRIBUTE_HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C:/path/to/hidden-directory"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/hidden-directory"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"C:/path/to/hidden-directory/."
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/hidden-directory/."
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
literal|"./.hidden-directory"
argument_list|)
operator|.
name|exists
argument_list|()
operator|||
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"./.hidden-directory"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/path/to/.hidden-directory"
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"/.hidden-directory"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/path/to/.hidden-directory/."
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"/.hidden-directory/."
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/path/to/.hidden-directory/.."
argument_list|)
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QString
argument_list|(
literal|"/.hidden-directory/.."
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
comment|// /bin has the hidden attribute on Mac OS X
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/bin/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/bin/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"/bin/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/bin/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac_etc"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/etc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac_private_etc"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/private/etc"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac_Applications"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/Applications"
argument_list|)
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isHidden
name|void
name|tst_QFileInfo
operator|::
name|isHidden
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isHidden
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isHidden
argument_list|()
argument_list|,
name|isHidden
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_function
DECL|function|isHiddenFromFinder
name|void
name|tst_QFileInfo
operator|::
name|isHiddenFromFinder
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|filename
init|=
literal|"test_foobar.txt"
decl_stmt|;
name|QFile
name|testFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|struct
name|stat
name|buf
decl_stmt|;
name|stat
argument_list|(
name|filename
argument_list|,
operator|&
name|buf
argument_list|)
expr_stmt|;
name|chflags
argument_list|(
name|filename
argument_list|,
name|buf
operator|.
name|st_flags
operator||
name|UF_HIDDEN
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isHidden
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|isBundle_data
name|void
name|tst_QFileInfo
operator|::
name|isBundle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isBundle"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"root"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac_Applications"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/Applications"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mac_Applications"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/Applications/Safari.app"
argument_list|)
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isBundle
name|void
name|tst_QFileInfo
operator|::
name|isBundle
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isBundle
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isBundle
argument_list|()
argument_list|,
name|isBundle
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNativePath_data
name|void
name|tst_QFileInfo
operator|::
name|isNativePath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isNativePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-constructed"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"local root"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"local non-existent file"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/abrakadabra.boo"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qresource root"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNativePath
name|void
name|tst_QFileInfo
operator|::
name|isNativePath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isNativePath
argument_list|)
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isNull
argument_list|()
condition|)
name|info
operator|=
name|QFileInfo
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|isNativePath
argument_list|()
argument_list|,
name|isNativePath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refresh
name|void
name|tst_QFileInfo
operator|::
name|refresh
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|int
name|sleepTime
init|=
literal|3000
decl_stmt|;
else|#
directive|else
name|int
name|sleepTime
init|=
literal|2000
decl_stmt|;
endif|#
directive|endif
name|QFile
operator|::
name|remove
argument_list|(
literal|"file1"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
literal|"file1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"JAJAJAA"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QDateTime
name|lastModified
init|=
name|info
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|file
operator|.
name|write
argument_list|(
literal|"JOJOJO"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|lastModified
argument_list|()
operator|==
name|lastModified
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_VISTA
operator|||
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|&
name|QSysInfo
operator|::
name|WV_CE_based
condition|)
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// On Windows CE we need to close the file.
comment|// Otherwise the content will be cached and not
comment|// flushed to the storage, although we flushed it
comment|// manually!!! CE has interim cache, we cannot influence.
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|info
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|13
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|lastModified
argument_list|()
operator|>
name|lastModified
argument_list|)
expr_stmt|;
name|QFileInfo
name|info2
init|=
name|info
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info2
operator|.
name|size
argument_list|()
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|info2
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info2
operator|.
name|size
argument_list|()
argument_list|,
name|info
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|ntfsJunctionPointsAndSymlinks_data
name|void
name|tst_QFileInfo
operator|::
name|ntfsJunctionPointsAndSymlinks_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isSymLink"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"linkTarget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"canonicalFilePath"
argument_list|)
expr_stmt|;
name|QDir
name|pwd
decl_stmt|;
name|pwd
operator|.
name|mkdir
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|QLibrary
name|kernel32
argument_list|(
literal|"kernel32"
argument_list|)
decl_stmt|;
typedef|typedef
name|BOOLEAN
function_decl|(
name|WINAPI
modifier|*
name|PtrCreateSymbolicLink
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|LPCWSTR
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
name|PtrCreateSymbolicLink
name|createSymbolicLinkW
init|=
literal|0
decl_stmt|;
name|createSymbolicLinkW
operator|=
operator|(
name|PtrCreateSymbolicLink
operator|)
name|kernel32
operator|.
name|resolve
argument_list|(
literal|"CreateSymbolicLinkW"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|createSymbolicLinkW
condition|)
block|{
comment|//we need at least one data set for the test not to fail when skipping _data function
name|QDir
name|target
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dummy"
argument_list|)
operator|<<
name|target
operator|.
name|path
argument_list|()
operator|<<
literal|false
operator|<<
literal|""
operator|<<
name|target
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
name|QSKIP
argument_list|(
literal|"symbolic links not supported by operating system"
argument_list|)
expr_stmt|;
block|}
block|{
comment|//Directory symlinks
name|QDir
name|target
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|target
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|absTarget
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|target
operator|.
name|absolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|absSymlink
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|pwd
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\\abs_symlink"
argument_list|)
decl_stmt|;
name|QString
name|relTarget
init|=
literal|"target"
decl_stmt|;
name|QString
name|relSymlink
init|=
literal|"rel_symlink"
decl_stmt|;
name|QString
name|fileInTarget
argument_list|(
name|absTarget
argument_list|)
decl_stmt|;
name|fileInTarget
operator|.
name|append
argument_list|(
literal|"\\file"
argument_list|)
expr_stmt|;
name|QString
name|fileInSymlink
argument_list|(
name|absSymlink
argument_list|)
decl_stmt|;
name|fileInSymlink
operator|.
name|append
argument_list|(
literal|"\\file"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileInTarget
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|DWORD
name|err
init|=
name|ERROR_SUCCESS
decl_stmt|;
if|if
condition|(
operator|!
name|pwd
operator|.
name|exists
argument_list|(
literal|"abs_symlink"
argument_list|)
condition|)
if|if
condition|(
operator|!
name|createSymbolicLinkW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|absSymlink
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|absTarget
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0x1
argument_list|)
condition|)
name|err
operator|=
name|GetLastError
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|==
name|ERROR_SUCCESS
operator|&&
operator|!
name|pwd
operator|.
name|exists
argument_list|(
name|relSymlink
argument_list|)
condition|)
if|if
condition|(
operator|!
name|createSymbolicLinkW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|relSymlink
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|relTarget
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0x1
argument_list|)
condition|)
name|err
operator|=
name|GetLastError
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|!=
name|ERROR_SUCCESS
condition|)
block|{
name|wchar_t
name|errstr
index|[
literal|0x100
index|]
decl_stmt|;
name|DWORD
name|count
init|=
name|FormatMessageW
argument_list|(
name|FORMAT_MESSAGE_FROM_SYSTEM
argument_list|,
literal|0
argument_list|,
name|err
argument_list|,
literal|0
argument_list|,
name|errstr
argument_list|,
literal|0x100
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QString
name|error
argument_list|(
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|errstr
argument_list|,
name|count
argument_list|)
argument_list|)
decl_stmt|;
name|qWarning
argument_list|()
operator|<<
name|error
expr_stmt|;
comment|//we need at least one data set for the test not to assert fail when skipping _data function
name|QDir
name|target
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dummy"
argument_list|)
operator|<<
name|target
operator|.
name|path
argument_list|()
operator|<<
literal|false
operator|<<
literal|""
operator|<<
name|target
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
name|QSKIP
argument_list|(
literal|"link not supported by FS or insufficient privilege"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absolute dir symlink"
argument_list|)
operator|<<
name|absSymlink
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|absTarget
argument_list|)
operator|<<
name|target
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relative dir symlink"
argument_list|)
operator|<<
name|relSymlink
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|relTarget
argument_list|)
operator|<<
name|target
operator|.
name|canonicalPath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file in symlink dir"
argument_list|)
operator|<<
name|fileInSymlink
operator|<<
literal|false
operator|<<
literal|""
operator|<<
name|target
operator|.
name|canonicalPath
argument_list|()
operator|.
name|append
argument_list|(
literal|"/file"
argument_list|)
expr_stmt|;
block|}
block|{
comment|//File symlinks
name|QFileInfo
name|target
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"tst_qfileinfo.cpp"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|absTarget
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|target
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|absSymlink
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|pwd
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\\abs_symlink.cpp"
argument_list|)
decl_stmt|;
name|QString
name|relTarget
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|pwd
operator|.
name|relativeFilePath
argument_list|(
name|target
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|relSymlink
init|=
literal|"rel_symlink.cpp"
decl_stmt|;
name|QVERIFY
argument_list|(
name|pwd
operator|.
name|exists
argument_list|(
literal|"abs_symlink.cpp"
argument_list|)
operator|||
name|createSymbolicLinkW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|absSymlink
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|absTarget
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0x0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pwd
operator|.
name|exists
argument_list|(
name|relSymlink
argument_list|)
operator|||
name|createSymbolicLinkW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|relSymlink
operator|.
name|utf16
argument_list|()
argument_list|,
operator|(
name|wchar_t
operator|*
operator|)
name|relTarget
operator|.
name|utf16
argument_list|()
argument_list|,
literal|0x0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absolute file symlink"
argument_list|)
operator|<<
name|absSymlink
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|absTarget
argument_list|)
operator|<<
name|target
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relative file symlink"
argument_list|)
operator|<<
name|relSymlink
operator|<<
literal|true
operator|<<
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|relTarget
argument_list|)
operator|<<
name|target
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
block|}
comment|//Junctions
name|QString
name|target
init|=
literal|"target"
decl_stmt|;
name|QString
name|junction
init|=
literal|"junction_pwd"
decl_stmt|;
name|FileSystem
operator|::
name|createNtfsJunction
argument_list|(
name|target
argument_list|,
name|junction
argument_list|)
expr_stmt|;
name|QFileInfo
name|targetInfo
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junction_pwd"
argument_list|)
operator|<<
name|junction
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QFileInfo
name|fileInJunction
argument_list|(
name|targetInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|append
argument_list|(
literal|"/file"
argument_list|)
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileInJunction
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file in junction"
argument_list|)
operator|<<
name|fileInJunction
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
literal|false
operator|<<
literal|""
operator|<<
name|fileInJunction
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
name|target
operator|=
name|QDir
operator|::
name|rootPath
argument_list|()
expr_stmt|;
name|junction
operator|=
literal|"junction_root"
expr_stmt|;
name|FileSystem
operator|::
name|createNtfsJunction
argument_list|(
name|target
argument_list|,
name|junction
argument_list|)
expr_stmt|;
name|targetInfo
operator|.
name|setFile
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junction_root"
argument_list|)
operator|<<
name|junction
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|//Mountpoint
typedef|typedef
name|BOOLEAN
function_decl|(
name|WINAPI
modifier|*
name|PtrGetVolumeNameForVolumeMountPointW
function_decl|)
parameter_list|(
name|LPCWSTR
parameter_list|,
name|LPWSTR
parameter_list|,
name|DWORD
parameter_list|)
function_decl|;
name|PtrGetVolumeNameForVolumeMountPointW
name|getVolumeNameForVolumeMountPointW
init|=
literal|0
decl_stmt|;
name|getVolumeNameForVolumeMountPointW
operator|=
operator|(
name|PtrGetVolumeNameForVolumeMountPointW
operator|)
name|kernel32
operator|.
name|resolve
argument_list|(
literal|"GetVolumeNameForVolumeMountPointW"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getVolumeNameForVolumeMountPointW
condition|)
block|{
name|wchar_t
name|buffer
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|QString
name|rootPath
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QDir
operator|::
name|rootPath
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|getVolumeNameForVolumeMountPointW
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|rootPath
operator|.
name|utf16
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|MAX_PATH
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|rootVolume
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|junction
operator|=
literal|"mountpoint"
expr_stmt|;
name|rootVolume
operator|.
name|replace
argument_list|(
literal|"\\\\?\\"
argument_list|,
literal|"\\??\\"
argument_list|)
expr_stmt|;
name|FileSystem
operator|::
name|createNtfsJunction
argument_list|(
name|rootVolume
argument_list|,
name|junction
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mountpoint"
argument_list|)
operator|<<
name|junction
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ntfsJunctionPointsAndSymlinks
name|void
name|tst_QFileInfo
operator|::
name|ntfsJunctionPointsAndSymlinks
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isSymLink
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|canonicalFilePath
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isSymLink
argument_list|()
argument_list|,
name|isSymLink
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSymLink
condition|)
block|{
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|symLinkTarget
argument_list|()
argument_list|,
name|linkTarget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|canonicalFilePath
argument_list|()
argument_list|,
name|canonicalFilePath
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|brokenShortcut
name|void
name|tst_QFileInfo
operator|::
name|brokenShortcut
parameter_list|()
block|{
name|QString
name|linkName
argument_list|(
literal|"borkenlink.lnk"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|linkName
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|linkName
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|file
operator|.
name|write
argument_list|(
literal|"b0rk"
argument_list|)
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFileInfo
name|info
argument_list|(
name|linkName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|linkName
argument_list|)
expr_stmt|;
name|QDir
name|current
decl_stmt|;
comment|// QTBUG-21863
name|QVERIFY
argument_list|(
name|current
operator|.
name|mkdir
argument_list|(
name|linkName
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|dirInfo
argument_list|(
name|linkName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dirInfo
operator|.
name|isSymLink
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dirInfo
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|rmdir
argument_list|(
name|linkName
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|isWritable
name|void
name|tst_QFileInfo
operator|::
name|isWritable
parameter_list|()
block|{
name|QFile
name|tempfile
argument_list|(
literal|"tempfile.txt"
argument_list|)
decl_stmt|;
name|tempfile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|write
argument_list|(
literal|"This file is generated by the QFileInfo autotest."
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"tempfile.txt"
argument_list|)
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|tempfile
operator|.
name|remove
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QFileInfo
name|fi
argument_list|(
literal|"\\Windows\\wince.nls"
argument_list|)
decl_stmt|;
else|#
directive|else
name|QFileInfo
name|fi
argument_list|(
literal|"c:\\pagefile.sys"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fi
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
comment|// The Blackberry filesystem is read-only
name|QVERIFY
argument_list|(
operator|!
name|QFileInfo
argument_list|(
literal|"/etc/passwd"
argument_list|)
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
if|if
condition|(
operator|::
name|getuid
argument_list|()
operator|==
literal|0
condition|)
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
literal|"/etc/passwd"
argument_list|)
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|QVERIFY
argument_list|(
operator|!
name|QFileInfo
argument_list|(
literal|"/etc/passwd"
argument_list|)
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isExecutable
name|void
name|tst_QFileInfo
operator|::
name|isExecutable
parameter_list|()
block|{
name|QString
name|appPath
init|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
decl_stmt|;
name|appPath
operator|+=
literal|"/tst_qfileinfo"
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|appPath
operator|+=
literal|".exe"
expr_stmt|;
endif|#
directive|endif
name|QFileInfo
name|fi
argument_list|(
name|appPath
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|isExecutable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"qfileinfo.pro"
argument_list|)
argument_list|)
operator|.
name|isExecutable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
comment|// Symlink to executable
name|QFile
name|appFile
argument_list|(
name|appPath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|appFile
operator|.
name|link
argument_list|(
literal|"link.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
literal|"link.lnk"
argument_list|)
operator|.
name|isExecutable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
comment|// Symlink to .pro file
name|QFile
name|proFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"qfileinfo.pro"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|proFile
operator|.
name|link
argument_list|(
literal|"link.lnk"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
literal|"link.lnk"
argument_list|)
operator|.
name|isExecutable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"link.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testDecomposedUnicodeNames_data
name|void
name|tst_QFileInfo
operator|::
name|testDecomposedUnicodeNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"exists"
argument_list|)
expr_stmt|;
name|QString
name|currPath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"latin-only"
argument_list|)
operator|<<
name|currPath
operator|+
literal|"/4.pdf"
operator|<<
literal|"4.pdf"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-decomposed uni"
argument_list|)
operator|<<
name|currPath
operator|+
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"/4 Ã¤.pdf"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"4 Ã¤.pdf"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"many-decomposed uni"
argument_list|)
operator|<<
name|currPath
operator|+
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"/4 Ã¤Ã¤Ã¤copy.pdf"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"4 Ã¤Ã¤Ã¤copy.pdf"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no decomposed"
argument_list|)
operator|<<
name|currPath
operator|+
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"/4 Ã¸Ã¸Ã¸copy.pdf"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"4 Ã¸Ã¸Ã¸copy.pdf"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|// This is a helper class that ensures that files created during the test
end_comment
begin_comment
comment|// will be removed afterwards, even if the test fails or throws an exception.
end_comment
begin_class
DECL|class|NativeFileCreator
class|class
name|NativeFileCreator
block|{
public|public:
DECL|function|NativeFileCreator
name|NativeFileCreator
parameter_list|(
specifier|const
name|QString
modifier|&
name|filePath
parameter_list|)
member_init_list|:
name|m_filePath
argument_list|(
name|filePath
argument_list|)
member_init_list|,
name|m_error
argument_list|(
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|int
name|fd
init|=
name|open
argument_list|(
name|m_filePath
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_CREAT
operator||
name|O_WRONLY
argument_list|,
name|S_IRUSR
operator||
name|S_IWUSR
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|>=
literal|0
condition|)
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
else|else
name|m_error
operator|=
name|errno
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|~NativeFileCreator
name|~
name|NativeFileCreator
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
if|if
condition|(
name|m_error
operator|==
literal|0
condition|)
name|unlink
argument_list|(
name|m_filePath
operator|.
name|normalized
argument_list|(
name|QString
operator|::
name|NormalizationForm_D
argument_list|)
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|error
name|int
name|error
parameter_list|()
specifier|const
block|{
return|return
name|m_error
return|;
block|}
private|private:
DECL|member|m_filePath
name|QString
name|m_filePath
decl_stmt|;
DECL|member|m_error
name|int
name|m_error
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testDecomposedUnicodeNames
name|void
name|tst_QFileInfo
operator|::
name|testDecomposedUnicodeNames
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"This is a OS X only test (unless you know more about filesystems, then maybe you should try it ;)"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|NativeFileCreator
name|nativeFileCreator
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|int
name|error
init|=
name|nativeFileCreator
operator|.
name|error
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|error
operator|==
literal|0
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Couldn't create native file %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|filePath
argument_list|)
operator|.
name|arg
argument_list|(
name|strerror
argument_list|(
name|error
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|QTEST
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|,
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|file
operator|.
name|exists
argument_list|()
argument_list|,
literal|"exists"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|equalOperator
name|void
name|tst_QFileInfo
operator|::
name|equalOperator
parameter_list|()
specifier|const
block|{
comment|/* Compare two default constructed values. Yes, to me it seems it should be the opposite too, but      * this is how the code was written. */
name|QVERIFY
argument_list|(
operator|!
operator|(
name|QFileInfo
argument_list|()
operator|==
name|QFileInfo
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equalOperatorWithDifferentSlashes
name|void
name|tst_QFileInfo
operator|::
name|equalOperatorWithDifferentSlashes
parameter_list|()
specifier|const
block|{
specifier|const
name|QFileInfo
name|fi1
argument_list|(
literal|"/usr"
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfo
name|fi2
argument_list|(
literal|"/usr/"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fi1
argument_list|,
name|fi2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|notEqualOperator
name|void
name|tst_QFileInfo
operator|::
name|notEqualOperator
parameter_list|()
specifier|const
block|{
comment|/* Compare two default constructed values. Yes, to me it seems it should be the opposite too, but      * this is how the code was written. */
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|()
operator|!=
name|QFileInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|detachingOperations
name|void
name|tst_QFileInfo
operator|::
name|detachingOperations
parameter_list|()
block|{
name|QFileInfo
name|info1
decl_stmt|;
name|QVERIFY
argument_list|(
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|info1
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|QFileInfo
name|info2
init|=
name|info1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info2
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|info2
operator|.
name|setCaching
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info2
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|info1
operator|.
name|setFile
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QFile
name|file
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|info1
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info1
operator|.
name|setFile
argument_list|(
name|QDir
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QFileInfo
name|info3
decl_stmt|;
name|QVERIFY
argument_list|(
name|info3
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|info3
operator|=
name|info1
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info3
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info1
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info1
operator|.
name|makeAbsolute
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info1
operator|.
name|caching
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_function
DECL|function|IsUserAdmin
name|BOOL
name|IsUserAdmin
parameter_list|()
block|{
name|BOOL
name|b
decl_stmt|;
name|SID_IDENTIFIER_AUTHORITY
name|NtAuthority
init|=
name|SECURITY_NT_AUTHORITY
decl_stmt|;
name|PSID
name|AdministratorsGroup
decl_stmt|;
name|b
operator|=
name|AllocateAndInitializeSid
argument_list|(
operator|&
name|NtAuthority
argument_list|,
literal|2
argument_list|,
name|SECURITY_BUILTIN_DOMAIN_RID
argument_list|,
name|DOMAIN_ALIAS_RID_ADMINS
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|AdministratorsGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
if|if
condition|(
operator|!
name|CheckTokenMembership
argument_list|(
name|NULL
argument_list|,
name|AdministratorsGroup
argument_list|,
operator|&
name|b
argument_list|)
condition|)
name|b
operator|=
literal|false
expr_stmt|;
name|FreeSid
argument_list|(
name|AdministratorsGroup
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|b
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_CORE_EXPORT
name|int
name|qt_ntfs_permission_lookup
decl_stmt|;
end_decl_stmt
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
DECL|function|owner
name|void
name|tst_QFileInfo
operator|::
name|owner
parameter_list|()
block|{
name|QString
name|userName
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
block|{
name|passwd
modifier|*
name|user
init|=
name|getpwuid
argument_list|(
name|geteuid
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|char
modifier|*
name|usernameBuf
init|=
name|user
operator|->
name|pw_name
decl_stmt|;
name|userName
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|usernameBuf
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|wchar_t
name|usernameBuf
index|[
literal|1024
index|]
decl_stmt|;
name|DWORD
name|bufSize
init|=
literal|1024
decl_stmt|;
if|if
condition|(
name|GetUserNameW
argument_list|(
name|usernameBuf
argument_list|,
operator|&
name|bufSize
argument_list|)
condition|)
block|{
name|userName
operator|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|usernameBuf
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WindowsVersion
operator|>=
name|QSysInfo
operator|::
name|WV_VISTA
operator|&&
name|IsUserAdmin
argument_list|()
condition|)
block|{
comment|// Special case : If the user is a member of Administrators group, all files
comment|// created by the current user are owned by the Administrators group.
name|LPLOCALGROUP_USERS_INFO_0
name|pBuf
init|=
name|NULL
decl_stmt|;
name|DWORD
name|dwLevel
init|=
literal|0
decl_stmt|;
name|DWORD
name|dwFlags
init|=
name|LG_INCLUDE_INDIRECT
decl_stmt|;
name|DWORD
name|dwPrefMaxLen
init|=
name|MAX_PREFERRED_LENGTH
decl_stmt|;
name|DWORD
name|dwEntriesRead
init|=
literal|0
decl_stmt|;
name|DWORD
name|dwTotalEntries
init|=
literal|0
decl_stmt|;
name|NET_API_STATUS
name|nStatus
decl_stmt|;
name|nStatus
operator|=
name|NetUserGetLocalGroups
argument_list|(
literal|0
argument_list|,
name|usernameBuf
argument_list|,
name|dwLevel
argument_list|,
name|dwFlags
argument_list|,
operator|(
name|LPBYTE
operator|*
operator|)
operator|&
name|pBuf
argument_list|,
name|dwPrefMaxLen
argument_list|,
operator|&
name|dwEntriesRead
argument_list|,
operator|&
name|dwTotalEntries
argument_list|)
expr_stmt|;
comment|// Check if the current user is a member of Administrators group
if|if
condition|(
name|nStatus
operator|==
name|NERR_Success
operator|&&
name|pBuf
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|dwEntriesRead
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|groupName
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|pBuf
index|[
name|i
index|]
operator|.
name|lgrui0_name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|groupName
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|"Administrators"
argument_list|)
argument_list|)
condition|)
name|userName
operator|=
name|groupName
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pBuf
operator|!=
name|NULL
condition|)
name|NetApiBufferFree
argument_list|(
name|pBuf
argument_list|)
expr_stmt|;
block|}
block|}
name|qt_ntfs_permission_lookup
operator|=
literal|1
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|userName
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Can't retrieve the user name"
argument_list|)
expr_stmt|;
name|QString
name|fileName
argument_list|(
literal|"ownertest.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
operator|||
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QFile
name|testFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|testData
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|write
argument_list|(
name|testData
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|fi
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|owner
argument_list|()
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|qt_ntfs_permission_lookup
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|group
name|void
name|tst_QFileInfo
operator|::
name|group
parameter_list|()
block|{
name|QString
name|expected
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|struct
name|group
modifier|*
name|gr
decl_stmt|;
name|gid_t
name|gid
init|=
name|getegid
argument_list|()
decl_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|gr
operator|=
name|getgrgid
argument_list|(
name|gid
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|gr
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"getgrgid returned 0: %1, cannot determine my own group"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|gr
operator|->
name|gr_name
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|fileName
argument_list|(
literal|"ownertest.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|QFile
name|testFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|testData
argument_list|(
literal|"testfile"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|write
argument_list|(
name|testData
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fi
operator|.
name|group
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidState
name|void
name|tst_QFileInfo
operator|::
name|invalidState
parameter_list|()
block|{
comment|// Shouldn't crash;
block|{
name|QFileInfo
name|info
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|created
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastRead
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
block|{
name|QFileInfo
name|info
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|created
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastRead
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
block|{
name|QFileInfo
name|info
argument_list|(
literal|"file-doesn't-really-exist.txt"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|created
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastRead
argument_list|()
expr_stmt|;
name|info
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonExistingFileDates
name|void
name|tst_QFileInfo
operator|::
name|nonExistingFileDates
parameter_list|()
block|{
name|QFileInfo
name|info
argument_list|(
literal|"non-existing-file.foobar"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|created
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|lastRead
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|info
operator|.
name|lastModified
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFileInfo
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfileinfo.moc"
end_include
end_unit
