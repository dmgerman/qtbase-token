begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdiriterator.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/private/qfsfileengine_p.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_define
DECL|macro|Q_NO_SYMLINKS
define|#
directive|define
name|Q_NO_SYMLINKS
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDirIterator::IteratorFlags
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDir::Filters
argument_list|)
end_macro
begin_class
DECL|class|tst_QDirIterator
class|class
name|tst_QDirIterator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private:
comment|// convenience functions
DECL|member|createdDirectories
name|QStringList
name|createdDirectories
decl_stmt|;
DECL|member|createdFiles
name|QStringList
name|createdFiles
decl_stmt|;
DECL|member|currentDir
name|QDir
name|currentDir
decl_stmt|;
DECL|function|createDirectory
name|bool
name|createDirectory
parameter_list|(
specifier|const
name|QString
modifier|&
name|dirName
parameter_list|)
block|{
if|if
condition|(
name|currentDir
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
condition|)
block|{
name|createdDirectories
operator|.
name|prepend
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|enum|Cleanup
DECL|enumerator|DoDelete
DECL|enumerator|DontDelete
enum|enum
name|Cleanup
block|{
name|DoDelete
block|,
name|DontDelete
block|}
enum|;
DECL|function|createFile
name|bool
name|createFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|Cleanup
name|cleanup
init|=
name|DoDelete
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
if|if
condition|(
name|cleanup
operator|==
name|DoDelete
condition|)
name|createdFiles
operator|<<
name|fileName
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|function|createLink
name|bool
name|createLink
parameter_list|(
specifier|const
name|QString
modifier|&
name|destination
parameter_list|,
specifier|const
name|QString
modifier|&
name|linkName
parameter_list|)
block|{
if|if
condition|(
name|QFile
operator|::
name|link
argument_list|(
name|destination
argument_list|,
name|linkName
argument_list|)
condition|)
block|{
name|createdFiles
operator|<<
name|linkName
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|iterateRelativeDirectory_data
parameter_list|()
function_decl|;
name|void
name|iterateRelativeDirectory
parameter_list|()
function_decl|;
name|void
name|iterateResource_data
parameter_list|()
function_decl|;
name|void
name|iterateResource
parameter_list|()
function_decl|;
name|void
name|stopLinkLoop
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|engineWithNoIterator
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|absoluteFilePathsFromRelativeIteratorPath
parameter_list|()
function_decl|;
name|void
name|recurseWithFilters
parameter_list|()
specifier|const
function_decl|;
name|void
name|longPath
parameter_list|()
function_decl|;
name|void
name|dirorder
parameter_list|()
function_decl|;
name|void
name|relativePaths
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|void
name|uncPaths_data
parameter_list|()
function_decl|;
name|void
name|uncPaths
parameter_list|()
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|void
name|hiddenDirs_hiddenFiles
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|BUILTIN_TESTDATA
private|private:
DECL|member|m_dataDir
name|QSharedPointer
argument_list|<
name|QTemporaryDir
argument_list|>
name|m_dataDir
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QDirIterator
operator|::
name|initTestCase
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID_NO_SDK
argument_list|)
name|QString
name|testdata_dir
init|=
name|QStandardPaths
operator|::
name|writableLocation
argument_list|(
name|QStandardPaths
operator|::
name|CacheLocation
argument_list|)
decl_stmt|;
name|QString
name|resourceSourcePath
init|=
name|QStringLiteral
argument_list|(
literal|":/"
argument_list|)
decl_stmt|;
name|QDirIterator
name|it
argument_list|(
name|resourceSourcePath
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QFileInfo
name|fileInfo
init|=
name|it
operator|.
name|fileInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fileInfo
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|QString
name|destination
init|=
name|testdata_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|fileInfo
operator|.
name|filePath
argument_list|()
operator|.
name|mid
argument_list|(
name|resourceSourcePath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|QFileInfo
name|destinationFileInfo
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destinationFileInfo
operator|.
name|exists
argument_list|()
condition|)
block|{
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|destinationFileInfo
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|copy
argument_list|(
name|fileInfo
operator|.
name|filePath
argument_list|()
argument_list|,
name|destination
argument_list|)
condition|)
name|qWarning
argument_list|(
literal|"Failed to copy %s"
argument_list|,
name|qPrintable
argument_list|(
name|fileInfo
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|testdata_dir
operator|+=
name|QStringLiteral
argument_list|(
literal|"/entrylist"
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|BUILTIN_TESTDATA
argument_list|)
name|m_dataDir
operator|=
name|QEXTRACTTESTDATA
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|m_dataDir
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not extract test data"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|testdata_dir
init|=
name|m_dataDir
operator|->
name|path
argument_list|()
decl_stmt|;
else|#
directive|else
comment|// chdir into testdata directory, then find testdata by relative paths.
name|QString
name|testdata_dir
init|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"entrylist"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|testdata_dir
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Could not chdir to "
operator|+
name|testdata_dir
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/entrylist4.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/directory/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/directory/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/directory/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"entrylist/directory/entrylist4.lnk"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"entrylist"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"entrylist/directory"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"entrylist/file"
argument_list|,
name|DontDelete
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"entrylist/writable"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"entrylist/directory/dummy"
argument_list|,
name|DontDelete
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"recursiveDirs"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"recursiveDirs/dir1"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"recursiveDirs/textFileA.txt"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"recursiveDirs/dir1/aPage.html"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"recursiveDirs/dir1/textFileB.txt"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"foo/bar/readme.txt"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"empty"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// ### Sadly, this is a platform difference right now.
name|createLink
argument_list|(
literal|"entrylist/file"
argument_list|,
literal|"entrylist/linktofile.lnk"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|createLink
argument_list|(
literal|"entrylist/directory"
argument_list|,
literal|"entrylist/linktodirectory.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|createLink
argument_list|(
literal|"entrylist/nothing"
argument_list|,
literal|"entrylist/brokenlink.lnk"
argument_list|)
expr_stmt|;
else|#
directive|else
name|createLink
argument_list|(
literal|"file"
argument_list|,
literal|"entrylist/linktofile.lnk"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS_TO_DIRS
name|createLink
argument_list|(
literal|"directory"
argument_list|,
literal|"entrylist/linktodirectory.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|createLink
argument_list|(
literal|"nothing"
argument_list|,
literal|"entrylist/brokenlink.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalFile"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenFile"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalDirectory"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenDirectory"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalDirectory/normalFile"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalDirectory/.hiddenFile"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenDirectory/normalFile"
argument_list|)
expr_stmt|;
name|createFile
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenDirectory/.hiddenFile"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalDirectory/normalDirectory"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/normalDirectory/.hiddenDirectory"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenDirectory/normalDirectory"
argument_list|)
expr_stmt|;
name|createDirectory
argument_list|(
literal|"hiddenDirs_hiddenFiles/.hiddenDirectory/.hiddenDirectory"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDirIterator
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|Q_FOREACH
argument_list|(
argument|QString fileName
argument_list|,
argument|createdFiles
argument_list|)
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|QString dirName
argument_list|,
argument|createdDirectories
argument_list|)
name|currentDir
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINRT
name|QDir
operator|::
name|setCurrent
argument_list|(
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_WINRT
block|}
end_function
begin_function
DECL|function|iterateRelativeDirectory_data
name|void
name|tst_QDirIterator
operator|::
name|iterateRelativeDirectory_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|// relative from current path or abs
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDir
operator|::
name|Filters
argument_list|>
argument_list|(
literal|"filters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"nameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"entries"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no flags"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
literal|"entrylist/.,"
literal|"entrylist/..,"
endif|#
directive|endif
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory,"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS_TO_DIRS
argument_list|)
literal|"entrylist/linktodirectory.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoDot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDot
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
literal|"entrylist/..,"
endif|#
directive|endif
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory,"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS_TO_DIRS
argument_list|)
literal|"entrylist/linktodirectory.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoDotDot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
literal|"entrylist/.,"
endif|#
directive|endif
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory,"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS_TO_DIRS
argument_list|)
literal|"entrylist/linktodirectory.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoDotAndDotDot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory,"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS_TO_DIRS
argument_list|)
literal|"entrylist/linktodirectory.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Subdirectories | QDir::FollowSymlinks"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
name|QDirIterator
operator|::
name|Subdirectories
operator||
name|QDirIterator
operator|::
name|FollowSymlinks
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
literal|"entrylist/.,"
literal|"entrylist/..,"
literal|"entrylist/directory/.,"
literal|"entrylist/directory/..,"
endif|#
directive|endif
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory,"
literal|"entrylist/directory/dummy,"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_NO_SYMLINKS_TO_DIRS
argument_list|)
literal|"entrylist/linktodirectory.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Subdirectories / QDir::Files"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist/directory/dummy,"
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDir::Subdirectories | QDir::FollowSymlinks / QDir::Files"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
name|QDirIterator
operator|::
name|Subdirectories
operator||
name|QDirIterator
operator|::
name|FollowSymlinks
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"entrylist/file,"
ifndef|#
directive|ifndef
name|Q_NO_SYMLINKS
literal|"entrylist/linktofile.lnk,"
endif|#
directive|endif
literal|"entrylist/directory/dummy,"
literal|"entrylist/writable"
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, default"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
else|#
directive|else
operator|<<
name|QString
argument_list|(
literal|"empty/.,empty/.."
argument_list|)
operator|.
name|split
argument_list|(
literal|','
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty, QDir::NoDotAndDotDot"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
operator|<<
name|QStringList
argument_list|(
literal|"*"
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterateRelativeDirectory
name|void
name|tst_QDirIterator
operator|::
name|iterateRelativeDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
name|dirName
argument_list|,
name|nameFilters
argument_list|,
name|filters
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|next
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|QString
name|fileName
init|=
name|it
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QString
name|filePath
init|=
name|it
operator|.
name|filePath
argument_list|()
decl_stmt|;
name|QString
name|path
init|=
name|it
operator|.
name|path
argument_list|()
decl_stmt|;
name|QFileInfo
name|info
init|=
name|it
operator|.
name|fileInfo
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|path
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|next
argument_list|,
name|filePath
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
argument_list|,
name|QFileInfo
argument_list|(
name|next
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filePath
argument_list|,
name|info
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Using canonical file paths for final comparison
name|list
operator|<<
name|info
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
block|}
comment|// The order of items returned by QDirIterator is not guaranteed.
name|list
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|sortedEntries
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|entries
control|)
name|sortedEntries
operator|.
name|append
argument_list|(
name|QFileInfo
argument_list|(
name|item
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|sortedEntries
operator|.
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|sortedEntries
operator|!=
name|list
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"EXPECTED:"
operator|<<
name|sortedEntries
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"ACTUAL:  "
operator|<<
name|list
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|sortedEntries
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterateResource_data
name|void
name|tst_QDirIterator
operator|::
name|iterateResource_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
comment|// relative from current path or abs
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDir
operator|::
name|Filters
argument_list|>
argument_list|(
literal|"filters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"nameFilters"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"entries"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/burpaburpa"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
argument_list|)
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|":/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/entrylist"
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|":/entrylist"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/entrylist"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
literal|0
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/entrylist/directory,:/entrylist/file"
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|":/ recursive"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/"
argument_list|)
operator|<<
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|(
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
operator|<<
name|QDir
operator|::
name|Filters
argument_list|(
name|QDir
operator|::
name|NoFilter
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|":/entrylist,:/entrylist/directory,:/entrylist/directory/dummy,:/entrylist/file"
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterateResource
name|void
name|tst_QDirIterator
operator|::
name|iterateResource
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDirIterator
operator|::
name|IteratorFlags
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDir
operator|::
name|Filters
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|nameFilters
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
name|dirName
argument_list|,
name|nameFilters
argument_list|,
name|filters
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|dir
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|startsWith
argument_list|(
literal|":/qt-project.org"
argument_list|)
condition|)
name|list
operator|<<
name|dir
expr_stmt|;
block|}
name|list
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|sortedEntries
init|=
name|entries
decl_stmt|;
name|sortedEntries
operator|.
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
name|sortedEntries
operator|!=
name|list
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"EXPECTED:"
operator|<<
name|sortedEntries
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"ACTUAL:"
operator|<<
name|list
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|list
argument_list|,
name|sortedEntries
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stopLinkLoop
name|void
name|tst_QDirIterator
operator|::
name|stopLinkLoop
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// ### Sadly, this is a platform difference right now.
name|createLink
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/entrylist"
argument_list|)
argument_list|,
literal|"entrylist/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/."
argument_list|,
literal|"entrylist/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/../entrylist/."
argument_list|,
literal|"entrylist/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/.."
argument_list|,
literal|"entrylist/entrylist4.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/entrylist"
argument_list|)
argument_list|,
literal|"entrylist/directory/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/."
argument_list|,
literal|"entrylist/directory/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/../directory/."
argument_list|,
literal|"entrylist/directory/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"entrylist/.."
argument_list|,
literal|"entrylist/directory/entrylist4.lnk"
argument_list|)
expr_stmt|;
else|#
directive|else
name|createLink
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/entrylist"
argument_list|)
argument_list|,
literal|"entrylist/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"."
argument_list|,
literal|"entrylist/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"../entrylist/."
argument_list|,
literal|"entrylist/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|".."
argument_list|,
literal|"entrylist/entrylist4.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/entrylist"
argument_list|)
argument_list|,
literal|"entrylist/directory/entrylist1.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"."
argument_list|,
literal|"entrylist/directory/entrylist2.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|"../directory/."
argument_list|,
literal|"entrylist/directory/entrylist3.lnk"
argument_list|)
expr_stmt|;
name|createLink
argument_list|(
literal|".."
argument_list|,
literal|"entrylist/directory/entrylist4.lnk"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QDirIterator
name|it
argument_list|(
name|QLatin1String
argument_list|(
literal|"entrylist"
argument_list|)
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
operator||
name|QDirIterator
operator|::
name|FollowSymlinks
argument_list|)
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
name|int
name|max
init|=
literal|200
decl_stmt|;
while|while
condition|(
operator|--
name|max
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|max
argument_list|)
expr_stmt|;
comment|// The goal of this test is only to ensure that the test above don't malfunction
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_class
DECL|class|EngineWithNoIterator
class|class
name|EngineWithNoIterator
super|:
specifier|public
name|QFSFileEngine
block|{
public|public:
DECL|function|EngineWithNoIterator
name|EngineWithNoIterator
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
member_init_list|:
name|QFSFileEngine
argument_list|(
name|fileName
argument_list|)
block|{ }
DECL|function|beginEntryList
name|QAbstractFileEngineIterator
modifier|*
name|beginEntryList
parameter_list|(
name|QDir
operator|::
name|Filters
parameter_list|,
specifier|const
name|QStringList
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|EngineWithNoIteratorHandler
class|class
name|EngineWithNoIteratorHandler
super|:
specifier|public
name|QAbstractFileEngineHandler
block|{
public|public:
DECL|function|create
name|QAbstractFileEngine
modifier|*
name|create
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
return|return
operator|new
name|EngineWithNoIterator
argument_list|(
name|fileName
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|engineWithNoIterator
name|void
name|tst_QDirIterator
operator|::
name|engineWithNoIterator
parameter_list|()
block|{
name|EngineWithNoIteratorHandler
name|handler
decl_stmt|;
name|QDir
argument_list|(
literal|"entrylist"
argument_list|)
operator|.
name|entryList
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test that the above line doesn't crash
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|absoluteFilePathsFromRelativeIteratorPath
name|void
name|tst_QDirIterator
operator|::
name|absoluteFilePathsFromRelativeIteratorPath
parameter_list|()
block|{
name|QDirIterator
name|it
argument_list|(
literal|"entrylist/"
argument_list|,
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFileInfo
argument_list|(
name|it
operator|.
name|filePath
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|contains
argument_list|(
literal|"entrylist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|recurseWithFilters
name|void
name|tst_QDirIterator
operator|::
name|recurseWithFilters
parameter_list|()
specifier|const
block|{
name|QStringList
name|nameFilters
decl_stmt|;
name|nameFilters
operator|.
name|append
argument_list|(
literal|"*.txt"
argument_list|)
expr_stmt|;
name|QDirIterator
name|it
argument_list|(
literal|"recursiveDirs/"
argument_list|,
name|nameFilters
argument_list|,
name|QDir
operator|::
name|Files
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|actualEntries
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|expectedEntries
decl_stmt|;
name|expectedEntries
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"recursiveDirs/dir1/textFileB.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedEntries
operator|.
name|insert
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"recursiveDirs/textFileA.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|actualEntries
operator|.
name|insert
argument_list|(
name|it
operator|.
name|fileInfo
argument_list|()
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|actualEntries
operator|.
name|insert
argument_list|(
name|it
operator|.
name|fileInfo
argument_list|()
operator|.
name|filePath
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|actualEntries
operator|==
name|expectedEntries
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|longPath
name|void
name|tst_QDirIterator
operator|::
name|longPath
parameter_list|()
block|{
name|QDir
name|dir
decl_stmt|;
name|dir
operator|.
name|mkdir
argument_list|(
literal|"longpaths"
argument_list|)
expr_stmt|;
name|dir
operator|.
name|cd
argument_list|(
literal|"longpaths"
argument_list|)
expr_stmt|;
name|QString
name|dirName
init|=
literal|"x"
decl_stmt|;
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|dirName
argument_list|)
operator|||
name|dir
operator|.
name|mkdir
argument_list|(
name|dirName
argument_list|)
condition|)
block|{
operator|++
name|n
expr_stmt|;
name|dirName
operator|.
name|append
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|&&
name|defined
argument_list|(
name|WINCE_BROKEN_ITERATE
argument_list|)
comment|// Some Windows CE devices/emulators are broken.
comment|// though one can create directories of length<= 217,
comment|// FindNextFile only reports entries until ~ 214.
if|if
condition|(
name|n
operator|>=
literal|210
condition|)
break|break;
endif|#
directive|endif
block|}
name|QDirIterator
name|it
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|Dirs
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
name|int
name|m
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|m
expr_stmt|;
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|dirName
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|dirName
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|dir
operator|.
name|exists
argument_list|(
name|dirName
argument_list|)
operator|&&
name|dir
operator|.
name|rmdir
argument_list|(
name|dirName
argument_list|)
condition|)
block|{
name|dirName
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|dir
operator|.
name|rmdir
argument_list|(
literal|"longpaths"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dirorder
name|void
name|tst_QDirIterator
operator|::
name|dirorder
parameter_list|()
block|{
name|QDirIterator
name|iterator
argument_list|(
literal|"foo"
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
operator|&&
name|iterator
operator|.
name|next
argument_list|()
operator|!=
literal|"foo/bar"
condition|)
block|{ }
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|fileInfo
argument_list|()
operator|.
name|filePath
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|relativePaths
name|void
name|tst_QDirIterator
operator|::
name|relativePaths
parameter_list|()
block|{
name|QDirIterator
name|iterator
argument_list|(
literal|"*"
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|cleanPath
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_function
DECL|function|uncPaths_data
name|void
name|tst_QDirIterator
operator|::
name|uncPaths_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"dirName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uncserver"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uncserver/testshare"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uncserver/testshare/tmp"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"//"
operator|+
name|QtNetworkSettings
operator|::
name|winServerName
argument_list|()
operator|+
literal|"/testshare/tmp"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uncPaths
name|void
name|tst_QDirIterator
operator|::
name|uncPaths
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dirName
argument_list|)
expr_stmt|;
name|QDirIterator
name|iterator
argument_list|(
name|dirName
argument_list|,
name|QDir
operator|::
name|AllEntries
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|,
name|QDir
operator|::
name|cleanPath
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_comment
comment|// In Unix it is easy to create hidden files, but in Windows it requires
end_comment
begin_comment
comment|// a special call since hidden files need to be "marked" while in Unix
end_comment
begin_comment
comment|// anything starting by a '.' is a hidden file.
end_comment
begin_comment
comment|// For that reason this test is not run in Windows.
end_comment
begin_function
DECL|function|hiddenDirs_hiddenFiles
name|void
name|tst_QDirIterator
operator|::
name|hiddenDirs_hiddenFiles
parameter_list|()
block|{
comment|// Only files
block|{
name|int
name|matches
init|=
literal|0
decl_stmt|;
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|QDirIterator
name|di
argument_list|(
literal|"hiddenDirs_hiddenFiles"
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|di
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|matches
expr_stmt|;
name|QString
name|filename
init|=
name|di
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
operator|++
name|failures
expr_stmt|;
comment|// search was only supposed to find files
block|}
name|QCOMPARE
argument_list|(
name|matches
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|failures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Only directories
block|{
name|int
name|matches
init|=
literal|0
decl_stmt|;
name|int
name|failures
init|=
literal|0
decl_stmt|;
name|QDirIterator
name|di
argument_list|(
literal|"hiddenDirs_hiddenFiles"
argument_list|,
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|Hidden
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
while|while
condition|(
name|di
operator|.
name|hasNext
argument_list|()
condition|)
block|{
operator|++
name|matches
expr_stmt|;
name|QString
name|filename
init|=
name|di
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|filename
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
operator|++
name|failures
expr_stmt|;
comment|// search was only supposed to find files
block|}
name|QCOMPARE
argument_list|(
name|matches
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|failures
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_WIN
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDirIterator
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdiriterator.moc"
end_include
end_unit
