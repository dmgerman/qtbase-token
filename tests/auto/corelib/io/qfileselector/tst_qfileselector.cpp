begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<private/qfileselector_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qabstractfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfsfileengine_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qfilesystemengine_p.h>
end_include
begin_decl_stmt
DECL|variable|selectorIndicator
specifier|const
name|ushort
name|selectorIndicator
init|=
literal|'+'
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QFileSelector
class|class
name|tst_QFileSelector
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QFileSelector
name|tst_QFileSelector
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|basicTest_data
parameter_list|()
function_decl|;
name|void
name|basicTest
parameter_list|()
function_decl|;
name|void
name|urlConvenience_data
parameter_list|()
function_decl|;
name|void
name|urlConvenience
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|basicTest_data
name|void
name|tst_QFileSelector
operator|::
name|basicTest_data
parameter_list|()
block|{
comment|/* Files existing for this test      *  platform/test      *  platform/+<platform>/test for all<platform> in QFileSelectorPrivate::platformSelectors()      *  extras/test      *  extras/test2 to test for when selector directories exist, but don't have the files      *  extras/+custom1/test      *  extras/+custom1/test3 to test for when base file doesn't exist      *  extras/+custom2/test      *  extras/+custom3/test      *  extras/+custom3/+custom2/test      *  extras/+custom3/+custom4/test      *  extras/+custom3/+custom5/test      *  extras/+custom5/+custom3/test      */
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"testPath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"customSelectors"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedPath"
argument_list|)
expr_stmt|;
name|QString
name|test
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
comment|// '/' is here so dir string can also be selector string
name|QString
name|test2
argument_list|(
literal|"/test2"
argument_list|)
decl_stmt|;
name|QString
name|test3
argument_list|(
literal|"/test3"
argument_list|)
decl_stmt|;
name|QString
name|expectedPlatform1File
argument_list|(
literal|":/platforms"
argument_list|)
decl_stmt|;
name|QString
name|expectedPlatform2File
argument_list|(
literal|""
argument_list|)
decl_stmt|;
comment|//Only the last selector
name|QString
name|expectedPlatform3File
decl_stmt|;
comment|// Only the first selector (the family)
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
operator|&&
expr|\
operator|!
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_HAIKU
argument_list|)
comment|/* We are only aware of specific unixes, and do not have test files for any of the others.        However those unixes can get a selector added from the result of a uname call, so this will        lead to a case where we don't have that file so we can't expect the concatenation of platform        selectors to work. It should just find the +unix/test file.*/
name|expectedPlatform1File
operator|=
name|QString
argument_list|(
literal|":/platforms/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|QString
argument_list|(
literal|"unix/test"
argument_list|)
expr_stmt|;
name|expectedPlatform2File
operator|=
name|QString
argument_list|(
literal|":/platforms/test2"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QString
name|distributionName
decl_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|distributionName
operator|=
name|QSysInfo
operator|::
name|productType
argument_list|()
expr_stmt|;
endif|#
directive|endif
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|selector
decl|,
name|QFileSelectorPrivate
operator|::
name|platformSelectors
argument_list|()
control|)
block|{
comment|// skip the Linux distribution name (if any) since we don't have files for them
if|if
condition|(
name|selector
operator|==
name|distributionName
condition|)
continue|continue;
name|expectedPlatform1File
operator|=
name|expectedPlatform1File
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|selector
expr_stmt|;
name|expectedPlatform2File
operator|=
name|selector
expr_stmt|;
if|if
condition|(
name|expectedPlatform3File
operator|.
name|isNull
argument_list|()
condition|)
name|expectedPlatform3File
operator|=
name|selector
expr_stmt|;
block|}
name|expectedPlatform1File
operator|+=
name|test
expr_stmt|;
name|expectedPlatform2File
operator|=
name|QLatin1String
argument_list|(
literal|":/platforms/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|expectedPlatform2File
operator|+
name|test2
expr_stmt|;
name|expectedPlatform3File
operator|=
name|QLatin1String
argument_list|(
literal|":/platforms/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|expectedPlatform3File
operator|+
name|test3
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"platform1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/platforms/test"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|expectedPlatform1File
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"platform2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/platforms/test2"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|expectedPlatform2File
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"platform3"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/platforms/test3"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
name|expectedPlatform3File
expr_stmt|;
name|QString
name|resourceTestPath
argument_list|(
literal|":/extras/test"
argument_list|)
decl_stmt|;
name|QString
name|custom1
argument_list|(
literal|"custom1"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom1-noselector"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|":/extras"
argument_list|)
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom1-withselector"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom1
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"customX-withselector-nofile"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/extras/test2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/test2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom1-withselector-nobasefile"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|":/extras/test3"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/test3"
argument_list|)
expr_stmt|;
name|QString
name|custom2
argument_list|(
literal|"custom2"
argument_list|)
decl_stmt|;
name|QString
name|custom3
argument_list|(
literal|"custom3"
argument_list|)
decl_stmt|;
name|QString
name|custom4
argument_list|(
literal|"custom4"
argument_list|)
decl_stmt|;
name|QString
name|custom5
argument_list|(
literal|"custom5"
argument_list|)
decl_stmt|;
name|QString
name|slash
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom12"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|<<
name|custom2
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom1
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom21"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom2
operator|<<
name|custom1
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom2
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom213"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom2
operator|<<
name|custom1
operator|<<
name|custom3
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom2
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom23"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom2
operator|<<
name|custom3
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom2
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom34nested"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom3
operator|<<
name|custom4
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom3
operator|+
name|slash
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom4
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom43nested"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom4
operator|<<
name|custom3
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom3
operator|+
name|slash
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom4
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"custom35conflict"
argument_list|)
operator|<<
name|resourceTestPath
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom3
operator|<<
name|custom5
operator|)
operator|<<
name|QString
argument_list|(
literal|":/extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom3
operator|+
name|slash
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom5
operator|+
name|test
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"relativePaths"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"extras/test"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QFINDTESTDATA
argument_list|(
name|QString
argument_list|(
literal|"extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom1
operator|+
name|QString
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicTest
name|void
name|tst_QFileSelector
operator|::
name|basicTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|testPath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|customSelectors
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedPath
argument_list|)
expr_stmt|;
name|QFileSelector
name|fs
decl_stmt|;
name|fs
operator|.
name|setExtraSelectors
argument_list|(
name|customSelectors
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|select
argument_list|(
name|testPath
argument_list|)
argument_list|,
name|expectedPath
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|urlConvenience_data
name|void
name|tst_QFileSelector
operator|::
name|urlConvenience_data
parameter_list|()
block|{
comment|/* Files existing for this test      *  extras/test      *  extras/+custom1/test      */
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"testUrl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"customSelectors"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"expectedUrl"
argument_list|)
expr_stmt|;
name|QString
name|test
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
comment|// '/' is here so dir string can also be selector string
name|QString
name|custom1
argument_list|(
literal|"custom1"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qrc"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"qrc:///extras/test"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QUrl
argument_list|(
name|QString
argument_list|(
literal|"qrc:///extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom1
operator|+
name|test
argument_list|)
expr_stmt|;
name|QString
name|fileBasePath
init|=
name|QFINDTESTDATA
argument_list|(
literal|"extras/test"
argument_list|)
decl_stmt|;
name|QString
name|fileSelectedPath
init|=
name|QFINDTESTDATA
argument_list|(
name|QString
argument_list|(
literal|"extras/"
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
name|selectorIndicator
argument_list|)
operator|+
name|custom1
operator|+
name|QString
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|fileBasePath
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|custom1
operator|)
operator|<<
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|fileSelectedPath
argument_list|)
expr_stmt|;
comment|// http://qt-project.org/images/qtdn/sprites-combined-latest.png is chosen as a representative real world URL
comment|// But note that this test is checking that http urls are NOT selected so it shouldn't be checked
name|QUrl
name|testHttpUrl
argument_list|(
literal|"http://qt-project.org/images/sprites-combined-latest.png"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http"
argument_list|)
operator|<<
name|testHttpUrl
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"qtdn"
argument_list|)
operator|)
operator|<<
name|testHttpUrl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|urlConvenience
name|void
name|tst_QFileSelector
operator|::
name|urlConvenience
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|testUrl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|customSelectors
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|expectedUrl
argument_list|)
expr_stmt|;
name|QFileSelector
name|fs
decl_stmt|;
comment|//All rows of this test use only custom selectors, so should not select before the setExtra call
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|select
argument_list|(
name|testUrl
argument_list|)
argument_list|,
name|testUrl
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setExtraSelectors
argument_list|(
name|customSelectors
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fs
operator|.
name|select
argument_list|(
name|testUrl
argument_list|)
argument_list|,
name|expectedUrl
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFileSelector
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfileselector.moc"
end_include
end_unit
