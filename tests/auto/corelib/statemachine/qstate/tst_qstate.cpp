begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qstate.h"
end_include
begin_include
include|#
directive|include
file|"qstatemachine.h"
end_include
begin_include
include|#
directive|include
file|"qsignaltransition.h"
end_include
begin_class
DECL|class|tst_QState
class|class
name|tst_QState
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QState
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|assignProperty
parameter_list|()
function_decl|;
name|void
name|assignPropertyTwice
parameter_list|()
function_decl|;
name|void
name|historyInitialState
parameter_list|()
function_decl|;
name|void
name|transitions
parameter_list|()
function_decl|;
private|private:
DECL|member|functionCalled
name|bool
name|functionCalled
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QState
name|tst_QState
operator|::
name|tst_QState
parameter_list|()
member_init_list|:
name|functionCalled
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_class
DECL|class|TestClass
class|class
name|TestClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TestClass
name|TestClass
parameter_list|()
member_init_list|:
name|called
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|called
name|bool
name|called
decl_stmt|;
public|public
name|slots
public|:
DECL|function|slot
name|void
name|slot
parameter_list|()
block|{
name|called
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|assignProperty
name|void
name|tst_QState
operator|::
name|assignProperty
parameter_list|()
block|{
name|QStateMachine
name|machine
decl_stmt|;
name|QObject
modifier|*
name|object
init|=
operator|new
name|QObject
argument_list|()
decl_stmt|;
name|object
operator|->
name|setProperty
argument_list|(
literal|"fooBar"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QState
modifier|*
name|s1
init|=
operator|new
name|QState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|s1
operator|->
name|assignProperty
argument_list|(
name|object
argument_list|,
literal|"fooBar"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|machine
operator|.
name|setInitialState
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|machine
operator|.
name|start
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|object
operator|->
name|property
argument_list|(
literal|"fooBar"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignPropertyTwice
name|void
name|tst_QState
operator|::
name|assignPropertyTwice
parameter_list|()
block|{
name|QStateMachine
name|machine
decl_stmt|;
name|QObject
modifier|*
name|object
init|=
operator|new
name|QObject
argument_list|()
decl_stmt|;
name|object
operator|->
name|setProperty
argument_list|(
literal|"fooBar"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QState
modifier|*
name|s1
init|=
operator|new
name|QState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|s1
operator|->
name|assignProperty
argument_list|(
name|object
argument_list|,
literal|"fooBar"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|s1
operator|->
name|assignProperty
argument_list|(
name|object
argument_list|,
literal|"fooBar"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|machine
operator|.
name|setInitialState
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|machine
operator|.
name|start
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|object
operator|->
name|property
argument_list|(
literal|"fooBar"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|EventTestTransition
class|class
name|EventTestTransition
super|:
specifier|public
name|QAbstractTransition
block|{
public|public:
DECL|function|EventTestTransition
name|EventTestTransition
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|,
name|QState
modifier|*
name|targetState
parameter_list|)
member_init_list|:
name|QAbstractTransition
argument_list|()
member_init_list|,
name|m_type
argument_list|(
name|type
argument_list|)
block|{
name|setTargetState
argument_list|(
name|targetState
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|eventTest
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|e
operator|->
name|type
argument_list|()
operator|==
name|m_type
return|;
block|}
DECL|function|onTransition
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{}
private|private:
DECL|member|m_type
name|QEvent
operator|::
name|Type
name|m_type
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|historyInitialState
name|void
name|tst_QState
operator|::
name|historyInitialState
parameter_list|()
block|{
name|QStateMachine
name|machine
decl_stmt|;
name|QState
modifier|*
name|s1
init|=
operator|new
name|QState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|QState
modifier|*
name|s2
init|=
operator|new
name|QState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|QHistoryState
modifier|*
name|h1
init|=
operator|new
name|QHistoryState
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|s2
operator|->
name|setInitialState
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|QState
modifier|*
name|s3
init|=
operator|new
name|QState
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|h1
operator|->
name|setDefaultState
argument_list|(
name|s3
argument_list|)
expr_stmt|;
name|QState
modifier|*
name|s4
init|=
operator|new
name|QState
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|s1
operator|->
name|addTransition
argument_list|(
operator|new
name|EventTestTransition
argument_list|(
name|QEvent
operator|::
name|User
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|s2
operator|->
name|addTransition
argument_list|(
operator|new
name|EventTestTransition
argument_list|(
name|QEvent
operator|::
name|User
argument_list|,
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|s3
operator|->
name|addTransition
argument_list|(
operator|new
name|EventTestTransition
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|,
name|s4
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|setInitialState
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|machine
operator|.
name|start
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s3
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s3
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s4
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s1
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|postEvent
argument_list|(
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|machine
operator|.
name|configuration
argument_list|()
operator|.
name|contains
argument_list|(
name|s4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transitions
name|void
name|tst_QState
operator|::
name|transitions
parameter_list|()
block|{
name|QState
name|s1
decl_stmt|;
name|QState
name|s2
decl_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QAbstractTransition
modifier|*
name|t1
init|=
name|s1
operator|.
name|addTransition
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|s2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|.
name|transitions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|s1
operator|.
name|removeTransition
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|s1
operator|.
name|addTransition
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|t1
argument_list|)
expr_stmt|;
name|QAbstractTransition
modifier|*
name|t2
init|=
operator|new
name|QEventTransition
argument_list|(
operator|&
name|s1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|contains
argument_list|(
name|t1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s1
operator|.
name|transitions
argument_list|()
operator|.
name|contains
argument_list|(
name|t2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transitions from child states should not be reported.
name|QState
modifier|*
name|s21
init|=
operator|new
name|QState
argument_list|(
operator|&
name|s2
argument_list|)
decl_stmt|;
name|QAbstractTransition
modifier|*
name|t3
init|=
name|s21
operator|->
name|addTransition
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
operator|&
name|s2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|.
name|transitions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s21
operator|->
name|transitions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s21
operator|->
name|transitions
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|t3
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QState
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qstate.moc"
end_include
end_unit
