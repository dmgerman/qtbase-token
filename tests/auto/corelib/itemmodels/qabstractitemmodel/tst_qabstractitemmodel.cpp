begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSortFilterProxyModel>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringListModel>
end_include
begin_include
include|#
directive|include
file|"dynamictreemodel.h"
end_include
begin_comment
comment|/*!     Note that this doesn't test models, but any functionality that QAbstractItemModel should provide  */
end_comment
begin_class
DECL|class|tst_QAbstractItemModel
class|class
name|tst_QAbstractItemModel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|index
parameter_list|()
function_decl|;
name|void
name|parent
parameter_list|()
function_decl|;
name|void
name|hasChildren
parameter_list|()
function_decl|;
name|void
name|data
parameter_list|()
function_decl|;
name|void
name|headerData
parameter_list|()
function_decl|;
name|void
name|itemData
parameter_list|()
function_decl|;
name|void
name|itemFlags
parameter_list|()
function_decl|;
name|void
name|match
parameter_list|()
function_decl|;
name|void
name|dropMimeData_data
parameter_list|()
function_decl|;
name|void
name|dropMimeData
parameter_list|()
function_decl|;
name|void
name|canDropMimeData
parameter_list|()
function_decl|;
name|void
name|changePersistentIndex
parameter_list|()
function_decl|;
name|void
name|movePersistentIndex
parameter_list|()
function_decl|;
name|void
name|insertRows
parameter_list|()
function_decl|;
name|void
name|insertColumns
parameter_list|()
function_decl|;
name|void
name|removeRows
parameter_list|()
function_decl|;
name|void
name|removeColumns
parameter_list|()
function_decl|;
name|void
name|moveRows
parameter_list|()
function_decl|;
name|void
name|moveColumns
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|void
name|complexChangesWithPersistent
parameter_list|()
function_decl|;
name|void
name|testMoveSameParentUp_data
parameter_list|()
function_decl|;
name|void
name|testMoveSameParentUp
parameter_list|()
function_decl|;
name|void
name|testMoveSameParentDown_data
parameter_list|()
function_decl|;
name|void
name|testMoveSameParentDown
parameter_list|()
function_decl|;
name|void
name|testMoveToGrandParent_data
parameter_list|()
function_decl|;
name|void
name|testMoveToGrandParent
parameter_list|()
function_decl|;
name|void
name|testMoveToSibling_data
parameter_list|()
function_decl|;
name|void
name|testMoveToSibling
parameter_list|()
function_decl|;
name|void
name|testMoveToUncle_data
parameter_list|()
function_decl|;
name|void
name|testMoveToUncle
parameter_list|()
function_decl|;
name|void
name|testMoveToDescendants
parameter_list|()
function_decl|;
name|void
name|testMoveWithinOwnRange_data
parameter_list|()
function_decl|;
name|void
name|testMoveWithinOwnRange
parameter_list|()
function_decl|;
name|void
name|testMoveThroughProxy
parameter_list|()
function_decl|;
name|void
name|testReset
parameter_list|()
function_decl|;
name|void
name|testDataChanged
parameter_list|()
function_decl|;
name|void
name|testChildrenLayoutsChanged
parameter_list|()
function_decl|;
name|void
name|testRoleNames
parameter_list|()
function_decl|;
name|void
name|testDragActions
parameter_list|()
function_decl|;
name|void
name|testFunctionPointerSignalConnection
parameter_list|()
function_decl|;
private|private:
DECL|member|m_model
name|DynamicTreeModel
modifier|*
name|m_model
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/*!     Test model that impliments the pure vitual functions and anything else that is     needed.      It is a table implemented as a vector of vectors of strings.  */
end_comment
begin_class
DECL|class|QtTestModel
class|class
name|QtTestModel
super|:
specifier|public
name|QAbstractItemModel
block|{
public|public:
name|QtTestModel
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|QtTestModel
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|>
name|tbl
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|QModelIndex
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
function_decl|;
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
function_decl|;
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
function_decl|;
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
function_decl|;
name|bool
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
function_decl|;
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
name|int
parameter_list|)
specifier|const
function_decl|;
name|bool
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|bool
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
function_decl|;
name|bool
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
function_decl|;
name|void
name|setPersistent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|from
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|to
parameter_list|)
function_decl|;
name|bool
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
function_decl|;
name|bool
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
function_decl|;
name|bool
name|moveRows
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceRow
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destinationParent
parameter_list|,
name|int
name|destinationChild
parameter_list|)
function_decl|;
name|bool
name|moveColumns
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|sourceColumn
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destinationParent
parameter_list|,
name|int
name|destinationChild
parameter_list|)
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|bool
name|canDropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
function_decl|;
DECL|member|cCount
DECL|member|rCount
name|int
name|cCount
decl_stmt|,
name|rCount
decl_stmt|;
DECL|member|wrongIndex
specifier|mutable
name|bool
name|wrongIndex
decl_stmt|;
DECL|member|table
name|QVector
argument_list|<
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|>
name|table
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|QtTestModel
name|QtTestModel
operator|::
name|QtTestModel
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|cCount
argument_list|(
name|columns
argument_list|)
member_init_list|,
name|rCount
argument_list|(
name|rows
argument_list|)
member_init_list|,
name|wrongIndex
argument_list|(
literal|false
argument_list|)
block|{
name|table
operator|.
name|resize
argument_list|(
name|rows
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rows
condition|;
operator|++
name|r
control|)
block|{
name|table
index|[
name|r
index|]
operator|.
name|resize
argument_list|(
name|columns
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
condition|;
operator|++
name|c
control|)
name|table
index|[
name|r
index|]
index|[
name|c
index|]
operator|=
name|QString
argument_list|(
literal|"%1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|r
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_constructor
DECL|function|QtTestModel
name|QtTestModel
operator|::
name|QtTestModel
parameter_list|(
specifier|const
name|QVector
argument_list|<
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|>
name|tbl
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|wrongIndex
argument_list|(
literal|false
argument_list|)
block|{
name|table
operator|=
name|tbl
expr_stmt|;
name|rCount
operator|=
name|tbl
operator|.
name|count
argument_list|()
expr_stmt|;
name|cCount
operator|=
name|tbl
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|index
name|QModelIndex
name|QtTestModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|hasIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
condition|?
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
literal|0
argument_list|)
else|:
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QModelIndex
name|QtTestModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|QtTestModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|parent
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|rCount
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|QtTestModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
name|parent
operator|.
name|isValid
argument_list|()
condition|?
literal|0
else|:
name|cCount
return|;
block|}
end_function
begin_function
DECL|function|hasChildren
name|bool
name|QtTestModel
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|QtTestModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
name|int
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|.
name|column
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|.
name|column
argument_list|()
operator|>
name|cCount
operator|||
name|idx
operator|.
name|row
argument_list|()
operator|>
name|rCount
condition|)
block|{
name|wrongIndex
operator|=
literal|true
expr_stmt|;
name|qWarning
argument_list|(
literal|"got invalid modelIndex %d/%d"
argument_list|,
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
return|return
name|table
operator|.
name|at
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|)
operator|.
name|at
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setData
name|bool
name|QtTestModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
parameter_list|)
block|{
name|table
index|[
name|idx
operator|.
name|row
argument_list|()
index|]
index|[
name|idx
operator|.
name|column
argument_list|()
index|]
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|insertRows
name|bool
name|QtTestModel
operator|::
name|insertRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|QAbstractItemModel
operator|::
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|cc
init|=
name|columnCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|table
operator|.
name|insert
argument_list|(
name|row
argument_list|,
name|count
argument_list|,
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|(
name|cc
argument_list|)
argument_list|)
expr_stmt|;
name|rCount
operator|=
name|table
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|insertColumns
name|bool
name|QtTestModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|QAbstractItemModel
operator|::
name|beginInsertColumns
argument_list|(
name|parent
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|rc
init|=
name|rowCount
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rc
condition|;
operator|++
name|i
control|)
name|table
index|[
name|i
index|]
operator|.
name|insert
argument_list|(
name|column
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|cCount
operator|=
name|table
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setPersistent
name|void
name|QtTestModel
operator|::
name|setPersistent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|from
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|to
parameter_list|)
block|{
name|changePersistentIndex
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRows
name|bool
name|QtTestModel
operator|::
name|removeRows
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|QAbstractItemModel
operator|::
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|row
argument_list|,
name|row
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
name|count
operator|-
literal|1
init|;
name|r
operator|>=
name|row
condition|;
operator|--
name|r
control|)
name|table
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rCount
operator|=
name|table
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|removeColumns
name|bool
name|QtTestModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|QAbstractItemModel
operator|::
name|beginRemoveColumns
argument_list|(
name|parent
argument_list|,
name|column
argument_list|,
name|column
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
name|column
operator|+
name|count
operator|-
literal|1
init|;
name|c
operator|>
name|column
condition|;
operator|--
name|c
control|)
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rCount
condition|;
operator|++
name|r
control|)
name|table
index|[
name|r
index|]
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|cCount
operator|=
name|table
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endRemoveColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|moveRows
name|bool
name|QtTestModel
operator|::
name|moveRows
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|cnt
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destinationParent
parameter_list|,
name|int
name|dst
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QAbstractItemModel
operator|::
name|beginMoveRows
argument_list|(
name|sourceParent
argument_list|,
name|src
argument_list|,
name|src
operator|+
name|cnt
operator|-
literal|1
argument_list|,
name|destinationParent
argument_list|,
name|dst
argument_list|)
condition|)
return|return
literal|false
return|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|buf
decl_stmt|;
if|if
condition|(
name|dst
operator|<
name|src
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|swap
argument_list|(
name|table
index|[
name|src
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|remove
argument_list|(
name|src
operator|+
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|insert
argument_list|(
name|dst
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|src
operator|<
name|dst
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|.
name|swap
argument_list|(
name|table
index|[
name|src
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|remove
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|table
operator|.
name|insert
argument_list|(
name|dst
operator|+
name|i
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
name|rCount
operator|=
name|table
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endMoveRows
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|moveColumns
name|bool
name|QtTestModel
operator|::
name|moveColumns
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|,
name|int
name|src
parameter_list|,
name|int
name|cnt
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destinationParent
parameter_list|,
name|int
name|dst
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QAbstractItemModel
operator|::
name|beginMoveColumns
argument_list|(
name|sourceParent
argument_list|,
name|src
argument_list|,
name|src
operator|+
name|cnt
operator|-
literal|1
argument_list|,
name|destinationParent
argument_list|,
name|dst
argument_list|)
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rCount
condition|;
operator|++
name|r
control|)
block|{
name|QString
name|buf
decl_stmt|;
if|if
condition|(
name|dst
operator|<
name|src
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|=
name|table
index|[
name|r
index|]
index|[
name|src
operator|+
name|i
index|]
expr_stmt|;
name|table
index|[
name|r
index|]
operator|.
name|remove
argument_list|(
name|src
operator|+
literal|1
argument_list|)
expr_stmt|;
name|table
index|[
name|r
index|]
operator|.
name|insert
argument_list|(
name|dst
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|src
operator|<
name|dst
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
operator|++
name|i
control|)
block|{
name|buf
operator|=
name|table
index|[
name|r
index|]
index|[
name|src
index|]
expr_stmt|;
name|table
index|[
name|r
index|]
operator|.
name|remove
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|table
index|[
name|r
index|]
operator|.
name|insert
argument_list|(
name|dst
operator|+
name|i
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cCount
operator|=
name|table
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|QAbstractItemModel
operator|::
name|endMoveColumns
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|QtTestModel
operator|::
name|reset
parameter_list|()
block|{
name|QAbstractItemModel
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canDropMimeData
name|bool
name|QtTestModel
operator|::
name|canDropMimeData
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|data
parameter_list|,
name|Qt
operator|::
name|DropAction
name|action
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// For testing purposes, we impose some arbitrary rules on what may be dropped.
if|if
condition|(
operator|!
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
name|row
operator|<
literal|0
operator|&&
name|column
operator|<
literal|0
condition|)
block|{
comment|// a drop in emtpy space in the view is allowed.
comment|// For example, in a filesystem view, a file may be dropped into empty space
comment|// if it represents a writable directory.
return|return
literal|true
return|;
block|}
comment|// We then arbitrarily decide to only allow drops on odd rows.
comment|// A filesystem view/model might be able to drop onto (writable) directories.
return|return
name|row
operator|%
literal|2
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QAbstractItemModel
operator|::
name|init
parameter_list|()
block|{
name|m_model
operator|=
operator|new
name|DynamicTreeModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ModelInsertCommand
modifier|*
name|insertCommand
init|=
operator|new
name|ModelInsertCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|insertCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|insertCommand
operator|=
operator|new
name|ModelInsertCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QAbstractItemModel
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|m_model
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   tests */
end_comment
begin_function
DECL|function|index
name|void
name|tst_QAbstractItemModel
operator|::
name|index
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parent
name|void
name|tst_QAbstractItemModel
operator|::
name|parent
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|par
init|=
name|model
operator|.
name|parent
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|par
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hasChildren
name|void
name|tst_QAbstractItemModel
operator|::
name|hasChildren
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|hasChildren
argument_list|(
name|idx
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|data
name|void
name|tst_QAbstractItemModel
operator|::
name|data
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|idx
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0/0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default does nothing
name|QCOMPARE
argument_list|(
name|model
operator|.
name|setHeaderData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|QVariant
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|headerData
name|void
name|tst_QAbstractItemModel
operator|::
name|headerData
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default text alignment for header must be invalid
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|TextAlignmentRole
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemData
name|void
name|tst_QAbstractItemModel
operator|::
name|itemData
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|dat
init|=
name|model
operator|.
name|itemData
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|count
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dat
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0/0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemFlags
name|void
name|tst_QAbstractItemModel
operator|::
name|itemFlags
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|ItemFlags
name|flags
init|=
name|model
operator|.
name|flags
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEnabled
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|match
name|void
name|tst_QAbstractItemModel
operator|::
name|match
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QModelIndex
name|start
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|start
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QModelIndexList
name|res
init|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|areEqual
init|=
operator|(
name|idx
operator|==
name|res
operator|.
name|first
argument_list|()
operator|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|areEqual
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|"bat"
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|"cat"
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|"dog"
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|"boar"
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"dog"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchExactly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchContains
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchStartsWith
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"t"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchEndsWith
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"*a*"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchWildcard
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|".*O.*"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchRegExp
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|".*O.*"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchRegExp
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"BOAR"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchFixedString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|res
operator|=
name|model
operator|.
name|match
argument_list|(
name|start
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|QVariant
argument_list|(
literal|"bat"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|MatchFixedString
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|Position
typedef|typedef
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|Position
typedef|;
end_typedef
begin_typedef
DECL|typedef|Selection
typedef|typedef
name|QVector
argument_list|<
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|>
name|Selection
typedef|;
end_typedef
begin_typedef
DECL|typedef|StringTable
typedef|typedef
name|QVector
argument_list|<
name|QVector
argument_list|<
name|QString
argument_list|>
argument_list|>
name|StringTable
typedef|;
end_typedef
begin_typedef
DECL|typedef|StringTableRow
typedef|typedef
name|QVector
argument_list|<
name|QString
argument_list|>
name|StringTableRow
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Position
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Selection
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|StringTable
argument_list|)
end_macro
begin_function
DECL|function|qStringTableRow
specifier|static
name|StringTableRow
name|qStringTableRow
parameter_list|(
specifier|const
name|QString
modifier|&
name|s1
parameter_list|,
specifier|const
name|QString
modifier|&
name|s2
parameter_list|,
specifier|const
name|QString
modifier|&
name|s3
parameter_list|)
block|{
name|StringTableRow
name|row
decl_stmt|;
name|row
operator|<<
name|s1
operator|<<
name|s2
operator|<<
name|s3
expr_stmt|;
return|return
name|row
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_CC_MSVC
end_ifdef
begin_define
DECL|macro|STRINGTABLE
define|#
directive|define
name|STRINGTABLE
value|(StringTable())
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|STRINGTABLE
define|#
directive|define
name|STRINGTABLE
value|StringTable()
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|dropMimeData_data
name|void
name|tst_QAbstractItemModel
operator|::
name|dropMimeData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|StringTable
argument_list|>
argument_list|(
literal|"src_table"
argument_list|)
expr_stmt|;
comment|// drag source
name|QTest
operator|::
name|addColumn
argument_list|<
name|StringTable
argument_list|>
argument_list|(
literal|"dst_table"
argument_list|)
expr_stmt|;
comment|// drop target
name|QTest
operator|::
name|addColumn
argument_list|<
name|Selection
argument_list|>
argument_list|(
literal|"selection"
argument_list|)
expr_stmt|;
comment|// dragged items
name|QTest
operator|::
name|addColumn
argument_list|<
name|Position
argument_list|>
argument_list|(
literal|"dst_position"
argument_list|)
expr_stmt|;
comment|// drop position
name|QTest
operator|::
name|addColumn
argument_list|<
name|StringTable
argument_list|>
argument_list|(
literal|"res_table"
argument_list|)
expr_stmt|;
comment|// expected result
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [0, 0]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [1, 0]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [3, 0]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|""
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [0, 1]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|"D"
argument_list|,
literal|"E"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [0, 2] (line break)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"D"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"E"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x2 dropped at [3, 2] (line break)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"D"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"E"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-square dropped at [0, 0]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-square dropped at [0, 2]"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"D"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x 1x2 dropped at [0, 0] (duplicates)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection; 2x the same row (to simulate selections in hierarchy)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|"B"
argument_list|,
literal|""
argument_list|)
operator|)
comment|// ### FIXME: strange behavior, but rare case
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x 1x2 dropped at [3, 2] (duplicates)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection; 2x the same row (to simulate selections in hierarchy)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x 1x2 dropped at [3, 2] (different rows)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"G"
argument_list|,
literal|"H"
argument_list|,
literal|"I"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection; 2x the same row (to simulate selections in hierarchy)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|"A"
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|"G"
argument_list|,
literal|"H"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2x 1x2 dropped at [3, 2] (different rows, over the edge)"
argument_list|)
operator|<<
operator|(
name|STRINGTABLE
comment|// source table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"D"
argument_list|,
literal|"E"
argument_list|,
literal|"F"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"G"
argument_list|,
literal|"H"
argument_list|,
literal|"I"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|STRINGTABLE
comment|// destination table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|)
operator|<<
operator|(
name|Selection
argument_list|()
comment|// selection; 2x the same row (to simulate selections in hierarchy)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|<<
name|Position
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|<<
name|Position
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
operator|)
operator|<<
name|Position
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
comment|// drop position
operator|<<
operator|(
name|STRINGTABLE
comment|// resulting table
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"A"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"G"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"B"
argument_list|)
operator|)
operator|<<
operator|(
name|qStringTableRow
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"H"
argument_list|)
operator|)
operator|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dropMimeData
name|void
name|tst_QAbstractItemModel
operator|::
name|dropMimeData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|StringTable
argument_list|,
name|src_table
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|StringTable
argument_list|,
name|dst_table
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Selection
argument_list|,
name|selection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Position
argument_list|,
name|dst_position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|StringTable
argument_list|,
name|res_table
argument_list|)
expr_stmt|;
name|QtTestModel
name|src
argument_list|(
name|src_table
argument_list|)
decl_stmt|;
name|QtTestModel
name|dst
argument_list|(
name|dst_table
argument_list|)
decl_stmt|;
name|QtTestModel
name|res
argument_list|(
name|res_table
argument_list|)
decl_stmt|;
comment|// get the mimeData from the "selected" indexes
name|QModelIndexList
name|selectedIndexes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|selection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|selectedIndexes
operator|<<
name|src
operator|.
name|index
argument_list|(
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|,
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QMimeData
modifier|*
name|md
init|=
name|src
operator|.
name|mimeData
argument_list|(
name|selectedIndexes
argument_list|)
decl_stmt|;
comment|// do the drop
name|dst
operator|.
name|dropMimeData
argument_list|(
name|md
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
name|dst_position
operator|.
name|first
argument_list|,
name|dst_position
operator|.
name|second
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|md
expr_stmt|;
comment|// compare to the expected results
name|QCOMPARE
argument_list|(
name|dst
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dst
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|res
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|dst
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|dst
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|c
control|)
block|{
name|QModelIndex
name|dst_idx
init|=
name|dst
operator|.
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|res_idx
init|=
name|res
operator|.
name|index
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|dst_data
init|=
name|dst
operator|.
name|itemData
argument_list|(
name|dst_idx
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QVariant
argument_list|>
name|res_data
init|=
name|res
operator|.
name|itemData
argument_list|(
name|res_idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dst_data
argument_list|,
name|res_data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|canDropMimeData
name|void
name|tst_QAbstractItemModel
operator|::
name|canDropMimeData
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|canDropMimeData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|canDropMimeData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|canDropMimeData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changePersistentIndex
name|void
name|tst_QAbstractItemModel
operator|::
name|changePersistentIndex
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QModelIndex
name|a
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndex
name|b
init|=
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|p
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|==
name|a
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPersistent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|==
name|b
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|movePersistentIndex
name|void
name|tst_QAbstractItemModel
operator|::
name|movePersistentIndex
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|a
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|row
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|row
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeRows
name|void
name|tst_QAbstractItemModel
operator|::
name|removeRows
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsAboutToBeRemovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsRemovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rowsAboutToBeRemovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rowsRemovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|removeRows
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsAboutToBeRemovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsRemovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeColumns
name|void
name|tst_QAbstractItemModel
operator|::
name|removeColumns
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsAboutToBeRemovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsRemovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsRemoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|columnsAboutToBeRemovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnsRemovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|removeColumns
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsAboutToBeRemovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsRemovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRows
name|void
name|tst_QAbstractItemModel
operator|::
name|insertRows
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsAboutToBeInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rowsAboutToBeInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rowsInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|insertRows
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsAboutToBeInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertColumns
name|void
name|tst_QAbstractItemModel
operator|::
name|insertColumns
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsAboutToBeInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|columnsAboutToBeInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnsInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|insertColumns
argument_list|(
literal|6
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsAboutToBeInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveRows
name|void
name|tst_QAbstractItemModel
operator|::
name|moveRows
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsAboutToBeMovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsMovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rowsAboutToBeMovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rowsMovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|moveRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsAboutToBeMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveColumns
name|void
name|tst_QAbstractItemModel
operator|::
name|moveColumns
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsAboutToBeMovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|columnsMovedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|columnsAboutToBeMovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|columnsMovedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|moveColumns
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsAboutToBeMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|columnsMovedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|tst_QAbstractItemModel
operator|::
name|reset
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSignalSpy
name|resetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resetSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|complexChangesWithPersistent
name|void
name|tst_QAbstractItemModel
operator|::
name|complexChangesWithPersistent
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|a
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|b
init|=
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|7
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|c
init|=
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|d
init|=
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QPersistentModelIndex
name|e
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|e
index|[
name|i
index|]
operator|=
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|a
operator|==
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|7
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|==
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|==
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//remove a bunch of columns
name|model
operator|.
name|removeColumns
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|3
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|==
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|==
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
operator|!
name|e
index|[
name|i
index|]
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
operator|-
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//move some indexes around
name|model
operator|.
name|setPersistent
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|3
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setPersistent
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|3
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|3
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|model
operator|.
name|index
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|==
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|==
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
operator|!
name|e
index|[
name|i
index|]
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
operator|-
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//inserting a bunch of columns
name|model
operator|.
name|insertColumns
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|a
operator|==
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|5
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|==
name|model
operator|.
name|index
argument_list|(
literal|8
argument_list|,
literal|6
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c
operator|==
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|d
operator|==
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
operator|!
name|e
index|[
name|i
index|]
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|e
index|[
name|i
index|]
operator|==
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|i
operator|-
literal|2
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveSameParentDown_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveSameParentDown_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
comment|// We can't put the actual parent index for the move in here because m_model is not defined until init() is run.
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"topLevel"
argument_list|)
expr_stmt|;
comment|// Move from the start to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|8
operator|<<
literal|true
expr_stmt|;
comment|// Move from the start to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|8
operator|<<
literal|true
expr_stmt|;
comment|// Move from the middle to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|8
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|8
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveSameParentDown
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveSameParentDown
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|topLevel
argument_list|)
expr_stmt|;
name|QModelIndex
name|moveParent
init|=
name|topLevel
condition|?
name|QModelIndex
argument_list|()
else|:
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QModelIndex
name|parent
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
condition|)
name|moveCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
condition|)
name|moveCommand
operator|->
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QModelIndex
name|idx
init|=
name|indexList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|persistentIndex
init|=
name|persistentList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|==
name|moveParent
condition|)
block|{
name|int
name|row
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|startRow
condition|)
block|{
if|if
condition|(
name|row
operator|<=
name|endRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|destRow
operator|-
name|endRow
operator|-
literal|1
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|<
name|destRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|-
operator|(
name|endRow
operator|-
name|startRow
operator|+
literal|1
operator|)
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveSameParentUp_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveSameParentUp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"topLevel"
argument_list|)
expr_stmt|;
comment|// Move from the middle to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
comment|// Move from the end to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
comment|// Move from the end to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|5
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|5
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveSameParentUp
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveSameParentUp
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|topLevel
argument_list|)
expr_stmt|;
name|QModelIndex
name|moveParent
init|=
name|topLevel
condition|?
name|QModelIndex
argument_list|()
else|:
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QModelIndex
name|parent
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|parent
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
condition|)
name|moveCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevel
condition|)
name|moveCommand
operator|->
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|moveParent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QModelIndex
name|idx
init|=
name|indexList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|persistentIndex
init|=
name|persistentList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|.
name|parent
argument_list|()
operator|==
name|moveParent
condition|)
block|{
name|int
name|row
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|destRow
condition|)
block|{
if|if
condition|(
name|row
operator|<
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|endRow
operator|-
name|startRow
operator|+
literal|1
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|<=
name|endRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|destRow
operator|-
name|startRow
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|parent
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveThroughProxy
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveThroughProxy
parameter_list|()
block|{
name|QSortFilterProxyModel
modifier|*
name|proxy
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|proxy
operator|->
name|setSourceModel
argument_list|(
name|m_model
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|persistentList
operator|.
name|append
argument_list|(
name|proxy
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|persistentList
operator|.
name|append
argument_list|(
name|proxy
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|proxy
operator|->
name|mapFromSource
argument_list|(
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveToGrandParent_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToGrandParent_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
comment|// Move from the start to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|8
expr_stmt|;
comment|// Move from the start to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|8
expr_stmt|;
comment|// Move from the middle to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|0
expr_stmt|;
comment|// Move from the end to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|0
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|2
expr_stmt|;
comment|// Move from the end to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|5
expr_stmt|;
comment|// Moving to the same row in a different parent doesn't confuse things.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move09"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|8
expr_stmt|;
comment|// Moving to the row of my parent and its neighbours doesn't confuse things
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move11"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move12"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|6
expr_stmt|;
comment|// Moving everything from one parent to another
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move13"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move14"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveToGrandParent
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToGrandParent
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
name|QModelIndexList
name|parentsList
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QModelIndex
name|sourceIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|m_model
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|sourceIndex
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|sourceIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|persistentSource
init|=
name|sourceIndex
decl_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|sourceIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
name|persistentSource
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QModelIndex
name|idx
init|=
name|indexList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|idxParent
init|=
name|parentsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|persistentIndex
init|=
name|persistentList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxParent
operator|==
name|QModelIndex
argument_list|()
condition|)
block|{
if|if
condition|(
name|row
operator|>=
name|destRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|endRow
operator|-
name|startRow
operator|+
literal|1
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idxParent
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|row
operator|<
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|<=
name|endRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|destRow
operator|-
name|startRow
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|row
operator|-
operator|(
name|endRow
operator|-
name|startRow
operator|+
literal|1
operator|)
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idxParent
operator|.
name|row
argument_list|()
operator|>=
name|destRow
condition|)
block|{
name|QModelIndex
name|adjustedParent
decl_stmt|;
name|adjustedParent
operator|=
name|idxParent
operator|.
name|sibling
argument_list|(
name|idxParent
operator|.
name|row
argument_list|()
operator|+
name|endRow
operator|-
name|startRow
operator|+
literal|1
argument_list|,
name|idxParent
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|adjustedParent
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idxParent
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveToSibling_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToSibling_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
comment|// Move from the start to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|8
expr_stmt|;
comment|// Move from the start to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|8
expr_stmt|;
comment|// Move from the middle to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|2
operator|<<
literal|4
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|0
expr_stmt|;
comment|// Move from the end to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|0
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|6
operator|<<
literal|8
operator|<<
literal|2
expr_stmt|;
comment|// Move from the end to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|5
expr_stmt|;
comment|// Moving to the same row in a different parent doesn't confuse things.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move09"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|8
expr_stmt|;
comment|// Moving to the row of my target and its neighbours doesn't confuse things
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move11"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move12"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|6
expr_stmt|;
comment|// Move such that the destination parent no longer valid after the move.
comment|// The destination parent is always QMI(5, 0), but after this move the
comment|// row count is 5, so (5, 0) (used internally in QAIM) no longer refers to a valid index.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move13"
argument_list|)
operator|<<
literal|0
operator|<<
literal|4
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveToSibling
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToSibling
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
name|QModelIndexList
name|parentsList
decl_stmt|;
specifier|const
name|int
name|column
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|destIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndex
name|sourceIndex
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|destIndex
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|,
name|destIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|persistentDest
init|=
name|destIndex
decl_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|sourceIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|sourceIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
name|persistentDest
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QModelIndex
name|idx
init|=
name|indexList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|idxParent
init|=
name|parentsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|persistentIndex
init|=
name|persistentList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|adjustedDestination
init|=
name|destIndex
operator|.
name|sibling
argument_list|(
name|destIndex
operator|.
name|row
argument_list|()
operator|-
operator|(
name|endRow
operator|-
name|startRow
operator|+
literal|1
operator|)
argument_list|,
name|destIndex
operator|.
name|column
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxParent
operator|==
name|destIndex
condition|)
block|{
if|if
condition|(
name|row
operator|>=
name|destRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|endRow
operator|-
name|startRow
operator|+
literal|1
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idxParent
operator|.
name|row
argument_list|()
operator|>
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|adjustedDestination
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|destIndex
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|row
operator|<
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|<=
name|endRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|destRow
operator|-
name|startRow
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destIndex
operator|.
name|row
argument_list|()
operator|>
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|adjustedDestination
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|destIndex
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|row
operator|-
operator|(
name|endRow
operator|-
name|startRow
operator|+
literal|1
operator|)
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idxParent
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveToUncle_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToUncle_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
comment|// Move from the start to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|8
expr_stmt|;
comment|// Move from the start to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|8
expr_stmt|;
comment|// Move from the middle to the end
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|10
expr_stmt|;
comment|// Move from the middle to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|0
expr_stmt|;
comment|// Move from the end to the start
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|0
expr_stmt|;
comment|// Move from the middle to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|2
expr_stmt|;
comment|// Move from the end to the middle
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|5
expr_stmt|;
comment|// Moving to the same row in a different parent doesn't confuse things.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move09"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|8
expr_stmt|;
comment|// Moving to the row of my parent and its neighbours doesn't confuse things
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move10"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move11"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move12"
argument_list|)
operator|<<
literal|8
operator|<<
literal|8
operator|<<
literal|6
expr_stmt|;
comment|// Moving everything from one parent to another
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move13"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveToUncle
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToUncle
parameter_list|()
block|{
comment|// Need to have some extra rows available.
name|ModelInsertCommand
modifier|*
name|insertCommand
init|=
operator|new
name|ModelInsertCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
name|QModelIndexList
name|parentsList
decl_stmt|;
specifier|const
name|int
name|column
init|=
literal|0
decl_stmt|;
name|QModelIndex
name|sourceIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|sourceIndex
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|,
name|sourceIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|destIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|destIndex
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|,
name|destIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|9
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|takeAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|sourceIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|sourceIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|<
name|QModelIndex
argument_list|>
argument_list|()
argument_list|,
name|destIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QModelIndex
name|idx
init|=
name|indexList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|idxParent
init|=
name|parentsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QModelIndex
name|persistentIndex
init|=
name|persistentList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|idx
operator|.
name|row
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxParent
operator|==
name|destIndex
condition|)
block|{
if|if
condition|(
name|row
operator|>=
name|destRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|endRow
operator|-
name|startRow
operator|+
literal|1
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|destIndex
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|row
operator|<
name|startRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|idx
argument_list|,
name|persistentIndex
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|row
operator|<=
name|endRow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|row
operator|+
name|destRow
operator|-
name|startRow
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|destIndex
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|row
operator|-
operator|(
name|endRow
operator|-
name|startRow
operator|+
literal|1
operator|)
argument_list|,
name|persistentIndex
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idxParent
argument_list|,
name|persistentIndex
operator|.
name|parent
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|model
argument_list|()
argument_list|,
name|persistentIndex
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveToDescendants
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveToDescendants
parameter_list|()
block|{
comment|// Attempt to move a row to its ancestors depth rows deep.
specifier|const
name|int
name|depth
init|=
literal|6
decl_stmt|;
comment|// Need to have some extra rows available in a tree.
name|QList
argument_list|<
name|int
argument_list|>
name|rows
decl_stmt|;
name|ModelInsertCommand
modifier|*
name|insertCommand
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|insertCommand
operator|=
operator|new
name|ModelInsertCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|rows
operator|<<
literal|9
expr_stmt|;
block|}
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentList
decl_stmt|;
name|QModelIndexList
name|indexList
decl_stmt|;
name|QModelIndexList
name|parentsList
decl_stmt|;
specifier|const
name|int
name|column
init|=
literal|0
decl_stmt|;
name|QModelIndex
name|sourceIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|sourceIndex
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|,
name|sourceIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QModelIndex
name|destIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|destIndex
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
name|column
argument_list|,
name|destIndex
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|indexList
operator|<<
name|idx
expr_stmt|;
name|parentsList
operator|<<
name|idx
operator|.
name|parent
argument_list|()
expr_stmt|;
name|persistentList
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|ancestors
decl_stmt|;
while|while
condition|(
name|ancestors
operator|.
name|size
argument_list|()
operator|<
name|depth
condition|)
block|{
name|ancestors
operator|<<
literal|9
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<=
literal|9
condition|;
name|row
operator|++
control|)
block|{
name|moveCommand
operator|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestAncestors
argument_list|(
name|ancestors
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|testMoveWithinOwnRange_data
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveWithinOwnRange_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"endRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"destRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move01"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move02"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move03"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move04"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move05"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move06"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move07"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move08"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move09"
argument_list|)
operator|<<
literal|0
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move10"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move11"
argument_list|)
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move12"
argument_list|)
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move13"
argument_list|)
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move14"
argument_list|)
operator|<<
literal|5
operator|<<
literal|5
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move15"
argument_list|)
operator|<<
literal|5
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move16"
argument_list|)
operator|<<
literal|5
operator|<<
literal|9
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move17"
argument_list|)
operator|<<
literal|5
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move18"
argument_list|)
operator|<<
literal|6
operator|<<
literal|9
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move19"
argument_list|)
operator|<<
literal|6
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move20"
argument_list|)
operator|<<
literal|7
operator|<<
literal|9
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move21"
argument_list|)
operator|<<
literal|7
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move22"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move23"
argument_list|)
operator|<<
literal|8
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move24"
argument_list|)
operator|<<
literal|9
operator|<<
literal|9
operator|<<
literal|9
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"move25"
argument_list|)
operator|<<
literal|0
operator|<<
literal|9
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMoveWithinOwnRange
name|void
name|tst_QAbstractItemModel
operator|::
name|testMoveWithinOwnRange
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|endRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|destRow
argument_list|)
expr_stmt|;
name|QSignalSpy
name|beforeSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QModelIndex
operator|&
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelMoveCommand
modifier|*
name|moveCommand
init|=
operator|new
name|ModelMoveCommand
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|moveCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setStartRow
argument_list|(
name|startRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setEndRow
argument_list|(
name|endRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|setDestRow
argument_list|(
name|destRow
argument_list|)
expr_stmt|;
name|moveCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ListenerObject
class|class
name|ListenerObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|ListenerObject
parameter_list|(
name|QAbstractProxyModel
modifier|*
name|parent
parameter_list|)
constructor_decl|;
protected|protected:
name|void
name|fillIndexStores
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|slotAboutToBeReset
parameter_list|()
function_decl|;
name|void
name|slotReset
parameter_list|()
function_decl|;
private|private:
DECL|member|m_model
name|QAbstractProxyModel
modifier|*
name|m_model
decl_stmt|;
DECL|member|m_persistentIndexes
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|m_persistentIndexes
decl_stmt|;
DECL|member|m_nonPersistentIndexes
name|QModelIndexList
name|m_nonPersistentIndexes
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ModelWithCustomRole
class|class
name|ModelWithCustomRole
super|:
specifier|public
name|QStringListModel
block|{
name|Q_OBJECT
public|public:
DECL|function|ModelWithCustomRole
name|ModelWithCustomRole
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|parent
argument_list|)
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roleNames_
init|=
name|roleNames
argument_list|()
decl_stmt|;
name|roleNames_
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|,
literal|"custom"
argument_list|)
expr_stmt|;
name|setRoleNames
argument_list|(
name|roleNames_
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|ListenerObject
name|ListenerObject
operator|::
name|ListenerObject
parameter_list|(
name|QAbstractProxyModel
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_model
argument_list|(
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fillIndexStores
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|fillIndexStores
name|void
name|ListenerObject
operator|::
name|fillIndexStores
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
specifier|const
name|int
name|column
init|=
literal|0
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|QModelIndex
name|idx
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|m_persistentIndexes
operator|<<
name|QPersistentModelIndex
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|m_nonPersistentIndexes
operator|<<
name|idx
expr_stmt|;
if|if
condition|(
name|m_model
operator|->
name|hasChildren
argument_list|(
name|idx
argument_list|)
condition|)
name|fillIndexStores
argument_list|(
name|idx
argument_list|)
expr_stmt|;
operator|++
name|row
expr_stmt|;
name|idx
operator|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|slotAboutToBeReset
name|void
name|ListenerObject
operator|::
name|slotAboutToBeReset
parameter_list|()
block|{
comment|// Nothing has been changed yet. All indexes should be the same.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_persistentIndexes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|idx
init|=
name|m_persistentIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|==
name|m_nonPersistentIndexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m_model
operator|->
name|mapToSource
argument_list|(
name|idx
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|slotReset
name|void
name|ListenerObject
operator|::
name|slotReset
parameter_list|()
block|{
foreach|foreach
control|(
specifier|const
name|QModelIndex
modifier|&
name|idx
decl|,
name|m_persistentIndexes
control|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testReset
name|void
name|tst_QAbstractItemModel
operator|::
name|testReset
parameter_list|()
block|{
name|QSignalSpy
name|beforeResetSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterResetSpy
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeResetSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterResetSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
modifier|*
name|nullProxy
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|nullProxy
operator|->
name|setSourceModel
argument_list|(
name|m_model
argument_list|)
expr_stmt|;
comment|// Makes sure the model and proxy are in a consistent state. before and after reset.
name|ListenerObject
modifier|*
name|listener
init|=
operator|new
name|ListenerObject
argument_list|(
name|nullProxy
argument_list|)
decl_stmt|;
name|ModelResetCommandFixed
modifier|*
name|resetCommand
init|=
operator|new
name|ModelResetCommandFixed
argument_list|(
name|m_model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|resetCommand
operator|->
name|setNumCols
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|resetCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resetCommand
operator|->
name|setEndRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resetCommand
operator|->
name|setDestRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|resetCommand
operator|->
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|resetCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
comment|// Verify that the correct signals were emitted
name|QVERIFY
argument_list|(
name|beforeResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that the move actually happened.
name|QVERIFY
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QModelIndex
name|destIndex
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|destIndex
argument_list|)
operator|==
literal|11
argument_list|)
expr_stmt|;
comment|// Delete it because its slots test things which are not true after this point.
operator|delete
name|listener
expr_stmt|;
name|QSignalSpy
name|proxyBeforeResetSpy
argument_list|(
name|nullProxy
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyAfterResetSpy
argument_list|(
name|nullProxy
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Before setting it, it does not have custom roles.
name|QCOMPARE
argument_list|(
name|nullProxy
operator|->
name|roleNames
argument_list|()
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|nullProxy
operator|->
name|setSourceModel
argument_list|(
operator|new
name|ModelWithCustomRole
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyBeforeResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAfterResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nullProxy
operator|->
name|roleNames
argument_list|()
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"custom"
argument_list|)
argument_list|)
expr_stmt|;
name|nullProxy
operator|->
name|setSourceModel
argument_list|(
name|m_model
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyBeforeResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAfterResetSpy
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// After being reset the proxy must be queried again.
name|QCOMPARE
argument_list|(
name|nullProxy
operator|->
name|roleNames
argument_list|()
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|)
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CustomRoleModel
class|class
name|CustomRoleModel
super|:
specifier|public
name|QStringListModel
block|{
name|Q_OBJECT
name|Q_ENUMS
parameter_list|(
name|Roles
parameter_list|)
specifier|public
private|:
DECL|enum|Roles
enum|enum
name|Roles
block|{
DECL|enumerator|Custom1
name|Custom1
init|=
name|Qt
operator|::
name|UserRole
operator|+
literal|1
block|,
DECL|enumerator|Custom2
name|Custom2
block|,
DECL|enumerator|UserRole
name|UserRole
block|}
enum|;
DECL|function|CustomRoleModel
name|CustomRoleModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
argument_list|,
name|parent
argument_list|)
block|{     }
DECL|function|emitSignals
name|void
name|emitSignals
parameter_list|()
block|{
specifier|const
name|QModelIndex
name|top
init|=
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|bottom
init|=
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
emit|emit
name|dataChanged
argument_list|(
name|top
argument_list|,
name|bottom
argument_list|)
emit|;
emit|emit
name|dataChanged
argument_list|(
name|top
argument_list|,
name|bottom
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|Qt
operator|::
name|ToolTipRole
argument_list|)
emit|;
emit|emit
name|dataChanged
argument_list|(
name|top
argument_list|,
name|bottom
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|Qt
operator|::
name|ToolTipRole
operator|<<
name|Custom1
argument_list|)
emit|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testDataChanged
name|void
name|tst_QAbstractItemModel
operator|::
name|testDataChanged
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|CustomRoleModel
name|model
decl_stmt|;
name|QSignalSpy
name|withRoles
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|,
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|withoutRoles
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|withRoles
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|withoutRoles
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|emitSignals
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|withRoles
operator|.
name|size
argument_list|()
argument_list|,
name|withoutRoles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|withRoles
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|secondEmission
init|=
name|withRoles
operator|.
name|at
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QVariantList
name|thirdEmission
init|=
name|withRoles
operator|.
name|at
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
name|secondRoles
init|=
name|secondEmission
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
name|thirdRoles
init|=
name|thirdEmission
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|<
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|secondRoles
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|secondRoles
operator|.
name|contains
argument_list|(
name|Qt
operator|::
name|ToolTipRole
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thirdRoles
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thirdRoles
operator|.
name|contains
argument_list|(
name|Qt
operator|::
name|ToolTipRole
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thirdRoles
operator|.
name|contains
argument_list|(
name|CustomRoleModel
operator|::
name|Custom1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QPersistentModelIndex>
argument_list|)
end_macro
begin_class
DECL|class|SignalArgumentChecker
class|class
name|SignalArgumentChecker
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalArgumentChecker
name|SignalArgumentChecker
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|p1
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|p2
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_p1
argument_list|(
name|p1
argument_list|)
member_init_list|,
name|m_p2
argument_list|(
name|p2
argument_list|)
member_init_list|,
name|m_p1Persistent
argument_list|(
name|p1
argument_list|)
member_init_list|,
name|m_p2Persistent
argument_list|(
name|p2
argument_list|)
block|{
name|connect
argument_list|(
name|p1
operator|.
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|p1
operator|.
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|layoutAboutToBeChanged
name|void
name|layoutAboutToBeChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|parents
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|parents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|first
argument_list|()
operator|!=
name|parents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_p2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|layoutChanged
name|void
name|layoutChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|parents
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|parents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|first
argument_list|()
operator|!=
name|parents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_p1Persistent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_p2Persistent
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parents
operator|.
name|contains
argument_list|(
name|m_p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Has changed
block|}
private|private:
DECL|member|m_p1
name|QModelIndex
name|m_p1
decl_stmt|;
DECL|member|m_p2
name|QModelIndex
name|m_p2
decl_stmt|;
DECL|member|m_p1Persistent
name|QPersistentModelIndex
name|m_p1Persistent
decl_stmt|;
DECL|member|m_p2Persistent
name|QPersistentModelIndex
name|m_p2Persistent
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testChildrenLayoutsChanged
name|void
name|tst_QAbstractItemModel
operator|::
name|testChildrenLayoutsChanged
parameter_list|()
block|{
name|DynamicTreeModel
name|model
decl_stmt|;
name|ModelInsertCommand
modifier|*
name|insertCommand
init|=
operator|new
name|ModelInsertCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|insertCommand
operator|=
operator|new
name|ModelInsertCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|insertCommand
operator|=
operator|new
name|ModelInsertCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|{
specifier|const
name|QModelIndex
name|p1
init|=
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|p2
init|=
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p1FirstPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p1LastPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p2FirstPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p2
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p2LastPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|p1
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|p2
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QSignalSpy
name|beforeSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|ModelChangeChildrenLayoutsCommand
modifier|*
name|changeCommand
init|=
operator|new
name|ModelChangeChildrenLayoutsCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|changeCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|changeCommand
operator|->
name|setSecondAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|changeCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|first
argument_list|()
decl_stmt|;
specifier|const
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|beforeParents
init|=
name|beforeSignal
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeParents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|first
argument_list|()
operator|!=
name|beforeParents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|afterParents
init|=
name|afterSignal
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|afterParents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterParents
operator|.
name|first
argument_list|()
operator|!=
name|afterParents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterParents
operator|.
name|contains
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterParents
operator|.
name|contains
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
comment|// The first will be the last, and the lest will be the first.
name|QVERIFY
argument_list|(
name|p1FirstPersistent
operator|.
name|row
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1LastPersistent
operator|.
name|row
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p2FirstPersistent
operator|.
name|row
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p2LastPersistent
operator|.
name|row
argument_list|()
operator|==
literal|8
argument_list|)
expr_stmt|;
block|}
name|insertCommand
operator|=
operator|new
name|ModelInsertCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
operator|delete
name|insertCommand
expr_stmt|;
comment|// Even when p2 itself is moved around, signal emission remains correct for its children.
block|{
specifier|const
name|QModelIndex
name|p1
init|=
name|model
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|QModelIndex
name|p2
init|=
name|model
operator|.
name|index
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|p1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|p1
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|p2
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|const
name|QPersistentModelIndex
name|p1Persistent
init|=
name|p1
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p2Persistent
init|=
name|p2
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p1FirstPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p1LastPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|,
name|p1
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p2FirstPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|p2
argument_list|)
decl_stmt|;
specifier|const
name|QPersistentModelIndex
name|p2LastPersistent
init|=
name|model
operator|.
name|index
argument_list|(
literal|9
argument_list|,
literal|0
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|QSignalSpy
name|beforeSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|afterSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|beforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|afterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Because the arguments in the signal are persistent, we need to check them for the aboutToBe
comment|// case at emission time - before they get updated.
name|SignalArgumentChecker
name|checker
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
decl_stmt|;
name|ModelChangeChildrenLayoutsCommand
modifier|*
name|changeCommand
init|=
operator|new
name|ModelChangeChildrenLayoutsCommand
argument_list|(
operator|&
name|model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|changeCommand
operator|->
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|changeCommand
operator|->
name|setSecondAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
operator|<<
literal|4
argument_list|)
expr_stmt|;
name|changeCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
comment|// p2 has been moved.
name|QCOMPARE
argument_list|(
name|p2Persistent
operator|.
name|row
argument_list|()
argument_list|,
name|p2
operator|.
name|row
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|beforeSignal
init|=
name|beforeSpy
operator|.
name|first
argument_list|()
decl_stmt|;
specifier|const
name|QVariantList
name|afterSignal
init|=
name|afterSpy
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1FirstPersistent
operator|.
name|row
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p1LastPersistent
operator|.
name|row
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2FirstPersistent
operator|.
name|row
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p2LastPersistent
operator|.
name|row
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|OverrideRoleNamesAndDragActions
class|class
name|OverrideRoleNamesAndDragActions
super|:
specifier|public
name|QStringListModel
block|{
name|Q_OBJECT
public|public:
DECL|function|OverrideRoleNamesAndDragActions
name|OverrideRoleNamesAndDragActions
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|parent
argument_list|)
block|{      }
DECL|function|roleNames
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roleNames
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roles
init|=
name|QStringListModel
operator|::
name|roleNames
argument_list|()
decl_stmt|;
name|roles
operator|.
name|insert
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|2
argument_list|,
literal|"custom"
argument_list|)
expr_stmt|;
return|return
name|roles
return|;
block|}
DECL|function|supportedDragActions
name|Qt
operator|::
name|DropActions
name|supportedDragActions
parameter_list|()
specifier|const
block|{
return|return
name|QStringListModel
operator|::
name|supportedDragActions
argument_list|()
operator||
name|Qt
operator|::
name|MoveAction
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testRoleNames
name|void
name|tst_QAbstractItemModel
operator|::
name|testRoleNames
parameter_list|()
block|{
name|QAbstractItemModel
modifier|*
name|model
init|=
operator|new
name|OverrideRoleNamesAndDragActions
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roles
init|=
name|model
operator|->
name|roleNames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|roles
operator|.
name|contains
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|roles
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|2
argument_list|)
operator|==
literal|"custom"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDragActions
name|void
name|tst_QAbstractItemModel
operator|::
name|testDragActions
parameter_list|()
block|{
name|QAbstractItemModel
modifier|*
name|model
init|=
operator|new
name|OverrideRoleNamesAndDragActions
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DropActions
name|actions
init|=
name|model
operator|->
name|supportedDragActions
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|actions
operator|&
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
comment|// Present by default
name|QVERIFY
argument_list|(
name|actions
operator|&
name|Qt
operator|::
name|MoveAction
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalConnectionTester
class|class
name|SignalConnectionTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalConnectionTester
name|SignalConnectionTester
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|testPassed
argument_list|(
literal|false
argument_list|)
block|{      }
public|public
name|Q_SLOTS
public|:
DECL|function|testSlot
name|void
name|testSlot
parameter_list|()
block|{
name|testPassed
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|testSlotWithParam_1
name|void
name|testSlotWithParam_1
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
block|{
name|testPassed
operator|=
operator|!
name|idx
operator|.
name|isValid
argument_list|()
expr_stmt|;
block|}
DECL|function|testSlotWithParam_2
name|void
name|testSlotWithParam_2
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|testPassed
operator|=
operator|!
name|idx
operator|.
name|isValid
argument_list|()
operator|&&
name|start
operator|==
literal|0
expr_stmt|;
block|}
DECL|function|testSlotWithParam_3
name|void
name|testSlotWithParam_3
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|testPassed
operator|=
operator|!
name|idx
operator|.
name|isValid
argument_list|()
operator|&&
name|start
operator|==
literal|0
operator|&&
name|end
operator|==
literal|1
expr_stmt|;
block|}
public|public:
DECL|member|testPassed
name|bool
name|testPassed
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testFunctionPointerSignalConnection
name|void
name|tst_QAbstractItemModel
operator|::
name|testFunctionPointerSignalConnection
parameter_list|()
block|{
name|QStringListModel
name|model
decl_stmt|;
block|{
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|model
argument_list|,
operator|&
name|QAbstractItemModel
operator|::
name|rowsInserted
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|model
argument_list|,
literal|"rowsInserted"
argument_list|,
name|Q_ARG
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|model
argument_list|,
operator|&
name|QAbstractItemModel
operator|::
name|rowsInserted
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWithParam_1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|model
argument_list|,
literal|"rowsInserted"
argument_list|,
name|Q_ARG
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|model
argument_list|,
operator|&
name|QAbstractItemModel
operator|::
name|rowsInserted
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWithParam_2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|model
argument_list|,
literal|"rowsInserted"
argument_list|,
name|Q_ARG
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|model
argument_list|,
operator|&
name|QAbstractItemModel
operator|::
name|rowsInserted
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWithParam_3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|model
argument_list|,
literal|"rowsInserted"
argument_list|,
name|Q_ARG
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|model
argument_list|,
literal|"rowsInserted"
argument_list|,
name|Q_ARG
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// Intentionally does not compile.
comment|//     model.rowsInserted(QModelIndex(), 0, 0);
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAbstractItemModel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qabstractitemmodel.moc"
end_include
end_unit
