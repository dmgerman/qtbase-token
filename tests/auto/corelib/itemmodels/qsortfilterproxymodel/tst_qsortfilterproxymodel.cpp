begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"dynamictreemodel.h"
end_include
begin_include
include|#
directive|include
file|"modeltest.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QStandardItem>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QTreeView>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QTableView>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_typedef
DECL|typedef|IntPair
typedef|typedef
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|IntPair
typedef|;
end_typedef
begin_typedef
DECL|typedef|IntPairList
typedef|typedef
name|QList
argument_list|<
name|IntPair
argument_list|>
name|IntPairList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QPersistentModelIndex>
argument_list|)
end_macro
begin_class
DECL|class|tst_QSortFilterProxyModel
class|class
name|tst_QSortFilterProxyModel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSortFilterProxyModel
parameter_list|()
constructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|sort_data
parameter_list|()
function_decl|;
name|void
name|sort
parameter_list|()
function_decl|;
name|void
name|sortHierarchy_data
parameter_list|()
function_decl|;
name|void
name|sortHierarchy
parameter_list|()
function_decl|;
name|void
name|insertRows_data
parameter_list|()
function_decl|;
name|void
name|insertRows
parameter_list|()
function_decl|;
name|void
name|prependRow
parameter_list|()
function_decl|;
name|void
name|removeRows_data
parameter_list|()
function_decl|;
name|void
name|removeRows
parameter_list|()
function_decl|;
name|void
name|removeColumns_data
parameter_list|()
function_decl|;
name|void
name|removeColumns
parameter_list|()
function_decl|;
name|void
name|insertAfterSelect
parameter_list|()
function_decl|;
name|void
name|removeAfterSelect
parameter_list|()
function_decl|;
name|void
name|filter_data
parameter_list|()
function_decl|;
name|void
name|filter
parameter_list|()
function_decl|;
name|void
name|filterHierarchy_data
parameter_list|()
function_decl|;
name|void
name|filterHierarchy
parameter_list|()
function_decl|;
name|void
name|filterColumns_data
parameter_list|()
function_decl|;
name|void
name|filterColumns
parameter_list|()
function_decl|;
name|void
name|filterTable
parameter_list|()
function_decl|;
name|void
name|filterCurrent
parameter_list|()
function_decl|;
name|void
name|changeSourceLayout
parameter_list|()
function_decl|;
name|void
name|removeSourceRows_data
parameter_list|()
function_decl|;
name|void
name|removeSourceRows
parameter_list|()
function_decl|;
name|void
name|insertSourceRows_data
parameter_list|()
function_decl|;
name|void
name|insertSourceRows
parameter_list|()
function_decl|;
name|void
name|changeFilter_data
parameter_list|()
function_decl|;
name|void
name|changeFilter
parameter_list|()
function_decl|;
name|void
name|changeSourceData_data
parameter_list|()
function_decl|;
name|void
name|changeSourceData
parameter_list|()
function_decl|;
name|void
name|sortFilterRole
parameter_list|()
function_decl|;
name|void
name|selectionFilteredOut
parameter_list|()
function_decl|;
name|void
name|match_data
parameter_list|()
function_decl|;
name|void
name|match
parameter_list|()
function_decl|;
name|void
name|insertIntoChildrenlessItem
parameter_list|()
function_decl|;
name|void
name|invalidateMappedChildren
parameter_list|()
function_decl|;
name|void
name|insertRowIntoFilteredParent
parameter_list|()
function_decl|;
name|void
name|filterOutParentAndFilterInChild
parameter_list|()
function_decl|;
name|void
name|sourceInsertRows
parameter_list|()
function_decl|;
name|void
name|sourceModelDeletion
parameter_list|()
function_decl|;
name|void
name|sortColumnTracking1
parameter_list|()
function_decl|;
name|void
name|sortColumnTracking2
parameter_list|()
function_decl|;
name|void
name|sortStable
parameter_list|()
function_decl|;
name|void
name|hiddenColumns
parameter_list|()
function_decl|;
name|void
name|insertRowsSort
parameter_list|()
function_decl|;
name|void
name|staticSorting
parameter_list|()
function_decl|;
name|void
name|dynamicSorting
parameter_list|()
function_decl|;
name|void
name|fetchMore
parameter_list|()
function_decl|;
name|void
name|hiddenChildren
parameter_list|()
function_decl|;
name|void
name|mapFromToSource
parameter_list|()
function_decl|;
name|void
name|removeRowsRecursive
parameter_list|()
function_decl|;
name|void
name|doubleProxySelectionSetSourceModel
parameter_list|()
function_decl|;
name|void
name|appearsAndSort
parameter_list|()
function_decl|;
name|void
name|unnecessaryDynamicSorting
parameter_list|()
function_decl|;
name|void
name|unnecessaryMapCreation
parameter_list|()
function_decl|;
name|void
name|resetInvalidate_data
parameter_list|()
function_decl|;
name|void
name|resetInvalidate
parameter_list|()
function_decl|;
name|void
name|testMultipleProxiesWithSelection
parameter_list|()
function_decl|;
name|void
name|mapSelectionFromSource
parameter_list|()
function_decl|;
name|void
name|testResetInternalData
parameter_list|()
function_decl|;
name|void
name|filteredColumns
parameter_list|()
function_decl|;
name|void
name|headerDataChanged
parameter_list|()
function_decl|;
name|void
name|testParentLayoutChanged
parameter_list|()
function_decl|;
name|void
name|moveSourceRows
parameter_list|()
function_decl|;
name|void
name|hierarchyFilterInvalidation
parameter_list|()
function_decl|;
name|void
name|simpleFilterInvalidation
parameter_list|()
function_decl|;
name|void
name|chainedProxyModelRoleNames
parameter_list|()
function_decl|;
protected|protected:
name|void
name|buildHierarchy
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|data
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
function_decl|;
name|void
name|checkHierarchy
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|data
parameter_list|,
specifier|const
name|QAbstractItemModel
modifier|*
name|model
parameter_list|)
function_decl|;
private|private:
DECL|member|m_model
name|QStandardItemModel
modifier|*
name|m_model
decl_stmt|;
DECL|member|m_proxy
name|QSortFilterProxyModel
modifier|*
name|m_proxy
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QSortFilterProxyModel
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QSortFilterProxyModel
name|obj1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|sourceModel
argument_list|()
argument_list|,
operator|(
name|QAbstractItemModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
comment|// int QSortFilterProxyModel::filterKeyColumn()
comment|// void QSortFilterProxyModel::setFilterKeyColumn(int)
name|obj1
operator|.
name|setFilterKeyColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|filterKeyColumn
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFilterKeyColumn
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|filterKeyColumn
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setFilterKeyColumn
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|filterKeyColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QSortFilterProxyModel
name|tst_QSortFilterProxyModel
operator|::
name|tst_QSortFilterProxyModel
parameter_list|()
member_init_list|:
name|m_model
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_proxy
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QSortFilterProxyModel
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|m_model
operator|=
operator|new
name|QStandardItemModel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_proxy
operator|=
operator|new
name|QSortFilterProxyModel
argument_list|()
expr_stmt|;
name|m_proxy
operator|->
name|setSourceModel
argument_list|(
name|m_model
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QSortFilterProxyModel
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|m_proxy
expr_stmt|;
operator|delete
name|m_model
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSortFilterProxyModel
operator|::
name|cleanup
parameter_list|()
block|{
name|m_proxy
operator|->
name|setFilterRegExp
argument_list|(
name|QRegExp
argument_list|()
argument_list|)
expr_stmt|;
name|m_proxy
operator|->
name|sort
argument_list|(
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|m_model
operator|->
name|clear
argument_list|()
expr_stmt|;
name|m_model
operator|->
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*   tests */
end_comment
begin_function
DECL|function|sort_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sort_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortCaseSensitivity"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"flat descending"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"delta"
operator|<<
literal|"yankee"
operator|<<
literal|"bravo"
operator|<<
literal|"lima"
operator|<<
literal|"charlie"
operator|<<
literal|"juliet"
operator|<<
literal|"tango"
operator|<<
literal|"hotel"
operator|<<
literal|"uniform"
operator|<<
literal|"alpha"
operator|<<
literal|"echo"
operator|<<
literal|"golf"
operator|<<
literal|"quebec"
operator|<<
literal|"foxtrot"
operator|<<
literal|"india"
operator|<<
literal|"romeo"
operator|<<
literal|"november"
operator|<<
literal|"oskar"
operator|<<
literal|"zulu"
operator|<<
literal|"kilo"
operator|<<
literal|"whiskey"
operator|<<
literal|"mike"
operator|<<
literal|"papa"
operator|<<
literal|"sierra"
operator|<<
literal|"xray"
operator|<<
literal|"viktor"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"zulu"
operator|<<
literal|"yankee"
operator|<<
literal|"xray"
operator|<<
literal|"whiskey"
operator|<<
literal|"viktor"
operator|<<
literal|"uniform"
operator|<<
literal|"tango"
operator|<<
literal|"sierra"
operator|<<
literal|"romeo"
operator|<<
literal|"quebec"
operator|<<
literal|"papa"
operator|<<
literal|"oskar"
operator|<<
literal|"november"
operator|<<
literal|"mike"
operator|<<
literal|"lima"
operator|<<
literal|"kilo"
operator|<<
literal|"juliet"
operator|<<
literal|"india"
operator|<<
literal|"hotel"
operator|<<
literal|"golf"
operator|<<
literal|"foxtrot"
operator|<<
literal|"echo"
operator|<<
literal|"delta"
operator|<<
literal|"charlie"
operator|<<
literal|"bravo"
operator|<<
literal|"alpha"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"flat ascending"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"delta"
operator|<<
literal|"yankee"
operator|<<
literal|"bravo"
operator|<<
literal|"lima"
operator|<<
literal|"charlie"
operator|<<
literal|"juliet"
operator|<<
literal|"tango"
operator|<<
literal|"hotel"
operator|<<
literal|"uniform"
operator|<<
literal|"alpha"
operator|<<
literal|"echo"
operator|<<
literal|"golf"
operator|<<
literal|"quebec"
operator|<<
literal|"foxtrot"
operator|<<
literal|"india"
operator|<<
literal|"romeo"
operator|<<
literal|"november"
operator|<<
literal|"oskar"
operator|<<
literal|"zulu"
operator|<<
literal|"kilo"
operator|<<
literal|"whiskey"
operator|<<
literal|"mike"
operator|<<
literal|"papa"
operator|<<
literal|"sierra"
operator|<<
literal|"xray"
operator|<<
literal|"viktor"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"bravo"
operator|<<
literal|"charlie"
operator|<<
literal|"delta"
operator|<<
literal|"echo"
operator|<<
literal|"foxtrot"
operator|<<
literal|"golf"
operator|<<
literal|"hotel"
operator|<<
literal|"india"
operator|<<
literal|"juliet"
operator|<<
literal|"kilo"
operator|<<
literal|"lima"
operator|<<
literal|"mike"
operator|<<
literal|"november"
operator|<<
literal|"oskar"
operator|<<
literal|"papa"
operator|<<
literal|"quebec"
operator|<<
literal|"romeo"
operator|<<
literal|"sierra"
operator|<<
literal|"tango"
operator|<<
literal|"uniform"
operator|<<
literal|"viktor"
operator|<<
literal|"whiskey"
operator|<<
literal|"xray"
operator|<<
literal|"yankee"
operator|<<
literal|"zulu"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case insensitive"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"BETA"
operator|<<
literal|"Gamma"
operator|<<
literal|"delta"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"BETA"
operator|<<
literal|"delta"
operator|<<
literal|"Gamma"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"case sensitive"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"alpha"
operator|<<
literal|"BETA"
operator|<<
literal|"Gamma"
operator|<<
literal|"delta"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"BETA"
operator|<<
literal|"Gamma"
operator|<<
literal|"alpha"
operator|<<
literal|"delta"
operator|)
expr_stmt|;
name|QStringList
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10000
init|;
name|i
operator|<
literal|20000
condition|;
operator|++
name|i
control|)
name|list
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"Number: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"large set ascending"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
operator|<<
name|list
operator|<<
name|list
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sort
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sort
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortCaseSensitivity
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// prepare model
name|QStandardItem
modifier|*
name|root
init|=
name|m_model
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|items
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|initial
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the proxy is unsorted
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort
name|m_proxy
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
name|m_proxy
operator|->
name|setSortCaseSensitivity
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CaseSensitivity
argument_list|>
argument_list|(
name|sortCaseSensitivity
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the model is unchanged
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the proxy is sorted
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restore the unsorted order
name|m_proxy
operator|->
name|sort
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the proxy is unsorted again
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sortHierarchy_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortHierarchy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"flat ascending"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"f"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"f"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple hierarchy"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"<"
operator|<<
literal|"b"
operator|<<
literal|"<"
operator|<<
literal|"c"
operator|<<
literal|">"
operator|<<
literal|">"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"<"
operator|<<
literal|"b"
operator|<<
literal|"<"
operator|<<
literal|"c"
operator|<<
literal|">"
operator|<<
literal|">"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"hierarchical ascending"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"<"
operator|<<
literal|"h"
operator|<<
literal|"<"
operator|<<
literal|"2"
operator|<<
literal|"0"
operator|<<
literal|"1"
operator|<<
literal|">"
operator|<<
literal|"g"
operator|<<
literal|"i"
operator|<<
literal|">"
operator|<<
literal|"b"
operator|<<
literal|"<"
operator|<<
literal|"l"
operator|<<
literal|"k"
operator|<<
literal|"<"
operator|<<
literal|"8"
operator|<<
literal|"7"
operator|<<
literal|"9"
operator|<<
literal|">"
operator|<<
literal|"m"
operator|<<
literal|">"
operator|<<
literal|"a"
operator|<<
literal|"<"
operator|<<
literal|"z"
operator|<<
literal|"y"
operator|<<
literal|"x"
operator|<<
literal|">"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"<"
operator|<<
literal|"x"
operator|<<
literal|"y"
operator|<<
literal|"z"
operator|<<
literal|">"
operator|<<
literal|"b"
operator|<<
literal|"<"
operator|<<
literal|"k"
operator|<<
literal|"<"
operator|<<
literal|"7"
operator|<<
literal|"8"
operator|<<
literal|"9"
operator|<<
literal|">"
operator|<<
literal|"l"
operator|<<
literal|"m"
operator|<<
literal|">"
operator|<<
literal|"c"
operator|<<
literal|"<"
operator|<<
literal|"g"
operator|<<
literal|"h"
operator|<<
literal|"<"
operator|<<
literal|"0"
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|">"
operator|<<
literal|"i"
operator|<<
literal|">"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortHierarchy
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortHierarchy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|buildHierarchy
argument_list|(
name|initial
argument_list|,
name|m_model
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|initial
argument_list|,
name|m_model
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|initial
argument_list|,
name|m_proxy
argument_list|)
expr_stmt|;
name|m_proxy
operator|->
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|initial
argument_list|,
name|m_model
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|expected
argument_list|,
name|m_proxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRows_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertRows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"insert"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert one row in the middle"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Three"
operator|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert one row in the beginning"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert one row in the end"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Five"
operator|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertRows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|insert
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
comment|// prepare model
name|m_model
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|//m_model->insertColumns(0, 1, QModelIndex());
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|m_model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
comment|// make sure the model correct before insert
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the proxy is correct before insert
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// insert the row
name|m_proxy
operator|->
name|insertRows
argument_list|(
name|position
argument_list|,
name|insert
operator|.
name|count
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// set the data for the inserted row
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insert
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|position
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|m_proxy
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|insert
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
comment|// make sure the model correct after insert
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the proxy is correct after insert
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|prependRow
name|void
name|tst_QSortFilterProxyModel
operator|::
name|prependRow
parameter_list|()
block|{
comment|//this tests that data is correctly handled by the sort filter when prepending a row
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QStandardItem
name|item
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
operator|&
name|item
argument_list|)
expr_stmt|;
name|QStandardItem
name|sub
argument_list|(
literal|"sub"
argument_list|)
decl_stmt|;
name|item
operator|.
name|appendRow
argument_list|(
operator|&
name|sub
argument_list|)
expr_stmt|;
name|sub
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|QStandardItem
name|sub2
argument_list|(
literal|"sub2"
argument_list|)
decl_stmt|;
name|sub2
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"sub3"
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|.
name|insertRow
argument_list|(
literal|0
argument_list|,
operator|&
name|sub2
argument_list|)
expr_stmt|;
name|QModelIndex
name|index_sub2
init|=
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|model
operator|.
name|indexFromItem
argument_list|(
operator|&
name|sub2
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|sub2
operator|.
name|rowCount
argument_list|()
argument_list|,
name|proxy
operator|.
name|rowCount
argument_list|(
name|index_sub2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//only the "root" item is there
block|}
end_function
begin_function
DECL|function|removeRows_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeRows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedSource"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row in the middle [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|2
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row in the beginning [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|0
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row in the end [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|4
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove all [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|0
comment|// position
operator|<<
literal|5
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// expectedSource
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row past the end [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|5
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|false
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove row -1 [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
operator|-
literal|1
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|false
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove three rows in the middle [no sorting/filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|1
comment|// position
operator|<<
literal|3
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"One"
operator|<<
literal|"Five"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"One"
operator|<<
literal|"Five"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row in the middle [ascending sorting, no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|2
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove two rows in the middle [ascending sorting, no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|2
comment|// position
operator|<<
literal|2
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove two rows in the middle [descending sorting, no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|2
comment|// position
operator|<<
literal|2
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"5"
operator|<<
literal|"4"
operator|<<
literal|"1"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"4"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one row in the middle [no sorting, filter=5|2|3]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
operator|<<
operator|-
literal|1
comment|// no sorting
operator|<<
name|QString
argument_list|(
literal|"5|2|3"
argument_list|)
operator|<<
literal|1
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"5"
operator|<<
literal|"3"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove all [ascending sorting, no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"3"
operator|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|0
comment|// position
operator|<<
literal|5
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// expectedSource
block|}
end_function
begin_function
DECL|function|removeRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeRows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedSource
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
comment|// prepare model
foreach|foreach
control|(
name|QString
name|s
decl|,
name|initial
control|)
name|model
operator|.
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortOrder
operator|!=
operator|-
literal|1
condition|)
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|QRegExp
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the rows
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|removeRows
argument_list|(
name|position
argument_list|,
name|count
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expectedSource
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expectedProxy
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the model is correct after remove
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
name|QCOMPARE
argument_list|(
name|model
operator|.
name|item
argument_list|(
name|row
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedSource
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the proxy is correct after remove
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedProxy
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|MyFilteredColumnProxyModel
class|class
name|MyFilteredColumnProxyModel
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|MyFilteredColumnProxyModel
name|MyFilteredColumnProxyModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
block|{ }
protected|protected:
DECL|function|filterAcceptsColumn
name|bool
name|filterAcceptsColumn
parameter_list|(
name|int
name|sourceColumn
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
name|QString
name|key
init|=
name|sourceModel
argument_list|()
operator|->
name|headerData
argument_list|(
name|sourceColumn
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|key
operator|.
name|contains
argument_list|(
name|filterRegExp
argument_list|()
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|removeColumns_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeColumns_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"position"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedSource"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column in the middle [no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|2
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column in the end [no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|4
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column past the end [no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|5
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|false
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove column -1 [no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
operator|-
literal|1
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|false
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove all columns [no filter]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|()
comment|// no filter
operator|<<
literal|0
comment|// position
operator|<<
literal|5
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
comment|// expectedSource
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column in the middle [filter=1|3|5]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|(
literal|"1|3|5"
argument_list|)
operator|<<
literal|1
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column in the end [filter=1|3|5]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|(
literal|"1|3|5"
argument_list|)
operator|<<
literal|2
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"3"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one column past the end [filter=1|3|5]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|(
literal|"1|3|5"
argument_list|)
operator|<<
literal|3
comment|// position
operator|<<
literal|1
comment|// count
operator|<<
literal|false
comment|// success
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
literal|"1"
operator|<<
literal|"3"
operator|<<
literal|"5"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove all columns [filter=1|3|5]"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
operator|)
operator|<<
name|QString
argument_list|(
literal|"1|3|5"
argument_list|)
operator|<<
literal|0
comment|// position
operator|<<
literal|3
comment|// count
operator|<<
literal|true
comment|// success
operator|<<
name|QStringList
argument_list|()
comment|// expectedProxy
operator|<<
operator|(
name|QStringList
argument_list|()
comment|// expectedSource
operator|<<
literal|"2"
operator|<<
literal|"4"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeColumns
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeColumns
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedSource
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|MyFilteredColumnProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|QRegExp
argument_list|(
name|filter
argument_list|)
argument_list|)
expr_stmt|;
comment|// prepare model
name|model
operator|.
name|setHorizontalHeaderLabels
argument_list|(
name|initial
argument_list|)
expr_stmt|;
comment|// remove the columns
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|removeColumns
argument_list|(
name|position
argument_list|,
name|count
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expectedSource
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expectedProxy
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the model is correct after remove
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|model
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|col
control|)
name|QCOMPARE
argument_list|(
name|model
operator|.
name|horizontalHeaderItem
argument_list|(
name|col
argument_list|)
operator|->
name|text
argument_list|()
argument_list|,
name|expectedSource
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the proxy is correct after remove
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|proxy
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|col
control|)
block|{
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|headerData
argument_list|(
name|col
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedProxy
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|filterColumns_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterColumns_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|"a"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"delta"
operator|<<
literal|"yankee"
operator|<<
literal|"bravo"
operator|<<
literal|"lima"
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"some"
argument_list|)
operator|<<
literal|"lie"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"charlie"
operator|<<
literal|"juliet"
operator|<<
literal|"tango"
operator|<<
literal|"hotel"
operator|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nothing"
argument_list|)
operator|<<
literal|"zoo"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"foxtrot"
operator|<<
literal|"uniform"
operator|<<
literal|"alpha"
operator|<<
literal|"golf"
operator|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterColumns
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterColumns
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// prepare model
name|m_model
operator|->
name|setColumnCount
argument_list|(
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|m_model
operator|->
name|setRowCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// set data
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|col
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|m_model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|m_proxy
operator|->
name|setFilterRegExp
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|m_proxy
operator|->
name|setFilterKeyColumn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the model is unchanged
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|col
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the proxy is filtered
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filter_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filter_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"flat"
argument_list|)
operator|<<
literal|"e"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"delta"
operator|<<
literal|"yankee"
operator|<<
literal|"bravo"
operator|<<
literal|"lima"
operator|<<
literal|"charlie"
operator|<<
literal|"juliet"
operator|<<
literal|"tango"
operator|<<
literal|"hotel"
operator|<<
literal|"uniform"
operator|<<
literal|"alpha"
operator|<<
literal|"echo"
operator|<<
literal|"golf"
operator|<<
literal|"quebec"
operator|<<
literal|"foxtrot"
operator|<<
literal|"india"
operator|<<
literal|"romeo"
operator|<<
literal|"november"
operator|<<
literal|"oskar"
operator|<<
literal|"zulu"
operator|<<
literal|"kilo"
operator|<<
literal|"whiskey"
operator|<<
literal|"mike"
operator|<<
literal|"papa"
operator|<<
literal|"sierra"
operator|<<
literal|"xray"
operator|<<
literal|"viktor"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"delta"
operator|<<
literal|"yankee"
operator|<<
literal|"charlie"
operator|<<
literal|"juliet"
operator|<<
literal|"hotel"
operator|<<
literal|"echo"
operator|<<
literal|"quebec"
operator|<<
literal|"romeo"
operator|<<
literal|"november"
operator|<<
literal|"whiskey"
operator|<<
literal|"mike"
operator|<<
literal|"sierra"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filter
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filter
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// prepare model
name|QVERIFY
argument_list|(
name|m_model
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// set data
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|m_model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|m_proxy
operator|->
name|setFilterRegExp
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
comment|// make sure the proxy is unfiltered
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expected
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure the model is unchanged
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_model
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_model
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the proxy is filtered
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|m_proxy
operator|->
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|m_proxy
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|m_proxy
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|filterHierarchy_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterHierarchy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pattern"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"flat"
argument_list|)
operator|<<
literal|".*oo"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"boo"
operator|<<
literal|"baz"
operator|<<
literal|"moo"
operator|<<
literal|"laa"
operator|<<
literal|"haa"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"boo"
operator|<<
literal|"moo"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"simple hierarchy"
argument_list|)
operator|<<
literal|"b.*z"
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"baz"
operator|<<
literal|"<"
operator|<<
literal|"boz"
operator|<<
literal|"<"
operator|<<
literal|"moo"
operator|<<
literal|">"
operator|<<
literal|">"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"baz"
operator|<<
literal|"<"
operator|<<
literal|"boz"
operator|<<
literal|">"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterHierarchy
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterHierarchy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initial
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|buildHierarchy
argument_list|(
name|initial
argument_list|,
name|m_model
argument_list|)
expr_stmt|;
name|m_proxy
operator|->
name|setFilterRegExp
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|initial
argument_list|,
name|m_model
argument_list|)
expr_stmt|;
name|checkHierarchy
argument_list|(
name|expected
argument_list|,
name|m_proxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|buildHierarchy
name|void
name|tst_QSortFilterProxyModel
operator|::
name|buildHierarchy
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|,
name|QAbstractItemModel
modifier|*
name|m
parameter_list|)
block|{
name|int
name|ind
init|=
literal|0
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|QStack
argument_list|<
name|int
argument_list|>
name|row_stack
decl_stmt|;
name|QModelIndex
name|parent
decl_stmt|;
name|QStack
argument_list|<
name|QModelIndex
argument_list|>
name|parent_stack
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|token
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|"<"
condition|)
block|{
comment|// start table
operator|++
name|ind
expr_stmt|;
name|parent_stack
operator|.
name|push
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|row_stack
operator|.
name|push
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|parent
operator|=
name|m
operator|->
name|index
argument_list|(
name|row
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|->
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
comment|// add column
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|">"
condition|)
block|{
comment|// end table
operator|--
name|ind
expr_stmt|;
name|parent
operator|=
name|parent_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|row
operator|=
name|row_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// append row
name|QVERIFY
argument_list|(
name|m
operator|->
name|insertRows
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|index
init|=
name|m
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|token
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
operator|++
name|row
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|checkHierarchy
name|void
name|tst_QSortFilterProxyModel
operator|::
name|checkHierarchy
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|,
specifier|const
name|QAbstractItemModel
modifier|*
name|m
parameter_list|)
block|{
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|indent
init|=
literal|0
decl_stmt|;
name|QStack
argument_list|<
name|int
argument_list|>
name|row_stack
decl_stmt|;
name|QModelIndex
name|parent
decl_stmt|;
name|QStack
argument_list|<
name|QModelIndex
argument_list|>
name|parent_stack
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|token
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|"<"
condition|)
block|{
comment|// start table
operator|++
name|indent
expr_stmt|;
name|parent_stack
operator|.
name|push
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|row_stack
operator|.
name|push
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|parent
operator|=
name|m
operator|->
name|index
argument_list|(
name|row
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parent
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|==
literal|">"
condition|)
block|{
comment|// end table
operator|--
name|indent
expr_stmt|;
name|parent
operator|=
name|parent_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|row
operator|=
name|row_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// compare row
name|QModelIndex
name|index
init|=
name|m
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|m
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|token
argument_list|)
expr_stmt|;
operator|++
name|row
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|TestModel
class|class
name|TestModel
super|:
specifier|public
name|QAbstractTableModel
block|{
public|public:
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|10000
return|;
block|}
DECL|function|columnCount
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|1
return|;
block|}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
return|return
name|QString
operator|::
name|number
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|filterTable
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterTable
parameter_list|()
block|{
name|TestModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|filter
decl_stmt|;
name|filter
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|filter
operator|.
name|setFilterRegExp
argument_list|(
literal|"9"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filter
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|filter
operator|.
name|data
argument_list|(
name|filter
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertAfterSelect
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertAfterSelect
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|filter
decl_stmt|;
name|filter
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|filter
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QModelIndex
name|firstIndex
init|=
name|filter
operator|.
name|mapFromSource
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|firstIndex
operator|.
name|model
argument_list|()
argument_list|,
operator|(
specifier|const
name|QAbstractItemModel
operator|*
operator|)
name|view
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|firstIndex
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|itemOffset
init|=
name|view
operator|.
name|visualRect
argument_list|(
name|firstIndex
argument_list|)
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QPoint
name|p
argument_list|(
name|itemOffset
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Should still have a selection
block|}
end_function
begin_function
DECL|function|removeAfterSelect
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeAfterSelect
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|filter
decl_stmt|;
name|filter
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|filter
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QModelIndex
name|firstIndex
init|=
name|filter
operator|.
name|mapFromSource
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|firstIndex
operator|.
name|model
argument_list|()
argument_list|,
operator|(
specifier|const
name|QAbstractItemModel
operator|*
operator|)
name|view
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|firstIndex
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|itemOffset
init|=
name|view
operator|.
name|visualRect
argument_list|(
name|firstIndex
argument_list|)
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QPoint
name|p
argument_list|(
name|itemOffset
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeRows
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Should still have a selection
block|}
end_function
begin_function
DECL|function|filterCurrent
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterCurrent
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|QRegExp
argument_list|(
literal|"^B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeSourceLayout
name|void
name|tst_QSortFilterProxyModel
operator|::
name|changeSourceLayout
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentSourceIndexes
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|persistentProxyIndexes
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|persistentSourceIndexes
operator|.
name|append
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|persistentProxyIndexes
operator|.
name|append
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// change layout of source model
name|model
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
name|QCOMPARE
argument_list|(
name|persistentProxyIndexes
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|persistentSourceIndexes
operator|.
name|at
argument_list|(
name|row
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removeSourceRows_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeSourceRows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sourceItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"count"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"expectedRemovedProxyIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"expectedProxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one, no sorting"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
literal|0
comment|// start
operator|<<
literal|1
comment|// count
operator|<<
operator|-
literal|1
comment|// sortOrder (no sorting)
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
comment|// expectedProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one, ascending sort (same order)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
literal|0
comment|// start
operator|<<
literal|1
comment|// count
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|)
comment|// expectedProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove one, ascending sort (reverse order)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// sourceItems
operator|<<
literal|0
comment|// start
operator|<<
literal|1
comment|// count
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// expectedProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove two, multiple proxy intervals"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
literal|1
comment|// start
operator|<<
literal|2
comment|// count
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// expectedProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove three, multiple proxy intervals"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"f"
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"e"
operator|)
comment|// sourceItems
operator|<<
literal|3
comment|// start
operator|<<
literal|3
comment|// count
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"f"
operator|)
comment|// expectedProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remove all, single proxy intervals"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"f"
operator|)
comment|// sourceItems
operator|<<
literal|0
comment|// start
operator|<<
literal|6
comment|// count
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|)
comment|// expectedRemovedIntervals
operator|<<
name|QStringList
argument_list|()
comment|// expectedProxyItems
expr_stmt|;
block|}
end_function
begin_comment
comment|// Check that correct proxy model rows are removed when rows are removed
end_comment
begin_comment
comment|// from the source model
end_comment
begin_function
DECL|function|removeSourceRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeSourceRows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sourceItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|expectedRemovedProxyIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|expectedProxyItems
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|sindex
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|sindex
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|QModelIndex
name|pindex
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|pindex
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|,
name|model
operator|.
name|data
argument_list|(
name|sindex
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sortOrder
operator|!=
operator|-
literal|1
condition|)
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// force mapping
name|QSignalSpy
name|removeSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|insertSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|aboutToRemoveSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|aboutToInsertSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|removeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|insertSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|aboutToRemoveSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|aboutToInsertSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeRows
argument_list|(
name|start
argument_list|,
name|count
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|aboutToRemoveSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aboutToRemoveSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|aboutToRemoveSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|removeSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|removeSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|removeSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|expectedRemovedProxyIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|insertSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|aboutToInsertSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|expectedProxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedProxyItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|pindex
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|pindex
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedProxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertSourceRows_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertSourceRows_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sourceItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"start"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"newItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"proxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert (1)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
literal|1
comment|// start
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// newItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert (2)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// sourceItems
operator|<<
literal|3
comment|// start
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// newItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"d"
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// proxyItems
expr_stmt|;
block|}
end_function
begin_comment
comment|// Check that rows are inserted at correct position in proxy model when
end_comment
begin_comment
comment|// rows are inserted into the source model
end_comment
begin_function
DECL|function|insertSourceRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertSourceRows
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sourceItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|newItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|proxyItems
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// force mapping
name|model
operator|.
name|insertRows
argument_list|(
name|start
argument_list|,
name|newItems
operator|.
name|size
argument_list|()
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|proxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|newItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|start
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|newItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxyItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|proxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|changeFilter_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|changeFilter_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sourceItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"initialFilter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"initialRemoveIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialProxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"finalFilter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"finalRemoveIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"insertIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"finalProxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filter (1)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"f"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|b|c"
comment|// initialFilter
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|)
operator|)
comment|// initialRemoveIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// initialProxyItems
operator|<<
literal|"b|d|f"
comment|// finalFilter
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
comment|// finalRemoveIntervals
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|)
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"f"
operator|)
comment|// finalProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filter (2)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"f"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|c|e"
comment|// initialFilter
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
comment|// initialRemoveIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"e"
operator|)
comment|// initialProxyItems
operator|<<
literal|""
comment|// finalFilter
operator|<<
name|IntPairList
argument_list|()
comment|// finalRemoveIntervals
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|<<
name|IntPair
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|)
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|<<
literal|"e"
operator|<<
literal|"f"
operator|)
comment|// finalProxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filter (3)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a"
comment|// initialFilter
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
operator|)
comment|// initialRemoveIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// initialProxyItems
operator|<<
literal|"a"
comment|// finalFilter
operator|<<
name|IntPairList
argument_list|()
comment|// finalRemoveIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// finalProxyItems
expr_stmt|;
block|}
end_function
begin_comment
comment|// Check that rows are added/removed when filter changes
end_comment
begin_function
DECL|function|changeFilter
name|void
name|tst_QSortFilterProxyModel
operator|::
name|changeFilter
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sourceItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|initialFilter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|initialRemoveIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialProxyItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|finalFilter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|finalRemoveIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|insertIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|finalProxyItems
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// force mapping
name|QSignalSpy
name|initialRemoveSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|initialInsertSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|initialRemoveSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|initialInsertSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|initialFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|initialRemoveSpy
operator|.
name|count
argument_list|()
argument_list|,
name|initialRemoveIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|initialInsertSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialRemoveSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|initialRemoveSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|initialRemoveIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|initialRemoveIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initialProxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initialProxyItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initialProxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QSignalSpy
name|finalRemoveSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finalInsertSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|finalRemoveSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finalInsertSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|finalFilter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finalRemoveSpy
operator|.
name|count
argument_list|()
argument_list|,
name|finalRemoveIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalRemoveSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|finalRemoveSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|finalRemoveIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|finalRemoveIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_IRIX
name|QEXPECT_FAIL
argument_list|(
literal|"filter (2)"
argument_list|,
literal|"Not reliable on IRIX"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|finalInsertSpy
operator|.
name|count
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalInsertSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|finalInsertSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|finalProxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|finalProxyItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|finalProxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|changeSourceData_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|changeSourceData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sourceItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"dynamic"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"row"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"newValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"removeIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntPairList
argument_list|>
argument_list|(
literal|"insertIntervals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"proxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (1)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|true
comment|// dynamic
operator|<<
literal|2
comment|// row
operator|<<
literal|"z"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"z"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (2)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"z"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|true
comment|// dynamic
operator|<<
literal|1
comment|// row
operator|<<
literal|"a"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"z"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (3)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|true
comment|// dynamic
operator|<<
literal|0
comment|// row
operator|<<
literal|"a"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (4)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|c"
comment|// filter
operator|<<
literal|true
comment|// dynamic
operator|<<
literal|1
comment|// row
operator|<<
literal|"x"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (5)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|<<
literal|"d"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|c|x"
comment|// filter
operator|<<
literal|true
comment|// dynamic
operator|<<
literal|1
comment|// row
operator|<<
literal|"x"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
operator|(
name|IntPairList
argument_list|()
operator|<<
name|IntPair
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|)
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|<<
literal|"x"
operator|)
comment|// proxyItems
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"changeSourceData (6)"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|false
comment|// dynamic
operator|<<
literal|2
comment|// row
operator|<<
literal|"x"
comment|// newValue
operator|<<
name|IntPairList
argument_list|()
comment|// removeIntervals
operator|<<
name|IntPairList
argument_list|()
comment|// insertIntervals
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"x"
operator|<<
literal|"b"
operator|<<
literal|"c"
operator|)
comment|// proxyItems
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeSourceData
name|void
name|tst_QSortFilterProxyModel
operator|::
name|changeSourceData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sourceItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|dynamic
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|removeIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntPairList
argument_list|,
name|insertIntervals
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|proxyItems
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
name|dynamic
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// force mapping
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|QSignalSpy
name|removeSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|insertSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|removeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|insertSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|newValue
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|removeSpy
operator|.
name|count
argument_list|()
argument_list|,
name|removeIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|removeSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|removeSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|removeIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|removeIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|insertSpy
operator|.
name|count
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertSpy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|insertSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|insertIntervals
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|proxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxyItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|proxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sortFilterRole
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortFilterRole
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|QVariant
argument_list|>
argument_list|>
name|sourceItems
decl_stmt|;
name|sourceItems
operator|=
name|QList
argument_list|<
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|QVariant
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|QVariant
argument_list|>
argument_list|(
literal|"b"
argument_list|,
literal|3
argument_list|)
operator|<<
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|QVariant
argument_list|>
argument_list|(
literal|"c"
argument_list|,
literal|2
argument_list|)
operator|<<
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|QVariant
argument_list|>
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|orderedItems
decl_stmt|;
name|orderedItems
operator|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|first
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|second
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Qt::DisplayRole is default role
name|proxy
operator|.
name|setFilterRole
argument_list|(
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRole
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"1|2|3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRole
argument_list|(
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSortRole
argument_list|(
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRole
argument_list|(
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"a|c"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
name|orderedItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxy
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|orderedItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|first
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|selectionFilteredOut
name|void
name|tst_QSortFilterProxyModel
operator|::
name|selectionFilteredOut
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|view
operator|.
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|QRegExp
argument_list|(
literal|"^B"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|match_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|match_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"sourceItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"sortOrder"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"filter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyStartRow"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"what"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"matchFlags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"expectedProxyItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|0
comment|// proxyStartRow
operator|<<
literal|"a"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|)
expr_stmt|;
comment|// expectedProxyItems
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|0
comment|// proxyStartRow
operator|<<
literal|"b"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|)
expr_stmt|;
comment|// expectedProxyItems
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"a"
operator|<<
literal|"b"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|0
comment|// proxyStartRow
operator|<<
literal|"a"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|1
operator|)
expr_stmt|;
comment|// expectedProxyItems
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|""
comment|// filter
operator|<<
literal|1
comment|// proxyStartRow
operator|<<
literal|"a"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
name|IntList
argument_list|()
expr_stmt|;
comment|// expectedProxyItems
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|b"
comment|// filter
operator|<<
literal|0
comment|// proxyStartRow
operator|<<
literal|"c"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
name|IntList
argument_list|()
expr_stmt|;
comment|// expectedProxyItems
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"b"
operator|<<
literal|"d"
operator|<<
literal|"a"
operator|<<
literal|"c"
operator|)
comment|// sourceItems
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|DescendingOrder
argument_list|)
comment|// sortOrder
operator|<<
literal|"a|b"
comment|// filter
operator|<<
literal|0
comment|// proxyStartRow
operator|<<
literal|"b"
comment|// what
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
comment|// matchFlags
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|0
operator|)
expr_stmt|;
comment|// expectedProxyItems
block|}
end_function
begin_function
DECL|function|match
name|void
name|tst_QSortFilterProxyModel
operator|::
name|match
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|sourceItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|sortOrder
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|proxyStartRow
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|what
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|matchFlags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|expectedProxyItems
argument_list|)
expr_stmt|;
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
name|sourceItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|index
argument_list|,
name|sourceItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
cast|static_cast
argument_list|<
name|Qt
operator|::
name|SortOrder
argument_list|>
argument_list|(
name|sortOrder
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|QModelIndex
name|startIndex
init|=
name|proxy
operator|.
name|index
argument_list|(
name|proxyStartRow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QModelIndexList
name|indexes
init|=
name|proxy
operator|.
name|match
argument_list|(
name|startIndex
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|,
name|what
argument_list|,
name|expectedProxyItems
operator|.
name|count
argument_list|()
argument_list|,
name|Qt
operator|::
name|MatchFlags
argument_list|(
name|matchFlags
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|indexes
operator|.
name|count
argument_list|()
argument_list|,
name|expectedProxyItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|indexes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|,
name|expectedProxyItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertIntoChildrenlessItem
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertIntoChildrenlessItem
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QStandardItem
modifier|*
name|itemA
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemA
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemB
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemB
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemC
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QSignalSpy
name|colsInsertedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|rowsInsertedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|colsInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rowsInsertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// force mapping of "a", "b", "c"
name|QCOMPARE
argument_list|(
name|colsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// now add a child to itemB ==> should get insert notification from the proxy
name|itemB
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"a.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|colsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariantList
name|args
init|=
name|colsInsertedSpy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemB
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|args
operator|=
name|rowsInsertedSpy
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemB
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidateMappedChildren
name|void
name|tst_QSortFilterProxyModel
operator|::
name|invalidateMappedChildren
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemA
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemA
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemB
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemB
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemC
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|itemB
operator|->
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
name|itemC
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
comment|// force mappings
operator|(
name|void
operator|)
name|proxy
operator|.
name|hasChildren
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|hasChildren
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemA
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|hasChildren
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemB
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|proxy
operator|.
name|hasChildren
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemC
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|itemB
operator|->
name|removeRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// should invalidate mapping of itemC
name|itemC
operator|=
operator|new
name|QStandardItem
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
name|itemC
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|removeRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// should invalidate mapping of itemC
name|itemC
operator|=
operator|new
name|QStandardItem
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|itemB
operator|->
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
name|itemC
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemA
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemB
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|itemC
operator|->
name|index
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|EvenOddFilterModel
class|class
name|EvenOddFilterModel
super|:
specifier|public
name|QSortFilterProxyModel
block|{
public|public:
DECL|function|filterAcceptsRow
specifier|virtual
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
name|srcRow
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|srcParent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|srcParent
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|(
name|srcParent
operator|.
name|row
argument_list|()
operator|%
literal|2
operator|)
operator|^
operator|!
operator|(
name|srcRow
operator|%
literal|2
operator|)
return|;
return|return
operator|(
name|srcRow
operator|%
literal|2
operator|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|insertRowIntoFilteredParent
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertRowIntoFilteredParent
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|EvenOddFilterModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemA
init|=
operator|new
name|QStandardItem
argument_list|()
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemA
argument_list|)
expr_stmt|;
comment|// A will be filtered
name|QStandardItem
modifier|*
name|itemB
init|=
operator|new
name|QStandardItem
argument_list|()
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemB
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|removeRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterOutParentAndFilterInChild
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filterOutParentAndFilterInChild
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"A|B"
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemA
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemA
argument_list|)
expr_stmt|;
comment|// not filtered
name|QStandardItem
modifier|*
name|itemB
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemB
argument_list|)
expr_stmt|;
comment|// not filtered
name|QStandardItem
modifier|*
name|itemC
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
comment|// filtered
name|QSignalSpy
name|removedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|insertedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|removedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|insertedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
comment|// A and B will be filtered out, C filtered in
comment|// we should now have been notified that the subtree represented by itemA has been removed
name|QCOMPARE
argument_list|(
name|removedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// we should NOT get any inserts; itemC should be filtered because its parent (itemA) is
name|QCOMPARE
argument_list|(
name|insertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sourceInsertRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sourceInsertRows
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
block|{
name|QModelIndex
name|parent
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// if you got here without asserting, it's all good
block|}
end_function
begin_function
DECL|function|sourceModelDeletion
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sourceModelDeletion
parameter_list|()
block|{
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sourceModel
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
operator|&
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sourceModel
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortColumnTracking1
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortColumnTracking1
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|sort
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeColumn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortColumnTracking2
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortColumnTracking2
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
name|proxyModel
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|QStringList
name|strings
decl_stmt|;
name|strings
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"some"
operator|<<
literal|"others"
operator|<<
literal|"item"
operator|<<
literal|"aa"
operator|<<
literal|"zz"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|s
decl|,
name|strings
control|)
name|items
operator|<<
operator|new
name|QStandardItem
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumn
argument_list|(
literal|0
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|data
argument_list|(
name|proxyModel
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"aa"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|data
argument_list|(
name|proxyModel
operator|.
name|index
argument_list|(
name|strings
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"zz"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sortStable
name|void
name|tst_QSortFilterProxyModel
operator|::
name|sortStable
parameter_list|()
block|{
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|5
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|2
condition|;
name|c
operator|++
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Row:%0, Column:%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|r
argument_list|)
operator|.
name|arg
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Item %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|item
operator|->
name|appendRow
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|model
operator|->
name|setItem
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|model
operator|->
name|setHorizontalHeaderItem
argument_list|(
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"Name"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHorizontalHeaderItem
argument_list|(
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"Value"
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
modifier|*
name|filterModel
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|filterModel
operator|->
name|setSourceModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QTreeView
modifier|*
name|view
init|=
operator|new
name|QTreeView
decl_stmt|;
name|view
operator|->
name|setModel
argument_list|(
name|filterModel
argument_list|)
expr_stmt|;
name|QModelIndex
name|firstRoot
init|=
name|filterModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|view
operator|->
name|expand
argument_list|(
name|firstRoot
argument_list|)
expr_stmt|;
name|view
operator|->
name|setSortingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|view
operator|->
name|model
argument_list|()
operator|->
name|sort
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|QVariant
name|lastItemData
init|=
name|filterModel
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|firstRoot
argument_list|)
operator|.
name|data
argument_list|()
decl_stmt|;
name|view
operator|->
name|model
argument_list|()
operator|->
name|sort
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lastItemData
argument_list|,
name|filterModel
operator|->
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|firstRoot
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hiddenColumns
name|void
name|tst_QSortFilterProxyModel
operator|::
name|hiddenColumns
parameter_list|()
block|{
class|class
name|MyStandardItemModel
super|:
specifier|public
name|QStandardItemModel
block|{
public|public:
name|MyStandardItemModel
parameter_list|()
member_init_list|:
name|QStandardItemModel
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
block|{}
name|void
name|reset
parameter_list|()
block|{
name|QStandardItemModel
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
friend|friend
class_decl|class
name|tst_QSortFilterProxyModel
class_decl|;
block|}
name|model
class|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTableView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|view
operator|.
name|hideColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|view
operator|.
name|isColumnHidden
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|model
operator|.
name|setRowCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// In the initial bug report that spawned this test, this would be false
comment|// because resetting model would also reset the hidden columns.
name|QVERIFY
argument_list|(
name|view
operator|.
name|isColumnHidden
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRowsSort
name|void
name|tst_QSortFilterProxyModel
operator|::
name|insertRowsSort
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|model
operator|.
name|removeColumns
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|sortColumn
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|staticSorting
name|void
name|tst_QSortFilterProxyModel
operator|::
name|staticSorting
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QStringList
name|initial
init|=
name|QString
argument_list|(
literal|"bateau avion dragon hirondelle flamme camion elephant"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// prepare model
name|QStandardItem
modifier|*
name|root
init|=
name|model
operator|.
name|invisibleRootItem
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|initial
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|items
operator|.
name|append
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|initial
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|root
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the proxy is unsorted
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QStringList
name|expected
init|=
name|initial
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|// make sure the proxy is sorted
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//update one item.
name|items
operator|.
name|first
argument_list|()
operator|->
name|setData
argument_list|(
literal|"girafe"
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
expr_stmt|;
comment|// make sure the proxy is updated but not sorted
name|expected
operator|.
name|replaceInStrings
argument_list|(
literal|"bateau"
argument_list|,
literal|"girafe"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// sort again
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|// make sure the proxy is sorted
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dynamicSorting
name|void
name|tst_QSortFilterProxyModel
operator|::
name|dynamicSorting
parameter_list|()
block|{
name|QStringListModel
name|model1
decl_stmt|;
specifier|const
name|QStringList
name|initial
init|=
name|QString
argument_list|(
literal|"bateau avion dragon hirondelle flamme camion elephant"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|model1
operator|.
name|setStringList
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy1
decl_stmt|;
name|proxy1
operator|.
name|setDynamicSortFilter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|columnCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//the model should not be sorted because sorting has not been set to dynamic yet.
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|initial
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy1
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy1
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|initial
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxy1
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//now the model should be sorted.
name|QStringList
name|expected
init|=
name|initial
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy1
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy1
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|initial2
init|=
name|initial
decl_stmt|;
name|initial2
operator|.
name|replaceInStrings
argument_list|(
literal|"bateau"
argument_list|,
literal|"girafe"
argument_list|)
expr_stmt|;
name|model1
operator|.
name|setStringList
argument_list|(
name|initial2
argument_list|)
expr_stmt|;
comment|//this will cause a reset
name|QStringList
name|expected2
init|=
name|initial2
decl_stmt|;
name|expected2
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|//now the model should still be sorted.
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy1
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy1
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected2
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringListModel
name|model2
argument_list|(
name|initial
argument_list|)
decl_stmt|;
name|proxy1
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model2
argument_list|)
expr_stmt|;
comment|//the model should again be sorted
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy1
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy1
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy1
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//set up the sorting before seting the model up
name|QSortFilterProxyModel
name|proxy2
decl_stmt|;
name|proxy2
operator|.
name|sort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy2
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy2
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy2
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|QtTestModel
class|class
name|QtTestModel
super|:
specifier|public
name|QAbstractItemModel
block|{
public|public:
DECL|function|QtTestModel
name|QtTestModel
parameter_list|(
name|int
name|_rows
parameter_list|,
name|int
name|_cols
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|rows
argument_list|(
name|_rows
argument_list|)
member_init_list|,
name|cols
argument_list|(
name|_cols
argument_list|)
member_init_list|,
name|wrongIndex
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|function|canFetchMore
name|bool
name|canFetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
specifier|const
block|{
return|return
operator|!
name|fetched
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
return|;
block|}
DECL|function|fetchMore
name|void
name|fetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|)
block|{
if|if
condition|(
name|fetched
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
return|return;
name|beginInsertRows
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fetched
operator|.
name|insert
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
block|}
DECL|function|hasChildren
name|bool
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
return|return
literal|true
return|;
block|}
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
return|return
name|fetched
operator|.
name|contains
argument_list|(
name|parent
argument_list|)
condition|?
name|rows
else|:
literal|0
return|;
block|}
DECL|function|columnCount
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|cols
return|;
block|}
DECL|function|index
name|QModelIndex
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|column
operator|<
literal|0
operator|||
name|column
operator|>=
name|cols
operator|||
name|row
operator|>=
name|rows
condition|)
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
name|QModelIndex
name|i
init|=
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|int
argument_list|(
name|parent
operator|.
name|internalId
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|parentHash
index|[
name|i
index|]
operator|=
name|parent
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|function|parent
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|parentHash
operator|.
name|contains
argument_list|(
name|index
argument_list|)
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|parentHash
index|[
name|index
index|]
return|;
block|}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|idx
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|idx
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
block|{
if|if
condition|(
name|idx
operator|.
name|row
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|.
name|column
argument_list|()
operator|<
literal|0
operator|||
name|idx
operator|.
name|column
argument_list|()
operator|>=
name|cols
operator|||
name|idx
operator|.
name|row
argument_list|()
operator|>=
name|rows
condition|)
block|{
name|wrongIndex
operator|=
literal|true
expr_stmt|;
name|qWarning
argument_list|(
literal|"Invalid modelIndex [%d,%d,%p]"
argument_list|,
name|idx
operator|.
name|row
argument_list|()
argument_list|,
name|idx
operator|.
name|column
argument_list|()
argument_list|,
name|idx
operator|.
name|internalPointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|QString
argument_list|(
literal|"[%1,%2]"
argument_list|)
operator|.
name|arg
argument_list|(
name|idx
operator|.
name|row
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|idx
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
DECL|member|fetched
name|QSet
argument_list|<
name|QModelIndex
argument_list|>
name|fetched
decl_stmt|;
DECL|member|rows
DECL|member|cols
name|int
name|rows
decl_stmt|,
name|cols
decl_stmt|;
DECL|member|wrongIndex
specifier|mutable
name|bool
name|wrongIndex
decl_stmt|;
DECL|member|parentHash
specifier|mutable
name|QMap
argument_list|<
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|>
name|parentHash
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|fetchMore
name|void
name|tst_QSortFilterProxyModel
operator|::
name|fetchMore
parameter_list|()
block|{
name|QtTestModel
name|model
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|canFetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasChildren
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|proxy
operator|.
name|canFetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|)
name|proxy
operator|.
name|fetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QModelIndex
name|idx
init|=
name|proxy
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|canFetchMore
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasChildren
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|proxy
operator|.
name|canFetchMore
argument_list|(
name|idx
argument_list|)
condition|)
name|proxy
operator|.
name|fetchMore
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|idx
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|columnCount
argument_list|(
name|idx
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hiddenChildren
name|void
name|tst_QSortFilterProxyModel
operator|::
name|hiddenChildren
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemA
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"A VISIBLE"
argument_list|)
decl_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|itemA
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemB
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"B VISIBLE"
argument_list|)
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemB
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|itemC
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|itemA
operator|->
name|appendRow
argument_list|(
name|itemC
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"VISIBLE"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|indexA
init|=
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|indexA
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A VISIBLE"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|indexA
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPersistentModelIndex
name|indexB
init|=
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|indexA
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|indexB
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"B VISIBLE"
argument_list|)
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|setText
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|indexA
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|indexB
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|itemB
operator|->
name|setText
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|setText
argument_list|(
literal|"A VISIBLE"
argument_list|)
expr_stmt|;
name|itemC
operator|->
name|setText
argument_list|(
literal|"C VISIBLE"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|indexA
operator|=
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|indexA
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A VISIBLE"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|indexA
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QModelIndex
name|indexC
init|=
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|indexA
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|indexC
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"C VISIBLE"
argument_list|)
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"C"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|itemC
operator|->
name|setText
argument_list|(
literal|"invisible"
argument_list|)
expr_stmt|;
name|itemA
operator|->
name|setText
argument_list|(
literal|"AC"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|indexA
operator|=
name|proxy
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|indexA
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"AC"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|(
name|indexA
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapFromToSource
name|void
name|tst_QSortFilterProxyModel
operator|::
name|mapFromToSource
parameter_list|()
block|{
name|QtTestModel
name|source
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|source
operator|.
name|fetchMore
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|source
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|source
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|proxy
operator|.
name|index
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapToSource
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|source
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapToSource
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_DEBUG
comment|//if Qt is compiled in debug mode, this will assert
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSortFilterProxyModel: index from wrong model passed to mapToSource "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapToSource
argument_list|(
name|source
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSortFilterProxyModel: index from wrong model passed to mapFromSource "
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addEntry
specifier|static
name|QStandardItem
modifier|*
name|addEntry
parameter_list|(
name|QStandardItem
modifier|*
name|pParent
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
block|{
name|QStandardItem
modifier|*
name|pItem
init|=
operator|new
name|QStandardItem
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|pParent
operator|->
name|appendRow
argument_list|(
name|pItem
argument_list|)
expr_stmt|;
return|return
name|pItem
return|;
block|}
end_function
begin_function
DECL|function|removeRowsRecursive
name|void
name|tst_QSortFilterProxyModel
operator|::
name|removeRowsRecursive
parameter_list|()
block|{
name|QStandardItemModel
name|pModel
decl_stmt|;
name|QStandardItem
modifier|*
name|pItem1
init|=
operator|new
name|QStandardItem
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|pModel
operator|.
name|appendRow
argument_list|(
name|pItem1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|items
decl_stmt|;
name|QStandardItem
modifier|*
name|pItem11
init|=
name|addEntry
argument_list|(
name|pItem1
argument_list|,
literal|"Sub-heading"
argument_list|)
decl_stmt|;
name|items
operator|<<
name|pItem11
expr_stmt|;
name|QStandardItem
modifier|*
name|pItem111
init|=
name|addEntry
argument_list|(
name|pItem11
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|items
operator|<<
name|pItem111
expr_stmt|;
name|items
operator|<<
name|addEntry
argument_list|(
name|pItem111
argument_list|,
literal|"A1"
argument_list|)
expr_stmt|;
name|items
operator|<<
name|addEntry
argument_list|(
name|pItem111
argument_list|,
literal|"A2"
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|pItem112
init|=
name|addEntry
argument_list|(
name|pItem11
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|items
operator|<<
name|pItem112
expr_stmt|;
name|items
operator|<<
name|addEntry
argument_list|(
name|pItem112
argument_list|,
literal|"B1"
argument_list|)
expr_stmt|;
name|items
operator|<<
name|addEntry
argument_list|(
name|pItem112
argument_list|,
literal|"B2"
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|pItem1123
init|=
name|addEntry
argument_list|(
name|pItem112
argument_list|,
literal|"B3"
argument_list|)
decl_stmt|;
name|items
operator|<<
name|pItem1123
expr_stmt|;
name|items
operator|<<
name|addEntry
argument_list|(
name|pItem1123
argument_list|,
literal|"B3-"
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|pModel
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|sourceIndexes
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|proxyIndexes
decl_stmt|;
foreach|foreach
control|(
name|QStandardItem
modifier|*
name|item
decl|,
name|items
control|)
block|{
name|QModelIndex
name|idx
init|=
name|item
operator|->
name|index
argument_list|()
decl_stmt|;
name|sourceIndexes
operator|<<
name|idx
expr_stmt|;
name|proxyIndexes
operator|<<
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|pidx
decl|,
name|sourceIndexes
control|)
name|QVERIFY
argument_list|(
name|pidx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|pidx
decl|,
name|proxyIndexes
control|)
name|QVERIFY
argument_list|(
name|pidx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QStandardItem
modifier|*
argument_list|>
name|itemRow
init|=
name|pItem1
operator|->
name|takeRow
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|itemRow
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|itemRow
operator|.
name|first
argument_list|()
argument_list|,
name|pItem11
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|pidx
decl|,
name|sourceIndexes
control|)
name|QVERIFY
argument_list|(
operator|!
name|pidx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|pidx
decl|,
name|proxyIndexes
control|)
name|QVERIFY
argument_list|(
operator|!
name|pidx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|pItem11
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doubleProxySelectionSetSourceModel
name|void
name|tst_QSortFilterProxyModel
operator|::
name|doubleProxySelectionSetSourceModel
parameter_list|()
block|{
name|QStandardItemModel
modifier|*
name|model1
init|=
operator|new
name|QStandardItemModel
decl_stmt|;
name|QStandardItem
modifier|*
name|parentItem
init|=
name|model1
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"model1 item %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|parentItem
operator|->
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|parentItem
operator|=
name|item
expr_stmt|;
block|}
name|QStandardItemModel
modifier|*
name|model2
init|=
operator|new
name|QStandardItemModel
decl_stmt|;
name|QStandardItem
modifier|*
name|parentItem2
init|=
name|model2
operator|->
name|invisibleRootItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"model2 item %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|parentItem2
operator|->
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|parentItem2
operator|=
name|item
expr_stmt|;
block|}
name|QSortFilterProxyModel
modifier|*
name|toggleProxy
init|=
operator|new
name|QSortFilterProxyModel
decl_stmt|;
name|toggleProxy
operator|->
name|setSourceModel
argument_list|(
name|model1
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
modifier|*
name|proxyModel
init|=
operator|new
name|QSortFilterProxyModel
decl_stmt|;
name|proxyModel
operator|->
name|setSourceModel
argument_list|(
name|toggleProxy
argument_list|)
expr_stmt|;
name|QModelIndex
name|mi
init|=
name|proxyModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|proxyModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|proxyModel
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QItemSelectionModel
name|ism
argument_list|(
name|proxyModel
argument_list|)
decl_stmt|;
name|ism
operator|.
name|select
argument_list|(
name|mi
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
name|QModelIndexList
name|mil
init|=
name|ism
operator|.
name|selectedIndexes
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mil
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mil
operator|.
name|first
argument_list|()
argument_list|,
name|mi
argument_list|)
expr_stmt|;
name|toggleProxy
operator|->
name|setSourceModel
argument_list|(
name|model2
argument_list|)
expr_stmt|;
comment|// No crash, it's good news!
name|QVERIFY
argument_list|(
name|ism
operator|.
name|selection
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appearsAndSort
name|void
name|tst_QSortFilterProxyModel
operator|::
name|appearsAndSort
parameter_list|()
block|{
class|class
name|PModel
super|:
specifier|public
name|QSortFilterProxyModel
block|{
public|public:
name|PModel
parameter_list|()
member_init_list|:
name|mVisible
argument_list|(
literal|false
argument_list|)
block|{}
empty_stmt|;
protected|protected:
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|mVisible
return|;
block|}
public|public:
name|void
name|updateXX
parameter_list|()
block|{
name|mVisible
operator|=
literal|true
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
private|private:
name|bool
name|mVisible
decl_stmt|;
block|}
name|proxyModel
class|;
name|QStringListModel
name|sourceModel
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"b"
operator|<<
literal|"a"
operator|<<
literal|"c"
expr_stmt|;
name|sourceModel
operator|.
name|setStringList
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|sourceModel
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sourceModel
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//all rows are hidden at first;
name|QSignalSpy
name|spyAbout1
argument_list|(
operator|&
name|proxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyChanged1
argument_list|(
operator|&
name|proxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spyAbout1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spyChanged1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|//introducing secondProxyModel to test the layoutChange when many items appears at once
name|QSortFilterProxyModel
name|secondProxyModel
decl_stmt|;
name|secondProxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxyModel
argument_list|)
expr_stmt|;
name|secondProxyModel
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|secondProxyModel
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|DescendingOrder
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondProxyModel
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//all rows are hidden at first;
name|QSignalSpy
name|spyAbout2
argument_list|(
operator|&
name|secondProxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyChanged2
argument_list|(
operator|&
name|secondProxyModel
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spyAbout2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spyChanged2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|proxyModel
operator|.
name|updateXX
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
comment|//now rows should be visible, and sorted
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|data
argument_list|(
name|proxyModel
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|data
argument_list|(
name|proxyModel
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyModel
operator|.
name|data
argument_list|(
name|proxyModel
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|//now rows should be visible, and sorted
name|QCOMPARE
argument_list|(
name|secondProxyModel
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondProxyModel
operator|.
name|data
argument_list|(
name|secondProxyModel
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondProxyModel
operator|.
name|data
argument_list|(
name|secondProxyModel
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|secondProxyModel
operator|.
name|data
argument_list|(
name|secondProxyModel
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyAbout1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyChanged1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyAbout2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyChanged2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unnecessaryDynamicSorting
name|void
name|tst_QSortFilterProxyModel
operator|::
name|unnecessaryDynamicSorting
parameter_list|()
block|{
name|QStringListModel
name|model
decl_stmt|;
specifier|const
name|QStringList
name|initial
init|=
name|QString
argument_list|(
literal|"bravo charlie delta echo"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|model
operator|.
name|setStringList
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sort
argument_list|(
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
comment|//append two rows
name|int
name|maxrows
init|=
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|.
name|insertRows
argument_list|(
name|maxrows
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|maxrows
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setData
argument_list|(
name|model
operator|.
name|index
argument_list|(
name|maxrows
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"fondue"
argument_list|)
argument_list|)
expr_stmt|;
comment|//append new items to the initial string list and compare with model
name|QStringList
name|expected
init|=
name|initial
decl_stmt|;
name|expected
operator|<<
name|QString
argument_list|(
literal|"alpha"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"fondue"
argument_list|)
expr_stmt|;
comment|//if bug 7716 is present, new rows were prepended, when they should have been appended
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|proxy
operator|.
name|rowCount
argument_list|(
name|QModelIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|proxy
operator|.
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|QModelIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|DisplayRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|SelectionProxyModel
class|class
name|SelectionProxyModel
super|:
name|QAbstractProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|SelectionProxyModel
name|SelectionProxyModel
parameter_list|()
member_init_list|:
name|QAbstractProxyModel
argument_list|()
member_init_list|,
name|selectionModel
argument_list|(
literal|0
argument_list|)
block|{     }
DECL|function|mapFromSource
name|QModelIndex
name|mapFromSource
parameter_list|(
name|QModelIndex
specifier|const
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|mapToSource
name|QModelIndex
name|mapToSource
parameter_list|(
name|QModelIndex
specifier|const
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|index
name|QModelIndex
name|index
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|parent
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|columnCount
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|setSourceModel
name|void
name|setSourceModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|sourceModel
parameter_list|)
block|{
name|beginResetModel
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|sourceModel
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sourceModelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QAbstractProxyModel
operator|::
name|setSourceModel
argument_list|(
name|sourceModel
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|sourceModel
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sourceModelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
block|}
DECL|function|setSelectionModel
name|void
name|setSelectionModel
parameter_list|(
name|QItemSelectionModel
modifier|*
name|_selectionModel
parameter_list|)
block|{
name|selectionModel
operator|=
name|_selectionModel
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|sourceModelAboutToBeReset
name|void
name|sourceModelAboutToBeReset
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|selectionModel
operator|->
name|selectedIndexes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
block|}
DECL|function|sourceModelReset
name|void
name|sourceModelReset
parameter_list|()
block|{
name|endResetModel
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|selectionModel
name|QItemSelectionModel
modifier|*
name|selectionModel
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testMultipleProxiesWithSelection
name|void
name|tst_QSortFilterProxyModel
operator|::
name|testMultipleProxiesWithSelection
parameter_list|()
block|{
name|QStringListModel
name|model
decl_stmt|;
specifier|const
name|QStringList
name|initial
init|=
name|QString
argument_list|(
literal|"bravo charlie delta echo"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|model
operator|.
name|setStringList
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|SelectionProxyModel
name|proxy1
decl_stmt|;
name|QSortFilterProxyModel
name|proxy2
decl_stmt|;
comment|// Note that the order here matters. The order of the sourceAboutToBeReset
comment|// exposes the bug in QSortFilterProxyModel.
name|proxy2
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|proxy1
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|QItemSelectionModel
name|selectionModel
argument_list|(
operator|&
name|proxy2
argument_list|)
decl_stmt|;
name|proxy1
operator|.
name|setSelectionModel
argument_list|(
operator|&
name|selectionModel
argument_list|)
expr_stmt|;
name|selectionModel
operator|.
name|select
argument_list|(
name|proxy2
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QItemSelectionModel
operator|::
name|Select
argument_list|)
expr_stmt|;
comment|// trick the proxy into emitting begin/end reset signals.
name|proxy
operator|.
name|setSourceModel
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValid
specifier|static
name|bool
name|isValid
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QItemSelectionRange
modifier|&
name|range
decl|,
name|selection
control|)
if|if
condition|(
operator|!
name|range
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|mapSelectionFromSource
name|void
name|tst_QSortFilterProxyModel
operator|::
name|mapSelectionFromSource
parameter_list|()
block|{
name|QStringListModel
name|model
decl_stmt|;
specifier|const
name|QStringList
name|initial
init|=
name|QString
argument_list|(
literal|"bravo charlie delta echo"
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|model
operator|.
name|setStringList
argument_list|(
name|initial
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"d.*"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
comment|// Only "delta" remains.
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QItemSelection
name|selection
decl_stmt|;
name|QModelIndex
name|charlie
init|=
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|charlie
argument_list|,
name|charlie
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|delta
init|=
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|delta
argument_list|,
name|delta
argument_list|)
argument_list|)
expr_stmt|;
name|QModelIndex
name|echo
init|=
name|model
operator|.
name|index
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|selection
operator|.
name|append
argument_list|(
name|QItemSelectionRange
argument_list|(
name|echo
argument_list|,
name|echo
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isValid
argument_list|(
name|selection
argument_list|)
argument_list|)
expr_stmt|;
name|QItemSelection
name|proxiedSelection
init|=
name|proxy
operator|.
name|mapSelectionFromSource
argument_list|(
name|selection
argument_list|)
decl_stmt|;
comment|// Only "delta" is in the mapped result.
name|QVERIFY
argument_list|(
name|proxiedSelection
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|isValid
argument_list|(
name|proxiedSelection
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Model10287
class|class
name|Model10287
super|:
specifier|public
name|QStandardItemModel
block|{
name|Q_OBJECT
public|public:
DECL|function|Model10287
name|Model10287
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStandardItemModel
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|parent
argument_list|)
block|{
name|parentItem
operator|=
operator|new
name|QStandardItem
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|parentItem
operator|->
name|setData
argument_list|(
literal|false
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|appendRow
argument_list|(
name|parentItem
argument_list|)
expr_stmt|;
name|childItem
operator|=
operator|new
name|QStandardItem
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|childItem
operator|->
name|setData
argument_list|(
literal|true
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|parentItem
operator|->
name|appendRow
argument_list|(
name|childItem
argument_list|)
expr_stmt|;
name|childItem2
operator|=
operator|new
name|QStandardItem
argument_list|(
literal|"child2"
argument_list|)
expr_stmt|;
name|childItem2
operator|->
name|setData
argument_list|(
literal|true
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|parentItem
operator|->
name|appendRow
argument_list|(
name|childItem2
argument_list|)
expr_stmt|;
block|}
DECL|function|removeChild
name|void
name|removeChild
parameter_list|()
block|{
name|childItem2
operator|->
name|setData
argument_list|(
literal|false
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
name|parentItem
operator|->
name|removeRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|parentItem
DECL|member|childItem
DECL|member|childItem2
name|QStandardItem
modifier|*
name|parentItem
decl_stmt|,
modifier|*
name|childItem
decl_stmt|,
modifier|*
name|childItem2
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|Proxy10287
class|class
name|Proxy10287
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|Proxy10287
name|Proxy10287
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
block|{
name|setSourceModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|filterAcceptsRow
specifier|virtual
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
name|source_row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
comment|// Filter based on UserRole in model
name|QModelIndex
name|i
init|=
name|sourceModel
argument_list|()
operator|->
name|index
argument_list|(
name|source_row
argument_list|,
literal|0
argument_list|,
name|source_parent
argument_list|)
decl_stmt|;
return|return
name|i
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|UserRole
argument_list|)
operator|.
name|toBool
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|unnecessaryMapCreation
name|void
name|tst_QSortFilterProxyModel
operator|::
name|unnecessaryMapCreation
parameter_list|()
block|{
name|Model10287
name|m
decl_stmt|;
name|Proxy10287
name|p
argument_list|(
operator|&
name|m
argument_list|)
decl_stmt|;
name|m
operator|.
name|removeChild
argument_list|()
expr_stmt|;
comment|// No assert failure, it passes.
block|}
end_function
begin_class
DECL|class|FilteredColumnProxyModel
class|class
name|FilteredColumnProxyModel
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|FilteredColumnProxyModel
name|FilteredColumnProxyModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
block|{     }
protected|protected:
DECL|function|filterAcceptsColumn
name|bool
name|filterAcceptsColumn
parameter_list|(
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
comment|/* source_parent */
parameter_list|)
specifier|const
block|{
return|return
name|column
operator|%
literal|2
operator|!=
literal|0
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|filteredColumns
name|void
name|tst_QSortFilterProxyModel
operator|::
name|filteredColumns
parameter_list|()
block|{
name|DynamicTreeModel
modifier|*
name|model
init|=
operator|new
name|DynamicTreeModel
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|FilteredColumnProxyModel
modifier|*
name|proxy
init|=
operator|new
name|FilteredColumnProxyModel
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|proxy
operator|->
name|setSourceModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
operator|new
name|ModelTest
argument_list|(
name|proxy
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ModelInsertCommand
modifier|*
name|insertCommand
init|=
operator|new
name|ModelInsertCommand
argument_list|(
name|model
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|insertCommand
operator|->
name|setNumCols
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|->
name|setEndRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Parent is QModelIndex()
name|insertCommand
operator|->
name|doCommand
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ChangableHeaderData
class|class
name|ChangableHeaderData
super|:
specifier|public
name|QStringListModel
block|{
name|Q_OBJECT
public|public:
DECL|function|ChangableHeaderData
specifier|explicit
name|ChangableHeaderData
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|parent
argument_list|)
block|{      }
DECL|function|emitHeaderDataChanged
name|void
name|emitHeaderDataChanged
parameter_list|()
block|{
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
literal|0
argument_list|,
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|headerDataChanged
name|void
name|tst_QSortFilterProxyModel
operator|::
name|headerDataChanged
parameter_list|()
block|{
name|ChangableHeaderData
modifier|*
name|model
init|=
operator|new
name|ChangableHeaderData
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStringList
name|numbers
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|numbers
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setStringList
argument_list|(
name|numbers
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
modifier|*
name|proxy
init|=
operator|new
name|QSortFilterProxyModel
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|proxy
operator|->
name|setSourceModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
operator|new
name|ModelTest
argument_list|(
name|proxy
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|model
operator|->
name|emitHeaderDataChanged
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetInvalidate_data
name|void
name|tst_QSortFilterProxyModel
operator|::
name|resetInvalidate_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"works"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nothing"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"reset"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidate"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalidate_filter"
argument_list|)
operator|<<
literal|3
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetInvalidate
name|void
name|tst_QSortFilterProxyModel
operator|::
name|resetInvalidate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|works
argument_list|)
expr_stmt|;
struct|struct
name|Proxy
super|:
name|QSortFilterProxyModel
block|{
name|QString
name|pattern
decl_stmt|;
specifier|virtual
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
name|source_row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|sourceModel
argument_list|()
operator|->
name|index
argument_list|(
name|source_row
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
return|;
block|}
name|void
name|notifyChange
parameter_list|(
name|int
name|test
parameter_list|)
block|{
switch|switch
condition|(
name|test
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|reset
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|invalidate
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|invalidateFilter
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
struct|;
name|QStringListModel
name|sourceModel
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Poisson"
operator|<<
literal|"Vache"
operator|<<
literal|"Brebis"
operator|<<
literal|"Elephant"
operator|<<
literal|"Cochon"
operator|<<
literal|"Serpent"
operator|<<
literal|"Mouton"
operator|<<
literal|"Ecureuil"
operator|<<
literal|"Mouche"
argument_list|)
decl_stmt|;
name|Proxy
name|proxy
decl_stmt|;
name|proxy
operator|.
name|pattern
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|sourceModel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxy
operator|.
name|rowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|data
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|'n'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|pattern
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"o"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|notifyChange
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
name|works
condition|?
literal|4
else|:
literal|5
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxy
operator|.
name|rowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|proxy
operator|.
name|data
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|'o'
argument_list|)
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|works
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/**  * A proxy which changes the background color for items ending in 'y' or 'r'  */
end_comment
begin_class
DECL|class|CustomDataProxy
class|class
name|CustomDataProxy
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomDataProxy
name|CustomDataProxy
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
block|{
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|function|setSourceModel
name|void
name|setSourceModel
parameter_list|(
name|QAbstractItemModel
modifier|*
name|sourceModel
parameter_list|)
block|{
comment|// It would be possible to use only the modelReset signal of the source model to clear
comment|// the data in *this, however, this requires that the slot is connected
comment|// before QSortFilterProxyModel::setSourceModel is called, and even then depends
comment|// on the order of invocation of slots being the same as the order of connection.
comment|// ie, not reliable.
comment|//         connect(sourceModel, SIGNAL(modelReset()), SLOT(resetInternalData()));
name|QSortFilterProxyModel
operator|::
name|setSourceModel
argument_list|(
name|sourceModel
argument_list|)
expr_stmt|;
comment|// Making the connect after the setSourceModel call clears the data too late.
comment|//         connect(sourceModel, SIGNAL(modelReset()), SLOT(resetInternalData()));
comment|// This could be done in data(), but the point is to need to cache something in the proxy
comment|// which needs to be cleared on reset.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sourceModel
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|sourceModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
argument_list|)
condition|)
block|{
name|m_backgroundColours
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sourceModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'r'
argument_list|)
argument_list|)
condition|)
block|{
name|m_backgroundColours
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|BackgroundRole
condition|)
return|return
name|QSortFilterProxyModel
operator|::
name|data
argument_list|(
name|index
argument_list|,
name|role
argument_list|)
return|;
return|return
name|m_backgroundColours
operator|.
name|value
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
block|}
private|private
name|slots
private|:
DECL|function|resetInternalData
name|void
name|resetInternalData
parameter_list|()
block|{
name|m_backgroundColours
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_backgroundColours
name|QHash
argument_list|<
name|int
argument_list|,
name|QColor
argument_list|>
name|m_backgroundColours
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ModelObserver
class|class
name|ModelObserver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ModelObserver
name|ModelObserver
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_model
argument_list|(
name|model
argument_list|)
block|{
name|connect
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|modelAboutToBeReset
name|void
name|modelAboutToBeReset
parameter_list|()
block|{
name|int
name|reds
init|=
literal|0
decl_stmt|,
name|blues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QColor
name|color
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|blue
condition|)
operator|++
name|blues
expr_stmt|;
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|red
condition|)
operator|++
name|reds
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|blues
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reds
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|function|modelReset
name|void
name|modelReset
parameter_list|()
block|{
name|int
name|reds
init|=
literal|0
decl_stmt|,
name|blues
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_model
operator|->
name|rowCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QColor
name|color
init|=
name|m_model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
operator|.
name|data
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|)
operator|.
name|value
argument_list|<
name|QColor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|blue
condition|)
operator|++
name|blues
expr_stmt|;
if|if
condition|(
name|color
operator|==
name|Qt
operator|::
name|red
condition|)
operator|++
name|reds
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|reds
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|blues
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_model
name|QAbstractItemModel
modifier|*
specifier|const
name|m_model
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testResetInternalData
name|void
name|tst_QSortFilterProxyModel
operator|::
name|testResetInternalData
parameter_list|()
block|{
name|QStringListModel
name|model
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Monday"
operator|<<
literal|"Tuesday"
operator|<<
literal|"Wednesday"
operator|<<
literal|"Thursday"
operator|<<
literal|"Friday"
operator|<<
literal|"January"
operator|<<
literal|"February"
operator|<<
literal|"March"
operator|<<
literal|"April"
operator|<<
literal|"May"
operator|<<
literal|"Saturday"
operator|<<
literal|"June"
operator|<<
literal|"Sunday"
operator|<<
literal|"July"
operator|<<
literal|"August"
operator|<<
literal|"September"
operator|<<
literal|"October"
operator|<<
literal|"November"
operator|<<
literal|"December"
argument_list|)
decl_stmt|;
name|CustomDataProxy
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|ModelObserver
name|observer
argument_list|(
operator|&
name|proxy
argument_list|)
decl_stmt|;
comment|// Cause the source model to reset.
name|model
operator|.
name|setStringList
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Spam"
operator|<<
literal|"Eggs"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testParentLayoutChanged
name|void
name|tst_QSortFilterProxyModel
operator|::
name|testParentLayoutChanged
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
name|QStandardItem
modifier|*
name|parentItem
init|=
name|model
operator|.
name|invisibleRootItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"item %0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|parentItem
operator|->
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"item 1%0"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|parentItem
operator|->
name|appendRow
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|parentItem
operator|=
name|item
expr_stmt|;
block|}
block|}
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setObjectName
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
comment|// When Proxy1 emits layoutChanged(QList<QPersistentModelIndex>) this
comment|// one will too, with mapped indexes.
name|QSortFilterProxyModel
name|proxy2
decl_stmt|;
name|proxy2
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setObjectName
argument_list|(
literal|"proxy2"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|dataChangedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dataChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the no-arg signal is still emitted.
name|QSignalSpy
name|layoutAboutToBeChangedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|layoutChangedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|layoutAboutToBeChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|layoutChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|parentsAboutToBeChangedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|parentsChangedSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|parentsAboutToBeChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentsChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|proxy2ParentsAboutToBeChangedSpy
argument_list|(
operator|&
name|proxy2
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxy2ParentsChangedSpy
argument_list|(
operator|&
name|proxy2
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|proxy2ParentsAboutToBeChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy2ParentsChangedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QStandardItem
modifier|*
name|item
init|=
name|model
operator|.
name|invisibleRootItem
argument_list|()
operator|->
name|child
argument_list|(
literal|1
argument_list|)
operator|->
name|child
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Ensure mapped:
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|model
operator|.
name|indexFromItem
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
literal|"Changed"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dataChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutAboutToBeChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|layoutChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parentsAboutToBeChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parentsChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy2ParentsAboutToBeChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy2ParentsChangedSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVariantList
name|beforeSignal
init|=
name|parentsAboutToBeChangedSpy
operator|.
name|first
argument_list|()
decl_stmt|;
name|QVariantList
name|afterSignal
init|=
name|parentsChangedSpy
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterSignal
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|beforeParents
init|=
name|beforeSignal
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|afterParents
init|=
name|afterSignal
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|beforeParents
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|afterParents
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|first
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|first
argument_list|()
operator|==
name|afterParents
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|first
argument_list|()
operator|==
name|proxy
operator|.
name|mapFromSource
argument_list|(
name|model
operator|.
name|indexFromItem
argument_list|(
name|model
operator|.
name|invisibleRootItem
argument_list|()
operator|->
name|child
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|proxy2BeforeList
init|=
name|proxy2ParentsAboutToBeChangedSpy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|proxy2AfterList
init|=
name|proxy2ParentsChangedSpy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|proxy2BeforeList
operator|.
name|size
argument_list|()
argument_list|,
name|beforeParents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy2AfterList
operator|.
name|size
argument_list|()
argument_list|,
name|afterParents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|idx
decl|,
name|proxy2BeforeList
control|)
name|QVERIFY
argument_list|(
name|beforeParents
operator|.
name|contains
argument_list|(
name|proxy2
operator|.
name|mapToSource
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QPersistentModelIndex
modifier|&
name|idx
decl|,
name|proxy2AfterList
control|)
name|QVERIFY
argument_list|(
name|afterParents
operator|.
name|contains
argument_list|(
name|proxy2
operator|.
name|mapToSource
argument_list|(
name|idx
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalArgumentChecker
class|class
name|SignalArgumentChecker
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalArgumentChecker
name|SignalArgumentChecker
parameter_list|(
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
name|QAbstractProxyModel
modifier|*
name|proxy
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_model
argument_list|(
name|model
argument_list|)
member_init_list|,
name|m_proxy
argument_list|(
name|proxy
argument_list|)
block|{
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|rowsAboutToBeMoved
name|void
name|rowsAboutToBeMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destination
parameter_list|,
name|int
parameter_list|)
block|{
name|m_p1PersistentBefore
operator|=
name|source
expr_stmt|;
name|m_p2PersistentBefore
operator|=
name|destination
expr_stmt|;
name|m_p2FirstProxyChild
operator|=
name|m_proxy
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_proxy
operator|->
name|mapFromSource
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|rowsMoved
name|void
name|rowsMoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|source
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|destination
parameter_list|,
name|int
parameter_list|)
block|{
name|m_p1PersistentAfter
operator|=
name|source
expr_stmt|;
name|m_p2PersistentAfter
operator|=
name|destination
expr_stmt|;
block|}
DECL|function|layoutAboutToBeChanged
name|void
name|layoutAboutToBeChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|parents
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|m_p1PersistentBefore
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m_p2PersistentBefore
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|first
argument_list|()
operator|!=
name|parents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_proxy
operator|->
name|mapFromSource
argument_list|(
name|m_p1PersistentBefore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_proxy
operator|->
name|mapFromSource
argument_list|(
name|m_p2PersistentBefore
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|layoutChanged
name|void
name|layoutChanged
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
modifier|&
name|parents
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|m_p1PersistentAfter
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m_p2PersistentAfter
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parents
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|first
argument_list|()
operator|!=
name|parents
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_proxy
operator|->
name|mapFromSource
argument_list|(
name|m_p1PersistentAfter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parents
operator|.
name|contains
argument_list|(
name|m_proxy
operator|->
name|mapFromSource
argument_list|(
name|m_p2PersistentAfter
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// In the source model, the rows were moved to row 1 in the parent.
comment|// m_p2FirstProxyChild was created with row 0 in the proxy.
comment|// The moved rows in the proxy do not appear at row 1 because of sorting.
comment|// Sorting causes them to appear at row 0 instead, pushing what used to
comment|// be row 0 in the proxy down by two rows.
name|QCOMPARE
argument_list|(
name|m_p2FirstProxyChild
operator|.
name|row
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_model
name|QAbstractItemModel
modifier|*
name|m_model
decl_stmt|;
DECL|member|m_proxy
name|QAbstractProxyModel
modifier|*
name|m_proxy
decl_stmt|;
DECL|member|m_p1PersistentBefore
name|QPersistentModelIndex
name|m_p1PersistentBefore
decl_stmt|;
DECL|member|m_p2PersistentBefore
name|QPersistentModelIndex
name|m_p2PersistentBefore
decl_stmt|;
DECL|member|m_p1PersistentAfter
name|QPersistentModelIndex
name|m_p1PersistentAfter
decl_stmt|;
DECL|member|m_p2PersistentAfter
name|QPersistentModelIndex
name|m_p2PersistentAfter
decl_stmt|;
DECL|member|m_p2FirstProxyChild
name|QPersistentModelIndex
name|m_p2FirstProxyChild
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|moveSourceRows
name|void
name|tst_QSortFilterProxyModel
operator|::
name|moveSourceRows
parameter_list|()
block|{
name|DynamicTreeModel
name|model
decl_stmt|;
block|{
name|ModelInsertCommand
name|insertCommand
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|insertCommand
operator|.
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|doCommand
argument_list|()
expr_stmt|;
block|}
block|{
name|ModelInsertCommand
name|insertCommand
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|insertCommand
operator|.
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|doCommand
argument_list|()
expr_stmt|;
block|}
block|{
name|ModelInsertCommand
name|insertCommand
argument_list|(
operator|&
name|model
argument_list|)
decl_stmt|;
name|insertCommand
operator|.
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|setStartRow
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|setEndRow
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|insertCommand
operator|.
name|doCommand
argument_list|()
expr_stmt|;
block|}
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
comment|// We need to check the arguments at emission time
name|SignalArgumentChecker
name|checker
argument_list|(
operator|&
name|model
argument_list|,
operator|&
name|proxy
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|filterProxy
decl_stmt|;
name|filterProxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|filterProxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"6"
argument_list|)
expr_stmt|;
comment|// One of the parents
name|QSortFilterProxyModel
name|filterBothProxy
decl_stmt|;
name|filterBothProxy
operator|.
name|setDynamicSortFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|filterBothProxy
operator|.
name|sort
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|AscendingOrder
argument_list|)
expr_stmt|;
name|filterBothProxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|filterBothProxy
operator|.
name|setFilterRegExp
argument_list|(
literal|"5"
argument_list|)
expr_stmt|;
comment|// The parents are 6 and 3. This filters both out.
name|QSignalSpy
name|modelBeforeSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelAfterSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyBeforeMoveSpy
argument_list|(
name|m_proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyAfterMoveSpy
argument_list|(
name|m_proxy
argument_list|,
name|SIGNAL
argument_list|(
name|rowsMoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|QModelIndex
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyBeforeParentLayoutSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyAfterParentLayoutSpy
argument_list|(
operator|&
name|proxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|filterBeforeParentLayoutSpy
argument_list|(
operator|&
name|filterProxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|filterAfterParentLayoutSpy
argument_list|(
operator|&
name|filterProxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|filterBothBeforeParentLayoutSpy
argument_list|(
operator|&
name|filterBothProxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutAboutToBeChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|filterBothAfterParentLayoutSpy
argument_list|(
operator|&
name|filterBothProxy
argument_list|,
name|SIGNAL
argument_list|(
name|layoutChanged
argument_list|(
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|modelBeforeSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|modelAfterSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyBeforeMoveSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAfterMoveSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyBeforeParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAfterParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterBeforeParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterAfterParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterBothBeforeParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|filterBothAfterParentLayoutSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|ModelMoveCommand
name|moveCommand
argument_list|(
operator|&
name|model
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|moveCommand
operator|.
name|setAncestorRowNumbers
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
argument_list|)
expr_stmt|;
name|moveCommand
operator|.
name|setDestAncestors
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|5
argument_list|)
expr_stmt|;
name|moveCommand
operator|.
name|setStartRow
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|moveCommand
operator|.
name|setEndRow
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|moveCommand
operator|.
name|setDestRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|moveCommand
operator|.
name|doCommand
argument_list|()
expr_stmt|;
block|}
comment|// Proxy notifies layout change
name|QCOMPARE
argument_list|(
name|modelBeforeSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyBeforeParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelAfterSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyAfterParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// But it doesn't notify a move.
name|QCOMPARE
argument_list|(
name|proxyBeforeMoveSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyAfterMoveSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterBeforeParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterAfterParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|filterBeforeParents
init|=
name|filterBeforeParentLayoutSpy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
name|filterAfterParents
init|=
name|filterAfterParentLayoutSpy
operator|.
name|first
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|<
name|QList
argument_list|<
name|QPersistentModelIndex
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|filterBeforeParents
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterAfterParents
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterBothBeforeParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|filterBothAfterParentLayoutSpy
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FilterProxy
class|class
name|FilterProxy
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|FilterProxy
name|FilterProxy
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|mode
argument_list|(
literal|false
argument_list|)
block|{      }
public|public
name|slots
public|:
DECL|function|setMode
name|void
name|setMode
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|mode
operator|=
name|on
expr_stmt|;
name|invalidateFilter
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|filterAcceptsRow
specifier|virtual
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
name|source_row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|mode
condition|)
block|{
if|if
condition|(
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|(
name|source_row
operator|%
literal|2
operator|)
operator|!=
literal|0
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|source_row
operator|>=
literal|2
operator|&&
name|source_row
operator|<
literal|10
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
private|private:
DECL|member|mode
name|bool
name|mode
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|hierarchyFilterInvalidation
name|void
name|tst_QSortFilterProxyModel
operator|::
name|hierarchyFilterInvalidation
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Row %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1
condition|;
operator|++
name|j
control|)
block|{
name|child
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Row %1/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|appendRow
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|FilterProxy
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|view
operator|.
name|setCurrentIndex
argument_list|(
name|proxy
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
operator|.
name|child
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|view
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FilterProxy2
class|class
name|FilterProxy2
super|:
specifier|public
name|QSortFilterProxyModel
block|{
name|Q_OBJECT
public|public:
DECL|function|FilterProxy2
name|FilterProxy2
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|mode
argument_list|(
literal|false
argument_list|)
block|{      }
public|public
name|slots
public|:
DECL|function|setMode
name|void
name|setMode
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|mode
operator|=
name|on
expr_stmt|;
name|invalidateFilter
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|filterAcceptsRow
specifier|virtual
name|bool
name|filterAcceptsRow
parameter_list|(
name|int
name|source_row
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|source_parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|source_parent
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
literal|0
operator|==
name|source_row
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|!
name|mode
return|;
block|}
block|}
block|}
private|private:
DECL|member|mode
name|bool
name|mode
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|simpleFilterInvalidation
name|void
name|tst_QSortFilterProxyModel
operator|::
name|simpleFilterInvalidation
parameter_list|()
block|{
name|QStandardItemModel
name|model
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QStandardItem
modifier|*
name|child
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Row %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|child
operator|->
name|appendRow
argument_list|(
operator|new
name|QStandardItem
argument_list|(
literal|"child"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|appendRow
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
name|FilterProxy2
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTreeView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|view
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|model
operator|.
name|insertRow
argument_list|(
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"extra"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CustomRoleNameModel
class|class
name|CustomRoleNameModel
super|:
specifier|public
name|QAbstractListModel
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomRoleNameModel
name|CustomRoleNameModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QAbstractListModel
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|role
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
init|=
name|QModelIndex
argument_list|()
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|function|roleNames
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|roleNames
parameter_list|()
specifier|const
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|QByteArray
argument_list|>
name|rn
init|=
name|QAbstractListModel
operator|::
name|roleNames
argument_list|()
decl_stmt|;
name|rn
index|[
name|Qt
operator|::
name|UserRole
operator|+
literal|1
index|]
operator|=
literal|"custom"
expr_stmt|;
return|return
name|rn
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|chainedProxyModelRoleNames
name|void
name|tst_QSortFilterProxyModel
operator|::
name|chainedProxyModelRoleNames
parameter_list|()
block|{
name|QSortFilterProxyModel
name|proxy1
decl_stmt|;
name|QSortFilterProxyModel
name|proxy2
decl_stmt|;
name|CustomRoleNameModel
name|customModel
decl_stmt|;
name|proxy2
operator|.
name|setSourceModel
argument_list|(
operator|&
name|proxy1
argument_list|)
expr_stmt|;
comment|// changing the sourceModel of proxy1 must also update roleNames of proxy2
name|proxy1
operator|.
name|setSourceModel
argument_list|(
operator|&
name|customModel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy2
operator|.
name|roleNames
argument_list|()
operator|.
name|value
argument_list|(
name|Qt
operator|::
name|UserRole
operator|+
literal|1
argument_list|)
operator|==
literal|"custom"
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSortFilterProxyModel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsortfilterproxymodel.moc"
end_include
end_unit
