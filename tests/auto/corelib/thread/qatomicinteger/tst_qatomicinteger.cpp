begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_ATOMIC_FORCE_CXX11
end_ifdef
begin_comment
comment|// We need to check if this compiler has C++11 atomics and constexpr support.
end_comment
begin_comment
comment|// We can't rely on qcompilerdetection.h because it forces all of qglobal.h to
end_comment
begin_comment
comment|// be included, which causes qbasicatomic.h to be included too.
end_comment
begin_comment
comment|// Incomplete, but ok
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__INTEL_COMPILER
argument_list|)
operator|&&
name|__INTEL_COMPILER
operator|>=
literal|1500
operator|&&
operator|(
name|__cplusplus
operator|>=
literal|201103L
operator|||
name|defined
argument_list|(
name|__INTEL_CXX11_MODE__
argument_list|)
operator|)
end_if
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__clang__
argument_list|)
operator|&&
operator|(
name|__cplusplus
operator|>=
literal|201103L
operator|||
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
operator|)
end_elif
begin_if
if|#
directive|if
operator|!
name|__has_feature
argument_list|(
name|cxx_constexpr
argument_list|)
operator|||
operator|!
name|__has_feature
argument_list|(
name|cxx_atomic
argument_list|)
operator|||
operator|!
name|__has_include
argument_list|(
operator|<
name|atomic
operator|>
argument_list|)
end_if
begin_undef
DECL|macro|QT_ATOMIC_FORCE_CXX11
undef|#
directive|undef
name|QT_ATOMIC_FORCE_CXX11
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|*
literal|100
operator|+
name|__GNUC_MINOR__
operator|)
operator|>=
literal|407
operator|&&
operator|(
name|__cplusplus
operator|>=
literal|201103L
operator|||
name|defined
argument_list|(
name|__GXX_EXPERIMENTAL_CXX0X__
argument_list|)
operator|)
end_elif
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1900
end_elif
begin_comment
comment|// We need MSVC 2015 because of: atomics (2012), constexpr (2015), and unrestricted unions (2015).
end_comment
begin_comment
comment|// Support for constexpr is not working completely on MSVC 2015 but it's enough for the test.
end_comment
begin_else
else|#
directive|else
end_else
begin_undef
DECL|macro|QT_ATOMIC_FORCE_CXX11
undef|#
directive|undef
name|QT_ATOMIC_FORCE_CXX11
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_ATOMIC_FORCE_CXX11
end_ifndef
begin_undef
DECL|macro|QATOMIC_TEST_TYPE
undef|#
directive|undef
name|QATOMIC_TEST_TYPE
end_undef
begin_define
DECL|macro|QATOMIC_TEST_TYPE
define|#
directive|define
name|QATOMIC_TEST_TYPE
value|unsupported
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest>
end_include
begin_include
include|#
directive|include
file|<QAtomicInt>
end_include
begin_include
include|#
directive|include
file|<limits>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<wchar.h>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_ATOMIC_INT32_IS_SUPPORTED
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"QAtomicInteger for 32-bit types must be supported!"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|QT_POINTER_SIZE
operator|==
literal|8
operator|&&
operator|!
name|defined
argument_list|(
name|Q_ATOMIC_INT64_IS_SUPPORTED
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"QAtomicInteger for 64-bit types must be supported on 64-bit builds!"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// always supported types:
end_comment
begin_define
DECL|macro|TYPE_SUPPORTED_int
define|#
directive|define
name|TYPE_SUPPORTED_int
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_uint
define|#
directive|define
name|TYPE_SUPPORTED_uint
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_long
define|#
directive|define
name|TYPE_SUPPORTED_long
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_ulong
define|#
directive|define
name|TYPE_SUPPORTED_ulong
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_qptrdiff
define|#
directive|define
name|TYPE_SUPPORTED_qptrdiff
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_quintptr
define|#
directive|define
name|TYPE_SUPPORTED_quintptr
value|1
end_define
begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__SIZEOF_WCHAR_T__
argument_list|)
operator|&&
operator|(
name|__SIZEOF_WCHAR_T__
operator|-
literal|0
operator|)
operator|>
literal|2
operator|)
expr|\
operator|||
operator|(
name|defined
argument_list|(
name|WCHAR_MAX
argument_list|)
operator|&&
operator|(
name|WCHAR_MAX
operator|-
literal|0
operator|>
literal|0x10000
operator|)
operator|)
end_if
begin_define
DECL|macro|TYPE_SUPPORTED_wchar_t
define|#
directive|define
name|TYPE_SUPPORTED_wchar_t
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_UNICODE_STRINGS
end_ifdef
begin_define
DECL|macro|TYPE_SUPPORTED_char32_t
define|#
directive|define
name|TYPE_SUPPORTED_char32_t
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_ATOMIC_INT8_IS_SUPPORTED
end_ifdef
begin_define
DECL|macro|TYPE_SUPPORTED_char
define|#
directive|define
name|TYPE_SUPPORTED_char
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_uchar
define|#
directive|define
name|TYPE_SUPPORTED_uchar
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_schar
define|#
directive|define
name|TYPE_SUPPORTED_schar
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_ATOMIC_INT16_IS_SUPPORTED
end_ifdef
begin_define
DECL|macro|TYPE_SUPPORTED_short
define|#
directive|define
name|TYPE_SUPPORTED_short
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_ushort
define|#
directive|define
name|TYPE_SUPPORTED_ushort
value|1
end_define
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_UNICODE_STRINGS
end_ifdef
begin_define
DECL|macro|TYPE_SUPPORTED_char16_t
define|#
directive|define
name|TYPE_SUPPORTED_char16_t
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|TYPE_SUPPORTED_wchar_t
end_ifndef
begin_define
DECL|macro|TYPE_SUPPORTED_wchar_t
define|#
directive|define
name|TYPE_SUPPORTED_wchar_t
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_ATOMIC_INT64_IS_SUPPORTED
end_ifdef
begin_define
DECL|macro|TYPE_SUPPORTED_qlonglong
define|#
directive|define
name|TYPE_SUPPORTED_qlonglong
value|1
end_define
begin_define
DECL|macro|TYPE_SUPPORTED_qulonglong
define|#
directive|define
name|TYPE_SUPPORTED_qulonglong
value|1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_MOC_RUN
end_ifdef
begin_define
DECL|macro|QATOMIC_TYPE_SUPPORTED
define|#
directive|define
name|QATOMIC_TYPE_SUPPORTED
parameter_list|(
name|type
parameter_list|)
value|1
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|QATOMIC_TYPE_SUPPORTED2
define|#
directive|define
name|QATOMIC_TYPE_SUPPORTED2
parameter_list|(
name|type
parameter_list|)
value|TYPE_SUPPORTED_ ## type
end_define
begin_define
DECL|macro|QATOMIC_TYPE_SUPPORTED
define|#
directive|define
name|QATOMIC_TYPE_SUPPORTED
parameter_list|(
name|type
parameter_list|)
value|QATOMIC_TYPE_SUPPORTED2(type)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_MOC_RUN
end_comment
begin_if
if|#
directive|if
name|QATOMIC_TYPE_SUPPORTED
argument_list|(
name|QATOMIC_TEST_TYPE
argument_list|)
end_if
begin_define
DECL|macro|TEST_TYPE
define|#
directive|define
name|TEST_TYPE
value|QATOMIC_TEST_TYPE
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|TEST_TYPE
define|#
directive|define
name|TEST_TYPE
value|int
end_define
begin_define
DECL|macro|QATOMIC_TEST_NOT_SUPPORTED
define|#
directive|define
name|QATOMIC_TEST_NOT_SUPPORTED
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_WARNING_DISABLE_GCC
argument_list|(
literal|"-Wtype-limits"
argument_list|)
end_macro
begin_macro
name|QT_WARNING_DISABLE_GCC
argument_list|(
literal|"-Wsign-compare"
argument_list|)
end_macro
begin_macro
name|QT_WARNING_DISABLE_CLANG
argument_list|(
literal|"-Wtautological-constant-out-of-range-compare"
argument_list|)
end_macro
begin_typedef
DECL|typedef|schar
typedef|typedef
name|signed
name|char
name|schar
typedef|;
end_typedef
begin_typedef
DECL|typedef|Type
typedef|typedef
name|TEST_TYPE
name|Type
typedef|;
end_typedef
begin_typedef
DECL|typedef|T
typedef|typedef
name|Type
name|T
typedef|;
end_typedef
begin_comment
DECL|typedef|T
comment|// shorthand
end_comment
begin_enum
enum|enum
block|{
DECL|enumerator|TypeIsUnsigned
name|TypeIsUnsigned
init|=
name|Type
argument_list|(
operator|-
literal|1
argument_list|)
operator|>
name|Type
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumerator|TypeIsSigned
name|TypeIsSigned
init|=
operator|!
name|TypeIsUnsigned
block|}
enum|;
end_enum
begin_struct_decl
template|template
parameter_list|<
name|bool
parameter_list|>
struct_decl|struct
name|LargeIntTemplate
struct_decl|;
end_struct_decl
begin_struct
DECL|struct|LargeIntTemplate
DECL|typedef|Type
template|template
parameter_list|<>
struct|struct
name|LargeIntTemplate
argument_list|<
literal|true
argument_list|>
block|{
typedef|typedef
name|quint64
name|Type
typedef|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|LargeIntTemplate
DECL|typedef|Type
template|template
parameter_list|<>
struct|struct
name|LargeIntTemplate
argument_list|<
literal|false
argument_list|>
block|{
typedef|typedef
name|qint64
name|Type
typedef|;
block|}
struct|;
end_struct
begin_typedef
DECL|typedef|LargeInt
typedef|typedef
name|LargeIntTemplate
argument_list|<
name|TypeIsUnsigned
argument_list|>
operator|::
name|Type
name|LargeInt
typedef|;
end_typedef
begin_class
DECL|class|tst_QAtomicIntegerXX
class|class
name|tst_QAtomicIntegerXX
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|void
name|addData
parameter_list|()
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|static_checks
parameter_list|()
function_decl|;
DECL|function|constructor_data
name|void
name|constructor_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|constructor
parameter_list|()
function_decl|;
DECL|function|copy_data
name|void
name|copy_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|copy
parameter_list|()
function_decl|;
DECL|function|assign_data
name|void
name|assign_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|assign
parameter_list|()
function_decl|;
DECL|function|operatorInteger_data
name|void
name|operatorInteger_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|operatorInteger
parameter_list|()
function_decl|;
DECL|function|loadAcquireStoreRelease_data
name|void
name|loadAcquireStoreRelease_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|loadAcquireStoreRelease
parameter_list|()
function_decl|;
DECL|function|refDeref_data
name|void
name|refDeref_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|refDeref
parameter_list|()
function_decl|;
DECL|function|testAndSet_data
name|void
name|testAndSet_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|testAndSet
parameter_list|()
function_decl|;
DECL|function|testAndSet3_data
name|void
name|testAndSet3_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|testAndSet3
parameter_list|()
function_decl|;
DECL|function|fetchAndStore_data
name|void
name|fetchAndStore_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndStore
parameter_list|()
function_decl|;
DECL|function|fetchAndAdd_data
name|void
name|fetchAndAdd_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndAdd
parameter_list|()
function_decl|;
DECL|function|fetchAndSub_data
name|void
name|fetchAndSub_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndSub
parameter_list|()
function_decl|;
DECL|function|fetchAndOr_data
name|void
name|fetchAndOr_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndOr
parameter_list|()
function_decl|;
DECL|function|fetchAndAnd_data
name|void
name|fetchAndAnd_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndAnd
parameter_list|()
function_decl|;
DECL|function|fetchAndXor_data
name|void
name|fetchAndXor_data
parameter_list|()
block|{
name|addData
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchAndXor
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|booleanHelper
template|template
parameter_list|<
name|bool
parameter_list|>
specifier|inline
name|void
name|booleanHelper
parameter_list|()
block|{ }
end_function
begin_struct
DECL|struct|TypeInStruct
DECL|member|type
struct|struct
name|TypeInStruct
block|{
name|TEST_TYPE
name|type
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|static_checks
name|void
name|tst_QAtomicIntegerXX
operator|::
name|static_checks
parameter_list|()
block|{
name|Q_STATIC_ASSERT
argument_list|(
sizeof|sizeof
argument_list|(
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|Q_STATIC_ASSERT
argument_list|(
name|Q_ALIGNOF
argument_list|(
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
argument_list|)
operator|==
name|Q_ALIGNOF
argument_list|(
name|TypeInStruct
argument_list|)
argument_list|)
expr_stmt|;
comment|// statements with no effect
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isReferenceCountingNative
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isReferenceCountingWaitFree
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_COMPILER_CONSTEXPR
comment|// this is a compile-time test only
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isReferenceCountingNative
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isReferenceCountingWaitFree
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isTestAndSetNative
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isTestAndSetWaitFree
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndStoreNative
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndStoreWaitFree
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndAddNative
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
name|booleanHelper
argument_list|<
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
operator|::
name|isFetchAndAddWaitFree
operator|(
operator|)
argument_list|>
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|addData
name|void
name|tst_QAtomicIntegerXX
operator|::
name|addData
parameter_list|()
block|{
typedef|typedef
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
name|Limits
typedef|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|LargeInt
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"+1"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"42"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
literal|42
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-47"
argument_list|)
operator|<<
name|qint64
argument_list|(
operator|-
literal|47
argument_list|)
expr_stmt|;
block|}
comment|// exercise bits
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
name|qint64
argument_list|(
name|SCHAR_MIN
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int8_min"
argument_list|)
operator|<<
name|qint64
argument_list|(
name|SCHAR_MIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|SCHAR_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int8_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|SCHAR_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|UCHAR_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint8_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|UCHAR_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
operator|-
name|qint64
argument_list|(
name|UCHAR_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-uint8_max"
argument_list|)
operator|<<
operator|-
name|qint64
argument_list|(
name|UCHAR_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|SHRT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int16_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|SHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
name|qint64
argument_list|(
name|SHRT_MIN
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int16_min"
argument_list|)
operator|<<
name|qint64
argument_list|(
name|SHRT_MIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|USHRT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint16_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
operator|-
name|qint64
argument_list|(
name|USHRT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-uint16_max"
argument_list|)
operator|<<
operator|-
name|qint64
argument_list|(
name|USHRT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|INT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int32_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
name|qint64
argument_list|(
name|INT_MIN
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int32_min"
argument_list|)
operator|<<
name|qint64
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|UINT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint32_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|UINT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|Limits
operator|::
name|max
argument_list|()
operator|>
name|LargeInt
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|qint64
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int64_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|std
operator|::
name|numeric_limits
argument_list|<
name|qint64
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
operator|&&
name|Limits
operator|::
name|min
argument_list|()
operator|<
operator|-
name|qint64
argument_list|(
name|UINT_MAX
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-uint32_max"
argument_list|)
operator|<<
operator|-
name|qint64
argument_list|(
name|UINT_MAX
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeIsSigned
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
name|QT_STRINGIFY
argument_list|(
name|QATOMIC_TEST_TYPE
argument_list|)
literal|"_min"
argument_list|)
operator|<<
name|qint64
argument_list|(
name|Limits
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QT_STRINGIFY
argument_list|(
name|QATOMIC_TEST_TYPE
argument_list|)
literal|"_max"
argument_list|)
operator|<<
name|LargeInt
argument_list|(
name|Limits
operator|::
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QAtomicIntegerXX
operator|::
name|initTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QATOMIC_TEST_NOT_SUPPORTED
name|QSKIP
argument_list|(
literal|"QAtomicInteger<"
name|QT_STRINGIFY
argument_list|(
name|QATOMIC_TEST_TYPE
argument_list|)
literal|"> is not supported on this platform"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QAtomicIntegerXX
operator|::
name|constructor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic2
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
operator|>=
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
operator|<=
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy
name|void
name|tst_QAtomicIntegerXX
operator|::
name|copy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy
argument_list|(
name|atomic
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy2
init|=
name|atomic
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
comment|// move
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy3
argument_list|(
name|qMove
argument_list|(
name|copy
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy3
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy4
init|=
name|qMove
argument_list|(
name|copy2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy4
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assign
name|void
name|tst_QAtomicIntegerXX
operator|::
name|assign
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy
decl_stmt|;
name|copy
operator|=
name|atomic
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy2
decl_stmt|;
name|copy2
operator|=
name|atomic
expr_stmt|;
comment|// operator=(const QAtomicInteger&)
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy2bis
decl_stmt|;
name|copy2bis
operator|=
name|atomic
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// operator=(T)
name|QCOMPARE
argument_list|(
name|copy2bis
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
comment|// move
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy3
decl_stmt|;
name|copy3
operator|=
name|qMove
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy3
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|copy4
decl_stmt|;
name|copy4
operator|=
name|qMove
argument_list|(
name|copy2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy4
operator|.
name|load
argument_list|()
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operatorInteger
name|void
name|tst_QAtomicIntegerXX
operator|::
name|operatorInteger
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|val2
init|=
name|atomic
decl_stmt|;
name|QCOMPARE
argument_list|(
name|val2
argument_list|,
name|atomic
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val2
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadAcquireStoreRelease
name|void
name|tst_QAtomicIntegerXX
operator|::
name|loadAcquireStoreRelease
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|storeRelease
argument_list|(
operator|~
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|storeRelease
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refDeref
name|void
name|tst_QAtomicIntegerXX
operator|::
name|refDeref
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
specifier|const
name|bool
name|needToPreventOverflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|==
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|max
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|needToPreventUnderflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|==
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|min
argument_list|()
decl_stmt|;
name|T
name|nextValue
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
operator|++
name|nextValue
expr_stmt|;
name|T
name|prevValue
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
operator|--
name|prevValue
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|ref
argument_list|()
argument_list|,
operator|(
name|nextValue
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|nextValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|deref
argument_list|()
argument_list|,
operator|(
name|value
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|deref
argument_list|()
argument_list|,
operator|(
name|prevValue
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|prevValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|ref
argument_list|()
argument_list|,
operator|(
name|value
operator|!=
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|++
name|atomic
argument_list|,
name|nextValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|--
name|atomic
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
operator|--
name|atomic
argument_list|,
name|prevValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|++
name|atomic
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|++
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|--
argument_list|,
name|nextValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|--
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|++
argument_list|,
name|prevValue
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testAndSet
name|void
name|tst_QAtomicIntegerXX
operator|::
name|testAndSet
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|T
name|newValue
init|=
name|~
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testAndSet3
name|void
name|tst_QAtomicIntegerXX
operator|::
name|testAndSet3
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|T
name|newValue
init|=
name|~
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|oldValue
decl_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|value
argument_list|,
name|newValue
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|newValue
argument_list|,
name|value
argument_list|,
name|oldValue
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndStore
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndStore
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|T
name|newValue
init|=
name|~
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|value
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|value
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelease
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelease
argument_list|(
name|value
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|value
argument_list|)
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndAdd
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndAdd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|parcel1
init|=
literal|42
decl_stmt|;
name|T
name|parcel2
init|=
name|T
argument_list|(
literal|0
operator|-
name|parcel1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|needToPreventOverflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|>
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|max
argument_list|()
operator|+
name|parcel2
decl_stmt|;
specifier|const
name|bool
name|needToPreventUnderflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|<
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|min
argument_list|()
operator|+
name|parcel1
decl_stmt|;
name|T
name|newValue1
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
name|newValue1
operator|+=
name|parcel1
expr_stmt|;
name|T
name|newValue2
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
name|newValue2
operator|+=
name|parcel2
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddAcquire
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddAcquire
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddAcquire
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddAcquire
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelease
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelease
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelease
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddRelease
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddOrdered
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddOrdered
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddOrdered
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAddOrdered
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// operator+=
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|+=
name|parcel1
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|+=
name|parcel2
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|+=
name|parcel2
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|+=
name|parcel1
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fetchAndSub
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndSub
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|parcel1
init|=
literal|42
decl_stmt|;
name|T
name|parcel2
init|=
name|T
argument_list|(
literal|0
operator|-
name|parcel1
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|needToPreventOverflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|>
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|max
argument_list|()
operator|-
name|parcel1
decl_stmt|;
specifier|const
name|bool
name|needToPreventUnderflow
init|=
name|TypeIsSigned
operator|&&
name|value
operator|<
name|std
operator|::
name|numeric_limits
argument_list|<
name|T
argument_list|>
operator|::
name|min
argument_list|()
operator|-
name|parcel2
decl_stmt|;
name|T
name|newValue1
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
name|newValue1
operator|-=
name|parcel1
expr_stmt|;
name|T
name|newValue2
init|=
name|T
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
name|newValue2
operator|-=
name|parcel2
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelaxed
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelaxed
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelaxed
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelaxed
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubAcquire
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubAcquire
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubAcquire
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubAcquire
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelease
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelease
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelease
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubRelease
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubOrdered
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubOrdered
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubOrdered
argument_list|(
name|parcel2
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndSubOrdered
argument_list|(
name|parcel1
argument_list|)
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|loadAcquire
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// operator-=
if|if
condition|(
operator|!
name|needToPreventUnderflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|-=
name|parcel1
argument_list|,
name|newValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|-=
name|parcel2
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needToPreventOverflow
condition|)
block|{
name|QCOMPARE
argument_list|(
name|atomic
operator|-=
name|parcel2
argument_list|,
name|newValue2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|-=
name|parcel1
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fetchAndOr
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndOr
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|zero
init|=
literal|0
decl_stmt|;
name|T
name|one
init|=
literal|1
decl_stmt|;
name|T
name|minusOne
init|=
name|T
argument_list|(
operator|~
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelaxed
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelaxed
argument_list|(
name|one
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelaxed
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrAcquire
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrAcquire
argument_list|(
name|one
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrAcquire
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelease
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelease
argument_list|(
name|one
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrRelease
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrOrdered
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrOrdered
argument_list|(
name|one
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndOrOrdered
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator||=
name|zero
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator||=
name|one
argument_list|,
name|T
argument_list|(
name|value
operator||
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator||=
name|minusOne
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndAnd
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndAnd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|zero
init|=
literal|0
decl_stmt|;
name|T
name|f
init|=
literal|0xf
decl_stmt|;
name|T
name|minusOne
init|=
name|T
argument_list|(
operator|~
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelaxed
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelaxed
argument_list|(
name|f
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelaxed
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndAcquire
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndAcquire
argument_list|(
name|f
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndAcquire
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelease
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelease
argument_list|(
name|f
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndRelease
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndOrdered
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndOrdered
argument_list|(
name|f
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndAndOrdered
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|zero
argument_list|)
expr_stmt|;
name|atomic
operator|.
name|store
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|&=
name|minusOne
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|&=
name|f
argument_list|,
name|T
argument_list|(
name|value
operator|&
literal|0xf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|&=
name|zero
argument_list|,
name|zero
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndXor
name|void
name|tst_QAtomicIntegerXX
operator|::
name|fetchAndXor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|LargeInt
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInteger
argument_list|<
name|T
argument_list|>
name|atomic
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|T
name|zero
init|=
literal|0
decl_stmt|;
name|T
name|pattern
init|=
name|T
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|0xcccccccccccccccc
argument_list|)
argument_list|)
decl_stmt|;
name|T
name|minusOne
init|=
name|T
argument_list|(
operator|~
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelaxed
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelaxed
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelaxed
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelaxed
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelaxed
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorAcquire
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorAcquire
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorAcquire
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorAcquire
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorAcquire
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelease
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelease
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelease
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelease
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorRelease
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorOrdered
argument_list|(
name|zero
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorOrdered
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorOrdered
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorOrdered
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndXorOrdered
argument_list|(
name|minusOne
argument_list|)
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|load
argument_list|()
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|^=
name|zero
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|^=
name|pattern
argument_list|,
name|T
argument_list|(
name|value
operator|^
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|^=
name|pattern
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|^=
name|minusOne
argument_list|,
name|T
argument_list|(
operator|~
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|^=
name|minusOne
argument_list|,
name|T
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_qatomicinteger.moc"
end_include
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QAtomicIntegerXX
argument_list|)
end_macro
end_unit
