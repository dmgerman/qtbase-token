begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qatomic.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QAtomicPointer
class|class
name|tst_QAtomicPointer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|warningFree
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|copy_constructor
parameter_list|()
function_decl|;
name|void
name|assignment_operator
parameter_list|()
function_decl|;
name|void
name|isTestAndSetNative
parameter_list|()
function_decl|;
name|void
name|isTestAndSetWaitFree
parameter_list|()
function_decl|;
name|void
name|testAndSet
parameter_list|()
function_decl|;
name|void
name|isFetchAndStoreNative
parameter_list|()
function_decl|;
name|void
name|isFetchAndStoreWaitFree
parameter_list|()
function_decl|;
name|void
name|fetchAndStore
parameter_list|()
function_decl|;
name|void
name|isFetchAndAddNative
parameter_list|()
function_decl|;
name|void
name|isFetchAndAddWaitFree
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd_data
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd
parameter_list|()
function_decl|;
name|void
name|constAndVolatile
parameter_list|()
function_decl|;
private|private:
specifier|static
name|void
name|warningFreeHelper
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_struct
DECL|struct|WFHC
struct|struct
name|WFHC
block|{
DECL|function|bar
name|void
name|bar
parameter_list|()
block|{}
block|}
struct|;
end_struct
begin_function
DECL|function|warningFreeHelper
name|void
name|tst_QAtomicPointer
operator|::
name|warningFreeHelper
parameter_list|()
block|{
name|qFatal
argument_list|(
literal|"This code is bogus, and shouldn't be run. We're looking for compiler warnings only."
argument_list|)
expr_stmt|;
name|QBasicAtomicPointer
argument_list|<
name|WFHC
argument_list|>
name|p
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|load
argument_list|()
operator|->
name|bar
argument_list|()
expr_stmt|;
name|WFHC
modifier|*
name|expectedValue
init|=
literal|0
decl_stmt|;
name|WFHC
modifier|*
name|newValue
init|=
literal|0
decl_stmt|;
name|qptrdiff
name|valueToAdd
init|=
literal|0
decl_stmt|;
name|p
operator|.
name|testAndSetRelaxed
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|testAndSetRelease
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndStoreRelease
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|p
operator|.
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|warningFree
name|void
name|tst_QAtomicPointer
operator|::
name|warningFree
parameter_list|()
block|{
comment|// This is a compile time check for warnings.
comment|// No need for actual work here.
name|void
function_decl|(
modifier|*
name|foo
function_decl|)
parameter_list|()
init|=
operator|&
name|warningFreeHelper
function_decl|;
operator|(
name|void
operator|)
name|foo
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QAtomicPointer
operator|::
name|constructor
parameter_list|()
block|{
name|void
modifier|*
name|one
init|=
name|this
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
name|void
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|void
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy_constructor
name|void
name|tst_QAtomicPointer
operator|::
name|copy_constructor
parameter_list|()
block|{
name|void
modifier|*
name|one
init|=
name|this
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1_copy
init|=
name|atomic1
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic1_copy
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1_copy
operator|.
name|load
argument_list|()
argument_list|,
name|atomic1
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|void
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2_copy
init|=
name|atomic2
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic2_copy
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2_copy
operator|.
name|load
argument_list|()
argument_list|,
name|atomic2
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
name|void
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3_copy
init|=
name|atomic3
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic3_copy
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic3_copy
operator|.
name|load
argument_list|()
argument_list|,
name|atomic3
operator|.
name|load
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignment_operator
name|void
name|tst_QAtomicPointer
operator|::
name|assignment_operator
parameter_list|()
block|{
name|void
modifier|*
name|one
init|=
name|this
decl_stmt|;
name|void
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|void
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|atomic1
operator|=
name|two
expr_stmt|;
name|atomic2
operator|=
name|three
expr_stmt|;
name|atomic3
operator|=
name|one
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTestAndSetNative
name|void
name|tst_QAtomicPointer
operator|::
name|isTestAndSetNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
operator|||
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_POINTER_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isTestAndSetWaitFree
name|void
name|tst_QAtomicPointer
operator|::
name|isTestAndSetWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isTestAndSetWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testAndSet
name|void
name|tst_QAtomicPointer
operator|::
name|testAndSet
parameter_list|()
block|{
name|void
modifier|*
name|one
init|=
name|this
decl_stmt|;
name|void
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|void
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|testAndSetRelaxed
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|testAndSetRelaxed
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|testAndSetRelaxed
argument_list|(
name|three
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|testAndSetAcquire
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|testAndSetAcquire
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|testAndSetAcquire
argument_list|(
name|three
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|testAndSetRelease
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|testAndSetRelease
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|testAndSetRelease
argument_list|(
name|three
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|testAndSetOrdered
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|testAndSetOrdered
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|testAndSetOrdered
argument_list|(
name|three
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isFetchAndStoreNative
name|void
name|tst_QAtomicPointer
operator|::
name|isFetchAndStoreNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
operator|||
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndStoreWaitFree
name|void
name|tst_QAtomicPointer
operator|::
name|isFetchAndStoreWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fetchAndStore
name|void
name|tst_QAtomicPointer
operator|::
name|fetchAndStore
parameter_list|()
block|{
name|void
modifier|*
name|one
init|=
name|this
decl_stmt|;
name|void
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|void
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|two
argument_list|)
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|three
argument_list|)
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic3
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|one
argument_list|)
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|two
argument_list|)
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|three
argument_list|)
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic3
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|one
argument_list|)
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|fetchAndStoreRelease
argument_list|(
name|two
argument_list|)
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|fetchAndStoreRelease
argument_list|(
name|three
argument_list|)
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic3
operator|.
name|fetchAndStoreRelease
argument_list|(
name|one
argument_list|)
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|two
argument_list|)
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic2
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|three
argument_list|)
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic3
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|one
argument_list|)
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isFetchAndAddNative
name|void
name|tst_QAtomicPointer
operator|::
name|isFetchAndAddNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
operator|||
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndAddWaitFree
name|void
name|tst_QAtomicPointer
operator|::
name|isFetchAndAddWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicPointer
argument_list|<
name|void
argument_list|>
operator|::
name|isFetchAndAddWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fetchAndAdd_data
name|void
name|tst_QAtomicPointer
operator|::
name|fetchAndAdd_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"valueToAdd"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31"
argument_list|)
operator|<<
literal|31
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"51"
argument_list|)
operator|<<
literal|51
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"72"
argument_list|)
operator|<<
literal|72
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"810"
argument_list|)
operator|<<
literal|810
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"631"
argument_list|)
operator|<<
literal|631
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"451"
argument_list|)
operator|<<
literal|451
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"272"
argument_list|)
operator|<<
literal|272
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1810"
argument_list|)
operator|<<
literal|1810
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3631"
argument_list|)
operator|<<
literal|3631
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5451"
argument_list|)
operator|<<
literal|5451
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7272"
argument_list|)
operator|<<
literal|7272
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-2"
argument_list|)
operator|<<
operator|-
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-10"
argument_list|)
operator|<<
operator|-
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-31"
argument_list|)
operator|<<
operator|-
literal|31
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-51"
argument_list|)
operator|<<
operator|-
literal|51
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-72"
argument_list|)
operator|<<
operator|-
literal|72
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-810"
argument_list|)
operator|<<
operator|-
literal|810
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-631"
argument_list|)
operator|<<
operator|-
literal|631
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-451"
argument_list|)
operator|<<
operator|-
literal|451
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-272"
argument_list|)
operator|<<
operator|-
literal|272
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1810"
argument_list|)
operator|<<
operator|-
literal|1810
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-3631"
argument_list|)
operator|<<
operator|-
literal|3631
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-5451"
argument_list|)
operator|<<
operator|-
literal|5451
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-7272"
argument_list|)
operator|<<
operator|-
literal|7272
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndAdd
name|void
name|tst_QAtomicPointer
operator|::
name|fetchAndAdd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|valueToAdd
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|char
modifier|*
name|pc
init|=
operator|&
name|c
decl_stmt|;
name|short
name|s
decl_stmt|;
name|short
modifier|*
name|ps
init|=
operator|&
name|s
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
modifier|*
name|pi
init|=
operator|&
name|i
decl_stmt|;
block|{
name|QAtomicPointer
argument_list|<
name|char
argument_list|>
name|pointer1
init|=
name|pc
decl_stmt|;
comment|// cast to void* in order to avoid QCOMPARE to compare string content of the char*
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddRelaxed
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
operator|+
name|valueToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|load
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|short
argument_list|>
name|pointer2
init|=
name|ps
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddRelaxed
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|ps
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|load
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|int
argument_list|>
name|pointer3
init|=
name|pi
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddRelaxed
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|pi
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|load
argument_list|()
argument_list|,
name|pi
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|char
argument_list|>
name|pointer1
init|=
name|pc
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddAcquire
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
operator|+
name|valueToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|load
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|short
argument_list|>
name|pointer2
init|=
name|ps
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddAcquire
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|ps
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|load
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|int
argument_list|>
name|pointer3
init|=
name|pi
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddAcquire
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|pi
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|load
argument_list|()
argument_list|,
name|pi
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|char
argument_list|>
name|pointer1
init|=
name|pc
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddRelease
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
operator|+
name|valueToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|load
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|short
argument_list|>
name|pointer2
init|=
name|ps
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddRelease
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|ps
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|load
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|int
argument_list|>
name|pointer3
init|=
name|pi
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddRelease
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|pi
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|load
argument_list|()
argument_list|,
name|pi
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|char
argument_list|>
name|pointer1
init|=
name|pc
decl_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|fetchAndAddOrdered
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
operator|+
name|valueToAdd
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pointer1
operator|.
name|load
argument_list|()
argument_list|)
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
name|pc
argument_list|)
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|short
argument_list|>
name|pointer2
init|=
name|ps
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|fetchAndAddOrdered
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|ps
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer2
operator|.
name|load
argument_list|()
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|QAtomicPointer
argument_list|<
name|int
argument_list|>
name|pointer3
init|=
name|pi
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
argument_list|,
name|pi
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|fetchAndAddOrdered
argument_list|(
operator|-
name|valueToAdd
argument_list|)
argument_list|,
name|pi
operator|+
name|valueToAdd
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pointer3
operator|.
name|load
argument_list|()
argument_list|,
name|pi
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|constAndVolatile_helper
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|void
name|constAndVolatile_helper
parameter_list|()
block|{
name|T
modifier|*
name|one
init|=
literal|0
decl_stmt|;
name|T
modifier|*
name|two
init|=
operator|&
name|one
decl_stmt|;
name|T
modifier|*
name|three
init|=
operator|&
name|two
decl_stmt|;
block|{
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|two
argument_list|)
operator|==
name|one
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|three
argument_list|)
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|one
argument_list|)
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic1
init|=
name|one
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic2
init|=
name|two
decl_stmt|;
name|QAtomicPointer
argument_list|<
name|T
argument_list|>
name|atomic3
init|=
name|three
decl_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|testAndSetRelaxed
argument_list|(
name|one
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|testAndSetRelaxed
argument_list|(
name|two
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|testAndSetRelaxed
argument_list|(
name|three
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic1
operator|.
name|load
argument_list|()
operator|==
name|two
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic2
operator|.
name|load
argument_list|()
operator|==
name|three
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|atomic3
operator|.
name|load
argument_list|()
operator|==
name|one
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|constAndVolatile
name|void
name|tst_QAtomicPointer
operator|::
name|constAndVolatile
parameter_list|()
block|{
name|constAndVolatile_helper
argument_list|<
name|void
argument_list|>
argument_list|()
expr_stmt|;
name|constAndVolatile_helper
argument_list|<
specifier|const
name|void
argument_list|>
argument_list|()
expr_stmt|;
name|constAndVolatile_helper
argument_list|<
specifier|volatile
name|void
argument_list|>
argument_list|()
expr_stmt|;
name|constAndVolatile_helper
argument_list|<
specifier|const
specifier|volatile
name|void
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QAtomicPointer
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qatomicpointer.moc"
end_include
end_unit
