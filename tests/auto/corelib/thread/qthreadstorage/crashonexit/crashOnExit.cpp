begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThreadStorage>
end_include
begin_class
DECL|class|Class
class|class
name|Class
block|{
public|public:
DECL|function|~Class
name|~
name|Class
parameter_list|()
block|{
comment|// trigger creation of a new QThreadStorage, after the previous QThreadStorage from main() was destructed
specifier|static
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|threadstorage
decl_stmt|;
name|threadstorage
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|)
expr_stmt|;
name|threadstorage
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|()
block|{
comment|// instantiate the class that will use QThreadStorage from its destructor, it's destructor will be run last
specifier|static
name|Class
name|instance
decl_stmt|;
comment|// instantiate QThreadStorage, it's destructor (and the global destructors for QThreadStorages internals) will run first
specifier|static
name|QThreadStorage
argument_list|<
name|int
modifier|*
argument_list|>
name|threadstorage
decl_stmt|;
name|threadstorage
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|)
expr_stmt|;
name|threadstorage
operator|.
name|setLocalData
argument_list|(
operator|new
name|int
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
