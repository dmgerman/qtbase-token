begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QAtomicInt>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QAtomicInt
class|class
name|tst_QAtomicInt
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|warningFree
parameter_list|()
function_decl|;
comment|// QAtomicInt members
name|void
name|constructor_data
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|copy_constructor_data
parameter_list|()
function_decl|;
name|void
name|copy_constructor
parameter_list|()
function_decl|;
name|void
name|equality_operator_data
parameter_list|()
function_decl|;
name|void
name|equality_operator
parameter_list|()
function_decl|;
name|void
name|inequality_operator_data
parameter_list|()
function_decl|;
name|void
name|inequality_operator
parameter_list|()
function_decl|;
name|void
name|not_operator_data
parameter_list|()
function_decl|;
name|void
name|not_operator
parameter_list|()
function_decl|;
name|void
name|cast_operator_data
parameter_list|()
function_decl|;
name|void
name|cast_operator
parameter_list|()
function_decl|;
name|void
name|assignment_operator_data
parameter_list|()
function_decl|;
name|void
name|assignment_operator
parameter_list|()
function_decl|;
name|void
name|isReferenceCountingNative
parameter_list|()
function_decl|;
name|void
name|isReferenceCountingWaitFree
parameter_list|()
function_decl|;
name|void
name|ref_data
parameter_list|()
function_decl|;
name|void
name|ref
parameter_list|()
function_decl|;
name|void
name|deref_data
parameter_list|()
function_decl|;
name|void
name|deref
parameter_list|()
function_decl|;
name|void
name|isTestAndSetNative
parameter_list|()
function_decl|;
name|void
name|isTestAndSetWaitFree
parameter_list|()
function_decl|;
name|void
name|testAndSet_data
parameter_list|()
function_decl|;
name|void
name|testAndSet
parameter_list|()
function_decl|;
name|void
name|isFetchAndStoreNative
parameter_list|()
function_decl|;
name|void
name|isFetchAndStoreWaitFree
parameter_list|()
function_decl|;
name|void
name|fetchAndStore_data
parameter_list|()
function_decl|;
name|void
name|fetchAndStore
parameter_list|()
function_decl|;
name|void
name|isFetchAndAddNative
parameter_list|()
function_decl|;
name|void
name|isFetchAndAddWaitFree
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd_data
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd
parameter_list|()
function_decl|;
comment|// stress tests
name|void
name|testAndSet_loop
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd_loop
parameter_list|()
function_decl|;
name|void
name|fetchAndAdd_threadedLoop
parameter_list|()
function_decl|;
private|private:
specifier|static
name|void
name|warningFreeHelper
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|warningFreeHelper
name|void
name|tst_QAtomicInt
operator|::
name|warningFreeHelper
parameter_list|()
block|{
name|qFatal
argument_list|(
literal|"This code is bogus, and shouldn't be run. We're looking for compiler warnings only."
argument_list|)
expr_stmt|;
name|QBasicAtomicInt
name|i
init|=
name|Q_BASIC_ATOMIC_INITIALIZER
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|expectedValue
init|=
literal|0
decl_stmt|;
name|int
name|newValue
init|=
literal|0
decl_stmt|;
name|int
name|valueToAdd
init|=
literal|0
decl_stmt|;
name|i
operator|.
name|ref
argument_list|()
expr_stmt|;
name|i
operator|.
name|deref
argument_list|()
expr_stmt|;
name|i
operator|.
name|testAndSetRelaxed
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|testAndSetAcquire
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|testAndSetRelease
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|testAndSetOrdered
argument_list|(
name|expectedValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndStoreRelease
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndAddAcquire
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndAddRelease
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
name|i
operator|.
name|fetchAndAddOrdered
argument_list|(
name|valueToAdd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|warningFree
name|void
name|tst_QAtomicInt
operator|::
name|warningFree
parameter_list|()
block|{
comment|// This is a compile time check for warnings.
comment|// No need for actual work here.
name|void
function_decl|(
modifier|*
name|foo
function_decl|)
parameter_list|()
init|=
operator|&
name|warningFreeHelper
function_decl|;
operator|(
name|void
operator|)
name|foo
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor_data
name|void
name|tst_QAtomicInt
operator|::
name|constructor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|31337
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
operator|-
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7"
argument_list|)
operator|<<
operator|-
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
name|INT_MAX
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"9"
argument_list|)
operator|<<
name|INT_MIN
operator|+
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QAtomicInt
operator|::
name|constructor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic1
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic1
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic2
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy_constructor_data
name|void
name|tst_QAtomicInt
operator|::
name|copy_constructor_data
parameter_list|()
block|{
name|constructor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copy_constructor
name|void
name|tst_QAtomicInt
operator|::
name|copy_constructor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic1
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic1
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic2
argument_list|(
name|atomic1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic3
init|=
name|atomic1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic3
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic4
argument_list|(
name|atomic2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic4
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic5
init|=
name|atomic2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic5
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equality_operator_data
name|void
name|tst_QAtomicInt
operator|::
name|equality_operator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure2"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure3"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equality_operator
name|void
name|tst_QAtomicInt
operator|::
name|equality_operator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|QAtomicInt
name|x
init|=
name|value1
decl_stmt|;
name|QTEST
argument_list|(
name|x
operator|==
name|value2
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inequality_operator_data
name|void
name|tst_QAtomicInt
operator|::
name|inequality_operator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success2"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success3"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inequality_operator
name|void
name|tst_QAtomicInt
operator|::
name|inequality_operator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|QAtomicInt
name|x
init|=
name|value1
decl_stmt|;
name|QTEST
argument_list|(
name|x
operator|!=
name|value2
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|not_operator_data
name|void
name|tst_QAtomicInt
operator|::
name|not_operator_data
parameter_list|()
block|{
name|constructor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|not_operator
name|void
name|tst_QAtomicInt
operator|::
name|not_operator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|atomic
argument_list|,
operator|!
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cast_operator_data
name|void
name|tst_QAtomicInt
operator|::
name|cast_operator_data
parameter_list|()
block|{
name|constructor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cast_operator
name|void
name|tst_QAtomicInt
operator|::
name|cast_operator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|int
name|copy
init|=
name|atomic
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignment_operator_data
name|void
name|tst_QAtomicInt
operator|::
name|assignment_operator_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value2"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value3"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value4"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"value5"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|assignment_operator
name|void
name|tst_QAtomicInt
operator|::
name|assignment_operator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|{
name|QAtomicInt
name|atomic1
init|=
name|value
decl_stmt|;
name|atomic1
operator|=
name|newval
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic1
argument_list|)
argument_list|,
name|newval
argument_list|)
expr_stmt|;
name|atomic1
operator|=
name|value
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic1
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|atomic2
init|=
name|newval
decl_stmt|;
name|atomic1
operator|=
name|atomic2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|atomic1
argument_list|,
name|atomic2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isReferenceCountingNative
name|void
name|tst_QAtomicInt
operator|::
name|isReferenceCountingNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_REFERENCE_COUNTING_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
operator|||
operator|!
name|QAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_REFERENCE_COUNTING_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_REFERENCE_COUNTING_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_INT_REFERENCE_COUNTING_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isReferenceCountingWaitFree
name|void
name|tst_QAtomicInt
operator|::
name|isReferenceCountingWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isReferenceCountingNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_REFERENCE_COUNTING_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isReferenceCountingWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|ref_data
name|void
name|tst_QAtomicInt
operator|::
name|ref_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ref
name|void
name|tst_QAtomicInt
operator|::
name|ref
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|x
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|x
operator|.
name|ref
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|x
argument_list|)
argument_list|,
literal|"expected"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deref_data
name|void
name|tst_QAtomicInt
operator|::
name|deref_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deref
name|void
name|tst_QAtomicInt
operator|::
name|deref
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAtomicInt
name|x
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|x
operator|.
name|deref
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|x
argument_list|)
argument_list|,
literal|"expected"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isTestAndSetNative
name|void
name|tst_QAtomicInt
operator|::
name|isTestAndSetNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
operator|||
operator|!
name|QAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_INT_TEST_AND_SET_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isTestAndSetWaitFree
name|void
name|tst_QAtomicInt
operator|::
name|isTestAndSetWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isTestAndSetNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_TEST_AND_SET_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isTestAndSetWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|testAndSet_data
name|void
name|tst_QAtomicInt
operator|::
name|testAndSet_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// these should succeed
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success3"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success4"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success5"
argument_list|)
operator|<<
literal|1
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success6"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success7"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success8"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success9"
argument_list|)
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"successA"
argument_list|)
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"successB"
argument_list|)
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"successC"
argument_list|)
operator|<<
name|INT_MAX
operator|<<
name|INT_MAX
operator|<<
name|INT_MAX
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"successD"
argument_list|)
operator|<<
name|INT_MAX
operator|<<
name|INT_MAX
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"successE"
argument_list|)
operator|<<
name|INT_MAX
operator|<<
name|INT_MAX
operator|<<
operator|-
literal|1
operator|<<
literal|1
expr_stmt|;
comment|// these should fail
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure1"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure3"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure4"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|1
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure5"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|1
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure6"
argument_list|)
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
name|INT_MAX
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure7"
argument_list|)
operator|<<
name|INT_MAX
operator|<<
name|INT_MIN
operator|+
literal|1
operator|<<
operator|~
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testAndSet
name|void
name|tst_QAtomicInt
operator|::
name|testAndSet
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|atomic
operator|.
name|testAndSetRelaxed
argument_list|(
name|expected
argument_list|,
name|newval
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|atomic
operator|.
name|testAndSetAcquire
argument_list|(
name|expected
argument_list|,
name|newval
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|atomic
operator|.
name|testAndSetRelease
argument_list|(
name|expected
argument_list|,
name|newval
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QTEST
argument_list|(
name|atomic
operator|.
name|testAndSetOrdered
argument_list|(
name|expected
argument_list|,
name|newval
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isFetchAndStoreNative
name|void
name|tst_QAtomicInt
operator|::
name|isFetchAndStoreNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
operator|||
operator|!
name|QAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_INT_FETCH_AND_STORE_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndStoreWaitFree
name|void
name|tst_QAtomicInt
operator|::
name|isFetchAndStoreWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndStoreNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_STORE_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isFetchAndStoreWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fetchAndStore_data
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndStore_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"newval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|3
operator|<<
literal|8
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndStore
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndStore
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelaxed
argument_list|(
name|newval
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreAcquire
argument_list|(
name|newval
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreRelease
argument_list|(
name|newval
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|atomic
operator|.
name|fetchAndStoreOrdered
argument_list|(
name|newval
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|newval
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isFetchAndAddNative
name|void
name|tst_QAtomicInt
operator|::
name|isFetchAndAddNative
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
comment|// could be either, just want to make sure the function is implemented
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
operator|||
operator|!
name|QAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_ALWAYS_NATIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
argument_list|)
operator|)
error|#
directive|error
literal|"Define only one of Q_ATOMIC_INT_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"Q_ATOMIC_INT_FETCH_AND_ADD_IS_{ALWAYS,SOMTIMES,NOT}_NATIVE is not defined"
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|isFetchAndAddWaitFree
name|void
name|tst_QAtomicInt
operator|::
name|isFetchAndAddWaitFree
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_WAIT_FREE
argument_list|)
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
argument_list|)
expr_stmt|;
comment|// enforce some invariants
name|QVERIFY
argument_list|(
name|QAtomicInt
operator|::
name|isFetchAndAddNative
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_ATOMIC_INT_FETCH_AND_ADD_IS_NOT_NATIVE
argument_list|)
error|#
directive|error
literal|"Reference counting cannot be wait-free and unsupported at the same time!"
endif|#
directive|endif
else|#
directive|else
comment|// the runtime test should say the same thing
name|QVERIFY
argument_list|(
operator|!
name|QAtomicInt
operator|::
name|isFetchAndAddWaitFree
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|fetchAndAdd_data
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndAdd_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value2"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0+1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1+0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1+2"
argument_list|)
operator|<<
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2+1"
argument_list|)
operator|<<
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10+21"
argument_list|)
operator|<<
literal|10
operator|<<
literal|21
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31+40"
argument_list|)
operator|<<
literal|31
operator|<<
literal|40
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"51+62"
argument_list|)
operator|<<
literal|51
operator|<<
literal|62
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"72+81"
argument_list|)
operator|<<
literal|72
operator|<<
literal|81
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"810+721"
argument_list|)
operator|<<
literal|810
operator|<<
literal|721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"631+540"
argument_list|)
operator|<<
literal|631
operator|<<
literal|540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"451+362"
argument_list|)
operator|<<
literal|451
operator|<<
literal|362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"272+181"
argument_list|)
operator|<<
literal|272
operator|<<
literal|181
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1810+8721"
argument_list|)
operator|<<
literal|1810
operator|<<
literal|8721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3631+6540"
argument_list|)
operator|<<
literal|3631
operator|<<
literal|6540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5451+4362"
argument_list|)
operator|<<
literal|5451
operator|<<
literal|4362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7272+2181"
argument_list|)
operator|<<
literal|7272
operator|<<
literal|2181
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0+-1"
argument_list|)
operator|<<
literal|0
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1+0"
argument_list|)
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1+-2"
argument_list|)
operator|<<
literal|1
operator|<<
operator|-
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2+-1"
argument_list|)
operator|<<
literal|2
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10+-21"
argument_list|)
operator|<<
literal|10
operator|<<
operator|-
literal|21
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"31+-40"
argument_list|)
operator|<<
literal|31
operator|<<
operator|-
literal|40
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"51+-62"
argument_list|)
operator|<<
literal|51
operator|<<
operator|-
literal|62
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"72+-81"
argument_list|)
operator|<<
literal|72
operator|<<
operator|-
literal|81
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"810+-721"
argument_list|)
operator|<<
literal|810
operator|<<
operator|-
literal|721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"631+-540"
argument_list|)
operator|<<
literal|631
operator|<<
operator|-
literal|540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"451+-362"
argument_list|)
operator|<<
literal|451
operator|<<
operator|-
literal|362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"272+-181"
argument_list|)
operator|<<
literal|272
operator|<<
operator|-
literal|181
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1810+-8721"
argument_list|)
operator|<<
literal|1810
operator|<<
operator|-
literal|8721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3631+-6540"
argument_list|)
operator|<<
literal|3631
operator|<<
operator|-
literal|6540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5451+-4362"
argument_list|)
operator|<<
literal|5451
operator|<<
operator|-
literal|4362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"7272+-2181"
argument_list|)
operator|<<
literal|7272
operator|<<
operator|-
literal|2181
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0+1"
argument_list|)
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1+0"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1+2"
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-2+1"
argument_list|)
operator|<<
operator|-
literal|2
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-10+21"
argument_list|)
operator|<<
operator|-
literal|10
operator|<<
literal|21
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-31+40"
argument_list|)
operator|<<
operator|-
literal|31
operator|<<
literal|40
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-51+62"
argument_list|)
operator|<<
operator|-
literal|51
operator|<<
literal|62
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-72+81"
argument_list|)
operator|<<
operator|-
literal|72
operator|<<
literal|81
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-810+721"
argument_list|)
operator|<<
operator|-
literal|810
operator|<<
literal|721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-631+540"
argument_list|)
operator|<<
operator|-
literal|631
operator|<<
literal|540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-451+362"
argument_list|)
operator|<<
operator|-
literal|451
operator|<<
literal|362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-272+181"
argument_list|)
operator|<<
operator|-
literal|272
operator|<<
literal|181
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-1810+8721"
argument_list|)
operator|<<
operator|-
literal|1810
operator|<<
literal|8721
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-3631+6540"
argument_list|)
operator|<<
operator|-
literal|3631
operator|<<
literal|6540
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-5451+4362"
argument_list|)
operator|<<
operator|-
literal|5451
operator|<<
literal|4362
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-7272+2181"
argument_list|)
operator|<<
operator|-
literal|7272
operator|<<
literal|2181
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchAndAdd
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndAdd
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|int
name|result
decl_stmt|;
block|{
name|QAtomicInt
name|atomic
init|=
name|value1
decl_stmt|;
name|result
operator|=
name|atomic
operator|.
name|fetchAndAddRelaxed
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|value1
operator|+
name|value2
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value1
decl_stmt|;
name|result
operator|=
name|atomic
operator|.
name|fetchAndAddAcquire
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|value1
operator|+
name|value2
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value1
decl_stmt|;
name|result
operator|=
name|atomic
operator|.
name|fetchAndAddRelease
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|value1
operator|+
name|value2
argument_list|)
expr_stmt|;
block|}
block|{
name|QAtomicInt
name|atomic
init|=
name|value1
decl_stmt|;
name|result
operator|=
name|atomic
operator|.
name|fetchAndAddOrdered
argument_list|(
name|value2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|atomic
argument_list|)
argument_list|,
name|value1
operator|+
name|value2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testAndSet_loop
name|void
name|tst_QAtomicInt
operator|::
name|testAndSet_loop
parameter_list|()
block|{
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|iterations
init|=
literal|10000000
decl_stmt|;
name|QAtomicInt
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|val
operator|.
name|testAndSetRelaxed
argument_list|(
name|val
argument_list|,
name|val
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|%
literal|1000
operator|)
operator|==
literal|999
condition|)
block|{
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>
literal|60
operator|*
literal|1000
condition|)
block|{
comment|// This test shouldn't run for more than two minutes.
name|qDebug
argument_list|(
literal|"Interrupted test after %d iterations (%.2f iterations/sec)"
argument_list|,
name|i
argument_list|,
operator|(
name|i
operator|*
literal|1000.0
operator|)
operator|/
name|double
argument_list|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|fetchAndAdd_loop
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndAdd_loop
parameter_list|()
block|{
name|int
name|iterations
init|=
literal|10000000
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
name|iterations
operator|=
literal|1000000
expr_stmt|;
endif|#
directive|endif
name|QAtomicInt
name|val
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|prev
init|=
name|val
operator|.
name|fetchAndAddRelaxed
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prev
argument_list|,
name|int
argument_list|(
name|val
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|FetchAndAddThread
class|class
name|FetchAndAddThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
name|val
operator|->
name|fetchAndAddAcquire
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
name|val
operator|->
name|fetchAndAddAcquire
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|member|val
name|QAtomicInt
modifier|*
name|val
decl_stmt|;
DECL|member|iterations
name|int
name|iterations
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|fetchAndAdd_threadedLoop
name|void
name|tst_QAtomicInt
operator|::
name|fetchAndAdd_threadedLoop
parameter_list|()
block|{
name|QAtomicInt
name|val
decl_stmt|;
name|FetchAndAddThread
name|t1
decl_stmt|;
name|t1
operator|.
name|val
operator|=
operator|&
name|val
expr_stmt|;
name|t1
operator|.
name|iterations
operator|=
literal|1000000
expr_stmt|;
name|FetchAndAddThread
name|t2
decl_stmt|;
name|t2
operator|.
name|val
operator|=
operator|&
name|val
expr_stmt|;
name|t2
operator|.
name|iterations
operator|=
literal|2000000
expr_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|wait
argument_list|()
expr_stmt|;
name|t2
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|val
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAtomicInt
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qatomicint.moc"
end_include
end_unit
