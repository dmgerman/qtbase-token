begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qtimer.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<pthread.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<process.h>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QThread
class|class
name|tst_QThread
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|currentThreadId
parameter_list|()
function_decl|;
name|void
name|currentThread
parameter_list|()
function_decl|;
name|void
name|idealThreadCount
parameter_list|()
function_decl|;
name|void
name|isFinished
parameter_list|()
function_decl|;
name|void
name|isRunning
parameter_list|()
function_decl|;
name|void
name|setPriority
parameter_list|()
function_decl|;
name|void
name|setStackSize
parameter_list|()
function_decl|;
name|void
name|exit
parameter_list|()
function_decl|;
name|void
name|start
parameter_list|()
function_decl|;
name|void
name|terminate
parameter_list|()
function_decl|;
name|void
name|quit
parameter_list|()
function_decl|;
name|void
name|started
parameter_list|()
function_decl|;
name|void
name|finished
parameter_list|()
function_decl|;
name|void
name|terminated
parameter_list|()
function_decl|;
comment|// Named after a signal that was removed in Qt 5.0
name|void
name|exec
parameter_list|()
function_decl|;
name|void
name|sleep
parameter_list|()
function_decl|;
name|void
name|msleep
parameter_list|()
function_decl|;
name|void
name|usleep
parameter_list|()
function_decl|;
name|void
name|nativeThreadAdoption
parameter_list|()
function_decl|;
name|void
name|adoptedThreadAffinity
parameter_list|()
function_decl|;
name|void
name|adoptedThreadSetPriority
parameter_list|()
function_decl|;
name|void
name|adoptedThreadExit
parameter_list|()
function_decl|;
name|void
name|adoptedThreadExec
parameter_list|()
function_decl|;
name|void
name|adoptedThreadFinished
parameter_list|()
function_decl|;
name|void
name|adoptedThreadExecFinished
parameter_list|()
function_decl|;
name|void
name|adoptMultipleThreads
parameter_list|()
function_decl|;
name|void
name|adoptMultipleThreadsOverlap
parameter_list|()
function_decl|;
name|void
name|exitAndStart
parameter_list|()
function_decl|;
name|void
name|exitAndExec
parameter_list|()
function_decl|;
name|void
name|connectThreadFinishedSignalToObjectDeleteLaterSlot
parameter_list|()
function_decl|;
name|void
name|wait2
parameter_list|()
function_decl|;
name|void
name|wait3_slowDestructor
parameter_list|()
function_decl|;
name|void
name|destroyFinishRace
parameter_list|()
function_decl|;
name|void
name|startFinishRace
parameter_list|()
function_decl|;
name|void
name|startAndQuitCustomEventLoop
parameter_list|()
function_decl|;
name|void
name|isRunningInFinished
parameter_list|()
function_decl|;
name|void
name|customEventDispatcher
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|void
name|stressTest
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|quitLock
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_enum
DECL|enumerator|one_minute
DECL|enumerator|five_minutes
enum|enum
block|{
name|one_minute
init|=
literal|60
operator|*
literal|1000
block|,
name|five_minutes
init|=
literal|5
operator|*
name|one_minute
block|}
enum|;
end_enum
begin_class
DECL|class|SignalRecorder
class|class
name|SignalRecorder
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|activationCount
name|QAtomicInt
name|activationCount
decl_stmt|;
DECL|function|SignalRecorder
specifier|inline
name|SignalRecorder
parameter_list|()
member_init_list|:
name|activationCount
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|wasActivated
name|bool
name|wasActivated
parameter_list|()
block|{
return|return
name|activationCount
operator|.
name|load
argument_list|()
operator|>
literal|0
return|;
block|}
public|public
name|slots
public|:
name|void
name|slot
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|slot
name|void
name|SignalRecorder
operator|::
name|slot
parameter_list|()
block|{
name|activationCount
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Current_Thread
class|class
name|Current_Thread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|id
name|Qt
operator|::
name|HANDLE
name|id
decl_stmt|;
DECL|member|thread
name|QThread
modifier|*
name|thread
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|id
operator|=
name|QThread
operator|::
name|currentThreadId
argument_list|()
expr_stmt|;
name|thread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Simple_Thread
class|class
name|Simple_Thread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
name|cond
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Exit_Object
class|class
name|Exit_Object
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|thread
name|QThread
modifier|*
name|thread
decl_stmt|;
DECL|member|code
name|int
name|code
decl_stmt|;
public|public
name|slots
public|:
DECL|function|slot
name|void
name|slot
parameter_list|()
block|{
name|thread
operator|->
name|exit
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Exit_Thread
class|class
name|Exit_Thread
super|:
specifier|public
name|Simple_Thread
block|{
public|public:
DECL|member|object
name|Exit_Object
modifier|*
name|object
decl_stmt|;
DECL|member|code
name|int
name|code
decl_stmt|;
DECL|member|result
name|int
name|result
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|Simple_Thread
operator|::
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|object
condition|)
block|{
name|object
operator|->
name|thread
operator|=
name|this
expr_stmt|;
name|object
operator|->
name|code
operator|=
name|code
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Terminate_Thread
class|class
name|Terminate_Thread
super|:
specifier|public
name|Simple_Thread
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|setTerminationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
name|five_minutes
argument_list|)
expr_stmt|;
block|}
name|setTerminationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qFatal
argument_list|(
literal|"tst_QThread: test case hung"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Quit_Object
class|class
name|Quit_Object
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|thread
name|QThread
modifier|*
name|thread
decl_stmt|;
public|public
name|slots
public|:
DECL|function|slot
name|void
name|slot
parameter_list|()
block|{
name|thread
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Quit_Thread
class|class
name|Quit_Thread
super|:
specifier|public
name|Simple_Thread
block|{
public|public:
DECL|member|object
name|Quit_Object
modifier|*
name|object
decl_stmt|;
DECL|member|result
name|int
name|result
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|Simple_Thread
operator|::
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|object
condition|)
block|{
name|object
operator|->
name|thread
operator|=
name|this
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Sleep_Thread
class|class
name|Sleep_Thread
super|:
specifier|public
name|Simple_Thread
block|{
public|public:
DECL|enum|SleepType
DECL|enumerator|Second
DECL|enumerator|Millisecond
DECL|enumerator|Microsecond
enum|enum
name|SleepType
block|{
name|Second
block|,
name|Millisecond
block|,
name|Microsecond
block|}
enum|;
DECL|member|sleepType
name|SleepType
name|sleepType
decl_stmt|;
DECL|member|interval
name|int
name|interval
decl_stmt|;
DECL|member|elapsed
name|int
name|elapsed
decl_stmt|;
comment|// result, in *MILLISECONDS*
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|elapsed
operator|=
literal|0
expr_stmt|;
name|QTime
name|time
decl_stmt|;
name|time
operator|.
name|start
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|sleepType
condition|)
block|{
case|case
name|Second
case|:
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
break|break;
case|case
name|Millisecond
case|:
name|msleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
break|break;
case|case
name|Microsecond
case|:
name|usleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
break|break;
block|}
name|elapsed
operator|=
name|time
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|currentThreadId
name|void
name|tst_QThread
operator|::
name|currentThreadId
parameter_list|()
block|{
name|Current_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|thread
operator|.
name|thread
operator|=
literal|0
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|id
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|id
operator|!=
name|QThread
operator|::
name|currentThreadId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentThread
name|void
name|tst_QThread
operator|::
name|currentThread
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|,
name|thread
argument_list|()
argument_list|)
expr_stmt|;
name|Current_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|thread
operator|.
name|thread
operator|=
literal|0
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|thread
argument_list|,
operator|(
name|QThread
operator|*
operator|)
operator|&
name|thread
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|idealThreadCount
name|void
name|tst_QThread
operator|::
name|idealThreadCount
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QThread
operator|::
name|idealThreadCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Ideal thread count:"
operator|<<
name|QThread
operator|::
name|idealThreadCount
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isFinished
name|void
name|tst_QThread
operator|::
name|isFinished
parameter_list|()
block|{
name|Simple_Thread
name|thread
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRunning
name|void
name|tst_QThread
operator|::
name|isRunning
parameter_list|()
block|{
name|Simple_Thread
name|thread
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPriority
name|void
name|tst_QThread
operator|::
name|setPriority
parameter_list|()
block|{
name|Simple_Thread
name|thread
decl_stmt|;
comment|// cannot change the priority, since the thread is not running
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change the priority of a running thread
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QThread::setPriority: Cannot set priority, thread is not running"
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStackSize
name|void
name|tst_QThread
operator|::
name|setStackSize
parameter_list|()
block|{
name|Simple_Thread
name|thread
decl_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|stackSize
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setStackSize
argument_list|(
literal|8192u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|stackSize
argument_list|()
argument_list|,
literal|8192u
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setStackSize
argument_list|(
literal|0u
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|stackSize
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exit
name|void
name|tst_QThread
operator|::
name|exit
parameter_list|()
block|{
name|Exit_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|object
operator|=
operator|new
name|Exit_Object
expr_stmt|;
name|thread
operator|.
name|object
operator|->
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|code
operator|=
literal|42
expr_stmt|;
name|thread
operator|.
name|result
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|result
argument_list|,
name|thread
operator|.
name|code
argument_list|)
expr_stmt|;
operator|delete
name|thread
operator|.
name|object
expr_stmt|;
name|Exit_Thread
name|thread2
decl_stmt|;
name|thread2
operator|.
name|object
operator|=
literal|0
expr_stmt|;
name|thread2
operator|.
name|code
operator|=
literal|53
expr_stmt|;
name|thread2
operator|.
name|result
operator|=
literal|0
expr_stmt|;
name|QMutexLocker
name|locker2
argument_list|(
operator|&
name|thread2
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|exit
argument_list|(
name|thread2
operator|.
name|code
argument_list|)
expr_stmt|;
name|thread2
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker2
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread2
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread2
operator|.
name|result
argument_list|,
name|thread2
operator|.
name|code
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|start
name|void
name|tst_QThread
operator|::
name|start
parameter_list|()
block|{
name|QThread
operator|::
name|Priority
name|priorities
index|[]
init|=
block|{
name|QThread
operator|::
name|IdlePriority
block|,
name|QThread
operator|::
name|LowestPriority
block|,
name|QThread
operator|::
name|LowPriority
block|,
name|QThread
operator|::
name|NormalPriority
block|,
name|QThread
operator|::
name|HighPriority
block|,
name|QThread
operator|::
name|HighestPriority
block|,
name|QThread
operator|::
name|TimeCriticalPriority
block|,
name|QThread
operator|::
name|InheritPriority
block|}
decl_stmt|;
specifier|const
name|int
name|prio_count
init|=
sizeof|sizeof
argument_list|(
name|priorities
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|QThread
operator|::
name|Priority
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prio_count
condition|;
operator|++
name|i
control|)
block|{
name|Simple_Thread
name|thread
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|(
name|priorities
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|terminate
name|void
name|tst_QThread
operator|::
name|terminate
parameter_list|()
block|{
name|Terminate_Thread
name|thread
decl_stmt|;
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|,
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quit
name|void
name|tst_QThread
operator|::
name|quit
parameter_list|()
block|{
name|Quit_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|object
operator|=
operator|new
name|Quit_Object
expr_stmt|;
name|thread
operator|.
name|object
operator|->
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|thread
operator|.
name|object
expr_stmt|;
name|Quit_Thread
name|thread2
decl_stmt|;
name|thread2
operator|.
name|object
operator|=
literal|0
expr_stmt|;
name|thread2
operator|.
name|result
operator|=
operator|-
literal|1
expr_stmt|;
name|QMutexLocker
name|locker2
argument_list|(
operator|&
name|thread2
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|quit
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker2
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread2
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread2
operator|.
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|started
name|void
name|tst_QThread
operator|::
name|started
parameter_list|()
block|{
name|SignalRecorder
name|recorder
decl_stmt|;
name|Simple_Thread
name|thread
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|recorder
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|recorder
operator|.
name|wasActivated
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finished
name|void
name|tst_QThread
operator|::
name|finished
parameter_list|()
block|{
name|SignalRecorder
name|recorder
decl_stmt|;
name|Simple_Thread
name|thread
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|recorder
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|recorder
operator|.
name|wasActivated
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|terminated
name|void
name|tst_QThread
operator|::
name|terminated
parameter_list|()
block|{
name|SignalRecorder
name|recorder
decl_stmt|;
name|Terminate_Thread
name|thread
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|recorder
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|thread
operator|.
name|mutex
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|recorder
operator|.
name|wasActivated
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exec
name|void
name|tst_QThread
operator|::
name|exec
parameter_list|()
block|{
class|class
name|MultipleExecThread
super|:
specifier|public
name|QThread
block|{
public|public:
name|int
name|res1
decl_stmt|,
name|res2
decl_stmt|;
name|MultipleExecThread
parameter_list|()
member_init_list|:
name|res1
argument_list|(
operator|-
literal|2
argument_list|)
member_init_list|,
name|res2
argument_list|(
operator|-
literal|2
argument_list|)
block|{ }
name|void
name|run
parameter_list|()
block|{
block|{
name|Exit_Object
name|o
decl_stmt|;
name|o
operator|.
name|thread
operator|=
name|this
expr_stmt|;
name|o
operator|.
name|code
operator|=
literal|1
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|res1
operator|=
name|exec
argument_list|()
expr_stmt|;
block|}
block|{
name|Exit_Object
name|o
decl_stmt|;
name|o
operator|.
name|thread
operator|=
name|this
expr_stmt|;
name|o
operator|.
name|code
operator|=
literal|2
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|res2
operator|=
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|;
name|MultipleExecThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|res1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|.
name|res2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sleep
name|void
name|tst_QThread
operator|::
name|sleep
parameter_list|()
block|{
name|Sleep_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|sleepType
operator|=
name|Sleep_Thread
operator|::
name|Second
expr_stmt|;
name|thread
operator|.
name|interval
operator|=
literal|2
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|elapsed
operator|>=
literal|2000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msleep
name|void
name|tst_QThread
operator|::
name|msleep
parameter_list|()
block|{
name|Sleep_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|sleepType
operator|=
name|Sleep_Thread
operator|::
name|Millisecond
expr_stmt|;
name|thread
operator|.
name|interval
operator|=
literal|120
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Since the resolution of QTime is so coarse...
name|QVERIFY
argument_list|(
name|thread
operator|.
name|elapsed
operator|>=
literal|100
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|thread
operator|.
name|elapsed
operator|>=
literal|120
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|usleep
name|void
name|tst_QThread
operator|::
name|usleep
parameter_list|()
block|{
name|Sleep_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|sleepType
operator|=
name|Sleep_Thread
operator|::
name|Microsecond
expr_stmt|;
name|thread
operator|.
name|interval
operator|=
literal|120000
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|five_minutes
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Since the resolution of QTime is so coarse...
name|QVERIFY
argument_list|(
name|thread
operator|.
name|elapsed
operator|>=
literal|100
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|thread
operator|.
name|elapsed
operator|>=
literal|120
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_typedef
DECL|typedef|FunctionPointer
typedef|typedef
name|void
function_decl|(
modifier|*
name|FunctionPointer
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_function
DECL|function|noop
name|void
name|noop
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{ }
end_function
begin_if
if|#
directive|if
name|defined
name|Q_OS_UNIX
end_if
begin_typedef
DECL|typedef|ThreadHandle
typedef|typedef
name|pthread_t
name|ThreadHandle
typedef|;
end_typedef
begin_elif
elif|#
directive|elif
name|defined
name|Q_OS_WIN
end_elif
begin_typedef
DECL|typedef|ThreadHandle
typedef|typedef
name|HANDLE
name|ThreadHandle
typedef|;
end_typedef
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_define
DECL|macro|WIN_FIX_STDCALL
define|#
directive|define
name|WIN_FIX_STDCALL
value|__stdcall
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|WIN_FIX_STDCALL
define|#
directive|define
name|WIN_FIX_STDCALL
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|NativeThreadWrapper
class|class
name|NativeThreadWrapper
block|{
public|public:
DECL|function|NativeThreadWrapper
name|NativeThreadWrapper
parameter_list|()
member_init_list|:
name|qthread
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|waitForStop
argument_list|(
literal|false
argument_list|)
block|{}
name|void
name|start
parameter_list|(
name|FunctionPointer
name|functionPointer
init|=
name|noop
parameter_list|,
name|void
modifier|*
name|data
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|startAndWait
parameter_list|(
name|FunctionPointer
name|functionPointer
init|=
name|noop
parameter_list|,
name|void
modifier|*
name|data
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|join
parameter_list|()
function_decl|;
DECL|function|setWaitForStop
name|void
name|setWaitForStop
parameter_list|()
block|{
name|waitForStop
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
function_decl|;
DECL|member|nativeThreadHandle
name|ThreadHandle
name|nativeThreadHandle
decl_stmt|;
DECL|member|qthread
name|QThread
modifier|*
name|qthread
decl_stmt|;
DECL|member|startCondition
name|QWaitCondition
name|startCondition
decl_stmt|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|waitForStop
name|bool
name|waitForStop
decl_stmt|;
DECL|member|stopCondition
name|QWaitCondition
name|stopCondition
decl_stmt|;
protected|protected:
specifier|static
name|void
modifier|*
name|runUnix
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
specifier|static
name|unsigned
name|WIN_FIX_STDCALL
name|runWin
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
DECL|member|functionPointer
name|FunctionPointer
name|functionPointer
decl_stmt|;
DECL|member|data
name|void
modifier|*
name|data
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|start
name|void
name|NativeThreadWrapper
operator|::
name|start
parameter_list|(
name|FunctionPointer
name|functionPointer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|this
operator|->
name|functionPointer
operator|=
name|functionPointer
expr_stmt|;
name|this
operator|->
name|data
operator|=
name|data
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_UNIX
specifier|const
name|int
name|state
init|=
name|pthread_create
argument_list|(
operator|&
name|nativeThreadHandle
argument_list|,
literal|0
argument_list|,
name|NativeThreadWrapper
operator|::
name|runUnix
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|state
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|nativeThreadHandle
operator|=
name|CreateThread
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
operator|(
name|LPTHREAD_START_ROUTINE
operator|)
name|NativeThreadWrapper
operator|::
name|runWin
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_WIN
name|unsigned
name|thrdid
init|=
literal|0
decl_stmt|;
name|nativeThreadHandle
operator|=
operator|(
name|Qt
operator|::
name|HANDLE
operator|)
name|_beginthreadex
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|,
name|NativeThreadWrapper
operator|::
name|runWin
argument_list|,
name|this
argument_list|,
literal|0
argument_list|,
operator|&
name|thrdid
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|startAndWait
name|void
name|NativeThreadWrapper
operator|::
name|startAndWait
parameter_list|(
name|FunctionPointer
name|functionPointer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|start
argument_list|(
name|functionPointer
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|startCondition
operator|.
name|wait
argument_list|(
name|locker
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|join
name|void
name|NativeThreadWrapper
operator|::
name|join
parameter_list|()
block|{
if|#
directive|if
name|defined
name|Q_OS_UNIX
name|pthread_join
argument_list|(
name|nativeThreadHandle
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_WIN
name|WaitForSingleObject
argument_list|(
name|nativeThreadHandle
argument_list|,
name|INFINITE
argument_list|)
expr_stmt|;
name|CloseHandle
argument_list|(
name|nativeThreadHandle
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|runUnix
name|void
modifier|*
name|NativeThreadWrapper
operator|::
name|runUnix
parameter_list|(
name|void
modifier|*
name|that
parameter_list|)
block|{
name|NativeThreadWrapper
modifier|*
name|nativeThreadWrapper
init|=
cast|reinterpret_cast
argument_list|<
name|NativeThreadWrapper
operator|*
argument_list|>
argument_list|(
name|that
argument_list|)
decl_stmt|;
comment|// Adopt thread, create QThread object.
name|nativeThreadWrapper
operator|->
name|qthread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
comment|// Release main thread.
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|nativeThreadWrapper
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|nativeThreadWrapper
operator|->
name|startCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
comment|// Run function.
name|nativeThreadWrapper
operator|->
name|functionPointer
argument_list|(
name|nativeThreadWrapper
operator|->
name|data
argument_list|)
expr_stmt|;
comment|// Wait for stop.
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|nativeThreadWrapper
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|nativeThreadWrapper
operator|->
name|waitForStop
condition|)
name|nativeThreadWrapper
operator|->
name|stopCondition
operator|.
name|wait
argument_list|(
name|lock
operator|.
name|mutex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|runWin
name|unsigned
name|WIN_FIX_STDCALL
name|NativeThreadWrapper
operator|::
name|runWin
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
block|{
name|runUnix
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|stop
name|void
name|NativeThreadWrapper
operator|::
name|stop
parameter_list|()
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|waitForStop
operator|=
literal|false
expr_stmt|;
name|stopCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|threadAdoptedOk
name|bool
name|threadAdoptedOk
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mainThread
name|QThread
modifier|*
name|mainThread
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|testNativeThreadAdoption
name|void
name|testNativeThreadAdoption
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{
name|threadAdoptedOk
operator|=
operator|(
name|QThread
operator|::
name|currentThreadId
argument_list|()
operator|!=
literal|0
operator|&&
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
literal|0
operator|&&
name|QThread
operator|::
name|currentThread
argument_list|()
operator|!=
name|mainThread
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nativeThreadAdoption
name|void
name|tst_QThread
operator|::
name|nativeThreadAdoption
parameter_list|()
block|{
name|threadAdoptedOk
operator|=
literal|false
expr_stmt|;
name|mainThread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|startAndWait
argument_list|(
name|testNativeThreadAdoption
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nativeThread
operator|.
name|qthread
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|threadAdoptedOk
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadAffinityFunction
name|void
name|adoptedThreadAffinityFunction
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|QThread
modifier|*
modifier|*
name|affinity
init|=
cast|reinterpret_cast
argument_list|<
name|QThread
operator|*
operator|*
argument_list|>
argument_list|(
name|arg
argument_list|)
decl_stmt|;
name|QThread
modifier|*
name|current
init|=
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
name|affinity
index|[
literal|0
index|]
operator|=
name|current
expr_stmt|;
name|affinity
index|[
literal|1
index|]
operator|=
name|current
operator|->
name|thread
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadAffinity
name|void
name|tst_QThread
operator|::
name|adoptedThreadAffinity
parameter_list|()
block|{
name|QThread
modifier|*
name|affinity
index|[
literal|2
index|]
init|=
block|{
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|NativeThreadWrapper
name|thread
decl_stmt|;
name|thread
operator|.
name|startAndWait
argument_list|(
name|adoptedThreadAffinityFunction
argument_list|,
name|affinity
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// adopted thread should have affinity to itself
name|QCOMPARE
argument_list|(
name|affinity
index|[
literal|0
index|]
argument_list|,
name|affinity
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadSetPriority
name|void
name|tst_QThread
operator|::
name|adoptedThreadSetPriority
parameter_list|()
block|{
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
comment|// change the priority of a running thread
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|InheritPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|IdlePriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|LowestPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|HighestPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|qthread
operator|->
name|setPriority
argument_list|(
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|priority
argument_list|()
argument_list|,
name|QThread
operator|::
name|TimeCriticalPriority
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadExit
name|void
name|tst_QThread
operator|::
name|adoptedThreadExit
parameter_list|()
block|{
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|nativeThread
operator|.
name|qthread
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|nativeThread
operator|.
name|qthread
operator|->
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|nativeThread
operator|.
name|qthread
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadExecFunction
name|void
name|adoptedThreadExecFunction
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{
name|QThread
modifier|*
specifier|const
name|adoptedThread
init|=
name|QThread
operator|::
name|currentThread
argument_list|()
decl_stmt|;
name|QEventLoop
name|eventLoop
argument_list|(
name|adoptedThread
argument_list|)
decl_stmt|;
specifier|const
name|int
name|code
init|=
literal|1
decl_stmt|;
name|Exit_Object
name|o
decl_stmt|;
name|o
operator|.
name|thread
operator|=
name|adoptedThread
expr_stmt|;
name|o
operator|.
name|code
operator|=
name|code
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|result
init|=
name|eventLoop
operator|.
name|exec
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadExec
name|void
name|tst_QThread
operator|::
name|adoptedThreadExec
parameter_list|()
block|{
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|start
argument_list|(
name|adoptedThreadExecFunction
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Test that you get the finished signal when an adopted thread exits. */
end_comment
begin_function
DECL|function|adoptedThreadFinished
name|void
name|tst_QThread
operator|::
name|adoptedThreadFinished
parameter_list|()
block|{
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|startAndWait
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThread
operator|.
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptedThreadExecFinished
name|void
name|tst_QThread
operator|::
name|adoptedThreadExecFinished
parameter_list|()
block|{
name|NativeThreadWrapper
name|nativeThread
decl_stmt|;
name|nativeThread
operator|.
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|startAndWait
argument_list|(
name|adoptedThreadExecFunction
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThread
operator|.
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nativeThread
operator|.
name|stop
argument_list|()
expr_stmt|;
name|nativeThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptMultipleThreads
name|void
name|tst_QThread
operator|::
name|adoptMultipleThreads
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Windows CE is not capable of handling that many threads. On the emulator it is dead with 26 threads already.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|int
name|numThreads
init|=
literal|20
decl_stmt|;
else|#
directive|else
comment|// need to test lots of threads, so that we exceed MAXIMUM_WAIT_OBJECTS in qt_adopted_thread_watcher()
specifier|const
name|int
name|numThreads
init|=
literal|200
decl_stmt|;
endif|#
directive|endif
else|#
directive|else
specifier|const
name|int
name|numThreads
init|=
literal|5
decl_stmt|;
endif|#
directive|endif
name|QVector
argument_list|<
name|NativeThreadWrapper
modifier|*
argument_list|>
name|nativeThreads
decl_stmt|;
name|SignalRecorder
name|recorder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|nativeThreads
operator|.
name|append
argument_list|(
operator|new
name|NativeThreadWrapper
argument_list|()
argument_list|)
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|startAndWait
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|recorder
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThreads
operator|.
name|at
argument_list|(
name|numThreads
operator|-
literal|1
argument_list|)
operator|->
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|stop
argument_list|()
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|join
argument_list|()
expr_stmt|;
operator|delete
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|recorder
operator|.
name|activationCount
operator|.
name|load
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|adoptMultipleThreadsOverlap
name|void
name|tst_QThread
operator|::
name|adoptMultipleThreadsOverlap
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// Windows CE is not capable of handling that many threads. On the emulator it is dead with 26 threads already.
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|int
name|numThreads
init|=
literal|20
decl_stmt|;
else|#
directive|else
comment|// need to test lots of threads, so that we exceed MAXIMUM_WAIT_OBJECTS in qt_adopted_thread_watcher()
specifier|const
name|int
name|numThreads
init|=
literal|200
decl_stmt|;
endif|#
directive|endif
else|#
directive|else
specifier|const
name|int
name|numThreads
init|=
literal|5
decl_stmt|;
endif|#
directive|endif
name|QVector
argument_list|<
name|NativeThreadWrapper
modifier|*
argument_list|>
name|nativeThreads
decl_stmt|;
name|SignalRecorder
name|recorder
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|nativeThreads
operator|.
name|append
argument_list|(
operator|new
name|NativeThreadWrapper
argument_list|()
argument_list|)
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|setWaitForStop
argument_list|()
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|startCondition
operator|.
name|wait
argument_list|(
operator|&
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|mutex
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|recorder
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|QObject
operator|::
name|connect
argument_list|(
name|nativeThreads
operator|.
name|at
argument_list|(
name|numThreads
operator|-
literal|1
argument_list|)
operator|->
name|qthread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|stop
argument_list|()
expr_stmt|;
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|join
argument_list|()
expr_stmt|;
operator|delete
name|nativeThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|recorder
operator|.
name|activationCount
operator|.
name|load
argument_list|()
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WINCE
end_ifndef
begin_comment
comment|// Disconnects on WinCE
end_comment
begin_function
DECL|function|stressTest
name|void
name|tst_QThread
operator|::
name|stressTest
parameter_list|()
block|{
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|<
name|one_minute
condition|)
block|{
name|Current_Thread
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|wait
argument_list|(
name|one_minute
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|Syncronizer
class|class
name|Syncronizer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|setProp
name|void
name|setProp
parameter_list|(
name|int
name|p
parameter_list|)
block|{
if|if
condition|(
name|m_prop
operator|!=
name|p
condition|)
block|{
name|m_prop
operator|=
name|p
expr_stmt|;
emit|emit
name|propChanged
argument_list|(
name|p
argument_list|)
emit|;
block|}
block|}
signals|signals:
name|void
name|propChanged
parameter_list|(
name|int
parameter_list|)
function_decl|;
public|public:
DECL|function|Syncronizer
name|Syncronizer
parameter_list|()
member_init_list|:
name|m_prop
argument_list|(
literal|42
argument_list|)
block|{}
DECL|member|m_prop
name|int
name|m_prop
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|exitAndStart
name|void
name|tst_QThread
operator|::
name|exitAndStart
parameter_list|()
block|{
name|QThread
name|thread
decl_stmt|;
name|thread
operator|.
name|exit
argument_list|(
literal|555
argument_list|)
expr_stmt|;
comment|//should do nothing
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//test that the thread is running by executing queued connected signal there
name|Syncronizer
name|sync1
decl_stmt|;
name|sync1
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|Syncronizer
name|sync2
decl_stmt|;
name|sync2
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|sync2
argument_list|,
name|SIGNAL
argument_list|(
name|propChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|sync1
argument_list|,
name|SLOT
argument_list|(
name|setProp
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|sync1
argument_list|,
name|SIGNAL
argument_list|(
name|propChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|thread
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|sync2
argument_list|,
literal|"setProp"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|89
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|thread
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sync2
operator|.
name|m_prop
argument_list|,
literal|89
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sync1
operator|.
name|m_prop
argument_list|,
literal|89
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exitAndExec
name|void
name|tst_QThread
operator|::
name|exitAndExec
parameter_list|()
block|{
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
public|public:
name|QSemaphore
name|sem1
decl_stmt|;
name|QSemaphore
name|sem2
decl_stmt|;
specifier|volatile
name|int
name|value
decl_stmt|;
name|void
name|run
parameter_list|()
block|{
name|sem1
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|value
operator|=
name|exec
argument_list|()
expr_stmt|;
comment|//First entrence
name|sem2
operator|.
name|release
argument_list|()
expr_stmt|;
name|value
operator|=
name|exec
argument_list|()
expr_stmt|;
comment|// Second loop
block|}
block|}
class|;
name|Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|exit
argument_list|(
literal|556
argument_list|)
expr_stmt|;
name|thread
operator|.
name|sem1
operator|.
name|release
argument_list|()
expr_stmt|;
comment|//should exit the first loop
name|thread
operator|.
name|sem2
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|int
name|v
init|=
name|thread
operator|.
name|value
decl_stmt|;
name|QCOMPARE
argument_list|(
name|v
argument_list|,
literal|556
argument_list|)
expr_stmt|;
comment|//test that the thread is running by executing queued connected signal there
name|Syncronizer
name|sync1
decl_stmt|;
name|sync1
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|Syncronizer
name|sync2
decl_stmt|;
name|sync2
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|sync2
argument_list|,
name|SIGNAL
argument_list|(
name|propChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|sync1
argument_list|,
name|SLOT
argument_list|(
name|setProp
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|sync1
argument_list|,
name|SIGNAL
argument_list|(
name|propChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|thread
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|sync2
argument_list|,
literal|"setProp"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|89
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|thread
operator|.
name|wait
argument_list|(
literal|10
argument_list|)
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sync2
operator|.
name|m_prop
argument_list|,
literal|89
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sync1
operator|.
name|m_prop
argument_list|,
literal|89
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectThreadFinishedSignalToObjectDeleteLaterSlot
name|void
name|tst_QThread
operator|::
name|connectThreadFinishedSignalToObjectDeleteLaterSlot
parameter_list|()
block|{
name|QThread
name|thread
decl_stmt|;
name|QObject
modifier|*
name|object
init|=
operator|new
name|QObject
decl_stmt|;
name|QPointer
argument_list|<
name|QObject
argument_list|>
name|p
init|=
name|object
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|thread
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|object
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|object
operator|->
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|p
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Waiting_Thread
class|class
name|Waiting_Thread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|enumerator|WaitTime
enum|enum
block|{
name|WaitTime
init|=
literal|800
block|}
enum|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|cond1
name|QWaitCondition
name|cond1
decl_stmt|;
DECL|member|cond2
name|QWaitCondition
name|cond2
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|cond1
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|cond2
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
name|WaitTime
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|wait2
name|void
name|tst_QThread
operator|::
name|wait2
parameter_list|()
block|{
name|QElapsedTimer
name|timer
decl_stmt|;
name|Waiting_Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|wait
argument_list|(
name|Waiting_Thread
operator|::
name|WaitTime
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
comment|// On Windows, we sometimes get (WaitTime - 1).
name|QVERIFY2
argument_list|(
name|elapsed
operator|>=
name|Waiting_Thread
operator|::
name|WaitTime
operator|-
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"elapsed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|elapsed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|cond1
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
comment|/*Waiting_Thread::WaitTime * 1.4*/
argument_list|)
argument_list|)
expr_stmt|;
name|elapsed
operator|=
name|timer
operator|.
name|elapsed
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|elapsed
operator|-
name|Waiting_Thread
operator|::
name|WaitTime
operator|>=
operator|-
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"elapsed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|elapsed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SlowSlotObject
class|class
name|SlowSlotObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
name|cond
decl_stmt|;
public|public
name|slots
public|:
DECL|function|slowSlot
name|void
name|slowSlot
parameter_list|()
block|{
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|wait3_slowDestructor
name|void
name|tst_QThread
operator|::
name|wait3_slowDestructor
parameter_list|()
block|{
name|SlowSlotObject
name|slow
decl_stmt|;
name|QThread
name|thread
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|slow
argument_list|,
name|SLOT
argument_list|(
name|slowSlot
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
enum|enum
block|{
name|WaitTime
init|=
literal|1800
block|}
enum|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|quit
argument_list|()
expr_stmt|;
comment|//the quit function will cause the thread to finish and enter the slowSlot that is blocking
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|wait
argument_list|(
name|Waiting_Thread
operator|::
name|WaitTime
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|elapsed
operator|>=
name|Waiting_Thread
operator|::
name|WaitTime
operator|-
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"elapsed: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|elapsed
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|slow
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
comment|//now the thread should finish quickly
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
name|one_minute
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyFinishRace
name|void
name|tst_QThread
operator|::
name|destroyFinishRace
parameter_list|()
block|{
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
name|void
name|run
parameter_list|()
block|{}
block|}
class|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|Thread
modifier|*
name|thr
init|=
operator|new
name|Thread
decl_stmt|;
name|connect
argument_list|(
name|thr
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|thr
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QThread
argument_list|>
name|weak
argument_list|(
cast|static_cast
argument_list|<
name|QThread
operator|*
argument_list|>
argument_list|(
name|thr
argument_list|)
argument_list|)
decl_stmt|;
name|thr
operator|->
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|weak
condition|)
block|{
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|startFinishRace
name|void
name|tst_QThread
operator|::
name|startFinishRace
parameter_list|()
block|{
class|class
name|Thread
super|:
specifier|public
name|QThread
block|{
public|public:
name|Thread
parameter_list|()
member_init_list|:
name|i
argument_list|(
literal|50
argument_list|)
block|{}
name|void
name|run
parameter_list|()
block|{
name|i
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|i
condition|)
name|disconnect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|i
decl_stmt|;
block|}
class|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thr
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thr
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|thr
argument_list|,
name|SLOT
argument_list|(
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thr
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|thr
operator|.
name|isFinished
argument_list|()
operator|||
name|thr
operator|.
name|i
operator|!=
literal|0
condition|)
block|{
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|thr
operator|.
name|i
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|startAndQuitCustomEventLoop
name|void
name|tst_QThread
operator|::
name|startAndQuitCustomEventLoop
parameter_list|()
block|{
struct|struct
name|Thread
super|:
name|QThread
block|{
name|void
name|run
parameter_list|()
block|{
name|QEventLoop
argument_list|()
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|quit
argument_list|()
expr_stmt|;
name|t
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|FinishedTestObject
class|class
name|FinishedTestObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|FinishedTestObject
name|FinishedTestObject
parameter_list|()
member_init_list|:
name|ok
argument_list|(
literal|false
argument_list|)
block|{}
DECL|member|ok
name|bool
name|ok
decl_stmt|;
public|public
name|slots
public|:
DECL|function|slotFinished
name|void
name|slotFinished
parameter_list|()
block|{
name|QThread
modifier|*
name|t
init|=
name|qobject_cast
argument_list|<
name|QThread
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|ok
operator|=
name|t
operator|&&
name|t
operator|->
name|isFinished
argument_list|()
operator|&&
operator|!
name|t
operator|->
name|isRunning
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|isRunningInFinished
name|void
name|tst_QThread
operator|::
name|isRunningInFinished
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|QThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|FinishedTestObject
name|localObject
decl_stmt|;
name|FinishedTestObject
name|inThreadObject
decl_stmt|;
name|localObject
operator|.
name|setObjectName
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
name|inThreadObject
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|localObject
argument_list|,
name|SLOT
argument_list|(
name|slotFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|inThreadObject
argument_list|,
name|SLOT
argument_list|(
name|slotFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|thread
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|localObject
operator|.
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|inThreadObject
operator|.
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_CORE_EXPORT
name|uint
name|qGlobalPostedEventsCount
parameter_list|()
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|DummyEventDispatcher
class|class
name|DummyEventDispatcher
super|:
specifier|public
name|QAbstractEventDispatcher
block|{
public|public:
DECL|function|DummyEventDispatcher
name|DummyEventDispatcher
parameter_list|()
member_init_list|:
name|QAbstractEventDispatcher
argument_list|()
member_init_list|,
name|visited
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|processEvents
name|bool
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
parameter_list|)
block|{
name|visited
operator|=
literal|true
expr_stmt|;
emit|emit
name|awake
argument_list|()
emit|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|hasPendingEvents
name|bool
name|hasPendingEvents
parameter_list|()
block|{
return|return
name|qGlobalPostedEventsCount
argument_list|()
return|;
block|}
DECL|function|registerSocketNotifier
name|void
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|unregisterSocketNotifier
name|void
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|registerTimer
name|void
name|registerTimer
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|Qt
operator|::
name|TimerType
parameter_list|,
name|QObject
modifier|*
parameter_list|)
block|{}
DECL|function|unregisterTimer
name|bool
name|unregisterTimer
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterTimers
name|bool
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|registeredTimers
name|QList
argument_list|<
name|TimerInfo
argument_list|>
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QList
argument_list|<
name|TimerInfo
argument_list|>
argument_list|()
return|;
block|}
DECL|function|remainingTime
name|int
name|remainingTime
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|function|wakeUp
name|void
name|wakeUp
parameter_list|()
block|{}
DECL|function|interrupt
name|void
name|interrupt
parameter_list|()
block|{}
DECL|function|flush
name|void
name|flush
parameter_list|()
block|{}
ifdef|#
directive|ifdef
name|Q_OS_WIN
DECL|function|registerEventNotifier
name|bool
name|registerEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterEventNotifier
name|void
name|unregisterEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{ }
endif|#
directive|endif
DECL|member|visited
name|bool
name|visited
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ThreadObj
class|class
name|ThreadObj
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|visit
name|void
name|visit
parameter_list|()
block|{
emit|emit
name|visited
argument_list|()
emit|;
block|}
signals|signals:
name|void
name|visited
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|customEventDispatcher
name|void
name|tst_QThread
operator|::
name|customEventDispatcher
parameter_list|()
block|{
name|QThread
name|thr
decl_stmt|;
comment|// there should be no ED yet
name|QVERIFY
argument_list|(
operator|!
name|thr
operator|.
name|eventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|DummyEventDispatcher
modifier|*
name|ed
init|=
operator|new
name|DummyEventDispatcher
decl_stmt|;
name|thr
operator|.
name|setEventDispatcher
argument_list|(
name|ed
argument_list|)
expr_stmt|;
comment|// the new ED should be set
name|QCOMPARE
argument_list|(
name|thr
operator|.
name|eventDispatcher
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
comment|// test the alternative API of QAbstractEventDispatcher
name|QCOMPARE
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|(
operator|&
name|thr
argument_list|)
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|thr
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start() should not overwrite the ED
name|QCOMPARE
argument_list|(
name|thr
operator|.
name|eventDispatcher
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|ThreadObj
name|obj
decl_stmt|;
name|obj
operator|.
name|moveToThread
argument_list|(
operator|&
name|thr
argument_list|)
expr_stmt|;
comment|// move was successful?
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|thread
argument_list|()
argument_list|,
operator|&
name|thr
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|obj
argument_list|,
name|SIGNAL
argument_list|(
name|visited
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|obj
argument_list|,
literal|"visit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// test that the ED has really been used
name|QVERIFY
argument_list|(
name|ed
operator|->
name|visited
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|DummyEventDispatcher
argument_list|>
name|weak_ed
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|weak_ed
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|thr
operator|.
name|quit
argument_list|()
expr_stmt|;
comment|// wait for thread to be stopped
name|QVERIFY
argument_list|(
name|thr
operator|.
name|wait
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that ED has been deleted
name|QVERIFY
argument_list|(
name|weak_ed
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Job
class|class
name|Job
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Job
name|Job
parameter_list|(
name|QThread
modifier|*
name|thread
parameter_list|,
name|int
name|deleteDelay
parameter_list|,
name|bool
modifier|*
name|flag
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|quitLocker
argument_list|(
name|thread
argument_list|)
member_init_list|,
name|exitThreadCalled
argument_list|(
operator|*
name|flag
argument_list|)
block|{
name|exitThreadCalled
operator|=
literal|false
expr_stmt|;
name|moveToThread
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|deleteDelay
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitThread
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|exitThread
name|void
name|exitThread
parameter_list|()
block|{
name|exitThreadCalled
operator|=
literal|true
expr_stmt|;
name|thread
argument_list|()
operator|->
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|quitLocker
name|QEventLoopLocker
name|quitLocker
decl_stmt|;
public|public:
DECL|member|exitThreadCalled
name|bool
modifier|&
name|exitThreadCalled
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|quitLock
name|void
name|tst_QThread
operator|::
name|quitLock
parameter_list|()
block|{
name|QThread
name|thread
decl_stmt|;
name|bool
name|exitThreadCalled
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Job
modifier|*
name|job
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
operator|&
name|thread
argument_list|,
literal|500
argument_list|,
operator|&
name|exitThreadCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|job
operator|->
name|thread
argument_list|()
argument_list|,
operator|&
name|thread
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|exitThreadCalled
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|job
operator|=
operator|new
name|Job
argument_list|(
operator|&
name|thread
argument_list|,
literal|2500
argument_list|,
operator|&
name|exitThreadCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|job
operator|->
name|thread
argument_list|()
argument_list|,
operator|&
name|thread
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|exitThreadCalled
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QThread
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qthread.moc"
end_include
end_unit
