begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qatomic.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qthread.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_define
DECL|macro|COND_WAIT_TIME
define|#
directive|define
name|COND_WAIT_TIME
value|1
end_define
begin_class
DECL|class|tst_QWaitCondition
class|class
name|tst_QWaitCondition
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|wait_QMutex
parameter_list|()
function_decl|;
name|void
name|wait_QReadWriteLock
parameter_list|()
function_decl|;
name|void
name|wakeOne
parameter_list|()
function_decl|;
name|void
name|wakeAll
parameter_list|()
function_decl|;
name|void
name|wait_RaceCondition
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|iterations
specifier|static
specifier|const
name|int
name|iterations
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ThreadCount
specifier|static
specifier|const
name|int
name|ThreadCount
init|=
literal|4
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Terminate thread in destructor for threads instantiated on the stack
end_comment
begin_class
DECL|class|TerminatingThread
class|class
name|TerminatingThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|TerminatingThread
specifier|explicit
name|TerminatingThread
parameter_list|()
block|{
name|setTerminationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|function|~TerminatingThread
name|~
name|TerminatingThread
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"forcibly terminating "
operator|<<
name|objectName
argument_list|()
expr_stmt|;
name|terminate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|wait_QMutex_Thread_1
class|class
name|wait_QMutex_Thread_1
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
name|cond
decl_stmt|;
DECL|function|wait_QMutex_Thread_1
specifier|inline
name|wait_QMutex_Thread_1
parameter_list|()
block|{ }
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|wait_QMutex_Thread_2
class|class
name|wait_QMutex_Thread_2
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|member|started
name|QWaitCondition
name|started
decl_stmt|;
DECL|member|mutex
name|QMutex
modifier|*
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
modifier|*
name|cond
decl_stmt|;
DECL|function|wait_QMutex_Thread_2
specifier|inline
name|wait_QMutex_Thread_2
parameter_list|()
member_init_list|:
name|mutex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cond
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|mutex
operator|->
name|lock
argument_list|()
expr_stmt|;
name|started
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|->
name|wait
argument_list|(
name|mutex
argument_list|)
expr_stmt|;
name|mutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|wait_QReadWriteLock_Thread_1
class|class
name|wait_QReadWriteLock_Thread_1
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|member|readWriteLock
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
DECL|member|cond
name|QWaitCondition
name|cond
decl_stmt|;
DECL|function|wait_QReadWriteLock_Thread_1
specifier|inline
name|wait_QReadWriteLock_Thread_1
parameter_list|()
block|{ }
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|wait_QReadWriteLock_Thread_2
class|class
name|wait_QReadWriteLock_Thread_2
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|member|started
name|QWaitCondition
name|started
decl_stmt|;
DECL|member|readWriteLock
name|QReadWriteLock
modifier|*
name|readWriteLock
decl_stmt|;
DECL|member|cond
name|QWaitCondition
modifier|*
name|cond
decl_stmt|;
DECL|function|wait_QReadWriteLock_Thread_2
specifier|inline
name|wait_QReadWriteLock_Thread_2
parameter_list|()
member_init_list|:
name|readWriteLock
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cond
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|readWriteLock
operator|->
name|lockForRead
argument_list|()
expr_stmt|;
name|started
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|->
name|wait
argument_list|(
name|readWriteLock
argument_list|)
expr_stmt|;
name|readWriteLock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|wait_QMutex
name|void
name|tst_QWaitCondition
operator|::
name|wait_QMutex
parameter_list|()
block|{
name|int
name|x
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
block|{
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cond
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test multiple threads waiting on separate wait conditions
name|wait_QMutex_Thread_1
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_mutex_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|thread
index|[
name|x
index|]
operator|.
name|mutex
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// test multiple threads waiting on a wait condition
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond1
decl_stmt|,
name|cond2
decl_stmt|;
name|wait_QMutex_Thread_2
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_mutex_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|=
operator|&
name|mutex
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|(
name|x
operator|<
name|ThreadCount
operator|/
literal|2
operator|)
condition|?
operator|&
name|cond1
else|:
operator|&
name|cond2
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond1
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|cond2
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|wait_QReadWriteLock
name|void
name|tst_QWaitCondition
operator|::
name|wait_QReadWriteLock
parameter_list|()
block|{
block|{
name|QReadWriteLock
name|readWriteLock
argument_list|(
name|QReadWriteLock
operator|::
name|Recursive
argument_list|)
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
comment|// ensure that the lockForRead is correctly restored
name|readWriteLock
operator|.
name|lockForRead
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|readWriteLock
operator|.
name|tryLockForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|readWriteLock
operator|.
name|tryLockForRead
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|readWriteLock
operator|.
name|tryLockForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|readWriteLock
operator|.
name|tryLockForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|{
name|QReadWriteLock
name|readWriteLock
argument_list|(
name|QReadWriteLock
operator|::
name|Recursive
argument_list|)
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
comment|// ensure that the lockForWrite is correctly restored
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|readWriteLock
operator|.
name|tryLockForRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|readWriteLock
operator|.
name|tryLockForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|readWriteLock
operator|.
name|tryLockForRead
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|readWriteLock
operator|.
name|tryLockForRead
argument_list|()
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|int
name|x
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
block|{
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
name|readWriteLock
operator|.
name|lockForRead
argument_list|()
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|waitCondition
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|{
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|waitCondition
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|waitCondition
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|{
comment|// test multiple threads waiting on separate wait conditions
name|wait_QReadWriteLock_Thread_1
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_lockforread_"
argument_list|)
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|.
name|lockForRead
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|.
name|lockForRead
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|{
comment|// test multiple threads waiting on a wait condition
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|QWaitCondition
name|cond1
decl_stmt|,
name|cond2
decl_stmt|;
name|wait_QReadWriteLock_Thread_2
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
specifier|const
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_lockforwrite_"
argument_list|)
decl_stmt|;
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|=
operator|&
name|readWriteLock
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|(
name|x
operator|<
name|ThreadCount
operator|/
literal|2
operator|)
condition|?
operator|&
name|cond1
else|:
operator|&
name|cond2
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|cond1
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|cond2
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_class
DECL|class|WakeThreadBase
class|class
name|WakeThreadBase
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|member|count
name|QAtomicInt
modifier|*
name|count
decl_stmt|;
DECL|function|WakeThreadBase
name|WakeThreadBase
parameter_list|()
member_init_list|:
name|count
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{}
block|}
class|;
end_class
begin_class
DECL|class|wake_Thread
class|class
name|wake_Thread
super|:
specifier|public
name|WakeThreadBase
block|{
public|public:
DECL|member|started
name|QWaitCondition
name|started
decl_stmt|;
DECL|member|dummy
name|QWaitCondition
name|dummy
decl_stmt|;
DECL|member|mutex
name|QMutex
modifier|*
name|mutex
decl_stmt|;
DECL|member|cond
name|QWaitCondition
modifier|*
name|cond
decl_stmt|;
DECL|function|wake_Thread
specifier|inline
name|wake_Thread
parameter_list|()
member_init_list|:
name|mutex
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cond
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|sleep
specifier|static
specifier|inline
name|void
name|sleep
parameter_list|(
name|ulong
name|s
parameter_list|)
block|{
name|QThread
operator|::
name|sleep
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|mutex
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|cond
argument_list|)
expr_stmt|;
name|mutex
operator|->
name|lock
argument_list|()
expr_stmt|;
operator|++
operator|*
name|count
expr_stmt|;
name|dummy
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
comment|// this wakeup should be lost
name|started
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
comment|// this one too
name|cond
operator|->
name|wait
argument_list|(
name|mutex
argument_list|)
expr_stmt|;
operator|--
operator|*
name|count
expr_stmt|;
name|mutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|wake_Thread_2
class|class
name|wake_Thread_2
super|:
specifier|public
name|WakeThreadBase
block|{
public|public:
DECL|member|started
name|QWaitCondition
name|started
decl_stmt|;
DECL|member|dummy
name|QWaitCondition
name|dummy
decl_stmt|;
DECL|member|readWriteLock
name|QReadWriteLock
modifier|*
name|readWriteLock
decl_stmt|;
DECL|member|cond
name|QWaitCondition
modifier|*
name|cond
decl_stmt|;
DECL|function|wake_Thread_2
specifier|inline
name|wake_Thread_2
parameter_list|()
member_init_list|:
name|readWriteLock
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|cond
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|sleep
specifier|static
specifier|inline
name|void
name|sleep
parameter_list|(
name|ulong
name|s
parameter_list|)
block|{
name|QThread
operator|::
name|sleep
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|readWriteLock
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|cond
argument_list|)
expr_stmt|;
name|readWriteLock
operator|->
name|lockForWrite
argument_list|()
expr_stmt|;
operator|++
operator|*
name|count
expr_stmt|;
name|dummy
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
comment|// this wakeup should be lost
name|started
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|dummy
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
comment|// this one too
name|cond
operator|->
name|wait
argument_list|(
name|readWriteLock
argument_list|)
expr_stmt|;
operator|--
operator|*
name|count
expr_stmt|;
name|readWriteLock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|wakeOne
name|void
name|tst_QWaitCondition
operator|::
name|wakeOne
parameter_list|()
block|{
name|int
name|x
decl_stmt|;
name|QAtomicInt
name|count
decl_stmt|;
comment|// wake up threads, one at a time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond
decl_stmt|;
comment|// QMutex
name|wake_Thread
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|bool
name|thread_exited
index|[
name|ThreadCount
index|]
decl_stmt|;
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_mutex_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|=
operator|&
name|mutex
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|thread_exited
index|[
name|x
index|]
operator|=
literal|false
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure wakeups are not queued... if nothing is
comment|// waiting at the time of the wakeup, nothing happens
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up threads one at a time
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|exited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|ThreadCount
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|thread_exited
index|[
name|y
index|]
condition|)
continue|continue;
if|if
condition|(
name|thread
index|[
name|y
index|]
operator|.
name|wait
argument_list|(
name|exited
operator|>
literal|0
condition|?
literal|10
else|:
literal|1000
argument_list|)
condition|)
block|{
name|thread_exited
index|[
name|y
index|]
operator|=
literal|true
expr_stmt|;
operator|++
name|exited
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
operator|-
operator|(
name|x
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// QReadWriteLock
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|wake_Thread_2
name|rwthread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|prefix
operator|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_readwritelock_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|rwthread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|=
operator|&
name|readWriteLock
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|thread_exited
index|[
name|x
index|]
operator|=
literal|false
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|rwthread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure wakeups are not queued... if nothing is
comment|// waiting at the time of the wakeup, nothing happens
name|QVERIFY
argument_list|(
operator|!
name|rwthread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up threads one at a time
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rwthread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|exited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|ThreadCount
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|thread_exited
index|[
name|y
index|]
condition|)
continue|continue;
if|if
condition|(
name|rwthread
index|[
name|y
index|]
operator|.
name|wait
argument_list|(
name|exited
operator|>
literal|0
condition|?
literal|10
else|:
literal|1000
argument_list|)
condition|)
block|{
name|thread_exited
index|[
name|y
index|]
operator|=
literal|true
expr_stmt|;
operator|++
name|exited
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
operator|-
operator|(
name|x
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// wake up threads, two at a time
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond
decl_stmt|;
comment|// QMutex
name|wake_Thread
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|bool
name|thread_exited
index|[
name|ThreadCount
index|]
decl_stmt|;
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_mutex2_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|=
operator|&
name|mutex
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|thread_exited
index|[
name|x
index|]
operator|=
literal|false
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure wakeups are not queued... if nothing is
comment|// waiting at the time of the wakeup, nothing happens
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up threads one at a time
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
name|x
operator|+=
literal|2
control|)
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|thread
index|[
name|x
operator|+
literal|1
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|exited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|ThreadCount
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|thread_exited
index|[
name|y
index|]
condition|)
continue|continue;
if|if
condition|(
name|thread
index|[
name|y
index|]
operator|.
name|wait
argument_list|(
name|exited
operator|>
literal|0
condition|?
literal|10
else|:
literal|1000
argument_list|)
condition|)
block|{
name|thread_exited
index|[
name|y
index|]
operator|=
literal|true
expr_stmt|;
operator|++
name|exited
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
operator|-
operator|(
name|x
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// QReadWriteLock
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|wake_Thread_2
name|rwthread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|prefix
operator|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_readwritelock_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|rwthread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|=
operator|&
name|readWriteLock
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|thread_exited
index|[
name|x
index|]
operator|=
literal|false
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|rwthread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure wakeups are not queued... if nothing is
comment|// waiting at the time of the wakeup, nothing happens
name|QVERIFY
argument_list|(
operator|!
name|rwthread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up threads one at a time
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
name|x
operator|+=
literal|2
control|)
block|{
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rwthread
index|[
name|x
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rwthread
index|[
name|x
operator|+
literal|1
index|]
operator|.
name|dummy
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|exited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|ThreadCount
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|thread_exited
index|[
name|y
index|]
condition|)
continue|continue;
if|if
condition|(
name|rwthread
index|[
name|y
index|]
operator|.
name|wait
argument_list|(
name|exited
operator|>
literal|0
condition|?
literal|10
else|:
literal|1000
argument_list|)
condition|)
block|{
name|thread_exited
index|[
name|y
index|]
operator|=
literal|true
expr_stmt|;
operator|++
name|exited
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
operator|-
operator|(
name|x
operator|+
literal|2
operator|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|wakeAll
name|void
name|tst_QWaitCondition
operator|::
name|wakeAll
parameter_list|()
block|{
name|int
name|x
decl_stmt|;
name|QAtomicInt
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond
decl_stmt|;
comment|// QMutex
name|wake_Thread
name|thread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|QString
name|prefix
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_mutex_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|thread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|mutex
operator|=
operator|&
name|mutex
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|thread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|thread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up all threads at once
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|exited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|thread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
condition|)
operator|++
name|exited
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// QReadWriteLock
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|wake_Thread_2
name|rwthread
index|[
name|ThreadCount
index|]
decl_stmt|;
name|prefix
operator|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"_readwritelock_"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
name|rwthread
index|[
name|x
index|]
operator|.
name|setObjectName
argument_list|(
name|prefix
operator|+
name|QString
operator|::
name|number
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|count
operator|=
operator|&
name|count
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|readWriteLock
operator|=
operator|&
name|readWriteLock
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|cond
operator|=
operator|&
name|cond
expr_stmt|;
name|rwthread
index|[
name|x
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for thread to start
name|QVERIFY
argument_list|(
name|rwthread
index|[
name|x
index|]
operator|.
name|started
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
comment|// wake up all threads at once
name|readWriteLock
operator|.
name|lockForWrite
argument_list|()
expr_stmt|;
name|cond
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cond
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|,
name|COND_WAIT_TIME
argument_list|)
argument_list|)
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|exited
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|ThreadCount
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|rwthread
index|[
name|x
index|]
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
condition|)
operator|++
name|exited
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|exited
argument_list|,
name|ThreadCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|wait_RaceConditionThread
class|class
name|wait_RaceConditionThread
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|function|wait_RaceConditionThread
name|wait_RaceConditionThread
parameter_list|(
name|QMutex
modifier|*
name|mutex
parameter_list|,
name|QWaitCondition
modifier|*
name|startup
parameter_list|,
name|QWaitCondition
modifier|*
name|waitCondition
parameter_list|,
name|ulong
name|timeout
init|=
name|ULONG_MAX
parameter_list|)
member_init_list|:
name|timeout
argument_list|(
name|timeout
argument_list|)
member_init_list|,
name|returnValue
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ready
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|mutex
argument_list|(
name|mutex
argument_list|)
member_init_list|,
name|startup
argument_list|(
name|startup
argument_list|)
member_init_list|,
name|waitCondition
argument_list|(
name|waitCondition
argument_list|)
block|{}
DECL|member|timeout
name|unsigned
name|long
name|timeout
decl_stmt|;
DECL|member|returnValue
name|bool
name|returnValue
decl_stmt|;
DECL|member|ready
name|bool
name|ready
decl_stmt|;
DECL|member|mutex
name|QMutex
modifier|*
name|mutex
decl_stmt|;
DECL|member|startup
name|QWaitCondition
modifier|*
name|startup
decl_stmt|;
DECL|member|waitCondition
name|QWaitCondition
modifier|*
name|waitCondition
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|mutex
operator|->
name|lock
argument_list|()
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
name|startup
operator|->
name|wakeOne
argument_list|()
expr_stmt|;
name|returnValue
operator|=
name|waitCondition
operator|->
name|wait
argument_list|(
name|mutex
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|mutex
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|wait_RaceConditionThread_2
class|class
name|wait_RaceConditionThread_2
super|:
specifier|public
name|TerminatingThread
block|{
public|public:
DECL|function|wait_RaceConditionThread_2
name|wait_RaceConditionThread_2
parameter_list|(
name|QReadWriteLock
modifier|*
name|readWriteLock
parameter_list|,
name|QWaitCondition
modifier|*
name|startup
parameter_list|,
name|QWaitCondition
modifier|*
name|waitCondition
parameter_list|,
name|ulong
name|timeout
init|=
name|ULONG_MAX
parameter_list|)
member_init_list|:
name|timeout
argument_list|(
name|timeout
argument_list|)
member_init_list|,
name|returnValue
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ready
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|readWriteLock
argument_list|(
name|readWriteLock
argument_list|)
member_init_list|,
name|startup
argument_list|(
name|startup
argument_list|)
member_init_list|,
name|waitCondition
argument_list|(
name|waitCondition
argument_list|)
block|{ }
DECL|member|timeout
name|unsigned
name|long
name|timeout
decl_stmt|;
DECL|member|returnValue
name|bool
name|returnValue
decl_stmt|;
DECL|member|ready
name|bool
name|ready
decl_stmt|;
DECL|member|readWriteLock
name|QReadWriteLock
modifier|*
name|readWriteLock
decl_stmt|;
DECL|member|startup
name|QWaitCondition
modifier|*
name|startup
decl_stmt|;
DECL|member|waitCondition
name|QWaitCondition
modifier|*
name|waitCondition
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|readWriteLock
operator|->
name|lockForWrite
argument_list|()
expr_stmt|;
name|ready
operator|=
literal|true
expr_stmt|;
name|startup
operator|->
name|wakeOne
argument_list|()
expr_stmt|;
name|returnValue
operator|=
name|waitCondition
operator|->
name|wait
argument_list|(
name|readWriteLock
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|readWriteLock
operator|->
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|wait_RaceCondition
name|void
name|tst_QWaitCondition
operator|::
name|wait_RaceCondition
parameter_list|()
block|{
block|{
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|startup
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
name|wait_RaceConditionThread
name|timeoutThread
argument_list|(
operator|&
name|mutex
argument_list|,
operator|&
name|startup
argument_list|,
operator|&
name|waitCondition
argument_list|,
literal|1000
argument_list|)
decl_stmt|,
name|waitingThread1
argument_list|(
operator|&
name|mutex
argument_list|,
operator|&
name|startup
argument_list|,
operator|&
name|waitCondition
argument_list|)
decl_stmt|;
name|timeoutThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitingThread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// wait for the threads to start up
while|while
condition|(
operator|!
name|timeoutThread
operator|.
name|ready
operator|||
operator|!
name|waitingThread1
operator|.
name|ready
condition|)
block|{
name|startup
operator|.
name|wait
argument_list|(
operator|&
name|mutex
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|timeoutThread
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeoutThread
operator|.
name|returnValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitingThread1
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitingThread1
operator|.
name|returnValue
argument_list|)
expr_stmt|;
block|}
block|{
name|QReadWriteLock
name|readWriteLock
decl_stmt|;
name|QWaitCondition
name|startup
decl_stmt|;
name|QWaitCondition
name|waitCondition
decl_stmt|;
name|wait_RaceConditionThread_2
name|timeoutThread
argument_list|(
operator|&
name|readWriteLock
argument_list|,
operator|&
name|startup
argument_list|,
operator|&
name|waitCondition
argument_list|,
literal|1000
argument_list|)
decl_stmt|,
name|waitingThread1
argument_list|(
operator|&
name|readWriteLock
argument_list|,
operator|&
name|startup
argument_list|,
operator|&
name|waitCondition
argument_list|)
decl_stmt|;
name|timeoutThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitingThread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|readWriteLock
operator|.
name|lockForRead
argument_list|()
expr_stmt|;
comment|// wait for the threads to start up
while|while
condition|(
operator|!
name|timeoutThread
operator|.
name|ready
operator|||
operator|!
name|waitingThread1
operator|.
name|ready
condition|)
block|{
name|startup
operator|.
name|wait
argument_list|(
operator|&
name|readWriteLock
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|waitCondition
operator|.
name|wakeOne
argument_list|()
expr_stmt|;
name|readWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|timeoutThread
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeoutThread
operator|.
name|returnValue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitingThread1
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitingThread1
operator|.
name|returnValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QWaitCondition
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qwaitcondition.moc"
end_include
end_unit
