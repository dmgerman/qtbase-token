begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<private/qdbusmetaobject_p.h>
end_include
begin_class
DECL|class|tst_QDBusMetaObject
class|class
name|tst_QDBusMetaObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|map
name|QHash
argument_list|<
name|QString
argument_list|,
name|QDBusMetaObject
modifier|*
argument_list|>
name|map
decl_stmt|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|types_data
parameter_list|()
function_decl|;
name|void
name|types
parameter_list|()
function_decl|;
name|void
name|methods_data
parameter_list|()
function_decl|;
name|void
name|methods
parameter_list|()
function_decl|;
name|void
name|_signals_data
parameter_list|()
function_decl|;
name|void
name|_signals
parameter_list|()
function_decl|;
name|void
name|properties_data
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|StringPair
typedef|typedef
name|QPair
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|StringPair
typedef|;
end_typedef
begin_struct
DECL|struct|Struct1
struct|struct
name|Struct1
block|{
block|}
struct|;
end_struct
begin_comment
DECL|struct|Struct1
comment|// (s)
end_comment
begin_struct
DECL|struct|Struct4
struct|struct
name|Struct4
comment|// (ssa(ss)sayasx)
block|{
DECL|member|m1
name|QString
name|m1
decl_stmt|;
DECL|member|m2
name|QString
name|m2
decl_stmt|;
DECL|member|m3
name|QList
argument_list|<
name|StringPair
argument_list|>
name|m3
decl_stmt|;
DECL|member|m4
name|QString
name|m4
decl_stmt|;
DECL|member|m5
name|QByteArray
name|m5
decl_stmt|;
DECL|member|m6
name|QStringList
name|m6
decl_stmt|;
DECL|member|m7
name|qlonglong
name|m7
decl_stmt|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Struct1
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Struct4
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|StringPair
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<Struct1>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<Struct4>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|const QMetaObject*
argument_list|)
end_macro
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
specifier|const
name|Struct1
modifier|&
parameter_list|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
specifier|const
name|StringPair
modifier|&
name|s
parameter_list|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|s
operator|.
name|first
operator|<<
name|s
operator|.
name|second
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDBusArgument
modifier|&
name|operator
name|<<
parameter_list|(
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
specifier|const
name|Struct4
modifier|&
name|s
parameter_list|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|s
operator|.
name|m1
operator|<<
name|s
operator|.
name|m2
operator|<<
name|s
operator|.
name|m3
operator|<<
name|s
operator|.
name|m4
operator|<<
name|s
operator|.
name|m5
operator|<<
name|s
operator|.
name|m6
operator|<<
name|s
operator|.
name|m7
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
name|Struct1
modifier|&
parameter_list|)
block|{
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
name|Struct4
modifier|&
parameter_list|)
block|{
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|operator >>
specifier|const
name|QDBusArgument
modifier|&
name|operator
name|>>
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
name|StringPair
modifier|&
parameter_list|)
block|{
return|return
name|arg
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
DECL|function|initTestCase
name|void
name|tst_QDBusMetaObject
operator|::
name|initTestCase
parameter_list|()
block|{
name|qDBusRegisterMetaType
argument_list|<
name|Struct1
argument_list|>
argument_list|()
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|Struct4
argument_list|>
argument_list|()
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|StringPair
argument_list|>
argument_list|()
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|Struct1
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|qDBusRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|Struct4
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QDBusMetaObject
operator|::
name|init
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// test classes
end_comment
begin_class
DECL|class|TypesTest1
class|class
name|TypesTest1
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|uchar
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest1_xml
specifier|const
name|char
name|TypesTest1_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"y\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest2
class|class
name|TypesTest2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|bool
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest2_xml
specifier|const
name|char
name|TypesTest2_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"b\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest3
class|class
name|TypesTest3
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|short
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest3_xml
specifier|const
name|char
name|TypesTest3_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"n\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest4
class|class
name|TypesTest4
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|ushort
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest4_xml
specifier|const
name|char
name|TypesTest4_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"q\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest5
class|class
name|TypesTest5
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest5_xml
specifier|const
name|char
name|TypesTest5_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"i\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest6
class|class
name|TypesTest6
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|uint
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest6_xml
specifier|const
name|char
name|TypesTest6_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"u\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest7
class|class
name|TypesTest7
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|qlonglong
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest7_xml
specifier|const
name|char
name|TypesTest7_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"x\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest8
class|class
name|TypesTest8
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|qulonglong
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest8_xml
specifier|const
name|char
name|TypesTest8_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"t\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest9
class|class
name|TypesTest9
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|double
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest9_xml
specifier|const
name|char
name|TypesTest9_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"d\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest10
class|class
name|TypesTest10
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QString
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest10_xml
specifier|const
name|char
name|TypesTest10_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"s\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest11
class|class
name|TypesTest11
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QDBusObjectPath
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest11_xml
specifier|const
name|char
name|TypesTest11_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"o\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest12
class|class
name|TypesTest12
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QDBusSignature
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest12_xml
specifier|const
name|char
name|TypesTest12_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"g\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest13
class|class
name|TypesTest13
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QDBusVariant
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest13_xml
specifier|const
name|char
name|TypesTest13_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"v\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest14
class|class
name|TypesTest14
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QStringList
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest14_xml
specifier|const
name|char
name|TypesTest14_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"as\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest15
class|class
name|TypesTest15
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QByteArray
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest15_xml
specifier|const
name|char
name|TypesTest15_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"ay\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest16
class|class
name|TypesTest16
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|StringPair
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest16_xml
specifier|const
name|char
name|TypesTest16_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"(ss)\"/>"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"StringPair\"></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest17
class|class
name|TypesTest17
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|Struct1
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest17_xml
specifier|const
name|char
name|TypesTest17_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"(s)\"/>"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"Struct1\"></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest18
class|class
name|TypesTest18
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|Struct4
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest18_xml
specifier|const
name|char
name|TypesTest18_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"(ssa(ss)sayasx)\"/>"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"Struct4\"></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest19
class|class
name|TypesTest19
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QVariantList
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest19_xml
specifier|const
name|char
name|TypesTest19_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"av\"/>"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"QVariantList\"></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TypesTest20
class|class
name|TypesTest20
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|QVariantMap
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|TypesTest20_xml
specifier|const
name|char
name|TypesTest20_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"a{sv}\"/>"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName.Out0\" value=\"QVariantMap\"></signal>"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|types_data
name|void
name|tst_QDBusMetaObject
operator|::
name|types_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"metaobject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"byte"
argument_list|)
operator|<<
operator|&
name|TypesTest1
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest1_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
operator|&
name|TypesTest2
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest2_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short"
argument_list|)
operator|<<
operator|&
name|TypesTest3
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest3_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ushort"
argument_list|)
operator|<<
operator|&
name|TypesTest4
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest4_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
operator|&
name|TypesTest5
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest5_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
operator|&
name|TypesTest6
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest6_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qlonglong"
argument_list|)
operator|<<
operator|&
name|TypesTest7
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest7_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qulonglong"
argument_list|)
operator|<<
operator|&
name|TypesTest8
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest8_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
operator|&
name|TypesTest9
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest9_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QString"
argument_list|)
operator|<<
operator|&
name|TypesTest10
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest10_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDBusObjectPath"
argument_list|)
operator|<<
operator|&
name|TypesTest11
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest11_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDBusSignature"
argument_list|)
operator|<<
operator|&
name|TypesTest12
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest12_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QDBusVariant"
argument_list|)
operator|<<
operator|&
name|TypesTest13
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest13_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QStringList"
argument_list|)
operator|<<
operator|&
name|TypesTest14
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest14_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QByteArray"
argument_list|)
operator|<<
operator|&
name|TypesTest15
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest15_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"StringPair"
argument_list|)
operator|<<
operator|&
name|TypesTest16
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest16_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Struct1"
argument_list|)
operator|<<
operator|&
name|TypesTest17
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest17_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Struct4"
argument_list|)
operator|<<
operator|&
name|TypesTest18
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest18_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QVariantList"
argument_list|)
operator|<<
operator|&
name|TypesTest19
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest19_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QVariantMap"
argument_list|)
operator|<<
operator|&
name|TypesTest20
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|TypesTest20_xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|types
name|void
name|tst_QDBusMetaObject
operator|::
name|types
parameter_list|()
block|{
name|QFETCH
argument_list|(
specifier|const
name|QMetaObject
operator|*
argument_list|,
name|metaobject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// add the rest of the XML tags
name|xml
operator|=
name|QString
argument_list|(
literal|"<node><interface name=\"local.Interface\">%1</interface></node>"
argument_list|)
operator|.
name|arg
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|QDBusError
name|error
decl_stmt|;
name|QMetaObject
modifier|*
name|result
init|=
name|QDBusMetaObject
operator|::
name|createMetaObject
argument_list|(
literal|"local.Interface"
argument_list|,
name|xml
argument_list|,
name|map
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|result
argument_list|,
name|qPrintable
argument_list|(
name|error
operator|.
name|message
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|->
name|enumeratorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|->
name|classInfoCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// compare the meta objects
name|QCOMPARE
argument_list|(
name|result
operator|->
name|methodCount
argument_list|()
operator|-
name|result
operator|->
name|methodOffset
argument_list|()
argument_list|,
name|metaobject
operator|->
name|methodCount
argument_list|()
operator|-
name|metaobject
operator|->
name|methodOffset
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|->
name|propertyCount
argument_list|()
operator|-
name|result
operator|->
name|propertyOffset
argument_list|()
argument_list|,
name|metaobject
operator|->
name|propertyCount
argument_list|()
operator|-
name|metaobject
operator|->
name|propertyOffset
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|metaobject
operator|->
name|methodOffset
argument_list|()
init|;
name|i
operator|<
name|metaobject
operator|->
name|methodCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMetaMethod
name|expected
init|=
name|metaobject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|methodIdx
init|=
name|result
operator|->
name|indexOfMethod
argument_list|(
name|expected
operator|.
name|signature
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|methodIdx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QMetaMethod
name|constructed
init|=
name|result
operator|->
name|method
argument_list|(
name|methodIdx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|constructed
operator|.
name|access
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|expected
operator|.
name|access
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|constructed
operator|.
name|methodType
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|expected
operator|.
name|methodType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|parameterNames
argument_list|()
argument_list|,
name|expected
operator|.
name|parameterNames
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|parameterTypes
argument_list|()
argument_list|,
name|expected
operator|.
name|parameterTypes
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|tag
argument_list|()
argument_list|,
name|expected
operator|.
name|tag
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|typeName
argument_list|()
argument_list|,
name|expected
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|metaobject
operator|->
name|propertyOffset
argument_list|()
init|;
name|i
operator|<
name|metaobject
operator|->
name|propertyCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMetaProperty
name|expected
init|=
name|metaobject
operator|->
name|property
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|propIdx
init|=
name|result
operator|->
name|indexOfProperty
argument_list|(
name|expected
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|propIdx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QMetaProperty
name|constructed
init|=
name|result
operator|->
name|property
argument_list|(
name|propIdx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isDesignable
argument_list|()
argument_list|,
name|expected
operator|.
name|isDesignable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isEditable
argument_list|()
argument_list|,
name|expected
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isEnumType
argument_list|()
argument_list|,
name|expected
operator|.
name|isEnumType
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isFlagType
argument_list|()
argument_list|,
name|expected
operator|.
name|isFlagType
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isReadable
argument_list|()
argument_list|,
name|expected
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isResettable
argument_list|()
argument_list|,
name|expected
operator|.
name|isResettable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isScriptable
argument_list|()
argument_list|,
name|expected
operator|.
name|isScriptable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isStored
argument_list|()
argument_list|,
name|expected
operator|.
name|isStored
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isUser
argument_list|()
argument_list|,
name|expected
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|isWritable
argument_list|()
argument_list|,
name|expected
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|constructed
operator|.
name|typeName
argument_list|()
argument_list|,
name|expected
operator|.
name|typeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|MethodTest1
class|class
name|MethodTest1
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|void
name|method
parameter_list|()
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest1_xml
specifier|const
name|char
name|MethodTest1_xml
index|[]
init|=
literal|"<method name=\"method\" />"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest2
class|class
name|MethodTest2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|void
name|method
parameter_list|(
name|int
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest2_xml
specifier|const
name|char
name|MethodTest2_xml
index|[]
init|=
literal|"<method name=\"method\"><arg direction=\"in\" type=\"i\"/></method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest3
class|class
name|MethodTest3
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|void
name|method
parameter_list|(
name|int
name|input0
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|input0
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest3_xml
specifier|const
name|char
name|MethodTest3_xml
index|[]
init|=
literal|"<method name=\"method\"><arg direction=\"in\" type=\"i\" name=\"input0\"/></method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest4
class|class
name|MethodTest4
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|int
name|method
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest4_xml
specifier|const
name|char
name|MethodTest4_xml
index|[]
init|=
literal|"<method name=\"method\"><arg direction=\"out\" type=\"i\"/></method>"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MethodTest4_xml2
specifier|const
name|char
name|MethodTest4_xml2
index|[]
init|=
literal|"<method name=\"method\"><arg direction=\"out\" type=\"i\" name=\"thisShouldNeverBeSeen\"/></method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest5
class|class
name|MethodTest5
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|int
name|method
parameter_list|(
name|int
name|input0
parameter_list|)
block|{
return|return
name|input0
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest5_xml
specifier|const
name|char
name|MethodTest5_xml
index|[]
init|=
literal|"<method name=\"method\">"
literal|"<arg direction=\"in\" type=\"i\" name=\"input0\"/>"
literal|"<arg direction=\"out\" type=\"i\"/>"
literal|"</method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest6
class|class
name|MethodTest6
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|int
name|method
parameter_list|(
name|int
name|input0
parameter_list|,
name|int
name|input1
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|input0
argument_list|)
expr_stmt|;
return|return
name|input1
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest6_xml
specifier|const
name|char
name|MethodTest6_xml
index|[]
init|=
literal|"<method name=\"method\">"
literal|"<arg direction=\"in\" type=\"i\" name=\"input0\"/>"
literal|"<arg direction=\"out\" type=\"i\"/>"
literal|"<arg direction=\"in\" type=\"i\" name=\"input1\"/>"
literal|"</method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest7
class|class
name|MethodTest7
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|int
name|method
parameter_list|(
name|int
name|input0
parameter_list|,
name|int
name|input1
parameter_list|,
name|int
modifier|&
name|output1
parameter_list|)
block|{
name|output1
operator|=
name|input1
expr_stmt|;
return|return
name|input0
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest7_xml
specifier|const
name|char
name|MethodTest7_xml
index|[]
init|=
literal|"<method name=\"method\">"
literal|"<arg direction=\"in\" type=\"i\" name=\"input0\"/>"
literal|"<arg direction=\"in\" type=\"i\" name=\"input1\"/>"
literal|"<arg direction=\"out\" type=\"i\"/>"
literal|"<arg direction=\"out\" type=\"i\" name=\"output1\"/>"
literal|"</method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest8
class|class
name|MethodTest8
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|int
name|method
parameter_list|(
name|int
name|input0
parameter_list|,
name|int
name|input1
parameter_list|,
name|int
modifier|&
name|output1
parameter_list|,
name|int
modifier|&
name|output2
parameter_list|)
block|{
name|output1
operator|=
name|output2
operator|=
name|input1
expr_stmt|;
return|return
name|input0
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest8_xml
specifier|const
name|char
name|MethodTest8_xml
index|[]
init|=
literal|"<method name=\"method\">"
literal|"<arg direction=\"in\" type=\"i\" name=\"input0\"/>"
literal|"<arg direction=\"in\" type=\"i\" name=\"input1\"/>"
literal|"<arg direction=\"out\" type=\"i\"/>"
literal|"<arg direction=\"out\" type=\"i\" name=\"output1\"/>"
literal|"<arg direction=\"out\" type=\"i\" name=\"output2\"/>"
literal|"</method>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|MethodTest9
class|class
name|MethodTest9
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|method
name|Q_NOREPLY
name|void
name|method
parameter_list|(
name|int
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|MethodTest9_xml
specifier|const
name|char
name|MethodTest9_xml
index|[]
init|=
literal|"<method name=\"method\">"
literal|"<arg direction=\"in\" type=\"i\"/>"
literal|"<annotation name=\"org.freedesktop.DBus.Method.NoReply\" value=\"true\"/>"
literal|"</method>"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|methods_data
name|void
name|tst_QDBusMetaObject
operator|::
name|methods_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"metaobject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"void-void"
argument_list|)
operator|<<
operator|&
name|MethodTest1
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest1_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"void-int"
argument_list|)
operator|<<
operator|&
name|MethodTest2
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest2_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"void-int-with-name"
argument_list|)
operator|<<
operator|&
name|MethodTest3
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest3_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-void"
argument_list|)
operator|<<
operator|&
name|MethodTest4
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest4_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-void2"
argument_list|)
operator|<<
operator|&
name|MethodTest4
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest4_xml2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-int"
argument_list|)
operator|<<
operator|&
name|MethodTest5
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest5_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-int,int"
argument_list|)
operator|<<
operator|&
name|MethodTest6
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest6_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int,int-int,int"
argument_list|)
operator|<<
operator|&
name|MethodTest7
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest7_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int,int,int-int,int"
argument_list|)
operator|<<
operator|&
name|MethodTest8
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest8_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Q_ASYNC"
argument_list|)
operator|<<
operator|&
name|MethodTest9
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|MethodTest9_xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methods
name|void
name|tst_QDBusMetaObject
operator|::
name|methods
parameter_list|()
block|{
name|types
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalTest1
class|class
name|SignalTest1
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|SignalTest1_xml
specifier|const
name|char
name|SignalTest1_xml
index|[]
init|=
literal|"<signal name=\"signal\" />"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SignalTest2
class|class
name|SignalTest2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|SignalTest2_xml
specifier|const
name|char
name|SignalTest2_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"i\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SignalTest3
class|class
name|SignalTest3
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|int
name|output0
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|SignalTest3_xml
specifier|const
name|char
name|SignalTest3_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"i\" name=\"output0\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SignalTest4
class|class
name|SignalTest4
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|signal
parameter_list|(
name|int
name|output0
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|SignalTest4_xml
specifier|const
name|char
name|SignalTest4_xml
index|[]
init|=
literal|"<signal name=\"signal\"><arg type=\"i\" name=\"output0\"/><arg type=\"i\"/></signal>"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|_signals_data
name|void
name|tst_QDBusMetaObject
operator|::
name|_signals_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"metaobject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
operator|&
name|SignalTest1
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|SignalTest1_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
operator|&
name|SignalTest2
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|SignalTest2_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int output0"
argument_list|)
operator|<<
operator|&
name|SignalTest3
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|SignalTest3_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int output0,int"
argument_list|)
operator|<<
operator|&
name|SignalTest4
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|SignalTest4_xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_signals
name|void
name|tst_QDBusMetaObject
operator|::
name|_signals
parameter_list|()
block|{
name|types
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|PropertyTest1
class|class
name|PropertyTest1
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|int
name|property
name|READ
name|property
parameter_list|)
specifier|public
private|:
DECL|function|property
name|int
name|property
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|setProperty
name|void
name|setProperty
parameter_list|(
name|int
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|PropertyTest1_xml
specifier|const
name|char
name|PropertyTest1_xml
index|[]
init|=
literal|"<property name=\"property\" type=\"i\" access=\"read\"/>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|PropertyTest2
class|class
name|PropertyTest2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|int
name|property
name|READ
name|property
name|WRITE
name|setProperty
parameter_list|)
specifier|public
private|:
DECL|function|property
name|int
name|property
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|setProperty
name|void
name|setProperty
parameter_list|(
name|int
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|PropertyTest2_xml
specifier|const
name|char
name|PropertyTest2_xml
index|[]
init|=
literal|"<property name=\"property\" type=\"i\" access=\"readwrite\"/>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|PropertyTest3
class|class
name|PropertyTest3
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|int
name|property
name|WRITE
name|setProperty
parameter_list|)
specifier|public
private|:
DECL|function|property
name|int
name|property
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|function|setProperty
name|void
name|setProperty
parameter_list|(
name|int
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|PropertyTest3_xml
specifier|const
name|char
name|PropertyTest3_xml
index|[]
init|=
literal|"<property name=\"property\" type=\"i\" access=\"write\"/>"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|PropertyTest4
class|class
name|PropertyTest4
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|Struct1
name|property
name|WRITE
name|setProperty
parameter_list|)
specifier|public
private|:
DECL|function|property
name|Struct1
name|property
parameter_list|()
block|{
return|return
name|Struct1
argument_list|()
return|;
block|}
DECL|function|setProperty
name|void
name|setProperty
parameter_list|(
name|Struct1
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|PropertyTest4_xml
specifier|const
name|char
name|PropertyTest4_xml
index|[]
init|=
literal|"<property name=\"property\" type=\"(s)\" access=\"write\">"
literal|"<annotation name=\"com.trolltech.QtDBus.QtTypeName\" value=\"Struct1\"/>"
literal|"</property>"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|properties_data
name|void
name|tst_QDBusMetaObject
operator|::
name|properties_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"metaobject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xml"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"read"
argument_list|)
operator|<<
operator|&
name|PropertyTest1
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|PropertyTest1_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"readwrite"
argument_list|)
operator|<<
operator|&
name|PropertyTest2
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|PropertyTest2_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"write"
argument_list|)
operator|<<
operator|&
name|PropertyTest3
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|PropertyTest3_xml
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"customtype"
argument_list|)
operator|<<
operator|&
name|PropertyTest4
operator|::
name|staticMetaObject
operator|<<
name|QString
argument_list|(
name|PropertyTest4_xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|properties
name|void
name|tst_QDBusMetaObject
operator|::
name|properties
parameter_list|()
block|{
name|types
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusMetaObject
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusmetaobject.moc"
end_include
end_unit
