begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtDBus/private/qdbusutil_p.h>
end_include
begin_include
include|#
directive|include
file|<QtDBus/private/qdbusconnection_p.h>
end_include
begin_include
include|#
directive|include
file|"common.h"
end_include
begin_include
include|#
directive|include
file|<limits>
end_include
begin_include
include|#
directive|include
file|<dbus/dbus.h>
end_include
begin_decl_stmt
DECL|variable|serviceName
specifier|static
specifier|const
name|char
name|serviceName
index|[]
init|=
literal|"org.qtproject.autotests.qpong"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|objectPath
specifier|static
specifier|const
name|char
name|objectPath
index|[]
init|=
literal|"/org/qtproject/qpong"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|interfaceName
specifier|static
specifier|const
name|char
modifier|*
name|interfaceName
init|=
name|serviceName
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QDBusMarshall
class|class
name|tst_QDBusMarshall
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|sendBasic_data
parameter_list|()
function_decl|;
name|void
name|sendBasic
parameter_list|()
function_decl|;
name|void
name|sendVariant_data
parameter_list|()
function_decl|;
name|void
name|sendVariant
parameter_list|()
function_decl|;
name|void
name|sendArrays_data
parameter_list|()
function_decl|;
name|void
name|sendArrays
parameter_list|()
function_decl|;
name|void
name|sendArrayOfArrays_data
parameter_list|()
function_decl|;
name|void
name|sendArrayOfArrays
parameter_list|()
function_decl|;
name|void
name|sendMaps_data
parameter_list|()
function_decl|;
name|void
name|sendMaps
parameter_list|()
function_decl|;
name|void
name|sendStructs_data
parameter_list|()
function_decl|;
name|void
name|sendStructs
parameter_list|()
function_decl|;
name|void
name|sendComplex_data
parameter_list|()
function_decl|;
name|void
name|sendComplex
parameter_list|()
function_decl|;
name|void
name|sendArgument_data
parameter_list|()
function_decl|;
name|void
name|sendArgument
parameter_list|()
function_decl|;
name|void
name|sendSignalErrors
parameter_list|()
function_decl|;
name|void
name|sendCallErrors_data
parameter_list|()
function_decl|;
name|void
name|sendCallErrors
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|DBUS_TYPE_UNIX_FD
name|void
name|receiveUnknownType_data
parameter_list|()
function_decl|;
name|void
name|receiveUnknownType
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|demarshallPrimitives_data
parameter_list|()
function_decl|;
name|void
name|demarshallPrimitives
parameter_list|()
function_decl|;
name|void
name|demarshallStrings_data
parameter_list|()
function_decl|;
name|void
name|demarshallStrings
parameter_list|()
function_decl|;
name|void
name|demarshallInvalidStringList_data
parameter_list|()
function_decl|;
name|void
name|demarshallInvalidStringList
parameter_list|()
function_decl|;
name|void
name|demarshallInvalidByteArray_data
parameter_list|()
function_decl|;
name|void
name|demarshallInvalidByteArray
parameter_list|()
function_decl|;
private|private:
name|int
name|fileDescriptorForTest
parameter_list|()
function_decl|;
DECL|member|proc
name|QProcess
name|proc
decl_stmt|;
DECL|member|tempFile
name|QTemporaryFile
name|tempFile
decl_stmt|;
DECL|member|fileDescriptorPassing
name|bool
name|fileDescriptorPassing
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QDBusMessageSpy
class|class
name|QDBusMessageSpy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|theSlot
name|Q_SCRIPTABLE
name|int
name|theSlot
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|)
block|{
name|list
operator|<<
name|msg
expr_stmt|;
return|return
literal|42
return|;
block|}
public|public:
DECL|member|list
name|QList
argument_list|<
name|QDBusMessage
argument_list|>
name|list
decl_stmt|;
block|}
class|;
end_class
begin_struct
DECL|struct|UnregisteredType
struct|struct
name|UnregisteredType
block|{
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|UnregisteredType
argument_list|)
end_macro
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusMarshall
operator|::
name|initTestCase
parameter_list|()
block|{
name|commonInit
argument_list|()
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|fileDescriptorPassing
operator|=
name|con
operator|.
name|connectionCapabilities
argument_list|()
operator|&
name|QDBusConnection
operator|::
name|UnixFileDescriptorPassing
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|proc
operator|.
name|start
argument_list|(
literal|"qpong"
argument_list|)
expr_stmt|;
else|#
directive|else
name|proc
operator|.
name|start
argument_list|(
literal|"./qpong/qpong"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|interface
argument_list|()
operator|->
name|isServiceRegistered
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
literal|"org.freedesktop.DBus"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"org.freedesktop.DBus"
argument_list|,
literal|"NameOwnerChanged"
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|serviceName
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|interface
argument_list|()
operator|->
name|isServiceRegistered
argument_list|(
name|serviceName
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|disconnect
argument_list|(
literal|"org.freedesktop.DBus"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"org.freedesktop.DBus"
argument_list|,
literal|"NameOwnerChanged"
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|serviceName
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDBusMarshall
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|proc
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|terminate
argument_list|()
expr_stmt|;
name|proc
operator|.
name|waitForFinished
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileDescriptorForTest
name|int
name|tst_QDBusMarshall
operator|::
name|fileDescriptorForTest
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tempFile
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|tempFile
operator|.
name|setFileTemplate
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
literal|"/qdbusmarshalltestXXXXXX.tmp"
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
return|return
name|tempFile
operator|.
name|handle
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|addBasicTypesColumns
name|void
name|addBasicTypesColumns
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicNumericTypes_data
name|void
name|basicNumericTypes_data
parameter_list|()
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|false
argument_list|)
operator|<<
literal|"b"
operator|<<
literal|"false"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool2"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|true
argument_list|)
operator|<<
literal|"b"
operator|<<
literal|"true"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"byte"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uchar
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
literal|"y"
operator|<<
literal|"1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|<<
literal|"n"
operator|<<
literal|"2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushort
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"q"
operator|<<
literal|"3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
literal|"i"
operator|<<
literal|"1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|2U
argument_list|)
operator|<<
literal|"u"
operator|<<
literal|"2"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int64"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|Q_INT64_C
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|<<
literal|"x"
operator|<<
literal|"3"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint64"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|<<
literal|"t"
operator|<<
literal|"4"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42.5
argument_list|)
operator|<<
literal|"d"
operator|<<
literal|"42.5"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicStringTypes_data
name|void
name|basicStringTypes_data
parameter_list|()
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|"ping"
argument_list|)
operator|<<
literal|"s"
operator|<<
literal|"\"ping\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"objectpath"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|(
literal|"/org/kde"
argument_list|)
argument_list|)
operator|<<
literal|"o"
operator|<<
literal|"[ObjectPath: /org/kde]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signature"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|(
literal|"g"
argument_list|)
argument_list|)
operator|<<
literal|"g"
operator|<<
literal|"[Signature: g]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptystring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|""
argument_list|)
operator|<<
literal|"s"
operator|<<
literal|"\"\""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullstring"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|<<
literal|"s"
operator|<<
literal|"\"\""
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendBasic_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendBasic_data
parameter_list|()
block|{
name|addBasicTypesColumns
argument_list|()
expr_stmt|;
comment|// basic types:
name|basicNumericTypes_data
argument_list|()
expr_stmt|;
name|basicStringTypes_data
argument_list|()
expr_stmt|;
if|if
condition|(
name|fileDescriptorPassing
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file-descriptor"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusUnixFileDescriptor
argument_list|(
name|fileDescriptorForTest
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|"h"
operator|<<
literal|"[Unix FD: valid]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendVariant_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendVariant_data
parameter_list|()
block|{
name|sendBasic_data
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variant"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
literal|"v"
operator|<<
literal|"[Variant(int): 1]"
expr_stmt|;
name|QDBusVariant
name|nested
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variant-variant"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|nested
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|"v"
operator|<<
literal|"[Variant(QDBusVariant): [Variant(int): 1]]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArrays_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendArrays_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
comment|// arrays
name|QStringList
name|strings
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptystringlist"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"as"
operator|<<
literal|"{}"
expr_stmt|;
name|strings
operator|<<
literal|"hello"
operator|<<
literal|"world"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stringlist"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"as"
operator|<<
literal|"{\"hello\", \"world\"}"
expr_stmt|;
name|strings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|strings
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptystrings"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"as"
operator|<<
literal|"{\"\", \"\", \"\"}"
expr_stmt|;
name|strings
operator|.
name|clear
argument_list|()
expr_stmt|;
name|strings
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-nullstrings"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"as"
operator|<<
literal|"{\"\", \"\", \"\", \"\"}"
expr_stmt|;
name|QByteArray
name|bytearray
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullbytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"ay"
operator|<<
literal|"{}"
expr_stmt|;
name|bytearray
operator|=
literal|""
expr_stmt|;
comment|// empty, not null
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptybytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"ay"
operator|<<
literal|"{}"
expr_stmt|;
name|bytearray
operator|=
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"ay"
operator|<<
literal|"{102, 111, 111}"
expr_stmt|;
name|QList
argument_list|<
name|bool
argument_list|>
name|bools
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyboollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
operator|<<
literal|"ab"
operator|<<
literal|"[Argument: ab {}]"
expr_stmt|;
name|bools
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"boollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
operator|<<
literal|"ab"
operator|<<
literal|"[Argument: ab {false, true, false}]"
expr_stmt|;
name|QList
argument_list|<
name|short
argument_list|>
name|shorts
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyshortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|shorts
argument_list|)
operator|<<
literal|"an"
operator|<<
literal|"[Argument: an {}]"
expr_stmt|;
name|shorts
operator|<<
literal|42
operator|<<
operator|-
literal|43
operator|<<
literal|44
operator|<<
literal|45
operator|<<
operator|-
literal|32768
operator|<<
literal|32767
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|shorts
argument_list|)
operator|<<
literal|"an"
operator|<<
literal|"[Argument: an {42, -43, 44, 45, -32768, 32767}]"
expr_stmt|;
name|QList
argument_list|<
name|ushort
argument_list|>
name|ushorts
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyushortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushorts
argument_list|)
operator|<<
literal|"aq"
operator|<<
literal|"[Argument: aq {}]"
expr_stmt|;
name|ushorts
operator|<<
literal|12u
operator|<<
literal|13u
operator|<<
literal|14u
operator|<<
literal|15
operator|<<
literal|65535
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ushortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushorts
argument_list|)
operator|<<
literal|"aq"
operator|<<
literal|"[Argument: aq {12, 13, 14, 15, 65535}]"
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|ints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ints
argument_list|)
operator|<<
literal|"ai"
operator|<<
literal|"[Argument: ai {}]"
expr_stmt|;
name|ints
operator|<<
literal|42
operator|<<
operator|-
literal|43
operator|<<
literal|44
operator|<<
literal|45
operator|<<
literal|2147483647
operator|<<
operator|-
literal|2147483647
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"intlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ints
argument_list|)
operator|<<
literal|"ai"
operator|<<
literal|"[Argument: ai {42, -43, 44, 45, 2147483647, -2147483648}]"
expr_stmt|;
name|QList
argument_list|<
name|uint
argument_list|>
name|uints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyuintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uints
argument_list|)
operator|<<
literal|"au"
operator|<<
literal|"[Argument: au {}]"
expr_stmt|;
name|uints
operator|<<
name|uint
argument_list|(
literal|12
argument_list|)
operator|<<
name|uint
argument_list|(
literal|13
argument_list|)
operator|<<
name|uint
argument_list|(
literal|14
argument_list|)
operator|<<
literal|4294967295U
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uints
argument_list|)
operator|<<
literal|"au"
operator|<<
literal|"[Argument: au {12, 13, 14, 4294967295}]"
expr_stmt|;
name|QList
argument_list|<
name|qlonglong
argument_list|>
name|llints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyllintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|llints
argument_list|)
operator|<<
literal|"ax"
operator|<<
literal|"[Argument: ax {}]"
expr_stmt|;
name|llints
operator|<<
name|Q_INT64_C
argument_list|(
literal|99
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|100
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|9223372036854775807
argument_list|)
operator|-
literal|1
operator|<<
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"llintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|llints
argument_list|)
operator|<<
literal|"ax"
operator|<<
literal|"[Argument: ax {99, -100, -9223372036854775808, 9223372036854775807}]"
expr_stmt|;
name|QList
argument_list|<
name|qulonglong
argument_list|>
name|ullints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyullintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ullints
argument_list|)
operator|<<
literal|"at"
operator|<<
literal|"[Argument: at {}]"
expr_stmt|;
name|ullints
operator|<<
name|Q_UINT64_C
argument_list|(
literal|66
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|67
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ullintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ullints
argument_list|)
operator|<<
literal|"at"
operator|<<
literal|"[Argument: at {66, 67, 18446744073709551615}]"
expr_stmt|;
name|QList
argument_list|<
name|double
argument_list|>
name|doubles
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptydoublelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|doubles
argument_list|)
operator|<<
literal|"ad"
operator|<<
literal|"[Argument: ad {}]"
expr_stmt|;
name|doubles
operator|<<
literal|1.2
operator|<<
literal|2.2
operator|<<
literal|4.4
operator|<<
operator|-
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|infinity
argument_list|()
operator|<<
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|infinity
argument_list|()
operator|<<
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|quiet_NaN
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doublelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|doubles
argument_list|)
operator|<<
literal|"ad"
operator|<<
literal|"[Argument: ad {1.2, 2.2, 4.4, -inf, inf, nan}]"
expr_stmt|;
name|QList
argument_list|<
name|QDBusObjectPath
argument_list|>
name|objectPaths
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyobjectpathlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|objectPaths
argument_list|)
operator|<<
literal|"ao"
operator|<<
literal|"[Argument: ao {}]"
expr_stmt|;
name|objectPaths
operator|<<
name|QDBusObjectPath
argument_list|(
literal|"/"
argument_list|)
operator|<<
name|QDBusObjectPath
argument_list|(
literal|"/foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"objectpathlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|objectPaths
argument_list|)
operator|<<
literal|"ao"
operator|<<
literal|"[Argument: ao {[ObjectPath: /], [ObjectPath: /foo]}]"
expr_stmt|;
if|if
condition|(
name|fileDescriptorPassing
condition|)
block|{
name|QList
argument_list|<
name|QDBusUnixFileDescriptor
argument_list|>
name|fileDescriptors
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyfiledescriptorlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|fileDescriptors
argument_list|)
operator|<<
literal|"ah"
operator|<<
literal|"[Argument: ah {}]"
expr_stmt|;
name|fileDescriptors
operator|<<
name|QDBusUnixFileDescriptor
argument_list|(
name|fileDescriptorForTest
argument_list|()
argument_list|)
operator|<<
name|QDBusUnixFileDescriptor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filedescriptorlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|fileDescriptors
argument_list|)
operator|<<
literal|"ah"
operator|<<
literal|"[Argument: ah {[Unix FD: valid], [Unix FD: valid]}]"
expr_stmt|;
block|}
name|QVariantList
name|variants
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyvariantlist"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|variants
argument_list|)
operator|<<
literal|"av"
operator|<<
literal|"[Argument: av {}]"
expr_stmt|;
name|variants
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"World"
argument_list|)
operator|<<
literal|42
operator|<<
operator|-
literal|43.0
operator|<<
literal|44U
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|45
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|46
argument_list|)
operator|<<
literal|true
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
operator|-
literal|47
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|(
literal|"av"
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variantlist"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|variants
argument_list|)
operator|<<
literal|"av"
operator|<<
literal|"[Argument: av {[Variant(QString): \"Hello\"], [Variant(QByteArray): {87, 111, 114, 108, 100}], [Variant(int): 42], [Variant(double): -43], [Variant(uint): 44], [Variant(qlonglong): -45], [Variant(qulonglong): 46], [Variant(bool): true], [Variant(short): -47], [Variant: [Signature: av]], [Variant: [Variant: [ObjectPath: /]]]}]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArrayOfArrays_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendArrayOfArrays_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
comment|// arrays:
name|QList
argument_list|<
name|QStringList
argument_list|>
name|strings
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-stringlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"aas"
operator|<<
literal|"[Argument: aas {}]"
expr_stmt|;
name|strings
operator|<<
name|QStringList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptystringlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"aas"
operator|<<
literal|"[Argument: aas {{}}]"
expr_stmt|;
name|strings
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"hello"
operator|<<
literal|"world"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"hi"
operator|<<
literal|"there"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stringlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|strings
argument_list|)
operator|<<
literal|"aas"
operator|<<
literal|"[Argument: aas {{}, {\"hello\", \"world\"}, {\"hi\", \"there\"}, {\"\"}}]"
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|bytearray
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-bytearray"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"aay"
operator|<<
literal|"[Argument: aay {}]"
expr_stmt|;
name|bytearray
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptybytearray"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"aay"
operator|<<
literal|"[Argument: aay {{}}]"
expr_stmt|;
name|bytearray
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bytearray
argument_list|)
operator|<<
literal|"aay"
operator|<<
literal|"[Argument: aay {{}, {102, 111, 111}, {98, 97, 114}, {98, 97, 122}, {}, {}}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|>
name|bools
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-boollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
operator|<<
literal|"aab"
operator|<<
literal|"[Argument: aab {}]"
expr_stmt|;
name|bools
operator|<<
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyboollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
operator|<<
literal|"aab"
operator|<<
literal|"[Argument: aab {[Argument: ab {}]}]"
expr_stmt|;
name|bools
operator|<<
operator|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|()
operator|<<
literal|false
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|bool
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"boollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
operator|<<
literal|"aab"
operator|<<
literal|"[Argument: aab {[Argument: ab {}], [Argument: ab {false, true}], [Argument: ab {false}], [Argument: ab {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|short
argument_list|>
argument_list|>
name|shorts
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-shortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|shorts
argument_list|)
operator|<<
literal|"aan"
operator|<<
literal|"[Argument: aan {}]"
expr_stmt|;
name|shorts
operator|<<
name|QList
argument_list|<
name|short
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyshortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|shorts
argument_list|)
operator|<<
literal|"aan"
operator|<<
literal|"[Argument: aan {[Argument: an {}]}]"
expr_stmt|;
name|shorts
operator|<<
operator|(
name|QList
argument_list|<
name|short
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|43
operator|<<
literal|44
operator|<<
literal|45
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|short
argument_list|>
argument_list|()
operator|<<
operator|-
literal|32768
operator|<<
literal|32767
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|short
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"shortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|shorts
argument_list|)
operator|<<
literal|"aan"
operator|<<
literal|"[Argument: aan {[Argument: an {}], [Argument: an {42, -43, 44, 45}], [Argument: an {-32768, 32767}], [Argument: an {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|ushort
argument_list|>
argument_list|>
name|ushorts
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-ushortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushorts
argument_list|)
operator|<<
literal|"aaq"
operator|<<
literal|"[Argument: aaq {}]"
expr_stmt|;
name|ushorts
operator|<<
name|QList
argument_list|<
name|ushort
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyushortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushorts
argument_list|)
operator|<<
literal|"aaq"
operator|<<
literal|"[Argument: aaq {[Argument: aq {}]}]"
expr_stmt|;
name|ushorts
operator|<<
operator|(
name|QList
argument_list|<
name|ushort
argument_list|>
argument_list|()
operator|<<
literal|12u
operator|<<
literal|13u
operator|<<
literal|14u
operator|<<
literal|15
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|ushort
argument_list|>
argument_list|()
operator|<<
literal|65535
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|ushort
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ushortlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushorts
argument_list|)
operator|<<
literal|"aaq"
operator|<<
literal|"[Argument: aaq {[Argument: aq {}], [Argument: aq {12, 13, 14, 15}], [Argument: aq {65535}], [Argument: aq {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|ints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-intlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ints
argument_list|)
operator|<<
literal|"aai"
operator|<<
literal|"[Argument: aai {}]"
expr_stmt|;
name|ints
operator|<<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ints
argument_list|)
operator|<<
literal|"aai"
operator|<<
literal|"[Argument: aai {[Argument: ai {}]}]"
expr_stmt|;
name|ints
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|43
operator|<<
literal|44
operator|<<
literal|45
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2147483647
operator|<<
operator|-
literal|2147483647
operator|-
literal|1
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"intlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ints
argument_list|)
operator|<<
literal|"aai"
operator|<<
literal|"[Argument: aai {[Argument: ai {}], [Argument: ai {42, -43, 44, 45}], [Argument: ai {2147483647, -2147483648}], [Argument: ai {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|uint
argument_list|>
argument_list|>
name|uints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-uintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uints
argument_list|)
operator|<<
literal|"aau"
operator|<<
literal|"[Argument: aau {}]"
expr_stmt|;
name|uints
operator|<<
name|QList
argument_list|<
name|uint
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyuintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uints
argument_list|)
operator|<<
literal|"aau"
operator|<<
literal|"[Argument: aau {[Argument: au {}]}]"
expr_stmt|;
name|uints
operator|<<
operator|(
name|QList
argument_list|<
name|uint
argument_list|>
argument_list|()
operator|<<
name|uint
argument_list|(
literal|12
argument_list|)
operator|<<
name|uint
argument_list|(
literal|13
argument_list|)
operator|<<
name|uint
argument_list|(
literal|14
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|uint
argument_list|>
argument_list|()
operator|<<
literal|4294967295U
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|uint
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uints
argument_list|)
operator|<<
literal|"aau"
operator|<<
literal|"[Argument: aau {[Argument: au {}], [Argument: au {12, 13, 14}], [Argument: au {4294967295}], [Argument: au {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|qlonglong
argument_list|>
argument_list|>
name|llints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-llintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|llints
argument_list|)
operator|<<
literal|"aax"
operator|<<
literal|"[Argument: aax {}]"
expr_stmt|;
name|llints
operator|<<
name|QList
argument_list|<
name|qlonglong
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyllintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|llints
argument_list|)
operator|<<
literal|"aax"
operator|<<
literal|"[Argument: aax {[Argument: ax {}]}]"
expr_stmt|;
name|llints
operator|<<
operator|(
name|QList
argument_list|<
name|qlonglong
argument_list|>
argument_list|()
operator|<<
name|Q_INT64_C
argument_list|(
literal|99
argument_list|)
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|100
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|qlonglong
argument_list|>
argument_list|()
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|9223372036854775807
argument_list|)
operator|-
literal|1
operator|<<
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|qlonglong
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"llintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|llints
argument_list|)
operator|<<
literal|"aax"
operator|<<
literal|"[Argument: aax {[Argument: ax {}], [Argument: ax {99, -100}], [Argument: ax {-9223372036854775808, 9223372036854775807}], [Argument: ax {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|qulonglong
argument_list|>
argument_list|>
name|ullints
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-ullintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ullints
argument_list|)
operator|<<
literal|"aat"
operator|<<
literal|"[Argument: aat {}]"
expr_stmt|;
name|ullints
operator|<<
name|QList
argument_list|<
name|qulonglong
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptyullintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ullints
argument_list|)
operator|<<
literal|"aat"
operator|<<
literal|"[Argument: aat {[Argument: at {}]}]"
expr_stmt|;
name|ullints
operator|<<
operator|(
name|QList
argument_list|<
name|qulonglong
argument_list|>
argument_list|()
operator|<<
name|Q_UINT64_C
argument_list|(
literal|66
argument_list|)
operator|<<
name|Q_UINT64_C
argument_list|(
literal|67
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|qulonglong
argument_list|>
argument_list|()
operator|<<
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|qulonglong
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ullintlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ullints
argument_list|)
operator|<<
literal|"aat"
operator|<<
literal|"[Argument: aat {[Argument: at {}], [Argument: at {66, 67}], [Argument: at {18446744073709551615}], [Argument: at {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QList
argument_list|<
name|double
argument_list|>
argument_list|>
name|doubles
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-ofdoublelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|doubles
argument_list|)
operator|<<
literal|"aad"
operator|<<
literal|"[Argument: aad {}]"
expr_stmt|;
name|doubles
operator|<<
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptydoublelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|doubles
argument_list|)
operator|<<
literal|"aad"
operator|<<
literal|"[Argument: aad {[Argument: ad {}]}]"
expr_stmt|;
name|doubles
operator|<<
operator|(
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
literal|1.2
operator|<<
literal|2.2
operator|<<
literal|4.4
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|<<
operator|-
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|infinity
argument_list|()
operator|<<
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|infinity
argument_list|()
operator|<<
name|std
operator|::
name|numeric_limits
argument_list|<
name|double
argument_list|>
operator|::
name|quiet_NaN
argument_list|()
operator|)
operator|<<
operator|(
name|QList
argument_list|<
name|double
argument_list|>
argument_list|()
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doublelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|doubles
argument_list|)
operator|<<
literal|"aad"
operator|<<
literal|"[Argument: aad {[Argument: ad {}], [Argument: ad {1.2, 2.2, 4.4}], [Argument: ad {-inf, inf, nan}], [Argument: ad {}]}]"
expr_stmt|;
name|QList
argument_list|<
name|QVariantList
argument_list|>
name|variants
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyvariantlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variants
argument_list|)
operator|<<
literal|"aav"
operator|<<
literal|"[Argument: aav {}]"
expr_stmt|;
name|variants
operator|<<
name|QVariantList
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyvariantlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variants
argument_list|)
operator|<<
literal|"aav"
operator|<<
literal|"[Argument: aav {[Argument: av {}]}]"
expr_stmt|;
name|variants
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"Hello"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"World"
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
literal|42
operator|<<
operator|-
literal|43.0
operator|<<
literal|44U
operator|<<
name|Q_INT64_C
argument_list|(
operator|-
literal|45
argument_list|)
operator|)
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|Q_UINT64_C
argument_list|(
literal|46
argument_list|)
operator|<<
literal|true
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
operator|-
literal|47
argument_list|)
argument_list|)
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variantlist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|variants
argument_list|)
operator|<<
literal|"aav"
operator|<<
literal|"[Argument: aav {[Argument: av {}], [Argument: av {[Variant(QString): \"Hello\"], [Variant(QByteArray): {87, 111, 114, 108, 100}]}], [Argument: av {[Variant(int): 42], [Variant(double): -43], [Variant(uint): 44], [Variant(qlonglong): -45]}], [Argument: av {[Variant(qulonglong): 46], [Variant(bool): true], [Variant(short): -47]}]}]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMaps_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendMaps_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|ismap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-is-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ismap
argument_list|)
operator|<<
literal|"a{is}"
operator|<<
literal|"[Argument: a{is} {}]"
expr_stmt|;
name|ismap
index|[
literal|1
index|]
operator|=
literal|"a"
expr_stmt|;
name|ismap
index|[
literal|2000
index|]
operator|=
literal|"b"
expr_stmt|;
name|ismap
index|[
operator|-
literal|47
index|]
operator|=
literal|"c"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"is-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ismap
argument_list|)
operator|<<
literal|"a{is}"
operator|<<
literal|"[Argument: a{is} {-47 = \"c\", 1 = \"a\", 2000 = \"b\"}]"
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|ssmap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-ss-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ssmap
argument_list|)
operator|<<
literal|"a{ss}"
operator|<<
literal|"[Argument: a{ss} {}]"
expr_stmt|;
name|ssmap
index|[
literal|"a"
index|]
operator|=
literal|"a"
expr_stmt|;
name|ssmap
index|[
literal|"c"
index|]
operator|=
literal|"b"
expr_stmt|;
name|ssmap
index|[
literal|"b"
index|]
operator|=
literal|"c"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ss-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ssmap
argument_list|)
operator|<<
literal|"a{ss}"
operator|<<
literal|"[Argument: a{ss} {\"a\" = \"a\", \"b\" = \"c\", \"c\" = \"b\"}]"
expr_stmt|;
name|QVariantMap
name|svmap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-sv-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|svmap
argument_list|)
operator|<<
literal|"a{sv}"
operator|<<
literal|"[Argument: a{sv} {}]"
expr_stmt|;
name|svmap
index|[
literal|"a"
index|]
operator|=
literal|1
expr_stmt|;
name|svmap
index|[
literal|"c"
index|]
operator|=
literal|"b"
expr_stmt|;
name|svmap
index|[
literal|"b"
index|]
operator|=
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"d"
index|]
operator|=
literal|42U
expr_stmt|;
name|svmap
index|[
literal|"e"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
operator|-
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"f"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sv-map1"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|svmap
argument_list|)
operator|<<
literal|"a{sv}"
operator|<<
literal|"[Argument: a{sv} {\"a\" = [Variant(int): 1], \"b\" = [Variant(QByteArray): {99}], \"c\" = [Variant(QString): \"b\"], \"d\" = [Variant(uint): 42], \"e\" = [Variant(short): -47], \"f\" = [Variant: [Variant(int): 0]]}]"
expr_stmt|;
name|QMap
argument_list|<
name|QDBusObjectPath
argument_list|,
name|QString
argument_list|>
name|osmap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-os-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|osmap
argument_list|)
operator|<<
literal|"a{os}"
operator|<<
literal|"[Argument: a{os} {}]"
expr_stmt|;
name|osmap
index|[
name|QDBusObjectPath
argument_list|(
literal|"/"
argument_list|)
index|]
operator|=
literal|"root"
expr_stmt|;
name|osmap
index|[
name|QDBusObjectPath
argument_list|(
literal|"/foo"
argument_list|)
index|]
operator|=
literal|"foo"
expr_stmt|;
name|osmap
index|[
name|QDBusObjectPath
argument_list|(
literal|"/bar/baz"
argument_list|)
index|]
operator|=
literal|"bar and baz"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"os-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|osmap
argument_list|)
operator|<<
literal|"a{os}"
operator|<<
literal|"[Argument: a{os} {[ObjectPath: /] = \"root\", [ObjectPath: /bar/baz] = \"bar and baz\", [ObjectPath: /foo] = \"foo\"}]"
expr_stmt|;
name|QMap
argument_list|<
name|QDBusSignature
argument_list|,
name|QString
argument_list|>
name|gsmap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-gs-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|gsmap
argument_list|)
operator|<<
literal|"a{gs}"
operator|<<
literal|"[Argument: a{gs} {}]"
expr_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"i"
argument_list|)
index|]
operator|=
literal|"int32"
expr_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"s"
argument_list|)
index|]
operator|=
literal|"string"
expr_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"a{gs}"
argument_list|)
index|]
operator|=
literal|"array of dict_entry of (signature, string)"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gs-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|gsmap
argument_list|)
operator|<<
literal|"a{gs}"
operator|<<
literal|"[Argument: a{gs} {[Signature: a{gs}] = \"array of dict_entry of (signature, string)\", [Signature: i] = \"int32\", [Signature: s] = \"string\"}]"
expr_stmt|;
if|if
condition|(
name|fileDescriptorPassing
condition|)
block|{
name|svmap
index|[
literal|"zzfiledescriptor"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusUnixFileDescriptor
argument_list|(
name|fileDescriptorForTest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sv-map1-fd"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|svmap
argument_list|)
operator|<<
literal|"a{sv}"
operator|<<
literal|"[Argument: a{sv} {\"a\" = [Variant(int): 1], \"b\" = [Variant(QByteArray): {99}], \"c\" = [Variant(QString): \"b\"], \"d\" = [Variant(uint): 42], \"e\" = [Variant(short): -47], \"f\" = [Variant: [Variant(int): 0]], \"zzfiledescriptor\" = [Variant(QDBusUnixFileDescriptor): [Unix FD: valid]]}]"
expr_stmt|;
block|}
name|svmap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|svmap
index|[
literal|"ismap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ismap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"ssmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ssmap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"osmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|osmap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"gsmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|gsmap
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sv-map2"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|svmap
argument_list|)
operator|<<
literal|"a{sv}"
operator|<<
literal|"[Argument: a{sv} {\"gsmap\" = [Variant: [Argument: a{gs} {[Signature: a{gs}] = \"array of dict_entry of (signature, string)\", [Signature: i] = \"int32\", [Signature: s] = \"string\"}]], \"ismap\" = [Variant: [Argument: a{is} {-47 = \"c\", 1 = \"a\", 2000 = \"b\"}]], \"osmap\" = [Variant: [Argument: a{os} {[ObjectPath: /] = \"root\", [ObjectPath: /bar/baz] = \"bar and baz\", [ObjectPath: /foo] = \"foo\"}]], \"ssmap\" = [Variant: [Argument: a{ss} {\"a\" = \"a\", \"b\" = \"c\", \"c\" = \"b\"}]]}]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendStructs_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendStructs_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"point"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPoint
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
literal|"(ii)"
operator|<<
literal|"[Argument: (ii) 1, 2]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pointf"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QPointF
argument_list|(
literal|1.5
argument_list|,
operator|-
literal|1.5
argument_list|)
argument_list|)
operator|<<
literal|"(dd)"
operator|<<
literal|"[Argument: (dd) 1.5, -1.5]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSize
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<<
literal|"(ii)"
operator|<<
literal|"[Argument: (ii) 1, 2]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sizef"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QSizeF
argument_list|(
literal|1.5
argument_list|,
literal|1.5
argument_list|)
argument_list|)
operator|<<
literal|"(dd)"
operator|<<
literal|"[Argument: (dd) 1.5, 1.5]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rect"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRect
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
literal|"(iiii)"
operator|<<
literal|"[Argument: (iiii) 1, 2, 3, 4]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rectf"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QRectF
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|1.5
argument_list|,
literal|1.5
argument_list|)
argument_list|)
operator|<<
literal|"(dddd)"
operator|<<
literal|"[Argument: (dddd) 0.5, 0.5, 1.5, 1.5]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"line"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLine
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|<<
literal|"((ii)(ii))"
operator|<<
literal|"[Argument: ((ii)(ii)) [Argument: (ii) 1, 2], [Argument: (ii) 3, 4]]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"linef"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QLineF
argument_list|(
literal|0.5
argument_list|,
literal|0.5
argument_list|,
literal|1.5
argument_list|,
literal|1.5
argument_list|)
argument_list|)
operator|<<
literal|"((dd)(dd))"
operator|<<
literal|"[Argument: ((dd)(dd)) [Argument: (dd) 0.5, 0.5], [Argument: (dd) 1.5, 1.5]]"
expr_stmt|;
name|QDate
name|date
argument_list|(
literal|2006
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|)
decl_stmt|;
name|QTime
name|time
argument_list|(
literal|12
argument_list|,
literal|25
argument_list|,
literal|00
argument_list|)
decl_stmt|;
comment|// the date I wrote this test on :-)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"date"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|date
argument_list|)
operator|<<
literal|"(iii)"
operator|<<
literal|"[Argument: (iii) 2006, 6, 18]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"time"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|time
argument_list|)
operator|<<
literal|"(iiii)"
operator|<<
literal|"[Argument: (iiii) 12, 25, 0, 0]"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetime"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|date
argument_list|,
name|time
argument_list|)
argument_list|)
operator|<<
literal|"((iii)(iiii)i)"
operator|<<
literal|"[Argument: ((iii)(iiii)i) [Argument: (iii) 2006, 6, 18], [Argument: (iiii) 12, 25, 0, 0], 0]"
expr_stmt|;
name|MyStruct
name|ms
init|=
block|{
literal|1
block|,
literal|"Hello, World"
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int-string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ms
argument_list|)
operator|<<
literal|"(is)"
operator|<<
literal|"[Argument: (is) 1, \"Hello, World\"]"
expr_stmt|;
name|MyVariantMapStruct
name|mvms
init|=
block|{
literal|"Hello, World"
block|,
name|QVariantMap
argument_list|()
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string-variantmap"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|mvms
argument_list|)
operator|<<
literal|"(sa{sv})"
operator|<<
literal|"[Argument: (sa{sv}) \"Hello, World\", [Argument: a{sv} {}]]"
expr_stmt|;
comment|// use only basic types, otherwise comparison will fail
name|mvms
operator|.
name|map
index|[
literal|"int"
index|]
operator|=
literal|42
expr_stmt|;
name|mvms
operator|.
name|map
index|[
literal|"uint"
index|]
operator|=
literal|42u
expr_stmt|;
name|mvms
operator|.
name|map
index|[
literal|"short"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|<
name|short
argument_list|>
argument_list|(
operator|-
literal|47
argument_list|)
expr_stmt|;
name|mvms
operator|.
name|map
index|[
literal|"bytearray"
index|]
operator|=
name|QByteArray
argument_list|(
literal|"Hello, world"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string-variantmap2"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|mvms
argument_list|)
operator|<<
literal|"(sa{sv})"
operator|<<
literal|"[Argument: (sa{sv}) \"Hello, World\", [Argument: a{sv} {\"bytearray\" = [Variant(QByteArray): {72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100}], \"int\" = [Variant(int): 42], \"short\" = [Variant(short): -47], \"uint\" = [Variant(uint): 42]}]]"
expr_stmt|;
name|QList
argument_list|<
name|MyVariantMapStruct
argument_list|>
name|list
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-string-variantmap"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|list
argument_list|)
operator|<<
literal|"a(sa{sv})"
operator|<<
literal|"[Argument: a(sa{sv}) {}]"
expr_stmt|;
name|list
operator|<<
name|mvms
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-string-variantmap"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|list
argument_list|)
operator|<<
literal|"a(sa{sv})"
operator|<<
literal|"[Argument: a(sa{sv}) {[Argument: (sa{sv}) \"Hello, World\", [Argument: a{sv} {\"bytearray\" = [Variant(QByteArray): {72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100}], \"int\" = [Variant(int): 42], \"short\" = [Variant(short): -47], \"uint\" = [Variant(uint): 42]}]]}]"
expr_stmt|;
if|if
condition|(
name|fileDescriptorPassing
condition|)
block|{
name|MyFileDescriptorStruct
name|fds
decl_stmt|;
name|fds
operator|.
name|fd
operator|=
name|QDBusUnixFileDescriptor
argument_list|(
name|fileDescriptorForTest
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fdstruct"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|fds
argument_list|)
operator|<<
literal|"(h)"
operator|<<
literal|"[Argument: (h) [Unix FD: valid]]"
expr_stmt|;
name|QList
argument_list|<
name|MyFileDescriptorStruct
argument_list|>
name|fdlist
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-list-of-fdstruct"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|fdlist
argument_list|)
operator|<<
literal|"a(h)"
operator|<<
literal|"[Argument: a(h) {}]"
expr_stmt|;
name|fdlist
operator|<<
name|fds
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-fdstruct"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|fdlist
argument_list|)
operator|<<
literal|"a(h)"
operator|<<
literal|"[Argument: a(h) {[Argument: (h) [Unix FD: valid]]}]"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendComplex_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendComplex_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringResult"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QDateTime
argument_list|>
name|dtlist
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-datetimelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|dtlist
argument_list|)
operator|<<
literal|"a((iii)(iiii)i)"
operator|<<
literal|"[Argument: a((iii)(iiii)i) {}]"
expr_stmt|;
name|dtlist
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list-of-emptydatetime"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|dtlist
argument_list|)
operator|<<
literal|"a((iii)(iiii)i)"
operator|<<
literal|"[Argument: a((iii)(iiii)i) {[Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) -1, -1, -1, -1], 0]}]"
expr_stmt|;
name|dtlist
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1977
argument_list|,
literal|9
argument_list|,
literal|13
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|13
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"datetimelist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|dtlist
argument_list|)
operator|<<
literal|"a((iii)(iiii)i)"
operator|<<
literal|"[Argument: a((iii)(iiii)i) {[Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) -1, -1, -1, -1], 0], [Argument: ((iii)(iiii)i) [Argument: (iii) 1977, 9, 13], [Argument: (iiii) 0, 0, 0, 0], 0], [Argument: ((iii)(iiii)i) [Argument: (iii) 2006, 6, 18], [Argument: (iiii) 13, 14, 0, 0], 0]}]"
expr_stmt|;
name|QMap
argument_list|<
name|qlonglong
argument_list|,
name|QDateTime
argument_list|>
name|lldtmap
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-lldtmap"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|lldtmap
argument_list|)
operator|<<
literal|"a{x((iii)(iiii)i)}"
operator|<<
literal|"[Argument: a{x((iii)(iiii)i)} {}]"
expr_stmt|;
name|lldtmap
index|[
literal|0
index|]
operator|=
name|QDateTime
argument_list|()
expr_stmt|;
name|lldtmap
index|[
literal|1
index|]
operator|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1970
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|lldtmap
index|[
literal|1150629776
index|]
operator|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2006
argument_list|,
literal|6
argument_list|,
literal|18
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|11
argument_list|,
literal|22
argument_list|,
literal|56
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lldtmap"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|lldtmap
argument_list|)
operator|<<
literal|"a{x((iii)(iiii)i)}"
operator|<<
literal|"[Argument: a{x((iii)(iiii)i)} {0 = [Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) -1, -1, -1, -1], 0], 1 = [Argument: ((iii)(iiii)i) [Argument: (iii) 1970, 1, 1], [Argument: (iiii) 0, 0, 1, 0], 1], 1150629776 = [Argument: ((iii)(iiii)i) [Argument: (iii) 2006, 6, 18], [Argument: (iiii) 11, 22, 56, 0], 1]}]"
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|QString
argument_list|>
name|ismap
decl_stmt|;
name|ismap
index|[
literal|1
index|]
operator|=
literal|"a"
expr_stmt|;
name|ismap
index|[
literal|2000
index|]
operator|=
literal|"b"
expr_stmt|;
name|ismap
index|[
operator|-
literal|47
index|]
operator|=
literal|"c"
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|ssmap
decl_stmt|;
name|ssmap
index|[
literal|"a"
index|]
operator|=
literal|"a"
expr_stmt|;
name|ssmap
index|[
literal|"c"
index|]
operator|=
literal|"b"
expr_stmt|;
name|ssmap
index|[
literal|"b"
index|]
operator|=
literal|"c"
expr_stmt|;
name|QMap
argument_list|<
name|QDBusSignature
argument_list|,
name|QString
argument_list|>
name|gsmap
decl_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"i"
argument_list|)
index|]
operator|=
literal|"int32"
expr_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"s"
argument_list|)
index|]
operator|=
literal|"string"
expr_stmt|;
name|gsmap
index|[
name|QDBusSignature
argument_list|(
literal|"a{gs}"
argument_list|)
index|]
operator|=
literal|"array of dict_entry of (signature, string)"
expr_stmt|;
name|QVariantMap
name|svmap
decl_stmt|;
name|svmap
index|[
literal|"a"
index|]
operator|=
literal|1
expr_stmt|;
name|svmap
index|[
literal|"c"
index|]
operator|=
literal|"b"
expr_stmt|;
name|svmap
index|[
literal|"b"
index|]
operator|=
name|QByteArray
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"d"
index|]
operator|=
literal|42U
expr_stmt|;
name|svmap
index|[
literal|"e"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
operator|-
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"f"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"date"
index|]
operator|=
name|QDate
argument_list|(
literal|1977
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"time"
index|]
operator|=
name|QTime
argument_list|(
literal|8
argument_list|,
literal|58
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"datetime"
index|]
operator|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|13
argument_list|,
literal|9
argument_list|,
literal|2008
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|8
argument_list|,
literal|59
argument_list|,
literal|31
argument_list|)
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"pointf"
index|]
operator|=
name|QPointF
argument_list|(
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"ismap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ismap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"ssmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ssmap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"gsmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|gsmap
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"dtlist"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|dtlist
argument_list|)
expr_stmt|;
name|svmap
index|[
literal|"lldtmap"
index|]
operator|=
name|QVariant
operator|::
name|fromValue
argument_list|(
name|lldtmap
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"sv-map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|svmap
argument_list|)
operator|<<
literal|"a{sv}"
operator|<<
literal|"[Argument: a{sv} {\"a\" = [Variant(int): 1], \"b\" = [Variant(QByteArray): {99}], \"c\" = [Variant(QString): \"b\"], \"d\" = [Variant(uint): 42], \"date\" = [Variant: [Argument: (iii) 1977, 1, 1]], \"datetime\" = [Variant: [Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) 8, 59, 31, 0], 0]], \"dtlist\" = [Variant: [Argument: a((iii)(iiii)i) {[Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) -1, -1, -1, -1], 0], [Argument: ((iii)(iiii)i) [Argument: (iii) 1977, 9, 13], [Argument: (iiii) 0, 0, 0, 0], 0], [Argument: ((iii)(iiii)i) [Argument: (iii) 2006, 6, 18], [Argument: (iiii) 13, 14, 0, 0], 0]}]], \"e\" = [Variant(short): -47], \"f\" = [Variant: [Variant(int): 0]], \"gsmap\" = [Variant: [Argument: a{gs} {[Signature: a{gs}] = \"array of dict_entry of (signature, string)\", [Signature: i] = \"int32\", [Signature: s] = \"string\"}]], \"ismap\" = [Variant: [Argument: a{is} {-47 = \"c\", 1 = \"a\", 2000 = \"b\"}]], \"lldtmap\" = [Variant: [Argument: a{x((iii)(iiii)i)} {0 = [Argument: ((iii)(iiii)i) [Argument: (iii) 0, 0, 0], [Argument: (iiii) -1, -1, -1, -1], 0], 1 = [Argument: ((iii)(iiii)i) [Argument: (iii) 1970, 1, 1], [Argument: (iiii) 0, 0, 1, 0], 1], 1150629776 = [Argument: ((iii)(iiii)i) [Argument: (iii) 2006, 6, 18], [Argument: (iiii) 11, 22, 56, 0], 1]}]], \"pointf\" = [Variant: [Argument: (dd) 0.5, -0.5]], \"ssmap\" = [Variant: [Argument: a{ss} {\"a\" = \"a\", \"b\" = \"c\", \"c\" = \"b\"}]], \"time\" = [Variant: [Argument: (iiii) 8, 58, 0, 0]]}]"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArgument_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendArgument_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"classification"
argument_list|)
expr_stmt|;
name|QDBusArgument
argument_list|()
expr_stmt|;
name|QDBusArgument
name|arg
decl_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"b"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
empty_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool2"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"b"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|uchar
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"byte"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"y"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|short
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"n"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|ushort
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"q"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int32"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"i"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|2U
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint32"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"u"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|Q_INT64_C
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int64"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"x"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|Q_UINT64_C
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint64"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"t"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|42.5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"d"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QLatin1String
argument_list|(
literal|"ping"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"s"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QDBusObjectPath
argument_list|(
literal|"/org/kde"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"objectpath"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"o"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QDBusSignature
argument_list|(
literal|"g"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signature"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"g"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptystring"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"s"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nullstring"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"s"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileDescriptorPassing
condition|)
block|{
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QDBusUnixFileDescriptor
argument_list|(
name|fileDescriptorForTest
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"filedescriptor"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"h"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|BasicType
argument_list|)
expr_stmt|;
block|}
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QDBusVariant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variant"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"v"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|VariantType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|<<
name|QDBusVariant
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variant-variant"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"v"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|VariantType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|.
name|beginArray
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|arg
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
operator|-
literal|4
expr_stmt|;
name|arg
operator|.
name|endArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"array-of-int"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"ai"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|ArrayType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|.
name|beginMap
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|)
expr_stmt|;
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|1
operator|<<
literal|2U
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|.
name|beginMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|3
operator|<<
literal|4U
expr_stmt|;
name|arg
operator|.
name|endMapEntry
argument_list|()
expr_stmt|;
name|arg
operator|.
name|endMap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"map"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"a{iu}"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|MapType
argument_list|)
expr_stmt|;
name|arg
operator|=
name|QDBusArgument
argument_list|()
expr_stmt|;
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|arg
operator|<<
literal|1
operator|<<
literal|2U
operator|<<
name|short
argument_list|(
operator|-
literal|3
argument_list|)
operator|<<
name|ushort
argument_list|(
literal|4
argument_list|)
operator|<<
literal|5.0
operator|<<
literal|false
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"structure"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|arg
argument_list|)
operator|<<
literal|"(iunqdb)"
operator|<<
name|int
argument_list|(
name|QDBusArgument
operator|::
name|StructureType
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendBasic
name|void
name|tst_QDBusMarshall
operator|::
name|sendBasic
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stringResult
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|value
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|reply
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|,
name|qPrintable
argument_list|(
name|reply
operator|.
name|errorName
argument_list|()
operator|+
literal|": "
operator|+
name|reply
operator|.
name|errorMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//qDebug()<< reply;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|reply
operator|.
name|signature
argument_list|()
argument_list|,
literal|"sig"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|compare
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//printf("\n! %s\n* %s\n", qPrintable(qDBusArgumentToString(reply.arguments().at(i))), qPrintable(stringResult));
name|QCOMPARE
argument_list|(
name|QDBusUtil
operator|::
name|argumentToString
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|stringResult
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendVariant
name|void
name|tst_QDBusMarshall
operator|::
name|sendVariant
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
comment|//   qDebug()<< reply;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|signature
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|compare
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArrays
name|void
name|tst_QDBusMarshall
operator|::
name|sendArrays
parameter_list|()
block|{
name|sendBasic
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArrayOfArrays
name|void
name|tst_QDBusMarshall
operator|::
name|sendArrayOfArrays
parameter_list|()
block|{
name|sendBasic
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMaps
name|void
name|tst_QDBusMarshall
operator|::
name|sendMaps
parameter_list|()
block|{
name|sendBasic
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendStructs
name|void
name|tst_QDBusMarshall
operator|::
name|sendStructs
parameter_list|()
block|{
name|sendBasic
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendComplex
name|void
name|tst_QDBusMarshall
operator|::
name|sendComplex
parameter_list|()
block|{
name|sendBasic
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendArgument
name|void
name|tst_QDBusMarshall
operator|::
name|sendArgument
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|value
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
comment|//    QCOMPARE(reply.arguments().count(), msg.arguments().count());
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|signature
argument_list|()
argument_list|,
name|sig
argument_list|)
expr_stmt|;
comment|//    for (int i = 0; i< reply.arguments().count(); ++i)
comment|//        QVERIFY(compare(reply.arguments().at(i), msg.arguments().at(i)));
comment|// do it again inside a STRUCT now
name|QDBusArgument
name|sendArg
decl_stmt|;
name|sendArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|sendArg
operator|.
name|appendVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sendArg
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|signature
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|sig
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDBusArgument
name|arg
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|arg
operator|.
name|currentType
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDBusArgument
operator|::
name|StructureType
argument_list|)
argument_list|)
expr_stmt|;
name|arg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|arg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arg
operator|.
name|currentSignature
argument_list|()
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|int
argument_list|(
name|arg
operator|.
name|currentType
argument_list|()
argument_list|)
argument_list|,
literal|"classification"
argument_list|)
expr_stmt|;
name|QVariant
name|extracted
init|=
name|arg
operator|.
name|asVariant
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|arg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|arg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|arg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arg
operator|.
name|currentType
argument_list|()
argument_list|,
name|QDBusArgument
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|UserType
condition|)
name|QCOMPARE
argument_list|(
name|extracted
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendSignalErrors
name|void
name|tst_QDBusMarshall
operator|::
name|sendSignalErrors
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createSignal
argument_list|(
literal|"/foo"
argument_list|,
literal|"local.interfaceName"
argument_list|,
literal|"signalName"
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusConnection: error: could not send signal path \"/foo\" interface \"local.interfaceName\" member \"signalName\": Marshalling failed: Invalid object path passed in arguments"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|con
operator|.
name|send
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusObjectPath
name|path
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusObjectPath: invalid path \"abc\""
argument_list|)
expr_stmt|;
name|path
operator|.
name|setPath
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|msg
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusConnection: error: could not send signal path \"/foo\" interface \"local.interfaceName\" member \"signalName\": Marshalling failed: Invalid object path passed in arguments"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|con
operator|.
name|send
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusSignature
name|sig
decl_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sig
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusConnection: error: could not send signal path \"/foo\" interface \"local.interfaceName\" member \"signalName\": Marshalling failed: Invalid signature passed in arguments"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|con
operator|.
name|send
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusSignature: invalid signature \"a\""
argument_list|)
expr_stmt|;
name|sig
operator|.
name|setSignature
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sig
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QDBusConnection: error: could not send signal path \"/foo\" interface \"local.interfaceName\" member \"signalName\": Marshalling failed: Invalid signature passed in arguments"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|con
operator|.
name|send
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendCallErrors_data
name|void
name|tst_QDBusMarshall
operator|::
name|sendCallErrors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"service"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"interface"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
literal|"arguments"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"errorName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"errorMsg"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ignoreMsg"
argument_list|)
expr_stmt|;
comment|// this error comes from the bus server
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-service"
argument_list|)
operator|<<
literal|""
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.freedesktop.DBus.Error.UnknownMethod"
operator|<<
literal|"Method \"ping\" with signature \"\" on interface \"org.qtproject.autotests.qpong\" doesn't exist\n"
operator|<<
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-service"
argument_list|)
operator|<<
literal|"this isn't valid"
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidService"
operator|<<
literal|"Invalid service name: this isn't valid"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-path"
argument_list|)
operator|<<
name|serviceName
operator|<<
literal|""
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidObjectPath"
operator|<<
literal|"Object path cannot be empty"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-path"
argument_list|)
operator|<<
name|serviceName
operator|<<
literal|"//"
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidObjectPath"
operator|<<
literal|"Invalid object path: //"
operator|<<
literal|""
expr_stmt|;
comment|// empty interfaces are valid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-interface"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
literal|"this isn't valid"
operator|<<
literal|"ping"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidInterface"
operator|<<
literal|"Invalid interface class: this isn't valid"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-method"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|""
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidMember"
operator|<<
literal|"method name cannot be empty"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-method"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"this isn't valid"
operator|<<
name|QVariantList
argument_list|()
operator|<<
literal|"org.qtproject.QtDBus.Error.InvalidMember"
operator|<<
literal|"Invalid method name: this isn't valid"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-variant1"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
argument_list|()
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Variant containing QVariant::Invalid passed in arguments"
operator|<<
literal|"QDBusMarshaller: cannot add an invalid QVariant"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-variant1"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|()
argument_list|)
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Variant containing QVariant::Invalid passed in arguments"
operator|<<
literal|"QDBusMarshaller: cannot add a null QDBusVariant"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"builtin-unregistered"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QLocale
operator|::
name|c
argument_list|()
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Unregistered type QLocale passed in arguments"
operator|<<
literal|"QDBusMarshaller: type `QLocale' (18) is not registered with D-BUS. Use qDBusRegisterMetaType to register it"
expr_stmt|;
comment|// this type is known to the meta type system, but not registered with D-Bus
name|qRegisterMetaType
argument_list|<
name|UnregisteredType
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"extra-unregistered"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|UnregisteredType
argument_list|()
argument_list|)
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Unregistered type UnregisteredType passed in arguments"
operator|<<
name|QString
argument_list|(
literal|"QDBusMarshaller: type `UnregisteredType' (%1) is not registered with D-BUS. Use qDBusRegisterMetaType to register it"
argument_list|)
operator|.
name|arg
argument_list|(
name|qMetaTypeId
argument_list|<
name|UnregisteredType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-object-path-arg"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Invalid object path passed in arguments"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-signature-arg"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Invalid signature passed in arguments"
operator|<<
literal|""
expr_stmt|;
comment|// invalid file descriptor
if|if
condition|(
name|fileDescriptorPassing
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-file-descriptor"
argument_list|)
operator|<<
name|serviceName
operator|<<
name|objectPath
operator|<<
name|interfaceName
operator|<<
literal|"ping"
operator|<<
operator|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusUnixFileDescriptor
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
operator|<<
literal|"org.freedesktop.DBus.Error.Failed"
operator|<<
literal|"Marshalling failed: Invalid file descriptor passed in arguments"
operator|<<
literal|""
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sendCallErrors
name|void
name|tst_QDBusMarshall
operator|::
name|sendCallErrors
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariantList
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|errorMsg
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ignoreMsg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreMsg
operator|.
name|isEmpty
argument_list|()
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|ignoreMsg
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ignoreMsg
operator|.
name|isNull
argument_list|()
condition|)
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|QString
argument_list|(
literal|"QDBusConnection: error: could not send message to service \"%1\" path \"%2\" interface \"%3\" member \"%4\": %5"
argument_list|)
operator|.
name|arg
argument_list|(
name|service
argument_list|,
name|path
argument_list|,
name|interface
argument_list|,
name|method
argument_list|,
name|errorMsg
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|service
argument_list|,
name|path
argument_list|,
name|interface
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|,
name|QDBus
operator|::
name|Block
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|reply
operator|.
name|errorName
argument_list|()
argument_list|,
literal|"errorName"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|errorMessage
argument_list|()
argument_list|,
name|errorMsg
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|DBUS_TYPE_UNIX_FD
end_ifdef
begin_comment
comment|// If DBUS_TYPE_UNIX_FD is not defined, it means the current system's D-Bus library is too old for this test
end_comment
begin_function
DECL|function|receiveUnknownType_data
name|void
name|tst_QDBusMarshall
operator|::
name|receiveUnknownType_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"receivedTypeId"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"in-call"
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|void
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"type-variant"
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|QDBusVariant
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"type-array"
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"type-struct"
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"type-naked"
argument_list|)
operator|<<
name|qMetaTypeId
argument_list|<
name|void
operator|*
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|DisconnectRawDBus
struct|struct
name|DisconnectRawDBus
block|{
DECL|function|cleanup
specifier|static
name|void
name|cleanup
parameter_list|(
name|DBusConnection
modifier|*
name|connection
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connection
condition|)
return|return;
name|dbus_connection_close
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|dbus_connection_unref
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_template
DECL|struct|GenericUnref
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
name|void
parameter|(*unref
parameter_list|)
template|(
name|T
modifier|*
parameter|)
template|>
struct|struct
name|GenericUnref
block|{
DECL|function|cleanup
specifier|static
name|void
name|cleanup
parameter_list|(
name|T
modifier|*
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
condition|)
return|return;
name|unref
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_template
begin_comment
comment|// use these scoped types to avoid memory leaks if QVERIFY or QCOMPARE fails
end_comment
begin_typedef
DECL|typedef|ScopedDBusConnection
typedef|typedef
name|QScopedPointer
argument_list|<
name|DBusConnection
argument_list|,
name|DisconnectRawDBus
argument_list|>
name|ScopedDBusConnection
typedef|;
end_typedef
begin_typedef
DECL|typedef|ScopedDBusMessage
typedef|typedef
name|QScopedPointer
argument_list|<
name|DBusMessage
argument_list|,
name|GenericUnref
argument_list|<
name|DBusMessage
argument_list|,
name|dbus_message_unref
argument_list|>
argument_list|>
name|ScopedDBusMessage
typedef|;
end_typedef
begin_typedef
DECL|typedef|ScopedDBusPendingCall
typedef|typedef
name|QScopedPointer
argument_list|<
name|DBusPendingCall
argument_list|,
name|GenericUnref
argument_list|<
name|DBusPendingCall
argument_list|,
name|dbus_pending_call_unref
argument_list|>
argument_list|>
name|ScopedDBusPendingCall
typedef|;
end_typedef
begin_struct
DECL|struct|SetResetValue
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|SetResetValue
block|{
DECL|member|oldValue
specifier|const
name|T
name|oldValue
decl_stmt|;
DECL|member|value
name|T
modifier|&
name|value
decl_stmt|;
public|public:
DECL|function|SetResetValue
name|SetResetValue
parameter_list|(
name|T
modifier|&
name|v
parameter_list|,
name|T
name|newValue
parameter_list|)
member_init_list|:
name|oldValue
argument_list|(
name|v
argument_list|)
member_init_list|,
name|value
argument_list|(
name|v
argument_list|)
block|{
name|value
operator|=
name|newValue
expr_stmt|;
block|}
DECL|function|~SetResetValue
name|~
name|SetResetValue
parameter_list|()
block|{
name|value
operator|=
name|oldValue
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|receiveUnknownType
name|void
name|tst_QDBusMarshall
operator|::
name|receiveUnknownType
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
comment|// this needs to be implemented in raw
comment|// open a new connection to the bus daemon
name|DBusError
name|error
decl_stmt|;
name|dbus_error_init
argument_list|(
operator|&
name|error
argument_list|)
expr_stmt|;
name|ScopedDBusConnection
name|rawcon
argument_list|(
name|dbus_bus_get_private
argument_list|(
name|DBUS_BUS_SESSION
argument_list|,
operator|&
name|error
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|,
name|error
operator|.
name|name
argument_list|)
expr_stmt|;
comment|// check if this bus supports passing file descriptors
if|if
condition|(
operator|!
name|dbus_connection_can_send_type
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|,
name|DBUS_TYPE_UNIX_FD
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Your session bus does not allow sending Unix file descriptors"
argument_list|)
expr_stmt|;
comment|// make sure this QDBusConnection won't handle Unix file descriptors
name|QDBusConnection
operator|::
name|ConnectionCapabilities
modifier|&
name|capabRef
init|=
name|QDBusConnectionPrivate
operator|::
name|d
argument_list|(
name|con
argument_list|)
operator|->
name|capabilities
decl_stmt|;
name|SetResetValue
argument_list|<
name|QDBusConnection
operator|::
name|ConnectionCapabilities
argument_list|>
name|resetter
argument_list|(
name|capabRef
argument_list|,
name|capabRef
operator|&
operator|~
name|QDBusConnection
operator|::
name|UnixFileDescriptorPassing
argument_list|)
decl_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"in-call"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// create a call back to us containing a file descriptor
name|QDBusMessageSpy
name|spy
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/spyObject"
argument_list|,
operator|&
name|spy
argument_list|,
name|QDBusConnection
operator|::
name|ExportAllSlots
argument_list|)
expr_stmt|;
name|ScopedDBusMessage
name|msg
argument_list|(
name|dbus_message_new_method_call
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|,
literal|"/spyObject"
argument_list|,
name|NULL
argument_list|,
literal|"theSlot"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|fd
init|=
name|fileno
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|dbus_message_append_args
argument_list|(
name|msg
operator|.
name|data
argument_list|()
argument_list|,
name|DBUS_TYPE_UNIX_FD
argument_list|,
operator|&
name|fd
argument_list|,
name|DBUS_TYPE_INVALID
argument_list|)
expr_stmt|;
comment|// try to send to us
name|DBusPendingCall
modifier|*
name|pending_ptr
decl_stmt|;
name|dbus_connection_send_with_reply
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|,
name|msg
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|pending_ptr
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|ScopedDBusPendingCall
name|pending
argument_list|(
name|pending_ptr
argument_list|)
decl_stmt|;
comment|// check that it got sent
while|while
condition|(
name|dbus_connection_dispatch
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|DBUS_DISPATCH_DATA_REMAINS
condition|)
empty_stmt|;
comment|// now spin our event loop. We don't catch this call, so let's get the reply
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|200
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// now try to receive the reply
name|dbus_pending_call_block
argument_list|(
name|pending
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that the spy received what it was supposed to receive
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|arguments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|receivedTypeId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
name|receivedTypeId
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|(
name|dbus_pending_call_steal_reply
argument_list|(
name|pending
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dbus_message_get_type
argument_list|(
name|msg
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|DBUS_MESSAGE_TYPE_METHOD_RETURN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dbus_message_get_signature
argument_list|(
name|msg
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|DBUS_TYPE_INT32_AS_STRING
argument_list|)
expr_stmt|;
name|int
name|retval
decl_stmt|;
name|QVERIFY
argument_list|(
name|dbus_message_get_args
argument_list|(
name|msg
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|error
argument_list|,
name|DBUS_TYPE_INT32
argument_list|,
operator|&
name|retval
argument_list|,
name|DBUS_TYPE_INVALID
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|retval
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create a signal that we'll emit
specifier|static
specifier|const
name|char
name|signalName
index|[]
init|=
literal|"signalName"
decl_stmt|;
specifier|static
specifier|const
name|char
name|interfaceName
index|[]
init|=
literal|"local.interface.name"
decl_stmt|;
name|ScopedDBusMessage
name|msg
argument_list|(
name|dbus_message_new_signal
argument_list|(
literal|"/"
argument_list|,
name|interfaceName
argument_list|,
name|signalName
argument_list|)
argument_list|)
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|dbus_bus_get_unique_name
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|interfaceName
argument_list|,
name|signalName
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessageSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|dbus_bus_get_unique_name
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|interfaceName
argument_list|,
name|signalName
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|theSlot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DBusMessageIter
name|iter
decl_stmt|;
name|dbus_message_iter_init_append
argument_list|(
name|msg
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|iter
argument_list|)
expr_stmt|;
name|int
name|fd
init|=
name|fileno
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"type-naked"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// send naked
name|dbus_message_iter_append_basic
argument_list|(
operator|&
name|iter
argument_list|,
name|DBUS_TYPE_UNIX_FD
argument_list|,
operator|&
name|fd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DBusMessageIter
name|subiter
decl_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"type-variant"
argument_list|)
operator|==
literal|0
condition|)
name|dbus_message_iter_open_container
argument_list|(
operator|&
name|iter
argument_list|,
name|DBUS_TYPE_VARIANT
argument_list|,
name|DBUS_TYPE_UNIX_FD_AS_STRING
argument_list|,
operator|&
name|subiter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"type-array"
argument_list|)
operator|==
literal|0
condition|)
name|dbus_message_iter_open_container
argument_list|(
operator|&
name|iter
argument_list|,
name|DBUS_TYPE_ARRAY
argument_list|,
name|DBUS_TYPE_UNIX_FD_AS_STRING
argument_list|,
operator|&
name|subiter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"type-struct"
argument_list|)
operator|==
literal|0
condition|)
name|dbus_message_iter_open_container
argument_list|(
operator|&
name|iter
argument_list|,
name|DBUS_TYPE_STRUCT
argument_list|,
literal|0
argument_list|,
operator|&
name|subiter
argument_list|)
expr_stmt|;
name|dbus_message_iter_append_basic
argument_list|(
operator|&
name|subiter
argument_list|,
name|DBUS_TYPE_UNIX_FD
argument_list|,
operator|&
name|fd
argument_list|)
expr_stmt|;
name|dbus_message_iter_close_container
argument_list|(
operator|&
name|iter
argument_list|,
operator|&
name|subiter
argument_list|)
expr_stmt|;
block|}
comment|// send it
name|dbus_connection_send
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|,
name|msg
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check that it got sent
while|while
condition|(
name|dbus_connection_dispatch
argument_list|(
name|rawcon
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|DBUS_DISPATCH_DATA_REMAINS
condition|)
empty_stmt|;
comment|// now let's see what happens
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|receivedTypeId
argument_list|)
expr_stmt|;
comment|//qDebug()<< spy.list.at(0).arguments().at(0).typeName();
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
name|receivedTypeId
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|demarshallPrimitives_data
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallPrimitives_data
parameter_list|()
block|{
name|addBasicTypesColumns
argument_list|()
expr_stmt|;
comment|// Primitive types, excluding strings and FD
name|basicNumericTypes_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|demarshallPrimitiveAs
name|QVariant
name|demarshallPrimitiveAs
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|dbusArg
parameter_list|)
block|{
name|T
name|val
decl_stmt|;
name|dbusArg
operator|>>
name|val
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|val
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|demarshallPrimitiveAs
name|QVariant
name|demarshallPrimitiveAs
parameter_list|(
name|int
name|typeIndex
parameter_list|,
specifier|const
name|QDBusArgument
modifier|&
name|dbusArg
parameter_list|)
block|{
switch|switch
condition|(
name|typeIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|uchar
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|bool
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|short
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|ushort
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|4
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|int
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|uint
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|qlonglong
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|qulonglong
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|demarshallPrimitiveAs
argument_list|<
name|double
argument_list|>
argument_list|(
name|dbusArg
argument_list|)
return|;
default|default:
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|demarshallPrimitives
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallPrimitives
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sig
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
comment|// Demarshall each test data value to all primitive types to test
comment|// demarshalling to the wrong type does not cause a crash
for|for
control|(
name|int
name|typeIndex
init|=
literal|0
init|;
literal|true
condition|;
operator|++
name|typeIndex
control|)
block|{
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|QDBusArgument
name|sendArg
decl_stmt|;
name|sendArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|sendArg
operator|.
name|appendVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sendArg
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|const
name|QDBusArgument
name|receiveArg
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|receiveArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiveArg
operator|.
name|currentSignature
argument_list|()
argument_list|,
name|sig
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|receiveValue
init|=
name|demarshallPrimitiveAs
argument_list|(
name|typeIndex
argument_list|,
name|receiveArg
argument_list|)
decl_stmt|;
if|if
condition|(
name|receiveValue
operator|.
name|type
argument_list|()
operator|==
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
comment|// Value type is the same, compare the values
name|QCOMPARE
argument_list|(
name|receiveValue
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiveArg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|receiveArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiveArg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|receiveValue
operator|.
name|isValid
argument_list|()
condition|)
break|break;
block|}
block|}
end_function
begin_function
DECL|function|demarshallStrings_data
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallStrings_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|char
argument_list|>
argument_list|(
literal|"targetSig"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
comment|// All primitive types demarshall to null string types
typedef|typedef
name|QPair
argument_list|<
name|QVariant
argument_list|,
name|char
argument_list|>
name|ValSigPair
typedef|;
specifier|const
name|QList
argument_list|<
name|ValSigPair
argument_list|>
name|nullStringTypes
init|=
name|QList
argument_list|<
name|ValSigPair
argument_list|>
argument_list|()
operator|<<
name|ValSigPair
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|,
literal|'s'
argument_list|)
operator|<<
name|ValSigPair
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
argument_list|,
literal|'o'
argument_list|)
operator|<<
name|ValSigPair
argument_list|(
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
argument_list|,
literal|'g'
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|ValSigPair
name|valSigPair
decl|,
name|nullStringTypes
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool(false)"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|false
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool(true)"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|true
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"byte"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|uchar
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|short
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint16"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|ushort
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|2U
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int64"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|Q_INT64_C
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint64"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|42.5
argument_list|)
operator|<<
name|valSigPair
operator|.
name|second
operator|<<
name|valSigPair
operator|.
name|first
expr_stmt|;
block|}
comment|// String types should demarshall to each other. This is a regression test
comment|// to check released functionality is maintained even after checks have
comment|// been added to string demarshalling
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty string->invalid objectpath"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|""
argument_list|)
operator|<<
literal|'o'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null string->invalid objectpath"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|<<
literal|'o'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string->invalid objectpath"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|"invalid objectpath"
argument_list|)
operator|<<
literal|'o'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string->valid objectpath"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|"/org/kde"
argument_list|)
operator|<<
literal|'o'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|(
literal|"/org/kde"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty string->invalid signature"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|""
argument_list|)
operator|<<
literal|'g'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null string->invalid signature"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QString
argument_list|()
argument_list|)
operator|<<
literal|'g'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string->invalid signature"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|"_invalid signature"
argument_list|)
operator|<<
literal|'g'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string->valid signature"
argument_list|)
operator|<<
name|QVariant
argument_list|(
literal|"s"
argument_list|)
operator|<<
literal|'g'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"objectpath->string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|(
literal|"/org/kde"
argument_list|)
argument_list|)
operator|<<
literal|'s'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
argument_list|(
literal|"/org/kde"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"objectpath->invalid signature"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|(
literal|"/org/kde"
argument_list|)
argument_list|)
operator|<<
literal|'g'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signature->string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|<<
literal|'s'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
argument_list|(
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signature->invalid objectpath"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusSignature
argument_list|(
literal|"s"
argument_list|)
argument_list|)
operator|<<
literal|'o'
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusObjectPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|demarshallAsString
name|QVariant
name|demarshallAsString
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|dbusArg
parameter_list|,
name|char
name|targetSig
parameter_list|)
block|{
switch|switch
condition|(
name|targetSig
condition|)
block|{
case|case
literal|'s'
case|:
block|{
name|QString
name|s
decl_stmt|;
name|dbusArg
operator|>>
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
case|case
literal|'o'
case|:
block|{
name|QDBusObjectPath
name|op
decl_stmt|;
name|dbusArg
operator|>>
name|op
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|op
argument_list|)
return|;
block|}
case|case
literal|'g'
case|:
block|{
name|QDBusSignature
name|sig
decl_stmt|;
name|dbusArg
operator|>>
name|sig
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sig
argument_list|)
return|;
block|}
default|default:
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|demarshallStrings
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallStrings
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|char
argument_list|,
name|targetSig
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|QDBusArgument
name|sendArg
decl_stmt|;
name|sendArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|sendArg
operator|.
name|appendVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sendArg
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|const
name|QDBusArgument
name|receiveArg
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|receiveArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QVariant
name|receiveValue
init|=
name|demarshallAsString
argument_list|(
name|receiveArg
argument_list|,
name|targetSig
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|receiveValue
operator|.
name|isValid
argument_list|()
argument_list|,
literal|"Invalid targetSig in demarshallStrings_data()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|compare
argument_list|(
name|receiveValue
argument_list|,
name|expectedValue
argument_list|)
argument_list|)
expr_stmt|;
name|receiveArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiveArg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|demarshallInvalidStringList_data
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallInvalidStringList_data
parameter_list|()
block|{
name|addBasicTypesColumns
argument_list|()
expr_stmt|;
comment|// None of the basic types should demarshall to a string list
name|basicNumericTypes_data
argument_list|()
expr_stmt|;
name|basicStringTypes_data
argument_list|()
expr_stmt|;
comment|// Arrays of non-string type should not demarshall to a string list
name|QList
argument_list|<
name|bool
argument_list|>
name|bools
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"emptyboollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
expr_stmt|;
name|bools
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"boollist"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
expr_stmt|;
comment|// Structures should not demarshall to a QByteArray
name|QTest
operator|::
name|newRow
argument_list|(
literal|"struct of strings"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"struct of mixed types"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|int
argument_list|(
literal|42
argument_list|)
operator|<<
name|double
argument_list|(
literal|3.14
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|demarshallInvalidStringList
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallInvalidStringList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|QDBusArgument
name|sendArg
decl_stmt|;
name|sendArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|sendArg
operator|.
name|appendVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sendArg
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|const
name|QDBusArgument
name|receiveArg
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|receiveArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QStringList
name|receiveValue
decl_stmt|;
name|receiveArg
operator|>>
name|receiveValue
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiveValue
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|receiveArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiveArg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|demarshallInvalidByteArray_data
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallInvalidByteArray_data
parameter_list|()
block|{
name|addBasicTypesColumns
argument_list|()
expr_stmt|;
comment|// None of the basic types should demarshall to a QByteArray
name|basicNumericTypes_data
argument_list|()
expr_stmt|;
name|basicStringTypes_data
argument_list|()
expr_stmt|;
comment|// Arrays of other types than byte should not demarshall to a QByteArray
name|QList
argument_list|<
name|bool
argument_list|>
name|bools
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty array of bool"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
expr_stmt|;
name|bools
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-empty array of bool"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|bools
argument_list|)
expr_stmt|;
comment|// Structures should not demarshall to a QByteArray
name|QTest
operator|::
name|newRow
argument_list|(
literal|"struct of bytes"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|uchar
argument_list|(
literal|1
argument_list|)
operator|<<
name|uchar
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"struct of mixed types"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|int
argument_list|(
literal|42
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|double
argument_list|(
literal|3.14
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|demarshallInvalidByteArray
name|void
name|tst_QDBusMarshall
operator|::
name|demarshallInvalidByteArray
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"ping"
argument_list|)
decl_stmt|;
name|QDBusArgument
name|sendArg
decl_stmt|;
name|sendArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|sendArg
operator|.
name|appendVariant
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|sendArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setArguments
argument_list|(
name|QVariantList
argument_list|()
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sendArg
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|con
operator|.
name|call
argument_list|(
name|msg
argument_list|)
decl_stmt|;
specifier|const
name|QDBusArgument
name|receiveArg
init|=
name|qvariant_cast
argument_list|<
name|QDBusArgument
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|receiveArg
operator|.
name|beginStructure
argument_list|()
expr_stmt|;
name|QByteArray
name|receiveValue
decl_stmt|;
name|receiveArg
operator|>>
name|receiveValue
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiveValue
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|receiveArg
operator|.
name|endStructure
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiveArg
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusMarshall
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusmarshall.moc"
end_include
end_unit
