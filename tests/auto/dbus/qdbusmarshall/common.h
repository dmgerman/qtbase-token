begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_comment
comment|// isnan
end_comment
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<private/qcore_unix_p.h>
end_include
begin_function
DECL|function|compareFileDescriptors
specifier|static
name|bool
name|compareFileDescriptors
parameter_list|(
name|int
name|fd1
parameter_list|,
name|int
name|fd2
parameter_list|)
block|{
name|QT_STATBUF
name|st1
decl_stmt|,
name|st2
decl_stmt|;
if|if
condition|(
name|QT_FSTAT
argument_list|(
name|fd1
argument_list|,
operator|&
name|st1
argument_list|)
operator|==
operator|-
literal|1
operator|||
name|QT_FSTAT
argument_list|(
name|fd2
argument_list|,
operator|&
name|st2
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"fstat"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
return|return
operator|(
name|st1
operator|.
name|st_dev
operator|==
name|st2
operator|.
name|st_dev
operator|)
operator|&&
operator|(
name|st1
operator|.
name|st_ino
operator|==
name|st2
operator|.
name|st_ino
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVariant
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<bool>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<short>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<ushort>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<int>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<uint>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<qlonglong>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<qulonglong>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<double>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QDBusVariant>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QDateTime>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QByteArray>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QVariantList>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QStringList>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<bool>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<short>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<ushort>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<int>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<uint>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<qlonglong>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<qulonglong>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<double>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<QDBusObjectPath>>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QList<QDBusSignature>>
argument_list|)
end_macro
begin_typedef
DECL|typedef|IntStringMap
typedef|typedef
name|QMap
operator|<
name|int
operator|,
name|QString
operator|>
name|IntStringMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QString
DECL|typedef|StringStringMap
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
name|StringStringMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QDBusObjectPath
DECL|typedef|ObjectPathStringMap
typedef|typedef
name|QMap
operator|<
name|QDBusObjectPath
operator|,
name|QString
operator|>
name|ObjectPathStringMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|qlonglong
DECL|typedef|LLDateTimeMap
typedef|typedef
name|QHash
operator|<
name|qlonglong
operator|,
name|QDateTime
operator|>
name|LLDateTimeMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|QDBusSignature
DECL|typedef|SignatureStringMap
typedef|typedef
name|QHash
operator|<
name|QDBusSignature
operator|,
name|QString
operator|>
name|SignatureStringMap
expr_stmt|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntStringMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|StringStringMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|ObjectPathStringMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|LLDateTimeMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SignatureStringMap
argument_list|)
end_macro
begin_function
DECL|function|compare
specifier|static
name|bool
name|compare
parameter_list|(
specifier|const
name|QDBusUnixFileDescriptor
modifier|&
name|t1
parameter_list|,
specifier|const
name|QDBusUnixFileDescriptor
modifier|&
name|t2
parameter_list|)
block|{
name|int
name|fd1
init|=
name|t1
operator|.
name|fileDescriptor
argument_list|()
decl_stmt|;
name|int
name|fd2
init|=
name|t2
operator|.
name|fileDescriptor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|fd1
operator|==
operator|-
literal|1
operator|||
name|fd2
operator|==
operator|-
literal|1
operator|)
operator|&&
name|fd1
operator|!=
name|fd2
condition|)
block|{
comment|// one is valid, the other isn't
return|return
name|false
return|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_UNIX
return|return
name|compareFileDescriptors
argument_list|(
name|fd1
argument_list|,
name|fd2
argument_list|)
return|;
else|#
directive|else
return|return
name|true
return|;
endif|#
directive|endif
block|}
end_function
begin_struct
DECL|struct|MyStruct
struct|struct
name|MyStruct
block|{
DECL|member|i
name|int
name|i
decl_stmt|;
DECL|member|s
name|QString
name|s
decl_stmt|;
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MyStruct
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|i
operator|==
name|other
operator|.
name|i
operator|&&
name|s
operator|==
name|other
operator|.
name|s
return|;
block|}
block|}
struct|;
end_struct
begin_macro
DECL|function|Q_DECLARE_METATYPE
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyStruct
argument_list|)
end_macro
begin_expr_stmt
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|MyStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|<<
name|ms
operator|.
name|i
operator|<<
name|ms
operator|.
name|s
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|MyStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|>>
name|ms
operator|.
name|i
operator|>>
name|ms
operator|.
name|s
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_struct
DECL|struct|MyVariantMapStruct
struct|struct
name|MyVariantMapStruct
block|{
DECL|member|s
name|QString
name|s
decl_stmt|;
DECL|member|map
name|QVariantMap
name|map
decl_stmt|;
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MyVariantMapStruct
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|s
operator|==
name|other
operator|.
name|s
operator|&&
name|map
operator|==
name|other
operator|.
name|map
return|;
block|}
block|}
struct|;
end_struct
begin_macro
DECL|function|Q_DECLARE_METATYPE
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyVariantMapStruct
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<MyVariantMapStruct>
argument_list|)
end_macro
begin_expr_stmt
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|MyVariantMapStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|<<
name|ms
operator|.
name|s
operator|<<
name|ms
operator|.
name|map
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|MyVariantMapStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|>>
name|ms
operator|.
name|s
operator|>>
name|ms
operator|.
name|map
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_struct
DECL|struct|MyFileDescriptorStruct
struct|struct
name|MyFileDescriptorStruct
block|{
DECL|member|fd
name|QDBusUnixFileDescriptor
name|fd
decl_stmt|;
DECL|function|operator
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MyFileDescriptorStruct
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|compare
argument_list|(
name|fd
argument_list|,
name|other
operator|.
name|fd
argument_list|)
return|;
block|}
block|}
struct|;
end_struct
begin_macro
DECL|function|Q_DECLARE_METATYPE
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyFileDescriptorStruct
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<MyFileDescriptorStruct>
argument_list|)
end_macro
begin_expr_stmt
name|QDBusArgument
operator|&
name|operator
operator|<<
operator|(
name|QDBusArgument
operator|&
name|arg
operator|,
specifier|const
name|MyFileDescriptorStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|<<
name|ms
operator|.
name|fd
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|const
name|QDBusArgument
operator|&
name|operator
operator|>>
operator|(
specifier|const
name|QDBusArgument
operator|&
name|arg
operator|,
name|MyFileDescriptorStruct
operator|&
name|ms
operator|)
block|{
name|arg
operator|.
name|beginStructure
argument_list|()
block|;
name|arg
operator|>>
name|ms
operator|.
name|fd
block|;
name|arg
operator|.
name|endStructure
argument_list|()
block|;
return|return
name|arg
return|;
block|}
end_expr_stmt
begin_function
DECL|function|commonInit
name|void
name|commonInit
parameter_list|()
block|{
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QDateTime
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|QDBusObjectPath
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QList
operator|<
name|QDBusSignature
operator|>
expr|>
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QMap
operator|<
name|int
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QMap
operator|<
name|QDBusObjectPath
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QHash
operator|<
name|qlonglong
operator|,
name|QDateTime
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QHash
operator|<
name|QDBusSignature
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|MyStruct
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|MyVariantMapStruct
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|MyVariantMapStruct
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|MyFileDescriptorStruct
operator|>
operator|(
operator|)
expr_stmt|;
name|qDBusRegisterMetaType
operator|<
name|QList
operator|<
name|MyFileDescriptorStruct
operator|>
expr|>
operator|(
operator|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|USE_PRIVATE_CODE
end_ifdef
begin_include
include|#
directive|include
file|"private/qdbusintrospection_p.h"
end_include
begin_comment
comment|// just to make it easier:
end_comment
begin_typedef
DECL|typedef|InterfaceMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Interfaces
name|InterfaceMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|ObjectMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Objects
name|ObjectMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|ArgumentList
typedef|typedef
name|QDBusIntrospection
operator|::
name|Arguments
name|ArgumentList
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|AnnotationsMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Annotations
name|AnnotationsMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|MethodMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Methods
name|MethodMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|SignalMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Signals
name|SignalMap
expr_stmt|;
end_typedef
begin_typedef
DECL|typedef|PropertyMap
typedef|typedef
name|QDBusIntrospection
operator|::
name|Properties
name|PropertyMap
expr_stmt|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusIntrospection::Method
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusIntrospection::Signal
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDBusIntrospection::Property
argument_list|)
end_macro
begin_macro
DECL|function|Q_DECLARE_METATYPE
name|Q_DECLARE_METATYPE
argument_list|(
argument|MethodMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SignalMap
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|PropertyMap
argument_list|)
end_macro
begin_expr_stmt
specifier|inline
name|QDBusIntrospection
operator|::
name|Argument
name|arg
argument_list|(
argument|const char* type
argument_list|,
argument|const char *name =
literal|0
argument_list|)
block|{
name|QDBusIntrospection
operator|::
name|Argument
name|retval
block|;
name|retval
operator|.
name|type
operator|=
name|QLatin1String
argument_list|(
name|type
argument_list|)
block|;
name|retval
operator|.
name|name
operator|=
name|QLatin1String
argument_list|(
name|name
argument_list|)
block|;
return|return
name|retval
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|variable|QString
DECL|function|operator
specifier|inline
name|QMap
operator|<
name|QString
operator|,
name|T
operator|>
operator|&
name|operator
operator|<<
operator|(
name|QMap
operator|<
name|QString
operator|,
name|T
operator|>
operator|&
name|map
operator|,
specifier|const
name|T
operator|&
name|m
operator|)
block|{
name|map
operator|.
name|insertMulti
argument_list|(
name|m
operator|.
name|name
argument_list|,
name|m
argument_list|)
block|;
return|return
name|map
return|;
block|}
end_expr_stmt
begin_function
DECL|function|mapName
specifier|inline
specifier|const
name|char
modifier|*
name|mapName
parameter_list|(
specifier|const
name|MethodMap
modifier|&
parameter_list|)
block|{
return|return
literal|"MethodMap"
return|;
block|}
end_function
begin_function
DECL|function|mapName
specifier|inline
specifier|const
name|char
modifier|*
name|mapName
parameter_list|(
specifier|const
name|SignalMap
modifier|&
parameter_list|)
block|{
return|return
literal|"SignalMap"
return|;
block|}
end_function
begin_function
DECL|function|mapName
specifier|inline
specifier|const
name|char
modifier|*
name|mapName
parameter_list|(
specifier|const
name|PropertyMap
modifier|&
parameter_list|)
block|{
return|return
literal|"PropertyMap"
return|;
block|}
end_function
begin_decl_stmt
DECL|function|printable
name|QString
name|printable
argument_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Method
operator|&
name|m
argument_list|)
block|{
name|QString
name|result
init|=
literal|"method "
operator|+
name|m
operator|.
name|name
operator|+
literal|"("
decl_stmt|;
name|foreach
argument_list|(
argument|QDBusIntrospection::Argument arg
argument_list|,
argument|m.inputArgs
argument_list|)
name|result
operator|+=
name|QString
argument_list|(
literal|"in %1 %2, "
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|,
name|arg
operator|.
name|name
argument_list|)
expr_stmt|;
name|foreach
argument_list|(
argument|QDBusIntrospection::Argument arg
argument_list|,
argument|m.outputArgs
argument_list|)
name|result
operator|+=
name|QString
argument_list|(
literal|"out %1 %2, "
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|,
name|arg
operator|.
name|name
argument_list|)
expr_stmt|;
name|AnnotationsMap
operator|::
name|const_iterator
name|it
operator|=
name|m
operator|.
name|annotations
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|m
operator|.
name|annotations
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|result
operator|+=
name|QString
argument_list|(
literal|"%1 \"%2\", "
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
literal|")"
expr_stmt|;
return|return
name|result
return|;
block|}
end_decl_stmt
begin_decl_stmt
DECL|function|printable
name|QString
name|printable
argument_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Signal
operator|&
name|s
argument_list|)
block|{
name|QString
name|result
init|=
literal|"signal "
operator|+
name|s
operator|.
name|name
operator|+
literal|"("
decl_stmt|;
name|foreach
argument_list|(
argument|QDBusIntrospection::Argument arg
argument_list|,
argument|s.outputArgs
argument_list|)
name|result
operator|+=
name|QString
argument_list|(
literal|"out %1 %2, "
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|,
name|arg
operator|.
name|name
argument_list|)
expr_stmt|;
name|AnnotationsMap
operator|::
name|const_iterator
name|it
operator|=
name|s
operator|.
name|annotations
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|s
operator|.
name|annotations
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|result
operator|+=
name|QString
argument_list|(
literal|"%1 \"%2\", "
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
literal|")"
expr_stmt|;
return|return
name|result
return|;
block|}
end_decl_stmt
begin_decl_stmt
DECL|function|printable
name|QString
name|printable
argument_list|(
specifier|const
name|QDBusIntrospection
operator|::
name|Property
operator|&
name|p
argument_list|)
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|access
operator|==
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
condition|)
name|result
operator|=
literal|"property read %1 %2, "
expr_stmt|;
elseif|else
if|if
condition|(
name|p
operator|.
name|access
operator|==
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
condition|)
name|result
operator|=
literal|"property write %1 %2, "
expr_stmt|;
else|else
name|result
operator|=
literal|"property readwrite %1 %2, "
expr_stmt|;
name|result
operator|=
name|result
operator|.
name|arg
argument_list|(
name|p
operator|.
name|type
argument_list|,
name|p
operator|.
name|name
argument_list|)
expr_stmt|;
name|AnnotationsMap
operator|::
name|const_iterator
name|it
operator|=
name|p
operator|.
name|annotations
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|p
operator|.
name|annotations
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|result
operator|+=
name|QString
argument_list|(
literal|"%1 \"%2\", "
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_decl_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|printableMap
name|char
operator|*
name|printableMap
argument_list|(
argument|const QMap<QString
argument_list|,
argument|T>& map
argument_list|)
block|{
name|QString
name|contents
operator|=
literal|"\n"
block|;
name|typename
name|QMap
operator|<
name|QString
block|,
name|T
operator|>
operator|::
name|const_iterator
name|it
operator|=
name|map
operator|.
name|begin
argument_list|()
block|;
for|for
control|(
init|;
name|it
operator|!=
name|map
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|!=
name|it
operator|.
name|value
argument_list|()
operator|.
name|name
condition|)
name|contents
operator|+=
name|it
operator|.
name|value
argument_list|()
operator|.
name|name
operator|+
literal|":"
expr_stmt|;
name|contents
operator|+=
name|printable
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|+=
literal|";\n"
expr_stmt|;
block|}
name|QString
name|result
argument_list|(
literal|"%1(size = %2): {%3}"
argument_list|)
expr_stmt|;
end_expr_stmt
begin_return
return|return
name|qstrdup
argument_list|(
name|qPrintable
argument_list|(
name|result
operator|.
name|arg
argument_list|(
name|mapName
argument_list|(
name|map
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|contents
argument_list|)
argument_list|)
argument_list|)
return|;
end_return
begin_decl_stmt
unit|}  QT_BEGIN_NAMESPACE
name|namespace
name|QTest
block|{
name|template
operator|<
operator|>
specifier|inline
name|char
operator|*
name|toString
argument_list|(
argument|const MethodMap& map
argument_list|)
block|{
return|return
name|printableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|char
operator|*
name|toString
argument_list|(
argument|const SignalMap& map
argument_list|)
block|{
return|return
name|printableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|char
operator|*
name|toString
argument_list|(
argument|const PropertyMap& map
argument_list|)
block|{
return|return
name|printableMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
end_decl_stmt
begin_expr_stmt
name|QT_END_NAMESPACE
endif|#
directive|endif
comment|//bool compare(const QVariantList&l1, const QVariantList&l2);
comment|//bool compare(const QVariantMap&m1, const QVariantMap&m2);
name|template
operator|<
name|typename
name|T
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const T&t1
argument_list|,
argument|const T&t2
argument_list|)
block|{
return|return
name|t1
operator|==
name|t2
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
operator|>
name|bool
name|compare
argument_list|(
specifier|const
name|QVariant
operator|&
name|v1
argument_list|,
specifier|const
name|QVariant
operator|&
name|v2
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|compare
name|bool
name|compare
parameter_list|(
name|double
name|d1
parameter_list|,
name|double
name|d2
parameter_list|)
block|{
if|if
condition|(
name|isnan
argument_list|(
name|d1
argument_list|)
operator|&&
name|isnan
argument_list|(
name|d2
argument_list|)
condition|)
return|return
name|true
return|;
return|return
name|d1
operator|==
name|d2
return|;
block|}
end_function
begin_expr_stmt
name|template
operator|<
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const QString&s1
argument_list|,
argument|const QString&s2
argument_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_comment
comment|// regardless of whether one of them is null
end_comment
begin_return
return|return
name|s1
operator|==
name|s2
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const QByteArray&ba1
argument_list|,
argument|const QByteArray&ba2
argument_list|)
block|{
if|if
condition|(
name|ba1
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ba2
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|true
return|;
end_expr_stmt
begin_comment
comment|// regardless of whether one of them is null
end_comment
begin_return
return|return
name|ba1
operator|==
name|ba2
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const QDBusVariant&s1
argument_list|,
argument|const QDBusVariant&s2
argument_list|)
block|{
return|return
name|compare
argument_list|(
name|s1
operator|.
name|variant
argument_list|()
argument_list|,
name|s2
operator|.
name|variant
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|compare
argument_list|(
argument|const QList<T>&l1
argument_list|,
argument|const QList<T>&l2
argument_list|)
block|{
if|if
condition|(
name|l1
operator|.
name|count
argument_list|()
operator|!=
name|l2
operator|.
name|count
argument_list|()
condition|)
return|return
name|false
return|;
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|ConstIterator
name|it1
operator|=
name|l1
operator|.
name|constBegin
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|ConstIterator
name|it2
operator|=
name|l2
operator|.
name|constBegin
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|typename
name|QList
operator|<
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|l1
operator|.
name|constEnd
argument_list|()
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
init|;
name|it1
operator|!=
name|end
condition|;
operator|++
name|it1
operator|,
operator|++
name|it2
control|)
if|if
condition|(
operator|!
name|compare
argument_list|(
operator|*
name|it1
argument_list|,
operator|*
name|it2
argument_list|)
condition|)
return|return
name|false
return|;
end_for
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const QMap<Key
argument_list|,
argument|T>&m1
argument_list|,
argument|const QMap<Key
argument_list|,
argument|T>&m2
argument_list|)
block|{
if|if
condition|(
name|m1
operator|.
name|count
argument_list|()
operator|!=
name|m2
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|i1
operator|=
name|m1
operator|.
name|constBegin
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|m1
operator|.
name|constEnd
argument_list|()
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
init|;
name|i1
operator|!=
name|end
condition|;
operator|++
name|i1
control|)
block|{
name|typename
name|QMap
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|i2
operator|=
name|m2
operator|.
name|find
argument_list|(
name|i1
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i2
operator|==
name|m2
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|!
name|compare
argument_list|(
operator|*
name|i1
argument_list|,
operator|*
name|i2
argument_list|)
condition|)
return|return
name|false
return|;
block|}
end_for
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
DECL|variable|Key
operator|<
name|typename
name|Key
operator|,
name|typename
name|T
operator|>
DECL|function|compare
name|bool
name|compare
argument_list|(
argument|const QHash<Key
argument_list|,
argument|T>&m1
argument_list|,
argument|const QHash<Key
argument_list|,
argument|T>&m2
argument_list|)
block|{
if|if
condition|(
name|m1
operator|.
name|count
argument_list|()
operator|!=
name|m2
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|i1
operator|=
name|m1
operator|.
name|constBegin
argument_list|()
expr_stmt|;
end_expr_stmt
begin_expr_stmt
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|end
operator|=
name|m1
operator|.
name|constEnd
argument_list|()
expr_stmt|;
end_expr_stmt
begin_for
for|for
control|(
init|;
name|i1
operator|!=
name|end
condition|;
operator|++
name|i1
control|)
block|{
name|typename
name|QHash
operator|<
name|Key
operator|,
name|T
operator|>
operator|::
name|ConstIterator
name|i2
operator|=
name|m2
operator|.
name|find
argument_list|(
name|i1
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i2
operator|==
name|m2
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|!
name|compare
argument_list|(
operator|*
name|i1
argument_list|,
operator|*
name|i2
argument_list|)
condition|)
return|return
name|false
return|;
block|}
end_for
begin_return
return|return
name|true
return|;
end_return
begin_expr_stmt
unit|}  template
operator|<
name|typename
name|T
operator|>
DECL|function|compare
specifier|inline
name|bool
name|compare
argument_list|(
argument|const QDBusArgument&arg
argument_list|,
argument|const QVariant&v2
argument_list|,
argument|T * =
literal|0
argument_list|)
block|{
return|return
name|compare
argument_list|(
name|qdbus_cast
operator|<
name|T
operator|>
operator|(
name|arg
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|T
operator|>
operator|(
name|v2
operator|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_function
DECL|function|compareToArgument
name|bool
name|compareToArgument
parameter_list|(
specifier|const
name|QDBusArgument
modifier|&
name|arg
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v2
parameter_list|)
block|{
if|if
condition|(
name|arg
operator|.
name|currentSignature
argument_list|()
operator|!=
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|v2
operator|.
name|userType
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
comment|// try to demarshall the arg according to v2
switch|switch
condition|(
name|v2
operator|.
name|userType
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Bool
case|:
return|return
name|compare
operator|<
name|bool
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QMetaType
operator|::
name|UChar
case|:
return|return
name|compare
operator|<
name|uchar
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QMetaType
operator|::
name|Short
case|:
return|return
name|compare
operator|<
name|short
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QMetaType
operator|::
name|UShort
case|:
return|return
name|compare
operator|<
name|ushort
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
return|return
name|compare
operator|<
name|int
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|UInt
case|:
return|return
name|compare
operator|<
name|uint
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
return|return
name|compare
operator|<
name|qlonglong
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
return|return
name|compare
operator|<
name|qulonglong
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
return|return
name|compare
operator|<
name|double
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|String
case|:
return|return
name|compare
operator|<
name|QString
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
return|return
name|compare
operator|<
name|QByteArray
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|List
case|:
return|return
name|compare
operator|<
name|QVariantList
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Map
case|:
return|return
name|compare
operator|<
name|QVariantMap
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Point
case|:
return|return
name|compare
operator|<
name|QPoint
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|PointF
case|:
return|return
name|compare
operator|<
name|QPointF
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Size
case|:
return|return
name|compare
operator|<
name|QSize
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|SizeF
case|:
return|return
name|compare
operator|<
name|QSizeF
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Line
case|:
return|return
name|compare
operator|<
name|QLine
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|LineF
case|:
return|return
name|compare
operator|<
name|QLineF
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Rect
case|:
return|return
name|compare
operator|<
name|QRect
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|RectF
case|:
return|return
name|compare
operator|<
name|QRectF
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
return|return
name|compare
operator|<
name|QDate
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|Time
case|:
return|return
name|compare
operator|<
name|QTime
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
case|case
name|QVariant
operator|::
name|DateTime
case|:
return|return
name|compare
operator|<
name|QDateTime
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
default|default:
specifier|register
name|int
name|id
init|=
name|v2
operator|.
name|userType
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusObjectPath
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QDBusObjectPath
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusSignature
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QDBusSignature
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusVariant
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QDBusVariant
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QDBusObjectPath
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QDBusObjectPath
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QDBusSignature
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QDBusSignature
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QDBusUnixFileDescriptor
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QDBusUnixFileDescriptor
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QDateTime
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QDateTime
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|int
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QMap
operator|<
name|int
operator|,
name|QString
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|QDBusObjectPath
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QMap
operator|<
name|QDBusObjectPath
operator|,
name|QString
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QHash
operator|<
name|qlonglong
operator|,
name|QDateTime
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QHash
operator|<
name|qlonglong
operator|,
name|QDateTime
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QHash
operator|<
name|QDBusSignature
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QHash
operator|<
name|QDBusSignature
operator|,
name|QString
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|MyStruct
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|MyStruct
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|MyVariantMapStruct
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|MyVariantMapStruct
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|MyVariantMapStruct
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|MyVariantMapStruct
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|MyFileDescriptorStruct
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|MyFileDescriptorStruct
operator|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|MyFileDescriptorStruct
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
operator|<
name|QList
operator|<
name|MyFileDescriptorStruct
operator|>
expr|>
operator|(
name|arg
operator|,
name|v2
operator|)
return|;
block|}
name|qWarning
argument_list|()
operator|<<
literal|"Unexpected QVariant type"
operator|<<
name|v2
operator|.
name|userType
argument_list|()
operator|<<
name|QByteArray
argument_list|(
name|QDBusMetaType
operator|::
name|typeToSignature
argument_list|(
name|v2
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|QVariant
operator|::
name|typeToName
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|v2
operator|.
name|userType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function
begin_expr_stmt
DECL|function|compare
name|template
operator|<
operator|>
name|bool
name|compare
argument_list|(
argument|const QVariant&v1
argument_list|,
argument|const QVariant&v2
argument_list|)
block|{
comment|// v1 is the one that came from the network
comment|// v2 is the one that we sent
if|if
condition|(
name|v1
operator|.
name|userType
argument_list|()
operator|==
name|qMetaTypeId
operator|<
name|QDBusArgument
operator|>
operator|(
operator|)
condition|)
comment|// this argument has been left un-demarshalled
return|return
name|compareToArgument
argument_list|(
name|qvariant_cast
operator|<
name|QDBusArgument
operator|>
operator|(
name|v1
operator|)
argument_list|,
name|v2
argument_list|)
return|;
end_expr_stmt
begin_if
if|if
condition|(
name|v1
operator|.
name|userType
argument_list|()
operator|!=
name|v2
operator|.
name|userType
argument_list|()
condition|)
return|return
name|false
return|;
end_if
begin_decl_stmt
name|int
name|id
init|=
name|v1
operator|.
name|userType
argument_list|()
decl_stmt|;
end_decl_stmt
begin_if
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|List
condition|)
return|return
name|compare
argument_list|(
name|v1
operator|.
name|toList
argument_list|()
argument_list|,
name|v2
operator|.
name|toList
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|Map
condition|)
return|return
name|compare
argument_list|(
name|v1
operator|.
name|toMap
argument_list|()
argument_list|,
name|v2
operator|.
name|toMap
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|String
condition|)
return|return
name|compare
argument_list|(
name|v1
operator|.
name|toString
argument_list|()
argument_list|,
name|v2
operator|.
name|toString
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QVariant
operator|::
name|ByteArray
condition|)
return|return
name|compare
argument_list|(
name|v1
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|v2
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|<
name|int
argument_list|(
name|QVariant
operator|::
name|UserType
argument_list|)
condition|)
comment|// yes, v1.type()
comment|// QVariant can compare
return|return
name|v1
operator|==
name|v2
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QMetaType
operator|::
name|UChar
condition|)
return|return
name|qvariant_cast
operator|<
name|uchar
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|uchar
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QMetaType
operator|::
name|Short
condition|)
return|return
name|qvariant_cast
operator|<
name|short
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|short
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|QMetaType
operator|::
name|UShort
condition|)
return|return
name|qvariant_cast
operator|<
name|ushort
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|ushort
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusObjectPath
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QDBusObjectPath
operator|>
operator|(
name|v1
operator|)
operator|.
name|path
argument_list|()
operator|==
name|qvariant_cast
operator|<
name|QDBusObjectPath
operator|>
operator|(
name|v2
operator|)
operator|.
name|path
argument_list|()
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusSignature
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QDBusSignature
operator|>
operator|(
name|v1
operator|)
operator|.
name|signature
argument_list|()
operator|==
name|qvariant_cast
operator|<
name|QDBusSignature
operator|>
operator|(
name|v2
operator|)
operator|.
name|signature
argument_list|()
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusUnixFileDescriptor
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QDBusUnixFileDescriptor
operator|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QDBusUnixFileDescriptor
operator|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QDBusVariant
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QDBusVariant
operator|>
operator|(
name|v1
operator|)
operator|.
name|variant
argument_list|()
argument_list|,
name|qvariant_cast
operator|<
name|QDBusVariant
operator|>
operator|(
name|v2
operator|)
operator|.
name|variant
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QVariant
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QVariant
operator|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QVariant
operator|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|(
name|v2
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QVariant
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QVariant
operator|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QVariant
operator|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|bool
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|short
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|ushort
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|int
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|uint
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|qlonglong
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|qulonglong
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QList
operator|<
name|QList
operator|<
name|double
operator|>
expr|>
operator|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QStringList
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|qvariant_cast
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|QList
operator|<
name|QByteArray
operator|>
expr|>
operator|(
name|v2
operator|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QList
operator|<
name|QVariantList
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|int
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QMap
operator|<
name|int
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QMap
operator|<
name|int
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|QString
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
comment|// ssmap
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QMap
operator|<
name|QString
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QMap
operator|<
name|QString
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QMap
operator|<
name|QDBusObjectPath
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QMap
operator|<
name|QDBusObjectPath
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QMap
operator|<
name|QDBusObjectPath
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QHash
operator|<
name|qlonglong
operator|,
name|QDateTime
operator|>
expr|>
operator|(
operator|)
condition|)
comment|// lldtmap
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QHash
operator|<
name|qint64
argument_list|,
name|QDateTime
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QHash
operator|<
name|qint64
argument_list|,
name|QDateTime
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|QHash
operator|<
name|QDBusSignature
operator|,
name|QString
operator|>
expr|>
operator|(
operator|)
condition|)
return|return
name|compare
argument_list|(
name|qvariant_cast
operator|<
name|QHash
operator|<
name|QDBusSignature
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v1
operator|)
argument_list|,
name|qvariant_cast
operator|<
name|QHash
operator|<
name|QDBusSignature
argument_list|,
name|QString
operator|>
expr|>
operator|(
name|v2
operator|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|id
operator|==
name|qMetaTypeId
operator|<
name|MyStruct
operator|>
operator|(
operator|)
condition|)
comment|// (is)
return|return
name|qvariant_cast
operator|<
name|MyStruct
operator|>
operator|(
name|v1
operator|)
operator|==
name|qvariant_cast
operator|<
name|MyStruct
operator|>
operator|(
name|v2
operator|)
return|;
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Please write a comparison case for type"
operator|<<
name|v1
operator|.
name|typeName
argument_list|()
expr_stmt|;
return|return
name|false
return|;
comment|// unknown type
block|}
end_if
unit|}
end_unit
