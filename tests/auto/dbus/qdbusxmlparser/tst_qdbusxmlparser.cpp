begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* -*- C++ -*-  */
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_define
DECL|macro|USE_PRIVATE_CODE
define|#
directive|define
name|USE_PRIVATE_CODE
end_define
begin_include
include|#
directive|include
file|"../qdbusmarshall/common.h"
end_include
begin_class
DECL|class|tst_QDBusXmlParser
class|class
name|tst_QDBusXmlParser
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private:
name|void
name|parsing_common
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|parsing_data
parameter_list|()
function_decl|;
name|void
name|parsing
parameter_list|()
function_decl|;
name|void
name|parsingWithDoctype_data
parameter_list|()
function_decl|;
name|void
name|parsingWithDoctype
parameter_list|()
function_decl|;
name|void
name|methods_data
parameter_list|()
function_decl|;
name|void
name|methods
parameter_list|()
function_decl|;
name|void
name|signals__data
parameter_list|()
function_decl|;
name|void
name|signals_
parameter_list|()
function_decl|;
name|void
name|properties_data
parameter_list|()
function_decl|;
name|void
name|properties
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|parsing_data
name|void
name|tst_QDBusXmlParser
operator|::
name|parsing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xmlData"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"interfaceCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"objectCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"annotationCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"junk"
argument_list|)
operator|<<
literal|"<junk/>"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"interface-inside-junk"
argument_list|)
operator|<<
literal|"<junk><interface name=\"iface.iface1\" /></junk>"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"object-inside-junk"
argument_list|)
operator|<<
literal|"<junk><node name=\"obj1\" /></junk>"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero-interfaces"
argument_list|)
operator|<<
literal|"<node/>"
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-interface"
argument_list|)
operator|<<
literal|"<node><interface name=\"iface.iface1\" /></node>"
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-interfaces"
argument_list|)
operator|<<
literal|"<node><interface name=\"iface.iface1\" />"
literal|"<interface name=\"iface.iface2\" /></node>"
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-object"
argument_list|)
operator|<<
literal|"<node><node name=\"obj1\"/></node>"
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-objects"
argument_list|)
operator|<<
literal|"<node><node name=\"obj1\"/><node name=\"obj2\"/></node>"
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"i1o1"
argument_list|)
operator|<<
literal|"<node><interface name=\"iface.iface1\"/><node name=\"obj1\"/></node>"
operator|<<
literal|1
operator|<<
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-interface-annotated"
argument_list|)
operator|<<
literal|"<node><interface name=\"iface.iface1\">"
literal|"<annotation name=\"foo.testing\" value=\"nothing to see here\" />"
literal|"</interface></node>"
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-interface-docnamespace"
argument_list|)
operator|<<
literal|"<?xml version=\"1.0\" xmlns:doc=\"foo\" ?><node>"
literal|"<interface name=\"iface.iface1\"><doc:something />"
literal|"</interface></node>"
operator|<<
literal|1
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parsing_common
name|void
name|tst_QDBusXmlParser
operator|::
name|parsing_common
parameter_list|(
specifier|const
name|QString
modifier|&
name|xmlData
parameter_list|)
block|{
name|QDBusIntrospection
operator|::
name|Object
name|obj
init|=
name|QDBusIntrospection
operator|::
name|parseObject
argument_list|(
name|xmlData
argument_list|,
literal|"local.testing"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|interfaceCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|objectCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|annotationCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|interfaces
operator|.
name|count
argument_list|()
argument_list|,
name|interfaceCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|childObjects
operator|.
name|count
argument_list|()
argument_list|,
name|objectCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDBusIntrospection
operator|::
name|parseInterface
argument_list|(
name|xmlData
argument_list|)
operator|.
name|annotations
operator|.
name|count
argument_list|()
argument_list|,
name|annotationCount
argument_list|)
expr_stmt|;
comment|// also verify the naming
name|int
name|i
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QString
name|name
decl|,
name|obj
operator|.
name|interfaces
control|)
name|QCOMPARE
argument_list|(
name|name
argument_list|,
name|QString
argument_list|(
literal|"iface.iface%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
foreach|foreach
control|(
name|QString
name|name
decl|,
name|obj
operator|.
name|childObjects
control|)
name|QCOMPARE
argument_list|(
name|name
argument_list|,
name|QString
argument_list|(
literal|"obj%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parsing
name|void
name|tst_QDBusXmlParser
operator|::
name|parsing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlData
argument_list|)
expr_stmt|;
name|parsing_common
argument_list|(
name|xmlData
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parsingWithDoctype_data
name|void
name|tst_QDBusXmlParser
operator|::
name|parsingWithDoctype_data
parameter_list|()
block|{
name|parsing_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parsingWithDoctype
name|void
name|tst_QDBusXmlParser
operator|::
name|parsingWithDoctype
parameter_list|()
block|{
name|QString
name|docType
init|=
literal|"<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n"
literal|"\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n"
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlData
argument_list|)
expr_stmt|;
name|QString
name|toParse
decl_stmt|;
if|if
condition|(
name|xmlData
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"<?xml"
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|split
init|=
name|xmlData
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'>'
argument_list|)
argument_list|)
operator|+
literal|1
decl_stmt|;
name|toParse
operator|=
name|xmlData
operator|.
name|left
argument_list|(
name|split
argument_list|)
operator|+
name|docType
operator|+
name|xmlData
operator|.
name|mid
argument_list|(
name|split
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toParse
operator|=
name|docType
operator|+
name|xmlData
expr_stmt|;
block|}
name|parsing_common
argument_list|(
name|toParse
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methods_data
name|void
name|tst_QDBusXmlParser
operator|::
name|methods_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xmlDataFragment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|MethodMap
argument_list|>
argument_list|(
literal|"methodMap"
argument_list|)
expr_stmt|;
name|MethodMap
name|map
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-methods"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|map
expr_stmt|;
comment|// one method without arguments
name|QDBusIntrospection
operator|::
name|Method
name|method
decl_stmt|;
name|method
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-method"
argument_list|)
operator|<<
literal|"<method name=\"Foo\"/>"
operator|<<
name|map
expr_stmt|;
comment|// add another method without arguments
name|method
operator|.
name|name
operator|=
literal|"Bar"
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-methods"
argument_list|)
operator|<<
literal|"<method name=\"Foo\"/>"
literal|"<method name=\"Bar\"/>"
operator|<<
name|map
expr_stmt|;
comment|// invert the order of the XML declaration
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-methods-inverse"
argument_list|)
operator|<<
literal|"<method name=\"Bar\"/>"
literal|"<method name=\"Foo\"/>"
operator|<<
name|map
expr_stmt|;
comment|// add a third, with annotations
name|method
operator|.
name|name
operator|=
literal|"Baz"
expr_stmt|;
name|method
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.testing"
argument_list|,
literal|"nothing to see here"
argument_list|)
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"method-with-annotation"
argument_list|)
operator|<<
literal|"<method name=\"Foo\"/>"
literal|"<method name=\"Bar\"/>"
literal|"<method name=\"Baz\"><annotation name=\"foo.testing\" value=\"nothing to see here\" /></method>"
operator|<<
name|map
expr_stmt|;
comment|// arguments
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|.
name|annotations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|.
name|name
operator|=
literal|"Method"
expr_stmt|;
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-in"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// two arguments
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-in"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<arg type=\"v\" direction=\"in\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// one invalid arg
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"~"
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-in-one-invalid"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<arg type=\"v\" direction=\"in\"/>"
literal|"<arg type=\"~\" name=\"invalid\" direction=\"in\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// one out argument
name|method
operator|.
name|inputArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-out"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// two in and one out
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|)
operator|<<
name|arg
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-in-one-out"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<arg type=\"v\" direction=\"in\"/>"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// let's try an arg with name
name|method
operator|.
name|outputArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|.
name|inputArgs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-in-with-name"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" name=\"foo\" direction=\"in\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// two args with name
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"i"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-in-with-name"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" name=\"foo\" direction=\"in\"/>"
literal|"<arg type=\"i\" name=\"bar\" direction=\"in\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
comment|// one complex
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|method
operator|=
name|QDBusIntrospection
operator|::
name|Method
argument_list|()
expr_stmt|;
comment|// Method1(in STRING arg1, in BYTE arg2, out ARRAY of STRING)
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|,
literal|"arg1"
argument_list|)
operator|<<
name|arg
argument_list|(
literal|"y"
argument_list|,
literal|"arg2"
argument_list|)
expr_stmt|;
name|method
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"as"
argument_list|)
expr_stmt|;
name|method
operator|.
name|name
operator|=
literal|"Method1"
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
comment|// Method2(in ARRAY of DICT_ENTRY of (STRING,VARIANT) variantMap, in UINT32 index,
comment|//         out STRING key, out VARIANT value)
comment|// with annotation "foo.equivalent":"QVariantMap"
name|method
operator|=
name|QDBusIntrospection
operator|::
name|Method
argument_list|()
expr_stmt|;
name|method
operator|.
name|inputArgs
operator|<<
name|arg
argument_list|(
literal|"a{sv}"
argument_list|,
literal|"variantMap"
argument_list|)
operator|<<
name|arg
argument_list|(
literal|"u"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|method
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|,
literal|"key"
argument_list|)
operator|<<
name|arg
argument_list|(
literal|"v"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|method
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.equivalent"
argument_list|,
literal|"QVariantMap"
argument_list|)
expr_stmt|;
name|method
operator|.
name|name
operator|=
literal|"Method2"
expr_stmt|;
name|map
operator|<<
name|method
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|"<method name=\"Method1\">"
literal|"<arg name=\"arg1\" type=\"s\" direction=\"in\"/>"
literal|"<arg name=\"arg2\" type=\"y\" direction=\"in\"/>"
literal|"<arg type=\"as\" direction=\"out\"/>"
literal|"</method>"
literal|"<method name=\"Method2\">"
literal|"<arg name=\"variantMap\" type=\"a{sv}\" direction=\"in\"/>"
literal|"<arg name=\"index\" type=\"u\" direction=\"in\"/>"
literal|"<arg name=\"key\" type=\"s\" direction=\"out\"/>"
literal|"<arg name=\"value\" type=\"v\" direction=\"out\"/>"
literal|"<annotation name=\"foo.equivalent\" value=\"QVariantMap\"/>"
literal|"</method>"
operator|<<
name|map
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methods
name|void
name|tst_QDBusXmlParser
operator|::
name|methods
parameter_list|()
block|{
name|QString
name|xmlHeader
init|=
literal|"<node>"
literal|"<interface name=\"iface.iface1\">"
decl_stmt|,
name|xmlFooter
init|=
literal|"</interface>"
literal|"</node>"
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlDataFragment
argument_list|)
expr_stmt|;
name|QDBusIntrospection
operator|::
name|Interface
name|iface
init|=
name|QDBusIntrospection
operator|::
name|parseInterface
argument_list|(
name|xmlHeader
operator|+
name|xmlDataFragment
operator|+
name|xmlFooter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"iface.iface1"
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|MethodMap
argument_list|,
name|methodMap
argument_list|)
expr_stmt|;
name|MethodMap
name|parsedMap
init|=
name|iface
operator|.
name|methods
decl_stmt|;
name|QCOMPARE
argument_list|(
name|parsedMap
operator|.
name|count
argument_list|()
argument_list|,
name|methodMap
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parsedMap
argument_list|,
name|methodMap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signals__data
name|void
name|tst_QDBusXmlParser
operator|::
name|signals__data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xmlDataFragment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|SignalMap
argument_list|>
argument_list|(
literal|"signalMap"
argument_list|)
expr_stmt|;
name|SignalMap
name|map
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-signals"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|map
expr_stmt|;
comment|// one signal without arguments
name|QDBusIntrospection
operator|::
name|Signal
name|signal
decl_stmt|;
name|signal
operator|.
name|name
operator|=
literal|"Foo"
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-signal"
argument_list|)
operator|<<
literal|"<signal name=\"Foo\"/>"
operator|<<
name|map
expr_stmt|;
comment|// add another signal without arguments
name|signal
operator|.
name|name
operator|=
literal|"Bar"
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-signals"
argument_list|)
operator|<<
literal|"<signal name=\"Foo\"/>"
literal|"<signal name=\"Bar\"/>"
operator|<<
name|map
expr_stmt|;
comment|// invert the order of the XML declaration
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-signals-inverse"
argument_list|)
operator|<<
literal|"<signal name=\"Bar\"/>"
literal|"<signal name=\"Foo\"/>"
operator|<<
name|map
expr_stmt|;
comment|// add a third, with annotations
name|signal
operator|.
name|name
operator|=
literal|"Baz"
expr_stmt|;
name|signal
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.testing"
argument_list|,
literal|"nothing to see here"
argument_list|)
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"signal-with-annotation"
argument_list|)
operator|<<
literal|"<signal name=\"Foo\"/>"
literal|"<signal name=\"Bar\"/>"
literal|"<signal name=\"Baz\"><annotation name=\"foo.testing\" value=\"nothing to see here\" /></signal>"
operator|<<
name|map
expr_stmt|;
comment|// one out argument
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|signal
operator|.
name|annotations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|signal
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|)
expr_stmt|;
name|signal
operator|.
name|name
operator|=
literal|"Signal"
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-out"
argument_list|)
operator|<<
literal|"<signal name=\"Signal\">"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"</signal>"
operator|<<
name|map
expr_stmt|;
comment|// without saying which direction it is
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-out-no-direction"
argument_list|)
operator|<<
literal|"<signal name=\"Signal\">"
literal|"<arg type=\"s\"/>"
literal|"</signal>"
operator|<<
name|map
expr_stmt|;
comment|// two args with name
name|signal
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"i"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-out-with-name"
argument_list|)
operator|<<
literal|"<signal name=\"Signal\">"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"<arg type=\"i\" name=\"bar\"/>"
literal|"</signal>"
operator|<<
name|map
expr_stmt|;
comment|// one complex
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|signal
operator|=
name|QDBusIntrospection
operator|::
name|Signal
argument_list|()
expr_stmt|;
comment|// Signal1(out ARRAY of STRING)
name|signal
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"as"
argument_list|)
expr_stmt|;
name|signal
operator|.
name|name
operator|=
literal|"Signal1"
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
comment|// Signal2(out STRING key, out VARIANT value)
comment|// with annotation "foo.equivalent":"QVariantMap"
name|signal
operator|=
name|QDBusIntrospection
operator|::
name|Signal
argument_list|()
expr_stmt|;
name|signal
operator|.
name|outputArgs
operator|<<
name|arg
argument_list|(
literal|"s"
argument_list|,
literal|"key"
argument_list|)
operator|<<
name|arg
argument_list|(
literal|"v"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|signal
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.equivalent"
argument_list|,
literal|"QVariantMap"
argument_list|)
expr_stmt|;
name|signal
operator|.
name|name
operator|=
literal|"Signal2"
expr_stmt|;
name|map
operator|<<
name|signal
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|"<signal name=\"Signal1\">"
literal|"<arg type=\"as\" direction=\"out\"/>"
literal|"</signal>"
literal|"<signal name=\"Signal2\">"
literal|"<arg name=\"key\" type=\"s\" direction=\"out\"/>"
literal|"<arg name=\"value\" type=\"v\" direction=\"out\"/>"
literal|"<annotation name=\"foo.equivalent\" value=\"QVariantMap\"/>"
literal|"</signal>"
operator|<<
name|map
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signals_
name|void
name|tst_QDBusXmlParser
operator|::
name|signals_
parameter_list|()
block|{
name|QString
name|xmlHeader
init|=
literal|"<node>"
literal|"<interface name=\"iface.iface1\">"
decl_stmt|,
name|xmlFooter
init|=
literal|"</interface>"
literal|"</node>"
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlDataFragment
argument_list|)
expr_stmt|;
name|QDBusIntrospection
operator|::
name|Interface
name|iface
init|=
name|QDBusIntrospection
operator|::
name|parseInterface
argument_list|(
name|xmlHeader
operator|+
name|xmlDataFragment
operator|+
name|xmlFooter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"iface.iface1"
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|SignalMap
argument_list|,
name|signalMap
argument_list|)
expr_stmt|;
name|SignalMap
name|parsedMap
init|=
name|iface
operator|.
name|signals_
decl_stmt|;
name|QCOMPARE
argument_list|(
name|signalMap
operator|.
name|count
argument_list|()
argument_list|,
name|parsedMap
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|signalMap
argument_list|,
name|parsedMap
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|properties_data
name|void
name|tst_QDBusXmlParser
operator|::
name|properties_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xmlDataFragment"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|PropertyMap
argument_list|>
argument_list|(
literal|"propertyMap"
argument_list|)
expr_stmt|;
name|PropertyMap
name|map
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-signals"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|map
expr_stmt|;
comment|// one readable signal
name|QDBusIntrospection
operator|::
name|Property
name|prop
decl_stmt|;
name|prop
operator|.
name|name
operator|=
literal|"foo"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"s"
expr_stmt|;
name|prop
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
expr_stmt|;
name|map
operator|<<
name|prop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-readable"
argument_list|)
operator|<<
literal|"<property name=\"foo\" type=\"s\" access=\"read\"/>"
operator|<<
name|map
expr_stmt|;
comment|// one writable signal
name|prop
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|prop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-writable"
argument_list|)
operator|<<
literal|"<property name=\"foo\" type=\"s\" access=\"write\"/>"
operator|<<
name|map
expr_stmt|;
comment|// one read-& writable signal
name|prop
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|ReadWrite
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|map
operator|<<
name|prop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-read-writable"
argument_list|)
operator|<<
literal|"<property name=\"foo\" type=\"s\" access=\"readwrite\"/>"
operator|<<
name|map
expr_stmt|;
comment|// two, mixed properties
name|prop
operator|.
name|name
operator|=
literal|"bar"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"i"
expr_stmt|;
name|prop
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Read
expr_stmt|;
name|map
operator|<<
name|prop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|"<property name=\"foo\" type=\"s\" access=\"readwrite\"/>"
literal|"<property name=\"bar\" type=\"i\" access=\"read\"/>"
operator|<<
name|map
expr_stmt|;
comment|// invert the order of the declaration
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
literal|"<property name=\"bar\" type=\"i\" access=\"read\"/>"
literal|"<property name=\"foo\" type=\"s\" access=\"readwrite\"/>"
operator|<<
name|map
expr_stmt|;
comment|// add a third with annotations
name|prop
operator|.
name|name
operator|=
literal|"baz"
expr_stmt|;
name|prop
operator|.
name|type
operator|=
literal|"as"
expr_stmt|;
name|prop
operator|.
name|access
operator|=
name|QDBusIntrospection
operator|::
name|Property
operator|::
name|Write
expr_stmt|;
name|prop
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.annotation"
argument_list|,
literal|"Hello, World"
argument_list|)
expr_stmt|;
name|prop
operator|.
name|annotations
operator|.
name|insert
argument_list|(
literal|"foo.annotation2"
argument_list|,
literal|"Goodbye, World"
argument_list|)
expr_stmt|;
name|map
operator|<<
name|prop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex"
argument_list|)
operator|<<
literal|"<property name=\"bar\" type=\"i\" access=\"read\"/>"
literal|"<property name=\"baz\" type=\"as\" access=\"write\">"
literal|"<annotation name=\"foo.annotation\" value=\"Hello, World\" />"
literal|"<annotation name=\"foo.annotation2\" value=\"Goodbye, World\" />"
literal|"</property>"
literal|"<property name=\"foo\" type=\"s\" access=\"readwrite\"/>"
operator|<<
name|map
expr_stmt|;
comment|// and now change the order
name|QTest
operator|::
name|newRow
argument_list|(
literal|"complex2"
argument_list|)
operator|<<
literal|"<property name=\"baz\" type=\"as\" access=\"write\">"
literal|"<annotation name=\"foo.annotation2\" value=\"Goodbye, World\" />"
literal|"<annotation name=\"foo.annotation\" value=\"Hello, World\" />"
literal|"</property>"
literal|"<property name=\"bar\" type=\"i\" access=\"read\"/>"
literal|"<property name=\"foo\" type=\"s\" access=\"readwrite\"/>"
operator|<<
name|map
expr_stmt|;
block|}
end_function
begin_function
DECL|function|properties
name|void
name|tst_QDBusXmlParser
operator|::
name|properties
parameter_list|()
block|{
name|QString
name|xmlHeader
init|=
literal|"<node>"
literal|"<interface name=\"iface.iface1\">"
decl_stmt|,
name|xmlFooter
init|=
literal|"</interface>"
literal|"</node>"
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlDataFragment
argument_list|)
expr_stmt|;
name|QDBusIntrospection
operator|::
name|Interface
name|iface
init|=
name|QDBusIntrospection
operator|::
name|parseInterface
argument_list|(
name|xmlHeader
operator|+
name|xmlDataFragment
operator|+
name|xmlFooter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|iface
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"iface.iface1"
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|PropertyMap
argument_list|,
name|propertyMap
argument_list|)
expr_stmt|;
name|PropertyMap
name|parsedMap
init|=
name|iface
operator|.
name|properties
decl_stmt|;
name|QCOMPARE
argument_list|(
name|propertyMap
operator|.
name|count
argument_list|()
argument_list|,
name|parsedMap
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|propertyMap
argument_list|,
name|parsedMap
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusXmlParser
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusxmlparser.moc"
end_include
end_unit
