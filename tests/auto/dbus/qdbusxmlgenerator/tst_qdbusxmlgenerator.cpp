begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Canonical Limited ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_include
include|#
directive|include
file|<QtXml/QDomDocument>
end_include
begin_decl_stmt
DECL|variable|serviceName
specifier|static
specifier|const
name|QString
name|serviceName
init|=
literal|"org.example.qdbus"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|interfaceName
specifier|static
specifier|const
name|QString
name|interfaceName
init|=
name|serviceName
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|variable|RegisterOption
name|Q_DECLARE_METATYPE
argument_list|(
name|QDBusConnection
operator|::
name|RegisterOption
argument_list|)
expr_stmt|;
end_expr_stmt
begin_class
DECL|class|DBusXmlGenetarorObject
class|class
name|DBusXmlGenetarorObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"org.example.qdbus"
argument_list|)
decl|public
range|:
DECL|function|nonScriptableInvokable
name|Q_INVOKABLE
name|void
name|nonScriptableInvokable
argument_list|()
block|{}
DECL|function|scriptableInvokable
name|Q_SCRIPTABLE
name|Q_INVOKABLE
name|void
name|scriptableInvokable
argument_list|()
block|{}
block|}
class|;
end_class
begin_class
DECL|class|tst_QDBusXmlGenerator
class|class
name|tst_QDBusXmlGenerator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|introspect_data
parameter_list|()
function_decl|;
name|void
name|introspect
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusXmlGenerator
operator|::
name|initTestCase
parameter_list|()
block|{
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerService
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|introspect_data
name|void
name|tst_QDBusXmlGenerator
operator|::
name|introspect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"methodName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDBusConnection
operator|::
name|RegisterOption
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"scriptableInvokable"
argument_list|)
operator|<<
literal|"scriptableInvokable"
operator|<<
name|QDBusConnection
operator|::
name|ExportScriptableInvokables
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nonScriptableInvokable"
argument_list|)
operator|<<
literal|"nonScriptableInvokable"
operator|<<
name|QDBusConnection
operator|::
name|ExportNonScriptableInvokables
expr_stmt|;
block|}
end_function
begin_function
DECL|function|introspect
name|void
name|tst_QDBusXmlGenerator
operator|::
name|introspect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|methodName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDBusConnection
operator|::
name|RegisterOption
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|DBusXmlGenetarorObject
name|obj
decl_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerObject
argument_list|(
literal|"/"
operator|+
name|methodName
argument_list|,
operator|&
name|obj
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|QDBusInterface
name|dif
argument_list|(
name|serviceName
argument_list|,
literal|"/"
operator|+
name|methodName
argument_list|,
literal|""
argument_list|,
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QString
argument_list|>
name|reply
init|=
name|dif
operator|.
name|call
argument_list|(
literal|"Introspect"
argument_list|)
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|QDomDocument
name|d
decl_stmt|;
name|d
operator|.
name|setContent
argument_list|(
name|reply
operator|.
name|value
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QDomNode
name|n
init|=
name|d
operator|.
name|documentElement
argument_list|()
operator|.
name|firstChild
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|found
operator|&&
operator|!
name|n
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QDomElement
name|e
init|=
name|n
operator|.
name|toElement
argument_list|()
decl_stmt|;
comment|// try to convert the node to an element.
if|if
condition|(
operator|!
name|e
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|tagName
argument_list|()
operator|==
literal|"interface"
operator|&&
name|e
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|)
operator|==
name|interfaceName
condition|)
block|{
name|QDomNode
name|n2
init|=
name|e
operator|.
name|firstChild
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|n2
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QDomElement
name|e2
init|=
name|n2
operator|.
name|toElement
argument_list|()
decl_stmt|;
comment|// try to convert the node to an element.
if|if
condition|(
operator|!
name|e2
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|e2
operator|.
name|tagName
argument_list|()
operator|==
literal|"method"
condition|)
block|{
name|found
operator|=
name|e2
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|)
operator|==
name|methodName
expr_stmt|;
block|}
block|}
name|n2
operator|=
name|n2
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|n
operator|=
name|n
operator|.
name|nextSibling
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusXmlGenerator
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusxmlgenerator.moc"
end_include
end_unit
