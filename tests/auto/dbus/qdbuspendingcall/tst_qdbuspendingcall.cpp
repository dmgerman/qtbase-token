begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 Intel Corporation. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_define
DECL|macro|TEST_INTERFACE_NAME
define|#
directive|define
name|TEST_INTERFACE_NAME
value|"org.qtproject.QtDBus.MyObject"
end_define
begin_class
DECL|class|MyObject
class|class
name|MyObject
super|:
specifier|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"org.qtproject.QtDBus.MyObject"
argument_list|)
decl|public
range|:
DECL|function|MyObject
name|MyObject
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{}
specifier|public
name|slots
operator|:
DECL|function|returnFoo
name|QStringList
name|returnFoo
argument_list|()
specifier|const
block|{
return|return
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
return|;
block|}
DECL|function|returnError
name|void
name|returnError
parameter_list|(
specifier|const
name|QDBusMessage
modifier|&
name|msg
parameter_list|)
specifier|const
block|{
name|msg
operator|.
name|setDelayedReply
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|msg
operator|.
name|createErrorReply
argument_list|(
literal|"dbuspendingcall_error"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|tst_QDBusPendingCall
class|class
name|tst_QDBusPendingCall
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QDBusPendingCall
parameter_list|()
constructor_decl|;
public|public
name|Q_SLOTS
public|:
name|void
name|callback
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
function_decl|;
name|void
name|errorCallback
parameter_list|(
specifier|const
name|QDBusError
modifier|&
name|error
parameter_list|)
function_decl|;
name|void
name|finished
parameter_list|(
name|QDBusPendingCallWatcher
modifier|*
name|call
parameter_list|)
function_decl|;
name|void
name|makeCall
parameter_list|()
function_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|waitForFinished
parameter_list|()
function_decl|;
name|void
name|waitForFinished_error
parameter_list|()
function_decl|;
name|void
name|watcher
parameter_list|()
function_decl|;
name|void
name|watcher_error
parameter_list|()
function_decl|;
name|void
name|watcher_waitForFinished
parameter_list|()
function_decl|;
name|void
name|watcher_waitForFinished_threaded
parameter_list|()
function_decl|;
name|void
name|watcher_waitForFinished_alreadyFinished
parameter_list|()
function_decl|;
name|void
name|watcher_waitForFinished_alreadyFinished_eventLoop
parameter_list|()
function_decl|;
name|void
name|watcher_waitForFinished_error
parameter_list|()
function_decl|;
name|void
name|callInsideWaitForFinished
parameter_list|()
function_decl|;
name|void
name|callWithCallback_localLoop
parameter_list|()
function_decl|;
name|void
name|callWithCallback_localLoop_errorReply
parameter_list|()
function_decl|;
private|private:
name|QDBusPendingCall
name|sendMessage
parameter_list|()
function_decl|;
name|QDBusPendingCall
name|sendError
parameter_list|()
function_decl|;
DECL|member|conn
name|QDBusConnection
name|conn
decl_stmt|;
DECL|enumerator|CallbackCalled
DECL|enumerator|ErrorCallbackCalled
DECL|enumerator|FinishCalled
DECL|enumerator|MakeCallCalled
enum|enum
block|{
name|CallbackCalled
block|,
name|ErrorCallbackCalled
block|,
name|FinishCalled
block|,
name|MakeCallCalled
block|}
enum|;
DECL|member|slotCalled
name|int
name|slotCalled
decl_stmt|;
DECL|member|callCount
name|int
name|callCount
decl_stmt|;
DECL|member|callbackArgument
name|QStringList
name|callbackArgument
decl_stmt|;
DECL|member|errorArgument
name|QDBusError
name|errorArgument
decl_stmt|;
DECL|member|watchArgument
name|QDBusPendingCallWatcher
modifier|*
name|watchArgument
decl_stmt|;
DECL|member|obj
name|MyObject
modifier|*
name|obj
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QDBusPendingCall
name|tst_QDBusPendingCall
operator|::
name|tst_QDBusPendingCall
parameter_list|()
member_init_list|:
name|conn
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
argument_list|)
member_init_list|,
name|obj
argument_list|(
operator|new
name|MyObject
argument_list|(
name|this
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|finished
name|void
name|tst_QDBusPendingCall
operator|::
name|finished
parameter_list|(
name|QDBusPendingCallWatcher
modifier|*
name|call
parameter_list|)
block|{
name|slotCalled
operator|=
name|FinishCalled
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
name|watchArgument
operator|=
name|call
expr_stmt|;
if|if
condition|(
name|QThread
operator|::
name|currentThread
argument_list|()
operator|==
name|thread
argument_list|()
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callback
name|void
name|tst_QDBusPendingCall
operator|::
name|callback
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
name|slotCalled
operator|=
name|CallbackCalled
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
name|callbackArgument
operator|=
name|list
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorCallback
name|void
name|tst_QDBusPendingCall
operator|::
name|errorCallback
parameter_list|(
specifier|const
name|QDBusError
modifier|&
name|error
parameter_list|)
block|{
name|slotCalled
operator|=
name|ErrorCallbackCalled
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
name|errorArgument
operator|=
name|error
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|makeCall
name|void
name|tst_QDBusPendingCall
operator|::
name|makeCall
parameter_list|()
block|{
comment|// make an external call to D-Bus to make sure we haven't left any locks
name|slotCalled
operator|=
name|MakeCallCalled
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
name|sendMessage
argument_list|()
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusPendingCall
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|conn
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|conn
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendMessage
name|QDBusPendingCall
name|tst_QDBusPendingCall
operator|::
name|sendMessage
parameter_list|()
block|{
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
literal|"org.freedesktop.DBus"
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus"
argument_list|,
literal|"ListNames"
argument_list|)
decl_stmt|;
return|return
name|conn
operator|.
name|asyncCall
argument_list|(
name|msg
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sendError
name|QDBusPendingCall
name|tst_QDBusPendingCall
operator|::
name|sendError
parameter_list|()
block|{
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
literal|"org.freedesktop.DBus"
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus"
argument_list|,
literal|"ThisNameWontExist"
argument_list|)
decl_stmt|;
return|return
name|conn
operator|.
name|asyncCall
argument_list|(
name|msg
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|waitForFinished
name|void
name|tst_QDBusPendingCall
operator|::
name|waitForFinished
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|ac
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDBusMessage
name|reply
init|=
name|ac
operator|.
name|reply
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|signature
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"as"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
modifier|&
name|arg
init|=
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arg
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|StringList
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|arg
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForFinished_error
name|void
name|tst_QDBusPendingCall
operator|::
name|waitForFinished_error
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendError
argument_list|()
decl_stmt|;
name|ac
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusError
name|error
init|=
name|ac
operator|.
name|error
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|error
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|error
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"org.freedesktop.DBus.Error.UnknownMethod"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|error
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusError
operator|::
name|UnknownMethod
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callWithCallback_localLoop
name|void
name|tst_QDBusPendingCall
operator|::
name|callWithCallback_localLoop
parameter_list|()
block|{
comment|// Verify that a callback actually gets called when the call is dispatched locally.
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|callWithCallback
argument_list|(
literal|"returnFoo"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|callback
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// May be called synchronously or asynchronously...
if|if
condition|(
name|callbackArgument
operator|!=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
operator|)
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|callbackArgument
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callWithCallback_localLoop_errorReply
name|void
name|tst_QDBusPendingCall
operator|::
name|callWithCallback_localLoop_errorReply
parameter_list|()
block|{
comment|// Verify that an error callback actually gets called when the call is
comment|// dispatched locally and the called method returns an error
name|QDBusInterface
name|iface
argument_list|(
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|baseService
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|TEST_INTERFACE_NAME
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|callbackArgument
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|callWithCallback
argument_list|(
literal|"returnError"
argument_list|,
name|QVariantList
argument_list|()
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|callback
argument_list|(
name|QStringList
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|errorCallback
argument_list|(
name|QDBusError
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// May be called synchronously or asynchronously...
if|if
condition|(
name|errorArgument
operator|.
name|name
argument_list|()
operator|!=
literal|"dbuspendingcall_error"
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|errorArgument
operator|.
name|name
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"dbuspendingcall_error"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|callbackArgument
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_error
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_error
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendError
argument_list|()
decl_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watch
operator|.
name|error
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_waitForFinished
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_waitForFinished
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|watch
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_waitForFinished_threaded
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_waitForFinished_threaded
parameter_list|()
block|{
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
name|slotCalled
operator|=
literal|0
expr_stmt|;
class|class
name|WorkerThread
super|:
specifier|public
name|QThread
block|{
public|public:
name|tst_QDBusPendingCall
modifier|*
name|tst
decl_stmt|;
name|WorkerThread
parameter_list|(
name|tst_QDBusPendingCall
modifier|*
name|tst
parameter_list|)
member_init_list|:
name|tst
argument_list|(
name|tst
argument_list|)
block|{}
name|void
name|run
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|tst
operator|->
name|sendMessage
argument_list|()
decl_stmt|;
comment|//            QVERIFY(!ac.isFinished());
comment|//            QVERIFY(!ac.isError());
comment|//            QCOMPARE(ac.reply().type(), QDBusMessage::InvalidMessage);
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|tst
operator|->
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// don't process events in this thread
comment|//            QVERIFY(!ac.isFinished());
comment|//            QVERIFY(!ac.isError());
comment|//            QCOMPARE(ac.reply().type(), QDBusMessage::InvalidMessage);
name|QCOMPARE
argument_list|(
name|tst
operator|->
name|callCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst
operator|->
name|slotCalled
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watch
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst
operator|->
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst
operator|->
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst
operator|->
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|tst
operator|->
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|thread
argument_list|(
name|this
argument_list|)
class|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_waitForFinished_alreadyFinished
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_waitForFinished_alreadyFinished
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|ac
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
comment|// create a watcher on an already-finished reply
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|watch
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_waitForFinished_alreadyFinished_eventLoop
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_waitForFinished_alreadyFinished_eventLoop
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|ac
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
comment|// create a watcher on an already-finished reply
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watcher_waitForFinished_error
name|void
name|tst_QDBusPendingCall
operator|::
name|watcher_waitForFinished_error
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendError
argument_list|()
decl_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|watchArgument
operator|=
literal|0
expr_stmt|;
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|watch
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ac
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|FinishCalled
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watchArgument
argument_list|,
operator|&
name|watch
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watch
operator|.
name|error
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|callInsideWaitForFinished
name|void
name|tst_QDBusPendingCall
operator|::
name|callInsideWaitForFinished
parameter_list|()
block|{
name|QDBusPendingCall
name|ac
init|=
name|sendMessage
argument_list|()
decl_stmt|;
name|QDBusPendingCallWatcher
name|watch
argument_list|(
name|ac
argument_list|)
decl_stmt|;
name|callCount
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watch
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QDBusPendingCallWatcher
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|makeCall
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|watch
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotCalled
argument_list|,
operator|(
name|int
operator|)
name|MakeCallCalled
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|watch
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariantList
name|args2
init|=
name|ac
operator|.
name|reply
argument_list|()
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|args2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|args2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|.
name|contains
argument_list|(
name|conn
operator|.
name|baseService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusPendingCall
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbuspendingcall.moc"
end_include
end_unit
