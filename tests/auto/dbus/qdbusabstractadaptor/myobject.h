begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MYOBJECT_H
end_ifndef
begin_define
DECL|macro|MYOBJECT_H
define|#
directive|define
name|MYOBJECT_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtDBus/QtDBus>
end_include
begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|slotSpy
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|extern
name|QString
name|valueSpy
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QDBusSignalSpy
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
name|slots
operator|:
name|void
name|slot
argument_list|(
argument|const QDBusMessage&msg
argument_list|)
block|{
operator|++
name|count
block|;
name|interface
operator|=
name|msg
operator|.
name|interface
argument_list|()
block|;
name|name
operator|=
name|msg
operator|.
name|member
argument_list|()
block|;
name|signature
operator|=
name|msg
operator|.
name|signature
argument_list|()
block|;
name|path
operator|=
name|msg
operator|.
name|path
argument_list|()
block|;
name|value
operator|.
name|clear
argument_list|()
block|;
if|if
condition|(
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
condition|)
name|value
operator|=
name|msg
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|public
operator|:
name|QDBusSignalSpy
argument_list|()
operator|:
name|count
argument_list|(
literal|0
argument_list|)
block|{ }
name|int
name|count
block|;
name|QString
name|interface
block|;
name|QString
name|name
block|;
name|QString
name|signature
block|;
name|QString
name|path
block|;
name|QVariant
name|value
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Interface1
range|:
name|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Interface1"
argument_list|)
name|public
operator|:
name|Interface1
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{ }
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Interface2
range|:
name|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Interface2"
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop1 READ prop1
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop2 READ prop2 WRITE setProp2 SCRIPTABLE true
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QUrl nonDBusProperty READ nonDBusProperty
argument_list|)
name|public
operator|:
name|Interface2
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{
name|setAutoRelaySignals
argument_list|(
name|true
argument_list|)
block|; }
name|QString
name|prop1
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface2::prop1() const"
argument_list|)
return|;
block|}
name|QString
name|prop2
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface2::prop2() const"
argument_list|)
return|;
block|}
name|void
name|setProp2
argument_list|(
argument|const QString&value
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface2::setProp2(const QString&)"
block|;
name|valueSpy
operator|=
name|value
block|;     }
name|QUrl
name|nonDBusProperty
argument_list|()
specifier|const
block|{
return|return
name|QUrl
argument_list|()
return|;
block|}
name|void
name|emitSignal
argument_list|(
argument|const QString&
argument_list|,
argument|const QVariant&
argument_list|)
block|{
name|emit
name|signal
argument_list|()
block|; }
name|public
name|slots
operator|:
name|void
name|method
argument_list|()
block|{
name|slotSpy
operator|=
literal|"void Interface2::method()"
block|;     }
name|Q_SCRIPTABLE
name|void
name|scriptableMethod
argument_list|()
block|{
name|slotSpy
operator|=
literal|"void Interface2::scriptableMethod()"
block|;     }
name|signals
operator|:
name|void
name|signal
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Interface3
range|:
name|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Interface3"
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop1 READ prop1
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop2 READ prop2 WRITE setProp2
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString interface3prop READ interface3prop
argument_list|)
name|public
operator|:
name|Interface3
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{
name|setAutoRelaySignals
argument_list|(
name|true
argument_list|)
block|; }
name|QString
name|prop1
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface3::prop1() const"
argument_list|)
return|;
block|}
name|QString
name|prop2
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface3::prop2() const"
argument_list|)
return|;
block|}
name|void
name|setProp2
argument_list|(
argument|const QString&value
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface3::setProp2(const QString&)"
block|;
name|valueSpy
operator|=
name|value
block|;     }
name|QString
name|interface3prop
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface3::interface3prop() const"
argument_list|)
return|;
block|}
name|void
name|emitSignal
argument_list|(
argument|const QString&name
argument_list|,
argument|const QVariant&value
argument_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|"signalVoid"
condition|)
name|emit
name|signalVoid
parameter_list|()
function_decl|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"signalInt"
condition|)
name|emit
name|signalInt
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"signalString"
condition|)
name|emit
name|signalString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
block|}
name|public
name|slots
operator|:
name|void
name|methodVoid
argument_list|()
block|{
name|slotSpy
operator|=
literal|"void Interface3::methodVoid()"
block|; }
name|void
name|methodInt
argument_list|(
argument|int
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface3::methodInt(int)"
block|; }
name|void
name|methodString
argument_list|(
argument|QString
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface3::methodString(QString)"
block|; }
name|int
name|methodStringString
argument_list|(
argument|const QString&s
argument_list|,
argument|QString&out
argument_list|)
block|{
name|slotSpy
operator|=
literal|"int Interface3::methodStringString(const QString&, QString&)"
block|;
name|out
operator|=
name|s
block|;
return|return
literal|42
return|;
block|}
name|signals
operator|:
name|void
name|signalVoid
argument_list|()
block|;
name|void
name|signalInt
argument_list|(
name|int
argument_list|)
block|;
name|void
name|signalString
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Interface4
range|:
name|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.Interface4"
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop1 READ prop1
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString prop2 READ prop2 WRITE setProp2
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString interface4prop READ interface4prop
argument_list|)
name|public
operator|:
name|Interface4
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{
name|setAutoRelaySignals
argument_list|(
name|true
argument_list|)
block|; }
name|QString
name|prop1
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface4::prop1() const"
argument_list|)
return|;
block|}
name|QString
name|prop2
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface4::prop2() const"
argument_list|)
return|;
block|}
name|QString
name|interface4prop
argument_list|()
specifier|const
block|{
return|return
name|QLatin1String
argument_list|(
literal|"QString Interface4::interface4prop() const"
argument_list|)
return|;
block|}
name|void
name|setProp2
argument_list|(
argument|const QString&value
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface4::setProp2(const QString&)"
block|;
name|valueSpy
operator|=
name|value
block|;     }
name|void
name|emitSignal
argument_list|(
argument|const QString&
argument_list|,
argument|const QVariant&value
argument_list|)
block|{
switch|switch
condition|(
name|value
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Invalid
case|:
name|emit
name|signal
parameter_list|()
function_decl|;
break|break;
case|case
name|QVariant
operator|::
name|Int
case|:
name|emit
name|signal
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
break|break;
case|case
name|QVariant
operator|::
name|String
case|:
name|emit
name|signal
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
name|public
name|slots
operator|:
name|void
name|method
argument_list|()
block|{
name|slotSpy
operator|=
literal|"void Interface4::method()"
block|; }
name|void
name|method
argument_list|(
argument|int
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface4::method(int)"
block|; }
name|void
name|method
argument_list|(
argument|QString
argument_list|)
block|{
name|slotSpy
operator|=
literal|"void Interface4::method(QString)"
block|; }
name|signals
operator|:
name|void
name|signal
argument_list|()
block|;
name|void
name|signal
argument_list|(
name|int
argument_list|)
block|;
name|void
name|signal
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|MyObject
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.MyObject"
argument_list|)
name|public
operator|:
name|Interface1
operator|*
name|if1
block|;
name|Interface2
operator|*
name|if2
block|;
name|Interface3
operator|*
name|if3
block|;
name|Interface4
operator|*
name|if4
block|;
name|MyObject
argument_list|(
argument|int n =
literal|4
argument_list|)
operator|:
name|if1
argument_list|(
literal|0
argument_list|)
block|,
name|if2
argument_list|(
literal|0
argument_list|)
block|,
name|if3
argument_list|(
literal|0
argument_list|)
block|,
name|if4
argument_list|(
literal|0
argument_list|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|4
case|:
name|if4
operator|=
name|new
name|Interface4
argument_list|(
name|this
argument_list|)
expr_stmt|;
case|case
literal|3
case|:
name|if3
operator|=
name|new
name|Interface3
argument_list|(
name|this
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|if2
operator|=
name|new
name|Interface2
argument_list|(
name|this
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
name|if1
operator|=
name|new
name|Interface1
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|emitSignal
argument_list|(
argument|const QString&name
argument_list|,
argument|const QVariant&value
argument_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|"scriptableSignalVoid"
condition|)
name|emit
name|scriptableSignalVoid
parameter_list|()
function_decl|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"scriptableSignalInt"
condition|)
name|emit
name|scriptableSignalInt
argument_list|(
name|value
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"scriptableSignalString"
condition|)
name|emit
name|scriptableSignalString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"nonScriptableSignalVoid"
condition|)
name|emit
name|nonScriptableSignalVoid
parameter_list|()
function_decl|;
block|}
name|signals
operator|:
name|Q_SCRIPTABLE
name|void
name|scriptableSignalVoid
argument_list|()
block|;
name|Q_SCRIPTABLE
name|void
name|scriptableSignalInt
argument_list|(
name|int
argument_list|)
block|;
name|Q_SCRIPTABLE
name|void
name|scriptableSignalString
argument_list|(
name|QString
argument_list|)
block|;
name|void
name|nonScriptableSignalVoid
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// MYOBJECT_H
end_comment
end_unit
