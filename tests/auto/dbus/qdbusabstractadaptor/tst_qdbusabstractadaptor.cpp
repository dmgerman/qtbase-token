begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtDBus>
end_include
begin_include
include|#
directive|include
file|"../qdbusmarshall/common.h"
end_include
begin_include
include|#
directive|include
file|"myobject.h"
end_include
begin_decl_stmt
DECL|variable|serviceName
specifier|static
specifier|const
name|char
name|serviceName
index|[]
init|=
literal|"com.trolltech.autotests.qmyserver"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|objectPath
specifier|static
specifier|const
name|char
name|objectPath
index|[]
init|=
literal|"/com/trolltech/qmyserver"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|interfaceName
specifier|static
specifier|const
name|char
modifier|*
name|interfaceName
init|=
name|serviceName
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|slotSpy
specifier|const
name|char
modifier|*
name|slotSpy
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|valueSpy
name|QString
name|valueSpy
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
name|QDBusMessage
operator|::
name|MessageType
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|QDBusMessage
operator|::
name|InvalidMessage
case|:
return|return
name|qstrdup
argument_list|(
literal|"InvalidMessage"
argument_list|)
return|;
case|case
name|QDBusMessage
operator|::
name|MethodCallMessage
case|:
return|return
name|qstrdup
argument_list|(
literal|"MethodCallMessage"
argument_list|)
return|;
case|case
name|QDBusMessage
operator|::
name|ReplyMessage
case|:
return|return
name|qstrdup
argument_list|(
literal|"ReplyMessage"
argument_list|)
return|;
case|case
name|QDBusMessage
operator|::
name|ErrorMessage
case|:
return|return
name|qstrdup
argument_list|(
literal|"ErrorMessage"
argument_list|)
return|;
case|case
name|QDBusMessage
operator|::
name|SignalMessage
case|:
return|return
name|qstrdup
argument_list|(
literal|"SignalMessage"
argument_list|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|TypesInterface
class|class
name|TypesInterface
super|:
specifier|public
name|QDBusAbstractAdaptor
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Interface"
argument_list|,
literal|"local.TypesInterface"
argument_list|)
decl|public
range|:
DECL|function|TypesInterface
name|TypesInterface
argument_list|(
name|QObject
operator|*
name|parent
argument_list|)
operator|:
name|QDBusAbstractAdaptor
argument_list|(
argument|parent
argument_list|)
block|{ }
expr|union
block|{
DECL|member|b
name|bool
name|b
block|;
DECL|member|uc
name|uchar
name|uc
block|;
DECL|member|s
name|short
name|s
block|;
DECL|member|us
name|ushort
name|us
block|;
DECL|member|i
name|int
name|i
block|;
DECL|member|ui
name|uint
name|ui
block|;
DECL|member|ll
name|qlonglong
name|ll
block|;
DECL|member|ull
name|qulonglong
name|ull
block|;
DECL|member|d
name|double
name|d
block|;     }
DECL|member|dataSpy
name|dataSpy
decl_stmt|;
DECL|member|variantSpy
name|QVariant
name|variantSpy
decl_stmt|;
DECL|member|stringSpy
name|QString
name|stringSpy
decl_stmt|;
DECL|member|listSpy
name|QVariantList
name|listSpy
decl_stmt|;
DECL|member|stringlistSpy
name|QStringList
name|stringlistSpy
decl_stmt|;
DECL|member|bytearraySpy
name|QByteArray
name|bytearraySpy
decl_stmt|;
DECL|member|mapSpy
name|QVariantMap
name|mapSpy
decl_stmt|;
DECL|member|ssmapSpy
name|StringStringMap
name|ssmapSpy
decl_stmt|;
DECL|member|lldtmapSpy
name|LLDateTimeMap
name|lldtmapSpy
decl_stmt|;
DECL|member|structSpy
name|MyStruct
name|structSpy
decl_stmt|;
public|public
name|slots
public|:
DECL|function|methodBool
name|void
name|methodBool
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodBool(bool)"
expr_stmt|;
name|dataSpy
operator|.
name|b
operator|=
name|b
expr_stmt|;
block|}
DECL|function|methodUChar
name|void
name|methodUChar
parameter_list|(
name|uchar
name|uc
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodUChar(uchar)"
expr_stmt|;
name|dataSpy
operator|.
name|uc
operator|=
name|uc
expr_stmt|;
block|}
DECL|function|methodShort
name|void
name|methodShort
parameter_list|(
name|short
name|s
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodShort(short)"
expr_stmt|;
name|dataSpy
operator|.
name|s
operator|=
name|s
expr_stmt|;
block|}
DECL|function|methodUShort
name|void
name|methodUShort
parameter_list|(
name|ushort
name|us
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodUShort(ushort)"
expr_stmt|;
name|dataSpy
operator|.
name|us
operator|=
name|us
expr_stmt|;
block|}
DECL|function|methodInt
name|void
name|methodInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodInt(int)"
expr_stmt|;
name|dataSpy
operator|.
name|i
operator|=
name|i
expr_stmt|;
block|}
DECL|function|methodUInt
name|void
name|methodUInt
parameter_list|(
name|uint
name|ui
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodUInt(uint)"
expr_stmt|;
name|dataSpy
operator|.
name|ui
operator|=
name|ui
expr_stmt|;
block|}
DECL|function|methodLongLong
name|void
name|methodLongLong
parameter_list|(
name|qlonglong
name|ll
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodLongLong(qlonglong)"
expr_stmt|;
name|dataSpy
operator|.
name|ll
operator|=
name|ll
expr_stmt|;
block|}
DECL|function|methodULongLong
name|void
name|methodULongLong
parameter_list|(
name|qulonglong
name|ull
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodULongLong(qulonglong)"
expr_stmt|;
name|dataSpy
operator|.
name|ull
operator|=
name|ull
expr_stmt|;
block|}
DECL|function|methodDouble
name|void
name|methodDouble
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodDouble(double)"
expr_stmt|;
name|dataSpy
operator|.
name|d
operator|=
name|d
expr_stmt|;
block|}
DECL|function|methodString
name|void
name|methodString
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodString(const QString&)"
expr_stmt|;
name|stringSpy
operator|=
name|s
expr_stmt|;
block|}
DECL|function|methodObjectPath
name|void
name|methodObjectPath
parameter_list|(
specifier|const
name|QDBusObjectPath
modifier|&
name|op
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodObjectPath(const QDBusObjectPath&)"
expr_stmt|;
name|stringSpy
operator|=
name|op
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
DECL|function|methodSignature
name|void
name|methodSignature
parameter_list|(
specifier|const
name|QDBusSignature
modifier|&
name|s
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodSignature(const QDBusSignature&)"
expr_stmt|;
name|stringSpy
operator|=
name|s
operator|.
name|signature
argument_list|()
expr_stmt|;
block|}
DECL|function|methodVariant
name|void
name|methodVariant
parameter_list|(
specifier|const
name|QDBusVariant
modifier|&
name|v
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodVariant(const QDBusVariant&)"
expr_stmt|;
name|variantSpy
operator|=
name|v
operator|.
name|variant
argument_list|()
expr_stmt|;
block|}
DECL|function|methodList
name|void
name|methodList
parameter_list|(
specifier|const
name|QVariantList
modifier|&
name|l
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodList(const QVariantList&)"
expr_stmt|;
name|listSpy
operator|=
name|l
expr_stmt|;
block|}
DECL|function|methodStringList
name|void
name|methodStringList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|sl
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodStringList(const QStringList&)"
expr_stmt|;
name|stringlistSpy
operator|=
name|sl
expr_stmt|;
block|}
DECL|function|methodByteArray
name|void
name|methodByteArray
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|ba
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodByteArray(const QByteArray&)"
expr_stmt|;
name|bytearraySpy
operator|=
name|ba
expr_stmt|;
block|}
DECL|function|methodMap
name|void
name|methodMap
parameter_list|(
specifier|const
name|QVariantMap
modifier|&
name|m
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodMap(const QVariantMap&)"
expr_stmt|;
name|mapSpy
operator|=
name|m
expr_stmt|;
block|}
DECL|function|methodSSMap
name|void
name|methodSSMap
parameter_list|(
specifier|const
name|StringStringMap
modifier|&
name|ssmap
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodSSMap(const StringStringMap&)"
expr_stmt|;
name|ssmapSpy
operator|=
name|ssmap
expr_stmt|;
block|}
DECL|function|methodLLDateTimeMap
name|void
name|methodLLDateTimeMap
parameter_list|(
specifier|const
name|LLDateTimeMap
modifier|&
name|lldtmap
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodLLDateTimeMap(const LLDateTimeMap&)"
expr_stmt|;
name|lldtmapSpy
operator|=
name|lldtmap
expr_stmt|;
block|}
DECL|function|methodStruct
name|void
name|methodStruct
parameter_list|(
specifier|const
name|MyStruct
modifier|&
name|s
parameter_list|)
block|{
name|slotSpy
operator|=
literal|"void TypesInterface::methodStruct(const MyStruct&)"
expr_stmt|;
name|structSpy
operator|=
name|s
expr_stmt|;
block|}
DECL|function|retrieveBool
name|bool
name|retrieveBool
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|b
return|;
block|}
DECL|function|retrieveUChar
name|uchar
name|retrieveUChar
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|uc
return|;
block|}
DECL|function|retrieveShort
name|short
name|retrieveShort
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|s
return|;
block|}
DECL|function|retrieveUShort
name|ushort
name|retrieveUShort
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|us
return|;
block|}
DECL|function|retrieveInt
name|int
name|retrieveInt
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|i
return|;
block|}
DECL|function|retrieveUInt
name|uint
name|retrieveUInt
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|ui
return|;
block|}
DECL|function|retrieveLongLong
name|qlonglong
name|retrieveLongLong
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|ll
return|;
block|}
DECL|function|retrieveULongLong
name|qulonglong
name|retrieveULongLong
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|ull
return|;
block|}
DECL|function|retrieveDouble
name|double
name|retrieveDouble
parameter_list|()
block|{
return|return
name|dataSpy
operator|.
name|d
return|;
block|}
DECL|function|retrieveString
name|QString
name|retrieveString
parameter_list|()
block|{
return|return
name|stringSpy
return|;
block|}
DECL|function|retrieveObjectPath
name|QDBusObjectPath
name|retrieveObjectPath
parameter_list|()
block|{
return|return
name|QDBusObjectPath
argument_list|(
name|stringSpy
argument_list|)
return|;
block|}
DECL|function|retrieveSignature
name|QDBusSignature
name|retrieveSignature
parameter_list|()
block|{
return|return
name|QDBusSignature
argument_list|(
name|stringSpy
argument_list|)
return|;
block|}
DECL|function|retrieveVariant
name|QDBusVariant
name|retrieveVariant
parameter_list|()
block|{
return|return
name|QDBusVariant
argument_list|(
name|variantSpy
argument_list|)
return|;
block|}
DECL|function|retrieveList
name|QVariantList
name|retrieveList
parameter_list|()
block|{
return|return
name|listSpy
return|;
block|}
DECL|function|retrieveStringList
name|QStringList
name|retrieveStringList
parameter_list|()
block|{
return|return
name|stringlistSpy
return|;
block|}
DECL|function|retrieveByteArray
name|QByteArray
name|retrieveByteArray
parameter_list|()
block|{
return|return
name|bytearraySpy
return|;
block|}
DECL|function|retrieveMap
name|QVariantMap
name|retrieveMap
parameter_list|()
block|{
return|return
name|mapSpy
return|;
block|}
DECL|function|retrieveSSMap
name|StringStringMap
name|retrieveSSMap
parameter_list|()
block|{
return|return
name|ssmapSpy
return|;
block|}
DECL|function|retrieveLLDateTimeMap
name|LLDateTimeMap
name|retrieveLLDateTimeMap
parameter_list|()
block|{
return|return
name|lldtmapSpy
return|;
block|}
DECL|function|retrieveStruct
name|MyStruct
name|retrieveStruct
parameter_list|()
block|{
return|return
name|structSpy
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|newMyObjectPeer
name|void
name|newMyObjectPeer
parameter_list|(
name|int
name|nInterfaces
init|=
literal|4
parameter_list|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"newMyObject"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|nInterfaces
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|registerMyObjectPeer
name|void
name|registerMyObjectPeer
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|,
name|QDBusConnection
operator|::
name|RegisterOptions
name|options
init|=
name|QDBusConnection
operator|::
name|ExportAdaptors
parameter_list|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"registerMyObject"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|path
expr_stmt|;
name|req
operator|<<
operator|(
name|int
operator|)
name|options
expr_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
block|}
end_function
begin_function
DECL|function|emitSignalPeer
name|void
name|emitSignalPeer
parameter_list|(
specifier|const
name|QString
modifier|&
name|interface
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|parameter
parameter_list|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"emitSignal"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|interface
expr_stmt|;
name|req
operator|<<
name|name
expr_stmt|;
name|req
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|parameter
argument_list|)
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"emitSignal2"
argument_list|)
decl_stmt|;
name|req
operator|<<
name|interface
expr_stmt|;
name|req
operator|<<
name|name
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotSpyPeer
specifier|const
name|char
modifier|*
name|slotSpyPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"slotSpyServer"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|valueSpyPeer
name|QString
name|valueSpyPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"valueSpyServer"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|clearValueSpyPeer
name|void
name|clearValueSpyPeer
parameter_list|()
block|{
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"clearValueSpy"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
block|}
end_function
begin_class
DECL|class|tst_QDBusAbstractAdaptor
class|class
name|tst_QDBusAbstractAdaptor
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|methodCalls_data
parameter_list|()
function_decl|;
name|void
name|methodCalls
parameter_list|()
function_decl|;
name|void
name|methodCallScriptable
parameter_list|()
function_decl|;
name|void
name|signalEmissions_data
parameter_list|()
function_decl|;
name|void
name|signalEmissions
parameter_list|()
function_decl|;
name|void
name|sameSignalDifferentPaths
parameter_list|()
function_decl|;
name|void
name|sameObjectDifferentPaths
parameter_list|()
function_decl|;
name|void
name|scriptableSignalOrNot
parameter_list|()
function_decl|;
name|void
name|overloadedSignalEmission_data
parameter_list|()
function_decl|;
name|void
name|overloadedSignalEmission
parameter_list|()
function_decl|;
name|void
name|readProperties
parameter_list|()
function_decl|;
name|void
name|readPropertiesInvalidInterface
parameter_list|()
function_decl|;
name|void
name|readPropertiesEmptyInterface_data
parameter_list|()
function_decl|;
name|void
name|readPropertiesEmptyInterface
parameter_list|()
function_decl|;
name|void
name|readAllProperties
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesInvalidInterface
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesEmptyInterface_data
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesEmptyInterface
parameter_list|()
function_decl|;
name|void
name|writeProperties
parameter_list|()
function_decl|;
name|void
name|methodCallsPeer_data
parameter_list|()
function_decl|;
name|void
name|methodCallsPeer
parameter_list|()
function_decl|;
name|void
name|methodCallScriptablePeer
parameter_list|()
function_decl|;
name|void
name|signalEmissionsPeer_data
parameter_list|()
function_decl|;
name|void
name|signalEmissionsPeer
parameter_list|()
function_decl|;
name|void
name|sameSignalDifferentPathsPeer
parameter_list|()
function_decl|;
name|void
name|sameObjectDifferentPathsPeer
parameter_list|()
function_decl|;
name|void
name|scriptableSignalOrNotPeer
parameter_list|()
function_decl|;
name|void
name|overloadedSignalEmissionPeer_data
parameter_list|()
function_decl|;
name|void
name|overloadedSignalEmissionPeer
parameter_list|()
function_decl|;
name|void
name|readPropertiesPeer
parameter_list|()
function_decl|;
name|void
name|readPropertiesInvalidInterfacePeer
parameter_list|()
function_decl|;
name|void
name|readPropertiesEmptyInterfacePeer_data
parameter_list|()
function_decl|;
name|void
name|readPropertiesEmptyInterfacePeer
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesPeer
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesInvalidInterfacePeer
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesEmptyInterfacePeer_data
parameter_list|()
function_decl|;
name|void
name|readAllPropertiesEmptyInterfacePeer
parameter_list|()
function_decl|;
name|void
name|writePropertiesPeer
parameter_list|()
function_decl|;
name|void
name|typeMatching_data
parameter_list|()
function_decl|;
name|void
name|typeMatching
parameter_list|()
function_decl|;
name|void
name|methodWithMoreThanOneReturnValue
parameter_list|()
function_decl|;
name|void
name|methodWithMoreThanOneReturnValuePeer
parameter_list|()
function_decl|;
private|private:
DECL|member|proc
name|QProcess
name|proc
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|WaitForQMyServer
class|class
name|WaitForQMyServer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|WaitForQMyServer
parameter_list|()
constructor_decl|;
name|bool
name|ok
parameter_list|()
function_decl|;
public|public
name|Q_SLOTS
public|:
DECL|function|ownerChange
name|void
name|ownerChange
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
name|serviceName
condition|)
name|loop
operator|.
name|quit
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|loop
name|QEventLoop
name|loop
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|WaitForQMyServer
name|WaitForQMyServer
operator|::
name|WaitForQMyServer
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ok
argument_list|()
condition|)
block|{
name|connect
argument_list|(
name|con
operator|.
name|interface
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|serviceOwnerChanged
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|ownerChange
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|2000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|ok
name|bool
name|WaitForQMyServer
operator|::
name|ok
parameter_list|()
block|{
return|return
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
operator|&&
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|interface
argument_list|()
operator|->
name|isServiceRegistered
argument_list|(
name|serviceName
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|initTestCase
parameter_list|()
block|{
name|commonInit
argument_list|()
expr_stmt|;
comment|// start peer server
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|proc
operator|.
name|start
argument_list|(
literal|"qmyserver"
argument_list|)
expr_stmt|;
else|#
directive|else
name|proc
operator|.
name|start
argument_list|(
literal|"./qmyserver/qmyserver"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|WaitForQMyServer
name|w
decl_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|ok
argument_list|()
argument_list|)
expr_stmt|;
comment|//QTest::qWait(2000);
comment|// get peer server address
name|QDBusMessage
name|req
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"address"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|rpl
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rpl
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QString
name|address
init|=
name|rpl
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// connect to peer server
name|QDBusConnection
name|peercon
init|=
name|QDBusConnection
operator|::
name|connectToPeer
argument_list|(
name|address
argument_list|,
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|peercon
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QDBusMessage
name|req2
init|=
name|QDBusMessage
operator|::
name|createMethodCall
argument_list|(
name|serviceName
argument_list|,
name|objectPath
argument_list|,
name|interfaceName
argument_list|,
literal|"isConnected"
argument_list|)
decl_stmt|;
name|QDBusMessage
name|rpl2
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|call
argument_list|(
name|req2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|rpl2
operator|.
name|type
argument_list|()
operator|==
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rpl2
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|proc
operator|.
name|close
argument_list|()
expr_stmt|;
name|proc
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodCalls_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCalls_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"nInterfaces"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodCalls
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCalls
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
comment|//QDBusInterface emptycon.baseService(), "/", QString());
block|{
comment|// must fail: no object
name|QDBusInterface
name|if1
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface1"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|int
argument_list|,
name|nInterfaces
argument_list|)
expr_stmt|;
name|MyObject
name|obj
argument_list|(
name|nInterfaces
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|if1
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface1"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if2
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if3
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if4
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// must fail: no such method
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// simple call: one such method exists
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface2::method()"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// multiple methods in multiple interfaces, no name overlap
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface3::methodVoid()"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|,
literal|42
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface3::methodInt(int)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface3::methodString(QString)"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// method overloading: different interfaces
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface4::method()"
argument_list|)
expr_stmt|;
comment|// method overloading: different parameters
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method.i"
argument_list|,
literal|42
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface4::method(int)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method.s"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface4::method(QString)"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodCallScriptable
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCallScriptable
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|if2
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"scriptableMethod"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpy
argument_list|,
literal|"void Interface2::scriptableMethod()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitSignal
specifier|static
name|void
name|emitSignal
parameter_list|(
name|MyObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QString
modifier|&
name|iface
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|parameter
parameter_list|)
block|{
if|if
condition|(
name|iface
operator|.
name|endsWith
argument_list|(
literal|'2'
argument_list|)
condition|)
name|obj
operator|->
name|if2
operator|->
name|emitSignal
argument_list|(
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|iface
operator|.
name|endsWith
argument_list|(
literal|'3'
argument_list|)
condition|)
name|obj
operator|->
name|if3
operator|->
name|emitSignal
argument_list|(
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|iface
operator|.
name|endsWith
argument_list|(
literal|'4'
argument_list|)
condition|)
name|obj
operator|->
name|if4
operator|->
name|emitSignal
argument_list|(
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
else|else
name|obj
operator|->
name|emitSignal
argument_list|(
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalEmissions_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|signalEmissions_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"interface"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"signature"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"parameter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Interface2.signal"
argument_list|)
operator|<<
literal|"local.Interface2"
operator|<<
literal|"signal"
operator|<<
name|QString
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Interface3.signalVoid"
argument_list|)
operator|<<
literal|"local.Interface3"
operator|<<
literal|"signalVoid"
operator|<<
name|QString
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Interface3.signalInt"
argument_list|)
operator|<<
literal|"local.Interface3"
operator|<<
literal|"signalInt"
operator|<<
literal|"i"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Interface3.signalString"
argument_list|)
operator|<<
literal|"local.Interface3"
operator|<<
literal|"signalString"
operator|<<
literal|"s"
operator|<<
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyObject.scriptableSignalVoid"
argument_list|)
operator|<<
literal|"local.MyObject"
operator|<<
literal|"scriptableSignalVoid"
operator|<<
name|QString
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyObject.scriptableSignalInt"
argument_list|)
operator|<<
literal|"local.MyObject"
operator|<<
literal|"scriptableSignalInt"
operator|<<
literal|"i"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MyObject.nySignalString"
argument_list|)
operator|<<
literal|"local.MyObject"
operator|<<
literal|"scriptableSignalString"
operator|<<
literal|"s"
operator|<<
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalEmissions
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|signalEmissions
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerService
argument_list|(
literal|"com.trolltech.tst_QDBusAbstractAdaptor"
argument_list|)
expr_stmt|;
name|MyObject
name|obj
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportAdaptors
operator||
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
comment|// connect all signals and emit only one
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalInt"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalString"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalInt"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalString"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
comment|// connect one signal and emit them all
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalInt"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalString"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalInt"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalString"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sameSignalDifferentPaths
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|sameSignalDifferentPaths
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p1"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p2"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|if2
operator|->
name|emitSignal
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.Interface2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"signal"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now connect the other one
name|spy
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|if2
operator|->
name|emitSignal
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sameObjectDifferentPaths
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|sameObjectDifferentPaths
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p1"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p2"
argument_list|,
operator|&
name|obj
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// don't export anything
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|if2
operator|->
name|emitSignal
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.Interface2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"signal"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scriptableSignalOrNot
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|scriptableSignalOrNot
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|MyObject
name|obj
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p1"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p2"
argument_list|,
operator|&
name|obj
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// don't export anything
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|emitSignal
argument_list|(
literal|"scriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|emitSignal
argument_list|(
literal|"nonScriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only /p1 must have emitted
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.MyObject"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"scriptableSignalVoid"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|path
argument_list|,
name|QString
argument_list|(
literal|"/p1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|MyObject
name|obj
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p1"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p2"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
argument_list|)
expr_stmt|;
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|emitSignal
argument_list|(
literal|"nonScriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only /p2 must have emitted now
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.MyObject"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"nonScriptableSignalVoid"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|path
argument_list|,
name|QString
argument_list|(
literal|"/p2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"destroyed"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"destroyed"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|MyObject
name|obj
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p1"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/p2"
argument_list|,
operator|&
name|obj
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
argument_list|)
expr_stmt|;
block|}
comment|//<--- QObject emits the destroyed(QObject*) signal at this point
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|overloadedSignalEmission_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|overloadedSignalEmission_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"signature"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"parameter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"void"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
literal|"i"
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|"s"
operator|<<
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overloadedSignalEmission
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|overloadedSignalEmission
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QString
name|interface
init|=
literal|"local.Interface4"
decl_stmt|;
name|QString
name|name
init|=
literal|"signal"
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
comment|//QDBusInterface *if4 = new QDBusInterface(con.baseService(), "/", interface, con);
comment|// connect all signals and emit only one
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|""
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|"i"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|"s"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|signature
argument_list|)
expr_stmt|;
comment|// connect one signal and emit them all
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
name|signature
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignal
argument_list|(
operator|&
name|obj
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readProperties
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readProperties
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|2
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|propname
init|=
name|QString
argument_list|(
literal|"prop%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|propname
argument_list|)
decl_stmt|;
name|QVariant
name|value
init|=
name|reply
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"QString %1::%2() const"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|,
name|propname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readPropertiesInvalidInterface
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesInvalidInterface
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// test an invalid interface:
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|"local.DoesntExist"
argument_list|,
literal|"prop1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPropertiesEmptyInterface_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesEmptyInterface_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariantMap
argument_list|>
argument_list|(
literal|"expectedProperties"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"existing"
argument_list|)
expr_stmt|;
name|QVariantMap
name|expectedProperties
decl_stmt|;
name|expectedProperties
index|[
literal|"prop1"
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|expectedProperties
index|[
literal|"prop2"
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|expectedProperties
index|[
literal|"interface3prop"
index|]
operator|=
literal|"QString Interface3::interface3prop() const"
expr_stmt|;
name|expectedProperties
index|[
literal|"interface4prop"
index|]
operator|=
literal|"QString Interface4::interface4prop() const"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"existing"
argument_list|)
operator|<<
name|expectedProperties
operator|<<
literal|true
expr_stmt|;
name|expectedProperties
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expectedProperties
index|[
literal|"prop5"
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|expectedProperties
index|[
literal|"foobar"
index|]
operator|=
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"non-existing"
argument_list|)
operator|<<
name|expectedProperties
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPropertiesEmptyInterface
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesEmptyInterface
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariantMap
argument_list|,
name|expectedProperties
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|existing
argument_list|)
expr_stmt|;
name|QVariantMap
operator|::
name|ConstIterator
name|it
init|=
name|expectedProperties
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|""
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
condition|)
block|{
name|QVERIFY2
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readAllProperties
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllProperties
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|2
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|propname
init|=
name|QString
argument_list|(
literal|"prop%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|contains
argument_list|(
name|propname
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|propname
operator|+
literal|" on "
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|reply
operator|.
name|value
argument_list|()
operator|.
name|value
argument_list|(
name|propname
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"QString %1::%2() const"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|,
name|propname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readAllPropertiesInvalidInterface
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesInvalidInterface
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// test an invalid interface:
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|"local.DoesntExist"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAllPropertiesEmptyInterface_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesEmptyInterface_data
parameter_list|()
block|{
name|readPropertiesEmptyInterface_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAllPropertiesEmptyInterface
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesEmptyInterface
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVariantMap
name|allprops
init|=
name|reply
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariantMap
argument_list|,
name|expectedProperties
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|existing
argument_list|)
expr_stmt|;
name|QVariantMap
operator|::
name|ConstIterator
name|it
init|=
name|expectedProperties
operator|.
name|constBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|existing
condition|)
block|{
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY2
argument_list|(
name|allprops
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|propvalue
init|=
name|allprops
operator|.
name|value
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|propvalue
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|propvalue
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|stringvalue
init|=
name|propvalue
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|stringvalue
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|stringvalue
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove this property from the map
name|allprops
operator|.
name|remove
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|allprops
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QStringList
argument_list|(
name|allprops
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|QVERIFY2
argument_list|(
operator|!
name|allprops
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeProperties
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|writeProperties
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|valueSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Set"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|QString
argument_list|(
literal|"prop1"
argument_list|)
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|valueSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// call mustn't have succeeded
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Set"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|QString
argument_list|(
literal|"prop2"
argument_list|)
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueSpy
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|slotSpy
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"void %1::setProp2(const QString&)"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|methodCallsPeer_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCallsPeer_data
parameter_list|()
block|{
name|methodCalls_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodCallsPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCallsPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// must fail: no object
name|QDBusInterface
name|if1
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface1"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|int
argument_list|,
name|nInterfaces
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|(
name|nInterfaces
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|if1
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface1"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if2
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if3
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusInterface
name|if4
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// must fail: no such method
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// simple call: one such method exists
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface2::method()"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// multiple methods in multiple interfaces, no name overlap
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if1
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ErrorMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodVoid"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface3::methodVoid()"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodInt"
argument_list|,
literal|42
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface3::methodInt(int)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if3
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodString"
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface3::methodString(QString)"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nInterfaces
operator|--
condition|)
return|return;
comment|// method overloading: different interfaces
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface4::method()"
argument_list|)
expr_stmt|;
comment|// method overloading: different parameters
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method.i"
argument_list|,
literal|42
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface4::method(int)"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|if4
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method.s"
argument_list|,
name|QString
argument_list|()
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface4::method(QString)"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodCallScriptablePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodCallScriptablePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|if2
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|if2
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"scriptableMethod"
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|,
literal|"void Interface2::scriptableMethod()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalEmissionsPeer_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|signalEmissionsPeer_data
parameter_list|()
block|{
name|signalEmissions_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalEmissionsPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|signalEmissionsPeer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|,
name|QDBusConnection
operator|::
name|ExportAdaptors
operator||
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
comment|// connect all signals and emit only one
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalInt"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
literal|"signalString"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalInt"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalString"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
name|interface
argument_list|,
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
comment|// connect one signal and emit them all
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface3"
argument_list|,
literal|"signalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface3"
argument_list|,
literal|"signalInt"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface3"
argument_list|,
literal|"signalString"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalInt"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalString"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sameSignalDifferentPathsPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|sameSignalDifferentPathsPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p1"
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p2"
argument_list|)
expr_stmt|;
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface2"
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.Interface2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"signal"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now connect the other one
name|spy
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface2"
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sameObjectDifferentPathsPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|sameObjectDifferentPathsPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p1"
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// don't export anything
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.Interface2"
argument_list|,
literal|"signal"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface2"
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.Interface2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"signal"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scriptableSignalOrNotPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|scriptableSignalOrNotPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
empty_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|newMyObjectPeer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p1"
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// don't export anything
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"scriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only /p1 must have emitted
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.MyObject"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"scriptableSignalVoid"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|path
argument_list|,
name|QString
argument_list|(
literal|"/p1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|newMyObjectPeer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p1"
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p2"
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
argument_list|)
expr_stmt|;
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.MyObject"
argument_list|,
literal|"nonScriptableSignalVoid"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// only /p2 must have emitted now
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|QString
argument_list|(
literal|"local.MyObject"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|QString
argument_list|(
literal|"nonScriptableSignalVoid"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|path
argument_list|,
name|QString
argument_list|(
literal|"/p2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|signature
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p1"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"destroyed"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/p2"
argument_list|,
literal|"local.MyObject"
argument_list|,
literal|"destroyed"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|newMyObjectPeer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p1"
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
argument_list|)
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/p2"
argument_list|,
name|QDBusConnection
operator|::
name|ExportScriptableSignals
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
argument_list|)
expr_stmt|;
block|}
comment|//<--- QObject emits the destroyed(QObject*) signal at this point
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|overloadedSignalEmissionPeer_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|overloadedSignalEmissionPeer_data
parameter_list|()
block|{
name|overloadedSignalEmission_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overloadedSignalEmissionPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|overloadedSignalEmissionPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QString
name|interface
init|=
literal|"local.Interface4"
decl_stmt|;
name|QString
name|name
init|=
literal|"signal"
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
comment|//QDBusInterface *if4 = new QDBusInterface(QString(), "/", interface, con);
comment|// connect all signals and emit only one
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|""
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|"i"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
literal|"s"
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
name|interface
argument_list|,
name|name
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|signature
argument_list|)
expr_stmt|;
comment|// connect one signal and emit them all
block|{
name|QDBusSignalSpy
name|spy
decl_stmt|;
name|con
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|interface
argument_list|,
name|name
argument_list|,
name|signature
argument_list|,
operator|&
name|spy
argument_list|,
name|SLOT
argument_list|(
name|slot
argument_list|(
name|QDBusMessage
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|emitSignalPeer
argument_list|(
literal|"local.Interface4"
argument_list|,
literal|"signal"
argument_list|,
name|QVariant
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|interface
argument_list|,
name|interface
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|spy
operator|.
name|signature
argument_list|,
literal|"signature"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readPropertiesPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|2
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|propname
init|=
name|QString
argument_list|(
literal|"prop%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|propname
argument_list|)
decl_stmt|;
name|QVariant
name|value
init|=
name|reply
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"QString %1::%2() const"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|,
name|propname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readPropertiesInvalidInterfacePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesInvalidInterfacePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// test an invalid interface:
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|"local.DoesntExist"
argument_list|,
literal|"prop1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPropertiesEmptyInterfacePeer_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesEmptyInterfacePeer_data
parameter_list|()
block|{
name|readPropertiesEmptyInterface_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readPropertiesEmptyInterfacePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readPropertiesEmptyInterfacePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariantMap
argument_list|,
name|expectedProperties
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|existing
argument_list|)
expr_stmt|;
name|QVariantMap
operator|::
name|ConstIterator
name|it
init|=
name|expectedProperties
operator|.
name|constBegin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QDBusReply
argument_list|<
name|QVariant
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Get"
argument_list|,
literal|""
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
condition|)
block|{
name|QVERIFY2
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readAllPropertiesPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|2
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|propname
init|=
name|QString
argument_list|(
literal|"prop%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|reply
operator|.
name|value
argument_list|()
operator|.
name|contains
argument_list|(
name|propname
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|propname
operator|+
literal|" on "
operator|+
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|value
init|=
name|reply
operator|.
name|value
argument_list|()
operator|.
name|value
argument_list|(
name|propname
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"QString %1::%2() const"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|,
name|propname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readAllPropertiesInvalidInterfacePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesInvalidInterfacePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
comment|// test an invalid interface:
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|"local.DoesntExist"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAllPropertiesEmptyInterfacePeer_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesEmptyInterfacePeer_data
parameter_list|()
block|{
name|readAllPropertiesEmptyInterface_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readAllPropertiesEmptyInterfacePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|readAllPropertiesEmptyInterfacePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusReply
argument_list|<
name|QVariantMap
argument_list|>
name|reply
init|=
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"GetAll"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVariantMap
name|allprops
init|=
name|reply
decl_stmt|;
name|QFETCH
argument_list|(
name|QVariantMap
argument_list|,
name|expectedProperties
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|existing
argument_list|)
expr_stmt|;
name|QVariantMap
operator|::
name|ConstIterator
name|it
init|=
name|expectedProperties
operator|.
name|constBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|existing
condition|)
block|{
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QVERIFY2
argument_list|(
name|allprops
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|propvalue
init|=
name|allprops
operator|.
name|value
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|propvalue
operator|.
name|isNull
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|propvalue
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|stringvalue
init|=
name|propvalue
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|stringvalue
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|stringvalue
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove this property from the map
name|allprops
operator|.
name|remove
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|allprops
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QStringList
argument_list|(
name|allprops
operator|.
name|keys
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
init|;
name|it
operator|!=
name|expectedProperties
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
name|QVERIFY2
argument_list|(
operator|!
name|allprops
operator|.
name|contains
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writePropertiesPeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|writePropertiesPeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QDBusInterface
name|properties
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"org.freedesktop.DBus.Properties"
argument_list|,
name|con
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|QString
argument_list|(
literal|"Interface%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|clearValueSpyPeer
argument_list|()
expr_stmt|;
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Set"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|QString
argument_list|(
literal|"prop1"
argument_list|)
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|valueSpyPeer
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// call mustn't have succeeded
name|properties
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"Set"
argument_list|,
literal|"local."
operator|+
name|name
argument_list|,
name|QString
argument_list|(
literal|"prop2"
argument_list|)
argument_list|,
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|valueSpyPeer
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|slotSpyPeer
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"void %1::setProp2(const QString&)"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|void tst_QDBusAbstractAdaptor::adaptorIntrospection_data() {     methodCalls_data(); }  void tst_QDBusAbstractAdaptor::adaptorIntrospection() {     QDBusConnection con = QDBus::sessionBus();     QVERIFY(con.isConnected());      QObject obj;     con.registerObject("/",&obj);      QFETCH(int, nInterfaces);     switch (nInterfaces)     {     case 4:         new Interface4(&obj);     case 3:         new Interface3(&obj);     case 2:         new Interface2(&obj);     case 1:         new Interface1(&obj);     }      QDBusObject dobj = con.findObject(con.baseService(), "/");     QVERIFY(dobj.isValid());      QString xml = dobj.introspect();     QVERIFY(!xml.isEmpty());      QStringList interfaces = dobj.interfaces();     QCOMPARE(interfaces.count(), nInterfaces + 2);     switch (nInterfaces)     {     case 4: {         QVERIFY(interfaces.contains("local.Interface4"));         QDBusInterface iface(dobj, "local.Interface4");         QCOMPARE(iface.methodData(), Interface4::methodData);         QCOMPARE(iface.signalData(), Interface4::signalData);         QCOMPARE(iface.propertyData(), Interface4::propertyData);     }     case 3: {         QVERIFY(interfaces.contains("local.Interface3"));         QDBusInterface iface(dobj, "local.Interface3");         QCOMPARE(iface.methodData(), Interface3::methodData);         QCOMPARE(iface.signalData(), Interface3::signalData);         QCOMPARE(iface.propertyData(), Interface3::propertyData);     }     case 2: {         QVERIFY(interfaces.contains("local.Interface2"));         QDBusInterface iface(dobj, "local.Interface2");         QCOMPARE(iface.methodData(), Interface2::methodData);         QCOMPARE(iface.signalData(), Interface2::signalData);         QCOMPARE(iface.propertyData(), Interface2::propertyData);     }     case 1: {         QVERIFY(interfaces.contains("local.Interface1"));         QDBusInterface iface(dobj, "local.Interface1");         QCOMPARE(iface.methodData(), Interface1::methodData);         QCOMPARE(iface.signalData(), Interface1::signalData);         QCOMPARE(iface.propertyData(), Interface1::propertyData);     }     } }  void tst_QDBusAbstractAdaptor::objectTreeIntrospection() {     QDBusConnection con = QDBus::sessionBus();     QVERIFY(con.isConnected());      {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.isEmpty());     }      QObject root;     con.registerObject("/",&root);     {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.isEmpty());     }      QObject p1;     con.registerObject("/p1",&p1);     {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.contains("p1"));     }      con.unregisterObject("/");     {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.contains("p1"));     }      con.registerObject("/p1/q/r",&root);     {         QDBusObject dobj = con.findObject(con.baseService(), "/p1");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.contains("q"));     }     {         QDBusObject dobj = con.findObject(con.baseService(), "/p1/q");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.contains("r"));     }      con.unregisterObject("/p1", QDBusConnection::UnregisterTree);     {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.isEmpty());     }      QObject p2;     con.registerObject("/p2",&p2, QDBusConnection::ExportChildObjects);     {         QDBusObject dobj = con.findObject(con.baseService(), "/");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(!tree.childObjects.contains("p1"));         QVERIFY(tree.childObjects.contains("p2"));     }      QObject q;     q.setParent(&p2);     {         QDBusObject dobj = con.findObject(con.baseService(), "/p2");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(!tree.childObjects.contains("q"));     }      q.setObjectName("q");     {         QDBusObject dobj = con.findObject(con.baseService(), "/p2");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(tree.childObjects.contains("q"));     }      q.setParent(0);     {         QDBusObject dobj = con.findObject(con.baseService(), "/p2");         QString xml = dobj.introspect();          QDBusIntrospection::Object tree =             QDBusIntrospection::parseObject(xml);         QVERIFY(!tree.childObjects.contains("q"));     } }
endif|#
directive|endif
end_endif
begin_function
DECL|function|typeMatching_data
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|typeMatching_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"basename"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"signature"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bool"
argument_list|)
operator|<<
literal|"Bool"
operator|<<
literal|"b"
operator|<<
name|QVariant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"byte"
argument_list|)
operator|<<
literal|"UChar"
operator|<<
literal|"y"
operator|<<
name|qVariantFromValue
argument_list|(
name|uchar
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short"
argument_list|)
operator|<<
literal|"Short"
operator|<<
literal|"n"
operator|<<
name|qVariantFromValue
argument_list|(
name|short
argument_list|(
operator|-
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ushort"
argument_list|)
operator|<<
literal|"UShort"
operator|<<
literal|"q"
operator|<<
name|qVariantFromValue
argument_list|(
name|ushort
argument_list|(
literal|44
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int"
argument_list|)
operator|<<
literal|"Int"
operator|<<
literal|"i"
operator|<<
name|QVariant
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uint"
argument_list|)
operator|<<
literal|"UInt"
operator|<<
literal|"u"
operator|<<
name|QVariant
argument_list|(
literal|42U
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qlonglong"
argument_list|)
operator|<<
literal|"LongLong"
operator|<<
literal|"x"
operator|<<
name|QVariant
argument_list|(
name|Q_INT64_C
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qulonglong"
argument_list|)
operator|<<
literal|"ULongLong"
operator|<<
literal|"t"
operator|<<
name|QVariant
argument_list|(
name|Q_UINT64_C
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"double"
argument_list|)
operator|<<
literal|"Double"
operator|<<
literal|"d"
operator|<<
name|QVariant
argument_list|(
literal|2.5
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string"
argument_list|)
operator|<<
literal|"String"
operator|<<
literal|"s"
operator|<<
name|QVariant
argument_list|(
literal|"Hello, World!"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"variant"
argument_list|)
operator|<<
literal|"Variant"
operator|<<
literal|"v"
operator|<<
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
literal|"Hello again!"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"list"
argument_list|)
operator|<<
literal|"List"
operator|<<
literal|"av"
operator|<<
name|QVariant
argument_list|(
name|QVariantList
argument_list|()
operator|<<
literal|42
operator|<<
name|QString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"bar"
argument_list|)
operator|<<
name|qVariantFromValue
argument_list|(
name|QDBusVariant
argument_list|(
name|QString
argument_list|(
literal|"baz"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"stringlist"
argument_list|)
operator|<<
literal|"StringList"
operator|<<
literal|"as"
operator|<<
name|QVariant
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"Hello"
operator|<<
literal|"world"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bytearray"
argument_list|)
operator|<<
literal|"ByteArray"
operator|<<
literal|"ay"
operator|<<
name|QVariant
argument_list|(
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantMap
name|map
decl_stmt|;
name|map
index|[
literal|"one"
index|]
operator|=
literal|1
expr_stmt|;
comment|// int
name|map
index|[
literal|"The answer to life, the Universe and everything"
index|]
operator|=
literal|42u
expr_stmt|;
comment|// uint
name|map
index|[
literal|"In the beginning..."
index|]
operator|=
name|QString
argument_list|(
literal|"There was nothing"
argument_list|)
expr_stmt|;
comment|// string
name|map
index|[
literal|"but Unix came and said"
index|]
operator|=
name|QByteArray
argument_list|(
literal|"\"Hello, World\""
argument_list|)
expr_stmt|;
comment|// bytearray
name|map
index|[
literal|"two"
index|]
operator|=
name|qVariantFromValue
argument_list|(
name|short
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// short
name|QTest
operator|::
name|newRow
argument_list|(
literal|"map"
argument_list|)
operator|<<
literal|"Map"
operator|<<
literal|"a{sv}"
operator|<<
name|QVariant
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|StringStringMap
name|ssmap
decl_stmt|;
name|ssmap
index|[
literal|"a"
index|]
operator|=
literal|"A"
expr_stmt|;
name|ssmap
index|[
literal|"A"
index|]
operator|=
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssmap"
argument_list|)
operator|<<
literal|"SSMap"
operator|<<
literal|"a{ss}"
operator|<<
name|qVariantFromValue
argument_list|(
name|ssmap
argument_list|)
expr_stmt|;
name|LLDateTimeMap
name|lldtmap
decl_stmt|;
name|lldtmap
index|[
operator|-
literal|1
index|]
operator|=
name|QDateTime
argument_list|()
expr_stmt|;
name|QDateTime
name|now
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|lldtmap
index|[
name|now
operator|.
name|toTime_t
argument_list|()
index|]
operator|=
name|now
expr_stmt|;
comment|// array of struct of int64 and struct of 3 ints and struct of 4 ints and int
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lldtmap"
argument_list|)
operator|<<
literal|"LLDateTimeMap"
operator|<<
literal|"a{x((iii)(iiii)i)}"
operator|<<
name|qVariantFromValue
argument_list|(
name|lldtmap
argument_list|)
expr_stmt|;
name|MyStruct
name|s
decl_stmt|;
name|s
operator|.
name|i
operator|=
literal|42
expr_stmt|;
name|s
operator|.
name|s
operator|=
literal|"A value"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"struct"
argument_list|)
operator|<<
literal|"Struct"
operator|<<
literal|"(is)"
operator|<<
name|qVariantFromValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|typeMatching
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|typeMatching
parameter_list|()
block|{
name|QObject
name|obj
decl_stmt|;
operator|new
name|TypesInterface
argument_list|(
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/types"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|basename
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QDBusMessage
name|reply
decl_stmt|;
name|QDBusInterface
name|iface
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/types"
argument_list|,
literal|"local.TypesInterface"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|reply
operator|=
name|iface
operator|.
name|callWithArgumentList
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"method"
operator|+
name|basename
argument_list|,
name|QVariantList
argument_list|()
operator|<<
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|reply
operator|=
name|iface
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"retrieve"
operator|+
name|basename
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|type
argument_list|()
argument_list|,
name|QDBusMessage
operator|::
name|ReplyMessage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
modifier|&
name|retval
init|=
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|compare
argument_list|(
name|retval
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodWithMoreThanOneReturnValue
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodWithMoreThanOneReturnValue
parameter_list|()
block|{
name|QDBusConnection
name|con
init|=
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|MyObject
name|obj
decl_stmt|;
name|con
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
operator|&
name|obj
argument_list|)
expr_stmt|;
name|QString
name|testString
init|=
literal|"This is a test string."
decl_stmt|;
name|QDBusInterface
name|remote
argument_list|(
name|con
operator|.
name|baseService
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|remote
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodStringString"
argument_list|,
name|testString
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|int
argument_list|>
name|intreply
init|=
name|reply
decl_stmt|;
name|QVERIFY
argument_list|(
name|intreply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intreply
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|methodWithMoreThanOneReturnValuePeer
name|void
name|tst_QDBusAbstractAdaptor
operator|::
name|methodWithMoreThanOneReturnValuePeer
parameter_list|()
block|{
name|QDBusConnection
name|con
argument_list|(
literal|"peer"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|con
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|newMyObjectPeer
argument_list|()
expr_stmt|;
name|registerMyObjectPeer
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QString
name|testString
init|=
literal|"This is a test string."
decl_stmt|;
name|QDBusInterface
name|remote
argument_list|(
name|QString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"local.Interface3"
argument_list|,
name|con
argument_list|)
decl_stmt|;
name|QDBusMessage
name|reply
init|=
name|remote
operator|.
name|call
argument_list|(
name|QDBus
operator|::
name|BlockWithGui
argument_list|,
literal|"methodStringString"
argument_list|,
name|testString
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QDBusReply
argument_list|<
name|int
argument_list|>
name|intreply
init|=
name|reply
decl_stmt|;
name|QVERIFY
argument_list|(
name|intreply
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intreply
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|userType
argument_list|()
argument_list|,
name|int
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qdbus_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|reply
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|testString
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDBusAbstractAdaptor
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusabstractadaptor.moc"
end_include
end_unit
