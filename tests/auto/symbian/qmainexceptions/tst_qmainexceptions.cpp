begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<e32base.h>
end_include
begin_include
include|#
directive|include
file|<typeinfo>
end_include
begin_include
include|#
directive|include
file|<stdexcept>
end_include
begin_include
include|#
directive|include
file|<euserhl.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_typedef
DECL|typedef|TLeavingFunc
typedef|typedef
name|void
name|TLeavingFunc
parameter_list|()
function_decl|;
end_typedef
begin_class
DECL|class|tst_qmainexceptions
class|class
name|tst_qmainexceptions
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_qmainexceptions
name|tst_qmainexceptions
parameter_list|()
block|{}
empty_stmt|;
DECL|function|~tst_qmainexceptions
name|~
name|tst_qmainexceptions
parameter_list|()
block|{}
empty_stmt|;
name|void
name|TestSchedulerCatchesError
parameter_list|(
name|TLeavingFunc
modifier|*
name|f
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
name|void
name|TestSymbianRoundTrip
parameter_list|(
name|int
name|leave
parameter_list|,
name|int
name|trap
parameter_list|)
function_decl|;
name|void
name|TestStdRoundTrip
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|thrown
parameter_list|,
specifier|const
name|std
operator|::
name|exception
modifier|&
name|caught
parameter_list|)
function_decl|;
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|trap
parameter_list|()
function_decl|;
name|void
name|cleanupstack
parameter_list|()
function_decl|;
name|void
name|leave
parameter_list|()
function_decl|;
name|void
name|testTranslateBadAlloc
parameter_list|()
function_decl|;
name|void
name|testTranslateBigAlloc
parameter_list|()
function_decl|;
name|void
name|testRoundTrip
parameter_list|()
function_decl|;
name|void
name|testTrap
parameter_list|()
function_decl|;
name|void
name|testPropagation
parameter_list|()
function_decl|;
name|void
name|testDtor1
parameter_list|()
function_decl|;
name|void
name|testDtor2
parameter_list|()
function_decl|;
name|void
name|testNestedExceptions
parameter_list|()
function_decl|;
name|void
name|testScopedPointer
parameter_list|()
function_decl|;
name|void
name|testHybrid
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|CDummy
class|class
name|CDummy
super|:
specifier|public
name|CBase
block|{
public|public:
DECL|function|CDummy
name|CDummy
parameter_list|()
block|{}
DECL|function|~CDummy
name|~
name|CDummy
parameter_list|()
block|{}
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_qmainexceptions
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|trap
name|void
name|tst_qmainexceptions
operator|::
name|trap
parameter_list|()
block|{
name|TTrapHandler
modifier|*
name|th
init|=
name|User
operator|::
name|TrapHandler
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|th
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupstack
name|void
name|tst_qmainexceptions
operator|::
name|cleanupstack
parameter_list|()
block|{
name|__UHEAP_MARK
expr_stmt|;
comment|//fails if OOM
name|CDummy
modifier|*
name|dummy1
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CDummy
decl_stmt|;
name|__UHEAP_CHECK
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|dummy1
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|dummy1
argument_list|)
expr_stmt|;
name|__UHEAP_MARKEND
expr_stmt|;
block|}
end_function
begin_function
DECL|function|leave
name|void
name|tst_qmainexceptions
operator|::
name|leave
parameter_list|()
block|{
name|__UHEAP_MARK
expr_stmt|;
name|CDummy
modifier|*
name|dummy1
init|=
literal|0
decl_stmt|;
name|TRAPD
argument_list|(
argument|err
argument_list|,
argument|{         CDummy* csDummy = new (ELeave) CDummy;         CleanupStack::PushL(csDummy);         __UHEAP_FAILNEXT(
literal|1
argument|);         dummy1 = new (ELeave) CDummy;
comment|//CleanupStack::PopAndDestroy(csDummy); not executed as previous line throws
argument|}
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
name|err
argument_list|,
name|KErrNoMemory
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
operator|(
name|int
operator|)
name|dummy1
operator|)
argument_list|)
expr_stmt|;
name|__UHEAP_MARKEND
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CTestActive
class|class
name|CTestActive
super|:
specifier|public
name|CActive
block|{
public|public:
DECL|function|CTestActive
name|CTestActive
parameter_list|(
name|TLeavingFunc
modifier|*
name|aFunc
parameter_list|)
member_init_list|:
name|CActive
argument_list|(
name|EPriorityStandard
argument_list|)
member_init_list|,
name|iFunc
argument_list|(
name|aFunc
argument_list|)
block|{
name|CActiveScheduler
operator|::
name|Add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|~CTestActive
name|~
name|CTestActive
parameter_list|()
block|{
name|Cancel
argument_list|()
expr_stmt|;
block|}
DECL|function|DoCancel
name|void
name|DoCancel
parameter_list|()
block|{}
DECL|function|Test
name|void
name|Test
parameter_list|()
block|{
comment|// complete this AO in a nested scheduler, to make it synchronous
name|TRequestStatus
modifier|*
name|s
init|=
operator|&
name|iStatus
decl_stmt|;
name|SetActive
argument_list|()
expr_stmt|;
name|User
operator|::
name|RequestComplete
argument_list|(
name|s
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|CActiveScheduler
operator|::
name|Start
argument_list|()
expr_stmt|;
block|}
DECL|function|RunL
name|void
name|RunL
parameter_list|()
block|{
call|(
modifier|*
name|iFunc
call|)
argument_list|()
expr_stmt|;
name|CActiveScheduler
operator|::
name|Stop
argument_list|()
expr_stmt|;
comment|// will only get here if iFunc does not leave
block|}
DECL|function|RunError
name|TInt
name|RunError
parameter_list|(
name|TInt
name|aError
parameter_list|)
block|{
name|error
operator|=
name|aError
expr_stmt|;
name|CActiveScheduler
operator|::
name|Stop
argument_list|()
expr_stmt|;
comment|// will only get here if iFunc leaves
return|return
name|KErrNone
return|;
block|}
public|public:
DECL|member|iFunc
name|TLeavingFunc
modifier|*
name|iFunc
decl_stmt|;
DECL|member|error
name|int
name|error
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|TestSchedulerCatchesError
name|void
name|tst_qmainexceptions
operator|::
name|TestSchedulerCatchesError
parameter_list|(
name|TLeavingFunc
modifier|*
name|f
parameter_list|,
name|int
name|error
parameter_list|)
block|{
name|CTestActive
modifier|*
name|act
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CTestActive
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|act
operator|->
name|Test
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|act
operator|->
name|error
argument_list|,
name|error
argument_list|)
expr_stmt|;
operator|delete
name|act
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ThrowBadAlloc
name|void
name|ThrowBadAlloc
parameter_list|()
block|{
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
block|}
end_function
begin_function
DECL|function|TranslateThrowBadAllocL
name|void
name|TranslateThrowBadAllocL
parameter_list|()
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|ThrowBadAlloc
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTranslateBadAlloc
name|void
name|tst_qmainexceptions
operator|::
name|testTranslateBadAlloc
parameter_list|()
block|{
comment|// bad_alloc should give KErrNoMemory in an AO
name|TestSchedulerCatchesError
argument_list|(
operator|&
name|TranslateThrowBadAllocL
argument_list|,
name|KErrNoMemory
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|BigAlloc
name|void
name|BigAlloc
parameter_list|()
block|{
comment|// allocate too much memory - it's expected that 100M ints is too much, but keep doubling if not.
name|int
modifier|*
name|x
init|=
literal|0
decl_stmt|;
name|int
name|n
init|=
literal|100000000
decl_stmt|;
do|do
block|{
name|x
operator|=
operator|new
name|int
index|[
name|n
index|]
expr_stmt|;
operator|delete
index|[]
name|x
expr_stmt|;
name|n
operator|=
name|n
operator|*
literal|2
expr_stmt|;
block|}
do|while
condition|(
name|x
condition|)
do|;
block|}
end_function
begin_function
DECL|function|TranslateBigAllocL
name|void
name|TranslateBigAllocL
parameter_list|()
block|{
name|QT_TRYCATCH_LEAVING
argument_list|(
name|BigAlloc
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTranslateBigAlloc
name|void
name|tst_qmainexceptions
operator|::
name|testTranslateBigAlloc
parameter_list|()
block|{
comment|// this test will fail if new does not throw on failure, otherwise should give KErrNoMemory in AO
name|TestSchedulerCatchesError
argument_list|(
operator|&
name|TranslateBigAllocL
argument_list|,
name|KErrNoMemory
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|TestSymbianRoundTrip
name|void
name|tst_qmainexceptions
operator|::
name|TestSymbianRoundTrip
parameter_list|(
name|int
name|leave
parameter_list|,
name|int
name|trap
parameter_list|)
block|{
comment|// check that leave converted to exception, converted to error gives expected error code
name|int
name|trapped
decl_stmt|;
name|QT_TRYCATCH_ERROR
argument_list|(
name|trapped
argument_list|,
name|QT_TRAP_THROWING
argument_list|(
name|User
operator|::
name|LeaveIfError
argument_list|(
name|leave
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|trap
argument_list|,
name|trapped
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|TestStdRoundTrip
name|void
name|tst_qmainexceptions
operator|::
name|TestStdRoundTrip
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|thrown
parameter_list|,
specifier|const
name|std
operator|::
name|exception
modifier|&
name|caught
parameter_list|)
block|{
name|bool
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|QT_TRAP_THROWING
argument_list|(
name|qt_symbian_exception2LeaveL
argument_list|(
name|thrown
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|ex
parameter_list|)
block|{
specifier|const
name|std
operator|::
name|type_info
modifier|&
name|exType
init|=
typeid|typeid
argument_list|(
name|ex
argument_list|)
decl_stmt|;
specifier|const
name|std
operator|::
name|type_info
modifier|&
name|caughtType
init|=
typeid|typeid
argument_list|(
name|caught
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|exType
argument_list|,
name|caughtType
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testRoundTrip
name|void
name|tst_qmainexceptions
operator|::
name|testRoundTrip
parameter_list|()
block|{
for|for
control|(
name|int
name|e
init|=
operator|-
literal|50
init|;
name|e
operator|<
literal|0
condition|;
name|e
operator|++
control|)
name|TestSymbianRoundTrip
argument_list|(
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|TestSymbianRoundTrip
argument_list|(
name|KErrNone
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
comment|// positive error codes are not errors
name|TestSymbianRoundTrip
argument_list|(
literal|1
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|TestSymbianRoundTrip
argument_list|(
literal|1000000000
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|TestStdRoundTrip
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|,
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|)
expr_stmt|;
name|TestStdRoundTrip
argument_list|(
name|std
operator|::
name|invalid_argument
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|std
operator|::
name|invalid_argument
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|TestStdRoundTrip
argument_list|(
name|std
operator|::
name|underflow_error
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|std
operator|::
name|underflow_error
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|TestStdRoundTrip
argument_list|(
name|std
operator|::
name|overflow_error
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
name|std
operator|::
name|overflow_error
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testTrap
name|void
name|tst_qmainexceptions
operator|::
name|testTrap
parameter_list|()
block|{
comment|// testing qt_exception2SymbianLeaveL
name|TRAPD
argument_list|(
name|err
argument_list|,
name|qt_symbian_exception2LeaveL
argument_list|(
name|std
operator|::
name|bad_alloc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|err
argument_list|,
name|KErrNoMemory
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|event
name|bool
name|tst_qmainexceptions
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|aEvent
parameter_list|)
block|{
if|if
condition|(
name|aEvent
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
operator|+
literal|1
condition|)
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
elseif|else
if|if
condition|(
name|aEvent
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
operator|+
literal|2
condition|)
block|{
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|aEvent
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testPropagation
name|void
name|tst_qmainexceptions
operator|::
name|testPropagation
parameter_list|()
block|{
comment|// test exception thrown from event is propagated back to sender
name|QEvent
name|event
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|caught
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// testing nested events propagate back to top level sender
name|caught
operator|=
literal|false
expr_stmt|;
name|QEvent
name|event2
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|this
argument_list|,
operator|&
name|event2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|caught
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDtor1
name|void
name|tst_qmainexceptions
operator|::
name|testDtor1
parameter_list|()
block|{
comment|// destructors work on exception
name|int
name|i
init|=
literal|0
decl_stmt|;
struct|struct
name|SAutoInc
block|{
name|SAutoInc
parameter_list|(
name|int
modifier|&
name|aI
parameter_list|)
member_init_list|:
name|i
argument_list|(
name|aI
argument_list|)
block|{
operator|++
name|i
expr_stmt|;
block|}
name|~
name|SAutoInc
parameter_list|()
block|{
operator|--
name|i
expr_stmt|;
block|}
name|int
modifier|&
name|i
decl_stmt|;
block|}
name|ai
argument_list|(
name|i
argument_list|)
struct|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|SAutoInc
name|ai2
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
name|QFAIL
argument_list|(
literal|"should not get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDtor2
name|void
name|tst_qmainexceptions
operator|::
name|testDtor2
parameter_list|()
block|{
comment|// memory is cleaned up correctly on exception
comment|// this crashes with winscw compiler build< 481
name|__UHEAP_MARK
expr_stmt|;
try|try
block|{
name|QString
name|str
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|str
operator|+=
literal|"def"
expr_stmt|;
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
name|QFAIL
argument_list|(
literal|"should not get here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{ }
name|__UHEAP_MARKEND
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testNestedExceptions
name|void
name|tst_qmainexceptions
operator|::
name|testNestedExceptions
parameter_list|()
block|{
comment|// throwing exceptions while handling exceptions
struct|struct
name|Oops
block|{
name|Oops
modifier|*
name|next
decl_stmt|;
name|Oops
parameter_list|(
name|int
name|level
parameter_list|)
member_init_list|:
name|next
argument_list|(
name|level
operator|>
literal|0
condition|?
operator|new
name|Oops
argument_list|(
name|level
operator|-
literal|1
argument_list|)
else|:
literal|0
argument_list|)
block|{}
name|~
name|Oops
parameter_list|()
block|{
try|try
block|{
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
parameter_list|)
block|{
operator|delete
name|next
expr_stmt|;
block|}
block|}
block|}
struct|;
try|try
block|{
name|Oops
name|oops
argument_list|(
literal|5
argument_list|)
decl_stmt|;
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
parameter_list|)
block|{}
block|}
end_function
begin_class
DECL|class|CTestRef
class|class
name|CTestRef
super|:
specifier|public
name|CBase
block|{
public|public:
DECL|function|CTestRef
name|CTestRef
parameter_list|(
name|int
modifier|&
name|aX
parameter_list|)
member_init_list|:
name|iX
argument_list|(
name|aX
argument_list|)
block|{
name|iX
operator|++
expr_stmt|;
block|}
DECL|function|~CTestRef
name|~
name|CTestRef
parameter_list|()
block|{
name|iX
operator|--
expr_stmt|;
block|}
DECL|member|iX
name|int
modifier|&
name|iX
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|testScopedPointer
name|void
name|tst_qmainexceptions
operator|::
name|testScopedPointer
parameter_list|()
block|{
name|int
name|x
init|=
literal|0
decl_stmt|;
block|{
name|QScopedPointer
argument_list|<
name|CTestRef
argument_list|>
name|ptr
argument_list|(
name|q_check_ptr
argument_list|(
operator|new
name|CTestRef
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|QScopedPointer
argument_list|<
name|CTestRef
argument_list|>
name|ptr
argument_list|(
name|q_check_ptr
argument_list|(
operator|new
name|CTestRef
argument_list|(
name|x
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|1
argument_list|)
expr_stmt|;
throw|throw
literal|1
throw|;
block|}
catch|catch
parameter_list|(
name|int
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|x
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|dtorFired
name|int
name|dtorFired
index|[
literal|20
index|]
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|recDtor
name|int
modifier|*
name|recDtor
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|CDtorOrder
class|class
name|CDtorOrder
super|:
specifier|public
name|CBase
block|{
public|public:
DECL|function|CDtorOrder
name|CDtorOrder
parameter_list|(
name|TInt
name|aId
parameter_list|)
member_init_list|:
name|iId
argument_list|(
name|aId
argument_list|)
block|{}
DECL|function|~CDtorOrder
name|~
name|CDtorOrder
parameter_list|()
block|{
operator|*
operator|(
name|recDtor
operator|++
operator|)
operator|=
name|iId
expr_stmt|;
block|}
DECL|member|iId
name|TInt
name|iId
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QDtorOrder
class|class
name|QDtorOrder
block|{
public|public:
DECL|function|QDtorOrder
name|QDtorOrder
parameter_list|(
name|int
name|aId
parameter_list|)
member_init_list|:
name|iId
argument_list|(
name|aId
argument_list|)
block|{}
DECL|function|~QDtorOrder
name|~
name|QDtorOrder
parameter_list|()
block|{
operator|*
operator|(
name|recDtor
operator|++
operator|)
operator|=
name|iId
expr_stmt|;
block|}
DECL|member|iId
name|int
name|iId
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|RDtorOrder
class|class
name|RDtorOrder
super|:
specifier|public
name|RHandleBase
block|{
public|public:
DECL|function|Connect
name|TInt
name|Connect
parameter_list|(
name|TInt
name|aId
parameter_list|)
block|{
name|iId
operator|=
name|aId
expr_stmt|;
name|SetHandle
argument_list|(
name|aId
argument_list|)
expr_stmt|;
return|return
name|KErrNone
return|;
block|}
DECL|function|Close
name|void
name|Close
parameter_list|()
block|{
operator|*
operator|(
name|recDtor
operator|++
operator|)
operator|=
name|iId
expr_stmt|;
block|}
DECL|member|iId
name|TInt
name|iId
decl_stmt|;
block|}
class|;
end_class
begin_enum
DECL|enum|THybridAction
DECL|enumerator|EHybridLeave
DECL|enumerator|EHybridThrow
DECL|enumerator|EHybridPass
enum|enum
name|THybridAction
block|{
name|EHybridLeave
block|,
name|EHybridThrow
block|,
name|EHybridPass
block|}
enum|;
end_enum
begin_function
DECL|function|HybridFuncLX
name|void
name|HybridFuncLX
parameter_list|(
name|THybridAction
name|aAction
parameter_list|)
block|{
name|recDtor
operator|=
name|dtorFired
expr_stmt|;
name|QDtorOrder
name|q1
argument_list|(
literal|1
argument_list|)
decl_stmt|;
block|{
name|QDtorOrder
name|q2
argument_list|(
literal|2
argument_list|)
decl_stmt|;
block|}
name|CDtorOrder
modifier|*
name|c1
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CDtorOrder
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|c1
argument_list|)
expr_stmt|;
block|{
name|LManagedHandle
argument_list|<
name|RDtorOrder
argument_list|>
name|r1
decl_stmt|;
name|r1
operator|->
name|Connect
argument_list|(
literal|21
argument_list|)
name|OR_LEAVE
expr_stmt|;
block|}
name|CDtorOrder
modifier|*
name|c2
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CDtorOrder
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|QDtorOrder
name|q3
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LManagedHandle
argument_list|<
name|RDtorOrder
argument_list|>
name|r2
decl_stmt|;
name|r2
operator|->
name|Connect
argument_list|(
literal|22
argument_list|)
name|OR_LEAVE
expr_stmt|;
name|CDtorOrder
modifier|*
name|c3
init|=
operator|new
operator|(
name|ELeave
operator|)
name|CDtorOrder
argument_list|(
literal|13
argument_list|)
decl_stmt|;
name|CleanupStack
operator|::
name|PushL
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|QDtorOrder
name|q4
argument_list|(
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|aAction
condition|)
block|{
case|case
name|EHybridLeave
case|:
name|User
operator|::
name|Leave
argument_list|(
name|KErrNotFound
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHybridThrow
case|:
throw|throw
name|std
operator|::
name|bad_alloc
argument_list|()
throw|;
break|break;
default|default:
break|break;
block|}
name|CleanupStack
operator|::
name|PopAndDestroy
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testHybrid
name|void
name|tst_qmainexceptions
operator|::
name|testHybrid
parameter_list|()
block|{
name|TRAPD
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING(             HybridFuncLX(EHybridLeave);         )
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
name|error
argument_list|,
name|KErrNotFound
argument_list|)
expr_stmt|;
name|int
name|expected1
index|[]
init|=
block|{
literal|2
block|,
literal|21
block|,
literal|13
block|,
literal|12
block|,
literal|11
block|,
literal|4
block|,
literal|22
block|,
literal|3
block|,
literal|1
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|expected1
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|recDtor
operator|-
name|dtorFired
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|expected1
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|expected1
index|[
name|i
index|]
argument_list|,
name|dtorFired
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TRAP
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING(             HybridFuncLX(EHybridThrow);         )
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
name|error
argument_list|,
name|KErrNoMemory
argument_list|)
expr_stmt|;
name|int
name|expected2
index|[]
init|=
block|{
literal|2
block|,
literal|21
block|,
literal|13
block|,
literal|4
block|,
literal|22
block|,
literal|3
block|,
literal|1
block|,
literal|12
block|,
literal|11
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|expected2
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|recDtor
operator|-
name|dtorFired
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|expected2
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|expected2
index|[
name|i
index|]
argument_list|,
name|dtorFired
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|TRAP
argument_list|(
argument|error
argument_list|,
argument|QT_TRYCATCH_LEAVING(             HybridFuncLX(EHybridPass);         )
argument_list|)
empty_stmt|;
name|QCOMPARE
argument_list|(
name|error
argument_list|,
name|KErrNone
argument_list|)
expr_stmt|;
name|int
name|expected3
index|[]
init|=
block|{
literal|2
block|,
literal|21
block|,
literal|13
block|,
literal|12
block|,
literal|11
block|,
literal|4
block|,
literal|22
block|,
literal|3
block|,
literal|1
block|}
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|expected3
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|int
argument_list|(
name|recDtor
operator|-
name|dtorFired
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|expected3
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
name|QCOMPARE
argument_list|(
name|expected3
index|[
name|i
index|]
argument_list|,
name|dtorFired
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qmainexceptions
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmainexceptions.moc"
end_include
begin_else
else|#
directive|else
end_else
begin_macro
name|QTEST_NOOP_MAIN
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
