begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtSql/QtSql>
end_include
begin_include
include|#
directive|include
file|"../qsqldatabase/tst_databases.h"
end_include
begin_decl_stmt
specifier|const
name|QString
name|qtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|QSqlDatabase
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QSqlQuery
class|class
name|tst_QSqlQuery
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSqlQuery
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSqlQuery
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
DECL|function|value_data
name|void
name|value_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|value
parameter_list|()
function_decl|;
DECL|function|isValid_data
name|void
name|isValid_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|isValid
parameter_list|()
function_decl|;
DECL|function|isActive_data
name|void
name|isActive_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|isActive
parameter_list|()
function_decl|;
DECL|function|isSelect_data
name|void
name|isSelect_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|isSelect
parameter_list|()
function_decl|;
DECL|function|numRowsAffected_data
name|void
name|numRowsAffected_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|numRowsAffected
parameter_list|()
function_decl|;
DECL|function|size_data
name|void
name|size_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|size
parameter_list|()
function_decl|;
DECL|function|isNull_data
name|void
name|isNull_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|isNull
parameter_list|()
function_decl|;
DECL|function|query_exec_data
name|void
name|query_exec_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|query_exec
parameter_list|()
function_decl|;
DECL|function|execErrorRecovery_data
name|void
name|execErrorRecovery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|execErrorRecovery
parameter_list|()
function_decl|;
DECL|function|first_data
name|void
name|first_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|first
parameter_list|()
function_decl|;
DECL|function|next_data
name|void
name|next_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|next
parameter_list|()
function_decl|;
DECL|function|prev_data
name|void
name|prev_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|prev
parameter_list|()
function_decl|;
DECL|function|last_data
name|void
name|last_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|last
parameter_list|()
function_decl|;
DECL|function|seek_data
name|void
name|seek_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|seek
parameter_list|()
function_decl|;
DECL|function|transaction_data
name|void
name|transaction_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|transaction
parameter_list|()
function_decl|;
DECL|function|record_data
name|void
name|record_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|record
parameter_list|()
function_decl|;
DECL|function|record_sqlite_data
name|void
name|record_sqlite_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|record_sqlite
parameter_list|()
function_decl|;
DECL|function|finish_data
name|void
name|finish_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|finish
parameter_list|()
function_decl|;
DECL|function|sqlite_finish_data
name|void
name|sqlite_finish_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|sqlite_finish
parameter_list|()
function_decl|;
DECL|function|nextResult_data
name|void
name|nextResult_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|nextResult
parameter_list|()
function_decl|;
comment|// forwardOnly mode need special treatment
DECL|function|forwardOnly_data
name|void
name|forwardOnly_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|forwardOnly
parameter_list|()
function_decl|;
comment|// bug specific tests
DECL|function|tds_bitField_data
name|void
name|tds_bitField_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QTDS"
argument_list|)
expr_stmt|;
block|}
name|void
name|tds_bitField
parameter_list|()
function_decl|;
DECL|function|oci_nullBlob_data
name|void
name|oci_nullBlob_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_nullBlob
parameter_list|()
function_decl|;
DECL|function|blob_data
name|void
name|blob_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|blob
parameter_list|()
function_decl|;
DECL|function|oci_rawField_data
name|void
name|oci_rawField_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_rawField
parameter_list|()
function_decl|;
DECL|function|precision_data
name|void
name|precision_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|precision
parameter_list|()
function_decl|;
DECL|function|nullResult_data
name|void
name|nullResult_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|nullResult
parameter_list|()
function_decl|;
DECL|function|joins_data
name|void
name|joins_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|joins
parameter_list|()
function_decl|;
DECL|function|outValues_data
name|void
name|outValues_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|outValues
parameter_list|()
function_decl|;
DECL|function|char1Select_data
name|void
name|char1Select_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|char1Select
parameter_list|()
function_decl|;
DECL|function|char1SelectUnicode_data
name|void
name|char1SelectUnicode_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|char1SelectUnicode
parameter_list|()
function_decl|;
DECL|function|synonyms_data
name|void
name|synonyms_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|synonyms
parameter_list|()
function_decl|;
DECL|function|oraOutValues_data
name|void
name|oraOutValues_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oraOutValues
parameter_list|()
function_decl|;
DECL|function|mysql_outValues_data
name|void
name|mysql_outValues_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|mysql_outValues
parameter_list|()
function_decl|;
DECL|function|oraClob_data
name|void
name|oraClob_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oraClob
parameter_list|()
function_decl|;
DECL|function|oraLong_data
name|void
name|oraLong_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oraLong
parameter_list|()
function_decl|;
DECL|function|oraOCINumber_data
name|void
name|oraOCINumber_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oraOCINumber
parameter_list|()
function_decl|;
DECL|function|outValuesDB2_data
name|void
name|outValuesDB2_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QDB2"
argument_list|)
expr_stmt|;
block|}
name|void
name|outValuesDB2
parameter_list|()
function_decl|;
DECL|function|storedProceduresIBase_data
name|void
name|storedProceduresIBase_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|storedProceduresIBase
parameter_list|()
function_decl|;
DECL|function|oraRowId_data
name|void
name|oraRowId_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oraRowId
parameter_list|()
function_decl|;
DECL|function|prepare_bind_exec_data
name|void
name|prepare_bind_exec_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|prepare_bind_exec
parameter_list|()
function_decl|;
DECL|function|prepared_select_data
name|void
name|prepared_select_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|prepared_select
parameter_list|()
function_decl|;
DECL|function|sqlServerLongStrings_data
name|void
name|sqlServerLongStrings_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|sqlServerLongStrings
parameter_list|()
function_decl|;
DECL|function|invalidQuery_data
name|void
name|invalidQuery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|invalidQuery
parameter_list|()
function_decl|;
DECL|function|batchExec_data
name|void
name|batchExec_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|batchExec
parameter_list|()
function_decl|;
DECL|function|oraArrayBind_data
name|void
name|oraArrayBind_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|oraArrayBind
parameter_list|()
function_decl|;
DECL|function|lastInsertId_data
name|void
name|lastInsertId_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|lastInsertId
parameter_list|()
function_decl|;
DECL|function|lastQuery_data
name|void
name|lastQuery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|lastQuery
parameter_list|()
function_decl|;
DECL|function|bindBool_data
name|void
name|bindBool_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|bindBool
parameter_list|()
function_decl|;
DECL|function|psql_bindWithDoubleColonCastOperator_data
name|void
name|psql_bindWithDoubleColonCastOperator_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|psql_bindWithDoubleColonCastOperator
parameter_list|()
function_decl|;
DECL|function|queryOnInvalidDatabase_data
name|void
name|queryOnInvalidDatabase_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|queryOnInvalidDatabase
parameter_list|()
function_decl|;
DECL|function|createQueryOnClosedDatabase_data
name|void
name|createQueryOnClosedDatabase_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|createQueryOnClosedDatabase
parameter_list|()
function_decl|;
DECL|function|seekForwardOnlyQuery_data
name|void
name|seekForwardOnlyQuery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|seekForwardOnlyQuery
parameter_list|()
function_decl|;
DECL|function|reExecutePreparedForwardOnlyQuery_data
name|void
name|reExecutePreparedForwardOnlyQuery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|reExecutePreparedForwardOnlyQuery
parameter_list|()
function_decl|;
DECL|function|blobsPreparedQuery_data
name|void
name|blobsPreparedQuery_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|blobsPreparedQuery
parameter_list|()
function_decl|;
DECL|function|emptyTableNavigate_data
name|void
name|emptyTableNavigate_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|emptyTableNavigate
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|NOT_READY_YET
name|void
name|task_229811
parameter_list|()
function_decl|;
DECL|function|task_229811_data
name|void
name|task_229811_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
DECL|function|task_234422_data
name|void
name|task_234422_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|task_234422
parameter_list|()
function_decl|;
endif|#
directive|endif
DECL|function|task_217003_data
name|void
name|task_217003_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|task_217003
parameter_list|()
function_decl|;
DECL|function|task_250026_data
name|void
name|task_250026_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|task_250026
parameter_list|()
function_decl|;
DECL|function|task_205701_data
name|void
name|task_205701_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|task_205701
parameter_list|()
function_decl|;
DECL|function|task_233829_data
name|void
name|task_233829_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|task_233829
parameter_list|()
function_decl|;
DECL|function|sqlServerReturn0_data
name|void
name|sqlServerReturn0_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|sqlServerReturn0
parameter_list|()
function_decl|;
DECL|function|QTBUG_551_data
name|void
name|QTBUG_551_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_551
parameter_list|()
function_decl|;
DECL|function|QTBUG_5251_data
name|void
name|QTBUG_5251_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_5251
parameter_list|()
function_decl|;
DECL|function|QTBUG_6421_data
name|void
name|QTBUG_6421_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_6421
parameter_list|()
function_decl|;
DECL|function|QTBUG_6618_data
name|void
name|QTBUG_6618_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_6618
parameter_list|()
function_decl|;
DECL|function|QTBUG_6852_data
name|void
name|QTBUG_6852_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_6852
parameter_list|()
function_decl|;
DECL|function|QTBUG_5765_data
name|void
name|QTBUG_5765_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_5765
parameter_list|()
function_decl|;
DECL|function|QTBUG_12186_data
name|void
name|QTBUG_12186_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_12186
parameter_list|()
function_decl|;
DECL|function|QTBUG_14132_data
name|void
name|QTBUG_14132_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_14132
parameter_list|()
function_decl|;
DECL|function|QTBUG_18435_data
name|void
name|QTBUG_18435_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_18435
parameter_list|()
function_decl|;
DECL|function|QTBUG_21884_data
name|void
name|QTBUG_21884_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_21884
parameter_list|()
function_decl|;
DECL|function|QTBUG_16967_data
name|void
name|QTBUG_16967_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_16967
parameter_list|()
function_decl|;
comment|//clean close
DECL|function|QTBUG_23895_data
name|void
name|QTBUG_23895_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_23895
parameter_list|()
function_decl|;
comment|//sqlite boolean type
DECL|function|QTBUG_14904_data
name|void
name|QTBUG_14904_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|QTBUG_14904
parameter_list|()
function_decl|;
DECL|function|QTBUG_2192_data
name|void
name|QTBUG_2192_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|QTBUG_2192
parameter_list|()
function_decl|;
DECL|function|sqlite_constraint_data
name|void
name|sqlite_constraint_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|sqlite_constraint
parameter_list|()
function_decl|;
DECL|function|sqlite_real_data
name|void
name|sqlite_real_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|sqlite_real
parameter_list|()
function_decl|;
DECL|function|aggregateFunctionTypes_data
name|void
name|aggregateFunctionTypes_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|aggregateFunctionTypes
parameter_list|()
function_decl|;
private|private:
comment|// returns all database connections
name|void
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|void
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
DECL|member|dbs
name|tst_Databases
name|dbs
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QSqlQuery
name|tst_QSqlQuery
operator|::
name|tst_QSqlQuery
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QSqlQuery
name|tst_QSqlQuery
operator|::
name|~
name|tst_QSqlQuery
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QSqlQuery
operator|::
name|initTestCase
parameter_list|()
block|{
name|dbs
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|//in case of leftovers
name|createTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QSqlQuery
operator|::
name|cleanupTestCase
parameter_list|()
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|dbs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSqlQuery
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSqlQuery
operator|::
name|cleanup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"numRowsAffected"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"transactions"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"size"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"isActive"
argument_list|)
operator|||
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"lastInsertId"
argument_list|)
condition|)
block|{
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QTest
operator|::
name|currentTestFailed
argument_list|()
operator|&&
operator|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
operator|)
condition|)
block|{
comment|//since Oracle ODBC totally craps out on error, we init again
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generic_data
name|void
name|tst_QSqlQuery
operator|::
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
parameter_list|)
block|{
if|if
condition|(
name|dbs
operator|.
name|fillTestTable
argument_list|(
name|engine
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|engine
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"No database drivers are available in this Qt configuration"
argument_list|)
expr_stmt|;
else|else
name|QSKIP
argument_list|(
operator|(
name|QString
argument_list|(
literal|"No database drivers of type %1 are available in this Qt configuration"
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
argument_list|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dropTestTables
name|void
name|tst_QSqlQuery
operator|::
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QStringList
name|tablenames
decl_stmt|;
comment|// drop all the table in case a testcase failed
name|tablenames
operator|<<
name|qtest
operator|<<
name|qTableName
argument_list|(
literal|"qtest_null"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_blob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_bittest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_nullblob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_rawtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_precision"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_prepare"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtestj1"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtestj2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"char1Select"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"char1SU"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qxmltest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_exerr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_empty"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"clobby"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bindtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"more_results"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"blobstest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"oraRowId"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_batch"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug6421"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|<<
name|qTableName
argument_list|(
literal|"bug5765"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug6852"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug21884"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug23895"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_lockedtable"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"Planet"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"task_250026"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"task_234422"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"test141895"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_oraOCINumber"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug2192"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|tablenames
operator|<<
name|qTableName
argument_list|(
literal|"task_233829"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
name|tablenames
operator|<<
name|qTableName
argument_list|(
literal|"record_sqlite"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
name|tablenames
operator|<<
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|db
operator|.
name|exec
argument_list|(
literal|"DROP PROCEDURE "
operator|+
name|qTableName
argument_list|(
literal|"test141895_proc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|db
operator|.
name|exec
argument_list|(
literal|"DROP PROCEDURE IF EXISTS "
operator|+
name|qTableName
argument_list|(
literal|"bug6852_proc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|tst_Databases
operator|::
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|tablenames
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP PACKAGE "
operator|+
name|qTableName
argument_list|(
literal|"pkg"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createTestTables
name|void
name|tst_QSqlQuery
operator|::
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
comment|// ### stupid workaround until we find a way to hardcode this
comment|// in the MySQL server startup script
name|q
operator|.
name|exec
argument_list|(
literal|"set table_type=innodb"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest
operator|+
literal|" (id serial NOT NULL, t_varchar varchar(20), t_char char(20), primary key(id)) WITH OIDS"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest
operator|+
literal|" (id int "
operator|+
name|tst_Databases
operator|::
name|autoFieldName
argument_list|(
name|db
argument_list|)
operator|+
literal|" NOT NULL, t_varchar varchar(20), t_char char(20), primary key(id))"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest_null"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int null, t_varchar varchar(20) null)"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest_null"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int, t_varchar varchar(20))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|populateTestTables
name|void
name|tst_QSqlQuery
operator|::
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|qtest_null
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_null"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qtest
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (1, 'VarChar1', 'Char1')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (2, 'VarChar2', 'Char2')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (3, 'VarChar3', 'Char3')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (4, 'VarChar4', 'Char4')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (5, 'VarChar5', 'Char5')"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qtest_null
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_null
operator|+
literal|" values (0, NULL)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_null
operator|+
literal|" values (1, 'n')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_null
operator|+
literal|" values (2, 'i')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_null
operator|+
literal|" values (3, NULL)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// There were problems with char fields of size 1
end_comment
begin_function
DECL|function|char1Select
name|void
name|tst_QSqlQuery
operator|::
name|char1Select
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tbl
init|=
name|qTableName
argument_list|(
literal|"char1Select"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|tbl
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tbl
operator|+
literal|" (id char(1))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|tbl
operator|+
literal|" values ('a')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|left
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|char1SelectUnicode
name|void
name|tst_QSqlQuery
operator|::
name|char1SelectUnicode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
name|QSKIP
argument_list|(
literal|"Needs someone with more Unicode knowledge than I have to fix"
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Unicode
argument_list|)
condition|)
block|{
name|QString
name|uniStr
argument_list|(
name|QChar
argument_list|(
literal|0x0915
argument_list|)
argument_list|)
decl_stmt|;
comment|// DEVANAGARI LETTER KA
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|&&
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 5.0"
argument_list|)
expr_stmt|;
name|QString
name|createQuery
decl_stmt|;
specifier|const
name|QString
name|char1SelectUnicode
argument_list|(
name|qTableName
argument_list|(
literal|"char1SU"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|char1SelectUnicode
operator|+
literal|"(id nchar(1))"
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|char1SelectUnicode
operator|+
literal|" (id char(3))"
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|char1SelectUnicode
operator|+
literal|" (id char(1) character set unicode_fss)"
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|char1SelectUnicode
operator|+
literal|" (id char(1)) "
literal|"default character set 'utf8'"
expr_stmt|;
else|else
name|createQuery
operator|=
literal|"create table "
operator|+
name|char1SelectUnicode
operator|+
literal|" (id char(1))"
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|createQuery
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|char1SelectUnicode
operator|+
literal|" values(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|uniStr
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|char1SelectUnicode
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
argument_list|,
name|uniStr
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|uniStr
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|QSKIP
argument_list|(
literal|"Database not unicode capable"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oraRowId
name|void
name|tst_QSqlQuery
operator|::
name|oraRowId
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|oraRowId
argument_list|(
name|qTableName
argument_list|(
literal|"oraRowId"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select rowid from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|oraRowId
operator|+
literal|" (id char(1))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|oraRowId
operator|+
literal|" values('a')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|v1
init|=
name|q
operator|.
name|lastInsertId
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|v1
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|oraRowId
operator|+
literal|" values('b')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|v2
init|=
name|q
operator|.
name|lastInsertId
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|v2
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select * from "
operator|+
name|oraRowId
operator|+
literal|" where rowid = ?"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|v1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|v2
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mysql_outValues
name|void
name|tst_QSqlQuery
operator|::
name|mysql_outValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 5.0"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|hello
argument_list|(
name|qTableName
argument_list|(
literal|"hello"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|qtestproc
argument_list|(
name|qTableName
argument_list|(
literal|"qtestproc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop function "
operator|+
name|hello
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create function "
operator|+
name|hello
operator|+
literal|" (s char(20)) returns varchar(50) READS SQL DATA return concat('Hello ', s)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select "
operator|+
name|hello
operator|+
literal|"('world')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select "
operator|+
name|hello
operator|+
literal|"('harald')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello harald"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"drop function "
operator|+
name|hello
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qtestproc
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create procedure "
operator|+
name|qtestproc
operator|+
literal|" () "
literal|"BEGIN select * from "
operator|+
name|qtest
operator|+
literal|" order by id; END"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"call "
operator|+
name|qtestproc
operator|+
literal|"()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"VarChar1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qtestproc
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create procedure "
operator|+
name|qtestproc
operator|+
literal|" (OUT param1 INT) "
literal|"BEGIN set param1 = 42; END"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"call "
operator|+
name|qtestproc
operator|+
literal|" (@out)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select @out"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"@out"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qtestproc
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bindBool
name|void
name|tst_QSqlQuery
operator|::
name|bindBool
parameter_list|()
block|{
comment|// QTBUG-27763: bool value got converted to int 127 by mysql driver because sizeof(bool)< sizeof(int).
comment|// The problem was the way the bool value from the application was handled. For our purposes here, it
comment|// doesn't matter whether the column type is BOOLEAN or INT. All DBMSs have INT, and this usually
comment|// works for this test. Postresql is an exception because its INT type does not accept BOOLEAN
comment|// values and its BOOLEAN columns do not accept INT values.
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bindBool"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|QString
name|colType
init|=
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|?
name|QLatin1String
argument_list|(
literal|"BOOLEAN"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"INT"
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id INT, flag "
operator|+
name|colType
operator|+
literal|" NOT NULL, PRIMARY KEY(id))"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|flag
init|=
name|i
decl_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id, flag) VALUES(:id, :flag)"
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":flag"
argument_list|,
name|flag
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT id, flag FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|flag
init|=
name|i
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oraOutValues
name|void
name|tst_QSqlQuery
operator|::
name|oraOutValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tst_outValues
argument_list|(
name|qTableName
argument_list|(
literal|"tst_outValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Test requires prepared query support"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/*** outvalue int ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x out int) is\n"
literal|"begin\n"
literal|"    x := 42;\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|0
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// bind a null value, make sure the OCI driver resets the null flag
name|q
operator|.
name|addBindValue
argument_list|(
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|/*** outvalue varchar ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x out varchar) is\n"
literal|"begin\n"
literal|"    x := 'blah';\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s1
argument_list|(
literal|"12345"
argument_list|)
decl_stmt|;
name|s1
operator|.
name|reserve
argument_list|(
literal|512
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|s1
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*** in/outvalue numeric ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x in out numeric) is\n"
literal|"begin\n"
literal|"    x := x + 10;\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|10
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|/*** in/outvalue varchar ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x in out varchar) is\n"
literal|"begin\n"
literal|"    x := 'homer';\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QString
argument_list|(
literal|"maggy"
argument_list|)
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"homer"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*** in/outvalue varchar ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x in out varchar) is\n"
literal|"begin\n"
literal|"    x := NULL;\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QString
argument_list|(
literal|"maggy"
argument_list|)
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|/*** in/outvalue int ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x in out int) is\n"
literal|"begin\n"
literal|"    x := NULL;\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|42
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|/*** in/outvalue varchar ***/
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x in varchar, y out varchar) is\n"
literal|"begin\n"
literal|"    y := x||'bubulalakikikokololo';\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QString
argument_list|(
literal|"fifi"
argument_list|)
argument_list|,
name|QSql
operator|::
name|In
argument_list|)
expr_stmt|;
name|QString
name|out
decl_stmt|;
name|out
operator|.
name|reserve
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|out
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"fifibubulalakikikokololo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oraClob
name|void
name|tst_QSqlQuery
operator|::
name|oraClob
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|clobby
argument_list|(
name|qTableName
argument_list|(
literal|"clobby"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// simple short string
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|clobby
operator|+
literal|"(id int primary key, cl clob, bl blob)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|clobby
operator|+
literal|" (id, cl, bl) values(?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|"bubu"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QByteArray
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select bl, cl from "
operator|+
name|clobby
operator|+
literal|" where id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
comment|// simple short string with binding
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|clobby
operator|+
literal|" (id, cl, bl) values(?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|"lala"
argument_list|,
name|QSql
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QByteArray
argument_list|(
literal|"lala"
argument_list|)
argument_list|,
name|QSql
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select bl, cl from "
operator|+
name|clobby
operator|+
literal|" where id = 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"lala"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"lala"
argument_list|)
argument_list|)
expr_stmt|;
comment|// loooong string
name|QString
name|loong
decl_stmt|;
name|loong
operator|.
name|fill
argument_list|(
name|QLatin1Char
argument_list|(
literal|'A'
argument_list|)
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|clobby
operator|+
literal|" (id, cl, bl) values(?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|loong
argument_list|,
name|QSql
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|loong
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|QSql
operator|::
name|Binary
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select bl, cl from "
operator|+
name|clobby
operator|+
literal|" where id = 3"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|loong
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
name|loong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
name|loong
operator|.
name|toLatin1
argument_list|()
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|==
name|loong
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storedProceduresIBase
name|void
name|tst_QSqlQuery
operator|::
name|storedProceduresIBase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qTableName
argument_list|(
literal|"TESTPROC"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create procedure "
operator|+
name|qTableName
argument_list|(
literal|"TESTPROC"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" RETURNS (x integer, y varchar(20)) "
literal|"AS BEGIN "
literal|"  x = 42; "
literal|"  y = 'Hello Anders'; "
literal|"END"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"execute procedure "
operator|+
name|qTableName
argument_list|(
literal|"TestProc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for a valid result set
name|QSqlRecord
name|rec
init|=
name|q
operator|.
name|record
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the first next shall suceed
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Hello Anders"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the second next shall fail
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qTableName
argument_list|(
literal|"TestProc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outValuesDB2
name|void
name|tst_QSqlQuery
operator|::
name|outValuesDB2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Test requires prepared query support"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qTableName
argument_list|(
literal|"tst_outValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
comment|//non-fatal
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|qTableName
argument_list|(
literal|"tst_outValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (OUT x int, OUT x2 double, OUT x3 char(20))\n"
literal|"LANGUAGE SQL\n"
literal|"P1: BEGIN\n"
literal|" SET x = 42;\n"
literal|" SET x2 = 4.2;\n"
literal|" SET x3 = 'Homer';\n"
literal|"END P1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"call "
operator|+
name|qTableName
argument_list|(
literal|"tst_outValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|0
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|0.0
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|"Simpson"
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|4.2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Homer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outValues
name|void
name|tst_QSqlQuery
operator|::
name|outValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tst_outValues
argument_list|(
name|qTableName
argument_list|(
literal|"tst_outValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Test requires prepared query support"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create or replace procedure "
operator|+
name|tst_outValues
operator|+
literal|"(x out int) is\n"
literal|"begin\n"
literal|"    x := 42;\n"
literal|"end;\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
block|{
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|tst_outValues
argument_list|)
expr_stmt|;
comment|//non-fatal
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|tst_outValues
operator|+
literal|" (OUT x int)\n"
literal|"LANGUAGE SQL\n"
literal|"P1: BEGIN\n"
literal|" SET x = 42;\n"
literal|"END P1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"call "
operator|+
name|tst_outValues
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
block|{
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|tst_outValues
argument_list|)
expr_stmt|;
comment|//non-fatal
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create procedure "
operator|+
name|tst_outValues
operator|+
literal|" (@x int out) as\n"
literal|"begin\n"
literal|"    set @x = 42\n"
literal|"end\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"{call "
operator|+
name|tst_outValues
operator|+
literal|"(?)}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|QSKIP
argument_list|(
literal|"Don't know how to create a stored procedure for this database server, please fix this test"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|0
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blob
name|void
name|tst_QSqlQuery
operator|::
name|blob
parameter_list|()
block|{
specifier|static
specifier|const
name|int
name|BLOBSIZE
init|=
literal|1024
operator|*
literal|10
decl_stmt|;
specifier|static
specifier|const
name|int
name|BLOBCOUNT
init|=
literal|2
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BLOB
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS not BLOB capable"
argument_list|)
expr_stmt|;
comment|//don' make it too big otherwise sybase and mysql will complain
name|QByteArray
name|ba
argument_list|(
name|BLOBSIZE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ba
index|[
name|i
index|]
operator|=
name|i
operator|%
literal|256
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QString
name|queryString
init|=
name|QString
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest_blob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int not null primary key, t_blob %1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tst_Databases
operator|::
name|blobTypeName
argument_list|(
name|db
argument_list|,
name|BLOBSIZE
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|queryString
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"qtest_blob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id, t_blob) values (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BLOBCOUNT
condition|;
operator|++
name|i
control|)
block|{
name|q
operator|.
name|addBindValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|ba
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest_blob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|BLOBCOUNT
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|res
init|=
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|res
operator|.
name|size
argument_list|()
operator|>=
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"array sizes differ, expected %1, got %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|res
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i2
init|=
literal|0
init|;
name|i2
operator|<
operator|(
name|int
operator|)
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i2
control|)
block|{
if|if
condition|(
name|res
index|[
name|i2
index|]
operator|!=
name|ba
index|[
name|i2
index|]
condition|)
name|QFAIL
argument_list|(
name|QString
argument_list|(
literal|"ByteArrays differ at position %1, expected %2, got %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|i2
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
operator|(
name|unsigned
name|char
operator|)
name|ba
index|[
name|i2
index|]
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|int
operator|)
operator|(
name|unsigned
name|char
operator|)
name|res
index|[
name|i2
index|]
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|value
name|void
name|tst_QSqlQuery
operator|::
name|value
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id, t_varchar, t_char from "
operator|+
name|qtest
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"VarChar"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|==
literal|" "
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
literal|"VarChar"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
literal|"            "
operator|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
literal|"VarChar"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Char"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
literal|" "
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
literal|"Char"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
literal|"Char"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
literal|"               "
operator|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|record
name|void
name|tst_QSqlQuery
operator|::
name|record
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id, t_varchar, t_char from "
operator|+
name|qtest
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"t_varchar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"t_char"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isValid
name|void
name|tst_QSqlQuery
operator|::
name|isValid
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isActive
name|void
name|tst_QSqlQuery
operator|::
name|isActive
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
comment|// Access is stupid enough to let you scroll over boundaries
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (41, 'VarChar41', 'Char41')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = 42 where id = 41"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qtest
operator|+
literal|" where id = 42"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qtest
operator|+
literal|" where id = 42"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|numRowsAffected
name|void
name|tst_QSqlQuery
operator|::
name|numRowsAffected
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|numRowsAffected
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|q
operator|.
name|numRowsAffected
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Database doesn't support numRowsAffected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|numRowsAffected
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|q
operator|.
name|numRowsAffected
argument_list|()
operator|!=
literal|0
operator|&&
name|q
operator|.
name|numRowsAffected
argument_list|()
operator|!=
name|i
condition|)
block|{
comment|// the value is undefined for SELECT, this check is just here for curiosity
name|qDebug
argument_list|(
literal|"Expected numRowsAffected to be -1, 0 or %d, got %d"
argument_list|,
name|i
argument_list|,
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = 100 where id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// yes, we check twice
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = id + 100"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// yes, we check twice
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = id + :newid"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":newid"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// yes, we check twice
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = id + :newid where NOT(1 = 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":newid"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// yes, we check twice
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (42000, 'homer', 'marge')"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// yes, we check twice
name|QSqlQuery
name|q2
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (42001, 'homer', 'marge')"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE2"
argument_list|)
condition|)
block|{
comment|// SQLite 2.x accumulates changed rows in nested queries. See task 33794
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// yes, we check twice
block|}
block|}
end_function
begin_function
DECL|function|size
name|void
name|tst_QSqlQuery
operator|::
name|size
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|QuerySize
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// yes, twice
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// yes, twice
block|}
name|QSqlQuery
name|q2
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|QuerySize
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|q2
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = 100 where id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// yes, twice
block|}
end_function
begin_function
DECL|function|isSelect
name|void
name|tst_QSqlQuery
operator|::
name|isSelect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"update "
operator|+
name|qtest
operator|+
literal|" set id = 1 where id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isSelect
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|first
name|void
name|tst_QSqlQuery
operator|::
name|first
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|next
name|void
name|tst_QSqlQuery
operator|::
name|next
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prev
name|void
name|tst_QSqlQuery
operator|::
name|prev
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|last
name|void
name|tst_QSqlQuery
operator|::
name|last
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|int
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|int
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|int
argument_list|>
name|validReturns
argument_list|(
name|QSet
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
operator|-
literal|1
operator|<<
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|validReturns
operator|.
name|contains
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q2
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q2
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|validReturns
operator|.
name|contains
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seek
name|void
name|tst_QSqlQuery
operator|::
name|seek
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"select id from %1 order by id"
argument_list|)
operator|.
name|arg
argument_list|(
name|qtest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// NB! The order of the calls below are important!
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|seek
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|int
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
operator|-
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seekForwardOnlyQuery
name|void
name|tst_QSqlQuery
operator|::
name|seekForwardOnlyQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"select id from %1 order by id"
argument_list|)
operator|.
name|arg
argument_list|(
name|qtest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
decl_stmt|;
comment|// NB! The order of the calls below are important!
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Make a jump!
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Last record in result set
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// tests the forward only mode;
end_comment
begin_function
DECL|function|forwardOnly
name|void
name|tst_QSqlQuery
operator|::
name|forwardOnly
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// lets make some mistakes to see how robust it is
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::seek: cannot seek backwards in a forward only query"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::seek: cannot seek backwards in a forward only query"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|previous
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|at
argument_list|()
operator|==
name|QSql
operator|::
name|AfterLastRow
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q2
init|=
name|q
decl_stmt|;
name|QVERIFY
argument_list|(
name|q2
operator|.
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q2
operator|.
name|isForwardOnly
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|int
argument_list|(
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::seek: cannot seek backwards in a forward only query"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::seek: cannot seek backwards in a forward only query"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
name|int
argument_list|(
name|QSql
operator|::
name|AfterLastRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|query_exec
name|void
name|tst_QSqlQuery
operator|::
name|query_exec
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNull
name|void
name|tst_QSqlQuery
operator|::
name|isNull
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id, t_varchar from "
operator|+
name|qTableName
argument_list|(
literal|"qtest_null"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|"t_varchar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|"t_varchar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// For a non existent field, it should be returning true.
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! TDS specific BIT field test */
end_comment
begin_function
DECL|function|tds_bitField
name|void
name|tst_QSqlQuery
operator|::
name|tds_bitField
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
init|=
name|qTableName
argument_list|(
literal|"qtest_bittest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (bitty bit)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" values (0)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" values (1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select bitty from "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*! Oracle specific NULL BLOB test */
end_comment
begin_function
DECL|function|oci_nullBlob
name|void
name|tst_QSqlQuery
operator|::
name|oci_nullBlob
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest_nullblob
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_nullblob"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_nullblob
operator|+
literal|" (id int primary key, bb blob)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_nullblob
operator|+
literal|" values (0, EMPTY_BLOB())"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_nullblob
operator|+
literal|" values (1, NULL)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_nullblob
operator|+
literal|" values (2, 'aabbcc00112233445566')"
argument_list|)
argument_list|)
expr_stmt|;
comment|// necessary otherwise oracle will bombard you with internal errors
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_nullblob
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* Oracle specific RAW field test */
end_comment
begin_function
DECL|function|oci_rawField
name|void
name|tst_QSqlQuery
operator|::
name|oci_rawField
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest_rawtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_rawtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_rawtest
operator|+
literal|" (id int, col raw(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_rawtest
operator|+
literal|" values (0, NULL)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_rawtest
operator|+
literal|" values (1, '00aa1100ddeeff')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select col from "
operator|+
name|qtest_rawtest
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isNull
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// test whether we can fetch values with more than DOUBLE precision
end_comment
begin_comment
comment|// note that MySQL's 3.x highest precision is that of a double, although
end_comment
begin_comment
comment|// you can define field with higher precision
end_comment
begin_function
DECL|function|precision
name|void
name|tst_QSqlQuery
operator|::
name|precision
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
name|QSKIP
argument_list|(
literal|"DB unable to store high precision"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest_precision
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_precision"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|precStr
init|=
literal|"1.2345678901234567891"
decl_stmt|;
block|{
comment|// need a new scope for SQLITE
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|qtest_precision
argument_list|)
expr_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_precision
operator|+
literal|" (col1 number)"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_precision
operator|+
literal|" (col1 numeric(21, 20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest_precision
operator|+
literal|" (col1) values (1.2345678901234567891)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_precision
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|val
init|=
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|startsWith
argument_list|(
literal|"1.2345678901234567891"
argument_list|)
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|precStr
index|[
name|i
index|]
operator|!=
literal|0
operator|&&
operator|*
operator|(
name|precStr
operator|+
name|i
operator|)
operator|==
name|val
index|[
name|i
index|]
operator|.
name|toLatin1
argument_list|()
condition|)
name|i
operator|++
expr_stmt|;
comment|// MySQL and TDS have crappy precisions by default
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
block|{
if|if
condition|(
name|i
operator|<
literal|17
condition|)
name|QWARN
argument_list|(
literal|"MySQL didn't return the right precision"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
condition|)
block|{
if|if
condition|(
name|i
operator|<
literal|18
condition|)
name|QWARN
argument_list|(
literal|"TDS didn't return the right precision"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QWARN
argument_list|(
name|QString
argument_list|(
name|tst_Databases
operator|::
name|dbToString
argument_list|(
name|db
argument_list|)
operator|+
literal|" didn't return the right precision ("
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
operator|+
literal|" out of 21), "
operator|+
name|val
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// SQLITE scope
block|}
end_function
begin_function
DECL|function|nullResult
name|void
name|tst_QSqlQuery
operator|::
name|nullResult
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" where id> 50000"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|QuerySize
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|last
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|previous
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|10
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// this test is just an experiment to see whether we can do query-based transactions
end_comment
begin_comment
comment|// the real transaction test is in tst_QSqlDatabase
end_comment
begin_function
DECL|function|transaction
name|void
name|tst_QSqlQuery
operator|::
name|transaction
parameter_list|()
block|{
comment|// query based transaction is not really possible with Qt
name|QSKIP
argument_list|(
literal|"only tested manually by trained staff"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Transactions
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS not transaction capable"
argument_list|)
expr_stmt|;
comment|// this is the standard SQL
name|QString
name|startTransactionStr
argument_list|(
literal|"start transaction"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|startTransactionStr
operator|=
literal|"begin work"
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q2
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// test a working transaction
name|q
operator|.
name|exec
argument_list|(
name|startTransactionStr
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into"
operator|+
name|qtest
operator|+
literal|" values (40, 'VarChar40', 'Char40')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 40"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"commit"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 40"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// test a rollback
name|q
operator|.
name|exec
argument_list|(
name|startTransactionStr
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into"
operator|+
name|qtest
operator|+
literal|" values (41, 'VarChar41', 'Char41')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 41"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"rollback"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
block|{
name|qDebug
argument_list|(
literal|"MySQL: %s"
argument_list|,
name|qPrintable
argument_list|(
name|tst_Databases
operator|::
name|printError
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSKIP
argument_list|(
literal|"MySQL transaction failed "
argument_list|)
expr_stmt|;
comment|//non-fatal
block|}
else|else
name|QFAIL
argument_list|(
literal|"Could not rollback transaction: "
operator|+
name|tst_Databases
operator|::
name|printError
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 41"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// test concurrent access
name|q
operator|.
name|exec
argument_list|(
name|startTransactionStr
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into"
operator|+
name|qtest
operator|+
literal|" values (42, 'VarChar42', 'Char42')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 42"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 42"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q2
operator|.
name|next
argument_list|()
condition|)
name|qDebug
argument_list|(
literal|"DBMS '%s' doesn't support query based transactions with concurrent access"
argument_list|,
name|qPrintable
argument_list|(
name|tst_Databases
operator|::
name|dbToString
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"commit"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"select * from"
operator|+
name|qtest
operator|+
literal|" where id = 42"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|joins
name|void
name|tst_QSqlQuery
operator|::
name|joins
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|qtestj1
argument_list|(
name|qTableName
argument_list|(
literal|"qtestj1"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|qtestj2
argument_list|(
name|qTableName
argument_list|(
literal|"qtestj2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
comment|// Oracle broken beyond recognition - cannot outer join on more than
comment|// one table.
name|QSKIP
argument_list|(
literal|"DBMS cannot understand standard SQL"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtestj1
operator|+
literal|" (id1 int, id2 int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtestj2
operator|+
literal|" (id int, name varchar(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtestj1
operator|+
literal|" values (1, 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtestj1
operator|+
literal|" values (1, 2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtestj2
operator|+
literal|" values(1, 'trenton')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtestj2
operator|+
literal|" values(2, 'marius')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select qtestj1.id1, qtestj1.id2, qtestj2.id, qtestj2.name, qtestj3.id, qtestj3.name "
literal|"from "
operator|+
name|qtestj1
operator|+
literal|" qtestj1 left outer join "
operator|+
name|qtestj2
operator|+
literal|" qtestj2 on (qtestj1.id1 = qtestj2.id) "
literal|"left outer join "
operator|+
name|qtestj2
operator|+
literal|" as qtestj3 on (qtestj1.id2 = qtestj3.id)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"trenton"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"trenton"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"trenton"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"marius"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|synonyms
name|void
name|tst_QSqlQuery
operator|::
name|synonyms
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select a.id, a.t_char, a.t_varchar from "
operator|+
name|qtest
operator|+
literal|" a where a.id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Char1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"VarChar1"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|q
operator|.
name|record
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"t_char"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"t_varchar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This class is used to test protected QSqlResult methods
end_comment
begin_class
DECL|class|ResultHelper
class|class
name|ResultHelper
super|:
specifier|public
name|QSqlResult
block|{
public|public:
DECL|function|ResultHelper
name|ResultHelper
parameter_list|()
member_init_list|:
name|QSqlResult
argument_list|(
literal|0
argument_list|)
block|{}
comment|// don't call, it's only for stupid compilers
DECL|function|execBatch
name|bool
name|execBatch
parameter_list|(
name|bool
name|bindArray
init|=
literal|false
parameter_list|)
block|{
return|return
name|QSqlResult
operator|::
name|execBatch
argument_list|(
name|bindArray
argument_list|)
return|;
block|}
DECL|function|boundValueName
name|QString
name|boundValueName
parameter_list|(
name|int
name|pos
parameter_list|)
specifier|const
block|{
return|return
name|QSqlResult
operator|::
name|boundValueName
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// It doesn't make sense to split this into several tests
end_comment
begin_function
DECL|function|prepare_bind_exec
name|void
name|tst_QSqlQuery
operator|::
name|prepare_bind_exec
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|qtest_prepare
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_prepare"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
operator|&&
operator|(
name|db
operator|.
name|databaseName
argument_list|()
operator|==
literal|"silence.nokia.troll.no:c:\\ibase\\testdb_ascii"
operator|||
name|db
operator|.
name|databaseName
argument_list|()
operator|==
literal|"/opt/interbase/qttest.gdb"
operator|)
condition|)
name|QSKIP
argument_list|(
literal|"Can't transliterate extended unicode to ascii"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
name|QSKIP
argument_list|(
literal|"Needs someone with more Unicode knowledge than I have to fix"
argument_list|)
expr_stmt|;
block|{
comment|// new scope for SQLITE
specifier|static
specifier|const
name|QString
name|utf8str
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"à¤à¤¾à¤à¤ à¤¶à¤à¥à¤¨à¥à¤®à¥à¤¯à¤¤à¥à¤¤à¥à¤®à¥ à¥¤ à¤¨à¥à¤ªà¤¹à¤¿à¤¨à¤¸à¥à¤¤à¤¿ à¤®à¤¾à¤®à¥ à¥¥"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QString
name|values
index|[
literal|6
index|]
init|=
block|{
literal|"Harry"
block|,
literal|"Trond"
block|,
literal|"Mark"
block|,
literal|"Ma?rk"
block|,
literal|"?"
block|,
literal|":id"
block|}
decl_stmt|;
name|bool
name|useUnicode
init|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Unicode
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|&&
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|useUnicode
operator|=
literal|false
expr_stmt|;
name|QString
name|createQuery
decl_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|qtest_prepare
operator|+
literal|" (id int primary key, name nvarchar(200) null, name2 nvarchar(200) null)"
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
operator|&&
name|useUnicode
condition|)
name|createQuery
operator|=
literal|"create table "
operator|+
name|qtest_prepare
operator|+
literal|" (id int not null primary key, name varchar(200) character set utf8, name2 varchar(200) character set utf8)"
expr_stmt|;
else|else
name|createQuery
operator|=
literal|"create table "
operator|+
name|qtest_prepare
operator|+
literal|" (id int not null primary key, name varchar(200), name2 varchar(200))"
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|qtest_prepare
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|createQuery
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name) values (:id, :name)"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|":name"
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|m
init|=
name|q
operator|.
name|boundValues
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|m
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
index|[
literal|":name"
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
index|[
literal|":id"
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|useUnicode
condition|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":name"
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qtest_prepare
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useUnicode
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name) values (:id, 'Bart')"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_prepare
operator|+
literal|" where id> 98 order by id"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|99
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bart"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*** SELECT stuff ***/
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"select * from "
operator|+
name|qtest_prepare
operator|+
literal|" where id = :id"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rInf
init|=
name|q
operator|.
name|record
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rInf
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rInf
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rInf
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"NAME"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"DELETE FROM "
operator|+
name|qtest_prepare
argument_list|)
argument_list|)
expr_stmt|;
comment|/*** Below we test QSqlQuery::boundValues() with position arguments.          *   Due to the fact that the name of a positional argument is not          *   specified by the Qt docs, we only test that the QMap contains          *   the correct values and that QSqlResult::boundValueName returns          *   the key that corrosponds to the correct value. ***/
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name) values (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|values
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|values
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|values
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Unicode
argument_list|)
condition|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|0
argument_list|)
index|]
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
operator|(
operator|(
name|ResultHelper
operator|*
operator|)
name|q
operator|.
name|result
argument_list|()
operator|)
operator|->
name|boundValueName
argument_list|(
literal|1
argument_list|)
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qtest_prepare
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isNull
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useUnicode
condition|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|utf8str
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name) values (?, 'Bart')"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_prepare
operator|+
literal|" where id> 98 order by id"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|99
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Bart"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* insert a duplicate id and make sure the db bails out */
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name) values (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|99
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|"something silly"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_prepare
operator|+
literal|" (id, name, name2) values (:id, :name, :name)"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|101
init|;
name|i
operator|<
literal|103
condition|;
operator|++
name|i
control|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":name"
argument_list|,
literal|"name"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test for QTBUG-6420
name|QVERIFY
argument_list|(
name|q
operator|.
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_prepare
operator|+
literal|" where id> 100 order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|101
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// end of SQLite scope
block|}
end_function
begin_function
DECL|function|prepared_select
name|void
name|tst_QSqlQuery
operator|::
name|prepared_select
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select a.id, a.t_char, a.t_varchar from "
operator|+
name|qtest
operator|+
literal|" a where a.id = ?"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select a.id, a.t_char, a.t_varchar from "
operator|+
name|qtest
operator|+
literal|" a where a.id = ?"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|at
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QSql
operator|::
name|BeforeFirstRow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlServerLongStrings
name|void
name|tst_QSqlQuery
operator|::
name|sqlServerLongStrings
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|QSKIP
argument_list|(
literal|"SQL Server specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int primary key, longstring ntext)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" VALUES (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|testStr
decl_stmt|;
name|testStr
operator|.
name|fill
argument_list|(
name|QLatin1Char
argument_list|(
literal|'a'
argument_list|)
argument_list|,
literal|85000
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|testStr
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"bubu"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|testStr
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidQuery
name|void
name|tst_QSqlQuery
operator|::
name|invalidQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"blahfasel"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|&&
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|DB2
operator|&&
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
block|{
comment|// oracle and db2 just prepares everything without complaining
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|prepare
argument_list|(
literal|"blahfasel"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|batchExec
name|void
name|tst_QSqlQuery
operator|::
name|batchExec
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BatchOperations
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Database can't do BatchOperations"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
init|=
name|qTableName
argument_list|(
literal|"qtest_batch"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (id int, name varchar(20), dt date, num numeric(8, 4))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|" (id, name, dt, num) values (?, ?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|intCol
decl_stmt|;
name|intCol
operator|<<
literal|1
operator|<<
literal|2
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVariantList
name|charCol
decl_stmt|;
name|charCol
operator|<<
name|QLatin1String
argument_list|(
literal|"harald"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"boris"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QVariantList
name|dateCol
decl_stmt|;
name|QDateTime
name|dt
init|=
name|QDateTime
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|dateCol
operator|<<
name|dt
operator|<<
name|dt
operator|.
name|addDays
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|DateTime
argument_list|)
expr_stmt|;
name|QVariantList
name|numCol
decl_stmt|;
name|numCol
operator|<<
literal|2.3
operator|<<
literal|3.4
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|intCol
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|charCol
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|dateCol
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|numCol
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|execBatch
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id, name, dt, num from "
operator|+
name|tableName
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"harald"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"boris"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|dt
operator|.
name|addDays
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|3.4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oraArrayBind
name|void
name|tst_QSqlQuery
operator|::
name|oraArrayBind
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BatchOperations
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Database can't do BatchOperations"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE OR REPLACE PACKAGE ora_array_test "
literal|"IS "
literal|"TYPE names_type IS TABLE OF VARCHAR(64) NOT NULL INDEX BY BINARY_INTEGER; "
literal|"names_tab names_type; "
literal|"PROCEDURE set_name(name_in IN VARCHAR2, row_in in INTEGER); "
literal|"PROCEDURE get_name(row_in IN INTEGER, str_out OUT VARCHAR2); "
literal|"PROCEDURE get_table(tbl OUT names_type); "
literal|"PROCEDURE set_table(tbl IN names_type); "
literal|"END ora_array_test; "
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE OR REPLACE PACKAGE BODY ora_array_test "
literal|"IS "
literal|"PROCEDURE set_name(name_in IN VARCHAR2, row_in in INTEGER) "
literal|"IS "
literal|"BEGIN "
literal|"names_tab(row_in) := name_in; "
literal|"END set_name; "
literal|"PROCEDURE get_name(row_in IN INTEGER, str_out OUT VARCHAR2) "
literal|"IS "
literal|"BEGIN "
literal|"str_out := names_tab(row_in); "
literal|"END get_name; "
literal|"PROCEDURE get_table(tbl OUT names_type) "
literal|"IS "
literal|"BEGIN "
literal|"tbl:=names_tab; "
literal|"END get_table; "
literal|"PROCEDURE set_table(tbl IN names_type) "
literal|"IS "
literal|"BEGIN "
literal|"names_tab := tbl; "
literal|"END set_table; "
literal|"END ora_array_test; "
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|list
decl_stmt|;
name|list
operator|<<
name|QString
argument_list|(
literal|"lorem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"ipsum"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"dolor"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"sit"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"amet"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"BEGIN "
literal|"ora_array_test.set_table(?); "
literal|"END;"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|list
argument_list|,
name|QSql
operator|::
name|In
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|execBatch
argument_list|(
name|QSqlQuery
operator|::
name|ValuesAsColumns
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"BEGIN "
literal|"ora_array_test.get_table(?); "
literal|"END;"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|list
operator|<<
name|QString
argument_list|(
literal|64
argument_list|,
literal|' '
argument_list|)
operator|<<
name|QString
argument_list|(
literal|64
argument_list|,
literal|' '
argument_list|)
operator|<<
name|QString
argument_list|(
literal|64
argument_list|,
literal|' '
argument_list|)
operator|<<
name|QString
argument_list|(
literal|64
argument_list|,
literal|' '
argument_list|)
operator|<<
name|QString
argument_list|(
literal|64
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|list
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|execBatch
argument_list|(
name|QSqlQuery
operator|::
name|ValuesAsColumns
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|out_list
init|=
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|out_list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"lorem"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out_list
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ipsum"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out_list
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"dolor"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out_list
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"sit"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out_list
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"amet"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"DROP PACKAGE ora_array_test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests that QSqlDatabase::record and QSqlQuery::record returns the same thing     otherwise our models get confused.  */
end_comment
begin_function
DECL|function|record_sqlite
name|void
name|tst_QSqlQuery
operator|::
name|record_sqlite
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"record_sqlite"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer primary key, name varchar, title int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"record_sqlite"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
comment|/* important - select from an empty table */
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id, name, title from "
operator|+
name|qTableName
argument_list|(
literal|"record_sqlite"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oraLong
name|void
name|tst_QSqlQuery
operator|::
name|oraLong
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|aLotOfText
argument_list|(
literal|127000
argument_list|,
name|QLatin1Char
argument_list|(
literal|'H'
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int primary key, astr long)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id, astr) values (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|aLotOfText
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select id,astr from "
operator|+
name|qTableName
argument_list|(
literal|"qtest_longstr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|aLotOfText
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|execErrorRecovery
name|void
name|tst_QSqlQuery
operator|::
name|execErrorRecovery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tbl
init|=
name|qTableName
argument_list|(
literal|"qtest_exerr"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|tbl
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tbl
operator|+
literal|" (id int not null primary key)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tbl
operator|+
literal|" values (?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// binding the same pkey - should fail
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// this should work again
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastInsertId
name|void
name|tst_QSqlQuery
operator|::
name|lastInsertId
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|LastInsertId
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Database doesn't support lastInsertId"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (41, 'VarChar41', 'Char41')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariant
name|v
init|=
name|q
operator|.
name|lastInsertId
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lastQuery
name|void
name|tst_QSqlQuery
operator|::
name|lastQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|sql
init|=
literal|"select * from "
operator|+
name|qtest
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|lastQuery
argument_list|()
argument_list|,
name|sql
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|executedQuery
argument_list|()
argument_list|,
name|sql
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|psql_bindWithDoubleColonCastOperator
name|void
name|tst_QSqlQuery
operator|::
name|psql_bindWithDoubleColonCastOperator
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tablename
argument_list|(
name|qTableName
argument_list|(
literal|"bindtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tablename
operator|+
literal|" (id1 int, id2 int, id3 int, fld1 int, fld2 int)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|tablename
operator|+
literal|" values (1, 2, 3, 10, 5)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select sum((fld1 - fld2)::int) from "
operator|+
name|tablename
operator|+
literal|" where id1 = :myid1 and id2 =:myid2 and id3=:myid3"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":myid1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":myid2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":myid3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|executedQuery
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"select sum((fld1 - fld2)::int) from "
operator|+
name|tablename
operator|+
literal|" where id1 = ? and id2 =? and id3=?"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|executedQuery
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"select sum((fld1 - fld2)::int) from "
operator|+
name|tablename
operator|+
literal|" where id1 = 1 and id2 =2 and id3=3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/* For task 157397: Using QSqlQuery with an invalid QSqlDatabase    does not set the last error of the query.    This test function will output some warnings, that's ok. */
end_comment
begin_function
DECL|function|queryOnInvalidDatabase
name|void
name|tst_QSqlQuery
operator|::
name|queryOnInvalidDatabase
parameter_list|()
block|{
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlDatabase: INVALID driver not loaded"
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"INVALID"
argument_list|,
literal|"invalidConnection"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"db.lastError().isValid() should be true!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::exec: database not open"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|query
argument_list|(
literal|"SELECT 1 AS ID"
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|query
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"query.lastError().isValid() should be true!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"invalidConnection"
argument_list|)
expr_stmt|;
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
literal|"this connection does not exist"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlQuery::exec: database not open"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|query
argument_list|(
literal|"SELECT 1 AS ID"
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|query
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"query.lastError().isValid() should be true!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/* For task 159138: Error on instantiating a sql-query before explicitly    opening the database. This is something we don't support, so this isn't    really a bug. However some of the drivers are nice enough to support it. */
end_comment
begin_function
DECL|function|createQueryOnClosedDatabase
name|void
name|tst_QSqlQuery
operator|::
name|createQueryOnClosedDatabase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// Only supported by these drivers
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
operator|&&
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|&&
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|MySqlServer
operator|&&
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
name|QSKIP
argument_list|(
literal|"Test is specific for PostgreSQL, Oracle, MySql and DB2"
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"select * from %1 where id = 1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qtest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"VarChar1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Char1"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"select * from %1 where id = 1"
argument_list|)
operator|.
name|arg
argument_list|(
name|qtest
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"This can't happen! The query should not have been executed!"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reExecutePreparedForwardOnlyQuery
name|void
name|tst_QSqlQuery
operator|::
name|reExecutePreparedForwardOnlyQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"SELECT id, t_varchar, t_char FROM %1 WHERE id = :id"
argument_list|)
operator|.
name|arg
argument_list|(
name|qtest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do something, like iterate over the result, or skip to the end
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|/* This was broken with SQLite because the cache size was set to 0 in the 2nd execute.        When forwardOnly is set we don't cahce the entire result, but we do cache the current row        but this requires the cache size to be equal to the column count.     */
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"VarChar1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Char1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finish
name|void
name|tst_QSqlQuery
operator|::
name|finish
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"SELECT id FROM "
operator|+
name|qtest
operator|+
literal|" WHERE id = ?"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|4
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// query is now inactive
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// bound values are retained
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// no prepare necessary
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT id FROM "
operator|+
name|qtest
operator|+
literal|" WHERE id = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlite_finish
name|void
name|tst_QSqlQuery
operator|::
name|sqlite_finish
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|databaseName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|':'
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This test requires a database on the filesystem, not in-memory"
argument_list|)
expr_stmt|;
block|{
name|QSqlDatabase
name|db2
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"QSQLITE"
argument_list|,
literal|"sqlite_finish_sqlite"
argument_list|)
decl_stmt|;
name|db2
operator|.
name|setDatabaseName
argument_list|(
name|db
operator|.
name|databaseName
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db2
argument_list|,
name|open
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_lockedtable"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (pk_id INTEGER PRIMARY KEY, whatever TEXT)"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(1, 'whatever')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(2, 'whatever more')"
argument_list|)
expr_stmt|;
comment|// This creates a read-lock in the database
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" WHERE pk_id = 1 or pk_id = 2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// The DELETE will fail because of the read-lock
name|QSqlQuery
name|q2
argument_list|(
name|db2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q2
operator|.
name|exec
argument_list|(
literal|"DELETE FROM "
operator|+
name|tableName
operator|+
literal|" WHERE pk_id=2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// The DELETE will succeed now because finish() removes the lock
name|q
operator|.
name|finish
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"DELETE FROM "
operator|+
name|tableName
operator|+
literal|" WHERE pk_id=2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"sqlite_finish_sqlite"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nextResult
name|void
name|tst_QSqlQuery
operator|::
name|nextResult
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|MultipleResultSets
argument_list|)
operator|||
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BatchOperations
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS does not support multiple result sets or batch operations"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|&&
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 5.0"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"more_results"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id integer, text varchar(20), num numeric(6, 3), empty varchar(10));"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(1, 'one', 1.1, '');"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(2, 'two', 2.2, '');"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(3, 'three', 3.3, '');"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(4, 'four', 4.4, '');"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|tstStrings
decl_stmt|;
name|tstStrings
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
operator|<<
literal|"four"
expr_stmt|;
comment|// Query that returns only one result set, nothing special about this
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT * FROM %1;"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move to first row of the result set
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
comment|// No more result sets are available
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// So the query is no longer active
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... and no data is available as the call
comment|// to nextResult() discarded the result set
comment|// Query that returns two result sets (batch sql)
comment|// When working with multiple result sets SQL Server insists on non-scrollable cursors
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT id FROM "
operator|+
name|tableName
operator|+
literal|"; SELECT text, num FROM "
operator|+
name|tableName
operator|+
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the meta data is as expected
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
comment|// Discards first result set and move to the next
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// New meta data should be available
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"TEXT"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"NUM"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move to first row of the second result set
name|QFAIL_SQL
argument_list|(
name|q
argument_list|,
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
comment|// No more result sets after this
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// So the query is no longer active
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... and no data is available as the call to
comment|// nextResult() discarded the result set
comment|// Query that returns one result set, a count of affected rows and then another result set
name|QString
name|query1
init|=
name|QString
argument_list|(
literal|"SELECT id, text, num, empty FROM %1 WHERE id<= 3"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|QString
name|query2
init|=
name|QString
argument_list|(
literal|"UPDATE %1 SET empty = 'Yatta!'"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|QString
name|query3
init|=
name|QString
argument_list|(
literal|"SELECT id, empty FROM %1 WHERE id<=2"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"%1; %2; %3;"
argument_list|)
operator|.
name|arg
argument_list|(
name|query1
argument_list|)
operator|.
name|arg
argument_list|(
name|query2
argument_list|)
operator|.
name|arg
argument_list|(
name|query3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check result set returned by first statement
name|QVERIFY
argument_list|(
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first statement is a select
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|tstStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|1.1
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
comment|// The second statement isn't a SELECT
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... so no result set is available
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// 4 rows was affected by the UPDATE
comment|// Check result set returned by third statement
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
comment|// The third statement is a SELECT
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Yatta!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Stored procedure with multiple result sets
specifier|const
name|QString
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"proc_more_res"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP PROCEDURE %1;"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE PROCEDURE %1()"
literal|"\nBEGIN"
literal|"\nSELECT id, text FROM %2;"
literal|"\nSELECT empty, num, text, id FROM %3;"
literal|"\nEND"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE PROCEDURE %1()"
literal|"\nRESULT SETS 2"
literal|"\nLANGUAGE SQL"
literal|"\np1:BEGIN"
literal|"\nDECLARE cursor1 CURSOR WITH RETURN FOR SELECT id, text FROM %2;"
literal|"\nDECLARE cursor2 CURSOR WITH RETURN FOR SELECT empty, num, text, id FROM %3;"
literal|"\nOPEN cursor1;"
literal|"\nOPEN cursor2;"
literal|"\nEND p1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE PROCEDURE %1"
literal|"\nAS"
literal|"\nSELECT id, text FROM %2"
literal|"\nSELECT empty, num, text, id FROM %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
block|{
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CALL %1()"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"EXEC %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|tstStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Yatta!"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|1.1
operator|*
operator|(
literal|1
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|tstStrings
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// MySQL also counts the CALL itself as a result
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
block|{
name|QVERIFY
argument_list|(
name|q
operator|.
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it's not a select
name|QCOMPARE
argument_list|(
name|q
operator|.
name|numRowsAffected
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// ... and no rows are affected (at least not with this procedure)
block|}
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|nextResult
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP PROCEDURE %1;"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For task 190311. Problem: Truncation happens on the 2nd execution if that BLOB is larger
end_comment
begin_comment
comment|// than the BLOB on the 1st execution. This was only for MySQL, but the test is general
end_comment
begin_comment
comment|// enough to be run with all backends.
end_comment
begin_function
DECL|function|blobsPreparedQuery
name|void
name|tst_QSqlQuery
operator|::
name|blobsPreparedQuery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BLOB
argument_list|)
operator|||
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|PreparedQueries
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS does not support BLOBs or prepared queries"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"blobstest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This is needed to make the test work with DB2.
name|QString
name|shortBLOB
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
name|QString
name|longerBLOB
argument_list|(
literal|"abcdefghijklmnopqrstuvxyzÂ¿Ã¤Ã«Ã¯Ã¶Ã¼Â¡  "
argument_list|)
decl_stmt|;
comment|// In PostgreSQL a BLOB is not called a BLOB, but a BYTEA! :-)
comment|// ... and in SQL Server it can be called a lot, but IMAGE will do.
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|typeName
argument_list|(
literal|"BLOB"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|typeName
operator|=
literal|"BYTEA"
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|typeName
operator|=
literal|"IMAGE"
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(id INTEGER, data %2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|typeName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1(id, data) VALUES(:id, :data)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":data"
argument_list|,
name|shortBLOB
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":id"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":data"
argument_list|,
name|longerBLOB
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// Two executions and result sets
name|q
operator|.
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"SELECT data FROM %1 WHERE id = ?"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|shortBLOB
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QVariant
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|longerBLOB
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only one execution and result set
name|q
operator|.
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"SELECT id, data FROM %1 ORDER BY id"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|shortBLOB
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|longerBLOB
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// There were problems with navigating past the end of a table returning an error on mysql
end_comment
begin_function
DECL|function|emptyTableNavigate
name|void
name|tst_QSqlQuery
operator|::
name|emptyTableNavigate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tbl
init|=
name|qTableName
argument_list|(
literal|"qtest_empty"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|tbl
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tbl
operator|+
literal|" (id char(10))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"select * from "
operator|+
name|tbl
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|task_217003
name|void
name|tst_QSqlQuery
operator|::
name|task_217003
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|Planet
argument_list|(
name|qTableName
argument_list|(
literal|"Planet"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|Planet
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|Planet
operator|+
literal|" (Name varchar(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|Planet
operator|+
literal|" VALUES ('Mercury')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|Planet
operator|+
literal|" VALUES ('Venus')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|Planet
operator|+
literal|" VALUES ('Earth')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|Planet
operator|+
literal|" VALUES ('Mars')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT Name FROM "
operator|+
name|Planet
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Mars"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Venus"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT Name FROM "
operator|+
name|Planet
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Mars"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Mercury"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|seek
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Venus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_250026
name|void
name|tst_QSqlQuery
operator|::
name|task_250026
parameter_list|()
block|{
name|QString
name|data258
decl_stmt|,
name|data1026
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"task_250026"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|" (longfield varchar(1100))"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Error"
operator|<<
name|q
operator|.
name|lastError
argument_list|()
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Db doesn't support \"1100\" as a size for fields"
argument_list|)
expr_stmt|;
block|}
name|data258
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
literal|258
argument_list|)
expr_stmt|;
name|data1026
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
literal|1026
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|"(longfield) VALUES (:longfield)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":longfield"
argument_list|,
name|data258
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":longfield"
argument_list|,
name|data1026
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|data258
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|data1026
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_205701
name|void
name|tst_QSqlQuery
operator|::
name|task_205701
parameter_list|()
block|{
name|QSqlDatabase
name|qsdb
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"QMYSQL"
argument_list|,
literal|"atest"
argument_list|)
decl_stmt|;
name|qsdb
operator|.
name|setHostName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|qsdb
operator|.
name|setDatabaseName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|qsdb
operator|.
name|setUserName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|qsdb
operator|.
name|setPassword
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|qsdb
operator|.
name|open
argument_list|()
expr_stmt|;
comment|//     {
name|QSqlQuery
name|query
argument_list|(
name|qsdb
argument_list|)
decl_stmt|;
comment|//     }
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"atest"
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|NOT_READY_YET
end_ifdef
begin_comment
comment|// For task: 229811
end_comment
begin_function
DECL|function|task_229811
name|void
name|tst_QSqlQuery
operator|::
name|task_229811
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
return|return;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"task_229811"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (Word varchar(20))"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Warning"
operator|<<
name|q
operator|.
name|lastError
argument_list|()
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values ('Albert')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values ('Beehive')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values ('Alimony')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values ('Bohemian')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values ('AllStars')"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|stmt
init|=
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" WHERE Word LIKE :name"
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":name"
argument_list|,
literal|"A%"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|q
operator|.
name|record
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Albert"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Alimony"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"AllStars"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_234422
name|void
name|tst_QSqlQuery
operator|::
name|task_234422
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|query
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QStringList
name|m_airlines
decl_stmt|;
name|QStringList
name|m_countries
decl_stmt|;
name|m_airlines
operator|<<
literal|"Lufthansa"
operator|<<
literal|"SAS"
operator|<<
literal|"United"
operator|<<
literal|"KLM"
operator|<<
literal|"Aeroflot"
expr_stmt|;
name|m_countries
operator|<<
literal|"DE"
operator|<<
literal|"SE"
operator|<<
literal|"US"
operator|<<
literal|"NL"
operator|<<
literal|"RU"
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"task_234422"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|query
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id int primary key, "
literal|"name varchar(20), homecountry varchar(2))"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_airlines
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|query
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" values(%1, '%2', '%3')"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|arg
argument_list|(
name|m_airlines
index|[
name|i
index|]
argument_list|,
name|m_countries
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|query
argument_list|,
name|exec
argument_list|(
literal|"SELECT name FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|isSelect
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSqlQuery
name|query2
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|query2
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|query2
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query2
operator|.
name|at
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|at
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|task_233829
name|void
name|tst_QSqlQuery
operator|::
name|task_233829
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"task_233829"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(dbl1 double precision,dbl2 double precision) without oids;"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|queryString
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|"(dbl1, dbl2) VALUES(?,?)"
argument_list|)
decl_stmt|;
name|double
name|k
init|=
literal|0.0
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|queryString
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|0.0
operator|/
name|k
argument_list|)
expr_stmt|;
comment|// nan
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
literal|0.0
operator|/
name|k
argument_list|)
expr_stmt|;
comment|// nan
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlServerReturn0
name|void
name|tst_QSqlQuery
operator|::
name|sqlServerReturn0
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|QSKIP
argument_list|(
literal|"SQL Server specific test"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"test141895"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"test141895_proc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP TABLE "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP PROCEDURE "
operator|+
name|procName
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id integer)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (3)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|procName
operator|+
literal|" AS "
literal|"SELECT * FROM "
operator|+
name|tableName
operator|+
literal|" WHERE ID = 2 "
literal|"RETURN 0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"{CALL "
operator|+
name|procName
operator|+
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_551
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_551
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|pkgname
argument_list|(
name|qTableName
argument_list|(
literal|"pkg"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE OR REPLACE PACKAGE "
operator|+
name|pkgname
operator|+
literal|" IS \n\             \n\             TYPE IntType IS TABLE OF INTEGER      INDEX BY BINARY_INTEGER;\n\             TYPE VCType  IS TABLE OF VARCHAR2(60) INDEX BY BINARY_INTEGER;\n\             PROCEDURE P (Inp IN IntType,  Outp OUT VCType);\n\             END "
operator|+
name|pkgname
operator|+
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE OR REPLACE PACKAGE BODY "
operator|+
name|pkgname
operator|+
literal|" IS\n\             PROCEDURE P (Inp IN IntType,  Outp OUT VCType)\n\             IS\n\             BEGIN\n\              Outp(1) := '1. Value is ' ||TO_CHAR(Inp(1));\n\              Outp(2) := '2. Value is ' ||TO_CHAR(Inp(2));\n\              Outp(3) := '3. Value is ' ||TO_CHAR(Inp(3));\n\             END p;\n\             END "
operator|+
name|pkgname
operator|+
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|inLst
decl_stmt|,
name|outLst
decl_stmt|,
name|res_outLst
decl_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"begin "
operator|+
name|pkgname
operator|+
literal|".p(:inp, :outp); end;"
argument_list|)
expr_stmt|;
name|QString
name|StVal
decl_stmt|;
name|StVal
operator|.
name|reserve
argument_list|(
literal|60
argument_list|)
expr_stmt|;
comment|// loading arrays
for|for
control|(
name|int
name|Cnt
init|=
literal|0
init|;
name|Cnt
operator|<
literal|3
condition|;
name|Cnt
operator|++
control|)
block|{
name|inLst
operator|<<
name|Cnt
expr_stmt|;
name|outLst
operator|<<
name|StVal
expr_stmt|;
block|}
name|q
operator|.
name|bindValue
argument_list|(
literal|":inp"
argument_list|,
name|inLst
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":outp"
argument_list|,
name|outLst
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|execBatch
argument_list|(
name|QSqlQuery
operator|::
name|ValuesAsColumns
argument_list|)
argument_list|)
expr_stmt|;
name|res_outLst
operator|=
name|qvariant_cast
argument_list|<
name|QVariantList
argument_list|>
argument_list|(
name|q
operator|.
name|boundValues
argument_list|()
index|[
literal|":outp"
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res_outLst
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"1. Value is 0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res_outLst
index|[
literal|1
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"2. Value is 1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res_outLst
index|[
literal|2
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"3. Value is 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_12186
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_12186
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
comment|// make sure that query.boundValues() returns the values in the right order even for more than 16 placeholders
name|QSqlQuery
name|query
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|query
operator|.
name|prepare
argument_list|(
literal|"INSERT INTO person (col1, col2, col3, col4, col5, col6, col7, col8, col9, col10, col11, col12, col13, col14, col15, col16, col17, col18) "
literal|"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|values
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|18
condition|;
operator|++
name|i
control|)
name|values
operator|<<
name|i
expr_stmt|;
foreach|foreach
control|(
name|QVariant
name|v
decl|,
name|values
control|)
name|query
operator|.
name|bindValue
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|query
operator|.
name|boundValues
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_14132
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_14132
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|procedureName
argument_list|(
name|qTableName
argument_list|(
literal|"procedure"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE OR REPLACE PROCEDURE "
operator|+
name|procedureName
operator|+
literal|" (outStr OUT varchar2)  \n\                         is \n\                         begin \n\                         outStr := 'OUTSTRING'; \n\                         end;"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|placeholder
init|=
literal|"XXXXXXXXX"
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"CALL "
operator|+
name|procedureName
operator|+
literal|"(?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|placeholder
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"OUTSTRING"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_18435
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_18435
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
operator|||
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"SQL Server specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"qtbug_18435_proc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP PROCEDURE "
operator|+
name|procName
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|stmt
init|=
literal|"CREATE PROCEDURE "
operator|+
name|procName
operator|+
literal|" @key nvarchar(50) OUTPUT AS\n"
literal|"BEGIN\n"
literal|"  SET NOCOUNT ON\n"
literal|"  SET @key = 'TEST'\n"
literal|"END\n"
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|stmt
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"{CALL "
operator|+
name|procName
operator|+
literal|"(?)}"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|testStr
init|=
literal|"0123"
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|testStr
argument_list|,
name|QSql
operator|::
name|Out
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"DROP PROCEDURE "
operator|+
name|procName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_5251
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_5251
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|timetest
argument_list|(
name|qTableName
argument_list|(
literal|"timetest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP TABLE "
operator|+
name|timetest
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE  "
operator|+
name|timetest
operator|+
literal|" (t  TIME)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|timetest
operator|+
literal|" VALUES ('1:2:3.666')"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlTableModel
name|timetestModel
argument_list|(
literal|0
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|timetestModel
operator|.
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnManualSubmit
argument_list|)
expr_stmt|;
name|timetestModel
operator|.
name|setTable
argument_list|(
name|timetest
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|timetestModel
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timetestModel
operator|.
name|record
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|toString
argument_list|(
literal|"HH:mm:ss.zzz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"01:02:03.666"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|timetestModel
argument_list|,
name|setData
argument_list|(
name|timetestModel
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|0
argument_list|,
literal|12
argument_list|,
literal|34
argument_list|,
literal|500
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timetestModel
operator|.
name|record
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|toString
argument_list|(
literal|"HH:mm:ss.zzz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"00:12:34.500"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|timetestModel
argument_list|,
name|submitAll
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timetestModel
operator|.
name|record
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|toString
argument_list|(
literal|"HH:mm:ss.zzz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"00:12:34.500"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"UPDATE "
operator|+
name|timetest
operator|+
literal|" SET t = '0:11:22.33'"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|timetestModel
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timetestModel
operator|.
name|record
argument_list|(
literal|0
argument_list|)
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
operator|.
name|toTime
argument_list|()
operator|.
name|toString
argument_list|(
literal|"HH:mm:ss.zzz"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"00:11:22.330"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_6421
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_6421
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug6421"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(COL1 char(10), COL2 char(10), COL3 char(10))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create index INDEX1 on "
operator|+
name|tableName
operator|+
literal|" (COL1 desc)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create index INDEX2 on "
operator|+
name|tableName
operator|+
literal|" (COL2 desc)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create index INDEX3 on "
operator|+
name|tableName
operator|+
literal|" (COL3 desc)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select COLUMN_EXPRESSION from ALL_IND_EXPRESSIONS where TABLE_NAME='"
operator|+
name|tableName
operator|+
literal|"'"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"COL1\""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"COL2\""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"\"COL3\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_6618
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_6618
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
name|QSKIP
argument_list|(
literal|"SQL Server specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop procedure "
operator|+
name|qTableName
argument_list|(
literal|"tst_raiseError"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
comment|//non-fatal
name|QString
name|errorString
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|110
condition|;
name|i
operator|++
control|)
name|errorString
operator|+=
literal|"reallylong"
expr_stmt|;
name|errorString
operator|+=
literal|" error"
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create procedure "
operator|+
name|qTableName
argument_list|(
literal|"tst_raiseError"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" as\n"
literal|"begin\n"
literal|"    raiserror('"
operator|+
name|errorString
operator|+
literal|"', 16, 1)\n"
literal|"end\n"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"{call "
operator|+
name|qTableName
argument_list|(
literal|"tst_raiseError"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|text
argument_list|()
operator|.
name|contains
argument_list|(
name|errorString
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_6852
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_6852
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 5.0"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug6852"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"bug6852_proc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"DROP PROCEDURE IF EXISTS "
operator|+
name|procName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(\n"
literal|"MainKey INT NOT NULL,\n"
literal|"OtherTextCol VARCHAR(45) NOT NULL,\n"
literal|"PRIMARY KEY(`MainKey`))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(0, \"Disabled\")"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(5, \"Error Only\")"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(10, \"Enabled\")"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" VALUES(15, \"Always\")"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|procName
operator|+
literal|"()\n"
literal|"READS SQL DATA\n"
literal|"BEGIN\n"
literal|"  SET @st = 'SELECT MainKey, OtherTextCol from "
operator|+
name|tableName
operator|+
literal|"';\n"
literal|"  PREPARE stmt from @st;\n"
literal|"  EXECUTE stmt;\n"
literal|"END;"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CALL "
operator|+
name|procName
operator|+
literal|"()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_5765
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_5765
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toFloat
argument_list|()
operator|<
literal|4.1
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 4.1"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug5765"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|"(testval TINYINT(1) DEFAULT 0)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" SET testval = :VALUE"
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":VALUE"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":VALUE"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":VALUE"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|sql
init|=
literal|"select testval from "
operator|+
name|tableName
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/** * This test case tests multiple statements in one execution. * Sqlite driver doesn't support multiple statement at one time. * If more than one statement is given, the exec or prepare function * return failure to the client. */
end_comment
begin_function
DECL|function|QTBUG_21884
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_21884
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QStringList
name|stList
decl_stmt|;
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug21884"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|stList
operator|<<
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key, note string)"
expr_stmt|;
name|stList
operator|<<
literal|"select * from "
operator|+
name|tableName
operator|+
literal|";"
expr_stmt|;
name|stList
operator|<<
literal|"select * from "
operator|+
name|tableName
operator|+
literal|";  \t\n\r"
expr_stmt|;
name|stList
operator|<<
literal|"drop table "
operator|+
name|tableName
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|st
decl|,
name|stList
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|st
argument_list|)
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|st
decl|,
name|stList
control|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|st
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stList
operator|<<
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key); select * from "
operator|+
name|tableName
expr_stmt|;
name|stList
operator|<<
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key); syntax error!;"
expr_stmt|;
name|stList
operator|<<
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key);;"
expr_stmt|;
name|stList
operator|<<
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key);\'\"\a\b\b\v"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|st
decl|,
name|stList
control|)
block|{
name|QVERIFY2
argument_list|(
operator|!
name|q
operator|.
name|prepare
argument_list|(
name|st
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"the statement is expected to fail! "
argument_list|)
operator|+
name|st
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|st
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"the statement is expected to fail! "
argument_list|)
operator|+
name|st
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/**   * This test case test sqlite driver close function. Sqlite driver should close cleanly   * even if there is still outstanding prepared statement.   */
end_comment
begin_function
DECL|function|QTBUG_16967
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_16967
parameter_list|()
block|{
name|QSqlQuery
name|q2
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q2
operator|=
name|q
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"CREATE TABLE t1 (id INTEGER PRIMARY KEY, str TEXT);"
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q2
operator|=
name|q
expr_stmt|;
name|q2
operator|.
name|prepare
argument_list|(
literal|"CREATE TABLE t1 (id INTEGER PRIMARY KEY, str TEXT);"
argument_list|)
expr_stmt|;
name|q2
operator|.
name|exec
argument_list|()
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q2
operator|=
name|q
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"INSERT INTO t1 (id, str) VALUES(1, \"test1\");"
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q2
operator|=
name|q
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"SELECT * FROM t1;"
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QSqlError
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/**   * In SQLite when a boolean value is bound to a placeholder, it should be converted   * into integer 0/1 rather than text "false"/"true". According to documentation,   * SQLite does not have separate Boolean storage class. Instead, Boolean values are   * stored as integers.   */
end_comment
begin_function
DECL|function|QTBUG_23895
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_23895
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug23895"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(id integer primary key, val1 bool, val2 boolean)"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|"(id, val1, val2) values(?, ?, ?);"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|sql
init|=
literal|"select * from "
operator|+
name|tableName
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|"(id, val1, val2) values(?, ?, ?);"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where val1"
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select * from "
operator|+
name|tableName
operator|+
literal|" where not val2"
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/**   * Test for aliases with dots   */
end_comment
begin_function
DECL|function|QTBUG_14904
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_14904
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug14904"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"create table "
operator|+
name|tableName
operator|+
literal|"(val1 bool)"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|tableName
operator|+
literal|"(val1) values(?);"
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|sql
init|=
literal|"select val1 AS value1 from "
operator|+
name|tableName
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sql
operator|=
literal|"select val1 AS 'value.one' from "
operator|+
name|tableName
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|sql
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"value.one"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// was -1 before bug fix
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG_2192
name|void
name|tst_QSqlQuery
operator|::
name|QTBUG_2192
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|{
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug2192"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (dt %1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tst_Databases
operator|::
name|dateTimeTypeName
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QDateTime
name|dt
init|=
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2012
argument_list|,
literal|7
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|23
argument_list|,
literal|59
argument_list|,
literal|59
argument_list|,
literal|999
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (dt) VALUES (?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT dt FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if retrieved value preserves reported precision
name|int
name|precision
init|=
name|qMax
argument_list|(
literal|0
argument_list|,
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|"dt"
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|qAbs
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDateTime
argument_list|()
operator|.
name|msecsTo
argument_list|(
name|dt
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|keep
init|=
name|qMin
argument_list|(
literal|1000
argument_list|,
operator|(
name|int
operator|)
name|qPow
argument_list|(
literal|10.0
argument_list|,
name|precision
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|diff
operator|<=
literal|1000
operator|-
name|keep
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|oraOCINumber
name|void
name|tst_QSqlQuery
operator|::
name|oraOCINumber
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest_oraOCINumber
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_oraOCINumber"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_oraOCINumber
operator|+
literal|" (col1 number(20), col2 number(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_oraOCINumber
operator|+
literal|" values (?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantList
name|col1Values
decl_stmt|;
name|QVariantList
name|col2Values
decl_stmt|;
name|col1Values
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
literal|1
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
literal|0
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|INT_MAX
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|UINT_MAX
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
operator|<<
call|(
name|qulonglong
call|)
argument_list|(
name|ULLONG_MAX
argument_list|)
expr_stmt|;
name|col2Values
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
literal|1
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
literal|0
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MIN
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
operator|<<
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MIN
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|col1Values
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|col2Values
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|execBatch
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|sqlStr
init|=
literal|"select * from "
operator|+
name|qtest_oraOCINumber
operator|+
literal|" where col1 = :bindValue0 AND col2 = :bindValue1"
decl_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
name|sqlStr
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
name|qulonglong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|INT_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|INT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|UINT_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|UINT_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MIN
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|LONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LONG_MIN
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|ULONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue0"
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|ULLONG_MAX
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|":bindValue1"
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MIN
argument_list|)
argument_list|,
name|QSql
operator|::
name|InOut
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|0
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
call|(
name|qulonglong
call|)
argument_list|(
name|ULLONG_MAX
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|boundValue
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
call|(
name|qlonglong
call|)
argument_list|(
name|LLONG_MIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlite_constraint
name|void
name|tst_QSqlQuery
operator|::
name|sqlite_constraint
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
name|QSKIP
argument_list|(
literal|"Sqlite3 specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|trigger
argument_list|(
name|qTableName
argument_list|(
literal|"test_constraint"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TEMP TRIGGER "
operator|+
name|trigger
operator|+
literal|" BEFORE DELETE ON "
operator|+
name|qtest
operator|+
literal|"\nFOR EACH ROW "
literal|"\nBEGIN"
literal|"\n  SELECT RAISE(ABORT, 'Raised Abort successfully');"
literal|"\nEND;"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"DELETE FROM "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
operator|.
name|databaseText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Raised Abort successfully"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlite_real
name|void
name|tst_QSqlQuery
operator|::
name|sqlite_real
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"sqliterealtype"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id INTEGER, realVal REAL)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id, realVal) VALUES (1, 2.3)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT realVal FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id, realVal) VALUES (?, ?)"
argument_list|)
expr_stmt|;
name|QVariant
name|var
argument_list|(
operator|(
name|double
operator|)
literal|5.6
argument_list|)
decl_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT realVal FROM "
operator|+
name|tableName
operator|+
literal|" WHERE ID=4"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|5.6
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|aggregateFunctionTypes
name|void
name|tst_QSqlQuery
operator|::
name|aggregateFunctionTypes
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QVariant
operator|::
name|Type
name|intType
init|=
name|QVariant
operator|::
name|Int
decl_stmt|;
comment|// QPSQL uses LongLong for manipulation of integers
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|intType
operator|=
name|QVariant
operator|::
name|LongLong
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
name|intType
operator|=
name|QVariant
operator|::
name|Double
expr_stmt|;
block|{
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"numericFunctionsWithIntValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id INTEGER)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First test without any entries
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT SUM(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT SUM(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT AVG(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT COUNT(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MIN(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MAX(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"numericFunctionsWithDoubleValues"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id REAL)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First test without any entries
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT SUM(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (1.5)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id) VALUES (2.5)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT SUM(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|4.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT AVG(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT COUNT(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|intType
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MIN(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MAX(id) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
comment|// PSQL does not have support for the round() function
if|if
condition|(
name|dbType
operator|!=
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT ROUND(id, 1) FROM "
operator|+
name|tableName
operator|+
literal|" WHERE id=1.5"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT ROUND(id, 0) FROM "
operator|+
name|tableName
operator|+
literal|" WHERE id=2.5"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
literal|3.0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
block|}
block|}
block|{
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"stringFunctions"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|tableName
operator|+
literal|" (id INTEGER, txt VARCHAR(50))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MAX(txt) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Invalid
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id, txt) VALUES (1, 'lower')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"INSERT INTO "
operator|+
name|tableName
operator|+
literal|" (id, txt) VALUES (2, 'upper')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT MAX(txt) FROM "
operator|+
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"upper"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSqlQuery
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsqlquery.moc"
end_include
end_unit
