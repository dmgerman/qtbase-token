begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsqldatabase.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qsqldriver.h>
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlindex.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"tst_databases.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSqlDriver::NotificationSource
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QSqlDatabase
argument_list|)
end_macro
begin_struct_decl
struct_decl|struct
name|FieldDef
struct_decl|;
end_struct_decl
begin_class
DECL|class|tst_QSqlDatabase
class|class
name|tst_QSqlDatabase
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSqlDatabase
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSqlDatabase
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
DECL|function|record_data
name|void
name|record_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
comment|//void record();
DECL|function|open_data
name|void
name|open_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|open
parameter_list|()
function_decl|;
DECL|function|tables_data
name|void
name|tables_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|tables
parameter_list|()
function_decl|;
DECL|function|oci_tables_data
name|void
name|oci_tables_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_tables
parameter_list|()
function_decl|;
DECL|function|transaction_data
name|void
name|transaction_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|transaction
parameter_list|()
function_decl|;
DECL|function|eventNotification_data
name|void
name|eventNotification_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|eventNotification
parameter_list|()
function_decl|;
name|void
name|addDatabase
parameter_list|()
function_decl|;
name|void
name|errorReporting_data
parameter_list|()
function_decl|;
name|void
name|errorReporting
parameter_list|()
function_decl|;
comment|//database specific tests
DECL|function|recordMySQL_data
name|void
name|recordMySQL_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordMySQL
parameter_list|()
function_decl|;
DECL|function|recordPSQL_data
name|void
name|recordPSQL_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordPSQL
parameter_list|()
function_decl|;
DECL|function|recordOCI_data
name|void
name|recordOCI_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordOCI
parameter_list|()
function_decl|;
DECL|function|recordTDS_data
name|void
name|recordTDS_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QTDS"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordTDS
parameter_list|()
function_decl|;
DECL|function|recordDB2_data
name|void
name|recordDB2_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QDB2"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordDB2
parameter_list|()
function_decl|;
DECL|function|recordSQLite_data
name|void
name|recordSQLite_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordSQLite
parameter_list|()
function_decl|;
DECL|function|recordAccess_data
name|void
name|recordAccess_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordAccess
parameter_list|()
function_decl|;
DECL|function|recordSQLServer_data
name|void
name|recordSQLServer_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordSQLServer
parameter_list|()
function_decl|;
DECL|function|recordIBase_data
name|void
name|recordIBase_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|recordIBase
parameter_list|()
function_decl|;
DECL|function|eventNotificationIBase_data
name|void
name|eventNotificationIBase_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|eventNotificationIBase
parameter_list|()
function_decl|;
DECL|function|eventNotificationPSQL_data
name|void
name|eventNotificationPSQL_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|eventNotificationPSQL
parameter_list|()
function_decl|;
comment|//database specific 64 bit integer test
DECL|function|bigIntField_data
name|void
name|bigIntField_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|bigIntField
parameter_list|()
function_decl|;
comment|// general tests
DECL|function|getConnectionName_data
name|void
name|getConnectionName_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|getConnectionName
parameter_list|()
function_decl|;
comment|// For task 129992
comment|//problem specific tests
DECL|function|alterTable_data
name|void
name|alterTable_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|alterTable
parameter_list|()
function_decl|;
DECL|function|caseSensivity_data
name|void
name|caseSensivity_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|caseSensivity
parameter_list|()
function_decl|;
DECL|function|noEscapedFieldNamesInRecord_data
name|void
name|noEscapedFieldNamesInRecord_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|noEscapedFieldNamesInRecord
parameter_list|()
function_decl|;
DECL|function|whitespaceInIdentifiers_data
name|void
name|whitespaceInIdentifiers_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|whitespaceInIdentifiers
parameter_list|()
function_decl|;
DECL|function|formatValueTrimStrings_data
name|void
name|formatValueTrimStrings_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|formatValueTrimStrings
parameter_list|()
function_decl|;
DECL|function|precisionPolicy_data
name|void
name|precisionPolicy_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|precisionPolicy
parameter_list|()
function_decl|;
DECL|function|db2_valueCacheUpdate_data
name|void
name|db2_valueCacheUpdate_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QDB2"
argument_list|)
expr_stmt|;
block|}
name|void
name|db2_valueCacheUpdate
parameter_list|()
function_decl|;
DECL|function|psql_schemas_data
name|void
name|psql_schemas_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|psql_schemas
parameter_list|()
function_decl|;
DECL|function|psql_escapedIdentifiers_data
name|void
name|psql_escapedIdentifiers_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|psql_escapedIdentifiers
parameter_list|()
function_decl|;
DECL|function|psql_escapeBytea_data
name|void
name|psql_escapeBytea_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|psql_escapeBytea
parameter_list|()
function_decl|;
DECL|function|bug_249059_data
name|void
name|bug_249059_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QPSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|bug_249059
parameter_list|()
function_decl|;
DECL|function|mysqlOdbc_unsignedIntegers_data
name|void
name|mysqlOdbc_unsignedIntegers_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|mysqlOdbc_unsignedIntegers
parameter_list|()
function_decl|;
DECL|function|mysql_multiselect_data
name|void
name|mysql_multiselect_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|mysql_multiselect
parameter_list|()
function_decl|;
comment|// For task 144331
DECL|function|mysql_savepointtest_data
name|void
name|mysql_savepointtest_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QMYSQL"
argument_list|)
expr_stmt|;
block|}
name|void
name|mysql_savepointtest
parameter_list|()
function_decl|;
DECL|function|accessOdbc_strings_data
name|void
name|accessOdbc_strings_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|accessOdbc_strings
parameter_list|()
function_decl|;
DECL|function|ibase_numericFields_data
name|void
name|ibase_numericFields_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|ibase_numericFields
parameter_list|()
function_decl|;
comment|// For task 125053
DECL|function|ibase_fetchBlobs_data
name|void
name|ibase_fetchBlobs_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|ibase_fetchBlobs
parameter_list|()
function_decl|;
comment|// For task 143471
DECL|function|ibase_useCustomCharset_data
name|void
name|ibase_useCustomCharset_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
name|void
name|ibase_useCustomCharset
parameter_list|()
function_decl|;
comment|// For task 134608
DECL|function|ibase_procWithoutReturnValues_data
name|void
name|ibase_procWithoutReturnValues_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
comment|// For task 165423
name|void
name|ibase_procWithoutReturnValues
parameter_list|()
function_decl|;
DECL|function|ibase_procWithReturnValues_data
name|void
name|ibase_procWithReturnValues_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QIBASE"
argument_list|)
expr_stmt|;
block|}
comment|// For task 177530
name|void
name|ibase_procWithReturnValues
parameter_list|()
function_decl|;
DECL|function|odbc_reopenDatabase_data
name|void
name|odbc_reopenDatabase_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|odbc_reopenDatabase
parameter_list|()
function_decl|;
DECL|function|odbc_uniqueidentifier_data
name|void
name|odbc_uniqueidentifier_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|odbc_uniqueidentifier
parameter_list|()
function_decl|;
comment|// For task 141822
DECL|function|odbc_uintfield_data
name|void
name|odbc_uintfield_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|odbc_uintfield
parameter_list|()
function_decl|;
DECL|function|odbc_bindBoolean_data
name|void
name|odbc_bindBoolean_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|odbc_bindBoolean
parameter_list|()
function_decl|;
DECL|function|odbc_testqGetString_data
name|void
name|odbc_testqGetString_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QODBC"
argument_list|)
expr_stmt|;
block|}
name|void
name|odbc_testqGetString
parameter_list|()
function_decl|;
DECL|function|oci_serverDetach_data
name|void
name|oci_serverDetach_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_serverDetach
parameter_list|()
function_decl|;
comment|// For task 154518
DECL|function|oci_xmltypeSupport_data
name|void
name|oci_xmltypeSupport_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_xmltypeSupport
parameter_list|()
function_decl|;
DECL|function|oci_fieldLength_data
name|void
name|oci_fieldLength_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_fieldLength
parameter_list|()
function_decl|;
DECL|function|oci_synonymstest_data
name|void
name|oci_synonymstest_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QOCI"
argument_list|)
expr_stmt|;
block|}
name|void
name|oci_synonymstest
parameter_list|()
function_decl|;
DECL|function|sqlite_bindAndFetchUInt_data
name|void
name|sqlite_bindAndFetchUInt_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|sqlite_bindAndFetchUInt
parameter_list|()
function_decl|;
DECL|function|sqlStatementUseIsNull_189093_data
name|void
name|sqlStatementUseIsNull_189093_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|sqlStatementUseIsNull_189093
parameter_list|()
function_decl|;
DECL|function|sqlite_enable_cache_mode_data
name|void
name|sqlite_enable_cache_mode_data
parameter_list|()
block|{
name|generic_data
argument_list|(
literal|"QSQLITE"
argument_list|)
expr_stmt|;
block|}
name|void
name|sqlite_enable_cache_mode
parameter_list|()
function_decl|;
private|private:
name|void
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|void
name|testRecord
parameter_list|(
specifier|const
name|FieldDef
name|fieldDefs
index|[]
parameter_list|,
specifier|const
name|QSqlRecord
modifier|&
name|inf
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|commonFieldTest
parameter_list|(
specifier|const
name|FieldDef
name|fieldDefs
index|[]
parameter_list|,
name|QSqlDatabase
parameter_list|,
specifier|const
name|int
parameter_list|)
function_decl|;
DECL|member|dbs
name|tst_Databases
name|dbs
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// number of records to be inserted per testfunction
end_comment
begin_decl_stmt
DECL|variable|ITERATION_COUNT
specifier|static
specifier|const
name|int
name|ITERATION_COUNT
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
comment|//helper class for database specific tests
end_comment
begin_struct
DECL|struct|FieldDef
struct|struct
name|FieldDef
block|{
DECL|function|FieldDef
name|FieldDef
parameter_list|(
name|QString
name|tn
init|=
name|QString
argument_list|()
parameter_list|,
name|QVariant
operator|::
name|Type
name|t
init|=
name|QVariant
operator|::
name|Invalid
parameter_list|,
name|QVariant
name|v
init|=
name|QVariant
argument_list|()
parameter_list|,
name|bool
name|nl
init|=
literal|true
parameter_list|)
member_init_list|:
name|typeName
argument_list|(
name|tn
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
member_init_list|,
name|val
argument_list|(
name|v
argument_list|)
member_init_list|,
name|nullable
argument_list|(
name|nl
argument_list|)
block|{}
DECL|function|fieldName
name|QString
name|fieldName
parameter_list|()
specifier|const
block|{
name|QString
name|rt
init|=
name|typeName
decl_stmt|;
name|rt
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|rt
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
name|i
operator|=
name|rt
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|20
condition|)
name|i
operator|=
literal|20
expr_stmt|;
return|return
literal|"t_"
operator|+
name|rt
operator|.
name|left
argument_list|(
name|i
argument_list|)
return|;
block|}
DECL|member|typeName
name|QString
name|typeName
decl_stmt|;
DECL|member|type
name|QVariant
operator|::
name|Type
name|type
decl_stmt|;
DECL|member|val
name|QVariant
name|val
decl_stmt|;
DECL|member|nullable
name|bool
name|nullable
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// creates a table out of the FieldDefs and returns the number of fields
end_comment
begin_comment
comment|// excluding the primary key field
end_comment
begin_function
DECL|function|createFieldTable
specifier|static
name|int
name|createFieldTable
parameter_list|(
specifier|const
name|FieldDef
name|fieldDefs
index|[]
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|tst_Databases
operator|::
name|safeDropTable
argument_list|(
name|db
argument_list|,
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// construct a create table statement consisting of all fieldtypes
name|QString
name|qs
init|=
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QString
name|autoName
init|=
name|tst_Databases
operator|::
name|autoFieldName
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|qs
operator|.
name|append
argument_list|(
literal|" (id int not null"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
name|qs
operator|.
name|append
argument_list|(
literal|" (id serial not null"
argument_list|)
expr_stmt|;
else|else
name|qs
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"(id integer not null %1 primary key"
argument_list|)
operator|.
name|arg
argument_list|(
name|autoName
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|fieldDefs
index|[
name|i
index|]
operator|.
name|typeName
operator|.
name|isNull
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qs
operator|+=
name|QString
argument_list|(
literal|",\n %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fieldDefs
index|[
name|i
index|]
operator|.
name|fieldName
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|fieldDefs
index|[
name|i
index|]
operator|.
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QTDS"
argument_list|)
operator|||
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
operator|)
operator|&&
name|fieldDefs
index|[
name|i
index|]
operator|.
name|nullable
condition|)
block|{
name|qs
operator|+=
literal|" null"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|qs
operator|.
name|append
argument_list|(
literal|",\n primary key (id)"
argument_list|)
expr_stmt|;
name|qs
operator|+=
literal|')'
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|qs
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Creation of Table failed:"
operator|<<
name|tst_Databases
operator|::
name|printError
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Query: "
operator|<<
name|qs
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|i
return|;
block|}
end_function
begin_constructor
DECL|function|tst_QSqlDatabase
name|tst_QSqlDatabase
operator|::
name|tst_QSqlDatabase
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QSqlDatabase
name|tst_QSqlDatabase
operator|::
name|~
name|tst_QSqlDatabase
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|createTestTables
name|void
name|tst_QSqlDatabase
operator|::
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
condition|)
comment|// ### stupid workaround until we find a way to hardcode this
comment|// in the MySQL server startup script
name|q
operator|.
name|exec
argument_list|(
literal|"set table_type=innodb"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SET ANSI_DEFAULTS ON"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SET IMPLICIT_TRANSACTIONS OFF"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
comment|// please never ever change this table; otherwise fix all tests ;)
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id int not null, t_varchar varchar(40) not null, t_char char(40), "
literal|"t_numeric number, primary key (id, t_varchar))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" (id integer not null, t_varchar varchar(40) not null, "
literal|"t_char char(40), t_numeric numeric(6, 3), primary key (id, t_varchar))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testWhiteSpaceNames
argument_list|(
name|db
operator|.
name|driverName
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|qry
init|=
literal|"create table "
operator|+
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" test"
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
operator|+
literal|'('
operator|+
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|QLatin1String
argument_list|(
literal|"test test"
argument_list|)
argument_list|,
name|QSqlDriver
operator|::
name|FieldName
argument_list|)
operator|+
literal|" int not null primary key)"
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|qry
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dropTestTables
name|void
name|tst_QSqlDatabase
operator|::
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
return|return;
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// drop the view first, otherwise we'll get dependency problems
name|tst_Databases
operator|::
name|safeDropViews
argument_list|(
name|db
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|qTableName
argument_list|(
literal|"qtest_view"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_view2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|tableNames
decl_stmt|;
name|tableNames
operator|<<
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtestalter"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_temp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_bigint"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_xmltype"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"latin1table"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_sqlguid"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"batable"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_prec"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"uint"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"strings"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"numericfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_ibaseblobs"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtestBindBool"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"testqGetString"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"qtest_sqlguid"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"uint_table"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"uint_test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"bug_249059"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
literal|0
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QPSQL"
argument_list|)
condition|)
block|{
name|q
operator|.
name|exec
argument_list|(
literal|"drop schema "
operator|+
name|qTableName
argument_list|(
literal|"qtestschema"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop schema "
operator|+
name|qTableName
argument_list|(
literal|"qtestScHeMa"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|testWhiteSpaceNames
argument_list|(
name|db
operator|.
name|driverName
argument_list|()
argument_list|)
condition|)
name|tableNames
operator|<<
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" test"
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|tst_Databases
operator|::
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
block|{
name|q
operator|.
name|exec
argument_list|(
literal|"drop user "
operator|+
name|qTableName
argument_list|(
literal|"CREATOR"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop user "
operator|+
name|qTableName
argument_list|(
literal|"APPUSER"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"DROP TABLE sys."
operator|+
name|qTableName
argument_list|(
literal|"mypassword"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|populateTestTables
name|void
name|tst_QSqlDatabase
operator|::
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|qtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qtest
argument_list|)
expr_stmt|;
comment|//non-fatal
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" (id, t_varchar, t_char, t_numeric) values (0, 'VarChar0', 'Char0', 1.1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" (id, t_varchar, t_char, t_numeric) values (1, 'VarChar1', 'Char1', 2.2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" (id, t_varchar, t_char, t_numeric) values (2, 'VarChar2', 'Char2', 3.3)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" (id, t_varchar, t_char, t_numeric) values (3, 'VarChar3', 'Char3', 4.4)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" (id, t_varchar, t_char, t_numeric) values (4, 'VarChar4', NULL, NULL)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QSqlDatabase
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QSqlDriver
operator|::
name|NotificationSource
argument_list|>
argument_list|(
literal|"QSqlDriver::NotificationSource"
argument_list|)
expr_stmt|;
name|dbs
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|//in case of leftovers
name|createTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QSqlDatabase
operator|::
name|cleanupTestCase
parameter_list|()
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|dbs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSqlDatabase
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSqlDatabase
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|generic_data
name|void
name|tst_QSqlDatabase
operator|::
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
parameter_list|)
block|{
if|if
condition|(
name|dbs
operator|.
name|fillTestTable
argument_list|(
name|engine
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|engine
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"No database drivers are available in this Qt configuration"
argument_list|)
expr_stmt|;
else|else
name|QSKIP
argument_list|(
operator|(
name|QString
argument_list|(
literal|"No database drivers of type %1 are available in this Qt configuration"
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
argument_list|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addDatabase
name|void
name|tst_QSqlDatabase
operator|::
name|addDatabase
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlDatabase: BLAH_FOO_NONEXISTENT_DRIVER driver not loaded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
name|qPrintable
argument_list|(
literal|"QSqlDatabase: available drivers: "
operator|+
name|QSqlDatabase
operator|::
name|drivers
argument_list|()
operator|.
name|join
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"BLAH_FOO_NONEXISTENT_DRIVER"
argument_list|,
literal|"INVALID_CONNECTION"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|QSqlDatabase
operator|::
name|contains
argument_list|(
literal|"INVALID_CONNECTION"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"INVALID_CONNECTION"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QSqlDatabase
operator|::
name|contains
argument_list|(
literal|"INVALID_CONNECTION"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorReporting_data
name|void
name|tst_QSqlDatabase
operator|::
name|errorReporting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"driver"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTDS"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QTDS"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QTDS7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QTDS7"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorReporting
name|void
name|tst_QSqlDatabase
operator|::
name|errorReporting
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|driver
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QSqlDatabase
operator|::
name|drivers
argument_list|()
operator|.
name|contains
argument_list|(
name|driver
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Database driver %1 not available"
argument_list|)
operator|.
name|arg
argument_list|(
name|driver
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|dbName
init|=
name|QLatin1String
argument_list|(
literal|"errorReportingDb-"
argument_list|)
operator|+
name|driver
decl_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
name|driver
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|db
operator|.
name|setHostName
argument_list|(
name|QLatin1String
argument_list|(
literal|"127.0.0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDatabaseName
argument_list|(
name|QLatin1String
argument_list|(
literal|"NonExistantDatabase"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|setUserName
argument_list|(
name|QLatin1String
argument_list|(
literal|"InvalidUser"
argument_list|)
argument_list|)
expr_stmt|;
name|db
operator|.
name|setPassword
argument_list|(
name|QLatin1String
argument_list|(
literal|"IncorrectPassword"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|=
name|QSqlDatabase
argument_list|()
expr_stmt|;
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|open
name|void
name|tst_QSqlDatabase
operator|::
name|open
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db
argument_list|,
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|isOpenError
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
operator|&&
name|db
operator|.
name|databaseName
argument_list|()
operator|==
literal|":memory:"
condition|)
block|{
comment|// tables in in-memory databases don't survive an open/close
name|createTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|tables
name|void
name|tst_QSqlDatabase
operator|::
name|tables
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|qtest_view
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_view"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|temp_tab
argument_list|(
name|qTableName
argument_list|(
literal|"test_tab"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|views
init|=
literal|true
decl_stmt|;
name|bool
name|tempTables
init|=
literal|false
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|&&
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<
literal|5
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 5.0"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"CREATE VIEW "
operator|+
name|qtest_view
operator|+
literal|" as select * from "
operator|+
name|qtest
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"DBMS '%s' cannot handle VIEWs: %s"
argument_list|,
name|qPrintable
argument_list|(
name|tst_Databases
operator|::
name|dbToString
argument_list|(
name|db
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|tst_Databases
operator|::
name|printError
argument_list|(
name|q
operator|.
name|lastError
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|views
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE3"
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TEMPORARY TABLE "
operator|+
name|temp_tab
operator|+
literal|" (id int)"
argument_list|)
argument_list|)
expr_stmt|;
name|tempTables
operator|=
literal|true
expr_stmt|;
block|}
name|QStringList
name|tables
init|=
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|Tables
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|qtest
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
literal|"sql_features"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
comment|//check for postgres 7.4 internal tables
if|if
condition|(
name|views
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|qtest_view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tempTables
condition|)
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|temp_tab
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|tables
operator|=
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|Views
argument_list|)
expr_stmt|;
if|if
condition|(
name|views
condition|)
block|{
if|if
condition|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|qtest_view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"failed to find"
operator|<<
name|qtest_view
operator|<<
literal|"in"
operator|<<
name|tables
expr_stmt|;
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|qtest_view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tempTables
condition|)
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|temp_tab
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|qtest
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|tables
operator|=
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|SystemTables
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|qtest
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|qtest_view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tables
operator|.
name|contains
argument_list|(
name|temp_tab
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|tables
operator|=
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|AllTables
argument_list|)
expr_stmt|;
if|if
condition|(
name|views
condition|)
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|qtest_view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tempTables
condition|)
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|temp_tab
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|qtest
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QPSQL"
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|tables
operator|.
name|contains
argument_list|(
name|qtest
operator|+
literal|" test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|whitespaceInIdentifiers
name|void
name|tst_QSqlDatabase
operator|::
name|whitespaceInIdentifiers
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|testWhiteSpaceNames
argument_list|(
name|db
operator|.
name|driverName
argument_list|()
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" test"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|tables
argument_list|()
operator|.
name|contains
argument_list|(
name|tableName
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|tableName
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"test test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QSqlIndex
name|idx
init|=
name|db
operator|.
name|primaryIndex
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|tableName
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"test test"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"DBMS does not support whitespaces in identifiers"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|alterTable
name|void
name|tst_QSqlDatabase
operator|::
name|alterTable
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtestalter
argument_list|(
name|qTableName
argument_list|(
literal|"qtestalter"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtestalter
operator|+
literal|" (F1 char(20), F2 char(20), F3 char(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|qtestalter
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"F%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
literal|"alter table "
operator|+
name|qtestalter
operator|+
literal|" drop column F2"
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"DBMS doesn't support dropping columns in ALTER TABLE statement"
argument_list|)
expr_stmt|;
block|}
name|rec
operator|=
name|db
operator|.
name|record
argument_list|(
name|qtestalter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"F1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"F3"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtestalter
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_comment
comment|// this is the general test that should work on all databases.
end_comment
begin_comment
comment|// unfortunately no DBMS supports SQL 92/ 99 so the general
end_comment
begin_comment
comment|// test is more or less a joke. Please write a test for each
end_comment
begin_comment
comment|// database plugin (see recordOCI and so on). Use this test
end_comment
begin_comment
comment|// as a template.
end_comment
begin_endif
unit|void tst_QSqlDatabase::record() {     QFETCH(QString, dbName);     QSqlDatabase db = QSqlDatabase::database(dbName);     CHECK_DATABASE(db);      static const FieldDef fieldDefs[] = {         FieldDef("char(20)", QVariant::String,         QString("blah1"), false),         FieldDef("varchar(20)", QVariant::String,      QString("blah2"), false),         FieldDef()     };      const int fieldCount = createFieldTable(fieldDefs, db);     QVERIFY(fieldCount> 0);      commonFieldTest(fieldDefs, db, fieldCount); }
endif|#
directive|endif
end_endif
begin_function
DECL|function|testRecord
name|void
name|tst_QSqlDatabase
operator|::
name|testRecord
parameter_list|(
specifier|const
name|FieldDef
name|fieldDefs
index|[]
parameter_list|,
specifier|const
name|QSqlRecord
modifier|&
name|inf
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|autoFieldName
argument_list|(
name|db
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// Currently only MySQL is tested
name|QVERIFY2
argument_list|(
name|inf
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|.
name|isAutoValue
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|inf
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
operator|+
literal|" should be reporting as an autovalue"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|fieldDefs
index|[
name|i
index|]
operator|.
name|typeName
operator|.
name|isNull
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|inf
operator|.
name|field
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|name
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|,
name|fieldDefs
index|[
name|i
index|]
operator|.
name|fieldName
argument_list|()
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|inf
operator|.
name|field
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|!=
name|fieldDefs
index|[
name|i
index|]
operator|.
name|type
condition|)
block|{
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|" Expected: '%1' Received: '%2' for field %3 in testRecord"
argument_list|)
operator|.
name|arg
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|fieldDefs
index|[
name|i
index|]
operator|.
name|type
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|inf
operator|.
name|field
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fieldDefs
index|[
name|i
index|]
operator|.
name|fieldName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|inf
operator|.
name|field
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|isAutoValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//	qDebug(QString(" field: %1 type: %2 variant type: %3").arg(fieldDefs[ i ].fieldName()).arg(QVariant::typeToName(inf.field(i+1)->type())).arg(QVariant::typeToName(inf.field(i+1)->value().type())));
block|}
block|}
end_function
begin_comment
comment|// non-dbms specific tests
end_comment
begin_function
DECL|function|commonFieldTest
name|void
name|tst_QSqlDatabase
operator|::
name|commonFieldTest
parameter_list|(
specifier|const
name|FieldDef
name|fieldDefs
index|[]
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|,
specifier|const
name|int
name|fieldCount
parameter_list|)
block|{
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
argument_list|,
name|fieldCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|testRecord
argument_list|(
name|fieldDefs
argument_list|,
name|rec
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordTDS
name|void
name|tst_QSqlDatabase
operator|::
name|recordTDS
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"tinyint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|255
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|32767
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2147483647
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric(10,9)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"decimal(10,9)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float(4)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"double precision"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"real"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallmoney"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|100.42
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"money"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|200.42
argument_list|)
block|,
comment|// accuracy is that of a minute
name|FieldDef
argument_list|(
literal|"smalldatetime"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
block|,
comment|// accuracy is that of a second
name|FieldDef
argument_list|(
literal|"datetime"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah1"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah2"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"nchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah3"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"nvarchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah4"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"text"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah5"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bit"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordOCI
name|void
name|tst_QSqlDatabase
operator|::
name|recordOCI
parameter_list|()
block|{
name|bool
name|hasTimeStamp
init|=
literal|false
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|// runtime check for Oracle version since V8 doesn't support TIMESTAMPs
if|if
condition|(
name|tst_Databases
operator|::
name|getOraVersion
argument_list|(
name|db
argument_list|)
operator|>=
literal|9
condition|)
name|hasTimeStamp
operator|=
literal|true
expr_stmt|;
name|FieldDef
name|tsdef
decl_stmt|;
name|FieldDef
name|tstzdef
decl_stmt|;
name|FieldDef
name|tsltzdef
decl_stmt|;
name|FieldDef
name|intytm
decl_stmt|;
name|FieldDef
name|intdts
decl_stmt|;
specifier|static
specifier|const
name|QDateTime
name|dt
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasTimeStamp
condition|)
block|{
name|tsdef
operator|=
name|FieldDef
argument_list|(
literal|"timestamp"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|tstzdef
operator|=
name|FieldDef
argument_list|(
literal|"timestamp with time zone"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|tsltzdef
operator|=
name|FieldDef
argument_list|(
literal|"timestamp with local time zone"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|)
expr_stmt|;
name|intytm
operator|=
name|FieldDef
argument_list|(
literal|"interval year to month"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"+01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|intdts
operator|=
name|FieldDef
argument_list|(
literal|"interval day to second"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"+01 00:00:01.000000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah1"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah2"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"nchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah3"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"nvarchar2(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah4"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"number(10,5)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.1234567
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"date"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"long raw"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QByteArray
argument_list|(
literal|"blah5"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"raw(2000)"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QByteArray
argument_list|(
literal|"blah6"
argument_list|)
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"blob"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QByteArray
argument_list|(
literal|"blah7"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"clob"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah8"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"nclob"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah9"
argument_list|)
argument_list|)
block|,
comment|//        FieldDef("bfile", QVariant::ByteArray,         QByteArray("blah10")),
name|intytm
block|,
name|intdts
block|,
name|tsdef
block|,
name|tstzdef
block|,
name|tsltzdef
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
comment|// some additional tests
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|"T_NUMBER"
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|"T_NUMBER"
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|"T_NUMBER"
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|"T_NUMBER"
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordPSQL
name|void
name|tst_QSqlDatabase
operator|::
name|recordPSQL
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|FieldDef
name|byteadef
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|BLOB
argument_list|)
condition|)
name|byteadef
operator|=
name|FieldDef
argument_list|(
literal|"bytea"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QByteArray
argument_list|(
literal|"bl\\ah"
argument_list|)
argument_list|)
expr_stmt|;
specifier|static
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"bigint"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bigserial"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bit"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"1"
argument_list|)
block|,
comment|// a bit in postgres is a bit-string
name|FieldDef
argument_list|(
literal|"box"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"(5,6),(1,2)"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah5678901234567890"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah5678901234567890"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"cidr"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"12.123.0.0/24"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"circle"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"<(1,2),3>"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"date"
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|,
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float8"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.12345678912
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"inet"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"12.123.12.23"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"integer"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2147483647
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"interval"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"1 day 12:59:10"
argument_list|)
block|,
comment|//	LOL... you can create a "line" datatype in PostgreSQL<= 7.2.x but
comment|//	as soon as you want to insert data you get a "not implemented yet" error
comment|//	FieldDef("line", QVariant::Polygon, QPolygon(QRect(1, 2, 3, 4))),
name|FieldDef
argument_list|(
literal|"lseg"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"[(1,1),(2,2)]"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"macaddr"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"08:00:2b:01:02:03"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"money"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"$12.23"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.2345678912
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"path"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"((1,2),(3,2),(3,5),(1,5))"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"point"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"(1,2)"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"polygon"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"((1,2),(3,2),(3,5),(1,5))"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"real"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.1234
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|32767
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"serial"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"text"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"blah"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"time(6)"
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timetz"
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timestamp(6)"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timestamptz"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
block|,
name|byteadef
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop sequence "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"_t_bigserial_seq"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop sequence "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"_t_serial_seq"
argument_list|)
expr_stmt|;
comment|// older psql cut off the table name
name|q
operator|.
name|exec
argument_list|(
literal|"drop sequence "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|left
argument_list|(
literal|15
argument_list|)
operator|+
literal|"_t_bigserial_seq"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop sequence "
operator|+
name|qTableName
argument_list|(
literal|"qtestfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|left
argument_list|(
literal|18
argument_list|)
operator|+
literal|"_t_serial_seq"
argument_list|)
expr_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ITERATION_COUNT
condition|;
operator|++
name|i
control|)
block|{
comment|// increase serial values
for|for
control|(
name|int
name|i2
init|=
literal|0
init|;
operator|!
name|fieldDefs
index|[
name|i2
index|]
operator|.
name|typeName
operator|.
name|isNull
argument_list|()
condition|;
operator|++
name|i2
control|)
block|{
if|if
condition|(
name|fieldDefs
index|[
name|i2
index|]
operator|.
name|typeName
operator|==
literal|"serial"
operator|||
name|fieldDefs
index|[
name|i2
index|]
operator|.
name|typeName
operator|==
literal|"bigserial"
condition|)
block|{
name|FieldDef
name|def
init|=
name|fieldDefs
index|[
name|i2
index|]
decl_stmt|;
name|def
operator|.
name|val
operator|=
name|def
operator|.
name|val
operator|.
name|toInt
argument_list|()
operator|+
literal|1
expr_stmt|;
name|fieldDefs
index|[
name|i2
index|]
operator|=
name|def
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|recordMySQL
name|void
name|tst_QSqlDatabase
operator|::
name|recordMySQL
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|FieldDef
name|bin10
decl_stmt|,
name|varbin10
decl_stmt|;
name|int
name|major
init|=
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|minor
init|=
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|revision
init|=
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|vernum
init|=
operator|(
name|major
operator|<<
literal|16
operator|)
operator|+
operator|(
name|minor
operator|<<
literal|8
operator|)
operator|+
name|revision
decl_stmt|;
comment|/* The below is broken in mysql below 5.0.15         see http://dev.mysql.com/doc/refman/5.0/en/binary-varbinary.html         specifically: Before MySQL 5.0.15, the pad value is space. Values are right-padded         with space on insert, and trailing spaces are removed on select.     */
if|if
condition|(
name|vernum
operator|>=
operator|(
operator|(
literal|5
operator|<<
literal|16
operator|)
operator|+
literal|15
operator|)
condition|)
block|{
name|bin10
operator|=
name|FieldDef
argument_list|(
literal|"binary(10)"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QString
argument_list|(
literal|"123abc    "
argument_list|)
argument_list|)
expr_stmt|;
name|varbin10
operator|=
name|FieldDef
argument_list|(
literal|"varbinary(10)"
argument_list|,
name|QVariant
operator|::
name|ByteArray
argument_list|,
name|QString
argument_list|(
literal|"123abcv   "
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|QDateTime
name|dt
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"tinyint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|127
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"tinyint unsigned"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|255
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|32767
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallint unsigned"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|65535
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"mediumint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|8388607
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"mediumint unsigned"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|16777215
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"integer"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2147483647
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"integer unsigned"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|4294967295u
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bigint"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bigint unsigned"
argument_list|,
name|QVariant
operator|::
name|ULongLong
argument_list|,
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.12345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.123456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"decimal(10, 9)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.123456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric(5, 2)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|123.67
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"date"
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|,
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"datetime"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timestamp"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|dt
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"time"
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|dt
operator|.
name|time
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"year"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2003
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"Blah"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
literal|"BlahBlah"
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"tinytext"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah5"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"text"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah6"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"mediumtext"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah7"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"longtext"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"blah8"
argument_list|)
argument_list|)
block|,
comment|// SET OF?
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT DATE_SUB(CURDATE(), INTERVAL 2 DAY)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDateTime
argument_list|()
operator|.
name|date
argument_list|()
argument_list|,
name|QDate
operator|::
name|currentDate
argument_list|()
operator|.
name|addDays
argument_list|(
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordDB2
name|void
name|tst_QSqlDatabase
operator|::
name|recordDB2
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah1"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah2"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"long varchar"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah3"
argument_list|)
argument_list|)
block|,
comment|// using BOOLEAN results in "SQL0486N  The BOOLEAN data type is currently only supported internally."
comment|//X	FieldDef("boolean" , QVariant::Bool,		QVariant(true, 1)),
name|FieldDef
argument_list|(
literal|"smallint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|32767
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"integer"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2147483647
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bigint"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"real"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.12345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.23456789
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"decimal(10,9)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.234567891
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric(10,9)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.234567891
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"date"
argument_list|,
name|QVariant
operator|::
name|Date
argument_list|,
name|QDate
operator|::
name|currentDate
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"time"
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|QTime
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timestamp"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
block|,
comment|//     FieldDef("graphic(20)", QVariant::String,	QString("Blah4")),
comment|//     FieldDef("vargraphic(20)", QVariant::String,	QString("Blah5")),
comment|//     FieldDef("long vargraphic", QVariant::String,	QString("Blah6")),
comment|//X	FieldDef("datalink", QVariant::String,		QString("DLVALUE('Blah10')")),
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordIBase
name|void
name|tst_QSqlDatabase
operator|::
name|recordIBase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah1"
argument_list|)
argument_list|,
literal|false
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah2"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"smallint"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|32767
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.2345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"double precision"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.2345678
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"timestamp"
argument_list|,
name|QVariant
operator|::
name|DateTime
argument_list|,
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"time"
argument_list|,
name|QVariant
operator|::
name|Time
argument_list|,
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"decimal(18)"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric(5,2)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|123.45
argument_list|)
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordSQLite
name|void
name|tst_QSqlDatabase
operator|::
name|recordSQLite
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
comment|// The affinity of these fields are TEXT so SQLite should give us strings, not ints or doubles.
name|FieldDef
argument_list|(
literal|"char(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"123"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"123.4"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"clob"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"123.45"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"text"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"123.456"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"integer"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
name|QVariant
argument_list|(
literal|13
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
name|QVariant
argument_list|(
literal|12
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"real"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
name|QVariant
argument_list|(
literal|1.234567890123456
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordSQLServer
name|void
name|tst_QSqlDatabase
operator|::
name|recordSQLServer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"SQL server specific test"
argument_list|)
expr_stmt|;
comment|// ### TODO: Add the rest of the fields
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah1"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"bigint"
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|,
literal|12345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|123456
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"tinyint"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|255
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"float"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.12345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"numeric(5,2)"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|123.45
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"uniqueidentifier"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"AA7DF450-F119-11CD-8465-00AA00425D90"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recordAccess
name|void
name|tst_QSqlDatabase
operator|::
name|recordAccess
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"MS Access specific test"
argument_list|)
expr_stmt|;
name|QString
name|memo
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
name|memo
operator|.
name|append
argument_list|(
literal|"ABCDEFGH12345678abcdefgh12345678"
argument_list|)
expr_stmt|;
comment|// ### TODO: Add the rest of the fields
specifier|static
specifier|const
name|FieldDef
name|fieldDefs
index|[]
init|=
block|{
name|FieldDef
argument_list|(
literal|"varchar(20)"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|QString
argument_list|(
literal|"Blah1"
argument_list|)
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"single"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.12345
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|,
literal|1.123456
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"byte"
argument_list|,
name|QVariant
operator|::
name|UInt
argument_list|,
literal|255
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"long"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|,
literal|2147483647
argument_list|)
block|,
name|FieldDef
argument_list|(
literal|"memo"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|,
name|memo
argument_list|)
block|,
name|FieldDef
argument_list|()
block|}
decl_stmt|;
specifier|const
name|int
name|fieldCount
init|=
name|createFieldTable
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fieldCount
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commonFieldTest
argument_list|(
name|fieldDefs
argument_list|,
name|db
argument_list|,
name|fieldCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transaction
name|void
name|tst_QSqlDatabase
operator|::
name|transaction
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Transactions
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS not transaction capable"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|transaction
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (40, 'VarChar40', 'Char40', 40.40)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" where id = 40"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|transaction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" where id = 40"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|transaction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qtest
operator|+
literal|" values (41, 'VarChar41', 'Char41', 41.41)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" where id = 41"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// for SQLite which does not allow any references on rows that shall be rolled back
if|if
condition|(
operator|!
name|db
operator|.
name|rollback
argument_list|()
condition|)
block|{
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"MySQL transaction failed: "
operator|+
name|tst_Databases
operator|::
name|printError
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"Could not rollback transaction: "
operator|+
name|tst_Databases
operator|::
name|printError
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest
operator|+
literal|" where id = 41"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
operator|&&
name|dbName
operator|.
name|contains
argument_list|(
literal|"MySQL"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Some odbc drivers don't actually roll back despite telling us they do, especially the mysql driver"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bigIntField
name|void
name|tst_QSqlDatabase
operator|::
name|bigIntField
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QString
name|drvName
init|=
name|db
operator|.
name|driverName
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|qtest_bigint
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_bigint"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionInt64
argument_list|)
expr_stmt|;
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_bigint
operator|+
literal|" (id int, t_s64bit bigint, t_u64bit bigint unsigned)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QPSQL"
argument_list|)
operator|||
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QDB2"
argument_list|)
operator|||
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_bigint
operator|+
literal|"(id int, t_s64bit bigint, t_u64bit bigint)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qtest_bigint
operator|+
literal|" (id int, t_s64bit int, t_u64bit int)"
argument_list|)
argument_list|)
expr_stmt|;
comment|//} else if (drvName.startsWith("QIBASE")) {
comment|//    QVERIFY_SQL(q, exec("create table " + qtest_bigint + " (id int, t_s64bit int64, t_u64bit int64)"));
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"no 64 bit integer support"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|q
operator|.
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qtest_bigint
operator|+
literal|" values (?, ?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|qlonglong
name|ll
init|=
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
decl_stmt|;
name|qulonglong
name|ull
init|=
name|Q_UINT64_C
argument_list|(
literal|18446744073709551615
argument_list|)
decl_stmt|;
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|||
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
block|{
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|ll
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
operator|-
name|ll
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// usinged bigint fields not supported - a cast is necessary
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|ll
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
operator|(
name|qlonglong
operator|)
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
operator|-
name|ll
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
operator|(
name|qlonglong
operator|)
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|q
operator|.
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qtest_bigint
operator|+
literal|" order by id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
operator|(
name|double
operator|)
name|ll
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
name|ll
argument_list|)
expr_stmt|;
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Oracle driver lacks support for unsigned int64 types"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
name|ull
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
operator|-
name|ll
argument_list|)
expr_stmt|;
if|if
condition|(
name|drvName
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Oracle driver lacks support for unsigned int64 types"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toULongLong
argument_list|()
argument_list|,
name|ull
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caseSensivity
name|void
name|tst_QSqlDatabase
operator|::
name|caseSensivity
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|bool
name|cs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QTDS"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
condition|)
name|cs
operator|=
literal|true
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cs
condition|)
block|{
name|rec
operator|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"QTEST"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|=
name|db
operator|.
name|record
argument_list|(
name|qTableName
argument_list|(
literal|"qTesT"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|rec
operator|=
name|db
operator|.
name|primaryIndex
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cs
condition|)
block|{
name|rec
operator|=
name|db
operator|.
name|primaryIndex
argument_list|(
name|qTableName
argument_list|(
literal|"QTEST"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rec
operator|=
name|db
operator|.
name|primaryIndex
argument_list|(
name|qTableName
argument_list|(
literal|"qTesT"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|noEscapedFieldNamesInRecord
name|void
name|tst_QSqlDatabase
operator|::
name|noEscapedFieldNamesInRecord
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QString
name|fieldname
argument_list|(
literal|"t_varchar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QIBASE"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QDB2"
argument_list|)
condition|)
name|fieldname
operator|=
name|fieldname
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|query
init|=
literal|"SELECT "
operator|+
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|fieldname
argument_list|,
name|QSqlDriver
operator|::
name|FieldName
argument_list|)
operator|+
literal|" FROM "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fieldname
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|psql_schemas
name|void
name|tst_QSqlDatabase
operator|::
name|psql_schemas
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|SystemTables
argument_list|)
operator|.
name|contains
argument_list|(
literal|"pg_namespace"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"server does not support schemas"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
block|{
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE SCHEMA "
operator|+
name|qTableName
argument_list|(
literal|"qtestschema"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|table
init|=
name|qTableName
argument_list|(
literal|"qtestschema"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|'.'
operator|+
name|qTableName
argument_list|(
literal|"qtesttable"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|table
operator|+
literal|" (id int primary key, name varchar(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|tables
argument_list|()
operator|.
name|contains
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|db
operator|.
name|record
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlIndex
name|idx
init|=
name|db
operator|.
name|primaryIndex
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|idx
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|psql_escapedIdentifiers
name|void
name|tst_QSqlDatabase
operator|::
name|psql_escapedIdentifiers
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|QSqlDriver
modifier|*
name|drv
init|=
name|db
operator|.
name|driver
argument_list|()
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|SystemTables
argument_list|)
operator|.
name|contains
argument_list|(
literal|"pg_namespace"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"server does not support schemas"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isPostgreSQL
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|schemaName
argument_list|(
name|qTableName
argument_list|(
literal|"qtestScHeMa"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|field1Name
argument_list|(
name|QLatin1String
argument_list|(
literal|"fIeLdNaMe"
argument_list|)
argument_list|)
decl_stmt|,
name|field2Name
argument_list|(
name|QLatin1String
argument_list|(
literal|"ZuLu"
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP SCHEMA \"%1\" CASCADE"
argument_list|)
operator|.
name|arg
argument_list|(
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|createSchema
init|=
name|QString
argument_list|(
literal|"CREATE SCHEMA \"%1\""
argument_list|)
operator|.
name|arg
argument_list|(
name|schemaName
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|createSchema
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|createTable
init|=
name|QString
argument_list|(
literal|"CREATE TABLE \"%1\".\"%2\" (\"%3\" int PRIMARY KEY, \"%4\" varchar(20))"
argument_list|)
operator|.
name|arg
argument_list|(
name|schemaName
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|field1Name
argument_list|)
operator|.
name|arg
argument_list|(
name|field2Name
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|createTable
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|tables
argument_list|()
operator|.
name|contains
argument_list|(
name|schemaName
operator|+
literal|'.'
operator|+
name|tableName
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlField
name|fld1
argument_list|(
name|field1Name
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QSqlField
name|fld2
argument_list|(
name|field2Name
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlRecord
name|rec
decl_stmt|;
name|rec
operator|.
name|append
argument_list|(
name|fld1
argument_list|)
expr_stmt|;
name|rec
operator|.
name|append
argument_list|(
name|fld2
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|drv
operator|->
name|sqlStatement
argument_list|(
name|QSqlDriver
operator|::
name|SelectStatement
argument_list|,
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|schemaName
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
operator|+
literal|'.'
operator|+
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|tableName
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
argument_list|,
name|rec
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|q
operator|.
name|record
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|field1Name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|field2Name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP SCHEMA \"%1\" CASCADE"
argument_list|)
operator|.
name|arg
argument_list|(
name|schemaName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|psql_escapeBytea
name|void
name|tst_QSqlDatabase
operator|::
name|psql_escapeBytea
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|char
name|dta
index|[
literal|4
index|]
init|=
block|{
literal|'\x71'
block|,
literal|'\x14'
block|,
literal|'\x32'
block|,
literal|'\x81'
block|}
decl_stmt|;
name|QByteArray
name|ba
argument_list|(
name|dta
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"batable"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (ba bytea)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|iq
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|iq
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iq
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QVariant
argument_list|(
name|ba
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|iq
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT ba FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|res
init|=
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|ba
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ba
index|[
name|i
index|]
operator|!=
name|res
index|[
name|i
index|]
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|i
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bug_249059
name|void
name|tst_QSqlDatabase
operator|::
name|bug_249059
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QString
name|version
init|=
name|tst_Databases
operator|::
name|getPSQLVersion
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|double
name|ver
init|=
name|version
operator|.
name|section
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|ver
operator|<
literal|7.3
condition|)
name|QSKIP
argument_list|(
literal|"Test requires PostgreSQL>= 7.3"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"bug_249059"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (dt timestamp, t time)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|iq
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|iq
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?, ?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iq
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"2001-09-09 04:05:06.789 -5:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iq
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"04:05:06.789 -5:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|iq
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|iq
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"2001-09-09 04:05:06.789 +5:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iq
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|QVariant
argument_list|(
name|QString
argument_list|(
literal|"04:05:06.789 +5:00"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|iq
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT dt, t FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QDateTime
name|dt1
init|=
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|QTime
name|t1
init|=
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toTime
argument_list|()
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QDateTime
name|dt2
init|=
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDateTime
argument_list|()
decl_stmt|;
name|QTime
name|t2
init|=
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toTime
argument_list|()
decl_stmt|;
comment|// These will fail when timezone support is added, when that's the case, set the second record to 14:05:06.789 and it should work correctly
name|QCOMPARE
argument_list|(
name|dt1
argument_list|,
name|dt2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test should be rewritten to work with Oracle as well - or the Oracle driver
end_comment
begin_comment
comment|// should be fixed to make this test pass (handle overflows)
end_comment
begin_function
DECL|function|precisionPolicy
name|void
name|tst_QSqlDatabase
operator|::
name|precisionPolicy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|//     DBMS_SPECIFIC(db, "QPSQL");
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_prec"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|LowPrecisionNumbers
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Driver or database doesn't support setting precision policy"
argument_list|)
expr_stmt|;
comment|// Create a test table with some data
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (id smallint, num number)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (id smallint, num numeric(18,5))"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?, ?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
literal|1850000000000.0001
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// These are expected to pass
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|HighPrecision
argument_list|)
expr_stmt|;
name|QString
name|query
init|=
name|QString
argument_list|(
literal|"SELECT num FROM %1 WHERE id = 1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionInt64
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|LongLong
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toLongLong
argument_list|()
argument_list|,
operator|(
name|qlonglong
operator|)
literal|123
argument_list|)
expr_stmt|;
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionInt32
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionDouble
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
operator|(
name|double
operator|)
literal|123
argument_list|)
expr_stmt|;
name|query
operator|=
name|QString
argument_list|(
literal|"SELECT num FROM %1 WHERE id = 2"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1850000000000.0001"
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
comment|// Postgres returns invalid QVariants on overflow
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|HighPrecision
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"SQLite returns this value as determined by contents of the field, not the declaration"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|q
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionInt64
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|"QOCI"
argument_list|,
literal|"Oracle fails here, to retrieve next"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QSql
operator|::
name|NumericalPrecisionPolicy
name|oldPrecision
init|=
name|db
operator|.
name|numericalPrecisionPolicy
argument_list|()
decl_stmt|;
name|db
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|QSql
operator|::
name|LowPrecisionInt64
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q2
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q2
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT num FROM %1 WHERE id = 2"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|db
operator|.
name|setNumericalPrecisionPolicy
argument_list|(
name|oldPrecision
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test needs a ODBC data source containing MYSQL in it's name
end_comment
begin_function
DECL|function|mysqlOdbc_unsignedIntegers
name|void
name|tst_QSqlDatabase
operator|::
name|mysqlOdbc_unsignedIntegers
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
operator|||
operator|!
name|dbName
operator|.
name|toUpper
argument_list|()
operator|.
name|contains
argument_list|(
literal|"MYSQL"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"MySQL through ODBC-driver specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"uint"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (foo integer(10) unsigned, bar integer(10))"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (-4000000000, -4000000000)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (4000000000, 4000000000)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT foo, bar FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"-2147483648"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"4000000000"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"2147483647"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accessOdbc_strings
name|void
name|tst_QSqlDatabase
operator|::
name|accessOdbc_strings
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"MS Access specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"strings"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (aStr memo, bStr memo, cStr memo, dStr memo"
literal|", eStr memo, fStr memo, gStr memo, hStr memo)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|aStr
decl_stmt|,
name|bStr
decl_stmt|,
name|cStr
decl_stmt|,
name|dStr
decl_stmt|,
name|eStr
decl_stmt|,
name|fStr
decl_stmt|,
name|gStr
decl_stmt|,
name|hStr
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|aStr
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|bStr
operator|.
name|fill
argument_list|(
literal|'B'
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
name|cStr
operator|.
name|fill
argument_list|(
literal|'C'
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|3
argument_list|,
name|dStr
operator|.
name|fill
argument_list|(
literal|'D'
argument_list|,
literal|129
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|4
argument_list|,
name|eStr
operator|.
name|fill
argument_list|(
literal|'E'
argument_list|,
literal|254
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|5
argument_list|,
name|fStr
operator|.
name|fill
argument_list|(
literal|'F'
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|6
argument_list|,
name|gStr
operator|.
name|fill
argument_list|(
literal|'G'
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|7
argument_list|,
name|hStr
operator|.
name|fill
argument_list|(
literal|'H'
argument_list|,
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT aStr, bStr, cStr, dStr, eStr, fStr, gStr, hStr FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|next
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|aStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|bStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|cStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|eStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|5
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|fStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|gStr
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|7
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|hStr
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For task 125053
end_comment
begin_function
DECL|function|ibase_numericFields
name|void
name|tst_QSqlDatabase
operator|::
name|ibase_numericFields
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"numericfields"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (id int not null, num1 NUMERIC(2,1), "
literal|"num2 NUMERIC(5,2), num3 NUMERIC(10,3), "
literal|"num4 NUMERIC(18,4))"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (1, 1.1, 123.45, 1234567.123, 10203040506070.8090)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?, ?, ?, ?, ?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|num1
init|=
literal|1.1
decl_stmt|;
name|double
name|num2
init|=
literal|123.45
decl_stmt|;
name|double
name|num3
init|=
literal|1234567.123
decl_stmt|;
name|double
name|num4
init|=
literal|10203040506070.8090
decl_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|QVariant
argument_list|(
name|num1
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|2
argument_list|,
name|QVariant
argument_list|(
name|num2
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|3
argument_list|,
name|QVariant
argument_list|(
name|num3
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|4
argument_list|,
name|QVariant
argument_list|(
name|num4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT id, num1, num2, num3, num4 FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
operator|++
name|id
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|num1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|num2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|num3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|num4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|4
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|requiredStatus
argument_list|()
operator|==
name|QSqlField
operator|::
name|Required
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|requiredStatus
argument_list|()
operator|==
name|QSqlField
operator|::
name|Optional
argument_list|)
expr_stmt|;
block|}
name|QSqlRecord
name|r
init|=
name|db
operator|.
name|record
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|precision
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|requiredStatus
argument_list|()
operator|==
name|QSqlField
operator|::
name|Required
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|requiredStatus
argument_list|()
operator|==
name|QSqlField
operator|::
name|Optional
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ibase_fetchBlobs
name|void
name|tst_QSqlDatabase
operator|::
name|ibase_fetchBlobs
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_ibaseblobs"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1 (blob1 BLOB segment size 256)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|'x'
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|'x'
argument_list|,
literal|16383
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES (?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|'x'
argument_list|,
literal|17408
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT * FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|16383
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|17408
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ibase_procWithoutReturnValues
name|void
name|tst_QSqlDatabase
operator|::
name|ibase_procWithoutReturnValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_proc1"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"drop procedure %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|procName
operator|+
literal|" (str VARCHAR(10))\nAS BEGIN\nstr='test';\nEND;"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"execute procedure %1('qtest')"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"drop procedure %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ibase_procWithReturnValues
name|void
name|tst_QSqlDatabase
operator|::
name|ibase_procWithReturnValues
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QIBASE"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"InterBase specific test"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|procName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_proc2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"drop procedure %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE PROCEDURE "
operator|+
name|procName
operator|+
literal|" ("
literal|"\nABC INTEGER)"
literal|"\nRETURNS ("
literal|"\nRESULT INTEGER)"
literal|"\nAS"
literal|"\nbegin"
literal|"\nRESULT = 10 * ABC;"
literal|"\nsuspend;"
literal|"\nend"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Interbase procedures can be executed in two ways: EXECUTE PROCEDURE or SELECT
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"execute procedure %1(123)"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1230
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"select result from %1(456)"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4560
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QLatin1String
argument_list|(
literal|"execute procedure "
argument_list|)
operator|+
name|procName
operator|+
name|QLatin1String
argument_list|(
literal|"(?)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1230
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|456
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4560
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"drop procedure %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|formatValueTrimStrings
name|void
name|tst_QSqlDatabase
operator|::
name|formatValueTrimStrings
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 (id, t_varchar, t_char) values (50, 'Trim Test ', 'Trim Test 2   ')"
argument_list|)
operator|.
name|arg
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 (id, t_varchar, t_char) values (51, 'TrimTest', 'Trim Test 2')"
argument_list|)
operator|.
name|arg
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 (id, t_varchar, t_char) values (52, ' ', '    ')"
argument_list|)
operator|.
name|arg
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT t_varchar, t_char FROM %1 WHERE id>= 50 AND id<= 52 ORDER BY id"
argument_list|)
operator|.
name|arg
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"'Trim Test'"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"'Trim Test 2'"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"'TrimTest'"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"'Trim Test 2'"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"''"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|formatValue
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"''"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|odbc_reopenDatabase
name|void
name|tst_QSqlDatabase
operator|::
name|odbc_reopenDatabase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|odbc_bindBoolean
name|void
name|tst_QSqlDatabase
operator|::
name|odbc_bindBoolean
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isMySQL
argument_list|(
name|db
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"MySql has inconsistent behaviour of bit field type across versions."
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|qTableName
argument_list|(
literal|"qtestBindBool"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id int, boolvalue bit)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Bind and insert
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|qTableName
argument_list|(
literal|"qtestBindBool"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" VALUES(?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrive
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT id, boolvalue FROM "
operator|+
name|qTableName
argument_list|(
literal|"qtestBindBool"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" ORDER BY id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|odbc_testqGetString
name|void
name|tst_QSqlDatabase
operator|::
name|odbc_testqGetString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|testqGetString
argument_list|(
name|qTableName
argument_list|(
literal|"testqGetString"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|testqGetString
operator|+
literal|"(id int, vcvalue varchar(MAX))"
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|testqGetString
operator|+
literal|"(id int, vcvalue memo)"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|testqGetString
operator|+
literal|"(id int, vcvalue varchar(65538))"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|largeString
decl_stmt|;
name|largeString
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
literal|65536
argument_list|)
expr_stmt|;
comment|// Bind and insert
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"INSERT INTO "
operator|+
name|testqGetString
operator|+
literal|" VALUES(?, ?)"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|largeString
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|largeString
operator|+
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|1
argument_list|,
name|largeString
operator|+
name|QLatin1Char
argument_list|(
literal|'B'
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'C'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
comment|// Retrive
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT id, vcvalue FROM "
operator|+
name|testqGetString
operator|+
literal|" ORDER BY id"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
literal|65536
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
literal|65537
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
literal|65538
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mysql_multiselect
name|void
name|tst_QSqlDatabase
operator|::
name|mysql_multiselect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|qtest
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|version
init|=
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|double
name|ver
init|=
name|version
operator|.
name|section
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|ver
operator|<
literal|4.1
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 4.1"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qtest
operator|+
literal|"; SELECT * FROM "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qtest
operator|+
literal|"; SELECT * FROM "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qtest
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ibase_useCustomCharset
name|void
name|tst_QSqlDatabase
operator|::
name|ibase_useCustomCharset
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QString
name|nonlatin1string
argument_list|(
literal|"ï¿½ï¿½"
argument_list|)
decl_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|.
name|setConnectOptions
argument_list|(
literal|"ISC_DPB_LC_CTYPE=Latin1"
argument_list|)
expr_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"latin1table"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(text VARCHAR(6) CHARACTER SET Latin1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES(?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|nonlatin1string
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT text FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|toHex
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|toHex
argument_list|(
name|nonlatin1string
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oci_serverDetach
name|void
name|tst_QSqlDatabase
operator|::
name|oci_serverDetach
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|open
argument_list|()
condition|)
block|{
name|QSqlQuery
name|query
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"SELECT 1 FROM DUAL"
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
name|tst_Databases
operator|::
name|printError
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|db
operator|.
name|open
argument_list|()
condition|)
name|qFatal
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|tst_Databases
operator|::
name|printError
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oci_xmltypeSupport
name|void
name|tst_QSqlDatabase
operator|::
name|oci_xmltypeSupport
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_xmltype"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|xml
argument_list|(
literal|"<?xml version=\"1.0\"?>\n<TABLE_NAME>MY_TABLE</TABLE_NAME>\n"
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
comment|// Embedding the XML in the statement
if|if
condition|(
operator|!
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(xmldata xmltype)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This test requries xml type support"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 values('%2')"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
operator|.
name|arg
argument_list|(
name|xml
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT a.xmldata.getStringVal() FROM %1 a"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
comment|// Binding the XML with a prepared statement
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 values(?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT a.xmldata.getStringVal() FROM %1 a"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|last
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oci_fieldLength
name|void
name|tst_QSqlDatabase
operator|::
name|oci_fieldLength
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT t_varchar, t_char FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oci_synonymstest
name|void
name|tst_QSqlDatabase
operator|::
name|oci_synonymstest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|creator
argument_list|(
name|qTableName
argument_list|(
literal|"CREATOR"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|appuser
argument_list|(
name|qTableName
argument_list|(
literal|"APPUSER"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|,
name|table1
argument_list|(
name|qTableName
argument_list|(
literal|"TABLE1"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
comment|//     QVERIFY_SQL(q, exec("drop public synonym "+table1));
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"create user %1 identified by %2 default tablespace users temporary tablespace temp"
argument_list|)
operator|.
name|arg
argument_list|(
name|creator
argument_list|)
operator|.
name|arg
argument_list|(
name|creator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"grant CONNECT to %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|creator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"grant RESOURCE to %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|creator
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db2
init|=
name|db
operator|.
name|cloneDatabase
argument_list|(
name|db
argument_list|,
name|QLatin1String
argument_list|(
literal|"oci_synonymstest"
argument_list|)
argument_list|)
decl_stmt|;
name|db2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db2
argument_list|,
name|open
argument_list|(
name|creator
argument_list|,
name|creator
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q2
argument_list|(
name|db2
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"create table %1(id int primary key)"
argument_list|)
operator|.
name|arg
argument_list|(
name|table1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"create user %1 identified by %2 default tablespace users temporary tablespace temp"
argument_list|)
operator|.
name|arg
argument_list|(
name|appuser
argument_list|)
operator|.
name|arg
argument_list|(
name|appuser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"grant CREATE ANY SYNONYM to %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|appuser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"grant CONNECT to %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|appuser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"grant select, insert, update, delete on %1 to %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|table1
argument_list|)
operator|.
name|arg
argument_list|(
name|appuser
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db3
init|=
name|db
operator|.
name|cloneDatabase
argument_list|(
name|db
argument_list|,
name|QLatin1String
argument_list|(
literal|"oci_synonymstest2"
argument_list|)
argument_list|)
decl_stmt|;
name|db3
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db3
argument_list|,
name|open
argument_list|(
name|appuser
argument_list|,
name|appuser
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q3
argument_list|(
name|db3
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q3
argument_list|,
name|exec
argument_list|(
literal|"create synonym "
operator|+
name|appuser
operator|+
literal|'.'
operator|+
name|qTableName
argument_list|(
literal|"synonyms"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" for "
operator|+
name|creator
operator|+
literal|'.'
operator|+
name|table1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db3
argument_list|,
name|tables
argument_list|()
operator|.
name|filter
argument_list|(
name|qTableName
argument_list|(
literal|"synonyms"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test isn't really necessary as SQL_GUID / uniqueidentifier is
end_comment
begin_comment
comment|// already tested in recordSQLServer().
end_comment
begin_function
DECL|function|odbc_uniqueidentifier
name|void
name|tst_QSqlDatabase
operator|::
name|odbc_uniqueidentifier
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tst_Databases
operator|::
name|isSqlServer
argument_list|(
name|db
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"SQL Server (ODBC) specific test"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest_sqlguid"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|guid
init|=
name|QString
argument_list|(
literal|"AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
argument_list|)
decl_stmt|;
name|QString
name|invalidGuid
init|=
name|QString
argument_list|(
literal|"GAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE"
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(id uniqueidentifier)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES(?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|guid
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|invalidGuid
argument_list|)
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"The GUID string is required to be correctly formated!"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT id FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|guid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getConnectionName
name|void
name|tst_QSqlDatabase
operator|::
name|getConnectionName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|connectionName
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|clone
init|=
name|QSqlDatabase
operator|::
name|cloneDatabase
argument_list|(
name|db
argument_list|,
literal|"clonedDatabase"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|.
name|connectionName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"clonedDatabase"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSqlDatabasePrivate::removeDatabase: "
literal|"connection 'clonedDatabase' is still in use, all queries will cease to work."
argument_list|)
expr_stmt|;
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"clonedDatabase"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clone
operator|.
name|connectionName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|db
operator|.
name|connectionName
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|odbc_uintfield
name|void
name|tst_QSqlDatabase
operator|::
name|odbc_uintfield
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"uint_table"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|val
init|=
literal|4294967295U
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|tst_Databases
operator|::
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(num number)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(num numeric(10))"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES(?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT num FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventNotification
name|void
name|tst_QSqlDatabase
operator|::
name|eventNotification
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlDriver
modifier|*
name|driver
init|=
name|db
operator|.
name|driver
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|driver
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|EventNotifications
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"DBMS doesn't support event notifications"
argument_list|)
expr_stmt|;
comment|// Not subscribed to any events yet
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Subscribe to "event_foo"
name|QVERIFY_SQL
argument_list|(
operator|*
name|driver
argument_list|,
name|subscribeToNotification
argument_list|(
name|QLatin1String
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|contains
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Can't subscribe to the same event multiple times
name|QVERIFY2
argument_list|(
operator|!
name|driver
operator|->
name|subscribeToNotification
argument_list|(
name|QLatin1String
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
argument_list|,
literal|"Shouldn't be able to subscribe to event_foo twice"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Unsubscribe from "event_foo"
name|QVERIFY_SQL
argument_list|(
operator|*
name|driver
argument_list|,
name|unsubscribeFromNotification
argument_list|(
name|QLatin1String
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Re-subscribing to "event_foo" now is allowed
name|QVERIFY_SQL
argument_list|(
operator|*
name|driver
argument_list|,
name|subscribeToNotification
argument_list|(
name|QLatin1String
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// closing the connection causes automatically unsubscription from all events
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Can't subscribe to anything while database is closed
name|QVERIFY2
argument_list|(
operator|!
name|driver
operator|->
name|subscribeToNotification
argument_list|(
name|QLatin1String
argument_list|(
literal|"event_foo"
argument_list|)
argument_list|)
argument_list|,
literal|"Shouldn't be able to subscribe to event_foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|driver
operator|->
name|subscribedToNotifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|db
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventNotificationIBase
name|void
name|tst_QSqlDatabase
operator|::
name|eventNotificationIBase
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|procedureName
argument_list|(
name|qTableName
argument_list|(
literal|"posteventProc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlDriver
modifier|*
name|driver
init|=
name|db
operator|.
name|driver
argument_list|()
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
operator|*
name|driver
argument_list|,
name|subscribeToNotification
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// Interbase needs some time to call the driver callback.
name|db
operator|.
name|transaction
argument_list|()
expr_stmt|;
comment|// InterBase events are posted from within transactions.
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP PROCEDURE %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE PROCEDURE %1\nAS BEGIN\nPOST_EVENT '%1';\nEND;"
argument_list|)
operator|.
name|arg
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"EXECUTE PROCEDURE %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|driver
argument_list|,
name|SIGNAL
argument_list|(
name|notification
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// No notifications are posted until the transaction is committed.
name|QTest
operator|::
name|qWait
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// Interbase needs some time to post the notification and call the driver callback.
comment|// This happends from another thread, and we have to process events in order for the
comment|// event handler in the driver to be executed and emit the notification signal.
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|spy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
name|procedureName
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
operator|*
name|driver
argument_list|,
name|unsubscribeFromNotification
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"DROP PROCEDURE %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventNotificationPSQL
name|void
name|tst_QSqlDatabase
operator|::
name|eventNotificationPSQL
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|query
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QString
name|procedureName
init|=
name|qTableName
argument_list|(
literal|"posteventProc"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QString
name|payload
init|=
literal|"payload"
decl_stmt|;
name|QSqlDriver
modifier|&
name|driver
init|=
operator|*
operator|(
name|db
operator|.
name|driver
argument_list|()
operator|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|driver
argument_list|,
name|subscribeToNotification
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|db
operator|.
name|driver
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|notification
argument_list|(
name|QString
argument_list|,
name|QSqlDriver
operator|::
name|NotificationSource
argument_list|,
name|QVariant
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"NOTIFY \"%1\", '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|procedureName
argument_list|)
operator|.
name|arg
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|spy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|procedureName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QSqlDriver
operator|::
name|NotificationSource
argument_list|>
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QSqlDriver
operator|::
name|SelfSource
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QVariant
argument_list|>
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|driver
argument_list|,
name|unsubscribeFromNotification
argument_list|(
name|procedureName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlite_bindAndFetchUInt
name|void
name|tst_QSqlDatabase
operator|::
name|sqlite_bindAndFetchUInt
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QSQLITE2"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"SQLite3 specific test"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"uint_test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"CREATE TABLE %1(uint_field UNSIGNED INTEGER)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
name|QString
argument_list|(
literal|"INSERT INTO %1 VALUES(?)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|addBindValue
argument_list|(
literal|4000000000U
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT uint_field FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|// All integers in SQLite are signed, so even though we bound the value
comment|// as an UInt it will come back as a LongLong
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|,
name|QVariant
operator|::
name|LongLong
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toUInt
argument_list|()
argument_list|,
literal|4000000000U
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|db2_valueCacheUpdate
name|void
name|tst_QSqlDatabase
operator|::
name|db2_valueCacheUpdate
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|tableName
argument_list|(
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
name|QString
argument_list|(
literal|"SELECT id, t_varchar, t_char, t_numeric FROM %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|next
argument_list|()
expr_stmt|;
name|QVariant
name|c4
init|=
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|QVariant
name|c3
init|=
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QVariant
name|c2
init|=
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QVariant
name|c1
init|=
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|c4
operator|.
name|toString
argument_list|()
argument_list|,
name|q
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c3
operator|.
name|toString
argument_list|()
argument_list|,
name|q
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c2
operator|.
name|toString
argument_list|()
argument_list|,
name|q
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c1
operator|.
name|toString
argument_list|()
argument_list|,
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlStatementUseIsNull_189093
name|void
name|tst_QSqlDatabase
operator|::
name|sqlStatementUseIsNull_189093
parameter_list|()
block|{
comment|// NULL = NULL is unknown, the sqlStatment must use IS NULL
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|// select a record with NULL value
name|QSqlQuery
name|q
argument_list|(
name|QString
operator|::
name|null
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" where id = 4"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlDriver
modifier|*
name|driver
init|=
name|db
operator|.
name|driver
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|QString
name|preparedStatment
init|=
name|driver
operator|->
name|sqlStatement
argument_list|(
name|QSqlDriver
operator|::
name|WhereStatement
argument_list|,
name|QString
argument_list|(
literal|"qtest"
argument_list|)
argument_list|,
name|q
operator|.
name|record
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|preparedStatment
operator|.
name|count
argument_list|(
literal|"IS NULL"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QString
name|statment
init|=
name|driver
operator|->
name|sqlStatement
argument_list|(
name|QSqlDriver
operator|::
name|WhereStatement
argument_list|,
name|QString
argument_list|(
literal|"qtest"
argument_list|)
argument_list|,
name|q
operator|.
name|record
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|statment
operator|.
name|count
argument_list|(
literal|"IS NULL"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mysql_savepointtest
name|void
name|tst_QSqlDatabase
operator|::
name|mysql_savepointtest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QMYSQL"
argument_list|)
operator|&&
name|tst_Databases
operator|::
name|getMySqlVersion
argument_list|(
name|db
argument_list|)
operator|.
name|section
argument_list|(
name|QChar
argument_list|(
literal|'.'
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toDouble
argument_list|()
operator|<
literal|4.1
condition|)
name|QSKIP
argument_list|(
literal|"Test requires MySQL>= 4.1"
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"begin"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" VALUES (54, 'foo', 'foo', 54.54)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"savepoint foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|oci_tables
name|void
name|tst_QSqlDatabase
operator|::
name|oci_tables
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"Requires specific permissions to create a system table"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|systemTableName
argument_list|(
literal|"sys."
operator|+
name|qTableName
argument_list|(
literal|"mypassword"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"CREATE TABLE "
operator|+
name|systemTableName
operator|+
literal|"(name VARCHAR(20))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|db
operator|.
name|tables
argument_list|()
operator|.
name|contains
argument_list|(
name|systemTableName
operator|.
name|toUpper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|SystemTables
argument_list|)
operator|.
name|contains
argument_list|(
name|systemTableName
operator|.
name|toUpper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sqlite_enable_cache_mode
name|void
name|tst_QSqlDatabase
operator|::
name|sqlite_enable_cache_mode
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbName
operator|.
name|endsWith
argument_list|(
literal|":memory:"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"cache mode is meaningless for :memory: databases"
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
name|db
operator|.
name|setConnectOptions
argument_list|(
literal|"QSQLITE_ENABLE_SHARED_CACHE"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db
argument_list|,
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db2
init|=
name|QSqlDatabase
operator|::
name|cloneDatabase
argument_list|(
name|db
argument_list|,
name|dbName
operator|+
literal|":cachemodeconn2"
argument_list|)
decl_stmt|;
name|db2
operator|.
name|setConnectOptions
argument_list|(
literal|"QSQLITE_ENABLE_SHARED_CACHE"
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|db2
argument_list|,
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|,
name|q2
argument_list|(
name|db2
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"qtest"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSqlDatabase
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsqldatabase.moc"
end_include
end_unit
