begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* possible connection parameters */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TST_DATABASES_H
end_ifndef
begin_define
DECL|macro|TST_DATABASES_H
define|#
directive|define
name|TST_DATABASES_H
end_define
begin_include
include|#
directive|include
file|<QSqlDatabase>
end_include
begin_include
include|#
directive|include
file|<QSqlDriver>
end_include
begin_include
include|#
directive|include
file|<QSqlError>
end_include
begin_include
include|#
directive|include
file|<QSqlQuery>
end_include
begin_include
include|#
directive|include
file|<QRegExp>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QScopedPointer>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QSqlTableModel>
end_include
begin_include
include|#
directive|include
file|<QtSql/private/qsqldriver_p.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
end_if
begin_function
DECL|function|qgethostname
specifier|static
specifier|inline
name|int
name|qgethostname
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
parameter_list|)
block|{
name|qstrcpy
argument_list|(
name|name
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
return|return
literal|9
return|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qgethostname
define|#
directive|define
name|qgethostname
value|gethostname
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|CHECK_DATABASE
define|#
directive|define
name|CHECK_DATABASE
parameter_list|(
name|db
parameter_list|)
define|\
value|if ( !db.isValid() ) { qFatal( "db is Invalid" ); }
end_define
begin_define
DECL|macro|QVERIFY_SQL
define|#
directive|define
name|QVERIFY_SQL
parameter_list|(
name|q
parameter_list|,
name|stmt
parameter_list|)
value|QVERIFY2((q).stmt, tst_Databases::printError((q).lastError(), db))
end_define
begin_define
DECL|macro|QFAIL_SQL
define|#
directive|define
name|QFAIL_SQL
parameter_list|(
name|q
parameter_list|,
name|stmt
parameter_list|)
value|QVERIFY2(!(q).stmt, tst_Databases::printError((q).lastError(), db))
end_define
begin_define
DECL|macro|DBMS_SPECIFIC
define|#
directive|define
name|DBMS_SPECIFIC
parameter_list|(
name|db
parameter_list|,
name|driver
parameter_list|)
define|\
value|if (!db.driverName().startsWith(driver)) { QSKIP(driver " specific test"); }
end_define
begin_comment
comment|// ### use QSystem::hostName if it is integrated in qtest/main
end_comment
begin_function
DECL|function|qGetHostName
specifier|static
name|QString
name|qGetHostName
parameter_list|()
block|{
specifier|static
name|QString
name|hostname
decl_stmt|;
if|if
condition|(
operator|!
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|hostname
return|;
name|char
name|hn
index|[
literal|257
index|]
decl_stmt|;
if|if
condition|(
name|qgethostname
argument_list|(
name|hn
argument_list|,
literal|255
argument_list|)
operator|==
literal|0
condition|)
block|{
name|hn
index|[
literal|256
index|]
operator|=
literal|'\0'
expr_stmt|;
name|hostname
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|hn
argument_list|)
expr_stmt|;
name|hostname
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
name|hostname
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hostname
return|;
block|}
end_function
begin_comment
comment|// to prevent nameclashes on our database server, each machine
end_comment
begin_comment
comment|// will use its own set of table names. Call this function to get
end_comment
begin_comment
comment|// "tablename_hostname"
end_comment
begin_function
DECL|function|fixupTableName
specifier|inline
name|QString
name|fixupTableName
parameter_list|(
specifier|const
name|QString
modifier|&
name|tableName
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QString
name|tbName
init|=
name|tableName
decl_stmt|;
comment|// On Oracle we are limited to 30 character tablenames
name|QSqlDriverPrivate
modifier|*
name|d
init|=
name|static_cast
operator|<
name|QSqlDriverPrivate
operator|*
operator|>
operator|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|db
operator|.
name|driver
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|d
operator|&&
name|d
operator|->
name|dbmsType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
condition|)
name|tbName
operator|.
name|truncate
argument_list|(
literal|30
argument_list|)
expr_stmt|;
return|return
name|tbName
return|;
block|}
end_function
begin_function
DECL|function|qTableName
specifier|inline
specifier|static
name|QString
name|qTableName
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|sourceFileName
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QString
name|tableStr
init|=
name|QLatin1String
argument_list|(
literal|"dbtst"
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ODBC"
argument_list|)
condition|)
name|tableStr
operator|+=
name|QLatin1String
argument_list|(
literal|"_odbc"
argument_list|)
expr_stmt|;
return|return
name|fixupTableName
argument_list|(
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"dbtst"
argument_list|)
operator|+
name|db
operator|.
name|driverName
argument_list|()
operator|+
name|QString
operator|::
name|number
argument_list|(
name|qHash
argument_list|(
name|QLatin1String
argument_list|(
name|sourceFileName
argument_list|)
operator|+
literal|"_"
operator|+
name|qGetHostName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|+
literal|"_"
operator|+
name|prefix
argument_list|)
argument_list|,
name|db
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qTableName
specifier|inline
specifier|static
name|QString
name|qTableName
parameter_list|(
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QString
name|tableStr
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ODBC"
argument_list|)
condition|)
name|tableStr
operator|+=
name|QLatin1String
argument_list|(
literal|"_odbc"
argument_list|)
expr_stmt|;
return|return
name|fixupTableName
argument_list|(
name|QString
argument_list|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|prefix
operator|+
name|tableStr
operator|+
literal|"_"
operator|+
name|qGetHostName
argument_list|()
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
argument_list|)
argument_list|,
name|db
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|testWhiteSpaceNames
specifier|inline
specifier|static
name|bool
name|testWhiteSpaceNames
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
comment|/*    return name.startsWith( "QPSQL" )            || name.startsWith( "QODBC" )            || name.startsWith( "QSQLITE" )            || name.startsWith( "QMYSQL" );*/
return|return
name|name
operator|!=
name|QLatin1String
argument_list|(
literal|"QSQLITE2"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toHex
specifier|inline
specifier|static
name|QString
name|toHex
parameter_list|(
specifier|const
name|QString
modifier|&
name|binary
parameter_list|)
block|{
name|QString
name|str
decl_stmt|;
specifier|static
name|char
specifier|const
name|hexchars
index|[]
init|=
literal|"0123456789ABCDEF"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|binary
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ushort
name|code
init|=
name|binary
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
decl_stmt|;
name|str
operator|+=
call|(
name|QChar
call|)
argument_list|(
name|hexchars
index|[
operator|(
name|code
operator|>>
literal|12
operator|)
operator|&
literal|0x0F
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
call|(
name|QChar
call|)
argument_list|(
name|hexchars
index|[
operator|(
name|code
operator|>>
literal|8
operator|)
operator|&
literal|0x0F
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
call|(
name|QChar
call|)
argument_list|(
name|hexchars
index|[
operator|(
name|code
operator|>>
literal|4
operator|)
operator|&
literal|0x0F
index|]
argument_list|)
expr_stmt|;
name|str
operator|+=
call|(
name|QChar
call|)
argument_list|(
name|hexchars
index|[
name|code
operator|&
literal|0x0F
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_decl_stmt
name|class
name|tst_Databases
block|{
name|public
label|:
name|tst_Databases
argument_list|()
operator|:
name|counter
argument_list|(
literal|0
argument_list|)
block|{     }
operator|~
name|tst_Databases
argument_list|()
block|{
name|close
argument_list|()
block|;     }
comment|// returns a testtable consisting of the names of all database connections if
comment|// driverPrefix is empty, otherwise only those that start with driverPrefix.
name|int
name|fillTestTable
argument_list|(
argument|const QString& driverPrefix = QString()
argument_list|)
specifier|const
block|{
name|QTest
operator|::
name|addColumn
operator|<
name|QString
operator|>
operator|(
literal|"dbName"
operator|)
block|;
name|int
name|count
operator|=
literal|0
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|driverPrefix
operator|.
name|isEmpty
argument_list|()
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|driverPrefix
argument_list|)
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
name|int
name|fillTestTableWithStrategies
argument_list|(
specifier|const
name|QString
operator|&
name|driverPrefix
operator|=
name|QString
argument_list|()
argument_list|)
decl|const
block|{
name|QTest
operator|::
name|addColumn
operator|<
name|QString
operator|>
operator|(
literal|"dbName"
operator|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
operator|<
name|int
operator|>
operator|(
literal|"submitpolicy_i"
operator|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dbNames
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|driverPrefix
operator|.
name|isEmpty
argument_list|()
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|driverPrefix
argument_list|)
condition|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 [field]"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QSqlTableModel
operator|::
name|OnFieldChange
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 [row]"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QSqlTableModel
operator|::
name|OnRowChange
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"%1 [manual]"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|dbNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
operator|(
name|int
operator|)
name|QSqlTableModel
operator|::
name|OnManualSubmit
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
name|void
name|addDb
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|dbName
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|passwd
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
init|=
name|QString
argument_list|()
parameter_list|,
name|int
name|port
init|=
operator|-
literal|1
parameter_list|,
specifier|const
name|QString
name|params
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|QSqlDatabase
name|db
decl_stmt|;
if|if
condition|(
operator|!
name|QSqlDatabase
operator|::
name|drivers
argument_list|()
operator|.
name|contains
argument_list|(
name|driver
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Driver"
operator|<<
name|driver
operator|<<
literal|"is not installed"
expr_stmt|;
return|return;
block|}
comment|// construct a stupid unique name
name|QString
name|cName
init|=
name|QString
operator|::
name|number
argument_list|(
name|counter
operator|++
argument_list|)
operator|+
literal|"_"
operator|+
name|driver
operator|+
literal|"@"
decl_stmt|;
name|cName
operator|+=
name|host
operator|.
name|isEmpty
argument_list|()
condition|?
name|dbName
else|:
name|host
expr_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
name|cName
operator|+=
literal|":"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|db
operator|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
name|driver
argument_list|,
name|cName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Could not create database object"
argument_list|)
expr_stmt|;
return|return;
block|}
name|db
operator|.
name|setDatabaseName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|db
operator|.
name|setUserName
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|db
operator|.
name|setPassword
argument_list|(
name|passwd
argument_list|)
expr_stmt|;
name|db
operator|.
name|setHostName
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|db
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|db
operator|.
name|setConnectOptions
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|dbNames
operator|.
name|append
argument_list|(
name|cName
argument_list|)
expr_stmt|;
block|}
name|bool
name|addDbs
parameter_list|()
block|{
comment|//addDb("QOCI", "localhost", "system", "penandy");
comment|//         addDb( "QOCI8", "//horsehead.qt-project.org:1521/pony.troll.no", "scott", "tiger" ); // Oracle 9i on horsehead
comment|//         addDb( "QOCI8", "//horsehead.qt-project.org:1521/ustest.troll.no", "scott", "tiger", "" ); // Oracle 9i on horsehead
comment|//         addDb( "QOCI8", "//iceblink.qt-project.org:1521/ice.troll.no", "scott", "tiger", "" ); // Oracle 8 on iceblink (not currently working)
comment|//         addDb( "QOCI", "//silence.qt-project.org:1521/testdb", "scott", "tiger" ); // Oracle 10g on silence
comment|//         addDb( "QOCI", "//bq-oracle10g.qt-project.org:1521/XE", "scott", "tiger" ); // Oracle 10gexpress
comment|//      This requires a local ODBC data source to be configured( pointing to a MySql database )
comment|//         addDb( "QODBC", "mysqlodbc", "troll", "trond" );
comment|//         addDb( "QODBC", "SqlServer", "troll", "trond" );
comment|//         addDb( "QTDS7", "testdb", "troll", "trondk", "horsehead" );
comment|//         addDb( "QODBC", "silencetestdb", "troll", "trond", "silence" );
comment|//         addDb( "QODBC", "horseheadtestdb", "troll", "trondk", "horsehead" );
comment|//         addDb( "QMYSQL3", "testdb", "troll", "trond", "horsehead.qt-project.org" );
comment|//         addDb( "QMYSQL3", "testdb", "troll", "trond", "horsehead.qt-project.org", 3307 );
comment|//         addDb( "QMYSQL3", "testdb", "troll", "trond", "horsehead.qt-project.org", 3308, "CLIENT_COMPRESS=1;CLIENT_SSL=1" ); // MySQL 4.1.1
comment|//         addDb( "QMYSQL3", "testdb", "troll", "trond", "horsehead.qt-project.org", 3309, "CLIENT_COMPRESS=1;CLIENT_SSL=1" ); // MySQL 5.0.18 Linux
comment|//         addDb( "QMYSQL3", "testdb", "troll", "trond", "silence.qt-project.org" ); // MySQL 5.1.36 Windows
comment|//         addDb( "QMYSQL3", "testdb", "testuser", "Ee4Gabf6_", "bq-mysql41.qt-project.org" ); // MySQL 4.1.22-2.el4  linux
comment|//         addDb( "QMYSQL3", "testdb", "testuser", "Ee4Gabf6_", "bq-mysql50.qt-project.org" ); // MySQL 5.0.45-7.el5 linux
comment|//         addDb( "QMYSQL3", "testdb", "testuser", "Ee4Gabf6_", "bq-mysql51.qt-project.org" ); // MySQL 5.1.36-6.7.2.i586 linux
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "horsehead.qt-project.org" ); // V7.2 NOT SUPPORTED!
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "horsehead.qt-project.org", 5434 ); // V7.2 NOT SUPPORTED! Multi-byte
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "horsehead.qt-project.org", 5435 ); // V7.3
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "horsehead.qt-project.org", 5436 ); // V7.4
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "horsehead.qt-project.org", 5437 ); // V8.0.3
comment|//         addDb( "QPSQL7", "testdb", "troll", "trond", "silence.qt-project.org" );         // V8.2.1, UTF-8
comment|//         addDb( "QPSQL7", "testdb", "testuser", "Ee4Gabf6_", "bq-postgres74.qt-project.org" );         // Version 7.4.19-1.el4_6.1
comment|//         addDb( "QPSQL7", "testdb", "testuser", "Ee4Gabf6_", "bq-pgsql81.qt-project.org" );         // Version 8.1.11-1.el5_1.1
comment|//         addDb( "QPSQL7", "testdb", "testuser", "Ee4Gabf6_", "bq-pgsql84.qt-project.org" );         // Version 8.4.1-2.1.i586
comment|//         addDb( "QPSQL7", "testdb", "testuser", "Ee4Gabf6_", "bq-pgsql90.qt-project.org" );         // Version 9.0.0
comment|//         addDb( "QDB2", "testdb", "troll", "trond", "silence.qt-project.org" ); // DB2 v9.1 on silence
comment|//         addDb( "QDB2", "testdb", "testuser", "Ee4Gabf6_", "bq-db2-972.qt-project.org" ); // DB2
comment|//      yes - interbase really wants the physical path on the host machine.
comment|//         addDb( "QIBASE", "/opt/interbase/qttest.gdb", "SYSDBA", "masterkey", "horsehead.qt-project.org" );
comment|//         addDb( "QIBASE", "silence.troll.no:c:\\ibase\\testdb", "SYSDBA", "masterkey", "" ); // InterBase 7.5 on silence
comment|//         addDb( "QIBASE", "silence.troll.no:c:\\ibase\\testdb_ascii", "SYSDBA", "masterkey", "" ); // InterBase 7.5 on silence
comment|//         addDb( "QIBASE", "/opt/firebird/databases/testdb.fdb", "testuser", "Ee4Gabf6_", "firebird1-nokia.trolltech.com.au" ); // Firebird 1.5.5
comment|//         addDb( "QIBASE", "/opt/firebird/databases/testdb.fdb", "testuser", "Ee4Gabf6_", "firebird2-nokia.trolltech.com.au" ); // Firebird 2.1.1
comment|//         addDb( "QIBASE", "/opt/firebird/databases/testdb.fdb", "testuser", "Ee4Gabf6_", "bq-firebird1.qt-project.org" ); // Firebird 1.5.5
comment|//         addDb( "QIBASE", "/opt/firebird/databases/testdb.fdb", "testuser", "Ee4Gabf6_", "bq-firebird2.qt-project.org" ); // Firebird 2.1.1
comment|//      use in-memory database to prevent local files
comment|//         addDb("QSQLITE", ":memory:");
name|QTemporaryDir
modifier|*
name|sqLiteDir
init|=
name|dbDir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sqLiteDir
condition|)
return|return
name|false
return|;
name|addDb
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QSQLITE"
argument_list|)
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sqLiteDir
operator|->
name|path
argument_list|()
operator|+
name|QStringLiteral
argument_list|(
literal|"/foo.db"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//         addDb( "QSQLITE2", QDir::toNativeSeparators(dbDir.path() + "/foo2.db") );
comment|//         addDb( "QODBC3", "DRIVER={SQL SERVER};SERVER=iceblink.qt-project.org\\ICEBLINK", "troll", "trond", "" );
comment|//         addDb( "QODBC3", "DRIVER={SQL Native Client};SERVER=silence.qt-project.org\\SQLEXPRESS", "troll", "trond", "" );
comment|//         addDb( "QODBC", "DRIVER={MySQL ODBC 5.1 Driver};SERVER=bq-mysql50.qt-project.org;DATABASE=testdb", "testuser", "Ee4Gabf6_", "" );
comment|//         addDb( "QODBC", "DRIVER={MySQL ODBC 5.1 Driver};SERVER=bq-mysql51.qt-project.org;DATABASE=testdb", "testuser", "Ee4Gabf6_", "" );
comment|//         addDb( "QODBC", "DRIVER={FreeTDS};SERVER=horsehead.qt-project.org;DATABASE=testdb;PORT=4101;UID=troll;PWD=trondk", "troll", "trondk", "" );
comment|//         addDb( "QODBC", "DRIVER={FreeTDS};SERVER=silence.qt-project.org;DATABASE=testdb;PORT=2392;UID=troll;PWD=trond", "troll", "trond", "" );
comment|//         addDb( "QODBC", "DRIVER={FreeTDS};SERVER=bq-winserv2003-x86-01.qt-project.org;DATABASE=testdb;PORT=1433;UID=testuser;PWD=Ee4Gabf6_;TDS_Version=8.0", "", "", "" );
comment|//         addDb( "QODBC", "DRIVER={FreeTDS};SERVER=bq-winserv2008-x86-01.qt-project.org;DATABASE=testdb;PORT=1433;UID=testuser;PWD=Ee4Gabf6_;TDS_Version=8.0", "", "", "" );
comment|//         addDb( "QTDS7", "testdb", "testuser", "Ee4Gabf6_", "bq-winserv2003" );
comment|//         addDb( "QTDS7", "testdb", "testuser", "Ee4Gabf6_", "bq-winserv2008" );
comment|//         addDb( "QODBC3", "DRIVER={SQL SERVER};SERVER=bq-winserv2003-x86-01.qt-project.org;DATABASE=testdb;PORT=1433", "testuser", "Ee4Gabf6_", "" );
comment|//         addDb( "QODBC3", "DRIVER={SQL SERVER};SERVER=bq-winserv2008-x86-01.qt-project.org;DATABASE=testdb;PORT=1433", "testuser", "Ee4Gabf6_", "" );
comment|//         addDb( "QODBC", "DRIVER={Microsoft Access Driver (*.mdb)};DBQ=c:\\dbs\\access\\testdb.mdb", "", "", "" );
comment|//         addDb( "QODBC", "DRIVER={Postgresql};SERVER=bq-pgsql84.qt-project.org;DATABASE=testdb", "testuser", "Ee4Gabf6_", "" );
return|return
name|true
return|;
block|}
comment|// 'false' return indicates a system error, for example failure to create a temporary directory.
name|bool
name|open
parameter_list|()
block|{
if|if
condition|(
operator|!
name|addDbs
argument_list|()
condition|)
return|return
name|false
return|;
name|QStringList
operator|::
name|Iterator
name|it
operator|=
name|dbNames
operator|.
name|begin
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|!=
name|dbNames
operator|.
name|end
argument_list|()
condition|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Opening:"
operator|<<
operator|(
operator|*
name|it
operator|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|db
operator|.
name|isOpen
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|db
operator|.
name|open
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"tst_Databases: Unable to open %s on %s:\n%s"
argument_list|,
name|qPrintable
argument_list|(
name|db
operator|.
name|driverName
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
operator|*
name|it
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|databaseText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// well... opening failed, so we just ignore the server, maybe it is not running
name|it
operator|=
name|dbNames
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
block|}
block|}
block|}
return|return
name|true
return|;
block|}
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
operator|=
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|isValid
argument_list|()
operator|&&
name|db
operator|.
name|isOpen
argument_list|()
condition|)
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
name|dbNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// for debugging only: outputs the connection as string
specifier|static
name|QString
name|dbToString
parameter_list|(
specifier|const
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QString
name|res
init|=
name|db
operator|.
name|driverName
argument_list|()
operator|+
literal|"@"
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QODBC"
argument_list|)
operator|||
name|db
operator|.
name|driverName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"QOCI"
argument_list|)
condition|)
block|{
name|res
operator|+=
name|db
operator|.
name|databaseName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|res
operator|+=
name|db
operator|.
name|hostName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|.
name|port
argument_list|()
operator|>
literal|0
condition|)
block|{
name|res
operator|+=
literal|":"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|db
operator|.
name|port
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|// drop a table only if it exists to prevent warnings
specifier|static
name|void
name|safeDropTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|tableNames
parameter_list|)
block|{
name|bool
name|wasDropped
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QStringList
name|dbtables
init|=
name|db
operator|.
name|tables
argument_list|()
decl_stmt|;
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
operator|=
name|getDatabaseType
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|foreach
argument_list|(
argument|const QString&tableName
argument_list|,
argument|tableNames
argument_list|)
block|{
name|wasDropped
operator|=
name|true
expr_stmt|;
name|QString
name|table
init|=
name|tableName
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|isIdentifierEscaped
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|table
operator|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|stripDelimiters
argument_list|(
name|table
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbtables
operator|.
name|contains
argument_list|(
name|table
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|foreach
argument_list|(
argument|const QString&table2
argument_list|,
argument|dbtables.filter(table, Qt::CaseInsensitive)
argument_list|)
block|{
if|if
condition|(
name|table2
operator|.
name|compare
argument_list|(
name|table
operator|.
name|section
argument_list|(
literal|'.'
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|table
operator|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|table2
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
name|wasDropped
operator|=
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|table
operator|+
literal|" cascade"
argument_list|)
expr_stmt|;
else|else
name|wasDropped
operator|=
name|q
operator|.
name|exec
argument_list|(
literal|"drop table "
operator|+
name|table
argument_list|)
expr_stmt|;
name|dbtables
operator|.
name|removeAll
argument_list|(
name|table2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|wasDropped
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|dbToString
argument_list|(
name|db
argument_list|)
operator|<<
literal|"unable to drop table"
operator|<<
name|tableName
operator|<<
literal|':'
operator|<<
name|q
operator|.
name|lastError
argument_list|()
expr_stmt|;
comment|//              qWarning()<< "last query:"<< q.lastQuery();
comment|//              qWarning()<< "dbtables:"<< dbtables;
comment|//              qWarning()<< "db.tables():"<< db.tables();
block|}
block|}
block|}
specifier|static
name|void
name|safeDropTable
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|tableName
parameter_list|)
block|{
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|safeDropViews
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|viewNames
parameter_list|)
block|{
if|if
condition|(
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
comment|// Access is sooo stupid.
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|viewNames
argument_list|)
expr_stmt|;
name|bool
name|wasDropped
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QStringList
name|dbtables
init|=
name|db
operator|.
name|tables
argument_list|(
name|QSql
operator|::
name|Views
argument_list|)
decl_stmt|;
name|foreach
argument_list|(
argument|QString viewName
argument_list|,
argument|viewNames
argument_list|)
block|{
name|wasDropped
operator|=
name|true
expr_stmt|;
name|QString
name|view
init|=
name|viewName
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|isIdentifierEscaped
argument_list|(
name|view
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
condition|)
name|view
operator|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|stripDelimiters
argument_list|(
name|view
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbtables
operator|.
name|contains
argument_list|(
name|view
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|foreach
argument_list|(
argument|const QString&view2
argument_list|,
argument|dbtables.filter(view, Qt::CaseInsensitive)
argument_list|)
block|{
if|if
condition|(
name|view2
operator|.
name|compare
argument_list|(
name|view
operator|.
name|section
argument_list|(
literal|'.'
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|view
operator|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|view2
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
expr_stmt|;
name|wasDropped
operator|=
name|q
operator|.
name|exec
argument_list|(
literal|"drop view "
operator|+
name|view
argument_list|)
expr_stmt|;
name|dbtables
operator|.
name|removeAll
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|wasDropped
condition|)
name|qWarning
argument_list|()
operator|<<
name|dbToString
argument_list|(
name|db
argument_list|)
operator|<<
literal|"unable to drop view"
operator|<<
name|viewName
operator|<<
literal|':'
operator|<<
name|q
operator|.
name|lastError
argument_list|()
expr_stmt|;
comment|//<< "\nlast query:"<< q.lastQuery()
comment|//<< "\ndbtables:"<< dbtables
comment|//<< "\ndb.tables(QSql::Views):"<< db.tables(QSql::Views);
block|}
block|}
specifier|static
name|void
name|safeDropView
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|,
specifier|const
name|QString
modifier|&
name|tableName
parameter_list|)
block|{
name|safeDropViews
argument_list|(
name|db
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// returns the type name of the blob datatype for the database db.
comment|// blobSize is only used if the db doesn't have a generic blob type
specifier|static
name|QString
name|blobTypeName
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|,
name|int
name|blobSize
init|=
literal|10000
parameter_list|)
block|{
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
operator|=
name|getDatabaseType
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
return|return
literal|"longblob"
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
return|return
literal|"bytea"
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
operator|||
name|isMSAccess
argument_list|(
name|db
argument_list|)
condition|)
return|return
literal|"image"
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|DB2
condition|)
return|return
name|QString
argument_list|(
literal|"blob(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|blobSize
argument_list|)
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Interbase
condition|)
return|return
name|QString
argument_list|(
literal|"blob sub_type 0 segment size 4096"
argument_list|)
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|SQLite
condition|)
return|return
literal|"blob"
return|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_Databases::blobTypeName: Don't know the blob type for"
operator|<<
name|dbToString
argument_list|(
name|db
argument_list|)
expr_stmt|;
return|return
literal|"blob"
return|;
block|}
specifier|static
name|QString
name|dateTimeTypeName
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
operator|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|PostgreSQL
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"timestamp"
argument_list|)
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Oracle
operator|&&
name|getOraVersion
argument_list|(
name|db
argument_list|)
operator|>=
literal|9
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"timestamp(0)"
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
literal|"datetime"
argument_list|)
return|;
block|}
specifier|static
name|QString
name|autoFieldName
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
specifier|const
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|dbType
operator|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MySqlServer
condition|)
return|return
literal|"AUTO_INCREMENT"
return|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|Sybase
operator|||
name|dbType
operator|==
name|QSqlDriverPrivate
operator|::
name|MSSqlServer
condition|)
return|return
literal|"IDENTITY"
return|;
comment|/*        if (dbType == QSqlDriverPrivate::PostgreSQL)             return "SERIAL";*/
comment|//        if (dbType == QSqlDriverPrivate::DB2)
comment|//            return "GENERATED BY DEFAULT AS IDENTITY";
return|return
name|QString
argument_list|()
return|;
block|}
specifier|static
name|QByteArray
name|printError
parameter_list|(
specifier|const
name|QSqlError
modifier|&
name|err
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|nativeErrorCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
literal|'('
operator|+
name|err
operator|.
name|nativeErrorCode
argument_list|()
operator|+
literal|") "
expr_stmt|;
name|result
operator|+=
literal|'\''
expr_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|driverText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|err
operator|.
name|driverText
argument_list|()
operator|+
literal|"' || '"
expr_stmt|;
name|result
operator|+=
name|err
operator|.
name|databaseText
argument_list|()
operator|+
literal|"'"
expr_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
specifier|static
name|QByteArray
name|printError
parameter_list|(
specifier|const
name|QSqlError
modifier|&
name|err
parameter_list|,
specifier|const
name|QSqlDatabase
modifier|&
name|db
parameter_list|)
block|{
name|QString
name|result
argument_list|(
name|dbToString
argument_list|(
name|db
argument_list|)
operator|+
literal|": "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|nativeErrorCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
literal|'('
operator|+
name|err
operator|.
name|nativeErrorCode
argument_list|()
operator|+
literal|") "
expr_stmt|;
name|result
operator|+=
literal|'\''
expr_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|driverText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
name|err
operator|.
name|driverText
argument_list|()
operator|+
literal|"' || '"
expr_stmt|;
name|result
operator|+=
name|err
operator|.
name|databaseText
argument_list|()
operator|+
literal|"'"
expr_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
specifier|static
name|QSqlDriverPrivate
operator|::
name|DBMSType
name|getDatabaseType
argument_list|(
argument|QSqlDatabase db
argument_list|)
block|{
name|QSqlDriverPrivate
operator|*
name|d
operator|=
name|static_cast
operator|<
name|QSqlDriverPrivate
operator|*
operator|>
operator|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|db
operator|.
name|driver
argument_list|()
argument_list|)
operator|)
block|;
return|return
name|d
operator|->
name|dbmsType
return|;
block|}
specifier|static
name|bool
name|isMSAccess
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
return|return
name|db
operator|.
name|databaseName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Access Driver"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
return|;
block|}
comment|// -1 on fail, else Oracle version
specifier|static
name|int
name|getOraVersion
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|int
name|ver
init|=
operator|-
literal|1
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
literal|"SELECT banner FROM v$version"
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|next
argument_list|()
expr_stmt|;
name|QRegExp
name|vers
argument_list|(
literal|"([0-9]+)\\.[0-9\\.]+[0-9]"
argument_list|)
decl_stmt|;
if|if
condition|(
name|vers
operator|.
name|indexIn
argument_list|(
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|ver
operator|=
name|vers
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
name|ver
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ver
return|;
block|}
specifier|static
name|QString
name|getMySqlVersion
parameter_list|(
specifier|const
name|QSqlDatabase
modifier|&
name|db
parameter_list|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"select version()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
return|return
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
specifier|static
name|QString
name|getPSQLVersion
parameter_list|(
specifier|const
name|QSqlDatabase
modifier|&
name|db
parameter_list|)
block|{
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"select version()"
argument_list|)
expr_stmt|;
if|if
condition|(
name|q
operator|.
name|next
argument_list|()
condition|)
return|return
name|q
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
return|;
else|else
return|return
name|QString
argument_list|()
return|;
block|}
name|QStringList
name|dbNames
decl_stmt|;
name|int
name|counter
decl_stmt|;
name|private
label|:
name|QTemporaryDir
modifier|*
name|dbDir
parameter_list|()
block|{
if|if
condition|(
name|m_dbDir
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|m_dbDir
operator|.
name|reset
argument_list|(
argument|new QTemporaryDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_dbDir
operator|->
name|isValid
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|Q_FUNC_INFO
operator|<<
literal|"Unable to create a temporary directory: "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|m_dbDir
operator|->
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|m_dbDir
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|m_dbDir
operator|.
name|data
argument_list|()
return|;
block|}
name|QScopedPointer
operator|<
name|QTemporaryDir
operator|>
name|m_dbDir
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
