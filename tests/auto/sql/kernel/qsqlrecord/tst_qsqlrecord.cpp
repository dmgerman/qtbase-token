begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qsqlrecord.h"
end_include
begin_include
include|#
directive|include
file|"qsqlfield.h"
end_include
begin_include
include|#
directive|include
file|"qstringlist.h"
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_define
DECL|macro|NUM_FIELDS
define|#
directive|define
name|NUM_FIELDS
value|4
end_define
begin_class
DECL|class|tst_QSqlRecord
class|class
name|tst_QSqlRecord
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSqlRecord
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSqlRecord
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|value
parameter_list|()
function_decl|;
name|void
name|setValue_data
parameter_list|()
function_decl|;
name|void
name|setValue
parameter_list|()
function_decl|;
name|void
name|setNull
parameter_list|()
function_decl|;
name|void
name|setGenerated
parameter_list|()
function_decl|;
name|void
name|remove
parameter_list|()
function_decl|;
name|void
name|position
parameter_list|()
function_decl|;
name|void
name|operator_Assign
parameter_list|()
function_decl|;
name|void
name|isNull
parameter_list|()
function_decl|;
name|void
name|isGenerated
parameter_list|()
function_decl|;
name|void
name|isEmpty
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|()
function_decl|;
name|void
name|fieldName
parameter_list|()
function_decl|;
name|void
name|field
parameter_list|()
function_decl|;
name|void
name|count
parameter_list|()
function_decl|;
name|void
name|contains
parameter_list|()
function_decl|;
name|void
name|clearValues_data
parameter_list|()
function_decl|;
name|void
name|clearValues
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|append
parameter_list|()
function_decl|;
private|private:
DECL|member|rec
name|QSqlRecord
modifier|*
name|rec
decl_stmt|;
DECL|member|fields
name|QSqlField
modifier|*
name|fields
index|[
name|NUM_FIELDS
index|]
decl_stmt|;
name|void
name|createTestRecord
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QSqlRecord
name|tst_QSqlRecord
operator|::
name|tst_QSqlRecord
parameter_list|()
block|{
name|rec
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|fields
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QSqlRecord
name|tst_QSqlRecord
operator|::
name|~
name|tst_QSqlRecord
parameter_list|()
block|{
operator|delete
name|rec
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
operator|delete
name|fields
index|[
name|i
index|]
expr_stmt|;
name|rec
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QSqlRecord
operator|::
name|init
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSqlRecord
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|rec
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|fields
index|[
name|i
index|]
expr_stmt|;
name|fields
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|rec
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createTestRecord
name|void
name|tst_QSqlRecord
operator|::
name|createTestRecord
parameter_list|()
block|{
operator|delete
name|rec
expr_stmt|;
name|rec
operator|=
operator|new
name|QSqlRecord
argument_list|()
expr_stmt|;
name|fields
index|[
literal|0
index|]
operator|=
operator|new
name|QSqlField
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|fields
index|[
literal|1
index|]
operator|=
operator|new
name|QSqlField
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
expr_stmt|;
name|fields
index|[
literal|2
index|]
operator|=
operator|new
name|QSqlField
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
name|fields
index|[
literal|3
index|]
operator|=
operator|new
name|QSqlField
argument_list|(
literal|"bool"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|rec
operator|->
name|append
argument_list|(
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|void
name|tst_QSqlRecord
operator|::
name|append
parameter_list|()
block|{
operator|delete
name|rec
expr_stmt|;
name|rec
operator|=
operator|new
name|QSqlRecord
argument_list|()
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"string"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"int"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"double"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"bool"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"bool"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"string"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"int"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"double"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"bool"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QSqlRecord
operator|::
name|clear
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|rec
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|contains
argument_list|(
name|fields
index|[
literal|0
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearValues_data
name|void
name|tst_QSqlRecord
operator|::
name|clearValues_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sep"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"ival"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"dval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"bval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tablename"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|","
argument_list|)
operator|<<
literal|10
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Trond K."
argument_list|)
operator|<<
literal|2222.231234441
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"mytable"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"."
argument_list|)
operator|<<
literal|12
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Josten"
argument_list|)
operator|<<
literal|544444444444423232.32334441
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"tabby"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-"
argument_list|)
operator|<<
literal|12
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Odvin"
argument_list|)
operator|<<
literal|899129389283.32334441
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"per"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"00"
argument_list|)
operator|<<
literal|12
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Brge"
argument_list|)
operator|<<
literal|29382939182.99999919
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clearValues
name|void
name|tst_QSqlRecord
operator|::
name|clearValues
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|bval
argument_list|)
expr_stmt|;
if|if
condition|(
name|rec
condition|)
operator|delete
name|rec
expr_stmt|;
name|rec
operator|=
operator|new
name|QSqlRecord
argument_list|()
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"string"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"int"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"double"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"bool"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"bool"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"string"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"int"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"double"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"bool"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|rec
operator|->
name|setNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|0
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|1
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|2
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|3
argument_list|,
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|0
argument_list|)
operator|==
name|sval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|ival
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|dval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|3
argument_list|)
operator|==
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|->
name|clearValues
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contains
name|void
name|tst_QSqlRecord
operator|::
name|contains
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|contains
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|contains
argument_list|(
literal|"__Harry__"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|count
name|void
name|tst_QSqlRecord
operator|::
name|count
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
name|NUM_FIELDS
argument_list|)
expr_stmt|;
name|rec
operator|->
name|remove
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
name|NUM_FIELDS
operator|-
literal|1
argument_list|)
expr_stmt|;
name|rec
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|QSqlRecord
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|field
name|void
name|tst_QSqlRecord
operator|::
name|field
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|field
argument_list|(
name|i
argument_list|)
operator|==
operator|*
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|field
argument_list|(
operator|(
name|fields
index|[
name|i
index|]
operator|)
operator|->
name|name
argument_list|()
argument_list|)
operator|==
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"_This should give a warning!_"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fieldName
name|void
name|tst_QSqlRecord
operator|::
name|fieldName
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|field
argument_list|(
operator|(
name|fields
index|[
name|i
index|]
operator|)
operator|->
name|name
argument_list|()
argument_list|)
operator|==
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|fieldName
argument_list|(
name|NUM_FIELDS
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insert
name|void
name|tst_QSqlRecord
operator|::
name|insert
parameter_list|()
block|{
name|QSqlRecord
name|iRec
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|iRec
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|QSqlField
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|iRec
operator|.
name|fieldName
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//    iRec.insert( 505, QSqlField( "Harry", QVariant::Double ) );
comment|//    QCOMPARE( iRec.fieldName( 505 ), (QString)"Harry" );
comment|//    QVERIFY( iRec.field( 505 ).type() == QVariant::Double );
name|iRec
operator|.
name|insert
argument_list|(
literal|42
argument_list|,
name|QSqlField
argument_list|(
literal|"Everything"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|iRec
operator|.
name|fieldName
argument_list|(
literal|42
argument_list|)
argument_list|,
operator|(
name|QString
operator|)
literal|"Everything"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iRec
operator|.
name|field
argument_list|(
literal|42
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isEmpty
name|void
name|tst_QSqlRecord
operator|::
name|isEmpty
parameter_list|()
block|{
name|QSqlRecord
name|eRec
decl_stmt|;
name|QVERIFY
argument_list|(
name|eRec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|eRec
operator|.
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"Harry"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|eRec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|eRec
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|eRec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|eRec
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QSqlField
argument_list|(
literal|"Harry"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|eRec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|eRec
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|eRec
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isGenerated
name|void
name|tst_QSqlRecord
operator|::
name|isGenerated
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isGenerated
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isGenerated
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
condition|)
name|rec
operator|->
name|setGenerated
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|rec
operator|->
name|setGenerated
argument_list|(
name|NUM_FIELDS
operator|*
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// nothing should happen here
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isGenerated
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isGenerated
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|i
operator|%
literal|2
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isGenerated
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isGenerated
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rec
operator|->
name|setGenerated
argument_list|(
literal|"_This should give a warning!_"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// nothing should happen here
block|}
end_function
begin_function
DECL|function|isNull
name|void
name|tst_QSqlRecord
operator|::
name|isNull
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
condition|)
name|rec
operator|->
name|setNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|rec
operator|->
name|setNull
argument_list|(
name|NUM_FIELDS
argument_list|)
expr_stmt|;
comment|// nothing should happen here
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
condition|)
block|{
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|rec
operator|->
name|setNull
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rec
operator|->
name|setNull
argument_list|(
literal|"_This should give a warning!_"
argument_list|)
expr_stmt|;
comment|// nothing should happen here
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isNull
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|operator_Assign
name|void
name|tst_QSqlRecord
operator|::
name|operator_Assign
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
name|QSqlRecord
name|buf2
decl_stmt|,
name|buf3
decl_stmt|,
name|buf4
decl_stmt|;
comment|// since buffers are implicitely shared, we exaggerate a bit here
name|buf2
operator|=
operator|*
name|rec
expr_stmt|;
name|buf3
operator|=
operator|*
name|rec
expr_stmt|;
name|buf4
operator|=
operator|*
name|rec
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|buf2
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|==
operator|*
name|fields
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf3
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|==
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf4
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|==
operator|*
operator|(
name|fields
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
name|buf3
operator|.
name|setNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|buf3
operator|.
name|remove
argument_list|(
name|NUM_FIELDS
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QSqlRecord
name|buf5
init|=
name|buf3
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QSqlField
name|fi
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|->
name|type
argument_list|()
argument_list|)
decl_stmt|;
name|fi
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf5
operator|.
name|field
argument_list|(
name|i
argument_list|)
operator|==
name|fi
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf5
operator|.
name|isGenerated
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|position
name|void
name|tst_QSqlRecord
operator|::
name|position
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|remove
name|void
name|tst_QSqlRecord
operator|::
name|remove
parameter_list|()
block|{
name|createTestRecord
argument_list|()
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|rec
operator|->
name|setGenerated
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
name|NUM_FIELDS
operator|-
name|i
argument_list|)
expr_stmt|;
name|rec
operator|->
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
name|NUM_FIELDS
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|rec
operator|->
name|remove
argument_list|(
name|NUM_FIELDS
operator|*
literal|2
argument_list|)
expr_stmt|;
comment|// nothing should happen
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|NUM_FIELDS
condition|;
operator|++
name|i
control|)
block|{
name|rec
operator|->
name|insert
argument_list|(
name|i
argument_list|,
name|QSqlField
argument_list|(
name|fields
index|[
name|i
index|]
operator|->
name|name
argument_list|()
argument_list|,
name|fields
index|[
name|i
index|]
operator|->
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|isGenerated
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setGenerated
name|void
name|tst_QSqlRecord
operator|::
name|setGenerated
parameter_list|()
block|{
name|isGenerated
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNull
name|void
name|tst_QSqlRecord
operator|::
name|setNull
parameter_list|()
block|{
name|isNull
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue_data
name|void
name|tst_QSqlRecord
operator|::
name|setValue_data
parameter_list|()
block|{
name|clearValues_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|tst_QSqlRecord
operator|::
name|setValue
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
operator|delete
name|rec
expr_stmt|;
name|rec
operator|=
operator|new
name|QSqlRecord
argument_list|()
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"string"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"int"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"int"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"double"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"double"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rec
operator|->
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"bool"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
operator|(
name|QString
operator|)
literal|"bool"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|rec
operator|->
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"string"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"int"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"double"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|indexOf
argument_list|(
literal|"bool"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|bval
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|rec
operator|->
name|setNull
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|0
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|1
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|2
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|rec
operator|->
name|setValue
argument_list|(
literal|3
argument_list|,
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|0
argument_list|)
operator|==
name|sval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|ival
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|dval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|3
argument_list|)
operator|==
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
operator|!
name|rec
operator|->
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec2
init|=
operator|*
name|rec
decl_stmt|;
name|QVERIFY
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|==
name|sval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|==
name|ival
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|==
name|dval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|3
argument_list|)
operator|==
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|rec2
operator|.
name|setValue
argument_list|(
literal|"string"
argument_list|,
literal|"__Harry__"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"__Harry__"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|QVERIFY
argument_list|(
operator|!
name|rec2
operator|.
name|isNull
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toDouble
argument_list|()
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|->
name|value
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|value
name|void
name|tst_QSqlRecord
operator|::
name|value
parameter_list|()
block|{
comment|// this test is already covered in setValue()
name|QSqlRecord
name|rec2
decl_stmt|;
name|rec2
operator|.
name|append
argument_list|(
name|QSqlField
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
argument_list|)
expr_stmt|;
name|rec2
operator|.
name|setValue
argument_list|(
literal|"string"
argument_list|,
literal|"Harry"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec2
operator|.
name|value
argument_list|(
literal|"string"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Harry"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSqlRecord
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsqlrecord.moc"
end_include
end_unit
