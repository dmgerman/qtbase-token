begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_class
DECL|class|tst_QSqlField
class|class
name|tst_QSqlField
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSqlField
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSqlField
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|type
parameter_list|()
function_decl|;
name|void
name|setValue_data
parameter_list|()
function_decl|;
name|void
name|setValue
parameter_list|()
function_decl|;
name|void
name|setReadOnly
parameter_list|()
function_decl|;
name|void
name|setNull
parameter_list|()
function_decl|;
name|void
name|setName_data
parameter_list|()
function_decl|;
name|void
name|setName
parameter_list|()
function_decl|;
name|void
name|operator_Equal
parameter_list|()
function_decl|;
name|void
name|operator_Assign
parameter_list|()
function_decl|;
name|void
name|name_data
parameter_list|()
function_decl|;
name|void
name|name
parameter_list|()
function_decl|;
name|void
name|isReadOnly
parameter_list|()
function_decl|;
name|void
name|isNull
parameter_list|()
function_decl|;
name|void
name|clear_data
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QSqlField
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QSqlField
name|obj1
decl_stmt|;
comment|// RequiredStatus QSqlField::requiredStatus()
comment|// void QSqlField::setRequiredStatus(RequiredStatus)
name|obj1
operator|.
name|setRequiredStatus
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Unknown
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Unknown
argument_list|)
argument_list|,
name|obj1
operator|.
name|requiredStatus
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRequiredStatus
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Optional
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Optional
argument_list|)
argument_list|,
name|obj1
operator|.
name|requiredStatus
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRequiredStatus
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Required
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSqlField
operator|::
name|RequiredStatus
argument_list|(
name|QSqlField
operator|::
name|Required
argument_list|)
argument_list|,
name|obj1
operator|.
name|requiredStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QSqlField::length()
comment|// void QSqlField::setLength(int)
name|obj1
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLength
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLength
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QSqlField::precision()
comment|// void QSqlField::setPrecision(int)
name|obj1
operator|.
name|setPrecision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPrecision
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPrecision
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QSqlField
name|tst_QSqlField
operator|::
name|tst_QSqlField
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QSqlField
name|tst_QSqlField
operator|::
name|~
name|tst_QSqlField
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_QSqlField
operator|::
name|init
parameter_list|()
block|{
comment|// TODO: Add initialization code here.
comment|// This will be executed immediately before each test is run.
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSqlField
operator|::
name|cleanup
parameter_list|()
block|{
comment|// TODO: Add cleanup code here.
comment|// This will be executed immediately after each test is run.
block|}
end_function
begin_function
DECL|function|clear_data
name|void
name|tst_QSqlField
operator|::
name|clear_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"strVal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"fval"
argument_list|)
expr_stmt|;
comment|//next we fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
operator|(
name|int
operator|)
literal|5
operator|<<
literal|true
operator|<<
name|QString
argument_list|(
literal|"Hallo"
argument_list|)
operator|<<
operator|(
name|double
operator|)
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
operator|-
literal|5
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"NULL"
argument_list|)
operator|<<
operator|(
name|double
operator|)
operator|-
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
name|QString
argument_list|(
literal|"0"
argument_list|)
operator|<<
operator|(
name|double
operator|)
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QSqlField
operator|::
name|clear
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"Testfield"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|field
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|field
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
name|val
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlField
name|bfield
argument_list|(
literal|"Testfield"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bval
argument_list|)
expr_stmt|;
name|bfield
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|bfield
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bfield
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|bfield
operator|.
name|value
argument_list|()
operator|==
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|bfield
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlField
name|ffield
argument_list|(
literal|"Testfield"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|fval
argument_list|)
expr_stmt|;
name|ffield
operator|.
name|setValue
argument_list|(
name|fval
argument_list|)
expr_stmt|;
name|ffield
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ffield
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|ffield
operator|.
name|value
argument_list|()
operator|==
name|fval
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ffield
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlField
name|sfield
argument_list|(
literal|"Testfield"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|strVal
argument_list|)
expr_stmt|;
name|sfield
operator|.
name|setValue
argument_list|(
name|strVal
argument_list|)
expr_stmt|;
name|sfield
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sfield
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|sfield
operator|.
name|value
argument_list|()
operator|==
name|strVal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sfield
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isNull
name|void
name|tst_QSqlField
operator|::
name|isNull
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isReadOnly
name|void
name|tst_QSqlField
operator|::
name|isReadOnly
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|field
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|field
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|name_data
name|void
name|tst_QSqlField
operator|::
name|name_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
comment|//next we fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|name
name|void
name|tst_QSqlField
operator|::
name|name
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|name
argument_list|()
operator|==
literal|"test"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setName
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|name
argument_list|()
operator|==
name|val
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_Assign
name|void
name|tst_QSqlField
operator|::
name|operator_Assign
parameter_list|()
block|{
name|QSqlField
name|field1
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|field1
operator|.
name|setValue
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QSqlField
name|field2
init|=
name|field1
decl_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field2
argument_list|)
expr_stmt|;
name|QSqlField
name|field3
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
decl_stmt|;
name|field3
operator|.
name|clear
argument_list|()
expr_stmt|;
name|field1
operator|=
name|field3
expr_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operator_Equal
name|void
name|tst_QSqlField
operator|::
name|operator_Equal
parameter_list|()
block|{
name|QSqlField
name|field1
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|field2
argument_list|(
literal|"test2"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|field3
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|field1
operator|==
name|field2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|field1
operator|==
name|field3
operator|)
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field2
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setValue
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|field1
operator|==
name|field2
operator|)
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setValue
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field2
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|field1
operator|==
name|field2
operator|)
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|==
name|field2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setName_data
name|void
name|tst_QSqlField
operator|::
name|setName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"val"
argument_list|)
expr_stmt|;
comment|//next we fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setName
name|void
name|tst_QSqlField
operator|::
name|setName
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|name
argument_list|()
operator|==
literal|"test"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setName
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|name
argument_list|()
operator|==
name|val
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setNull
name|void
name|tst_QSqlField
operator|::
name|setNull
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|field
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
name|QVariant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setReadOnly
name|void
name|tst_QSqlField
operator|::
name|setReadOnly
parameter_list|()
block|{
name|QSqlField
name|field
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|field
operator|.
name|setValue
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|field
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|setValue
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
literal|"test"
argument_list|)
expr_stmt|;
name|field
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
literal|"test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
literal|"test"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|field
operator|.
name|setValue
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
literal|"Harry"
argument_list|)
expr_stmt|;
name|field
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|value
argument_list|()
operator|==
name|QVariant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue_data
name|void
name|tst_QSqlField
operator|::
name|setValue_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"ival"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"dval"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sval"
argument_list|)
expr_stmt|;
comment|//next we fill it with data
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
operator|<<
operator|(
name|double
operator|)
literal|223.232
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
literal|123
operator|<<
literal|true
operator|<<
operator|(
name|double
operator|)
operator|-
literal|232.232
operator|<<
name|QString
argument_list|(
literal|"Harry"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
operator|-
literal|123
operator|<<
literal|false
operator|<<
operator|(
name|double
operator|)
literal|232222.323223233338
operator|<<
name|QString
argument_list|(
literal|"Woipertinger"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|tst_QSqlField
operator|::
name|setValue
parameter_list|()
block|{
name|QSqlField
name|field1
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QSqlField
name|field2
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|field3
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
decl_stmt|;
name|QSqlField
name|field4
argument_list|(
literal|"test"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
decl_stmt|;
name|field1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|ival
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bval
argument_list|)
expr_stmt|;
name|field1
operator|.
name|setValue
argument_list|(
name|ival
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|field1
operator|.
name|value
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
name|ival
argument_list|)
expr_stmt|;
comment|// setValue should also reset the NULL flag
name|QVERIFY
argument_list|(
operator|!
name|field1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|field2
operator|.
name|setValue
argument_list|(
name|sval
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|field2
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|sval
argument_list|)
expr_stmt|;
name|field3
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|bval
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field3
operator|.
name|value
argument_list|()
operator|.
name|toBool
argument_list|()
operator|==
name|bval
argument_list|)
expr_stmt|;
name|field4
operator|.
name|setValue
argument_list|(
name|dval
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|field4
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|,
name|dval
argument_list|)
expr_stmt|;
name|field4
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field4
operator|.
name|setValue
argument_list|(
literal|"Something_that's_not_a_double"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|field4
operator|.
name|value
argument_list|()
operator|.
name|toDouble
argument_list|()
argument_list|,
name|dval
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|type
name|void
name|tst_QSqlField
operator|::
name|type
parameter_list|()
block|{
name|QSqlField
name|field1
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|field2
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|Bool
argument_list|)
decl_stmt|;
name|QSqlField
name|field3
argument_list|(
literal|"string"
argument_list|,
name|QVariant
operator|::
name|Double
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|field1
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|String
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field2
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Bool
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|field3
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Double
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSqlField
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsqlfield.moc"
end_include
end_unit
