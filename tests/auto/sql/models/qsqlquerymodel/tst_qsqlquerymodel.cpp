begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<qsqldriver.h>
end_include
begin_include
include|#
directive|include
file|<qsqldatabase.h>
end_include
begin_include
include|#
directive|include
file|<qsqlerror.h>
end_include
begin_include
include|#
directive|include
file|<qsqlfield.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquery.h>
end_include
begin_include
include|#
directive|include
file|<qsqlrecord.h>
end_include
begin_include
include|#
directive|include
file|<qsqlquerymodel.h>
end_include
begin_include
include|#
directive|include
file|<qsortfilterproxymodel.h>
end_include
begin_include
include|#
directive|include
file|"../../kernel/qsqldatabase/tst_databases.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::Orientation
argument_list|)
end_macro
begin_class
DECL|class|tst_QSqlQueryModel
class|class
name|tst_QSqlQueryModel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QSqlQueryModel
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSqlQueryModel
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
DECL|function|insertColumn_data
name|void
name|insertColumn_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|insertColumn
parameter_list|()
function_decl|;
DECL|function|removeColumn_data
name|void
name|removeColumn_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|removeColumn
parameter_list|()
function_decl|;
DECL|function|record_data
name|void
name|record_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|record
parameter_list|()
function_decl|;
DECL|function|setHeaderData_data
name|void
name|setHeaderData_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|setHeaderData
parameter_list|()
function_decl|;
DECL|function|fetchMore_data
name|void
name|fetchMore_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|fetchMore
parameter_list|()
function_decl|;
comment|//problem specific tests
DECL|function|withSortFilterProxyModel_data
name|void
name|withSortFilterProxyModel_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|withSortFilterProxyModel
parameter_list|()
function_decl|;
DECL|function|setQuerySignalEmission_data
name|void
name|setQuerySignalEmission_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|setQuerySignalEmission
parameter_list|()
function_decl|;
DECL|function|setQueryWithNoRowsInResultSet_data
name|void
name|setQueryWithNoRowsInResultSet_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|setQueryWithNoRowsInResultSet
parameter_list|()
function_decl|;
DECL|function|nestedResets_data
name|void
name|nestedResets_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|nestedResets
parameter_list|()
function_decl|;
name|void
name|task_180617
parameter_list|()
function_decl|;
DECL|function|task_180617_data
name|void
name|task_180617_data
parameter_list|()
block|{
name|generic_data
argument_list|()
expr_stmt|;
block|}
name|void
name|task_QTBUG_4963_setHeaderDataWithProxyModel
parameter_list|()
function_decl|;
private|private:
name|void
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
init|=
name|QString
argument_list|()
parameter_list|)
function_decl|;
name|void
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
name|void
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
function_decl|;
DECL|member|dbs
name|tst_Databases
name|dbs
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|/* Stupid class that makes protected members public for testing */
end_comment
begin_class
DECL|class|DBTestModel
class|class
name|DBTestModel
super|:
specifier|public
name|QSqlQueryModel
block|{
public|public:
DECL|function|DBTestModel
name|DBTestModel
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSqlQueryModel
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|indexInQuery
name|QModelIndex
name|indexInQuery
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|item
parameter_list|)
specifier|const
block|{
return|return
name|QSqlQueryModel
operator|::
name|indexInQuery
argument_list|(
name|item
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QSqlQueryModel
name|tst_QSqlQueryModel
operator|::
name|tst_QSqlQueryModel
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QSqlQueryModel
name|tst_QSqlQueryModel
operator|::
name|~
name|tst_QSqlQueryModel
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QSqlQueryModel
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|dbs
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
comment|//in case of leftovers
name|createTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|populateTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QSqlQueryModel
operator|::
name|cleanupTestCase
parameter_list|()
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|dbs
operator|.
name|dbNames
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dbs
operator|.
name|dbNames
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
name|dbs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dropTestTables
name|void
name|tst_QSqlQueryModel
operator|::
name|dropTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|QStringList
name|tableNames
decl_stmt|;
name|tableNames
operator|<<
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"test2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|tst_Databases
operator|::
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createTestTables
name|void
name|tst_QSqlQueryModel
operator|::
name|createTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|dropTestTables
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlDriver
operator|::
name|DbmsType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|PostgreSQL
condition|)
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"set client_min_messages='warning'"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, name varchar(20), title integer, primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"test2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, title varchar(20), primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, name varchar(20), primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|populateTestTables
name|void
name|tst_QSqlQueryModel
operator|::
name|populateTestTables
parameter_list|(
name|QSqlDatabase
name|db
parameter_list|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Populating test tables, this can take quite a while... ZZZzzz..."
expr_stmt|;
name|bool
name|hasTransactions
init|=
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|Transactions
argument_list|)
decl_stmt|;
name|QSqlQuery
name|q
argument_list|(
name|db
argument_list|)
decl_stmt|,
name|q2
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|tst_Databases
operator|::
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, name varchar(20), primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"create table "
operator|+
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id integer not null, primary key (id))"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasTransactions
condition|)
name|QVERIFY_SQL
argument_list|(
name|db
argument_list|,
name|transaction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" values(1, 'harry', 1)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" values(2, 'trond', 2)"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" values(1, 'herr')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test2"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" values(2, 'mister')"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" values(0)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id) select id + ? from "
operator|+
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|260
condition|;
name|i
operator|*=
literal|2
control|)
block|{
name|q2
operator|.
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id) select id from "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|(
name|QString
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id, name) values (0, \'harry\')"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|prepare
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id, name) select id + ?, name from "
operator|+
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|2048
condition|;
name|i
operator|*=
literal|2
control|)
block|{
name|q2
operator|.
name|exec
argument_list|(
literal|"delete from "
operator|+
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q2
argument_list|,
name|exec
argument_list|(
literal|"insert into "
operator|+
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|"(id, name) select id, name from "
operator|+
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|bindValue
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QVERIFY_SQL
argument_list|(
name|q
argument_list|,
name|exec
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasTransactions
condition|)
name|QVERIFY_SQL
argument_list|(
name|db
argument_list|,
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|tst_Databases
operator|::
name|safeDropTables
argument_list|(
name|db
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|qTableName
argument_list|(
literal|"manytmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|<<
name|qTableName
argument_list|(
literal|"test3tmp"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generic_data
name|void
name|tst_QSqlQueryModel
operator|::
name|generic_data
parameter_list|(
specifier|const
name|QString
modifier|&
name|engine
parameter_list|)
block|{
if|if
condition|(
name|dbs
operator|.
name|fillTestTable
argument_list|(
name|engine
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|engine
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"No database drivers are available in this Qt configuration"
argument_list|)
expr_stmt|;
else|else
name|QSKIP
argument_list|(
operator|(
name|QString
argument_list|(
literal|"No database drivers of type %1 are available in this Qt configuration"
argument_list|)
operator|.
name|arg
argument_list|(
name|engine
argument_list|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSqlQueryModel
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSqlQueryModel
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|removeColumn
name|void
name|tst_QSqlQueryModel
operator|::
name|removeColumn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|DBTestModel
name|model
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|fetchMore
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsAboutToBeRemoved
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|removeColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|insertColumn
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"harry"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|removeColumn
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|removeColumn
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|removeColumn
argument_list|(
literal|1
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|removeColumn
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|removeColumn
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"harry"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|removeColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|columnCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertColumn
name|void
name|tst_QSqlQueryModel
operator|::
name|insertColumn
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriver
operator|::
name|DbmsType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|DBTestModel
name|model
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|fetchMore
argument_list|()
expr_stmt|;
comment|// necessary???
name|bool
name|isToUpper
init|=
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Interbase
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Oracle
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|DB2
operator|)
decl_stmt|;
specifier|const
name|QString
name|idColumn
argument_list|(
name|isToUpper
condition|?
literal|"ID"
else|:
literal|"id"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|nameColumn
argument_list|(
name|isToUpper
condition|?
literal|"NAME"
else|:
literal|"name"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|titleColumn
argument_list|(
name|isToUpper
condition|?
literal|"TITLE"
else|:
literal|"title"
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|columnsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"harry"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|idColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nameColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|titleColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|3
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|insertColumn
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"harry"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|data
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QVariant
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|idColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nameColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|3
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|titleColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|4
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|insertColumn
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|insertColumn
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|insertColumn
argument_list|(
literal|1
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|insertColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|insertColumn
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|insertColumn
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|*
operator|(
name|QModelIndex
operator|*
operator|)
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
operator|==
name|QModelIndex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|indexInQuery
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
operator|.
name|column
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|idColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|3
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|nameColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|4
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|titleColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|5
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|record
argument_list|()
operator|.
name|field
argument_list|(
literal|6
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|idColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|3
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|nameColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|4
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|titleColumn
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|5
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|6
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|record
name|void
name|tst_QSqlQueryModel
operator|::
name|record
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriver
operator|::
name|DbmsType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QSqlRecord
name|rec
init|=
name|model
operator|.
name|record
argument_list|()
decl_stmt|;
name|bool
name|isToUpper
init|=
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Interbase
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Oracle
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|DB2
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"ID"
argument_list|)
else|:
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"NAME"
argument_list|)
else|:
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"TITLE"
argument_list|)
else|:
name|QString
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|0
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|1
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|rec
operator|.
name|field
argument_list|(
literal|2
argument_list|)
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rec
operator|=
name|model
operator|.
name|record
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|0
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"ID"
argument_list|)
else|:
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|1
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"NAME"
argument_list|)
else|:
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|fieldName
argument_list|(
literal|2
argument_list|)
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"TITLE"
argument_list|)
else|:
name|QString
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QVariant
argument_list|(
literal|"harry"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rec
operator|.
name|value
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QVariant
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHeaderData
name|void
name|tst_QSqlQueryModel
operator|::
name|setHeaderData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QSqlDriver
operator|::
name|DbmsType
name|dbType
init|=
name|tst_Databases
operator|::
name|getDatabaseType
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|setHeaderData
argument_list|(
literal|5
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|5
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|Qt
operator|::
name|Orientation
argument_list|>
argument_list|(
literal|"Qt::Orientation"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|headerDataChanged
argument_list|(
name|Qt
operator|::
name|Orientation
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|setHeaderData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|Qt
operator|::
name|Orientation
argument_list|>
argument_list|(
name|spy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|setHeaderData
argument_list|(
literal|7
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"foo"
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|model
operator|.
name|headerData
argument_list|(
literal|7
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|Qt
operator|::
name|ToolTipRole
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|isToUpper
init|=
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Interbase
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|Oracle
operator|)
operator|||
operator|(
name|dbType
operator|==
name|QSqlDriver
operator|::
name|DB2
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"ID"
argument_list|)
else|:
name|QString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|isToUpper
condition|?
name|QString
argument_list|(
literal|"NAME"
argument_list|)
else|:
name|QString
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|model
operator|.
name|headerData
argument_list|(
literal|3
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fetchMore
name|void
name|tst_QSqlQueryModel
operator|::
name|fetchMore
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|QSignalSpy
name|modelAboutToBeResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"select * from "
operator|+
name|qTableName
argument_list|(
literal|"many"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
name|model
operator|.
name|rowCount
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|modelAboutToBeResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// If the driver doesn't return the query size fetchMore() causes the
comment|// model to grow and new signals are emitted
name|QSignalSpy
name|rowsInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|QuerySize
argument_list|)
condition|)
block|{
name|model
operator|.
name|fetchMore
argument_list|()
expr_stmt|;
name|int
name|newRowCount
init|=
name|model
operator|.
name|rowCount
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|rowsInsertedSpy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|rowsInsertedSpy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|newRowCount
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// For task 149491: When used with QSortFilterProxyModel, a view and a
end_comment
begin_comment
comment|// database that doesn't support the QuerySize feature, blank rows was
end_comment
begin_comment
comment|// appended if the query returned more than 256 rows and setQuery()
end_comment
begin_comment
comment|// was called more than once. This because an insertion of rows was
end_comment
begin_comment
comment|// triggered at the same time as the model was being cleared.
end_comment
begin_function
DECL|function|withSortFilterProxyModel
name|void
name|tst_QSqlQueryModel
operator|::
name|withSortFilterProxyModel
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|driver
argument_list|()
operator|->
name|hasFeature
argument_list|(
name|QSqlDriver
operator|::
name|QuerySize
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Test applies only for drivers not reporting the query size."
argument_list|)
expr_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QSortFilterProxyModel
name|proxy
decl_stmt|;
name|proxy
operator|.
name|setSourceModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QTableView
name|view
decl_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|QSignalSpy
name|modelAboutToBeResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelRowsInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|scrollToBottom
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxy
operator|.
name|rowCount
argument_list|()
argument_list|,
literal|511
argument_list|)
expr_stmt|;
comment|// setQuery() resets the model accompanied by begin and end signals
name|QCOMPARE
argument_list|(
name|modelAboutToBeResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// The call to scrollToBottom() forces the model to fetch additional rows.
name|QCOMPARE
argument_list|(
name|modelRowsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelRowsInsertedSpy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelRowsInsertedSpy
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|510
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For task 155402: When the model is already empty when setQuery() is called
end_comment
begin_comment
comment|// no rows have to be removed and rowsAboutToBeRemoved and rowsRemoved should
end_comment
begin_comment
comment|// not be emitted.
end_comment
begin_function
DECL|function|setQuerySignalEmission
name|void
name|tst_QSqlQueryModel
operator|::
name|setQuerySignalEmission
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|QSignalSpy
name|modelAboutToBeResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelResetSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// First select, the model was empty and no rows had to be removed, but model resets anyway.
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelAboutToBeResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Second select, the model wasn't empty and two rows had to be removed!
comment|// setQuery() resets the model accompanied by begin and end signals
name|model
operator|.
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|,
name|db
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelAboutToBeResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelResetSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// For task 170783: When the query's result set is empty no rows should be inserted,
end_comment
begin_comment
comment|// i.e. no rowsAboutToBeInserted or rowsInserted signals should be emitted.
end_comment
begin_function
DECL|function|setQueryWithNoRowsInResultSet
name|void
name|tst_QSqlQueryModel
operator|::
name|setQueryWithNoRowsInResultSet
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|QSignalSpy
name|modelRowsAboutToBeInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsAboutToBeInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|modelRowsInsertedSpy
argument_list|(
operator|&
name|model
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// The query's result set will be empty so no signals should be emitted!
name|QSqlQuery
name|query
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|QVERIFY_SQL
argument_list|(
name|query
argument_list|,
name|exec
argument_list|(
literal|"SELECT * FROM "
operator|+
name|qTableName
argument_list|(
literal|"test"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
operator|+
literal|" where 0 = 1"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelRowsAboutToBeInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|modelRowsInsertedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|NestedResetsTest
class|class
name|NestedResetsTest
super|:
specifier|public
name|QSqlQueryModel
block|{
name|Q_OBJECT
public|public:
DECL|function|NestedResetsTest
name|NestedResetsTest
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSqlQueryModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|gotAboutToBeReset
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|gotReset
argument_list|(
literal|false
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|modelAboutToBeReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|modelAboutToBeResetSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|modelReset
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|modelResetSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|testNested
name|void
name|testNested
parameter_list|()
block|{
comment|// Only the outermost beginResetModel/endResetModel should
comment|// emit signals.
name|gotAboutToBeReset
operator|=
name|gotReset
operator|=
literal|false
expr_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotAboutToBeReset
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gotAboutToBeReset
operator|=
name|gotReset
operator|=
literal|false
expr_stmt|;
name|beginResetModel
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotAboutToBeReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gotAboutToBeReset
operator|=
name|gotReset
operator|=
literal|false
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotAboutToBeReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gotAboutToBeReset
operator|=
name|gotReset
operator|=
literal|false
expr_stmt|;
name|endResetModel
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotAboutToBeReset
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gotReset
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|function|testClear
name|void
name|testClear
parameter_list|()
comment|// QTBUG-49404: Basic test whether clear() emits signals.
block|{
name|gotAboutToBeReset
operator|=
name|gotReset
operator|=
literal|false
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|gotAboutToBeReset
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|gotReset
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|modelAboutToBeResetSlot
name|void
name|modelAboutToBeResetSlot
parameter_list|()
block|{
name|gotAboutToBeReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|modelResetSlot
name|void
name|modelResetSlot
parameter_list|()
block|{
name|gotReset
operator|=
literal|true
expr_stmt|;
block|}
private|private:
DECL|member|gotAboutToBeReset
name|bool
name|gotAboutToBeReset
decl_stmt|;
DECL|member|gotReset
name|bool
name|gotReset
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|nestedResets
name|void
name|tst_QSqlQueryModel
operator|::
name|nestedResets
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|NestedResetsTest
name|t
decl_stmt|;
name|t
operator|.
name|testClear
argument_list|()
expr_stmt|;
name|t
operator|.
name|testNested
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// For task 180617
end_comment
begin_comment
comment|// According to the task, several specific duplicate SQL queries would cause
end_comment
begin_comment
comment|// multiple empty grid lines to be visible in the view
end_comment
begin_function
DECL|function|task_180617
name|void
name|tst_QSqlQueryModel
operator|::
name|task_180617
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|database
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|CHECK_DATABASE
argument_list|(
name|db
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|test3
argument_list|(
name|qTableName
argument_list|(
literal|"test3"
argument_list|,
name|__FILE__
argument_list|,
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|QTableView
name|view
decl_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|columnAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|rowAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QSqlQueryModel
name|model
decl_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
literal|"SELECT TOP 0 * FROM "
operator|+
name|test3
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|view
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|bool
name|error
init|=
literal|false
decl_stmt|;
comment|// Usually a syntax error
if|if
condition|(
name|model
operator|.
name|lastError
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
comment|// usually a syntax error
name|error
operator|=
literal|true
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|columnAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|error
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|rowAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
literal|"SELECT TOP 0 * FROM "
operator|+
name|test3
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
literal|"SELECT TOP 0 * FROM "
operator|+
name|test3
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
literal|"SELECT TOP 0 * FROM "
operator|+
name|test3
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|model
operator|.
name|setQuery
argument_list|(
literal|"SELECT TOP 0 * FROM "
operator|+
name|test3
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|columnAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|error
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|view
operator|.
name|rowAt
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_QTBUG_4963_setHeaderDataWithProxyModel
name|void
name|tst_QSqlQueryModel
operator|::
name|task_QTBUG_4963_setHeaderDataWithProxyModel
parameter_list|()
block|{
name|QSqlQueryModel
name|plainModel
decl_stmt|;
name|QSortFilterProxyModel
name|proxyModel
decl_stmt|;
name|proxyModel
operator|.
name|setSourceModel
argument_list|(
operator|&
name|plainModel
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|plainModel
operator|.
name|setHeaderData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
name|QObject
operator|::
name|tr
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// And it should not crash.
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSqlQueryModel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsqlquerymodel.moc"
end_include
end_unit
