begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
DECL|struct|TestTemplate
name|TestTemplate
block|{
DECL|member|blah
name|T
operator|*
name|blah
block|; }
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|SlotsWithVoidTemplateTest
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
name|slots
operator|:
specifier|inline
name|void
name|dummySlot
argument_list|()
block|{}
specifier|inline
name|void
name|anotherSlot
argument_list|(
argument|const TestTemplate<void>&
argument_list|)
block|{}
specifier|inline
name|TestTemplate
operator|<
name|void
operator|>
name|mySlot
argument_list|()
block|{
return|return
name|TestTemplate
operator|<
name|void
operator|>
operator|(
operator|)
return|;
block|}
name|signals
operator|:
name|void
name|mySignal
argument_list|(
specifier|const
name|TestTemplate
operator|<
name|void
operator|>
operator|&
argument_list|)
block|;
name|void
name|myVoidSignal
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt
end_unit
